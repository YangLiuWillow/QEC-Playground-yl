//! build (complete) model graph and (compete) syndrome graph from simulator and measurement results
//! 

use super::simulator::*;
use super::util_macros::*;

/// edges connecting two nontrivial measurements generated by a single error
pub struct ModelGraph {
    pub nodes: Vec::< Vec::< Vec::< Option< Box< ModelGraphNode > > > > >,
}

pub struct ModelGraphNode {

}


// /// edges associating four nontrivial measurements generated by a single error
// pub struct TailoredModelGraph {

// }

impl ModelGraph {
    /// initialize the structure corresponding to a `Simulator`
    pub fn new(simulator: &Simulator) -> Self {
        assert!(simulator.volume() > 0, "cannot build graph out of zero-sized simulator");
        Self {
            nodes: (0..simulator.height).map(|t| {
                (0..simulator.vertical).map(|i| {
                    (0..simulator.horizontal).map(|j| {
                        if simulator.is_node_exist(&pos!(t, i, j)) {
                            Some(Box::new(ModelGraphNode {
                                
                            }))
                        } else {
                            None
                        }
                    }).collect()
                }).collect()
            }).collect()
        }
    }

    /// get mutable `self.nodes[t][i][j]` and unwrap
    pub fn get_node_mut_unwrap(&'_ mut self, position: &Position) -> &'_ mut ModelGraphNode {
        self.nodes[position.t][position.i][position.j].as_mut().unwrap()
    }

    /// build model graph given the simulator
    pub fn build(&mut self, simulator: &mut Simulator) {

    }
}
