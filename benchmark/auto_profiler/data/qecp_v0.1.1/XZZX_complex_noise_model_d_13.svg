<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="70295"><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.02%)</title><rect x="0.0384%" y="133" width="0.0242%" height="15" fill="rgb(227,0,7)" fg:x="27" fg:w="17"/><text x="0.2884%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="0.0626%" y="133" width="0.0171%" height="15" fill="rgb(217,0,24)" fg:x="44" fg:w="12"/><text x="0.3126%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.06%)</title><rect x="0.0228%" y="149" width="0.0583%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="41"/><text x="0.2728%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (52 samples, 0.07%)</title><rect x="0.1181%" y="53" width="0.0740%" height="15" fill="rgb(248,212,6)" fg:x="83" fg:w="52"/><text x="0.3681%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (13 samples, 0.02%)</title><rect x="0.1920%" y="53" width="0.0185%" height="15" fill="rgb(208,68,35)" fg:x="135" fg:w="13"/><text x="0.4420%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="0.1920%" y="37" width="0.0185%" height="15" fill="rgb(232,128,0)" fg:x="135" fg:w="13"/><text x="0.4420%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (73 samples, 0.10%)</title><rect x="0.1181%" y="69" width="0.1038%" height="15" fill="rgb(207,160,47)" fg:x="83" fg:w="73"/><text x="0.3681%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="0.2105%" y="53" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="148" fg:w="8"/><text x="0.4605%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.2105%" y="37" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="148" fg:w="8"/><text x="0.4605%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.01%)</title><rect x="0.2248%" y="69" width="0.0114%" height="15" fill="rgb(220,122,19)" fg:x="158" fg:w="8"/><text x="0.4748%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.01%)</title><rect x="0.2248%" y="53" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="158" fg:w="8"/><text x="0.4748%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.08%)</title><rect x="0.2390%" y="69" width="0.0825%" height="15" fill="rgb(240,193,28)" fg:x="168" fg:w="58"/><text x="0.4890%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (151 samples, 0.21%)</title><rect x="0.1110%" y="149" width="0.2148%" height="15" fill="rgb(216,20,37)" fg:x="78" fg:w="151"/><text x="0.3610%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (151 samples, 0.21%)</title><rect x="0.1110%" y="133" width="0.2148%" height="15" fill="rgb(206,188,39)" fg:x="78" fg:w="151"/><text x="0.3610%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 0.21%)</title><rect x="0.1110%" y="117" width="0.2148%" height="15" fill="rgb(217,207,13)" fg:x="78" fg:w="151"/><text x="0.3610%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 0.21%)</title><rect x="0.1110%" y="101" width="0.2148%" height="15" fill="rgb(231,73,38)" fg:x="78" fg:w="151"/><text x="0.3610%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (146 samples, 0.21%)</title><rect x="0.1181%" y="85" width="0.2077%" height="15" fill="rgb(225,20,46)" fg:x="83" fg:w="146"/><text x="0.3681%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.02%)</title><rect x="0.3286%" y="85" width="0.0171%" height="15" fill="rgb(210,31,41)" fg:x="231" fg:w="12"/><text x="0.5786%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (32 samples, 0.05%)</title><rect x="0.3258%" y="149" width="0.0455%" height="15" fill="rgb(221,200,47)" fg:x="229" fg:w="32"/><text x="0.5758%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.3258%" y="133" width="0.0455%" height="15" fill="rgb(226,26,5)" fg:x="229" fg:w="32"/><text x="0.5758%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.3258%" y="117" width="0.0455%" height="15" fill="rgb(249,33,26)" fg:x="229" fg:w="32"/><text x="0.5758%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (30 samples, 0.04%)</title><rect x="0.3286%" y="101" width="0.0427%" height="15" fill="rgb(235,183,28)" fg:x="231" fg:w="30"/><text x="0.5786%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (17 samples, 0.02%)</title><rect x="0.3471%" y="85" width="0.0242%" height="15" fill="rgb(221,5,38)" fg:x="244" fg:w="17"/><text x="0.5971%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (506 samples, 0.72%)</title><rect x="0.3713%" y="149" width="0.7198%" height="15" fill="rgb(247,18,42)" fg:x="261" fg:w="506"/><text x="0.6213%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (156 samples, 0.22%)</title><rect x="1.0911%" y="149" width="0.2219%" height="15" fill="rgb(241,131,45)" fg:x="767" fg:w="156"/><text x="1.3411%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.02%)</title><rect x="1.3130%" y="149" width="0.0171%" height="15" fill="rgb(249,31,29)" fg:x="923" fg:w="12"/><text x="1.5630%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (75 samples, 0.11%)</title><rect x="5.8354%" y="133" width="0.1067%" height="15" fill="rgb(225,111,53)" fg:x="4102" fg:w="75"/><text x="6.0854%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.11%)</title><rect x="5.9421%" y="133" width="0.1095%" height="15" fill="rgb(238,160,17)" fg:x="4177" fg:w="77"/><text x="6.1921%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (49 samples, 0.07%)</title><rect x="6.0516%" y="133" width="0.0697%" height="15" fill="rgb(214,148,48)" fg:x="4254" fg:w="49"/><text x="6.3016%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (481 samples, 0.68%)</title><rect x="6.1213%" y="133" width="0.6843%" height="15" fill="rgb(232,36,49)" fg:x="4303" fg:w="481"/><text x="6.3713%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="6.8070%" y="85" width="0.0114%" height="15" fill="rgb(209,103,24)" fg:x="4785" fg:w="8"/><text x="7.0570%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="6.8056%" y="133" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="4784" fg:w="11"/><text x="7.0556%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="6.8056%" y="117" width="0.0156%" height="15" fill="rgb(213,181,19)" fg:x="4784" fg:w="11"/><text x="7.0556%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.01%)</title><rect x="6.8070%" y="101" width="0.0142%" height="15" fill="rgb(254,191,54)" fg:x="4785" fg:w="10"/><text x="7.0570%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 0.12%)</title><rect x="7.4173%" y="117" width="0.1152%" height="15" fill="rgb(241,83,37)" fg:x="5214" fg:w="81"/><text x="7.6673%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="7.5695%" y="101" width="0.0142%" height="15" fill="rgb(233,36,39)" fg:x="5321" fg:w="10"/><text x="7.8195%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="7.5838%" y="101" width="0.0114%" height="15" fill="rgb(226,3,54)" fg:x="5331" fg:w="8"/><text x="7.8338%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (702 samples, 1.00%)</title><rect x="6.8213%" y="133" width="0.9986%" height="15" fill="rgb(245,192,40)" fg:x="4795" fg:w="702"/><text x="7.0713%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (201 samples, 0.29%)</title><rect x="7.5340%" y="117" width="0.2859%" height="15" fill="rgb(238,167,29)" fg:x="5296" fg:w="201"/><text x="7.7840%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (158 samples, 0.22%)</title><rect x="7.5951%" y="101" width="0.2248%" height="15" fill="rgb(232,182,51)" fg:x="5339" fg:w="158"/><text x="7.8451%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (17 samples, 0.02%)</title><rect x="7.8299%" y="133" width="0.0242%" height="15" fill="rgb(231,60,39)" fg:x="5504" fg:w="17"/><text x="8.0799%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (158 samples, 0.22%)</title><rect x="10.4815%" y="117" width="0.2248%" height="15" fill="rgb(208,69,12)" fg:x="7368" fg:w="158"/><text x="10.7315%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (432 samples, 0.61%)</title><rect x="10.7092%" y="117" width="0.6146%" height="15" fill="rgb(235,93,37)" fg:x="7528" fg:w="432"/><text x="10.9592%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (28 samples, 0.04%)</title><rect x="11.3678%" y="101" width="0.0398%" height="15" fill="rgb(213,116,39)" fg:x="7991" fg:w="28"/><text x="11.6178%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,568 samples, 3.65%)</title><rect x="7.8540%" y="133" width="3.6532%" height="15" fill="rgb(222,207,29)" fg:x="5521" fg:w="2568"/><text x="8.1040%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (129 samples, 0.18%)</title><rect x="11.3237%" y="117" width="0.1835%" height="15" fill="rgb(206,96,30)" fg:x="7960" fg:w="129"/><text x="11.5737%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (70 samples, 0.10%)</title><rect x="11.4076%" y="101" width="0.0996%" height="15" fill="rgb(218,138,4)" fg:x="8019" fg:w="70"/><text x="11.6576%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,150 samples, 10.17%)</title><rect x="1.3372%" y="149" width="10.1714%" height="15" fill="rgb(250,191,14)" fg:x="940" fg:w="7150"/><text x="1.5872%" y="159.50">rust_qecp`rust_..</text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="11.5513%" y="133" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="8120" fg:w="8"/><text x="11.8013%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (361 samples, 0.51%)</title><rect x="11.5727%" y="133" width="0.5136%" height="15" fill="rgb(206,27,48)" fg:x="8135" fg:w="361"/><text x="11.8227%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="12.0862%" y="133" width="0.0313%" height="15" fill="rgb(225,35,8)" fg:x="8496" fg:w="22"/><text x="12.3362%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="12.1260%" y="133" width="0.0128%" height="15" fill="rgb(250,213,24)" fg:x="8524" fg:w="9"/><text x="12.3760%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (19 samples, 0.03%)</title><rect x="12.1417%" y="133" width="0.0270%" height="15" fill="rgb(247,123,22)" fg:x="8535" fg:w="19"/><text x="12.3917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="13.1389%" y="101" width="0.0270%" height="15" fill="rgb(231,138,38)" fg:x="9236" fg:w="19"/><text x="13.3889%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.08%)</title><rect x="13.0863%" y="117" width="0.0811%" height="15" fill="rgb(231,145,46)" fg:x="9199" fg:w="57"/><text x="13.3363%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="13.1773%" y="117" width="0.0156%" height="15" fill="rgb(251,118,11)" fg:x="9263" fg:w="11"/><text x="13.4273%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.07%)</title><rect x="13.2015%" y="117" width="0.0683%" height="15" fill="rgb(217,147,25)" fg:x="9280" fg:w="48"/><text x="13.4515%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="13.4007%" y="37" width="0.0142%" height="15" fill="rgb(247,81,37)" fg:x="9420" fg:w="10"/><text x="13.6507%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.06%)</title><rect x="13.3594%" y="53" width="0.0612%" height="15" fill="rgb(209,12,38)" fg:x="9391" fg:w="43"/><text x="13.6094%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.12%)</title><rect x="13.3039%" y="85" width="0.1238%" height="15" fill="rgb(227,1,9)" fg:x="9352" fg:w="87"/><text x="13.5539%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (58 samples, 0.08%)</title><rect x="13.3452%" y="69" width="0.0825%" height="15" fill="rgb(248,47,43)" fg:x="9381" fg:w="58"/><text x="13.5952%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (115 samples, 0.16%)</title><rect x="13.2698%" y="117" width="0.1636%" height="15" fill="rgb(221,10,30)" fg:x="9328" fg:w="115"/><text x="13.5198%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (95 samples, 0.14%)</title><rect x="13.2982%" y="101" width="0.1351%" height="15" fill="rgb(210,229,1)" fg:x="9348" fg:w="95"/><text x="13.5482%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (24 samples, 0.03%)</title><rect x="13.4405%" y="117" width="0.0341%" height="15" fill="rgb(222,148,37)" fg:x="9448" fg:w="24"/><text x="13.6905%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (41 samples, 0.06%)</title><rect x="13.4746%" y="117" width="0.0583%" height="15" fill="rgb(234,67,33)" fg:x="9472" fg:w="41"/><text x="13.7246%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.03%)</title><rect x="13.5031%" y="101" width="0.0299%" height="15" fill="rgb(247,98,35)" fg:x="9492" fg:w="21"/><text x="13.7531%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (34 samples, 0.05%)</title><rect x="13.5330%" y="117" width="0.0484%" height="15" fill="rgb(247,138,52)" fg:x="9513" fg:w="34"/><text x="13.7830%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (1,781 samples, 2.53%)</title><rect x="12.1701%" y="133" width="2.5336%" height="15" fill="rgb(213,79,30)" fg:x="8555" fg:w="1781"/><text x="12.4201%" y="143.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (789 samples, 1.12%)</title><rect x="13.5813%" y="117" width="1.1224%" height="15" fill="rgb(246,177,23)" fg:x="9547" fg:w="789"/><text x="13.8313%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (2,267 samples, 3.22%)</title><rect x="11.5086%" y="149" width="3.2250%" height="15" fill="rgb(230,62,27)" fg:x="8090" fg:w="2267"/><text x="11.7586%" y="159.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (18 samples, 0.03%)</title><rect x="14.7080%" y="133" width="0.0256%" height="15" fill="rgb(216,154,8)" fg:x="10339" fg:w="18"/><text x="14.9580%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_XZZX_code_rectangle (9 samples, 0.01%)</title><rect x="14.7336%" y="149" width="0.0128%" height="15" fill="rgb(244,35,45)" fg:x="10357" fg:w="9"/><text x="14.9836%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (9 samples, 0.01%)</title><rect x="14.7336%" y="133" width="0.0128%" height="15" fill="rgb(251,115,12)" fg:x="10357" fg:w="9"/><text x="14.9836%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (21 samples, 0.03%)</title><rect x="14.7820%" y="117" width="0.0299%" height="15" fill="rgb(240,54,50)" fg:x="10391" fg:w="21"/><text x="15.0320%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="14.7919%" y="101" width="0.0199%" height="15" fill="rgb(233,84,52)" fg:x="10398" fg:w="14"/><text x="15.0419%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (47 samples, 0.07%)</title><rect x="14.7464%" y="149" width="0.0669%" height="15" fill="rgb(207,117,47)" fg:x="10366" fg:w="47"/><text x="14.9964%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (37 samples, 0.05%)</title><rect x="14.7607%" y="133" width="0.0526%" height="15" fill="rgb(249,43,39)" fg:x="10376" fg:w="37"/><text x="15.0107%" y="143.50"></text></g><g><title>dyld`start (10,425 samples, 14.83%)</title><rect x="0.0000%" y="373" width="14.8304%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="10425"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>rust_qecp`main (10,421 samples, 14.82%)</title><rect x="0.0057%" y="357" width="14.8247%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="367.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (10,421 samples, 14.82%)</title><rect x="0.0057%" y="341" width="14.8247%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="351.50">rust_qecp`std::rt::lang..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (10,421 samples, 14.82%)</title><rect x="0.0057%" y="325" width="14.8247%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="335.50">rust_qecp`std::rt::lang..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (10,421 samples, 14.82%)</title><rect x="0.0057%" y="309" width="14.8247%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="319.50">rust_qecp`std::sys_comm..</text></g><g><title>rust_qecp`rust_qecp::main (10,421 samples, 14.82%)</title><rect x="0.0057%" y="293" width="14.8247%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="303.50">rust_qecp`rust_qecp::ma..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (10,421 samples, 14.82%)</title><rect x="0.0057%" y="277" width="14.8247%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="287.50">rust_qecp`tokio::runtim..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,421 samples, 14.82%)</title><rect x="0.0057%" y="261" width="14.8247%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="271.50">rust_qecp`tokio::macros..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (10,421 samples, 14.82%)</title><rect x="0.0057%" y="245" width="14.8247%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="255.50">rust_qecp`tokio::runtim..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,421 samples, 14.82%)</title><rect x="0.0057%" y="229" width="14.8247%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="239.50">rust_qecp`&lt;core::future..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,421 samples, 14.82%)</title><rect x="0.0057%" y="213" width="14.8247%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="223.50">rust_qecp`tokio::macros..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,421 samples, 14.82%)</title><rect x="0.0057%" y="197" width="14.8247%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="207.50">rust_qecp`&lt;core::future..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (10,421 samples, 14.82%)</title><rect x="0.0057%" y="181" width="14.8247%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="191.50">rust_qecp`rust_qecp::to..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (10,421 samples, 14.82%)</title><rect x="0.0057%" y="165" width="14.8247%" height="15" fill="rgb(224,169,11)" fg:x="4" fg:w="10421"/><text x="0.2557%" y="175.50">rust_qecp`rust_qecp::to..</text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="14.8545%" y="293" width="0.0171%" height="15" fill="rgb(250,166,2)" fg:x="10442" fg:w="12"/><text x="15.1045%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (69 samples, 0.10%)</title><rect x="14.8716%" y="293" width="0.0982%" height="15" fill="rgb(242,216,29)" fg:x="10454" fg:w="69"/><text x="15.1216%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (69 samples, 0.10%)</title><rect x="14.8716%" y="277" width="0.0982%" height="15" fill="rgb(230,116,27)" fg:x="10454" fg:w="69"/><text x="15.1216%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.01%)</title><rect x="14.9698%" y="293" width="0.0142%" height="15" fill="rgb(228,99,48)" fg:x="10523" fg:w="10"/><text x="15.2198%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="14.9726%" y="277" width="0.0114%" height="15" fill="rgb(253,11,6)" fg:x="10525" fg:w="8"/><text x="15.2226%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="14.9854%" y="293" width="0.0185%" height="15" fill="rgb(247,143,39)" fg:x="10534" fg:w="13"/><text x="15.2354%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="15.0053%" y="293" width="0.0285%" height="15" fill="rgb(236,97,10)" fg:x="10548" fg:w="20"/><text x="15.2553%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.07%)</title><rect x="15.0366%" y="293" width="0.0654%" height="15" fill="rgb(233,208,19)" fg:x="10570" fg:w="46"/><text x="15.2866%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="15.1803%" y="261" width="0.0285%" height="15" fill="rgb(216,164,2)" fg:x="10671" fg:w="20"/><text x="15.4303%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.09%)</title><rect x="15.1206%" y="277" width="0.0896%" height="15" fill="rgb(220,129,5)" fg:x="10629" fg:w="63"/><text x="15.3706%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (69 samples, 0.10%)</title><rect x="15.2187%" y="277" width="0.0982%" height="15" fill="rgb(242,17,10)" fg:x="10698" fg:w="69"/><text x="15.4687%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (54 samples, 0.08%)</title><rect x="15.2401%" y="261" width="0.0768%" height="15" fill="rgb(242,107,0)" fg:x="10713" fg:w="54"/><text x="15.4901%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (54 samples, 0.08%)</title><rect x="15.2401%" y="245" width="0.0768%" height="15" fill="rgb(251,28,31)" fg:x="10713" fg:w="54"/><text x="15.4901%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.22%)</title><rect x="15.1021%" y="293" width="0.2191%" height="15" fill="rgb(233,223,10)" fg:x="10616" fg:w="154"/><text x="15.3521%" y="303.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (13 samples, 0.02%)</title><rect x="15.3354%" y="293" width="0.0185%" height="15" fill="rgb(215,21,27)" fg:x="10780" fg:w="13"/><text x="15.5854%" y="303.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (13 samples, 0.02%)</title><rect x="15.3354%" y="277" width="0.0185%" height="15" fill="rgb(232,23,21)" fg:x="10780" fg:w="13"/><text x="15.5854%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.3354%" y="261" width="0.0185%" height="15" fill="rgb(244,5,23)" fg:x="10780" fg:w="13"/><text x="15.5854%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.3354%" y="245" width="0.0185%" height="15" fill="rgb(226,81,46)" fg:x="10780" fg:w="13"/><text x="15.5854%" y="255.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (12 samples, 0.02%)</title><rect x="15.3368%" y="229" width="0.0171%" height="15" fill="rgb(247,70,30)" fg:x="10781" fg:w="12"/><text x="15.5868%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="15.3610%" y="293" width="0.0185%" height="15" fill="rgb(212,68,19)" fg:x="10798" fg:w="13"/><text x="15.6110%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.05%)</title><rect x="15.4079%" y="277" width="0.0498%" height="15" fill="rgb(240,187,13)" fg:x="10831" fg:w="35"/><text x="15.6579%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.04%)</title><rect x="15.4207%" y="261" width="0.0370%" height="15" fill="rgb(223,113,26)" fg:x="10840" fg:w="26"/><text x="15.6707%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.03%)</title><rect x="15.4250%" y="245" width="0.0327%" height="15" fill="rgb(206,192,2)" fg:x="10843" fg:w="23"/><text x="15.6750%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="15.4378%" y="229" width="0.0199%" height="15" fill="rgb(241,108,4)" fg:x="10852" fg:w="14"/><text x="15.6878%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.07%)</title><rect x="15.4648%" y="277" width="0.0654%" height="15" fill="rgb(247,173,49)" fg:x="10871" fg:w="46"/><text x="15.7148%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="15.5175%" y="261" width="0.0128%" height="15" fill="rgb(224,114,35)" fg:x="10908" fg:w="9"/><text x="15.7675%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="15.5431%" y="277" width="0.0270%" height="15" fill="rgb(245,159,27)" fg:x="10926" fg:w="19"/><text x="15.7931%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="15.5701%" y="277" width="0.0285%" height="15" fill="rgb(245,172,44)" fg:x="10945" fg:w="20"/><text x="15.8201%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (14 samples, 0.02%)</title><rect x="15.6014%" y="277" width="0.0199%" height="15" fill="rgb(236,23,11)" fg:x="10967" fg:w="14"/><text x="15.8514%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (190 samples, 0.27%)</title><rect x="15.6213%" y="277" width="0.2703%" height="15" fill="rgb(205,117,38)" fg:x="10981" fg:w="190"/><text x="15.8713%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.05%)</title><rect x="15.8930%" y="277" width="0.0526%" height="15" fill="rgb(237,72,25)" fg:x="11172" fg:w="37"/><text x="16.1430%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.38%)</title><rect x="15.9457%" y="277" width="0.3756%" height="15" fill="rgb(244,70,9)" fg:x="11209" fg:w="264"/><text x="16.1957%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (26 samples, 0.04%)</title><rect x="16.3212%" y="277" width="0.0370%" height="15" fill="rgb(217,125,39)" fg:x="11473" fg:w="26"/><text x="16.5712%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="16.3582%" y="277" width="0.0213%" height="15" fill="rgb(235,36,10)" fg:x="11499" fg:w="15"/><text x="16.6082%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="16.3810%" y="277" width="0.0156%" height="15" fill="rgb(251,123,47)" fg:x="11515" fg:w="11"/><text x="16.6310%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.06%)</title><rect x="16.4051%" y="277" width="0.0612%" height="15" fill="rgb(221,13,13)" fg:x="11532" fg:w="43"/><text x="16.6551%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (299 samples, 0.43%)</title><rect x="16.4663%" y="277" width="0.4254%" height="15" fill="rgb(238,131,9)" fg:x="11575" fg:w="299"/><text x="16.7163%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (29 samples, 0.04%)</title><rect x="16.8917%" y="277" width="0.0413%" height="15" fill="rgb(211,50,8)" fg:x="11874" fg:w="29"/><text x="17.1417%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="16.9329%" y="277" width="0.0213%" height="15" fill="rgb(245,182,24)" fg:x="11903" fg:w="15"/><text x="17.1829%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (12 samples, 0.02%)</title><rect x="16.9614%" y="277" width="0.0171%" height="15" fill="rgb(242,14,37)" fg:x="11923" fg:w="12"/><text x="17.2114%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.06%)</title><rect x="18.5063%" y="261" width="0.0583%" height="15" fill="rgb(246,228,12)" fg:x="13009" fg:w="41"/><text x="18.7563%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="18.5291%" y="245" width="0.0356%" height="15" fill="rgb(213,55,15)" fg:x="13025" fg:w="25"/><text x="18.7791%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.03%)</title><rect x="18.5305%" y="229" width="0.0341%" height="15" fill="rgb(209,9,3)" fg:x="13026" fg:w="24"/><text x="18.7805%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="18.6386%" y="229" width="0.0171%" height="15" fill="rgb(230,59,30)" fg:x="13102" fg:w="12"/><text x="18.8886%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="18.6443%" y="213" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="13106" fg:w="8"/><text x="18.8943%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.04%)</title><rect x="18.6699%" y="181" width="0.0441%" height="15" fill="rgb(220,109,13)" fg:x="13124" fg:w="31"/><text x="18.9199%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (37 samples, 0.05%)</title><rect x="18.6685%" y="197" width="0.0526%" height="15" fill="rgb(232,18,1)" fg:x="13123" fg:w="37"/><text x="18.9185%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (41 samples, 0.06%)</title><rect x="18.6642%" y="213" width="0.0583%" height="15" fill="rgb(215,41,42)" fg:x="13120" fg:w="41"/><text x="18.9142%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (59 samples, 0.08%)</title><rect x="18.6571%" y="229" width="0.0839%" height="15" fill="rgb(224,123,36)" fg:x="13115" fg:w="59"/><text x="18.9071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="18.7225%" y="213" width="0.0185%" height="15" fill="rgb(240,125,3)" fg:x="13161" fg:w="13"/><text x="18.9725%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (113 samples, 0.16%)</title><rect x="18.5902%" y="261" width="0.1608%" height="15" fill="rgb(205,98,50)" fg:x="13068" fg:w="113"/><text x="18.8402%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (94 samples, 0.13%)</title><rect x="18.6173%" y="245" width="0.1337%" height="15" fill="rgb(205,185,37)" fg:x="13087" fg:w="94"/><text x="18.8673%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,250 samples, 1.78%)</title><rect x="16.9784%" y="277" width="1.7782%" height="15" fill="rgb(238,207,15)" fg:x="11935" fg:w="1250"/><text x="17.2284%" y="287.50">r..</text></g><g><title>libdyld.dylib`tlv_get_addr (48 samples, 0.07%)</title><rect x="26.3177%" y="261" width="0.0683%" height="15" fill="rgb(213,199,42)" fg:x="18500" fg:w="48"/><text x="26.5677%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.02%)</title><rect x="26.3859%" y="261" width="0.0156%" height="15" fill="rgb(235,201,11)" fg:x="18548" fg:w="11"/><text x="26.6359%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (39 samples, 0.06%)</title><rect x="26.4044%" y="261" width="0.0555%" height="15" fill="rgb(207,46,11)" fg:x="18561" fg:w="39"/><text x="26.6544%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="26.6306%" y="245" width="0.0270%" height="15" fill="rgb(241,35,35)" fg:x="18720" fg:w="19"/><text x="26.8806%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (187 samples, 0.27%)</title><rect x="26.4599%" y="261" width="0.2660%" height="15" fill="rgb(243,32,47)" fg:x="18600" fg:w="187"/><text x="26.7099%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (47 samples, 0.07%)</title><rect x="26.6591%" y="245" width="0.0669%" height="15" fill="rgb(247,202,23)" fg:x="18740" fg:w="47"/><text x="26.9091%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (42 samples, 0.06%)</title><rect x="26.6662%" y="229" width="0.0597%" height="15" fill="rgb(219,102,11)" fg:x="18745" fg:w="42"/><text x="26.9162%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.04%)</title><rect x="26.7302%" y="245" width="0.0398%" height="15" fill="rgb(243,110,44)" fg:x="18790" fg:w="28"/><text x="26.9802%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (33 samples, 0.05%)</title><rect x="26.7259%" y="261" width="0.0469%" height="15" fill="rgb(222,74,54)" fg:x="18787" fg:w="33"/><text x="26.9759%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.02%)</title><rect x="26.9649%" y="229" width="0.0242%" height="15" fill="rgb(216,99,12)" fg:x="18955" fg:w="17"/><text x="27.2149%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (161 samples, 0.23%)</title><rect x="26.7828%" y="261" width="0.2290%" height="15" fill="rgb(226,22,26)" fg:x="18827" fg:w="161"/><text x="27.0328%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (117 samples, 0.17%)</title><rect x="26.8454%" y="245" width="0.1664%" height="15" fill="rgb(217,163,10)" fg:x="18871" fg:w="117"/><text x="27.0954%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.02%)</title><rect x="26.9891%" y="229" width="0.0228%" height="15" fill="rgb(213,25,53)" fg:x="18972" fg:w="16"/><text x="27.2391%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (56 samples, 0.08%)</title><rect x="27.0133%" y="261" width="0.0797%" height="15" fill="rgb(252,105,26)" fg:x="18989" fg:w="56"/><text x="27.2633%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="27.0930%" y="261" width="0.0299%" height="15" fill="rgb(220,39,43)" fg:x="19045" fg:w="21"/><text x="27.3430%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="27.1228%" y="261" width="0.0228%" height="15" fill="rgb(229,68,48)" fg:x="19066" fg:w="16"/><text x="27.3728%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (25 samples, 0.04%)</title><rect x="27.1456%" y="261" width="0.0356%" height="15" fill="rgb(252,8,32)" fg:x="19082" fg:w="25"/><text x="27.3956%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="27.1812%" y="261" width="0.0128%" height="15" fill="rgb(223,20,43)" fg:x="19107" fg:w="9"/><text x="27.4312%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="27.1940%" y="261" width="0.0156%" height="15" fill="rgb(229,81,49)" fg:x="19116" fg:w="11"/><text x="27.4440%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="27.2096%" y="261" width="0.0199%" height="15" fill="rgb(236,28,36)" fg:x="19127" fg:w="14"/><text x="27.4596%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (92 samples, 0.13%)</title><rect x="27.2551%" y="245" width="0.1309%" height="15" fill="rgb(249,185,26)" fg:x="19159" fg:w="92"/><text x="27.5051%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="27.3561%" y="229" width="0.0299%" height="15" fill="rgb(249,174,33)" fg:x="19230" fg:w="21"/><text x="27.6061%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (117 samples, 0.17%)</title><rect x="27.2324%" y="261" width="0.1664%" height="15" fill="rgb(233,201,37)" fg:x="19143" fg:w="117"/><text x="27.4824%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="27.3860%" y="245" width="0.0128%" height="15" fill="rgb(221,78,26)" fg:x="19251" fg:w="9"/><text x="27.6360%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (475 samples, 0.68%)</title><rect x="27.3988%" y="261" width="0.6757%" height="15" fill="rgb(250,127,30)" fg:x="19260" fg:w="475"/><text x="27.6488%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.06%)</title><rect x="28.0745%" y="261" width="0.0640%" height="15" fill="rgb(230,49,44)" fg:x="19735" fg:w="45"/><text x="28.3245%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (42 samples, 0.06%)</title><rect x="28.1386%" y="261" width="0.0597%" height="15" fill="rgb(229,67,23)" fg:x="19780" fg:w="42"/><text x="28.3886%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,474 samples, 2.10%)</title><rect x="28.1983%" y="261" width="2.0969%" height="15" fill="rgb(249,83,47)" fg:x="19822" fg:w="1474"/><text x="28.4483%" y="271.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$free (29 samples, 0.04%)</title><rect x="30.2952%" y="261" width="0.0413%" height="15" fill="rgb(215,43,3)" fg:x="21296" fg:w="29"/><text x="30.5452%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="30.3364%" y="261" width="0.0128%" height="15" fill="rgb(238,154,13)" fg:x="21325" fg:w="9"/><text x="30.5864%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="30.4645%" y="229" width="0.0142%" height="15" fill="rgb(219,56,2)" fg:x="21415" fg:w="10"/><text x="30.7145%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="30.4673%" y="213" width="0.0114%" height="15" fill="rgb(233,0,4)" fg:x="21417" fg:w="8"/><text x="30.7173%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (16 samples, 0.02%)</title><rect x="30.5015%" y="197" width="0.0228%" height="15" fill="rgb(235,30,7)" fg:x="21441" fg:w="16"/><text x="30.7515%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (135 samples, 0.19%)</title><rect x="30.4858%" y="213" width="0.1920%" height="15" fill="rgb(250,79,13)" fg:x="21430" fg:w="135"/><text x="30.7358%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (107 samples, 0.15%)</title><rect x="30.5256%" y="197" width="0.1522%" height="15" fill="rgb(211,146,34)" fg:x="21458" fg:w="107"/><text x="30.7756%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (223 samples, 0.32%)</title><rect x="30.3663%" y="261" width="0.3172%" height="15" fill="rgb(228,22,38)" fg:x="21346" fg:w="223"/><text x="30.6163%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (154 samples, 0.22%)</title><rect x="30.4645%" y="245" width="0.2191%" height="15" fill="rgb(235,168,5)" fg:x="21415" fg:w="154"/><text x="30.7145%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (143 samples, 0.20%)</title><rect x="30.4801%" y="229" width="0.2034%" height="15" fill="rgb(221,155,16)" fg:x="21426" fg:w="143"/><text x="30.7301%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (37 samples, 0.05%)</title><rect x="30.9439%" y="229" width="0.0526%" height="15" fill="rgb(215,215,53)" fg:x="21752" fg:w="37"/><text x="31.1939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="30.9965%" y="229" width="0.0156%" height="15" fill="rgb(223,4,10)" fg:x="21789" fg:w="11"/><text x="31.2465%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (23 samples, 0.03%)</title><rect x="31.0122%" y="229" width="0.0327%" height="15" fill="rgb(234,103,6)" fg:x="21800" fg:w="23"/><text x="31.2622%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (78 samples, 0.11%)</title><rect x="31.0449%" y="229" width="0.1110%" height="15" fill="rgb(227,97,0)" fg:x="21823" fg:w="78"/><text x="31.2949%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.08%)</title><rect x="31.0733%" y="213" width="0.0825%" height="15" fill="rgb(234,150,53)" fg:x="21843" fg:w="58"/><text x="31.3233%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (298 samples, 0.42%)</title><rect x="30.7348%" y="245" width="0.4239%" height="15" fill="rgb(228,201,54)" fg:x="21605" fg:w="298"/><text x="30.9848%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.02%)</title><rect x="31.1587%" y="245" width="0.0228%" height="15" fill="rgb(222,22,37)" fg:x="21903" fg:w="16"/><text x="31.4087%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="31.1601%" y="229" width="0.0213%" height="15" fill="rgb(237,53,32)" fg:x="21904" fg:w="15"/><text x="31.4101%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (61 samples, 0.09%)</title><rect x="31.2967%" y="229" width="0.0868%" height="15" fill="rgb(233,25,53)" fg:x="22000" fg:w="61"/><text x="31.5467%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (11 samples, 0.02%)</title><rect x="31.3835%" y="229" width="0.0156%" height="15" fill="rgb(210,40,34)" fg:x="22061" fg:w="11"/><text x="31.6335%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (18 samples, 0.03%)</title><rect x="31.3991%" y="229" width="0.0256%" height="15" fill="rgb(241,220,44)" fg:x="22072" fg:w="18"/><text x="31.6491%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (107 samples, 0.15%)</title><rect x="31.4247%" y="229" width="0.1522%" height="15" fill="rgb(235,28,35)" fg:x="22090" fg:w="107"/><text x="31.6747%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (261 samples, 0.37%)</title><rect x="31.5812%" y="229" width="0.3713%" height="15" fill="rgb(210,56,17)" fg:x="22200" fg:w="261"/><text x="31.8312%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (258 samples, 0.37%)</title><rect x="31.5855%" y="213" width="0.3670%" height="15" fill="rgb(224,130,29)" fg:x="22203" fg:w="258"/><text x="31.8355%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (633 samples, 0.90%)</title><rect x="31.1814%" y="245" width="0.9005%" height="15" fill="rgb(235,212,8)" fg:x="21919" fg:w="633"/><text x="31.4314%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (91 samples, 0.13%)</title><rect x="31.9525%" y="229" width="0.1295%" height="15" fill="rgb(223,33,50)" fg:x="22461" fg:w="91"/><text x="32.2025%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.13%)</title><rect x="31.9553%" y="213" width="0.1266%" height="15" fill="rgb(219,149,13)" fg:x="22463" fg:w="89"/><text x="32.2053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (20 samples, 0.03%)</title><rect x="32.2783%" y="213" width="0.0285%" height="15" fill="rgb(250,156,29)" fg:x="22690" fg:w="20"/><text x="32.5283%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (63 samples, 0.09%)</title><rect x="32.3067%" y="213" width="0.0896%" height="15" fill="rgb(216,193,19)" fg:x="22710" fg:w="63"/><text x="32.5567%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (55 samples, 0.08%)</title><rect x="32.3963%" y="213" width="0.0782%" height="15" fill="rgb(216,135,14)" fg:x="22773" fg:w="55"/><text x="32.6463%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (29 samples, 0.04%)</title><rect x="32.4746%" y="213" width="0.0413%" height="15" fill="rgb(241,47,5)" fg:x="22828" fg:w="29"/><text x="32.7246%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (42 samples, 0.06%)</title><rect x="32.5158%" y="213" width="0.0597%" height="15" fill="rgb(233,42,35)" fg:x="22857" fg:w="42"/><text x="32.7658%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.04%)</title><rect x="32.5400%" y="197" width="0.0356%" height="15" fill="rgb(231,13,6)" fg:x="22874" fg:w="25"/><text x="32.7900%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (369 samples, 0.52%)</title><rect x="32.1516%" y="229" width="0.5249%" height="15" fill="rgb(207,181,40)" fg:x="22601" fg:w="369"/><text x="32.4016%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (71 samples, 0.10%)</title><rect x="32.5756%" y="213" width="0.1010%" height="15" fill="rgb(254,173,49)" fg:x="22899" fg:w="71"/><text x="32.8256%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (67 samples, 0.10%)</title><rect x="32.5813%" y="197" width="0.0953%" height="15" fill="rgb(221,1,38)" fg:x="22903" fg:w="67"/><text x="32.8313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (420 samples, 0.60%)</title><rect x="32.0819%" y="245" width="0.5975%" height="15" fill="rgb(206,124,46)" fg:x="22552" fg:w="420"/><text x="32.3319%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="32.6794%" y="245" width="0.0213%" height="15" fill="rgb(249,21,11)" fg:x="22972" fg:w="15"/><text x="32.9294%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (116 samples, 0.17%)</title><rect x="32.7008%" y="245" width="0.1650%" height="15" fill="rgb(222,201,40)" fg:x="22987" fg:w="116"/><text x="32.9508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (87 samples, 0.12%)</title><rect x="32.7420%" y="229" width="0.1238%" height="15" fill="rgb(235,61,29)" fg:x="23016" fg:w="87"/><text x="32.9920%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (87 samples, 0.12%)</title><rect x="32.7420%" y="213" width="0.1238%" height="15" fill="rgb(219,207,3)" fg:x="23016" fg:w="87"/><text x="32.9920%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.05%)</title><rect x="32.8658%" y="245" width="0.0484%" height="15" fill="rgb(222,56,46)" fg:x="23103" fg:w="34"/><text x="33.1158%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.03%)</title><rect x="32.9241%" y="245" width="0.0256%" height="15" fill="rgb(239,76,54)" fg:x="23144" fg:w="18"/><text x="33.1741%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.01%)</title><rect x="32.9582%" y="245" width="0.0142%" height="15" fill="rgb(231,124,27)" fg:x="23168" fg:w="10"/><text x="33.2082%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (34 samples, 0.05%)</title><rect x="33.0294%" y="213" width="0.0484%" height="15" fill="rgb(249,195,6)" fg:x="23218" fg:w="34"/><text x="33.2794%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.10%)</title><rect x="32.9810%" y="229" width="0.0982%" height="15" fill="rgb(237,174,47)" fg:x="23184" fg:w="69"/><text x="33.2310%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (26 samples, 0.04%)</title><rect x="33.0834%" y="229" width="0.0370%" height="15" fill="rgb(206,201,31)" fg:x="23256" fg:w="26"/><text x="33.3334%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,719 samples, 2.45%)</title><rect x="30.6864%" y="261" width="2.4454%" height="15" fill="rgb(231,57,52)" fg:x="21571" fg:w="1719"/><text x="30.9364%" y="271.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (110 samples, 0.16%)</title><rect x="32.9753%" y="245" width="0.1565%" height="15" fill="rgb(248,177,22)" fg:x="23180" fg:w="110"/><text x="33.2253%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="33.1204%" y="229" width="0.0114%" height="15" fill="rgb(215,211,37)" fg:x="23282" fg:w="8"/><text x="33.3704%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (213 samples, 0.30%)</title><rect x="33.1318%" y="261" width="0.3030%" height="15" fill="rgb(241,128,51)" fg:x="23290" fg:w="213"/><text x="33.3818%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (178 samples, 0.25%)</title><rect x="33.1816%" y="245" width="0.2532%" height="15" fill="rgb(227,165,31)" fg:x="23325" fg:w="178"/><text x="33.4316%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (135 samples, 0.19%)</title><rect x="33.2428%" y="229" width="0.1920%" height="15" fill="rgb(228,167,24)" fg:x="23368" fg:w="135"/><text x="33.4928%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (66 samples, 0.09%)</title><rect x="33.3409%" y="213" width="0.0939%" height="15" fill="rgb(228,143,12)" fg:x="23437" fg:w="66"/><text x="33.5909%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (22 samples, 0.03%)</title><rect x="33.4035%" y="197" width="0.0313%" height="15" fill="rgb(249,149,8)" fg:x="23481" fg:w="22"/><text x="33.6535%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (40 samples, 0.06%)</title><rect x="33.4348%" y="261" width="0.0569%" height="15" fill="rgb(243,35,44)" fg:x="23503" fg:w="40"/><text x="33.6848%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="34.4776%" y="245" width="0.0128%" height="15" fill="rgb(246,89,9)" fg:x="24236" fg:w="9"/><text x="34.7276%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="34.4904%" y="245" width="0.0213%" height="15" fill="rgb(233,213,13)" fg:x="24245" fg:w="15"/><text x="34.7404%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="34.5117%" y="245" width="0.0185%" height="15" fill="rgb(233,141,41)" fg:x="24260" fg:w="13"/><text x="34.7617%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="34.5302%" y="245" width="0.0114%" height="15" fill="rgb(239,167,4)" fg:x="24273" fg:w="8"/><text x="34.7802%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.01%)</title><rect x="34.5416%" y="245" width="0.0142%" height="15" fill="rgb(209,217,16)" fg:x="24281" fg:w="10"/><text x="34.7916%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 0.16%)</title><rect x="34.9968%" y="229" width="0.1565%" height="15" fill="rgb(219,88,35)" fg:x="24601" fg:w="110"/><text x="35.2468%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (47 samples, 0.07%)</title><rect x="35.0864%" y="213" width="0.0669%" height="15" fill="rgb(220,193,23)" fg:x="24664" fg:w="47"/><text x="35.3364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="35.1561%" y="229" width="0.0299%" height="15" fill="rgb(230,90,52)" fg:x="24713" fg:w="21"/><text x="35.4061%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="35.1860%" y="229" width="0.0142%" height="15" fill="rgb(252,106,19)" fg:x="24734" fg:w="10"/><text x="35.4360%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (28 samples, 0.04%)</title><rect x="35.2002%" y="229" width="0.0398%" height="15" fill="rgb(206,74,20)" fg:x="24744" fg:w="28"/><text x="35.4502%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (21 samples, 0.03%)</title><rect x="35.2401%" y="229" width="0.0299%" height="15" fill="rgb(230,138,44)" fg:x="24772" fg:w="21"/><text x="35.4901%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="35.2699%" y="229" width="0.0156%" height="15" fill="rgb(235,182,43)" fg:x="24793" fg:w="11"/><text x="35.5199%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="35.2856%" y="229" width="0.0156%" height="15" fill="rgb(242,16,51)" fg:x="24804" fg:w="11"/><text x="35.5356%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (56 samples, 0.08%)</title><rect x="35.7707%" y="181" width="0.0797%" height="15" fill="rgb(248,9,4)" fg:x="25145" fg:w="56"/><text x="36.0207%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="35.8233%" y="165" width="0.0270%" height="15" fill="rgb(210,31,22)" fg:x="25182" fg:w="19"/><text x="36.0733%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (89 samples, 0.13%)</title><rect x="35.7337%" y="197" width="0.1266%" height="15" fill="rgb(239,54,39)" fg:x="25119" fg:w="89"/><text x="35.9837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.05%)</title><rect x="35.9357%" y="165" width="0.0512%" height="15" fill="rgb(230,99,41)" fg:x="25261" fg:w="36"/><text x="36.1857%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (203 samples, 0.29%)</title><rect x="35.8603%" y="197" width="0.2888%" height="15" fill="rgb(253,106,12)" fg:x="25208" fg:w="203"/><text x="36.1103%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (184 samples, 0.26%)</title><rect x="35.8873%" y="181" width="0.2618%" height="15" fill="rgb(213,46,41)" fg:x="25227" fg:w="184"/><text x="36.1373%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (114 samples, 0.16%)</title><rect x="35.9869%" y="165" width="0.1622%" height="15" fill="rgb(215,133,35)" fg:x="25297" fg:w="114"/><text x="36.2369%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (57 samples, 0.08%)</title><rect x="36.0680%" y="149" width="0.0811%" height="15" fill="rgb(213,28,5)" fg:x="25354" fg:w="57"/><text x="36.3180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (372 samples, 0.53%)</title><rect x="35.6284%" y="213" width="0.5292%" height="15" fill="rgb(215,77,49)" fg:x="25045" fg:w="372"/><text x="35.8784%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="36.1576%" y="213" width="0.0213%" height="15" fill="rgb(248,100,22)" fg:x="25417" fg:w="15"/><text x="36.4076%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="36.1790%" y="213" width="0.0114%" height="15" fill="rgb(208,67,9)" fg:x="25432" fg:w="8"/><text x="36.4290%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (85 samples, 0.12%)</title><rect x="36.1946%" y="213" width="0.1209%" height="15" fill="rgb(219,133,21)" fg:x="25443" fg:w="85"/><text x="36.4446%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,425 samples, 2.03%)</title><rect x="34.5572%" y="245" width="2.0272%" height="15" fill="rgb(246,46,29)" fg:x="24292" fg:w="1425"/><text x="34.8072%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (900 samples, 1.28%)</title><rect x="35.3041%" y="229" width="1.2803%" height="15" fill="rgb(246,185,52)" fg:x="24817" fg:w="900"/><text x="35.5541%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (189 samples, 0.27%)</title><rect x="36.3155%" y="213" width="0.2689%" height="15" fill="rgb(252,136,11)" fg:x="25528" fg:w="189"/><text x="36.5655%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,190 samples, 3.12%)</title><rect x="33.4917%" y="261" width="3.1154%" height="15" fill="rgb(219,138,53)" fg:x="23543" fg:w="2190"/><text x="33.7417%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.02%)</title><rect x="36.5844%" y="245" width="0.0228%" height="15" fill="rgb(211,51,23)" fg:x="25717" fg:w="16"/><text x="36.8344%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,736 samples, 2.47%)</title><rect x="36.6072%" y="261" width="2.4696%" height="15" fill="rgb(247,221,28)" fg:x="25733" fg:w="1736"/><text x="36.8572%" y="271.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (66 samples, 0.09%)</title><rect x="39.0767%" y="261" width="0.0939%" height="15" fill="rgb(251,222,45)" fg:x="27469" fg:w="66"/><text x="39.3267%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (64 samples, 0.09%)</title><rect x="39.4025%" y="245" width="0.0910%" height="15" fill="rgb(217,162,53)" fg:x="27698" fg:w="64"/><text x="39.6525%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (29 samples, 0.04%)</title><rect x="39.6785%" y="229" width="0.0413%" height="15" fill="rgb(229,93,14)" fg:x="27892" fg:w="29"/><text x="39.9285%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (147 samples, 0.21%)</title><rect x="39.7198%" y="229" width="0.2091%" height="15" fill="rgb(209,67,49)" fg:x="27921" fg:w="147"/><text x="39.9698%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (742 samples, 1.06%)</title><rect x="39.1706%" y="261" width="1.0556%" height="15" fill="rgb(213,87,29)" fg:x="27535" fg:w="742"/><text x="39.4206%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (515 samples, 0.73%)</title><rect x="39.4936%" y="245" width="0.7326%" height="15" fill="rgb(205,151,52)" fg:x="27762" fg:w="515"/><text x="39.7436%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (209 samples, 0.30%)</title><rect x="39.9289%" y="229" width="0.2973%" height="15" fill="rgb(253,215,39)" fg:x="28068" fg:w="209"/><text x="40.1789%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (61 samples, 0.09%)</title><rect x="40.2262%" y="261" width="0.0868%" height="15" fill="rgb(221,220,41)" fg:x="28277" fg:w="61"/><text x="40.4762%" y="271.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (286 samples, 0.41%)</title><rect x="40.3258%" y="261" width="0.4069%" height="15" fill="rgb(218,133,21)" fg:x="28347" fg:w="286"/><text x="40.5758%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (363 samples, 0.52%)</title><rect x="42.2420%" y="229" width="0.5164%" height="15" fill="rgb(221,193,43)" fg:x="29694" fg:w="363"/><text x="42.4920%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,706 samples, 2.43%)</title><rect x="40.9773%" y="245" width="2.4269%" height="15" fill="rgb(240,128,52)" fg:x="28805" fg:w="1706"/><text x="41.2273%" y="255.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (454 samples, 0.65%)</title><rect x="42.7584%" y="229" width="0.6458%" height="15" fill="rgb(253,114,12)" fg:x="30057" fg:w="454"/><text x="43.0084%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (1,988 samples, 2.83%)</title><rect x="40.7326%" y="261" width="2.8281%" height="15" fill="rgb(215,223,47)" fg:x="28633" fg:w="1988"/><text x="40.9826%" y="271.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (110 samples, 0.16%)</title><rect x="43.4042%" y="245" width="0.1565%" height="15" fill="rgb(248,225,23)" fg:x="30511" fg:w="110"/><text x="43.6542%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,404 samples, 3.42%)</title><rect x="45.2792%" y="245" width="3.4199%" height="15" fill="rgb(250,108,0)" fg:x="31829" fg:w="2404"/><text x="45.5292%" y="255.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.04%)</title><rect x="48.6991%" y="245" width="0.0427%" height="15" fill="rgb(228,208,7)" fg:x="34233" fg:w="30"/><text x="48.9491%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (30 samples, 0.04%)</title><rect x="48.6991%" y="229" width="0.0427%" height="15" fill="rgb(244,45,10)" fg:x="34233" fg:w="30"/><text x="48.9491%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.04%)</title><rect x="48.6991%" y="213" width="0.0427%" height="15" fill="rgb(207,125,25)" fg:x="34233" fg:w="30"/><text x="48.9491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.04%)</title><rect x="48.7005%" y="197" width="0.0413%" height="15" fill="rgb(210,195,18)" fg:x="34234" fg:w="29"/><text x="48.9505%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="48.7062%" y="181" width="0.0356%" height="15" fill="rgb(249,80,12)" fg:x="34238" fg:w="25"/><text x="48.9562%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,362 samples, 3.36%)</title><rect x="48.7417%" y="245" width="3.3601%" height="15" fill="rgb(221,65,9)" fg:x="34263" fg:w="2362"/><text x="48.9917%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (500 samples, 0.71%)</title><rect x="52.1019%" y="245" width="0.7113%" height="15" fill="rgb(235,49,36)" fg:x="36625" fg:w="500"/><text x="52.3519%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (67 samples, 0.10%)</title><rect x="52.8459%" y="229" width="0.0953%" height="15" fill="rgb(225,32,20)" fg:x="37148" fg:w="67"/><text x="53.0959%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (161 samples, 0.23%)</title><rect x="53.0664%" y="213" width="0.2290%" height="15" fill="rgb(215,141,46)" fg:x="37303" fg:w="161"/><text x="53.3164%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (450 samples, 0.64%)</title><rect x="52.8131%" y="245" width="0.6402%" height="15" fill="rgb(250,160,47)" fg:x="37125" fg:w="450"/><text x="53.0631%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (360 samples, 0.51%)</title><rect x="52.9412%" y="229" width="0.5121%" height="15" fill="rgb(216,222,40)" fg:x="37215" fg:w="360"/><text x="53.1912%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (111 samples, 0.16%)</title><rect x="53.2954%" y="213" width="0.1579%" height="15" fill="rgb(234,217,39)" fg:x="37464" fg:w="111"/><text x="53.5454%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.07%)</title><rect x="54.9712%" y="181" width="0.0654%" height="15" fill="rgb(207,178,40)" fg:x="38642" fg:w="46"/><text x="55.2212%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.06%)</title><rect x="54.9769%" y="165" width="0.0597%" height="15" fill="rgb(221,136,13)" fg:x="38646" fg:w="42"/><text x="55.2269%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (8,070 samples, 11.48%)</title><rect x="43.5607%" y="261" width="11.4802%" height="15" fill="rgb(249,199,10)" fg:x="30621" fg:w="8070"/><text x="43.8107%" y="271.50">rust_qecp`rust_qe..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,116 samples, 1.59%)</title><rect x="53.4533%" y="245" width="1.5876%" height="15" fill="rgb(249,222,13)" fg:x="37575" fg:w="1116"/><text x="53.7033%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (49 samples, 0.07%)</title><rect x="54.9712%" y="229" width="0.0697%" height="15" fill="rgb(244,185,38)" fg:x="38642" fg:w="49"/><text x="55.2212%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (49 samples, 0.07%)</title><rect x="54.9712%" y="213" width="0.0697%" height="15" fill="rgb(236,202,9)" fg:x="38642" fg:w="49"/><text x="55.2212%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (49 samples, 0.07%)</title><rect x="54.9712%" y="197" width="0.0697%" height="15" fill="rgb(250,229,37)" fg:x="38642" fg:w="49"/><text x="55.2212%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.04%)</title><rect x="56.1149%" y="245" width="0.0398%" height="15" fill="rgb(206,174,23)" fg:x="39446" fg:w="28"/><text x="56.3649%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.02%)</title><rect x="56.1761%" y="213" width="0.0213%" height="15" fill="rgb(211,33,43)" fg:x="39489" fg:w="15"/><text x="56.4261%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (11 samples, 0.02%)</title><rect x="56.1975%" y="213" width="0.0156%" height="15" fill="rgb(245,58,50)" fg:x="39504" fg:w="11"/><text x="56.4475%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.08%)</title><rect x="56.1548%" y="229" width="0.0839%" height="15" fill="rgb(244,68,36)" fg:x="39474" fg:w="59"/><text x="56.4048%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="56.2131%" y="213" width="0.0256%" height="15" fill="rgb(232,229,15)" fg:x="39515" fg:w="18"/><text x="56.4631%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="56.2387%" y="229" width="0.0156%" height="15" fill="rgb(254,30,23)" fg:x="39533" fg:w="11"/><text x="56.4887%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (72 samples, 0.10%)</title><rect x="56.1548%" y="245" width="0.1024%" height="15" fill="rgb(235,160,14)" fg:x="39474" fg:w="72"/><text x="56.4048%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (19 samples, 0.03%)</title><rect x="56.2572%" y="229" width="0.0270%" height="15" fill="rgb(212,155,44)" fg:x="39546" fg:w="19"/><text x="56.5072%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="56.3141%" y="229" width="0.0185%" height="15" fill="rgb(226,2,50)" fg:x="39586" fg:w="13"/><text x="56.5641%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.01%)</title><rect x="56.3326%" y="229" width="0.0142%" height="15" fill="rgb(234,177,6)" fg:x="39599" fg:w="10"/><text x="56.5826%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.04%)</title><rect x="56.6513%" y="165" width="0.0413%" height="15" fill="rgb(217,24,9)" fg:x="39823" fg:w="29"/><text x="56.9013%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (121 samples, 0.17%)</title><rect x="56.5246%" y="181" width="0.1721%" height="15" fill="rgb(220,13,46)" fg:x="39734" fg:w="121"/><text x="56.7746%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (223 samples, 0.32%)</title><rect x="56.3923%" y="213" width="0.3172%" height="15" fill="rgb(239,221,27)" fg:x="39641" fg:w="223"/><text x="56.6423%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (151 samples, 0.21%)</title><rect x="56.4948%" y="197" width="0.2148%" height="15" fill="rgb(222,198,25)" fg:x="39713" fg:w="151"/><text x="56.7448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="56.6968%" y="181" width="0.0128%" height="15" fill="rgb(211,99,13)" fg:x="39855" fg:w="9"/><text x="56.9468%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="56.7096%" y="213" width="0.0285%" height="15" fill="rgb(232,111,31)" fg:x="39864" fg:w="20"/><text x="56.9596%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (70 samples, 0.10%)</title><rect x="56.7380%" y="213" width="0.0996%" height="15" fill="rgb(245,82,37)" fg:x="39884" fg:w="70"/><text x="56.9880%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.04%)</title><rect x="56.7992%" y="197" width="0.0384%" height="15" fill="rgb(227,149,46)" fg:x="39927" fg:w="27"/><text x="57.0492%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (27 samples, 0.04%)</title><rect x="56.8476%" y="213" width="0.0384%" height="15" fill="rgb(218,36,50)" fg:x="39961" fg:w="27"/><text x="57.0976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="56.8888%" y="213" width="0.0142%" height="15" fill="rgb(226,80,48)" fg:x="39990" fg:w="10"/><text x="57.1388%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (468 samples, 0.67%)</title><rect x="56.9301%" y="197" width="0.6658%" height="15" fill="rgb(238,224,15)" fg:x="40019" fg:w="468"/><text x="57.1801%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="57.6414%" y="181" width="0.0299%" height="15" fill="rgb(241,136,10)" fg:x="40519" fg:w="21"/><text x="57.8914%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (51 samples, 0.07%)</title><rect x="57.6712%" y="181" width="0.0726%" height="15" fill="rgb(208,32,45)" fg:x="40540" fg:w="51"/><text x="57.9212%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (103 samples, 0.15%)</title><rect x="57.6101%" y="197" width="0.1465%" height="15" fill="rgb(207,135,9)" fg:x="40497" fg:w="103"/><text x="57.8601%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="57.7438%" y="181" width="0.0128%" height="15" fill="rgb(206,86,44)" fg:x="40591" fg:w="9"/><text x="57.9938%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="57.7566%" y="197" width="0.0114%" height="15" fill="rgb(245,177,15)" fg:x="40600" fg:w="8"/><text x="58.0066%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="57.9999%" y="133" width="0.0270%" height="15" fill="rgb(206,64,50)" fg:x="40771" fg:w="19"/><text x="58.2499%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (121 samples, 0.17%)</title><rect x="57.9202%" y="149" width="0.1721%" height="15" fill="rgb(234,36,40)" fg:x="40715" fg:w="121"/><text x="58.1702%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (46 samples, 0.07%)</title><rect x="58.0269%" y="133" width="0.0654%" height="15" fill="rgb(213,64,8)" fg:x="40790" fg:w="46"/><text x="58.2769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (177 samples, 0.25%)</title><rect x="57.8476%" y="181" width="0.2518%" height="15" fill="rgb(210,75,36)" fg:x="40664" fg:w="177"/><text x="58.0976%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (137 samples, 0.19%)</title><rect x="57.9045%" y="165" width="0.1949%" height="15" fill="rgb(229,88,21)" fg:x="40704" fg:w="137"/><text x="58.1545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="58.0994%" y="181" width="0.0156%" height="15" fill="rgb(252,204,47)" fg:x="40841" fg:w="11"/><text x="58.3494%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (857 samples, 1.22%)</title><rect x="56.9031%" y="213" width="1.2191%" height="15" fill="rgb(208,77,27)" fg:x="40000" fg:w="857"/><text x="57.1531%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (249 samples, 0.35%)</title><rect x="57.7680%" y="197" width="0.3542%" height="15" fill="rgb(221,76,26)" fg:x="40608" fg:w="249"/><text x="58.0180%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.02%)</title><rect x="58.1706%" y="197" width="0.0242%" height="15" fill="rgb(225,139,18)" fg:x="40891" fg:w="17"/><text x="58.4206%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (48 samples, 0.07%)</title><rect x="58.1948%" y="197" width="0.0683%" height="15" fill="rgb(230,137,11)" fg:x="40908" fg:w="48"/><text x="58.4448%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (157 samples, 0.22%)</title><rect x="58.1222%" y="213" width="0.2233%" height="15" fill="rgb(212,28,1)" fg:x="40857" fg:w="157"/><text x="58.3722%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (58 samples, 0.08%)</title><rect x="58.2630%" y="197" width="0.0825%" height="15" fill="rgb(248,164,17)" fg:x="40956" fg:w="58"/><text x="58.5130%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,419 samples, 2.02%)</title><rect x="56.3511%" y="229" width="2.0186%" height="15" fill="rgb(222,171,42)" fg:x="39612" fg:w="1419"/><text x="56.6011%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.01%)</title><rect x="58.3555%" y="213" width="0.0142%" height="15" fill="rgb(243,84,45)" fg:x="41021" fg:w="10"/><text x="58.6055%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (9 samples, 0.01%)</title><rect x="58.3740%" y="229" width="0.0128%" height="15" fill="rgb(252,49,23)" fg:x="41034" fg:w="9"/><text x="58.6240%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.01%)</title><rect x="58.3868%" y="229" width="0.0142%" height="15" fill="rgb(215,19,7)" fg:x="41043" fg:w="10"/><text x="58.6368%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.01%)</title><rect x="58.4053%" y="229" width="0.0114%" height="15" fill="rgb(238,81,41)" fg:x="41056" fg:w="8"/><text x="58.6553%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,520 samples, 2.16%)</title><rect x="56.2572%" y="245" width="2.1623%" height="15" fill="rgb(210,199,37)" fg:x="39546" fg:w="1520"/><text x="56.5072%" y="255.50">r..</text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="58.5518%" y="229" width="0.0171%" height="15" fill="rgb(244,192,49)" fg:x="41159" fg:w="12"/><text x="58.8018%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="58.5689%" y="229" width="0.0114%" height="15" fill="rgb(226,211,11)" fg:x="41171" fg:w="8"/><text x="58.8189%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (14 samples, 0.02%)</title><rect x="58.5803%" y="229" width="0.0199%" height="15" fill="rgb(236,162,54)" fg:x="41179" fg:w="14"/><text x="58.8303%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (8 samples, 0.01%)</title><rect x="58.6101%" y="229" width="0.0114%" height="15" fill="rgb(220,229,9)" fg:x="41200" fg:w="8"/><text x="58.8601%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.03%)</title><rect x="58.7737%" y="165" width="0.0313%" height="15" fill="rgb(250,87,22)" fg:x="41315" fg:w="22"/><text x="59.0237%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (71 samples, 0.10%)</title><rect x="58.7154%" y="181" width="0.1010%" height="15" fill="rgb(239,43,17)" fg:x="41274" fg:w="71"/><text x="58.9654%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="58.8050%" y="165" width="0.0114%" height="15" fill="rgb(231,177,25)" fg:x="41337" fg:w="8"/><text x="59.0550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (122 samples, 0.17%)</title><rect x="58.6514%" y="213" width="0.1736%" height="15" fill="rgb(219,179,1)" fg:x="41229" fg:w="122"/><text x="58.9014%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (90 samples, 0.13%)</title><rect x="58.6969%" y="197" width="0.1280%" height="15" fill="rgb(238,219,53)" fg:x="41261" fg:w="90"/><text x="58.9469%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="58.8250%" y="213" width="0.0114%" height="15" fill="rgb(232,167,36)" fg:x="41351" fg:w="8"/><text x="59.0750%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="58.8491%" y="213" width="0.0142%" height="15" fill="rgb(244,19,51)" fg:x="41368" fg:w="10"/><text x="59.0991%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (10 samples, 0.01%)</title><rect x="58.9530%" y="197" width="0.0142%" height="15" fill="rgb(224,6,22)" fg:x="41441" fg:w="10"/><text x="59.2030%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (8 samples, 0.01%)</title><rect x="59.0426%" y="181" width="0.0114%" height="15" fill="rgb(224,145,5)" fg:x="41504" fg:w="8"/><text x="59.2926%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="59.0540%" y="181" width="0.0299%" height="15" fill="rgb(234,130,49)" fg:x="41512" fg:w="21"/><text x="59.3040%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (199 samples, 0.28%)</title><rect x="59.0896%" y="181" width="0.2831%" height="15" fill="rgb(254,6,2)" fg:x="41537" fg:w="199"/><text x="59.3396%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (18 samples, 0.03%)</title><rect x="59.4381%" y="165" width="0.0256%" height="15" fill="rgb(208,96,46)" fg:x="41782" fg:w="18"/><text x="59.6881%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (82 samples, 0.12%)</title><rect x="59.4637%" y="165" width="0.1167%" height="15" fill="rgb(239,3,39)" fg:x="41800" fg:w="82"/><text x="59.7137%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.03%)</title><rect x="59.6856%" y="133" width="0.0341%" height="15" fill="rgb(233,210,1)" fg:x="41956" fg:w="24"/><text x="59.9356%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (86 samples, 0.12%)</title><rect x="59.6031%" y="149" width="0.1223%" height="15" fill="rgb(244,137,37)" fg:x="41898" fg:w="86"/><text x="59.8531%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (109 samples, 0.16%)</title><rect x="59.5803%" y="165" width="0.1551%" height="15" fill="rgb(240,136,2)" fg:x="41882" fg:w="109"/><text x="59.8303%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (71 samples, 0.10%)</title><rect x="59.7354%" y="165" width="0.1010%" height="15" fill="rgb(239,18,37)" fg:x="41991" fg:w="71"/><text x="59.9854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="59.8577%" y="149" width="0.0156%" height="15" fill="rgb(218,185,22)" fg:x="42077" fg:w="11"/><text x="60.1077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (13 samples, 0.02%)</title><rect x="59.9331%" y="133" width="0.0185%" height="15" fill="rgb(225,218,4)" fg:x="42130" fg:w="13"/><text x="60.1831%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (13 samples, 0.02%)</title><rect x="59.9331%" y="117" width="0.0185%" height="15" fill="rgb(230,182,32)" fg:x="42130" fg:w="13"/><text x="60.1831%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.04%)</title><rect x="59.9516%" y="133" width="0.0384%" height="15" fill="rgb(242,56,43)" fg:x="42143" fg:w="27"/><text x="60.2016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (288 samples, 0.41%)</title><rect x="59.8364%" y="165" width="0.4097%" height="15" fill="rgb(233,99,24)" fg:x="42062" fg:w="288"/><text x="60.0864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (262 samples, 0.37%)</title><rect x="59.8734%" y="149" width="0.3727%" height="15" fill="rgb(234,209,42)" fg:x="42088" fg:w="262"/><text x="60.1234%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (179 samples, 0.25%)</title><rect x="59.9915%" y="133" width="0.2546%" height="15" fill="rgb(227,7,12)" fg:x="42171" fg:w="179"/><text x="60.2415%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (617 samples, 0.88%)</title><rect x="59.3726%" y="181" width="0.8777%" height="15" fill="rgb(245,203,43)" fg:x="41736" fg:w="617"/><text x="59.6226%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (951 samples, 1.35%)</title><rect x="58.9672%" y="197" width="1.3529%" height="15" fill="rgb(238,205,33)" fg:x="41451" fg:w="951"/><text x="59.2172%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.07%)</title><rect x="60.2546%" y="181" width="0.0654%" height="15" fill="rgb(231,56,7)" fg:x="42356" fg:w="46"/><text x="60.5046%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (73 samples, 0.10%)</title><rect x="60.3201%" y="197" width="0.1038%" height="15" fill="rgb(244,186,29)" fg:x="42402" fg:w="73"/><text x="60.5701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.03%)</title><rect x="60.4239%" y="197" width="0.0313%" height="15" fill="rgb(234,111,31)" fg:x="42475" fg:w="22"/><text x="60.6739%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,126 samples, 1.60%)</title><rect x="58.8634%" y="213" width="1.6018%" height="15" fill="rgb(241,149,10)" fg:x="41378" fg:w="1126"/><text x="59.1134%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,439 samples, 2.05%)</title><rect x="58.4281%" y="245" width="2.0471%" height="15" fill="rgb(249,206,44)" fg:x="41072" fg:w="1439"/><text x="58.6781%" y="255.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,303 samples, 1.85%)</title><rect x="58.6215%" y="229" width="1.8536%" height="15" fill="rgb(251,153,30)" fg:x="41208" fg:w="1303"/><text x="58.8715%" y="239.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (42 samples, 0.06%)</title><rect x="60.4751%" y="245" width="0.0597%" height="15" fill="rgb(239,152,38)" fg:x="42511" fg:w="42"/><text x="60.7251%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (114 samples, 0.16%)</title><rect x="60.5349%" y="229" width="0.1622%" height="15" fill="rgb(249,139,47)" fg:x="42553" fg:w="114"/><text x="60.7849%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.02%)</title><rect x="60.9104%" y="213" width="0.0228%" height="15" fill="rgb(244,64,35)" fg:x="42817" fg:w="16"/><text x="61.1604%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="61.1566%" y="181" width="0.0270%" height="15" fill="rgb(216,46,15)" fg:x="42990" fg:w="19"/><text x="61.4066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="61.1836%" y="181" width="0.0199%" height="15" fill="rgb(250,74,19)" fg:x="43009" fg:w="14"/><text x="61.4336%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (41 samples, 0.06%)</title><rect x="61.3173%" y="149" width="0.0583%" height="15" fill="rgb(249,42,33)" fg:x="43103" fg:w="41"/><text x="61.5673%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,265 samples, 1.80%)</title><rect x="61.4325%" y="133" width="1.7996%" height="15" fill="rgb(242,149,17)" fg:x="43184" fg:w="1265"/><text x="61.6825%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (17 samples, 0.02%)</title><rect x="63.2321%" y="133" width="0.0242%" height="15" fill="rgb(244,29,21)" fg:x="44449" fg:w="17"/><text x="63.4821%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,666 samples, 2.37%)</title><rect x="61.0001%" y="197" width="2.3700%" height="15" fill="rgb(220,130,37)" fg:x="42880" fg:w="1666"/><text x="61.2501%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,523 samples, 2.17%)</title><rect x="61.2035%" y="181" width="2.1666%" height="15" fill="rgb(211,67,2)" fg:x="43023" fg:w="1523"/><text x="61.4535%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,505 samples, 2.14%)</title><rect x="61.2291%" y="165" width="2.1410%" height="15" fill="rgb(235,68,52)" fg:x="43041" fg:w="1505"/><text x="61.4791%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,398 samples, 1.99%)</title><rect x="61.3813%" y="149" width="1.9888%" height="15" fill="rgb(246,142,3)" fg:x="43148" fg:w="1398"/><text x="61.6313%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (80 samples, 0.11%)</title><rect x="63.2563%" y="133" width="0.1138%" height="15" fill="rgb(241,25,7)" fg:x="44466" fg:w="80"/><text x="63.5063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (163 samples, 0.23%)</title><rect x="63.3701%" y="197" width="0.2319%" height="15" fill="rgb(242,119,39)" fg:x="44546" fg:w="163"/><text x="63.6201%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (349 samples, 0.50%)</title><rect x="63.6020%" y="197" width="0.4965%" height="15" fill="rgb(241,98,45)" fg:x="44709" fg:w="349"/><text x="63.8520%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,394 samples, 3.41%)</title><rect x="60.6985%" y="229" width="3.4056%" height="15" fill="rgb(254,28,30)" fg:x="42668" fg:w="2394"/><text x="60.9485%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,218 samples, 3.16%)</title><rect x="60.9489%" y="213" width="3.1553%" height="15" fill="rgb(241,142,54)" fg:x="42844" fg:w="2218"/><text x="61.1989%" y="223.50">rus..</text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,522 samples, 3.59%)</title><rect x="60.5349%" y="245" width="3.5877%" height="15" fill="rgb(222,85,15)" fg:x="42553" fg:w="2522"/><text x="60.7849%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="64.1041%" y="229" width="0.0185%" height="15" fill="rgb(210,85,47)" fg:x="45062" fg:w="13"/><text x="64.3541%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (18 samples, 0.03%)</title><rect x="64.5636%" y="213" width="0.0256%" height="15" fill="rgb(224,206,25)" fg:x="45385" fg:w="18"/><text x="64.8136%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (18 samples, 0.03%)</title><rect x="64.8567%" y="197" width="0.0256%" height="15" fill="rgb(243,201,19)" fg:x="45591" fg:w="18"/><text x="65.1067%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="65.1654%" y="181" width="0.0213%" height="15" fill="rgb(236,59,4)" fg:x="45808" fg:w="15"/><text x="65.4154%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.04%)</title><rect x="65.4570%" y="165" width="0.0413%" height="15" fill="rgb(254,179,45)" fg:x="46013" fg:w="29"/><text x="65.7070%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="65.7173%" y="149" width="0.0171%" height="15" fill="rgb(226,14,10)" fg:x="46196" fg:w="12"/><text x="65.9673%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,286 samples, 1.83%)</title><rect x="64.1226%" y="245" width="1.8294%" height="15" fill="rgb(244,27,41)" fg:x="45075" fg:w="1286"/><text x="64.3726%" y="255.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,148 samples, 1.63%)</title><rect x="64.3189%" y="229" width="1.6331%" height="15" fill="rgb(235,35,32)" fg:x="45213" fg:w="1148"/><text x="64.5689%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (958 samples, 1.36%)</title><rect x="64.5892%" y="213" width="1.3628%" height="15" fill="rgb(218,68,31)" fg:x="45403" fg:w="958"/><text x="64.8392%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (752 samples, 1.07%)</title><rect x="64.8823%" y="197" width="1.0698%" height="15" fill="rgb(207,120,37)" fg:x="45609" fg:w="752"/><text x="65.1323%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (538 samples, 0.77%)</title><rect x="65.1867%" y="181" width="0.7653%" height="15" fill="rgb(227,98,0)" fg:x="45823" fg:w="538"/><text x="65.4367%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (319 samples, 0.45%)</title><rect x="65.4983%" y="165" width="0.4538%" height="15" fill="rgb(207,7,3)" fg:x="46042" fg:w="319"/><text x="65.7483%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (153 samples, 0.22%)</title><rect x="65.7344%" y="149" width="0.2177%" height="15" fill="rgb(206,98,19)" fg:x="46208" fg:w="153"/><text x="65.9844%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (49 samples, 0.07%)</title><rect x="65.8824%" y="133" width="0.0697%" height="15" fill="rgb(217,5,26)" fg:x="46312" fg:w="49"/><text x="66.1324%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (8 samples, 0.01%)</title><rect x="65.9407%" y="117" width="0.0114%" height="15" fill="rgb(235,190,38)" fg:x="46353" fg:w="8"/><text x="66.1907%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (299 samples, 0.43%)</title><rect x="66.7302%" y="229" width="0.4254%" height="15" fill="rgb(247,86,24)" fg:x="46908" fg:w="299"/><text x="66.9802%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (679 samples, 0.97%)</title><rect x="67.1556%" y="229" width="0.9659%" height="15" fill="rgb(205,101,16)" fg:x="47207" fg:w="679"/><text x="67.4056%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,255 samples, 3.21%)</title><rect x="65.9521%" y="245" width="3.2079%" height="15" fill="rgb(246,168,33)" fg:x="46361" fg:w="2255"/><text x="66.2021%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (730 samples, 1.04%)</title><rect x="68.1215%" y="229" width="1.0385%" height="15" fill="rgb(231,114,1)" fg:x="47886" fg:w="730"/><text x="68.3715%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (72 samples, 0.10%)</title><rect x="69.1600%" y="245" width="0.1024%" height="15" fill="rgb(207,184,53)" fg:x="48616" fg:w="72"/><text x="69.4100%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (10,298 samples, 14.65%)</title><rect x="55.0551%" y="261" width="14.6497%" height="15" fill="rgb(224,95,51)" fg:x="38701" fg:w="10298"/><text x="55.3051%" y="271.50">rust_qecp`rust_qecp::u..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (311 samples, 0.44%)</title><rect x="69.2624%" y="245" width="0.4424%" height="15" fill="rgb(212,188,45)" fg:x="48688" fg:w="311"/><text x="69.5124%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (36 samples, 0.05%)</title><rect x="73.8232%" y="197" width="0.0512%" height="15" fill="rgb(223,154,38)" fg:x="51894" fg:w="36"/><text x="74.0732%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (91 samples, 0.13%)</title><rect x="73.7478%" y="213" width="0.1295%" height="15" fill="rgb(251,22,52)" fg:x="51841" fg:w="91"/><text x="73.9978%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (111 samples, 0.16%)</title><rect x="73.7321%" y="229" width="0.1579%" height="15" fill="rgb(229,209,22)" fg:x="51830" fg:w="111"/><text x="73.9821%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="73.8772%" y="213" width="0.0128%" height="15" fill="rgb(234,138,34)" fg:x="51932" fg:w="9"/><text x="74.1272%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (159 samples, 0.23%)</title><rect x="73.6766%" y="245" width="0.2262%" height="15" fill="rgb(212,95,11)" fg:x="51791" fg:w="159"/><text x="73.9266%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="73.8900%" y="229" width="0.0128%" height="15" fill="rgb(240,179,47)" fg:x="51941" fg:w="9"/><text x="74.1400%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="73.9028%" y="245" width="0.0185%" height="15" fill="rgb(240,163,11)" fg:x="51950" fg:w="13"/><text x="74.1528%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (108 samples, 0.15%)</title><rect x="74.1489%" y="229" width="0.1536%" height="15" fill="rgb(236,37,12)" fg:x="52123" fg:w="108"/><text x="74.3989%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (313 samples, 0.45%)</title><rect x="73.9213%" y="245" width="0.4453%" height="15" fill="rgb(232,164,16)" fg:x="51963" fg:w="313"/><text x="74.1713%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (33 samples, 0.05%)</title><rect x="74.3197%" y="229" width="0.0469%" height="15" fill="rgb(244,205,15)" fg:x="52243" fg:w="33"/><text x="74.5697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (29 samples, 0.04%)</title><rect x="74.3253%" y="213" width="0.0413%" height="15" fill="rgb(223,117,47)" fg:x="52247" fg:w="29"/><text x="74.5753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (47 samples, 0.07%)</title><rect x="74.3666%" y="245" width="0.0669%" height="15" fill="rgb(244,107,35)" fg:x="52276" fg:w="47"/><text x="74.6166%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.06%)</title><rect x="74.3694%" y="229" width="0.0640%" height="15" fill="rgb(205,140,8)" fg:x="52278" fg:w="45"/><text x="74.6194%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (43 samples, 0.06%)</title><rect x="74.4335%" y="245" width="0.0612%" height="15" fill="rgb(228,84,46)" fg:x="52323" fg:w="43"/><text x="74.6835%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="74.5273%" y="213" width="0.0156%" height="15" fill="rgb(254,188,9)" fg:x="52389" fg:w="11"/><text x="74.7773%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.05%)</title><rect x="74.4946%" y="245" width="0.0512%" height="15" fill="rgb(206,112,54)" fg:x="52366" fg:w="36"/><text x="74.7446%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.03%)</title><rect x="74.5117%" y="229" width="0.0341%" height="15" fill="rgb(216,84,49)" fg:x="52378" fg:w="24"/><text x="74.7617%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="74.5458%" y="245" width="0.0199%" height="15" fill="rgb(214,194,35)" fg:x="52402" fg:w="14"/><text x="74.7958%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (179 samples, 0.25%)</title><rect x="74.5658%" y="245" width="0.2546%" height="15" fill="rgb(249,28,3)" fg:x="52416" fg:w="179"/><text x="74.8158%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (45 samples, 0.06%)</title><rect x="74.7564%" y="229" width="0.0640%" height="15" fill="rgb(222,56,52)" fg:x="52550" fg:w="45"/><text x="75.0064%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.06%)</title><rect x="74.7564%" y="213" width="0.0640%" height="15" fill="rgb(245,217,50)" fg:x="52550" fg:w="45"/><text x="75.0064%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="74.8218%" y="245" width="0.0256%" height="15" fill="rgb(213,201,24)" fg:x="52596" fg:w="18"/><text x="75.0718%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="74.8489%" y="245" width="0.0114%" height="15" fill="rgb(248,116,28)" fg:x="52615" fg:w="8"/><text x="75.0989%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (71 samples, 0.10%)</title><rect x="74.8673%" y="245" width="0.1010%" height="15" fill="rgb(219,72,43)" fg:x="52628" fg:w="71"/><text x="75.1173%" y="255.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 0.03%)</title><rect x="74.9683%" y="245" width="0.0313%" height="15" fill="rgb(209,138,14)" fg:x="52699" fg:w="22"/><text x="75.2183%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="75.0309%" y="213" width="0.0171%" height="15" fill="rgb(222,18,33)" fg:x="52743" fg:w="12"/><text x="75.2809%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.08%)</title><rect x="75.0053%" y="229" width="0.0797%" height="15" fill="rgb(213,199,7)" fg:x="52725" fg:w="56"/><text x="75.2553%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="75.0480%" y="213" width="0.0370%" height="15" fill="rgb(250,110,10)" fg:x="52755" fg:w="26"/><text x="75.2980%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="75.0694%" y="197" width="0.0156%" height="15" fill="rgb(248,123,6)" fg:x="52770" fg:w="11"/><text x="75.3194%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (74 samples, 0.11%)</title><rect x="74.9996%" y="245" width="0.1053%" height="15" fill="rgb(206,91,31)" fg:x="52721" fg:w="74"/><text x="75.2496%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="75.0935%" y="229" width="0.0114%" height="15" fill="rgb(211,154,13)" fg:x="52787" fg:w="8"/><text x="75.3435%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="75.1049%" y="245" width="0.0142%" height="15" fill="rgb(225,148,7)" fg:x="52795" fg:w="10"/><text x="75.3549%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,410 samples, 2.01%)</title><rect x="75.1191%" y="245" width="2.0058%" height="15" fill="rgb(220,160,43)" fg:x="52805" fg:w="1410"/><text x="75.3691%" y="255.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.01%)</title><rect x="77.1250%" y="245" width="0.0142%" height="15" fill="rgb(213,52,39)" fg:x="54215" fg:w="10"/><text x="77.3750%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="77.2118%" y="181" width="0.0142%" height="15" fill="rgb(243,137,7)" fg:x="54276" fg:w="10"/><text x="77.4618%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="77.2430%" y="165" width="0.0199%" height="15" fill="rgb(230,79,13)" fg:x="54298" fg:w="14"/><text x="77.4930%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.02%)</title><rect x="77.2729%" y="149" width="0.0228%" height="15" fill="rgb(247,105,23)" fg:x="54319" fg:w="16"/><text x="77.5229%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="77.2815%" y="133" width="0.0142%" height="15" fill="rgb(223,179,41)" fg:x="54325" fg:w="10"/><text x="77.5315%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="77.2630%" y="165" width="0.0356%" height="15" fill="rgb(218,9,34)" fg:x="54312" fg:w="25"/><text x="77.5130%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (60 samples, 0.09%)</title><rect x="77.2260%" y="181" width="0.0854%" height="15" fill="rgb(222,106,8)" fg:x="54286" fg:w="60"/><text x="77.4760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="77.2985%" y="165" width="0.0128%" height="15" fill="rgb(211,220,0)" fg:x="54337" fg:w="9"/><text x="77.5485%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (90 samples, 0.13%)</title><rect x="77.1961%" y="197" width="0.1280%" height="15" fill="rgb(229,52,16)" fg:x="54265" fg:w="90"/><text x="77.4461%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="77.3128%" y="181" width="0.0114%" height="15" fill="rgb(212,155,18)" fg:x="54347" fg:w="8"/><text x="77.5628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.02%)</title><rect x="77.3241%" y="197" width="0.0242%" height="15" fill="rgb(242,21,14)" fg:x="54355" fg:w="17"/><text x="77.5741%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (117 samples, 0.17%)</title><rect x="77.1833%" y="213" width="0.1664%" height="15" fill="rgb(222,19,48)" fg:x="54256" fg:w="117"/><text x="77.4333%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (139 samples, 0.20%)</title><rect x="77.1534%" y="245" width="0.1977%" height="15" fill="rgb(232,45,27)" fg:x="54235" fg:w="139"/><text x="77.4034%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (124 samples, 0.18%)</title><rect x="77.1748%" y="229" width="0.1764%" height="15" fill="rgb(249,103,42)" fg:x="54250" fg:w="124"/><text x="77.4248%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,305 samples, 1.86%)</title><rect x="77.3569%" y="245" width="1.8565%" height="15" fill="rgb(246,81,33)" fg:x="54378" fg:w="1305"/><text x="77.6069%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (193 samples, 0.27%)</title><rect x="79.2133%" y="245" width="0.2746%" height="15" fill="rgb(252,33,42)" fg:x="55683" fg:w="193"/><text x="79.4633%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (62 samples, 0.09%)</title><rect x="79.4879%" y="245" width="0.0882%" height="15" fill="rgb(209,212,41)" fg:x="55876" fg:w="62"/><text x="79.7379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="79.6003%" y="229" width="0.0114%" height="15" fill="rgb(207,154,6)" fg:x="55955" fg:w="8"/><text x="79.8503%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="79.6116%" y="229" width="0.0199%" height="15" fill="rgb(223,64,47)" fg:x="55963" fg:w="14"/><text x="79.8616%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (47 samples, 0.07%)</title><rect x="79.5761%" y="245" width="0.0669%" height="15" fill="rgb(211,161,38)" fg:x="55938" fg:w="47"/><text x="79.8261%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="79.6316%" y="229" width="0.0114%" height="15" fill="rgb(219,138,40)" fg:x="55977" fg:w="8"/><text x="79.8816%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.03%)</title><rect x="80.1181%" y="181" width="0.0313%" height="15" fill="rgb(241,228,46)" fg:x="56319" fg:w="22"/><text x="80.3681%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (103 samples, 0.15%)</title><rect x="80.0356%" y="197" width="0.1465%" height="15" fill="rgb(223,209,38)" fg:x="56261" fg:w="103"/><text x="80.2856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.03%)</title><rect x="80.1494%" y="181" width="0.0327%" height="15" fill="rgb(236,164,45)" fg:x="56341" fg:w="23"/><text x="80.3994%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (325 samples, 0.46%)</title><rect x="79.7240%" y="213" width="0.4623%" height="15" fill="rgb(231,15,5)" fg:x="56042" fg:w="325"/><text x="79.9740%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (21 samples, 0.03%)</title><rect x="80.3158%" y="165" width="0.0299%" height="15" fill="rgb(252,35,15)" fg:x="56458" fg:w="21"/><text x="80.5658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (78 samples, 0.11%)</title><rect x="80.2404%" y="197" width="0.1110%" height="15" fill="rgb(248,181,18)" fg:x="56405" fg:w="78"/><text x="80.4904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (44 samples, 0.06%)</title><rect x="80.2888%" y="181" width="0.0626%" height="15" fill="rgb(233,39,42)" fg:x="56439" fg:w="44"/><text x="80.5388%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.02%)</title><rect x="80.3756%" y="181" width="0.0199%" height="15" fill="rgb(238,110,33)" fg:x="56500" fg:w="14"/><text x="80.6256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (199 samples, 0.28%)</title><rect x="80.1892%" y="213" width="0.2831%" height="15" fill="rgb(233,195,10)" fg:x="56369" fg:w="199"/><text x="80.4392%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (84 samples, 0.12%)</title><rect x="80.3528%" y="197" width="0.1195%" height="15" fill="rgb(254,105,3)" fg:x="56484" fg:w="84"/><text x="80.6028%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.07%)</title><rect x="80.4069%" y="181" width="0.0654%" height="15" fill="rgb(221,225,9)" fg:x="56522" fg:w="46"/><text x="80.6569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (567 samples, 0.81%)</title><rect x="79.6714%" y="229" width="0.8066%" height="15" fill="rgb(224,227,45)" fg:x="56005" fg:w="567"/><text x="79.9214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="80.4780%" y="229" width="0.0142%" height="15" fill="rgb(229,198,43)" fg:x="56572" fg:w="10"/><text x="80.7280%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (606 samples, 0.86%)</title><rect x="79.6429%" y="245" width="0.8621%" height="15" fill="rgb(206,209,35)" fg:x="55985" fg:w="606"/><text x="79.8929%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (40 samples, 0.06%)</title><rect x="80.5050%" y="245" width="0.0569%" height="15" fill="rgb(245,195,53)" fg:x="56591" fg:w="40"/><text x="80.7550%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (30 samples, 0.04%)</title><rect x="80.5619%" y="245" width="0.0427%" height="15" fill="rgb(240,92,26)" fg:x="56631" fg:w="30"/><text x="80.8119%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,663 samples, 10.90%)</title><rect x="69.7048%" y="261" width="10.9012%" height="15" fill="rgb(207,40,23)" fg:x="48999" fg:w="7663"/><text x="69.9548%" y="271.50">rust_qecp`rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (45,856 samples, 65.23%)</title><rect x="15.3823%" y="293" width="65.2337%" height="15" fill="rgb(223,111,35)" fg:x="10813" fg:w="45856"/><text x="15.6323%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,484 samples, 61.86%)</title><rect x="18.7567%" y="277" width="61.8593%" height="15" fill="rgb(229,147,28)" fg:x="13185" fg:w="43484"/><text x="19.0067%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.03%)</title><rect x="84.0031%" y="277" width="0.0313%" height="15" fill="rgb(211,29,28)" fg:x="59050" fg:w="22"/><text x="84.2531%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (49 samples, 0.07%)</title><rect x="84.1369%" y="245" width="0.0697%" height="15" fill="rgb(228,72,33)" fg:x="59144" fg:w="49"/><text x="84.3869%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.06%)</title><rect x="84.2549%" y="229" width="0.0555%" height="15" fill="rgb(205,214,31)" fg:x="59227" fg:w="39"/><text x="84.5049%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (227 samples, 0.32%)</title><rect x="84.0373%" y="277" width="0.3229%" height="15" fill="rgb(224,111,15)" fg:x="59074" fg:w="227"/><text x="84.2873%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (169 samples, 0.24%)</title><rect x="84.1198%" y="261" width="0.2404%" height="15" fill="rgb(253,21,26)" fg:x="59132" fg:w="169"/><text x="84.3698%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (108 samples, 0.15%)</title><rect x="84.2066%" y="245" width="0.1536%" height="15" fill="rgb(245,139,43)" fg:x="59193" fg:w="108"/><text x="84.4566%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (35 samples, 0.05%)</title><rect x="84.3104%" y="229" width="0.0498%" height="15" fill="rgb(252,170,7)" fg:x="59266" fg:w="35"/><text x="84.5604%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="84.4128%" y="245" width="0.0128%" height="15" fill="rgb(231,118,14)" fg:x="59338" fg:w="9"/><text x="84.6628%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="84.4128%" y="261" width="0.0142%" height="15" fill="rgb(238,83,0)" fg:x="59338" fg:w="10"/><text x="84.6628%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.03%)</title><rect x="84.4342%" y="261" width="0.0256%" height="15" fill="rgb(221,39,39)" fg:x="59353" fg:w="18"/><text x="84.6842%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="84.6774%" y="197" width="0.0128%" height="15" fill="rgb(222,119,46)" fg:x="59524" fg:w="9"/><text x="84.9274%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.11%)</title><rect x="84.6020%" y="213" width="0.1067%" height="15" fill="rgb(222,165,49)" fg:x="59471" fg:w="75"/><text x="84.8520%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="84.6902%" y="197" width="0.0185%" height="15" fill="rgb(219,113,52)" fg:x="59533" fg:w="13"/><text x="84.9402%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (83 samples, 0.12%)</title><rect x="84.5978%" y="229" width="0.1181%" height="15" fill="rgb(214,7,15)" fg:x="59468" fg:w="83"/><text x="84.8478%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (107 samples, 0.15%)</title><rect x="84.5750%" y="245" width="0.1522%" height="15" fill="rgb(235,32,4)" fg:x="59452" fg:w="107"/><text x="84.8250%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (271 samples, 0.39%)</title><rect x="84.3602%" y="277" width="0.3855%" height="15" fill="rgb(238,90,54)" fg:x="59301" fg:w="271"/><text x="84.6102%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (194 samples, 0.28%)</title><rect x="84.4697%" y="261" width="0.2760%" height="15" fill="rgb(213,208,19)" fg:x="59378" fg:w="194"/><text x="84.7197%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,904 samples, 4.13%)</title><rect x="80.6160%" y="293" width="4.1312%" height="15" fill="rgb(233,156,4)" fg:x="56669" fg:w="2904"/><text x="80.8660%" y="303.50">rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (182 samples, 0.26%)</title><rect x="84.7471%" y="293" width="0.2589%" height="15" fill="rgb(207,194,5)" fg:x="59573" fg:w="182"/><text x="84.9971%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (37 samples, 0.05%)</title><rect x="84.9534%" y="277" width="0.0526%" height="15" fill="rgb(206,111,30)" fg:x="59718" fg:w="37"/><text x="85.2034%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,418 samples, 9.13%)</title><rect x="85.0060%" y="293" width="9.1301%" height="15" fill="rgb(243,70,54)" fg:x="59755" fg:w="6418"/><text x="85.2560%" y="303.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (68 samples, 0.10%)</title><rect x="94.1361%" y="277" width="0.0967%" height="15" fill="rgb(242,28,8)" fg:x="66173" fg:w="68"/><text x="94.3861%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (331 samples, 0.47%)</title><rect x="94.1361%" y="293" width="0.4709%" height="15" fill="rgb(219,106,18)" fg:x="66173" fg:w="331"/><text x="94.3861%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (263 samples, 0.37%)</title><rect x="94.2329%" y="277" width="0.3741%" height="15" fill="rgb(244,222,10)" fg:x="66241" fg:w="263"/><text x="94.4829%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (82 samples, 0.12%)</title><rect x="94.6070%" y="293" width="0.1167%" height="15" fill="rgb(236,179,52)" fg:x="66504" fg:w="82"/><text x="94.8570%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,681 samples, 5.24%)</title><rect x="94.7265%" y="293" width="5.2365%" height="15" fill="rgb(213,23,39)" fg:x="66588" fg:w="3681"/><text x="94.9765%" y="303.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,651 samples, 3.77%)</title><rect x="96.1918%" y="277" width="3.7712%" height="15" fill="rgb(238,48,10)" fg:x="67618" fg:w="2651"/><text x="96.4418%" y="287.50">rust..</text></g><g><title>all (70,295 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(251,196,23)" fg:x="0" fg:w="70295"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,863 samples, 85.16%)</title><rect x="14.8403%" y="373" width="85.1597%" height="15" fill="rgb(250,152,24)" fg:x="10432" fg:w="59863"/><text x="15.0903%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,863 samples, 85.16%)</title><rect x="14.8403%" y="357" width="85.1597%" height="15" fill="rgb(209,150,17)" fg:x="10432" fg:w="59863"/><text x="15.0903%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,863 samples, 85.16%)</title><rect x="14.8403%" y="341" width="85.1597%" height="15" fill="rgb(234,202,34)" fg:x="10432" fg:w="59863"/><text x="15.0903%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,863 samples, 85.16%)</title><rect x="14.8403%" y="325" width="85.1597%" height="15" fill="rgb(253,148,53)" fg:x="10432" fg:w="59863"/><text x="15.0903%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,862 samples, 85.16%)</title><rect x="14.8417%" y="309" width="85.1583%" height="15" fill="rgb(218,129,16)" fg:x="10433" fg:w="59862"/><text x="15.0917%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (26 samples, 0.04%)</title><rect x="99.9630%" y="293" width="0.0370%" height="15" fill="rgb(216,85,19)" fg:x="70269" fg:w="26"/><text x="100.2130%" y="303.50"></text></g></svg></svg>