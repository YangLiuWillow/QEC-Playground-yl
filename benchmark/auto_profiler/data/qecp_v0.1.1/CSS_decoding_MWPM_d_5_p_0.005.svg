<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="60282"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (21 samples, 0.03%)</title><rect x="0.0133%" y="53" width="0.0348%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="21"/><text x="0.2633%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (21 samples, 0.03%)</title><rect x="0.0133%" y="37" width="0.0348%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="21"/><text x="0.2633%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (25 samples, 0.04%)</title><rect x="0.0133%" y="69" width="0.0415%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="25"/><text x="0.2633%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (15 samples, 0.02%)</title><rect x="0.0547%" y="69" width="0.0249%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="15"/><text x="0.3047%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (16 samples, 0.03%)</title><rect x="0.0796%" y="53" width="0.0265%" height="15" fill="rgb(208,68,35)" fg:x="48" fg:w="16"/><text x="0.3296%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (7 samples, 0.01%)</title><rect x="0.0946%" y="37" width="0.0116%" height="15" fill="rgb(232,128,0)" fg:x="57" fg:w="7"/><text x="0.3446%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (18 samples, 0.03%)</title><rect x="0.0796%" y="69" width="0.0299%" height="15" fill="rgb(207,160,47)" fg:x="48" fg:w="18"/><text x="0.3296%" y="79.50"></text></g><g><title>dyld`start (69 samples, 0.11%)</title><rect x="0.0000%" y="293" width="0.1145%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="69"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`main (68 samples, 0.11%)</title><rect x="0.0017%" y="277" width="0.1128%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="68"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (68 samples, 0.11%)</title><rect x="0.0017%" y="261" width="0.1128%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="68"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (68 samples, 0.11%)</title><rect x="0.0017%" y="245" width="0.1128%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="68"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (68 samples, 0.11%)</title><rect x="0.0017%" y="229" width="0.1128%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="68"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::main (68 samples, 0.11%)</title><rect x="0.0017%" y="213" width="0.1128%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="68"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (68 samples, 0.11%)</title><rect x="0.0017%" y="197" width="0.1128%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="68"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (68 samples, 0.11%)</title><rect x="0.0017%" y="181" width="0.1128%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="68"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (67 samples, 0.11%)</title><rect x="0.0033%" y="165" width="0.1111%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="67"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.11%)</title><rect x="0.0033%" y="149" width="0.1111%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="67"/><text x="0.2533%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (67 samples, 0.11%)</title><rect x="0.0033%" y="133" width="0.1111%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="67"/><text x="0.2533%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.11%)</title><rect x="0.0033%" y="117" width="0.1111%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="67"/><text x="0.2533%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (67 samples, 0.11%)</title><rect x="0.0033%" y="101" width="0.1111%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="67"/><text x="0.2533%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (67 samples, 0.11%)</title><rect x="0.0033%" y="85" width="0.1111%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="67"/><text x="0.2533%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.04%)</title><rect x="0.1576%" y="213" width="0.0398%" height="15" fill="rgb(235,183,28)" fg:x="95" fg:w="24"/><text x="0.4076%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="0.1974%" y="213" width="0.0166%" height="15" fill="rgb(221,5,38)" fg:x="119" fg:w="10"/><text x="0.4474%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.04%)</title><rect x="0.2140%" y="213" width="0.0448%" height="15" fill="rgb(247,18,42)" fg:x="129" fg:w="27"/><text x="0.4640%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="0.2472%" y="197" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="149" fg:w="7"/><text x="0.4972%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.06%)</title><rect x="0.2588%" y="213" width="0.0597%" height="15" fill="rgb(249,31,29)" fg:x="156" fg:w="36"/><text x="0.5088%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.05%)</title><rect x="0.2721%" y="197" width="0.0464%" height="15" fill="rgb(225,111,53)" fg:x="164" fg:w="28"/><text x="0.5221%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="0.3766%" y="181" width="0.0199%" height="15" fill="rgb(238,160,17)" fg:x="227" fg:w="12"/><text x="0.6266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.05%)</title><rect x="0.3500%" y="197" width="0.0498%" height="15" fill="rgb(214,148,48)" fg:x="211" fg:w="30"/><text x="0.6000%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.03%)</title><rect x="0.3998%" y="197" width="0.0332%" height="15" fill="rgb(232,36,49)" fg:x="241" fg:w="20"/><text x="0.6498%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.03%)</title><rect x="0.4031%" y="181" width="0.0299%" height="15" fill="rgb(209,103,24)" fg:x="243" fg:w="18"/><text x="0.6531%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="0.4346%" y="197" width="0.0199%" height="15" fill="rgb(229,88,8)" fg:x="262" fg:w="12"/><text x="0.6846%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.14%)</title><rect x="0.3401%" y="213" width="0.1360%" height="15" fill="rgb(213,181,19)" fg:x="205" fg:w="82"/><text x="0.5901%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (11 samples, 0.02%)</title><rect x="0.4578%" y="197" width="0.0182%" height="15" fill="rgb(254,191,54)" fg:x="276" fg:w="11"/><text x="0.7078%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (66 samples, 0.11%)</title><rect x="0.4927%" y="197" width="0.1095%" height="15" fill="rgb(241,83,37)" fg:x="297" fg:w="66"/><text x="0.7427%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.04%)</title><rect x="0.6121%" y="197" width="0.0398%" height="15" fill="rgb(233,36,39)" fg:x="369" fg:w="24"/><text x="0.8621%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="0.6635%" y="197" width="0.0249%" height="15" fill="rgb(226,3,54)" fg:x="400" fg:w="15"/><text x="0.9135%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="0.6884%" y="197" width="0.0216%" height="15" fill="rgb(245,192,40)" fg:x="415" fg:w="13"/><text x="0.9384%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="0.7117%" y="197" width="0.0680%" height="15" fill="rgb(238,167,29)" fg:x="429" fg:w="41"/><text x="0.9617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.04%)</title><rect x="0.9124%" y="133" width="0.0398%" height="15" fill="rgb(232,182,51)" fg:x="550" fg:w="24"/><text x="1.1624%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.03%)</title><rect x="0.9256%" y="117" width="0.0265%" height="15" fill="rgb(231,60,39)" fg:x="558" fg:w="16"/><text x="1.1756%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.05%)</title><rect x="0.9091%" y="149" width="0.0498%" height="15" fill="rgb(208,69,12)" fg:x="548" fg:w="30"/><text x="1.1591%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (42 samples, 0.07%)</title><rect x="0.8925%" y="165" width="0.0697%" height="15" fill="rgb(235,93,37)" fg:x="538" fg:w="42"/><text x="1.1425%" y="175.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (116 samples, 0.19%)</title><rect x="0.7797%" y="197" width="0.1924%" height="15" fill="rgb(213,116,39)" fg:x="470" fg:w="116"/><text x="1.0297%" y="207.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (55 samples, 0.09%)</title><rect x="0.8809%" y="181" width="0.0912%" height="15" fill="rgb(222,207,29)" fg:x="531" fg:w="55"/><text x="1.1309%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="0.9721%" y="197" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="586" fg:w="7"/><text x="1.2221%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (16 samples, 0.03%)</title><rect x="0.9920%" y="197" width="0.0265%" height="15" fill="rgb(218,138,4)" fg:x="598" fg:w="16"/><text x="1.2420%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="1.0302%" y="197" width="0.0182%" height="15" fill="rgb(250,191,14)" fg:x="621" fg:w="11"/><text x="1.2802%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (82 samples, 0.14%)</title><rect x="8.7456%" y="181" width="0.1360%" height="15" fill="rgb(239,60,40)" fg:x="5272" fg:w="82"/><text x="8.9956%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (52 samples, 0.09%)</title><rect x="8.9463%" y="149" width="0.0863%" height="15" fill="rgb(206,27,48)" fg:x="5393" fg:w="52"/><text x="9.1963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="9.0043%" y="133" width="0.0282%" height="15" fill="rgb(225,35,8)" fg:x="5428" fg:w="17"/><text x="9.2543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (97 samples, 0.16%)</title><rect x="8.8816%" y="181" width="0.1609%" height="15" fill="rgb(250,213,24)" fg:x="5354" fg:w="97"/><text x="9.1316%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (75 samples, 0.12%)</title><rect x="8.9181%" y="165" width="0.1244%" height="15" fill="rgb(247,123,22)" fg:x="5376" fg:w="75"/><text x="9.1681%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (31 samples, 0.05%)</title><rect x="9.1503%" y="165" width="0.0514%" height="15" fill="rgb(231,138,38)" fg:x="5516" fg:w="31"/><text x="9.4003%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (91 samples, 0.15%)</title><rect x="9.0525%" y="181" width="0.1510%" height="15" fill="rgb(231,145,46)" fg:x="5457" fg:w="91"/><text x="9.3025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="9.2283%" y="149" width="0.0149%" height="15" fill="rgb(251,118,11)" fg:x="5563" fg:w="9"/><text x="9.4783%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.04%)</title><rect x="9.2051%" y="181" width="0.0398%" height="15" fill="rgb(217,147,25)" fg:x="5549" fg:w="24"/><text x="9.4551%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.03%)</title><rect x="9.2134%" y="165" width="0.0315%" height="15" fill="rgb(247,81,37)" fg:x="5554" fg:w="19"/><text x="9.4634%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="9.2532%" y="181" width="0.0365%" height="15" fill="rgb(209,12,38)" fg:x="5578" fg:w="22"/><text x="9.5032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="9.2897%" y="181" width="0.0182%" height="15" fill="rgb(227,1,9)" fg:x="5600" fg:w="11"/><text x="9.5397%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.01%)</title><rect x="9.3096%" y="181" width="0.0133%" height="15" fill="rgb(248,47,43)" fg:x="5612" fg:w="8"/><text x="9.5596%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.05%)</title><rect x="9.3228%" y="181" width="0.0514%" height="15" fill="rgb(221,10,30)" fg:x="5620" fg:w="31"/><text x="9.5728%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="9.4124%" y="165" width="0.0182%" height="15" fill="rgb(210,229,1)" fg:x="5674" fg:w="11"/><text x="9.6624%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="9.4141%" y="149" width="0.0166%" height="15" fill="rgb(222,148,37)" fg:x="5675" fg:w="10"/><text x="9.6641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="9.4141%" y="133" width="0.0166%" height="15" fill="rgb(234,67,33)" fg:x="5675" fg:w="10"/><text x="9.6641%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="9.4506%" y="149" width="0.0299%" height="15" fill="rgb(247,98,35)" fg:x="5697" fg:w="18"/><text x="9.7006%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (49 samples, 0.08%)</title><rect x="9.4307%" y="165" width="0.0813%" height="15" fill="rgb(247,138,52)" fg:x="5685" fg:w="49"/><text x="9.6807%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (19 samples, 0.03%)</title><rect x="9.4804%" y="149" width="0.0315%" height="15" fill="rgb(213,79,30)" fg:x="5715" fg:w="19"/><text x="9.7304%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (75 samples, 0.12%)</title><rect x="9.3975%" y="181" width="0.1244%" height="15" fill="rgb(246,177,23)" fg:x="5665" fg:w="75"/><text x="9.6475%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="9.5634%" y="117" width="0.0249%" height="15" fill="rgb(230,62,27)" fg:x="5765" fg:w="15"/><text x="9.8134%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="9.5567%" y="149" width="0.0332%" height="15" fill="rgb(216,154,8)" fg:x="5761" fg:w="20"/><text x="9.8067%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="9.5617%" y="133" width="0.0282%" height="15" fill="rgb(244,35,45)" fg:x="5764" fg:w="17"/><text x="9.8117%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="9.6015%" y="117" width="0.0232%" height="15" fill="rgb(251,115,12)" fg:x="5788" fg:w="14"/><text x="9.8515%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="9.5949%" y="133" width="0.0315%" height="15" fill="rgb(240,54,50)" fg:x="5784" fg:w="19"/><text x="9.8449%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (65 samples, 0.11%)</title><rect x="9.5319%" y="181" width="0.1078%" height="15" fill="rgb(233,84,52)" fg:x="5746" fg:w="65"/><text x="9.7819%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.09%)</title><rect x="9.5534%" y="165" width="0.0863%" height="15" fill="rgb(207,117,47)" fg:x="5759" fg:w="52"/><text x="9.8034%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.05%)</title><rect x="9.5932%" y="149" width="0.0464%" height="15" fill="rgb(249,43,39)" fg:x="5783" fg:w="28"/><text x="9.8432%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="9.7060%" y="149" width="0.0464%" height="15" fill="rgb(209,38,44)" fg:x="5851" fg:w="28"/><text x="9.9560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="9.7226%" y="133" width="0.0299%" height="15" fill="rgb(236,212,23)" fg:x="5861" fg:w="18"/><text x="9.9726%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="9.7326%" y="117" width="0.0199%" height="15" fill="rgb(242,79,21)" fg:x="5867" fg:w="12"/><text x="9.9826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="9.7542%" y="149" width="0.0133%" height="15" fill="rgb(211,96,35)" fg:x="5880" fg:w="8"/><text x="10.0042%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (9 samples, 0.01%)</title><rect x="9.7940%" y="133" width="0.0149%" height="15" fill="rgb(253,215,40)" fg:x="5904" fg:w="9"/><text x="10.0440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="9.8354%" y="117" width="0.0133%" height="15" fill="rgb(211,81,21)" fg:x="5929" fg:w="8"/><text x="10.0854%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="9.8819%" y="101" width="0.0232%" height="15" fill="rgb(208,190,38)" fg:x="5957" fg:w="14"/><text x="10.1319%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="9.9051%" y="101" width="0.0216%" height="15" fill="rgb(235,213,38)" fg:x="5971" fg:w="13"/><text x="10.1551%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="9.9068%" y="85" width="0.0199%" height="15" fill="rgb(237,122,38)" fg:x="5972" fg:w="12"/><text x="10.1568%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="9.9267%" y="101" width="0.0216%" height="15" fill="rgb(244,218,35)" fg:x="5984" fg:w="13"/><text x="10.1767%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="9.9665%" y="69" width="0.0199%" height="15" fill="rgb(240,68,47)" fg:x="6008" fg:w="12"/><text x="10.2165%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.07%)</title><rect x="9.9482%" y="101" width="0.0730%" height="15" fill="rgb(210,16,53)" fg:x="5997" fg:w="44"/><text x="10.1982%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (42 samples, 0.07%)</title><rect x="9.9516%" y="85" width="0.0697%" height="15" fill="rgb(235,124,12)" fg:x="5999" fg:w="42"/><text x="10.2016%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.03%)</title><rect x="9.9864%" y="69" width="0.0348%" height="15" fill="rgb(224,169,11)" fg:x="6020" fg:w="21"/><text x="10.2364%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (105 samples, 0.17%)</title><rect x="9.8487%" y="117" width="0.1742%" height="15" fill="rgb(250,166,2)" fg:x="5937" fg:w="105"/><text x="10.0987%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="10.0577%" y="101" width="0.0182%" height="15" fill="rgb(242,216,29)" fg:x="6063" fg:w="11"/><text x="10.3077%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.02%)</title><rect x="10.0760%" y="101" width="0.0232%" height="15" fill="rgb(230,116,27)" fg:x="6074" fg:w="14"/><text x="10.3260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="10.0793%" y="85" width="0.0199%" height="15" fill="rgb(228,99,48)" fg:x="6076" fg:w="12"/><text x="10.3293%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (23 samples, 0.04%)</title><rect x="10.1108%" y="101" width="0.0382%" height="15" fill="rgb(253,11,6)" fg:x="6095" fg:w="23"/><text x="10.3608%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (25 samples, 0.04%)</title><rect x="10.1506%" y="85" width="0.0415%" height="15" fill="rgb(247,143,39)" fg:x="6119" fg:w="25"/><text x="10.4006%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.03%)</title><rect x="10.1656%" y="69" width="0.0265%" height="15" fill="rgb(236,97,10)" fg:x="6128" fg:w="16"/><text x="10.4156%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.05%)</title><rect x="10.1490%" y="101" width="0.0464%" height="15" fill="rgb(233,208,19)" fg:x="6118" fg:w="28"/><text x="10.3990%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="10.1954%" y="101" width="0.0216%" height="15" fill="rgb(216,164,2)" fg:x="6146" fg:w="13"/><text x="10.4454%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.02%)</title><rect x="10.1987%" y="85" width="0.0182%" height="15" fill="rgb(220,129,5)" fg:x="6148" fg:w="11"/><text x="10.4487%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (134 samples, 0.22%)</title><rect x="10.0345%" y="117" width="0.2223%" height="15" fill="rgb(242,17,10)" fg:x="6049" fg:w="134"/><text x="10.2845%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (24 samples, 0.04%)</title><rect x="10.2170%" y="101" width="0.0398%" height="15" fill="rgb(242,107,0)" fg:x="6159" fg:w="24"/><text x="10.4670%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="10.2435%" y="85" width="0.0133%" height="15" fill="rgb(251,28,31)" fg:x="6175" fg:w="8"/><text x="10.4935%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (331 samples, 0.55%)</title><rect x="9.8089%" y="133" width="0.5491%" height="15" fill="rgb(233,223,10)" fg:x="5913" fg:w="331"/><text x="10.0589%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.09%)</title><rect x="10.2634%" y="117" width="0.0946%" height="15" fill="rgb(215,21,27)" fg:x="6187" fg:w="57"/><text x="10.5134%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="10.3580%" y="133" width="0.0315%" height="15" fill="rgb(232,23,21)" fg:x="6244" fg:w="19"/><text x="10.6080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="10.3895%" y="133" width="0.0116%" height="15" fill="rgb(244,5,23)" fg:x="6263" fg:w="7"/><text x="10.6395%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (430 samples, 0.71%)</title><rect x="9.7674%" y="149" width="0.7133%" height="15" fill="rgb(226,81,46)" fg:x="5888" fg:w="430"/><text x="10.0174%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (35 samples, 0.06%)</title><rect x="10.4227%" y="133" width="0.0581%" height="15" fill="rgb(247,70,30)" fg:x="6283" fg:w="35"/><text x="10.6727%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.05%)</title><rect x="10.4293%" y="117" width="0.0514%" height="15" fill="rgb(212,68,19)" fg:x="6287" fg:w="31"/><text x="10.6793%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (510 samples, 0.85%)</title><rect x="9.6397%" y="181" width="0.8460%" height="15" fill="rgb(240,187,13)" fg:x="5811" fg:w="510"/><text x="9.8897%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (480 samples, 0.80%)</title><rect x="9.6895%" y="165" width="0.7963%" height="15" fill="rgb(223,113,26)" fg:x="5841" fg:w="480"/><text x="9.9395%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="11.7183%" y="149" width="0.0149%" height="15" fill="rgb(206,192,2)" fg:x="7064" fg:w="9"/><text x="11.9683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.03%)</title><rect x="11.7382%" y="133" width="0.0282%" height="15" fill="rgb(241,108,4)" fg:x="7076" fg:w="17"/><text x="11.9882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.03%)</title><rect x="11.7382%" y="117" width="0.0282%" height="15" fill="rgb(247,173,49)" fg:x="7076" fg:w="17"/><text x="11.9882%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.08%)</title><rect x="11.7116%" y="165" width="0.0796%" height="15" fill="rgb(224,114,35)" fg:x="7060" fg:w="48"/><text x="11.9616%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.06%)</title><rect x="11.7348%" y="149" width="0.0564%" height="15" fill="rgb(245,159,27)" fg:x="7074" fg:w="34"/><text x="11.9848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="11.7680%" y="133" width="0.0232%" height="15" fill="rgb(245,172,44)" fg:x="7094" fg:w="14"/><text x="12.0180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="11.7929%" y="165" width="0.0415%" height="15" fill="rgb(236,23,11)" fg:x="7109" fg:w="25"/><text x="12.0429%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="11.8676%" y="149" width="0.0149%" height="15" fill="rgb(205,117,38)" fg:x="7154" fg:w="9"/><text x="12.1176%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (51 samples, 0.08%)</title><rect x="11.8360%" y="165" width="0.0846%" height="15" fill="rgb(237,72,25)" fg:x="7135" fg:w="51"/><text x="12.0860%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (15 samples, 0.02%)</title><rect x="11.8958%" y="149" width="0.0249%" height="15" fill="rgb(244,70,9)" fg:x="7171" fg:w="15"/><text x="12.1458%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (241 samples, 0.40%)</title><rect x="11.9621%" y="165" width="0.3998%" height="15" fill="rgb(217,125,39)" fg:x="7211" fg:w="241"/><text x="12.2121%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (7 samples, 0.01%)</title><rect x="12.3619%" y="165" width="0.0116%" height="15" fill="rgb(235,36,10)" fg:x="7452" fg:w="7"/><text x="12.6119%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (224 samples, 0.37%)</title><rect x="12.5510%" y="149" width="0.3716%" height="15" fill="rgb(251,123,47)" fg:x="7566" fg:w="224"/><text x="12.8010%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="12.9326%" y="149" width="0.0116%" height="15" fill="rgb(221,13,13)" fg:x="7796" fg:w="7"/><text x="13.1826%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.04%)</title><rect x="12.9491%" y="149" width="0.0415%" height="15" fill="rgb(238,131,9)" fg:x="7806" fg:w="25"/><text x="13.1991%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (727 samples, 1.21%)</title><rect x="13.0022%" y="149" width="1.2060%" height="15" fill="rgb(211,50,8)" fg:x="7838" fg:w="727"/><text x="13.2522%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (83 samples, 0.14%)</title><rect x="14.2082%" y="149" width="0.1377%" height="15" fill="rgb(245,182,24)" fg:x="8565" fg:w="83"/><text x="14.4582%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (19 samples, 0.03%)</title><rect x="14.3459%" y="149" width="0.0315%" height="15" fill="rgb(242,14,37)" fg:x="8648" fg:w="19"/><text x="14.5959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="14.4040%" y="85" width="0.0116%" height="15" fill="rgb(246,228,12)" fg:x="8683" fg:w="7"/><text x="14.6540%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="14.3874%" y="117" width="0.0299%" height="15" fill="rgb(213,55,15)" fg:x="8673" fg:w="18"/><text x="14.6374%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="14.3990%" y="101" width="0.0182%" height="15" fill="rgb(209,9,3)" fg:x="8680" fg:w="11"/><text x="14.6490%" y="111.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (19 samples, 0.03%)</title><rect x="14.3874%" y="133" width="0.0315%" height="15" fill="rgb(230,59,30)" fg:x="8673" fg:w="19"/><text x="14.6374%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="14.4620%" y="69" width="0.0149%" height="15" fill="rgb(209,121,21)" fg:x="8718" fg:w="9"/><text x="14.7120%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.08%)</title><rect x="14.4189%" y="133" width="0.0763%" height="15" fill="rgb(220,109,13)" fg:x="8692" fg:w="46"/><text x="14.6689%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.06%)</title><rect x="14.4322%" y="117" width="0.0630%" height="15" fill="rgb(232,18,1)" fg:x="8700" fg:w="38"/><text x="14.6822%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 0.05%)</title><rect x="14.4471%" y="101" width="0.0481%" height="15" fill="rgb(215,41,42)" fg:x="8709" fg:w="29"/><text x="14.6971%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (28 samples, 0.05%)</title><rect x="14.4488%" y="85" width="0.0464%" height="15" fill="rgb(224,123,36)" fg:x="8710" fg:w="28"/><text x="14.6988%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="14.4803%" y="69" width="0.0149%" height="15" fill="rgb(240,125,3)" fg:x="8729" fg:w="9"/><text x="14.7303%" y="79.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (70 samples, 0.12%)</title><rect x="14.3841%" y="149" width="0.1161%" height="15" fill="rgb(205,98,50)" fg:x="8671" fg:w="70"/><text x="14.6341%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (101 samples, 0.17%)</title><rect x="14.5002%" y="149" width="0.1675%" height="15" fill="rgb(205,185,37)" fg:x="8741" fg:w="101"/><text x="14.7502%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (7 samples, 0.01%)</title><rect x="14.8834%" y="133" width="0.0116%" height="15" fill="rgb(238,207,15)" fg:x="8972" fg:w="7"/><text x="15.1334%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="14.8834%" y="117" width="0.0116%" height="15" fill="rgb(213,199,42)" fg:x="8972" fg:w="7"/><text x="15.1334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="14.8834%" y="101" width="0.0116%" height="15" fill="rgb(235,201,11)" fg:x="8972" fg:w="7"/><text x="15.1334%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1,298 samples, 2.15%)</title><rect x="14.8950%" y="133" width="2.1532%" height="15" fill="rgb(207,46,11)" fg:x="8979" fg:w="1298"/><text x="15.1450%" y="143.50">l..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (217 samples, 0.36%)</title><rect x="17.0532%" y="117" width="0.3600%" height="15" fill="rgb(241,35,35)" fg:x="10280" fg:w="217"/><text x="17.3032%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (222 samples, 0.37%)</title><rect x="17.0515%" y="133" width="0.3683%" height="15" fill="rgb(243,32,47)" fg:x="10279" fg:w="222"/><text x="17.3015%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (65 samples, 0.11%)</title><rect x="17.4380%" y="133" width="0.1078%" height="15" fill="rgb(247,202,23)" fg:x="10512" fg:w="65"/><text x="17.6880%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (339 samples, 0.56%)</title><rect x="18.1149%" y="117" width="0.5624%" height="15" fill="rgb(219,102,11)" fg:x="10920" fg:w="339"/><text x="18.3649%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (23 samples, 0.04%)</title><rect x="18.6391%" y="101" width="0.0382%" height="15" fill="rgb(243,110,44)" fg:x="11236" fg:w="23"/><text x="18.8891%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (23 samples, 0.04%)</title><rect x="18.6391%" y="85" width="0.0382%" height="15" fill="rgb(222,74,54)" fg:x="11236" fg:w="23"/><text x="18.8891%" y="95.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (780 samples, 1.29%)</title><rect x="17.5542%" y="133" width="1.2939%" height="15" fill="rgb(216,99,12)" fg:x="10582" fg:w="780"/><text x="17.8042%" y="143.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (103 samples, 0.17%)</title><rect x="18.6772%" y="117" width="0.1709%" height="15" fill="rgb(226,22,26)" fg:x="11259" fg:w="103"/><text x="18.9272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="22.7713%" y="85" width="0.0116%" height="15" fill="rgb(217,163,10)" fg:x="13727" fg:w="7"/><text x="23.0213%" y="95.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,912 samples, 3.17%)</title><rect x="19.6195%" y="117" width="3.1718%" height="15" fill="rgb(213,25,53)" fg:x="11827" fg:w="1912"/><text x="19.8695%" y="127.50">rus..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="22.7696%" y="101" width="0.0216%" height="15" fill="rgb(252,105,26)" fg:x="13726" fg:w="13"/><text x="23.0196%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,406 samples, 3.99%)</title><rect x="18.8481%" y="133" width="3.9912%" height="15" fill="rgb(220,39,43)" fg:x="11362" fg:w="2406"/><text x="19.0981%" y="143.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (29 samples, 0.05%)</title><rect x="22.7912%" y="117" width="0.0481%" height="15" fill="rgb(229,68,48)" fg:x="13739" fg:w="29"/><text x="23.0412%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (10 samples, 0.02%)</title><rect x="23.6771%" y="101" width="0.0166%" height="15" fill="rgb(252,8,32)" fg:x="14273" fg:w="10"/><text x="23.9271%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (13 samples, 0.02%)</title><rect x="23.6771%" y="117" width="0.0216%" height="15" fill="rgb(223,20,43)" fg:x="14273" fg:w="13"/><text x="23.9271%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (559 samples, 0.93%)</title><rect x="22.8476%" y="133" width="0.9273%" height="15" fill="rgb(229,81,49)" fg:x="13773" fg:w="559"/><text x="23.0976%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (46 samples, 0.08%)</title><rect x="23.6986%" y="117" width="0.0763%" height="15" fill="rgb(236,28,36)" fg:x="14286" fg:w="46"/><text x="23.9486%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::UpdateDuals (11 samples, 0.02%)</title><rect x="23.7749%" y="133" width="0.0182%" height="15" fill="rgb(249,185,26)" fg:x="14332" fg:w="11"/><text x="24.0249%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (5,622 samples, 9.33%)</title><rect x="14.6727%" y="149" width="9.3262%" height="15" fill="rgb(249,174,33)" fg:x="8845" fg:w="5622"/><text x="14.9227%" y="159.50">rust_qecp`Per..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (124 samples, 0.21%)</title><rect x="23.7932%" y="133" width="0.2057%" height="15" fill="rgb(233,201,37)" fg:x="14343" fg:w="124"/><text x="24.0432%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="24.0088%" y="133" width="0.0564%" height="15" fill="rgb(221,78,26)" fg:x="14473" fg:w="34"/><text x="24.2588%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="24.0536%" y="117" width="0.0116%" height="15" fill="rgb(250,127,30)" fg:x="14500" fg:w="7"/><text x="24.3036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="24.1050%" y="117" width="0.0166%" height="15" fill="rgb(230,49,44)" fg:x="14531" fg:w="10"/><text x="24.3550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (35 samples, 0.06%)</title><rect x="24.0685%" y="133" width="0.0581%" height="15" fill="rgb(229,67,23)" fg:x="14509" fg:w="35"/><text x="24.3185%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (96 samples, 0.16%)</title><rect x="23.9989%" y="149" width="0.1593%" height="15" fill="rgb(249,83,47)" fg:x="14467" fg:w="96"/><text x="24.2489%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (8,284 samples, 13.74%)</title><rect x="10.4990%" y="181" width="13.7421%" height="15" fill="rgb(215,43,3)" fg:x="6329" fg:w="8284"/><text x="10.7490%" y="191.50">rust_qecp`rust_qecp::..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (7,151 samples, 11.86%)</title><rect x="12.3785%" y="165" width="11.8626%" height="15" fill="rgb(238,154,13)" fg:x="7462" fg:w="7151"/><text x="12.6285%" y="175.50">rust_qecp`minimum_..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (50 samples, 0.08%)</title><rect x="24.1581%" y="149" width="0.0829%" height="15" fill="rgb(219,56,2)" fg:x="14563" fg:w="50"/><text x="24.4081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="24.9544%" y="133" width="0.0398%" height="15" fill="rgb(233,0,4)" fg:x="15043" fg:w="24"/><text x="25.2044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.07%)</title><rect x="24.9262%" y="165" width="0.0746%" height="15" fill="rgb(235,30,7)" fg:x="15026" fg:w="45"/><text x="25.1762%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.05%)</title><rect x="24.9477%" y="149" width="0.0531%" height="15" fill="rgb(250,79,13)" fg:x="15039" fg:w="32"/><text x="25.1977%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (469 samples, 0.78%)</title><rect x="24.2411%" y="181" width="0.7780%" height="15" fill="rgb(211,146,34)" fg:x="14613" fg:w="469"/><text x="24.4911%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="25.0075%" y="165" width="0.0116%" height="15" fill="rgb(228,22,38)" fg:x="15075" fg:w="7"/><text x="25.2575%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (14,448 samples, 23.97%)</title><rect x="1.0534%" y="197" width="23.9674%" height="15" fill="rgb(235,168,5)" fg:x="635" fg:w="14448"/><text x="1.3034%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarCode..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (14,988 samples, 24.86%)</title><rect x="0.4894%" y="213" width="24.8631%" height="15" fill="rgb(221,155,16)" fg:x="295" fg:w="14988"/><text x="0.7394%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMo..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (200 samples, 0.33%)</title><rect x="25.0207%" y="197" width="0.3318%" height="15" fill="rgb(215,215,53)" fg:x="15083" fg:w="200"/><text x="25.2707%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (5,608 samples, 9.30%)</title><rect x="25.3542%" y="213" width="9.3029%" height="15" fill="rgb(223,4,10)" fg:x="15284" fg:w="5608"/><text x="25.6042%" y="223.50">rust_qecp`rus..</text></g><g><title>rust_qecp`ndarray::dimension::dimension_trait::Dimension::default_strides (9 samples, 0.01%)</title><rect x="35.9643%" y="197" width="0.0149%" height="15" fill="rgb(234,103,6)" fg:x="21680" fg:w="9"/><text x="36.2143%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="36.0008%" y="133" width="0.0133%" height="15" fill="rgb(227,97,0)" fg:x="21702" fg:w="8"/><text x="36.2508%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="35.9925%" y="149" width="0.0315%" height="15" fill="rgb(234,150,53)" fg:x="21697" fg:w="19"/><text x="36.2425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.06%)</title><rect x="35.9842%" y="165" width="0.0597%" height="15" fill="rgb(228,201,54)" fg:x="21692" fg:w="36"/><text x="36.2342%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="36.0240%" y="149" width="0.0199%" height="15" fill="rgb(222,22,37)" fg:x="21716" fg:w="12"/><text x="36.2740%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (37 samples, 0.06%)</title><rect x="35.9842%" y="181" width="0.0614%" height="15" fill="rgb(237,53,32)" fg:x="21692" fg:w="37"/><text x="36.2342%" y="191.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (42 samples, 0.07%)</title><rect x="35.9792%" y="197" width="0.0697%" height="15" fill="rgb(233,25,53)" fg:x="21689" fg:w="42"/><text x="36.2292%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,336 samples, 2.22%)</title><rect x="34.6571%" y="213" width="2.2163%" height="15" fill="rgb(210,40,34)" fg:x="20892" fg:w="1336"/><text x="34.9071%" y="223.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (497 samples, 0.82%)</title><rect x="36.0489%" y="197" width="0.8245%" height="15" fill="rgb(241,220,44)" fg:x="21731" fg:w="497"/><text x="36.2989%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (16,857 samples, 27.96%)</title><rect x="36.8734%" y="213" width="27.9636%" height="15" fill="rgb(235,28,35)" fg:x="22228" fg:w="16857"/><text x="37.1234%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::..</text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="64.8403%" y="197" width="0.0199%" height="15" fill="rgb(210,56,17)" fg:x="39087" fg:w="12"/><text x="65.0903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="64.8933%" y="165" width="0.0116%" height="15" fill="rgb(224,130,29)" fg:x="39119" fg:w="7"/><text x="65.1433%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.05%)</title><rect x="64.8602%" y="197" width="0.0464%" height="15" fill="rgb(235,212,8)" fg:x="39099" fg:w="28"/><text x="65.1102%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="64.8701%" y="181" width="0.0365%" height="15" fill="rgb(223,33,50)" fg:x="39105" fg:w="22"/><text x="65.1201%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (703 samples, 1.17%)</title><rect x="64.9149%" y="197" width="1.1662%" height="15" fill="rgb(219,149,13)" fg:x="39132" fg:w="703"/><text x="65.1649%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="67.6139%" y="133" width="0.0332%" height="15" fill="rgb(250,156,29)" fg:x="40759" fg:w="20"/><text x="67.8639%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.02%)</title><rect x="67.6255%" y="117" width="0.0216%" height="15" fill="rgb(216,193,19)" fg:x="40766" fg:w="13"/><text x="67.8755%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.06%)</title><rect x="67.6072%" y="149" width="0.0581%" height="15" fill="rgb(216,135,14)" fg:x="40755" fg:w="35"/><text x="67.8572%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="67.6471%" y="133" width="0.0182%" height="15" fill="rgb(241,47,5)" fg:x="40779" fg:w="11"/><text x="67.8971%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (39 samples, 0.06%)</title><rect x="67.6023%" y="165" width="0.0647%" height="15" fill="rgb(233,42,35)" fg:x="40752" fg:w="39"/><text x="67.8523%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,711 samples, 2.84%)</title><rect x="64.8369%" y="213" width="2.8383%" height="15" fill="rgb(231,13,6)" fg:x="39085" fg:w="1711"/><text x="65.0869%" y="223.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (961 samples, 1.59%)</title><rect x="66.0811%" y="197" width="1.5942%" height="15" fill="rgb(207,181,40)" fg:x="39835" fg:w="961"/><text x="66.3311%" y="207.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (53 samples, 0.09%)</title><rect x="67.5873%" y="181" width="0.0879%" height="15" fill="rgb(254,173,49)" fg:x="40743" fg:w="53"/><text x="67.8373%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (19,475 samples, 32.31%)</title><rect x="67.6769%" y="213" width="32.3065%" height="15" fill="rgb(221,1,38)" fg:x="40797" fg:w="19475"/><text x="67.9269%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propaga..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (14,018 samples, 23.25%)</title><rect x="76.7294%" y="197" width="23.2540%" height="15" fill="rgb(206,124,46)" fg:x="46254" fg:w="14018"/><text x="76.9794%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarCod..</text></g><g><title>all (60,282 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="60282"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,213 samples, 99.89%)</title><rect x="0.1145%" y="293" width="99.8855%" height="15" fill="rgb(222,201,40)" fg:x="69" fg:w="60213"/><text x="0.3645%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,213 samples, 99.89%)</title><rect x="0.1145%" y="277" width="99.8855%" height="15" fill="rgb(235,61,29)" fg:x="69" fg:w="60213"/><text x="0.3645%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,213 samples, 99.89%)</title><rect x="0.1145%" y="261" width="99.8855%" height="15" fill="rgb(219,207,3)" fg:x="69" fg:w="60213"/><text x="0.3645%" y="271.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,213 samples, 99.89%)</title><rect x="0.1145%" y="245" width="99.8855%" height="15" fill="rgb(222,56,46)" fg:x="69" fg:w="60213"/><text x="0.3645%" y="255.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,197 samples, 99.86%)</title><rect x="0.1410%" y="229" width="99.8590%" height="15" fill="rgb(239,76,54)" fg:x="85" fg:w="60197"/><text x="0.3910%" y="239.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (10 samples, 0.02%)</title><rect x="99.9834%" y="213" width="0.0166%" height="15" fill="rgb(231,124,27)" fg:x="60272" fg:w="10"/><text x="100.2334%" y="223.50"></text></g></svg></svg>