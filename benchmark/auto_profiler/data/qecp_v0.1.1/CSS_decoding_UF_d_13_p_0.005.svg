<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="69284"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (10 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0144%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (10 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0144%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="10"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="0.0346%" y="117" width="0.0217%" height="15" fill="rgb(221,193,54)" fg:x="24" fg:w="15"/><text x="0.2846%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.04%)</title><rect x="0.0245%" y="133" width="0.0447%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="31"/><text x="0.2745%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (41 samples, 0.06%)</title><rect x="0.0909%" y="37" width="0.0592%" height="15" fill="rgb(208,68,35)" fg:x="63" fg:w="41"/><text x="0.3409%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (52 samples, 0.08%)</title><rect x="0.0909%" y="53" width="0.0751%" height="15" fill="rgb(232,128,0)" fg:x="63" fg:w="52"/><text x="0.3409%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.08%)</title><rect x="0.1674%" y="53" width="0.0779%" height="15" fill="rgb(207,160,47)" fg:x="116" fg:w="54"/><text x="0.4174%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (113 samples, 0.16%)</title><rect x="0.0837%" y="133" width="0.1631%" height="15" fill="rgb(228,23,34)" fg:x="58" fg:w="113"/><text x="0.3337%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (113 samples, 0.16%)</title><rect x="0.0837%" y="117" width="0.1631%" height="15" fill="rgb(218,30,26)" fg:x="58" fg:w="113"/><text x="0.3337%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (113 samples, 0.16%)</title><rect x="0.0837%" y="101" width="0.1631%" height="15" fill="rgb(220,122,19)" fg:x="58" fg:w="113"/><text x="0.3337%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (113 samples, 0.16%)</title><rect x="0.0837%" y="85" width="0.1631%" height="15" fill="rgb(250,228,42)" fg:x="58" fg:w="113"/><text x="0.3337%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (109 samples, 0.16%)</title><rect x="0.0895%" y="69" width="0.1573%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="109"/><text x="0.3395%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.2511%" y="69" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="174" fg:w="8"/><text x="0.5011%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="0.2468%" y="101" width="0.0318%" height="15" fill="rgb(206,188,39)" fg:x="171" fg:w="22"/><text x="0.4968%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (20 samples, 0.03%)</title><rect x="0.2497%" y="85" width="0.0289%" height="15" fill="rgb(217,207,13)" fg:x="173" fg:w="20"/><text x="0.4997%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (7 samples, 0.01%)</title><rect x="0.2685%" y="69" width="0.0101%" height="15" fill="rgb(231,73,38)" fg:x="186" fg:w="7"/><text x="0.5185%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (23 samples, 0.03%)</title><rect x="0.2468%" y="133" width="0.0332%" height="15" fill="rgb(225,20,46)" fg:x="171" fg:w="23"/><text x="0.4968%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.03%)</title><rect x="0.2468%" y="117" width="0.0332%" height="15" fill="rgb(210,31,41)" fg:x="171" fg:w="23"/><text x="0.4968%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (488 samples, 0.70%)</title><rect x="0.2800%" y="133" width="0.7043%" height="15" fill="rgb(221,200,47)" fg:x="194" fg:w="488"/><text x="0.5300%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (224 samples, 0.32%)</title><rect x="0.9844%" y="133" width="0.3233%" height="15" fill="rgb(226,26,5)" fg:x="682" fg:w="224"/><text x="1.2344%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="1.3077%" y="133" width="0.0101%" height="15" fill="rgb(249,33,26)" fg:x="906" fg:w="7"/><text x="1.5577%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 0.11%)</title><rect x="5.9754%" y="117" width="0.1097%" height="15" fill="rgb(235,183,28)" fg:x="4140" fg:w="76"/><text x="6.2254%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.11%)</title><rect x="6.0851%" y="117" width="0.1083%" height="15" fill="rgb(221,5,38)" fg:x="4216" fg:w="75"/><text x="6.3351%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (53 samples, 0.08%)</title><rect x="6.1933%" y="117" width="0.0765%" height="15" fill="rgb(247,18,42)" fg:x="4291" fg:w="53"/><text x="6.4433%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (492 samples, 0.71%)</title><rect x="6.2698%" y="117" width="0.7101%" height="15" fill="rgb(241,131,45)" fg:x="4344" fg:w="492"/><text x="6.5198%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="6.9800%" y="69" width="0.0173%" height="15" fill="rgb(249,31,29)" fg:x="4836" fg:w="12"/><text x="7.2300%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.02%)</title><rect x="6.9800%" y="117" width="0.0188%" height="15" fill="rgb(225,111,53)" fg:x="4836" fg:w="13"/><text x="7.2300%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="6.9800%" y="101" width="0.0188%" height="15" fill="rgb(238,160,17)" fg:x="4836" fg:w="13"/><text x="7.2300%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="6.9800%" y="85" width="0.0188%" height="15" fill="rgb(214,148,48)" fg:x="4836" fg:w="13"/><text x="7.2300%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (78 samples, 0.11%)</title><rect x="7.6223%" y="101" width="0.1126%" height="15" fill="rgb(232,36,49)" fg:x="5281" fg:w="78"/><text x="7.8723%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.03%)</title><rect x="7.7724%" y="69" width="0.0303%" height="15" fill="rgb(209,103,24)" fg:x="5385" fg:w="21"/><text x="8.0224%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (24 samples, 0.03%)</title><rect x="7.7724%" y="85" width="0.0346%" height="15" fill="rgb(229,88,8)" fg:x="5385" fg:w="24"/><text x="8.0224%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (710 samples, 1.02%)</title><rect x="6.9987%" y="117" width="1.0248%" height="15" fill="rgb(213,181,19)" fg:x="4849" fg:w="710"/><text x="7.2487%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (197 samples, 0.28%)</title><rect x="7.7392%" y="101" width="0.2843%" height="15" fill="rgb(254,191,54)" fg:x="5362" fg:w="197"/><text x="7.9892%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (144 samples, 0.21%)</title><rect x="7.8157%" y="85" width="0.2078%" height="15" fill="rgb(241,83,37)" fg:x="5415" fg:w="144"/><text x="8.0657%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (28 samples, 0.04%)</title><rect x="8.0322%" y="117" width="0.0404%" height="15" fill="rgb(233,36,39)" fg:x="5565" fg:w="28"/><text x="8.2822%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (167 samples, 0.24%)</title><rect x="10.8135%" y="101" width="0.2410%" height="15" fill="rgb(226,3,54)" fg:x="7492" fg:w="167"/><text x="11.0635%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (458 samples, 0.66%)</title><rect x="11.0632%" y="101" width="0.6610%" height="15" fill="rgb(245,192,40)" fg:x="7665" fg:w="458"/><text x="11.3132%" y="111.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (23 samples, 0.03%)</title><rect x="11.7906%" y="85" width="0.0332%" height="15" fill="rgb(238,167,29)" fg:x="8169" fg:w="23"/><text x="12.0406%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,349 samples, 10.61%)</title><rect x="1.3279%" y="133" width="10.6071%" height="15" fill="rgb(232,182,51)" fg:x="920" fg:w="7349"/><text x="1.5779%" y="143.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,676 samples, 3.86%)</title><rect x="8.0726%" y="117" width="3.8624%" height="15" fill="rgb(231,60,39)" fg:x="5593" fg:w="2676"/><text x="8.3226%" y="127.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (146 samples, 0.21%)</title><rect x="11.7242%" y="101" width="0.2107%" height="15" fill="rgb(208,69,12)" fg:x="8123" fg:w="146"/><text x="11.9742%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (77 samples, 0.11%)</title><rect x="11.8238%" y="85" width="0.1111%" height="15" fill="rgb(235,93,37)" fg:x="8192" fg:w="77"/><text x="12.0738%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.18%)</title><rect x="11.9609%" y="117" width="0.1819%" height="15" fill="rgb(213,116,39)" fg:x="8287" fg:w="126"/><text x="12.2109%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (7 samples, 0.01%)</title><rect x="12.1659%" y="117" width="0.0101%" height="15" fill="rgb(222,207,29)" fg:x="8429" fg:w="7"/><text x="12.4159%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="12.5209%" y="101" width="0.0144%" height="15" fill="rgb(206,96,30)" fg:x="8675" fg:w="10"/><text x="12.7709%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.03%)</title><rect x="12.5382%" y="101" width="0.0332%" height="15" fill="rgb(218,138,4)" fg:x="8687" fg:w="23"/><text x="12.7882%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="12.5931%" y="37" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="8725" fg:w="8"/><text x="12.8431%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="12.5787%" y="69" width="0.0274%" height="15" fill="rgb(239,60,40)" fg:x="8715" fg:w="19"/><text x="12.8287%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="12.5873%" y="53" width="0.0188%" height="15" fill="rgb(206,27,48)" fg:x="8721" fg:w="13"/><text x="12.8373%" y="63.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.04%)</title><rect x="12.5714%" y="101" width="0.0390%" height="15" fill="rgb(225,35,8)" fg:x="8710" fg:w="27"/><text x="12.8214%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (23 samples, 0.03%)</title><rect x="12.5772%" y="85" width="0.0332%" height="15" fill="rgb(250,213,24)" fg:x="8714" fg:w="23"/><text x="12.8272%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (8 samples, 0.01%)</title><rect x="12.6133%" y="101" width="0.0115%" height="15" fill="rgb(247,123,22)" fg:x="8739" fg:w="8"/><text x="12.8633%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="12.6248%" y="101" width="0.0101%" height="15" fill="rgb(231,138,38)" fg:x="8747" fg:w="7"/><text x="12.8748%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (14 samples, 0.02%)</title><rect x="12.6350%" y="101" width="0.0202%" height="15" fill="rgb(231,145,46)" fg:x="8754" fg:w="14"/><text x="12.8850%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (542 samples, 0.78%)</title><rect x="12.1760%" y="117" width="0.7823%" height="15" fill="rgb(251,118,11)" fg:x="8436" fg:w="542"/><text x="12.4260%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (210 samples, 0.30%)</title><rect x="12.6552%" y="101" width="0.3031%" height="15" fill="rgb(217,147,25)" fg:x="8768" fg:w="210"/><text x="12.9052%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (722 samples, 1.04%)</title><rect x="11.9349%" y="133" width="1.0421%" height="15" fill="rgb(247,81,37)" fg:x="8269" fg:w="722"/><text x="12.1849%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (9 samples, 0.01%)</title><rect x="12.9640%" y="117" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="8982" fg:w="9"/><text x="13.2140%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (7 samples, 0.01%)</title><rect x="12.9785%" y="133" width="0.0101%" height="15" fill="rgb(227,1,9)" fg:x="8992" fg:w="7"/><text x="13.2285%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (7 samples, 0.01%)</title><rect x="12.9785%" y="117" width="0.0101%" height="15" fill="rgb(248,47,43)" fg:x="8992" fg:w="7"/><text x="13.2285%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (24 samples, 0.03%)</title><rect x="12.9886%" y="133" width="0.0346%" height="15" fill="rgb(221,10,30)" fg:x="8999" fg:w="24"/><text x="13.2386%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (17 samples, 0.02%)</title><rect x="12.9987%" y="117" width="0.0245%" height="15" fill="rgb(210,229,1)" fg:x="9006" fg:w="17"/><text x="13.2487%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="13.0131%" y="101" width="0.0101%" height="15" fill="rgb(222,148,37)" fg:x="9016" fg:w="7"/><text x="13.2631%" y="111.50"></text></g><g><title>dyld`start (9,029 samples, 13.03%)</title><rect x="0.0000%" y="357" width="13.0319%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="9029"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>rust_qecp`main (9,019 samples, 13.02%)</title><rect x="0.0144%" y="341" width="13.0174%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="351.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (9,019 samples, 13.02%)</title><rect x="0.0144%" y="325" width="13.0174%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="335.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (9,019 samples, 13.02%)</title><rect x="0.0144%" y="309" width="13.0174%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="319.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (9,019 samples, 13.02%)</title><rect x="0.0144%" y="293" width="13.0174%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="303.50">rust_qecp`std::sys_c..</text></g><g><title>rust_qecp`rust_qecp::main (9,019 samples, 13.02%)</title><rect x="0.0144%" y="277" width="13.0174%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="287.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (9,019 samples, 13.02%)</title><rect x="0.0144%" y="261" width="13.0174%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="271.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,019 samples, 13.02%)</title><rect x="0.0144%" y="245" width="13.0174%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="255.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (9,019 samples, 13.02%)</title><rect x="0.0144%" y="229" width="13.0174%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="239.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,019 samples, 13.02%)</title><rect x="0.0144%" y="213" width="13.0174%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="223.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,019 samples, 13.02%)</title><rect x="0.0144%" y="197" width="13.0174%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="207.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,019 samples, 13.02%)</title><rect x="0.0144%" y="181" width="13.0174%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="9019"/><text x="0.2644%" y="191.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (9,018 samples, 13.02%)</title><rect x="0.0159%" y="165" width="13.0160%" height="15" fill="rgb(249,43,39)" fg:x="11" fg:w="9018"/><text x="0.2659%" y="175.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (9,017 samples, 13.01%)</title><rect x="0.0173%" y="149" width="13.0145%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="9017"/><text x="0.2673%" y="159.50">rust_qecp`rust_qecp:..</text></g><g><title>libsystem_kernel.dylib`__exit (12 samples, 0.02%)</title><rect x="13.0319%" y="357" width="0.0173%" height="15" fill="rgb(236,212,23)" fg:x="9029" fg:w="12"/><text x="13.2819%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="13.0694%" y="277" width="0.0115%" height="15" fill="rgb(242,79,21)" fg:x="9055" fg:w="8"/><text x="13.3194%" y="287.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (11 samples, 0.02%)</title><rect x="13.0910%" y="277" width="0.0159%" height="15" fill="rgb(211,96,35)" fg:x="9070" fg:w="11"/><text x="13.3410%" y="287.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (11 samples, 0.02%)</title><rect x="13.0910%" y="261" width="0.0159%" height="15" fill="rgb(253,215,40)" fg:x="9070" fg:w="11"/><text x="13.3410%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="13.0910%" y="245" width="0.0159%" height="15" fill="rgb(211,81,21)" fg:x="9070" fg:w="11"/><text x="13.3410%" y="255.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="13.0910%" y="229" width="0.0159%" height="15" fill="rgb(208,190,38)" fg:x="9070" fg:w="11"/><text x="13.3410%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (9 samples, 0.01%)</title><rect x="13.0939%" y="213" width="0.0130%" height="15" fill="rgb(235,213,38)" fg:x="9072" fg:w="9"/><text x="13.3439%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="13.1444%" y="229" width="0.0202%" height="15" fill="rgb(237,122,38)" fg:x="9107" fg:w="14"/><text x="13.3944%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="13.1502%" y="213" width="0.0144%" height="15" fill="rgb(244,218,35)" fg:x="9111" fg:w="10"/><text x="13.4002%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.02%)</title><rect x="13.1416%" y="261" width="0.0245%" height="15" fill="rgb(240,68,47)" fg:x="9105" fg:w="17"/><text x="13.3916%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="13.1444%" y="245" width="0.0217%" height="15" fill="rgb(210,16,53)" fg:x="9107" fg:w="15"/><text x="13.3944%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="13.1704%" y="261" width="0.0173%" height="15" fill="rgb(235,124,12)" fg:x="9125" fg:w="12"/><text x="13.4204%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="13.2007%" y="261" width="0.0130%" height="15" fill="rgb(224,169,11)" fg:x="9146" fg:w="9"/><text x="13.4507%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (145 samples, 0.21%)</title><rect x="13.2166%" y="261" width="0.2093%" height="15" fill="rgb(250,166,2)" fg:x="9157" fg:w="145"/><text x="13.4666%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (297 samples, 0.43%)</title><rect x="13.4259%" y="261" width="0.4287%" height="15" fill="rgb(242,216,29)" fg:x="9302" fg:w="297"/><text x="13.6759%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (18 samples, 0.03%)</title><rect x="13.8546%" y="261" width="0.0260%" height="15" fill="rgb(230,116,27)" fg:x="9599" fg:w="18"/><text x="14.1046%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (377 samples, 0.54%)</title><rect x="13.8993%" y="261" width="0.5441%" height="15" fill="rgb(228,99,48)" fg:x="9630" fg:w="377"/><text x="14.1493%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (44 samples, 0.06%)</title><rect x="14.4435%" y="261" width="0.0635%" height="15" fill="rgb(253,11,6)" fg:x="10007" fg:w="44"/><text x="14.6935%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.04%)</title><rect x="14.5070%" y="261" width="0.0447%" height="15" fill="rgb(247,143,39)" fg:x="10051" fg:w="31"/><text x="14.7570%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 0.10%)</title><rect x="15.6126%" y="245" width="0.1039%" height="15" fill="rgb(236,97,10)" fg:x="10817" fg:w="72"/><text x="15.8626%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (69 samples, 0.10%)</title><rect x="15.6169%" y="229" width="0.0996%" height="15" fill="rgb(233,208,19)" fg:x="10820" fg:w="69"/><text x="15.8669%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (66 samples, 0.10%)</title><rect x="15.6212%" y="213" width="0.0953%" height="15" fill="rgb(216,164,2)" fg:x="10823" fg:w="66"/><text x="15.8712%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.09%)</title><rect x="15.6284%" y="197" width="0.0880%" height="15" fill="rgb(220,129,5)" fg:x="10828" fg:w="61"/><text x="15.8784%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="15.7165%" y="245" width="0.0361%" height="15" fill="rgb(242,17,10)" fg:x="10889" fg:w="25"/><text x="15.9665%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="15.7338%" y="229" width="0.0188%" height="15" fill="rgb(242,107,0)" fg:x="10901" fg:w="13"/><text x="15.9838%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.02%)</title><rect x="15.8218%" y="165" width="0.0231%" height="15" fill="rgb(251,28,31)" fg:x="10962" fg:w="16"/><text x="16.0718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="15.8449%" y="165" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="10978" fg:w="7"/><text x="16.0949%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (27 samples, 0.04%)</title><rect x="15.8175%" y="181" width="0.0390%" height="15" fill="rgb(215,21,27)" fg:x="10959" fg:w="27"/><text x="16.0675%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (39 samples, 0.06%)</title><rect x="15.8016%" y="197" width="0.0563%" height="15" fill="rgb(232,23,21)" fg:x="10948" fg:w="39"/><text x="16.0516%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="15.8579%" y="197" width="0.0260%" height="15" fill="rgb(244,5,23)" fg:x="10987" fg:w="18"/><text x="16.1079%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (63 samples, 0.09%)</title><rect x="15.7944%" y="213" width="0.0909%" height="15" fill="rgb(226,81,46)" fg:x="10943" fg:w="63"/><text x="16.0444%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (90 samples, 0.13%)</title><rect x="15.7612%" y="245" width="0.1299%" height="15" fill="rgb(247,70,30)" fg:x="10920" fg:w="90"/><text x="16.0112%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (76 samples, 0.11%)</title><rect x="15.7814%" y="229" width="0.1097%" height="15" fill="rgb(212,68,19)" fg:x="10934" fg:w="76"/><text x="16.0314%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (925 samples, 1.34%)</title><rect x="14.5604%" y="261" width="1.3351%" height="15" fill="rgb(240,187,13)" fg:x="10088" fg:w="925"/><text x="14.8104%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (68 samples, 0.10%)</title><rect x="21.1391%" y="245" width="0.0981%" height="15" fill="rgb(223,113,26)" fg:x="14646" fg:w="68"/><text x="21.3891%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.04%)</title><rect x="21.2372%" y="245" width="0.0390%" height="15" fill="rgb(206,192,2)" fg:x="14714" fg:w="27"/><text x="21.4872%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (51 samples, 0.07%)</title><rect x="21.2834%" y="245" width="0.0736%" height="15" fill="rgb(241,108,4)" fg:x="14746" fg:w="51"/><text x="21.5334%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.10%)</title><rect x="21.3570%" y="245" width="0.1039%" height="15" fill="rgb(247,173,49)" fg:x="14797" fg:w="72"/><text x="21.6070%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (106 samples, 0.15%)</title><rect x="21.4638%" y="229" width="0.1530%" height="15" fill="rgb(224,114,35)" fg:x="14871" fg:w="106"/><text x="21.7138%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (109 samples, 0.16%)</title><rect x="21.4609%" y="245" width="0.1573%" height="15" fill="rgb(245,159,27)" fg:x="14869" fg:w="109"/><text x="21.7109%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.01%)</title><rect x="21.6183%" y="245" width="0.0144%" height="15" fill="rgb(245,172,44)" fg:x="14978" fg:w="10"/><text x="21.8683%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="21.6327%" y="245" width="0.0115%" height="15" fill="rgb(236,23,11)" fg:x="14988" fg:w="8"/><text x="21.8827%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (63 samples, 0.09%)</title><rect x="21.6457%" y="245" width="0.0909%" height="15" fill="rgb(205,117,38)" fg:x="14997" fg:w="63"/><text x="21.8957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.03%)</title><rect x="21.7366%" y="245" width="0.0318%" height="15" fill="rgb(237,72,25)" fg:x="15060" fg:w="22"/><text x="21.9866%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.02%)</title><rect x="21.7684%" y="245" width="0.0188%" height="15" fill="rgb(244,70,9)" fg:x="15082" fg:w="13"/><text x="22.0184%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.33%)</title><rect x="21.7972%" y="245" width="0.3349%" height="15" fill="rgb(217,125,39)" fg:x="15102" fg:w="232"/><text x="22.0472%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.07%)</title><rect x="22.1321%" y="245" width="0.0664%" height="15" fill="rgb(235,36,10)" fg:x="15334" fg:w="46"/><text x="22.3821%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (70 samples, 0.10%)</title><rect x="22.1985%" y="245" width="0.1010%" height="15" fill="rgb(251,123,47)" fg:x="15380" fg:w="70"/><text x="22.4485%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,723 samples, 2.49%)</title><rect x="22.2995%" y="245" width="2.4869%" height="15" fill="rgb(221,13,13)" fg:x="15450" fg:w="1723"/><text x="22.5495%" y="255.50">ru..</text></g><g><title>rust_qecp`DYLD-STUB$$free (56 samples, 0.08%)</title><rect x="24.7864%" y="245" width="0.0808%" height="15" fill="rgb(238,131,9)" fg:x="17173" fg:w="56"/><text x="25.0364%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="24.8672%" y="245" width="0.0202%" height="15" fill="rgb(211,50,8)" fg:x="17229" fg:w="14"/><text x="25.1172%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (22 samples, 0.03%)</title><rect x="24.8874%" y="245" width="0.0318%" height="15" fill="rgb(245,182,24)" fg:x="17243" fg:w="22"/><text x="25.1374%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="25.0693%" y="181" width="0.0101%" height="15" fill="rgb(242,14,37)" fg:x="17369" fg:w="7"/><text x="25.3193%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="25.1126%" y="117" width="0.0101%" height="15" fill="rgb(246,228,12)" fg:x="17399" fg:w="7"/><text x="25.3626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="25.1025%" y="165" width="0.0231%" height="15" fill="rgb(213,55,15)" fg:x="17392" fg:w="16"/><text x="25.3525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="25.1068%" y="149" width="0.0188%" height="15" fill="rgb(209,9,3)" fg:x="17395" fg:w="13"/><text x="25.3568%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.01%)</title><rect x="25.1111%" y="133" width="0.0144%" height="15" fill="rgb(230,59,30)" fg:x="17398" fg:w="10"/><text x="25.3611%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (35 samples, 0.05%)</title><rect x="25.0794%" y="181" width="0.0505%" height="15" fill="rgb(209,121,21)" fg:x="17376" fg:w="35"/><text x="25.3294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (154 samples, 0.22%)</title><rect x="25.0621%" y="197" width="0.2223%" height="15" fill="rgb(220,109,13)" fg:x="17364" fg:w="154"/><text x="25.3121%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (107 samples, 0.15%)</title><rect x="25.1299%" y="181" width="0.1544%" height="15" fill="rgb(232,18,1)" fg:x="17411" fg:w="107"/><text x="25.3799%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (169 samples, 0.24%)</title><rect x="25.0592%" y="213" width="0.2439%" height="15" fill="rgb(215,41,42)" fg:x="17362" fg:w="169"/><text x="25.3092%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (261 samples, 0.38%)</title><rect x="24.9278%" y="245" width="0.3767%" height="15" fill="rgb(224,123,36)" fg:x="17271" fg:w="261"/><text x="25.1778%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (175 samples, 0.25%)</title><rect x="25.0520%" y="229" width="0.2526%" height="15" fill="rgb(240,125,3)" fg:x="17357" fg:w="175"/><text x="25.3020%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (62 samples, 0.09%)</title><rect x="25.7058%" y="213" width="0.0895%" height="15" fill="rgb(205,98,50)" fg:x="17810" fg:w="62"/><text x="25.9558%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="25.7953%" y="213" width="0.0115%" height="15" fill="rgb(205,185,37)" fg:x="17872" fg:w="8"/><text x="26.0453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (29 samples, 0.04%)</title><rect x="25.8068%" y="213" width="0.0419%" height="15" fill="rgb(238,207,15)" fg:x="17880" fg:w="29"/><text x="26.0568%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (107 samples, 0.15%)</title><rect x="25.8487%" y="213" width="0.1544%" height="15" fill="rgb(213,199,42)" fg:x="17909" fg:w="107"/><text x="26.0987%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (78 samples, 0.11%)</title><rect x="25.8905%" y="197" width="0.1126%" height="15" fill="rgb(235,201,11)" fg:x="17938" fg:w="78"/><text x="26.1405%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (421 samples, 0.61%)</title><rect x="25.3969%" y="229" width="0.6076%" height="15" fill="rgb(207,46,11)" fg:x="17596" fg:w="421"/><text x="25.6469%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (91 samples, 0.13%)</title><rect x="26.1864%" y="213" width="0.1313%" height="15" fill="rgb(241,35,35)" fg:x="18143" fg:w="91"/><text x="26.4364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (25 samples, 0.04%)</title><rect x="26.3178%" y="213" width="0.0361%" height="15" fill="rgb(243,32,47)" fg:x="18234" fg:w="25"/><text x="26.5678%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="26.3538%" y="213" width="0.0361%" height="15" fill="rgb(247,202,23)" fg:x="18259" fg:w="25"/><text x="26.6038%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (136 samples, 0.20%)</title><rect x="26.3899%" y="213" width="0.1963%" height="15" fill="rgb(219,102,11)" fg:x="18284" fg:w="136"/><text x="26.6399%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (386 samples, 0.56%)</title><rect x="26.5877%" y="213" width="0.5571%" height="15" fill="rgb(243,110,44)" fg:x="18421" fg:w="386"/><text x="26.8377%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (382 samples, 0.55%)</title><rect x="26.5934%" y="197" width="0.5514%" height="15" fill="rgb(222,74,54)" fg:x="18425" fg:w="382"/><text x="26.8434%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (172 samples, 0.25%)</title><rect x="27.1491%" y="197" width="0.2483%" height="15" fill="rgb(216,99,12)" fg:x="18810" fg:w="172"/><text x="27.3991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (966 samples, 1.39%)</title><rect x="26.0074%" y="229" width="1.3943%" height="15" fill="rgb(226,22,26)" fg:x="18019" fg:w="966"/><text x="26.2574%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (178 samples, 0.26%)</title><rect x="27.1448%" y="213" width="0.2569%" height="15" fill="rgb(217,163,10)" fg:x="18807" fg:w="178"/><text x="27.3948%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (15 samples, 0.02%)</title><rect x="27.5836%" y="197" width="0.0217%" height="15" fill="rgb(213,25,53)" fg:x="19111" fg:w="15"/><text x="27.8336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (104 samples, 0.15%)</title><rect x="27.6052%" y="197" width="0.1501%" height="15" fill="rgb(252,105,26)" fg:x="19126" fg:w="104"/><text x="27.8552%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (70 samples, 0.10%)</title><rect x="27.7553%" y="197" width="0.1010%" height="15" fill="rgb(220,39,43)" fg:x="19230" fg:w="70"/><text x="28.0053%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (21 samples, 0.03%)</title><rect x="27.8564%" y="197" width="0.0303%" height="15" fill="rgb(229,68,48)" fg:x="19300" fg:w="21"/><text x="28.1064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (58 samples, 0.08%)</title><rect x="27.8867%" y="197" width="0.0837%" height="15" fill="rgb(252,8,32)" fg:x="19321" fg:w="58"/><text x="28.1367%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.04%)</title><rect x="27.9256%" y="181" width="0.0447%" height="15" fill="rgb(223,20,43)" fg:x="19348" fg:w="31"/><text x="28.1756%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (104 samples, 0.15%)</title><rect x="27.9776%" y="181" width="0.1501%" height="15" fill="rgb(229,81,49)" fg:x="19384" fg:w="104"/><text x="28.2276%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (459 samples, 0.66%)</title><rect x="27.4695%" y="213" width="0.6625%" height="15" fill="rgb(236,28,36)" fg:x="19032" fg:w="459"/><text x="27.7195%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (112 samples, 0.16%)</title><rect x="27.9704%" y="197" width="0.1617%" height="15" fill="rgb(249,185,26)" fg:x="19379" fg:w="112"/><text x="28.2204%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (507 samples, 0.73%)</title><rect x="27.4017%" y="229" width="0.7318%" height="15" fill="rgb(249,174,33)" fg:x="18985" fg:w="507"/><text x="27.6517%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (26 samples, 0.04%)</title><rect x="28.1335%" y="229" width="0.0375%" height="15" fill="rgb(233,201,37)" fg:x="19492" fg:w="26"/><text x="28.3835%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (119 samples, 0.17%)</title><rect x="28.1710%" y="229" width="0.1718%" height="15" fill="rgb(221,78,26)" fg:x="19518" fg:w="119"/><text x="28.4210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (76 samples, 0.11%)</title><rect x="28.2331%" y="213" width="0.1097%" height="15" fill="rgb(250,127,30)" fg:x="19561" fg:w="76"/><text x="28.4831%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (76 samples, 0.11%)</title><rect x="28.2331%" y="197" width="0.1097%" height="15" fill="rgb(230,49,44)" fg:x="19561" fg:w="76"/><text x="28.4831%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.04%)</title><rect x="28.3428%" y="229" width="0.0390%" height="15" fill="rgb(229,67,23)" fg:x="19637" fg:w="27"/><text x="28.5928%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (43 samples, 0.06%)</title><rect x="28.3976%" y="229" width="0.0621%" height="15" fill="rgb(249,83,47)" fg:x="19675" fg:w="43"/><text x="28.6476%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="28.4597%" y="229" width="0.0188%" height="15" fill="rgb(215,43,3)" fg:x="19718" fg:w="13"/><text x="28.7097%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="28.4784%" y="229" width="0.0188%" height="15" fill="rgb(238,154,13)" fg:x="19731" fg:w="13"/><text x="28.7284%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="28.4972%" y="229" width="0.0101%" height="15" fill="rgb(219,56,2)" fg:x="19744" fg:w="7"/><text x="28.7472%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (44 samples, 0.06%)</title><rect x="28.6170%" y="197" width="0.0635%" height="15" fill="rgb(233,0,4)" fg:x="19827" fg:w="44"/><text x="28.8670%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (114 samples, 0.16%)</title><rect x="28.5217%" y="213" width="0.1645%" height="15" fill="rgb(235,30,7)" fg:x="19761" fg:w="114"/><text x="28.7717%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (77 samples, 0.11%)</title><rect x="28.6921%" y="213" width="0.1111%" height="15" fill="rgb(250,79,13)" fg:x="19879" fg:w="77"/><text x="28.9421%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (17 samples, 0.02%)</title><rect x="28.7787%" y="197" width="0.0245%" height="15" fill="rgb(211,146,34)" fg:x="19939" fg:w="17"/><text x="29.0287%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.02%)</title><rect x="28.7787%" y="181" width="0.0245%" height="15" fill="rgb(228,22,38)" fg:x="19939" fg:w="17"/><text x="29.0287%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,431 samples, 3.51%)</title><rect x="25.3045%" y="245" width="3.5087%" height="15" fill="rgb(235,168,5)" fg:x="17532" fg:w="2431"/><text x="25.5545%" y="255.50">rus..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (212 samples, 0.31%)</title><rect x="28.5073%" y="229" width="0.3060%" height="15" fill="rgb(221,155,16)" fg:x="19751" fg:w="212"/><text x="28.7573%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="28.8032%" y="213" width="0.0101%" height="15" fill="rgb(215,215,53)" fg:x="19956" fg:w="7"/><text x="29.0532%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (202 samples, 0.29%)</title><rect x="28.8133%" y="245" width="0.2916%" height="15" fill="rgb(223,4,10)" fg:x="19963" fg:w="202"/><text x="29.0633%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (179 samples, 0.26%)</title><rect x="28.8465%" y="229" width="0.2584%" height="15" fill="rgb(234,103,6)" fg:x="19986" fg:w="179"/><text x="29.0965%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (144 samples, 0.21%)</title><rect x="28.8970%" y="213" width="0.2078%" height="15" fill="rgb(227,97,0)" fg:x="20021" fg:w="144"/><text x="29.1470%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (97 samples, 0.14%)</title><rect x="28.9648%" y="197" width="0.1400%" height="15" fill="rgb(234,150,53)" fg:x="20068" fg:w="97"/><text x="29.2148%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (37 samples, 0.05%)</title><rect x="29.0514%" y="181" width="0.0534%" height="15" fill="rgb(228,201,54)" fg:x="20128" fg:w="37"/><text x="29.3014%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (11 samples, 0.02%)</title><rect x="29.0890%" y="165" width="0.0159%" height="15" fill="rgb(222,22,37)" fg:x="20154" fg:w="11"/><text x="29.3390%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (267 samples, 0.39%)</title><rect x="29.1063%" y="245" width="0.3854%" height="15" fill="rgb(237,53,32)" fg:x="20166" fg:w="267"/><text x="29.3563%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,588 samples, 3.74%)</title><rect x="29.4917%" y="245" width="3.7354%" height="15" fill="rgb(233,25,53)" fg:x="20433" fg:w="2588"/><text x="29.7417%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (122 samples, 0.18%)</title><rect x="33.2270%" y="245" width="0.1761%" height="15" fill="rgb(210,40,34)" fg:x="23021" fg:w="122"/><text x="33.4770%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="33.5431%" y="229" width="0.0101%" height="15" fill="rgb(241,220,44)" fg:x="23240" fg:w="7"/><text x="33.7931%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (118 samples, 0.17%)</title><rect x="33.5532%" y="229" width="0.1703%" height="15" fill="rgb(235,28,35)" fg:x="23247" fg:w="118"/><text x="33.8032%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="33.9342%" y="213" width="0.0173%" height="15" fill="rgb(210,56,17)" fg:x="23511" fg:w="12"/><text x="34.1842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="33.9371%" y="197" width="0.0144%" height="15" fill="rgb(224,130,29)" fg:x="23513" fg:w="10"/><text x="34.1871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="33.9400%" y="181" width="0.0115%" height="15" fill="rgb(235,212,8)" fg:x="23515" fg:w="8"/><text x="34.1900%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="33.9400%" y="165" width="0.0115%" height="15" fill="rgb(223,33,50)" fg:x="23515" fg:w="8"/><text x="34.1900%" y="175.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (48 samples, 0.07%)</title><rect x="33.9516%" y="213" width="0.0693%" height="15" fill="rgb(219,149,13)" fg:x="23523" fg:w="48"/><text x="34.2016%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (231 samples, 0.33%)</title><rect x="34.0208%" y="213" width="0.3334%" height="15" fill="rgb(250,156,29)" fg:x="23571" fg:w="231"/><text x="34.2708%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (976 samples, 1.41%)</title><rect x="33.4031%" y="245" width="1.4087%" height="15" fill="rgb(216,193,19)" fg:x="23143" fg:w="976"/><text x="33.6531%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (754 samples, 1.09%)</title><rect x="33.7235%" y="229" width="1.0883%" height="15" fill="rgb(216,135,14)" fg:x="23365" fg:w="754"/><text x="33.9735%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (317 samples, 0.46%)</title><rect x="34.3543%" y="213" width="0.4575%" height="15" fill="rgb(241,47,5)" fg:x="23802" fg:w="317"/><text x="34.6043%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (22 samples, 0.03%)</title><rect x="34.8118%" y="245" width="0.0318%" height="15" fill="rgb(233,42,35)" fg:x="24119" fg:w="22"/><text x="35.0618%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.02%)</title><rect x="34.8435%" y="245" width="0.0217%" height="15" fill="rgb(231,13,6)" fg:x="24141" fg:w="15"/><text x="35.0935%" y="255.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (136 samples, 0.20%)</title><rect x="34.8652%" y="245" width="0.1963%" height="15" fill="rgb(207,181,40)" fg:x="24156" fg:w="136"/><text x="35.1152%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,454 samples, 4.99%)</title><rect x="37.4127%" y="229" width="4.9853%" height="15" fill="rgb(254,173,49)" fg:x="25921" fg:w="3454"/><text x="37.6627%" y="239.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.03%)</title><rect x="42.3980%" y="229" width="0.0332%" height="15" fill="rgb(221,1,38)" fg:x="29375" fg:w="23"/><text x="42.6480%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (23 samples, 0.03%)</title><rect x="42.3980%" y="213" width="0.0332%" height="15" fill="rgb(206,124,46)" fg:x="29375" fg:w="23"/><text x="42.6480%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.03%)</title><rect x="42.4008%" y="197" width="0.0303%" height="15" fill="rgb(249,21,11)" fg:x="29377" fg:w="21"/><text x="42.6508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="42.4008%" y="181" width="0.0303%" height="15" fill="rgb(222,201,40)" fg:x="29377" fg:w="21"/><text x="42.6508%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="42.4081%" y="165" width="0.0231%" height="15" fill="rgb(235,61,29)" fg:x="29382" fg:w="16"/><text x="42.6581%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,944 samples, 4.25%)</title><rect x="42.4312%" y="229" width="4.2492%" height="15" fill="rgb(219,207,3)" fg:x="29398" fg:w="2944"/><text x="42.6812%" y="239.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (586 samples, 0.85%)</title><rect x="46.6803%" y="229" width="0.8458%" height="15" fill="rgb(222,56,46)" fg:x="32342" fg:w="586"/><text x="46.9303%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.02%)</title><rect x="47.5665%" y="213" width="0.0217%" height="15" fill="rgb(239,76,54)" fg:x="32956" fg:w="15"/><text x="47.8165%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="47.5665%" y="197" width="0.0217%" height="15" fill="rgb(231,124,27)" fg:x="32956" fg:w="15"/><text x="47.8165%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (109 samples, 0.16%)</title><rect x="47.5940%" y="213" width="0.1573%" height="15" fill="rgb(249,195,6)" fg:x="32975" fg:w="109"/><text x="47.8440%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (217 samples, 0.31%)</title><rect x="47.8711%" y="197" width="0.3132%" height="15" fill="rgb(237,174,47)" fg:x="33167" fg:w="217"/><text x="48.1211%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (639 samples, 0.92%)</title><rect x="47.5261%" y="229" width="0.9223%" height="15" fill="rgb(206,201,31)" fg:x="32928" fg:w="639"/><text x="47.7761%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (483 samples, 0.70%)</title><rect x="47.7513%" y="213" width="0.6971%" height="15" fill="rgb(231,57,52)" fg:x="33084" fg:w="483"/><text x="48.0013%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (183 samples, 0.26%)</title><rect x="48.1843%" y="197" width="0.2641%" height="15" fill="rgb(248,177,22)" fg:x="33384" fg:w="183"/><text x="48.4343%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="51.0969%" y="165" width="0.0303%" height="15" fill="rgb(215,211,37)" fg:x="35402" fg:w="21"/><text x="51.3469%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="51.1013%" y="149" width="0.0260%" height="15" fill="rgb(241,128,51)" fg:x="35405" fg:w="18"/><text x="51.3513%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (11,132 samples, 16.07%)</title><rect x="35.0615%" y="245" width="16.0672%" height="15" fill="rgb(227,165,31)" fg:x="24292" fg:w="11132"/><text x="35.3115%" y="255.50">rust_qecp`rust_qecp::ftqe..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,857 samples, 2.68%)</title><rect x="48.4484%" y="229" width="2.6803%" height="15" fill="rgb(228,167,24)" fg:x="33567" fg:w="1857"/><text x="48.6984%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.03%)</title><rect x="51.0969%" y="213" width="0.0318%" height="15" fill="rgb(228,143,12)" fg:x="35402" fg:w="22"/><text x="51.3469%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="51.0969%" y="197" width="0.0318%" height="15" fill="rgb(249,149,8)" fg:x="35402" fg:w="22"/><text x="51.3469%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.03%)</title><rect x="51.0969%" y="181" width="0.0318%" height="15" fill="rgb(243,35,44)" fg:x="35402" fg:w="22"/><text x="51.3469%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (10 samples, 0.01%)</title><rect x="51.1287%" y="245" width="0.0144%" height="15" fill="rgb(246,89,9)" fg:x="35424" fg:w="10"/><text x="51.3787%" y="255.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 0.05%)</title><rect x="52.4912%" y="229" width="0.0491%" height="15" fill="rgb(233,213,13)" fg:x="36368" fg:w="34"/><text x="52.7412%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="52.5590%" y="197" width="0.0173%" height="15" fill="rgb(233,141,41)" fg:x="36415" fg:w="12"/><text x="52.8090%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.05%)</title><rect x="52.5417%" y="213" width="0.0462%" height="15" fill="rgb(239,167,4)" fg:x="36403" fg:w="32"/><text x="52.7917%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="52.5764%" y="197" width="0.0115%" height="15" fill="rgb(209,217,16)" fg:x="36427" fg:w="8"/><text x="52.8264%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (39 samples, 0.06%)</title><rect x="52.5403%" y="229" width="0.0563%" height="15" fill="rgb(219,88,35)" fg:x="36402" fg:w="39"/><text x="52.7903%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.04%)</title><rect x="52.5966%" y="213" width="0.0361%" height="15" fill="rgb(220,193,23)" fg:x="36441" fg:w="25"/><text x="52.8466%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="52.6326%" y="213" width="0.0101%" height="15" fill="rgb(230,90,52)" fg:x="36466" fg:w="7"/><text x="52.8826%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="52.6427%" y="213" width="0.0274%" height="15" fill="rgb(252,106,19)" fg:x="36473" fg:w="19"/><text x="52.8927%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.04%)</title><rect x="52.6702%" y="213" width="0.0404%" height="15" fill="rgb(206,74,20)" fg:x="36492" fg:w="28"/><text x="52.9202%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="52.7106%" y="213" width="0.0159%" height="15" fill="rgb(230,138,44)" fg:x="36520" fg:w="11"/><text x="52.9606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="52.7265%" y="213" width="0.0101%" height="15" fill="rgb(235,182,43)" fg:x="36531" fg:w="7"/><text x="52.9765%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="52.9372%" y="181" width="0.0217%" height="15" fill="rgb(242,16,51)" fg:x="36677" fg:w="15"/><text x="53.1872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (42 samples, 0.06%)</title><rect x="53.1768%" y="149" width="0.0606%" height="15" fill="rgb(248,9,4)" fg:x="36843" fg:w="42"/><text x="53.4268%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (167 samples, 0.24%)</title><rect x="53.0050%" y="165" width="0.2410%" height="15" fill="rgb(210,31,22)" fg:x="36724" fg:w="167"/><text x="53.2550%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (333 samples, 0.48%)</title><rect x="52.7885%" y="197" width="0.4806%" height="15" fill="rgb(239,54,39)" fg:x="36574" fg:w="333"/><text x="53.0385%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (215 samples, 0.31%)</title><rect x="52.9588%" y="181" width="0.3103%" height="15" fill="rgb(230,99,41)" fg:x="36692" fg:w="215"/><text x="53.2088%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="53.2461%" y="165" width="0.0231%" height="15" fill="rgb(253,106,12)" fg:x="36891" fg:w="16"/><text x="53.4961%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.05%)</title><rect x="53.2692%" y="197" width="0.0476%" height="15" fill="rgb(213,46,41)" fg:x="36907" fg:w="33"/><text x="53.5192%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (108 samples, 0.16%)</title><rect x="53.3168%" y="197" width="0.1559%" height="15" fill="rgb(215,133,35)" fg:x="36940" fg:w="108"/><text x="53.5668%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (46 samples, 0.07%)</title><rect x="53.4063%" y="181" width="0.0664%" height="15" fill="rgb(213,28,5)" fg:x="37002" fg:w="46"/><text x="53.6563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="53.4813%" y="197" width="0.0462%" height="15" fill="rgb(215,77,49)" fg:x="37054" fg:w="32"/><text x="53.7313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="53.5275%" y="197" width="0.0115%" height="15" fill="rgb(248,100,22)" fg:x="37086" fg:w="8"/><text x="53.7775%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (542 samples, 0.78%)</title><rect x="53.5795%" y="181" width="0.7823%" height="15" fill="rgb(208,67,9)" fg:x="37122" fg:w="542"/><text x="53.8295%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="54.3646%" y="181" width="0.0101%" height="15" fill="rgb(219,133,21)" fg:x="37666" fg:w="7"/><text x="54.6146%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.04%)</title><rect x="54.4137%" y="165" width="0.0404%" height="15" fill="rgb(246,46,29)" fg:x="37700" fg:w="28"/><text x="54.6637%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (62 samples, 0.09%)</title><rect x="54.4541%" y="165" width="0.0895%" height="15" fill="rgb(246,185,52)" fg:x="37728" fg:w="62"/><text x="54.7041%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (124 samples, 0.18%)</title><rect x="54.3805%" y="181" width="0.1790%" height="15" fill="rgb(252,136,11)" fg:x="37677" fg:w="124"/><text x="54.6305%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="54.5436%" y="165" width="0.0159%" height="15" fill="rgb(219,138,53)" fg:x="37790" fg:w="11"/><text x="54.7936%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="54.5595%" y="181" width="0.0188%" height="15" fill="rgb(211,51,23)" fg:x="37801" fg:w="13"/><text x="54.8095%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="54.8510%" y="117" width="0.0390%" height="15" fill="rgb(247,221,28)" fg:x="38003" fg:w="27"/><text x="55.1010%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (124 samples, 0.18%)</title><rect x="54.7457%" y="133" width="0.1790%" height="15" fill="rgb(251,222,45)" fg:x="37930" fg:w="124"/><text x="54.9957%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.03%)</title><rect x="54.8900%" y="117" width="0.0346%" height="15" fill="rgb(217,162,53)" fg:x="38030" fg:w="24"/><text x="55.1400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (196 samples, 0.28%)</title><rect x="54.6562%" y="165" width="0.2829%" height="15" fill="rgb(229,93,14)" fg:x="37868" fg:w="196"/><text x="54.9062%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (150 samples, 0.22%)</title><rect x="54.7226%" y="149" width="0.2165%" height="15" fill="rgb(209,67,49)" fg:x="37914" fg:w="150"/><text x="54.9726%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="54.9247%" y="133" width="0.0144%" height="15" fill="rgb(213,87,29)" fg:x="38054" fg:w="10"/><text x="55.1747%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="54.9391%" y="165" width="0.0159%" height="15" fill="rgb(205,151,52)" fg:x="38064" fg:w="11"/><text x="55.1891%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (981 samples, 1.42%)</title><rect x="53.5448%" y="197" width="1.4159%" height="15" fill="rgb(253,215,39)" fg:x="37098" fg:w="981"/><text x="53.7948%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (265 samples, 0.38%)</title><rect x="54.5783%" y="181" width="0.3825%" height="15" fill="rgb(221,220,41)" fg:x="37814" fg:w="265"/><text x="54.8283%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="55.0344%" y="181" width="0.0462%" height="15" fill="rgb(218,133,21)" fg:x="38130" fg:w="32"/><text x="55.2844%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (74 samples, 0.11%)</title><rect x="55.0805%" y="181" width="0.1068%" height="15" fill="rgb(221,193,43)" fg:x="38162" fg:w="74"/><text x="55.3305%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (203 samples, 0.29%)</title><rect x="54.9607%" y="197" width="0.2930%" height="15" fill="rgb(240,128,52)" fg:x="38079" fg:w="203"/><text x="55.2107%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (46 samples, 0.07%)</title><rect x="55.1873%" y="181" width="0.0664%" height="15" fill="rgb(253,114,12)" fg:x="38236" fg:w="46"/><text x="55.4373%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="55.2537%" y="197" width="0.0202%" height="15" fill="rgb(215,223,47)" fg:x="38282" fg:w="14"/><text x="55.5037%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,773 samples, 2.56%)</title><rect x="52.7366%" y="213" width="2.5590%" height="15" fill="rgb(248,225,23)" fg:x="36538" fg:w="1773"/><text x="52.9866%" y="223.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="55.2739%" y="197" width="0.0217%" height="15" fill="rgb(250,108,0)" fg:x="38296" fg:w="15"/><text x="55.5239%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.01%)</title><rect x="55.2999%" y="213" width="0.0144%" height="15" fill="rgb(228,208,7)" fg:x="38314" fg:w="10"/><text x="55.5499%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.02%)</title><rect x="55.3144%" y="213" width="0.0231%" height="15" fill="rgb(244,45,10)" fg:x="38324" fg:w="16"/><text x="55.5644%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="55.3375%" y="213" width="0.0115%" height="15" fill="rgb(207,125,25)" fg:x="38340" fg:w="8"/><text x="55.5875%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.02%)</title><rect x="55.3490%" y="213" width="0.0245%" height="15" fill="rgb(210,195,18)" fg:x="38348" fg:w="17"/><text x="55.5990%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,929 samples, 2.78%)</title><rect x="52.5966%" y="229" width="2.7842%" height="15" fill="rgb(249,80,12)" fg:x="36441" fg:w="1929"/><text x="52.8466%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="55.3808%" y="229" width="0.0202%" height="15" fill="rgb(221,65,9)" fg:x="38370" fg:w="14"/><text x="55.6308%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="55.3808%" y="213" width="0.0202%" height="15" fill="rgb(235,49,36)" fg:x="38370" fg:w="14"/><text x="55.6308%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="55.3808%" y="197" width="0.0202%" height="15" fill="rgb(225,32,20)" fg:x="38370" fg:w="14"/><text x="55.6308%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="55.3808%" y="181" width="0.0202%" height="15" fill="rgb(215,141,46)" fg:x="38370" fg:w="14"/><text x="55.6308%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="55.3822%" y="165" width="0.0188%" height="15" fill="rgb(250,160,47)" fg:x="38371" fg:w="13"/><text x="55.6322%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="55.3822%" y="149" width="0.0188%" height="15" fill="rgb(216,222,40)" fg:x="38371" fg:w="13"/><text x="55.6322%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.02%)</title><rect x="55.3822%" y="133" width="0.0188%" height="15" fill="rgb(234,217,39)" fg:x="38371" fg:w="13"/><text x="55.6322%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="55.5655%" y="213" width="0.0130%" height="15" fill="rgb(207,178,40)" fg:x="38498" fg:w="9"/><text x="55.8155%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.04%)</title><rect x="55.5785%" y="213" width="0.0433%" height="15" fill="rgb(221,136,13)" fg:x="38507" fg:w="30"/><text x="55.8285%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="55.6218%" y="213" width="0.0159%" height="15" fill="rgb(249,199,10)" fg:x="38537" fg:w="11"/><text x="55.8718%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (18 samples, 0.03%)</title><rect x="55.6377%" y="213" width="0.0260%" height="15" fill="rgb(249,222,13)" fg:x="38548" fg:w="18"/><text x="55.8877%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="55.6636%" y="213" width="0.0115%" height="15" fill="rgb(244,185,38)" fg:x="38566" fg:w="8"/><text x="55.9136%" y="223.50"></text></g><g><title>rust_qecp`__rdl_realloc (14 samples, 0.02%)</title><rect x="55.6752%" y="213" width="0.0202%" height="15" fill="rgb(236,202,9)" fg:x="38574" fg:w="14"/><text x="55.9252%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.03%)</title><rect x="55.9552%" y="149" width="0.0346%" height="15" fill="rgb(250,229,37)" fg:x="38768" fg:w="24"/><text x="56.2052%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (87 samples, 0.13%)</title><rect x="55.8715%" y="165" width="0.1256%" height="15" fill="rgb(206,174,23)" fg:x="38710" fg:w="87"/><text x="56.1215%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (192 samples, 0.28%)</title><rect x="55.7474%" y="197" width="0.2771%" height="15" fill="rgb(211,33,43)" fg:x="38624" fg:w="192"/><text x="55.9974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (132 samples, 0.19%)</title><rect x="55.8340%" y="181" width="0.1905%" height="15" fill="rgb(245,58,50)" fg:x="38684" fg:w="132"/><text x="56.0840%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="55.9971%" y="165" width="0.0274%" height="15" fill="rgb(244,68,36)" fg:x="38797" fg:w="19"/><text x="56.2471%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="56.0245%" y="197" width="0.0217%" height="15" fill="rgb(232,229,15)" fg:x="38816" fg:w="15"/><text x="56.2745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="56.0461%" y="197" width="0.0159%" height="15" fill="rgb(254,30,23)" fg:x="38831" fg:w="11"/><text x="56.2961%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="56.0634%" y="197" width="0.0260%" height="15" fill="rgb(235,160,14)" fg:x="38843" fg:w="18"/><text x="56.3134%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (29 samples, 0.04%)</title><rect x="56.2670%" y="181" width="0.0419%" height="15" fill="rgb(212,155,44)" fg:x="38984" fg:w="29"/><text x="56.5170%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (14 samples, 0.02%)</title><rect x="56.4127%" y="165" width="0.0202%" height="15" fill="rgb(226,2,50)" fg:x="39085" fg:w="14"/><text x="56.6627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (21 samples, 0.03%)</title><rect x="56.4329%" y="165" width="0.0303%" height="15" fill="rgb(234,177,6)" fg:x="39099" fg:w="21"/><text x="56.6829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="56.4633%" y="165" width="0.0462%" height="15" fill="rgb(217,24,9)" fg:x="39120" fg:w="32"/><text x="56.7133%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (236 samples, 0.34%)</title><rect x="56.5123%" y="165" width="0.3406%" height="15" fill="rgb(220,13,46)" fg:x="39154" fg:w="236"/><text x="56.7623%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (19 samples, 0.03%)</title><rect x="56.9699%" y="149" width="0.0274%" height="15" fill="rgb(239,221,27)" fg:x="39471" fg:w="19"/><text x="57.2199%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (123 samples, 0.18%)</title><rect x="56.9973%" y="149" width="0.1775%" height="15" fill="rgb(222,198,25)" fg:x="39490" fg:w="123"/><text x="57.2473%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (26 samples, 0.04%)</title><rect x="57.3134%" y="117" width="0.0375%" height="15" fill="rgb(211,99,13)" fg:x="39709" fg:w="26"/><text x="57.5634%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (107 samples, 0.15%)</title><rect x="57.2022%" y="133" width="0.1544%" height="15" fill="rgb(232,111,31)" fg:x="39632" fg:w="107"/><text x="57.4522%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="57.3567%" y="133" width="0.0173%" height="15" fill="rgb(245,82,37)" fg:x="39739" fg:w="12"/><text x="57.6067%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (139 samples, 0.20%)</title><rect x="57.1748%" y="149" width="0.2006%" height="15" fill="rgb(227,149,46)" fg:x="39613" fg:w="139"/><text x="57.4248%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (88 samples, 0.13%)</title><rect x="57.3754%" y="149" width="0.1270%" height="15" fill="rgb(218,36,50)" fg:x="39752" fg:w="88"/><text x="57.6254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.05%)</title><rect x="57.6324%" y="117" width="0.0520%" height="15" fill="rgb(226,80,48)" fg:x="39930" fg:w="36"/><text x="57.8824%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (333 samples, 0.48%)</title><rect x="57.5025%" y="149" width="0.4806%" height="15" fill="rgb(238,224,15)" fg:x="39840" fg:w="333"/><text x="57.7525%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (316 samples, 0.46%)</title><rect x="57.5270%" y="133" width="0.4561%" height="15" fill="rgb(241,136,10)" fg:x="39857" fg:w="316"/><text x="57.7770%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (204 samples, 0.29%)</title><rect x="57.6886%" y="117" width="0.2944%" height="15" fill="rgb(208,32,45)" fg:x="39969" fg:w="204"/><text x="57.9386%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (794 samples, 1.15%)</title><rect x="56.8530%" y="165" width="1.1460%" height="15" fill="rgb(207,135,9)" fg:x="39390" fg:w="794"/><text x="57.1030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="57.9831%" y="149" width="0.0159%" height="15" fill="rgb(206,86,44)" fg:x="40173" fg:w="11"/><text x="58.2331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,237 samples, 1.79%)</title><rect x="56.3088%" y="181" width="1.7854%" height="15" fill="rgb(245,177,15)" fg:x="39013" fg:w="1237"/><text x="56.5588%" y="191.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.09%)</title><rect x="58.0033%" y="165" width="0.0909%" height="15" fill="rgb(206,64,50)" fg:x="40187" fg:w="63"/><text x="58.2533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (120 samples, 0.17%)</title><rect x="58.0942%" y="181" width="0.1732%" height="15" fill="rgb(234,36,40)" fg:x="40250" fg:w="120"/><text x="58.3442%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (24 samples, 0.03%)</title><rect x="58.2674%" y="181" width="0.0346%" height="15" fill="rgb(213,64,8)" fg:x="40370" fg:w="24"/><text x="58.5174%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,540 samples, 2.22%)</title><rect x="56.0894%" y="197" width="2.2227%" height="15" fill="rgb(210,75,36)" fg:x="38861" fg:w="1540"/><text x="56.3394%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="58.3021%" y="181" width="0.0101%" height="15" fill="rgb(229,88,21)" fg:x="40394" fg:w="7"/><text x="58.5521%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,030 samples, 2.93%)</title><rect x="55.4010%" y="229" width="2.9300%" height="15" fill="rgb(252,204,47)" fg:x="38384" fg:w="2030"/><text x="55.6510%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,826 samples, 2.64%)</title><rect x="55.6954%" y="213" width="2.6355%" height="15" fill="rgb(208,77,27)" fg:x="38588" fg:w="1826"/><text x="55.9454%" y="223.50">ru..</text></g><g><title>rust_qecp`__rdl_realloc (13 samples, 0.02%)</title><rect x="58.3122%" y="197" width="0.0188%" height="15" fill="rgb(221,76,26)" fg:x="40401" fg:w="13"/><text x="58.5622%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (47 samples, 0.07%)</title><rect x="58.3309%" y="229" width="0.0678%" height="15" fill="rgb(225,139,18)" fg:x="40414" fg:w="47"/><text x="58.5809%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (156 samples, 0.23%)</title><rect x="58.3988%" y="213" width="0.2252%" height="15" fill="rgb(230,137,11)" fg:x="40461" fg:w="156"/><text x="58.6488%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (20 samples, 0.03%)</title><rect x="58.8924%" y="197" width="0.0289%" height="15" fill="rgb(212,28,1)" fg:x="40803" fg:w="20"/><text x="59.1424%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="58.9213%" y="197" width="0.0101%" height="15" fill="rgb(248,164,17)" fg:x="40823" fg:w="7"/><text x="59.1713%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="58.9342%" y="197" width="0.0101%" height="15" fill="rgb(222,171,42)" fg:x="40832" fg:w="7"/><text x="59.1842%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="59.2345%" y="165" width="0.0231%" height="15" fill="rgb(243,84,45)" fg:x="41040" fg:w="16"/><text x="59.4845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.02%)</title><rect x="59.2575%" y="165" width="0.0245%" height="15" fill="rgb(252,49,23)" fg:x="41056" fg:w="17"/><text x="59.5075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (61 samples, 0.09%)</title><rect x="59.4250%" y="133" width="0.0880%" height="15" fill="rgb(215,19,7)" fg:x="41172" fg:w="61"/><text x="59.6750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2,005 samples, 2.89%)</title><rect x="59.5938%" y="117" width="2.8939%" height="15" fill="rgb(238,81,41)" fg:x="41289" fg:w="2005"/><text x="59.8438%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (30 samples, 0.04%)</title><rect x="62.4877%" y="117" width="0.0433%" height="15" fill="rgb(210,199,37)" fg:x="43294" fg:w="30"/><text x="62.7377%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,523 samples, 3.64%)</title><rect x="59.0252%" y="181" width="3.6415%" height="15" fill="rgb(244,192,49)" fg:x="40895" fg:w="2523"/><text x="59.2752%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,345 samples, 3.38%)</title><rect x="59.2821%" y="165" width="3.3846%" height="15" fill="rgb(226,211,11)" fg:x="41073" fg:w="2345"/><text x="59.5321%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2,310 samples, 3.33%)</title><rect x="59.3326%" y="149" width="3.3341%" height="15" fill="rgb(236,162,54)" fg:x="41108" fg:w="2310"/><text x="59.5826%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2,179 samples, 3.15%)</title><rect x="59.5217%" y="133" width="3.1450%" height="15" fill="rgb(220,229,9)" fg:x="41239" fg:w="2179"/><text x="59.7717%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (94 samples, 0.14%)</title><rect x="62.5310%" y="117" width="0.1357%" height="15" fill="rgb(250,87,22)" fg:x="43324" fg:w="94"/><text x="62.7810%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (237 samples, 0.34%)</title><rect x="62.6667%" y="181" width="0.3421%" height="15" fill="rgb(239,43,17)" fg:x="43418" fg:w="237"/><text x="62.9167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (393 samples, 0.57%)</title><rect x="63.0088%" y="181" width="0.5672%" height="15" fill="rgb(231,177,25)" fg:x="43655" fg:w="393"/><text x="63.2588%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,447 samples, 4.98%)</title><rect x="58.6254%" y="213" width="4.9752%" height="15" fill="rgb(219,179,1)" fg:x="40618" fg:w="3447"/><text x="58.8754%" y="223.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3,226 samples, 4.66%)</title><rect x="58.9443%" y="197" width="4.6562%" height="15" fill="rgb(238,219,53)" fg:x="40839" fg:w="3226"/><text x="59.1943%" y="207.50">rust_..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.02%)</title><rect x="63.5760%" y="181" width="0.0245%" height="15" fill="rgb(232,167,36)" fg:x="44048" fg:w="17"/><text x="63.8260%" y="191.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,619 samples, 5.22%)</title><rect x="58.3988%" y="229" width="5.2234%" height="15" fill="rgb(244,19,51)" fg:x="40461" fg:w="3619"/><text x="58.6488%" y="239.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.02%)</title><rect x="63.6005%" y="213" width="0.0217%" height="15" fill="rgb(224,6,22)" fg:x="44065" fg:w="15"/><text x="63.8505%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="64.2284%" y="197" width="0.0173%" height="15" fill="rgb(224,145,5)" fg:x="44500" fg:w="12"/><text x="64.4784%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="64.5734%" y="181" width="0.0173%" height="15" fill="rgb(234,130,49)" fg:x="44739" fg:w="12"/><text x="64.8234%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (27 samples, 0.04%)</title><rect x="64.9356%" y="165" width="0.0390%" height="15" fill="rgb(254,6,2)" fg:x="44990" fg:w="27"/><text x="65.1856%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (30 samples, 0.04%)</title><rect x="65.3037%" y="149" width="0.0433%" height="15" fill="rgb(208,96,46)" fg:x="45245" fg:w="30"/><text x="65.5537%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="65.5693%" y="133" width="0.0217%" height="15" fill="rgb(239,3,39)" fg:x="45429" fg:w="15"/><text x="65.8193%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,505 samples, 2.17%)</title><rect x="63.6222%" y="229" width="2.1722%" height="15" fill="rgb(233,210,1)" fg:x="44080" fg:w="1505"/><text x="63.8722%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,295 samples, 1.87%)</title><rect x="63.9253%" y="213" width="1.8691%" height="15" fill="rgb(244,137,37)" fg:x="44290" fg:w="1295"/><text x="64.1753%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,073 samples, 1.55%)</title><rect x="64.2457%" y="197" width="1.5487%" height="15" fill="rgb(240,136,2)" fg:x="44512" fg:w="1073"/><text x="64.4957%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (834 samples, 1.20%)</title><rect x="64.5907%" y="181" width="1.2037%" height="15" fill="rgb(239,18,37)" fg:x="44751" fg:w="834"/><text x="64.8407%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (568 samples, 0.82%)</title><rect x="64.9746%" y="165" width="0.8198%" height="15" fill="rgb(218,185,22)" fg:x="45017" fg:w="568"/><text x="65.2246%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (310 samples, 0.45%)</title><rect x="65.3470%" y="149" width="0.4474%" height="15" fill="rgb(225,218,4)" fg:x="45275" fg:w="310"/><text x="65.5970%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (141 samples, 0.20%)</title><rect x="65.5909%" y="133" width="0.2035%" height="15" fill="rgb(230,182,32)" fg:x="45444" fg:w="141"/><text x="65.8409%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (51 samples, 0.07%)</title><rect x="65.7208%" y="117" width="0.0736%" height="15" fill="rgb(242,56,43)" fg:x="45534" fg:w="51"/><text x="65.9708%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="65.7728%" y="101" width="0.0217%" height="15" fill="rgb(233,99,24)" fg:x="45570" fg:w="15"/><text x="66.0228%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (452 samples, 0.65%)</title><rect x="66.7297%" y="213" width="0.6524%" height="15" fill="rgb(234,209,42)" fg:x="46233" fg:w="452"/><text x="66.9797%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (930 samples, 1.34%)</title><rect x="67.3821%" y="213" width="1.3423%" height="15" fill="rgb(227,7,12)" fg:x="46685" fg:w="930"/><text x="67.6321%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,031 samples, 4.37%)</title><rect x="65.7944%" y="229" width="4.3747%" height="15" fill="rgb(245,203,43)" fg:x="45585" fg:w="3031"/><text x="66.0444%" y="239.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,001 samples, 1.44%)</title><rect x="68.7244%" y="213" width="1.4448%" height="15" fill="rgb(238,205,33)" fg:x="47615" fg:w="1001"/><text x="68.9744%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (48 samples, 0.07%)</title><rect x="70.1692%" y="229" width="0.0693%" height="15" fill="rgb(231,56,7)" fg:x="48616" fg:w="48"/><text x="70.4192%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (13,637 samples, 19.68%)</title><rect x="51.1446%" y="245" width="19.6828%" height="15" fill="rgb(244,186,29)" fg:x="35435" fg:w="13637"/><text x="51.3946%" y="255.50">rust_qecp`rust_qecp::union_find..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (408 samples, 0.59%)</title><rect x="70.2384%" y="229" width="0.5889%" height="15" fill="rgb(234,111,31)" fg:x="48664" fg:w="408"/><text x="70.4884%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (31 samples, 0.04%)</title><rect x="73.6000%" y="229" width="0.0447%" height="15" fill="rgb(241,149,10)" fg:x="50993" fg:w="31"/><text x="73.8500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.04%)</title><rect x="73.8482%" y="181" width="0.0419%" height="15" fill="rgb(249,206,44)" fg:x="51165" fg:w="29"/><text x="74.0982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (81 samples, 0.12%)</title><rect x="73.7775%" y="197" width="0.1169%" height="15" fill="rgb(251,153,30)" fg:x="51116" fg:w="81"/><text x="74.0275%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (176 samples, 0.25%)</title><rect x="73.6447%" y="229" width="0.2540%" height="15" fill="rgb(239,152,38)" fg:x="51024" fg:w="176"/><text x="73.8947%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (102 samples, 0.15%)</title><rect x="73.7515%" y="213" width="0.1472%" height="15" fill="rgb(249,139,47)" fg:x="51098" fg:w="102"/><text x="74.0015%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="73.8987%" y="229" width="0.0173%" height="15" fill="rgb(244,64,35)" fg:x="51200" fg:w="12"/><text x="74.1487%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (98 samples, 0.14%)</title><rect x="74.0849%" y="213" width="0.1414%" height="15" fill="rgb(216,46,15)" fg:x="51329" fg:w="98"/><text x="74.3349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (226 samples, 0.33%)</title><rect x="73.9161%" y="229" width="0.3262%" height="15" fill="rgb(250,74,19)" fg:x="51212" fg:w="226"/><text x="74.1661%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="74.2307%" y="213" width="0.0115%" height="15" fill="rgb(249,42,33)" fg:x="51430" fg:w="8"/><text x="74.4807%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="74.2307%" y="197" width="0.0115%" height="15" fill="rgb(242,149,17)" fg:x="51430" fg:w="8"/><text x="74.4807%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="74.2422%" y="229" width="0.0130%" height="15" fill="rgb(244,29,21)" fg:x="51438" fg:w="9"/><text x="74.4922%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="74.2552%" y="229" width="0.0159%" height="15" fill="rgb(220,130,37)" fg:x="51447" fg:w="11"/><text x="74.5052%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="74.3000%" y="197" width="0.0188%" height="15" fill="rgb(211,67,2)" fg:x="51478" fg:w="13"/><text x="74.5500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.05%)</title><rect x="74.2711%" y="229" width="0.0520%" height="15" fill="rgb(235,68,52)" fg:x="51458" fg:w="36"/><text x="74.5211%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 0.05%)</title><rect x="74.2754%" y="213" width="0.0476%" height="15" fill="rgb(246,142,3)" fg:x="51461" fg:w="33"/><text x="74.5254%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="74.3231%" y="229" width="0.0188%" height="15" fill="rgb(241,25,7)" fg:x="51494" fg:w="13"/><text x="74.5731%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (24 samples, 0.03%)</title><rect x="74.4876%" y="213" width="0.0346%" height="15" fill="rgb(242,119,39)" fg:x="51608" fg:w="24"/><text x="74.7376%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.03%)</title><rect x="74.4876%" y="197" width="0.0346%" height="15" fill="rgb(241,98,45)" fg:x="51608" fg:w="24"/><text x="74.7376%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (126 samples, 0.18%)</title><rect x="74.3418%" y="229" width="0.1819%" height="15" fill="rgb(254,28,30)" fg:x="51507" fg:w="126"/><text x="74.5918%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.03%)</title><rect x="74.5251%" y="229" width="0.0289%" height="15" fill="rgb(241,142,54)" fg:x="51634" fg:w="20"/><text x="74.7751%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (60 samples, 0.09%)</title><rect x="74.5583%" y="229" width="0.0866%" height="15" fill="rgb(222,85,15)" fg:x="51657" fg:w="60"/><text x="74.8083%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="74.6608%" y="197" width="0.0115%" height="15" fill="rgb(210,85,47)" fg:x="51728" fg:w="8"/><text x="74.9108%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (16 samples, 0.02%)</title><rect x="74.6724%" y="197" width="0.0231%" height="15" fill="rgb(224,206,25)" fg:x="51736" fg:w="16"/><text x="74.9224%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 0.05%)</title><rect x="74.6507%" y="213" width="0.0520%" height="15" fill="rgb(243,201,19)" fg:x="51721" fg:w="36"/><text x="74.9007%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.06%)</title><rect x="74.6449%" y="229" width="0.0635%" height="15" fill="rgb(236,59,4)" fg:x="51717" fg:w="44"/><text x="74.8949%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="74.7084%" y="229" width="0.0303%" height="15" fill="rgb(254,179,45)" fg:x="51761" fg:w="21"/><text x="74.9584%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,013 samples, 1.46%)</title><rect x="74.7388%" y="229" width="1.4621%" height="15" fill="rgb(226,14,10)" fg:x="51782" fg:w="1013"/><text x="74.9888%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="76.2081%" y="229" width="0.0101%" height="15" fill="rgb(244,27,41)" fg:x="52800" fg:w="7"/><text x="76.4581%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="76.2557%" y="165" width="0.0101%" height="15" fill="rgb(235,35,32)" fg:x="52833" fg:w="7"/><text x="76.5057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="76.2759%" y="149" width="0.0159%" height="15" fill="rgb(218,68,31)" fg:x="52847" fg:w="11"/><text x="76.5259%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="76.2817%" y="133" width="0.0101%" height="15" fill="rgb(207,120,37)" fg:x="52851" fg:w="7"/><text x="76.5317%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="76.2658%" y="165" width="0.0289%" height="15" fill="rgb(227,98,0)" fg:x="52840" fg:w="20"/><text x="76.5158%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.06%)</title><rect x="76.2442%" y="181" width="0.0650%" height="15" fill="rgb(207,7,3)" fg:x="52825" fg:w="45"/><text x="76.4942%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="76.2976%" y="165" width="0.0115%" height="15" fill="rgb(206,98,19)" fg:x="52862" fg:w="8"/><text x="76.5476%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="76.3091%" y="181" width="0.0144%" height="15" fill="rgb(217,5,26)" fg:x="52870" fg:w="10"/><text x="76.5591%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (70 samples, 0.10%)</title><rect x="76.2254%" y="229" width="0.1010%" height="15" fill="rgb(235,190,38)" fg:x="52812" fg:w="70"/><text x="76.4754%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (64 samples, 0.09%)</title><rect x="76.2341%" y="213" width="0.0924%" height="15" fill="rgb(247,86,24)" fg:x="52818" fg:w="64"/><text x="76.4841%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (62 samples, 0.09%)</title><rect x="76.2369%" y="197" width="0.0895%" height="15" fill="rgb(205,101,16)" fg:x="52820" fg:w="62"/><text x="76.4869%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,191 samples, 3.16%)</title><rect x="76.3293%" y="229" width="3.1623%" height="15" fill="rgb(246,168,33)" fg:x="52884" fg:w="2191"/><text x="76.5793%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (134 samples, 0.19%)</title><rect x="79.4917%" y="229" width="0.1934%" height="15" fill="rgb(231,114,1)" fg:x="55075" fg:w="134"/><text x="79.7417%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (45 samples, 0.06%)</title><rect x="79.6851%" y="229" width="0.0650%" height="15" fill="rgb(207,184,53)" fg:x="55209" fg:w="45"/><text x="79.9351%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="80.0820%" y="165" width="0.0462%" height="15" fill="rgb(224,95,51)" fg:x="55484" fg:w="32"/><text x="80.3320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (93 samples, 0.13%)</title><rect x="80.0055%" y="181" width="0.1342%" height="15" fill="rgb(212,188,45)" fg:x="55431" fg:w="93"/><text x="80.2555%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="80.1282%" y="165" width="0.0115%" height="15" fill="rgb(223,154,38)" fg:x="55516" fg:w="8"/><text x="80.3782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (194 samples, 0.28%)</title><rect x="79.8684%" y="197" width="0.2800%" height="15" fill="rgb(251,22,52)" fg:x="55336" fg:w="194"/><text x="80.1184%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.03%)</title><rect x="80.1599%" y="181" width="0.0289%" height="15" fill="rgb(229,209,22)" fg:x="55538" fg:w="20"/><text x="80.4099%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.01%)</title><rect x="80.1744%" y="165" width="0.0144%" height="15" fill="rgb(234,138,34)" fg:x="55548" fg:w="10"/><text x="80.4244%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.02%)</title><rect x="80.2032%" y="165" width="0.0202%" height="15" fill="rgb(212,95,11)" fg:x="55568" fg:w="14"/><text x="80.4532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (345 samples, 0.50%)</title><rect x="79.7991%" y="213" width="0.4980%" height="15" fill="rgb(240,179,47)" fg:x="55288" fg:w="345"/><text x="80.0491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 0.15%)</title><rect x="80.1513%" y="197" width="0.1458%" height="15" fill="rgb(240,163,11)" fg:x="55532" fg:w="101"/><text x="80.4013%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (73 samples, 0.11%)</title><rect x="80.1917%" y="181" width="0.1054%" height="15" fill="rgb(236,37,12)" fg:x="55560" fg:w="73"/><text x="80.4417%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 0.07%)</title><rect x="80.2234%" y="165" width="0.0736%" height="15" fill="rgb(232,164,16)" fg:x="55582" fg:w="51"/><text x="80.4734%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (395 samples, 0.57%)</title><rect x="79.7500%" y="229" width="0.5701%" height="15" fill="rgb(244,205,15)" fg:x="55254" fg:w="395"/><text x="80.0000%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.01%)</title><rect x="80.3057%" y="213" width="0.0144%" height="15" fill="rgb(223,117,47)" fg:x="55639" fg:w="10"/><text x="80.5557%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (22 samples, 0.03%)</title><rect x="80.3201%" y="229" width="0.0318%" height="15" fill="rgb(244,107,35)" fg:x="55649" fg:w="22"/><text x="80.5701%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (6,605 samples, 9.53%)</title><rect x="70.8273%" y="245" width="9.5332%" height="15" fill="rgb(205,140,8)" fg:x="49072" fg:w="6605"/><text x="71.0773%" y="255.50">rust_qecp`rust..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (14 samples, 0.02%)</title><rect x="80.3605%" y="245" width="0.0202%" height="15" fill="rgb(228,84,46)" fg:x="55677" fg:w="14"/><text x="80.6105%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (46,611 samples, 67.28%)</title><rect x="13.1069%" y="277" width="67.2753%" height="15" fill="rgb(254,188,9)" fg:x="9081" fg:w="46611"/><text x="13.3569%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (44,678 samples, 64.49%)</title><rect x="15.8969%" y="261" width="64.4853%" height="15" fill="rgb(206,112,54)" fg:x="11014" fg:w="44678"/><text x="16.1469%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,740 samples, 2.51%)</title><rect x="80.3822%" y="277" width="2.5114%" height="15" fill="rgb(216,84,49)" fg:x="55692" fg:w="1740"/><text x="80.6322%" y="287.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (254 samples, 0.37%)</title><rect x="82.8936%" y="277" width="0.3666%" height="15" fill="rgb(214,194,35)" fg:x="57432" fg:w="254"/><text x="83.1436%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (90 samples, 0.13%)</title><rect x="83.1303%" y="261" width="0.1299%" height="15" fill="rgb(249,28,3)" fg:x="57596" fg:w="90"/><text x="83.3803%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,314 samples, 9.11%)</title><rect x="83.2602%" y="277" width="9.1132%" height="15" fill="rgb(222,56,52)" fg:x="57686" fg:w="6314"/><text x="83.5102%" y="287.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (87 samples, 0.13%)</title><rect x="92.3763%" y="261" width="0.1256%" height="15" fill="rgb(245,217,50)" fg:x="64002" fg:w="87"/><text x="92.6263%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (403 samples, 0.58%)</title><rect x="92.3734%" y="277" width="0.5817%" height="15" fill="rgb(213,201,24)" fg:x="64000" fg:w="403"/><text x="92.6234%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (314 samples, 0.45%)</title><rect x="92.5019%" y="261" width="0.4532%" height="15" fill="rgb(248,116,28)" fg:x="64089" fg:w="314"/><text x="92.7519%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (45 samples, 0.06%)</title><rect x="92.9551%" y="277" width="0.0650%" height="15" fill="rgb(219,72,43)" fg:x="64403" fg:w="45"/><text x="93.2051%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (4,792 samples, 6.92%)</title><rect x="93.0229%" y="277" width="6.9165%" height="15" fill="rgb(209,138,14)" fg:x="64450" fg:w="4792"/><text x="93.2729%" y="287.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,450 samples, 4.98%)</title><rect x="94.9599%" y="261" width="4.9795%" height="15" fill="rgb(222,18,33)" fg:x="65792" fg:w="3450"/><text x="95.2099%" y="271.50">rust_q..</text></g><g><title>all (69,284 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(213,199,7)" fg:x="0" fg:w="69284"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,243 samples, 86.95%)</title><rect x="13.0492%" y="357" width="86.9508%" height="15" fill="rgb(250,110,10)" fg:x="9041" fg:w="60243"/><text x="13.2992%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,243 samples, 86.95%)</title><rect x="13.0492%" y="341" width="86.9508%" height="15" fill="rgb(248,123,6)" fg:x="9041" fg:w="60243"/><text x="13.2992%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,243 samples, 86.95%)</title><rect x="13.0492%" y="325" width="86.9508%" height="15" fill="rgb(206,91,31)" fg:x="9041" fg:w="60243"/><text x="13.2992%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,243 samples, 86.95%)</title><rect x="13.0492%" y="309" width="86.9508%" height="15" fill="rgb(211,154,13)" fg:x="9041" fg:w="60243"/><text x="13.2992%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,242 samples, 86.95%)</title><rect x="13.0506%" y="293" width="86.9494%" height="15" fill="rgb(225,148,7)" fg:x="9042" fg:w="60242"/><text x="13.3006%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (42 samples, 0.06%)</title><rect x="99.9394%" y="277" width="0.0606%" height="15" fill="rgb(220,160,43)" fg:x="69242" fg:w="42"/><text x="100.1894%" y="287.50"></text></g></svg></svg>