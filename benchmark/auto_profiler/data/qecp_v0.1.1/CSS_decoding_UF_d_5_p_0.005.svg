<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60191"><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (19 samples, 0.03%)</title><rect x="0.0249%" y="85" width="0.0316%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="19"/><text x="0.2749%" y="95.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (12 samples, 0.02%)</title><rect x="0.0366%" y="69" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="12"/><text x="0.2866%" y="79.50"></text></g><g><title>libsystem_c.dylib`isatty (11 samples, 0.02%)</title><rect x="0.0382%" y="53" width="0.0183%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="11"/><text x="0.2882%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (10 samples, 0.02%)</title><rect x="0.0399%" y="37" width="0.0166%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="10"/><text x="0.2899%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (13 samples, 0.02%)</title><rect x="0.0598%" y="85" width="0.0216%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="13"/><text x="0.3098%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0814%" y="85" width="0.0282%" height="15" fill="rgb(232,128,0)" fg:x="49" fg:w="17"/><text x="0.3314%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (13 samples, 0.02%)</title><rect x="0.0881%" y="69" width="0.0216%" height="15" fill="rgb(207,160,47)" fg:x="53" fg:w="13"/><text x="0.3381%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (10 samples, 0.02%)</title><rect x="0.0930%" y="53" width="0.0166%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="10"/><text x="0.3430%" y="63.50"></text></g><g><title>dyld`start (71 samples, 0.12%)</title><rect x="0.0000%" y="309" width="0.1180%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="71"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (71 samples, 0.12%)</title><rect x="0.0000%" y="293" width="0.1180%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="71"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (71 samples, 0.12%)</title><rect x="0.0000%" y="277" width="0.1180%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="71"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (71 samples, 0.12%)</title><rect x="0.0000%" y="261" width="0.1180%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="71"/><text x="0.2500%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (71 samples, 0.12%)</title><rect x="0.0000%" y="245" width="0.1180%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="71"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (71 samples, 0.12%)</title><rect x="0.0000%" y="229" width="0.1180%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="71"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (71 samples, 0.12%)</title><rect x="0.0000%" y="213" width="0.1180%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="71"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (71 samples, 0.12%)</title><rect x="0.0000%" y="197" width="0.1180%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="71"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (71 samples, 0.12%)</title><rect x="0.0000%" y="181" width="0.1180%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="71"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.12%)</title><rect x="0.0000%" y="165" width="0.1180%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="71"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (71 samples, 0.12%)</title><rect x="0.0000%" y="149" width="0.1180%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="71"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.12%)</title><rect x="0.0000%" y="133" width="0.1180%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="71"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (70 samples, 0.12%)</title><rect x="0.0017%" y="117" width="0.1163%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="70"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (68 samples, 0.11%)</title><rect x="0.0050%" y="101" width="0.1130%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="68"/><text x="0.2550%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="0.1279%" y="229" width="0.0150%" height="15" fill="rgb(221,5,38)" fg:x="77" fg:w="9"/><text x="0.3779%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="0.1612%" y="229" width="0.0116%" height="15" fill="rgb(247,18,42)" fg:x="97" fg:w="7"/><text x="0.4112%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="0.1612%" y="213" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="97" fg:w="7"/><text x="0.4112%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="0.1811%" y="229" width="0.0199%" height="15" fill="rgb(249,31,29)" fg:x="109" fg:w="12"/><text x="0.4311%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="0.2027%" y="229" width="0.0199%" height="15" fill="rgb(225,111,53)" fg:x="122" fg:w="12"/><text x="0.4527%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.03%)</title><rect x="0.2791%" y="213" width="0.0332%" height="15" fill="rgb(238,160,17)" fg:x="168" fg:w="20"/><text x="0.5291%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="0.3123%" y="213" width="0.0316%" height="15" fill="rgb(214,148,48)" fg:x="188" fg:w="19"/><text x="0.5623%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="0.3190%" y="197" width="0.0249%" height="15" fill="rgb(232,36,49)" fg:x="192" fg:w="15"/><text x="0.5690%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="0.3223%" y="181" width="0.0216%" height="15" fill="rgb(209,103,24)" fg:x="194" fg:w="13"/><text x="0.5723%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="0.3290%" y="165" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="198" fg:w="9"/><text x="0.5790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="0.3788%" y="197" width="0.0216%" height="15" fill="rgb(213,181,19)" fg:x="228" fg:w="13"/><text x="0.6288%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="0.3489%" y="213" width="0.0532%" height="15" fill="rgb(254,191,54)" fg:x="210" fg:w="32"/><text x="0.5989%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="0.4170%" y="213" width="0.0133%" height="15" fill="rgb(241,83,37)" fg:x="251" fg:w="8"/><text x="0.6670%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.06%)</title><rect x="0.4403%" y="213" width="0.0598%" height="15" fill="rgb(233,36,39)" fg:x="265" fg:w="36"/><text x="0.6903%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (357 samples, 0.59%)</title><rect x="0.5001%" y="213" width="0.5931%" height="15" fill="rgb(226,3,54)" fg:x="301" fg:w="357"/><text x="0.7501%" y="223.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (16 samples, 0.03%)</title><rect x="1.0932%" y="213" width="0.0266%" height="15" fill="rgb(245,192,40)" fg:x="658" fg:w="16"/><text x="1.3432%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="1.1065%" y="197" width="0.0133%" height="15" fill="rgb(238,167,29)" fg:x="666" fg:w="8"/><text x="1.3565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="1.1081%" y="181" width="0.0116%" height="15" fill="rgb(232,182,51)" fg:x="667" fg:w="7"/><text x="1.3581%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="1.1480%" y="149" width="0.0116%" height="15" fill="rgb(231,60,39)" fg:x="691" fg:w="7"/><text x="1.3980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="1.1480%" y="181" width="0.0133%" height="15" fill="rgb(208,69,12)" fg:x="691" fg:w="8"/><text x="1.3980%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="1.1480%" y="165" width="0.0133%" height="15" fill="rgb(235,93,37)" fg:x="691" fg:w="8"/><text x="1.3980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="1.1613%" y="165" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="699" fg:w="7"/><text x="1.4113%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="1.1397%" y="213" width="0.0349%" height="15" fill="rgb(222,207,29)" fg:x="686" fg:w="21"/><text x="1.3897%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (16 samples, 0.03%)</title><rect x="1.1480%" y="197" width="0.0266%" height="15" fill="rgb(206,96,30)" fg:x="691" fg:w="16"/><text x="1.3980%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="1.1613%" y="181" width="0.0133%" height="15" fill="rgb(218,138,4)" fg:x="699" fg:w="8"/><text x="1.4113%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (535 samples, 0.89%)</title><rect x="1.1829%" y="213" width="0.8888%" height="15" fill="rgb(250,191,14)" fg:x="712" fg:w="535"/><text x="1.4329%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (79 samples, 0.13%)</title><rect x="2.0717%" y="213" width="0.1312%" height="15" fill="rgb(239,60,40)" fg:x="1247" fg:w="79"/><text x="2.3217%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (41 samples, 0.07%)</title><rect x="2.2030%" y="213" width="0.0681%" height="15" fill="rgb(206,27,48)" fg:x="1326" fg:w="41"/><text x="2.4530%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (37 samples, 0.06%)</title><rect x="2.7197%" y="165" width="0.0615%" height="15" fill="rgb(225,35,8)" fg:x="1637" fg:w="37"/><text x="2.9697%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="2.7280%" y="149" width="0.0532%" height="15" fill="rgb(250,213,24)" fg:x="1642" fg:w="32"/><text x="2.9780%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.07%)</title><rect x="2.7097%" y="197" width="0.0748%" height="15" fill="rgb(247,123,22)" fg:x="1631" fg:w="45"/><text x="2.9597%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.07%)</title><rect x="2.7180%" y="181" width="0.0665%" height="15" fill="rgb(231,138,38)" fg:x="1636" fg:w="40"/><text x="2.9680%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="2.7845%" y="197" width="0.0116%" height="15" fill="rgb(231,145,46)" fg:x="1676" fg:w="7"/><text x="3.0345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="2.8227%" y="149" width="0.0116%" height="15" fill="rgb(251,118,11)" fg:x="1699" fg:w="7"/><text x="3.0727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="2.8210%" y="165" width="0.0183%" height="15" fill="rgb(217,147,25)" fg:x="1698" fg:w="11"/><text x="3.0710%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.04%)</title><rect x="2.7994%" y="197" width="0.0432%" height="15" fill="rgb(247,81,37)" fg:x="1685" fg:w="26"/><text x="3.0494%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="2.8111%" y="181" width="0.0316%" height="15" fill="rgb(209,12,38)" fg:x="1692" fg:w="19"/><text x="3.0611%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (339 samples, 0.56%)</title><rect x="2.2827%" y="213" width="0.5632%" height="15" fill="rgb(227,1,9)" fg:x="1374" fg:w="339"/><text x="2.5327%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (112 samples, 0.19%)</title><rect x="10.2274%" y="197" width="0.1861%" height="15" fill="rgb(248,47,43)" fg:x="6156" fg:w="112"/><text x="10.4774%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (408 samples, 0.68%)</title><rect x="10.4135%" y="197" width="0.6778%" height="15" fill="rgb(221,10,30)" fg:x="6268" fg:w="408"/><text x="10.6635%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="11.0914%" y="197" width="0.0249%" height="15" fill="rgb(210,229,1)" fg:x="6676" fg:w="15"/><text x="11.3414%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (85 samples, 0.14%)</title><rect x="11.1163%" y="197" width="0.1412%" height="15" fill="rgb(222,148,37)" fg:x="6691" fg:w="85"/><text x="11.3663%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="11.4751%" y="181" width="0.0133%" height="15" fill="rgb(234,67,33)" fg:x="6907" fg:w="8"/><text x="11.7251%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (147 samples, 0.24%)</title><rect x="11.2575%" y="197" width="0.2442%" height="15" fill="rgb(247,98,35)" fg:x="6776" fg:w="147"/><text x="11.5075%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="11.5449%" y="181" width="0.0133%" height="15" fill="rgb(247,138,52)" fg:x="6949" fg:w="8"/><text x="11.7949%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (40 samples, 0.07%)</title><rect x="11.5017%" y="197" width="0.0665%" height="15" fill="rgb(213,79,30)" fg:x="6923" fg:w="40"/><text x="11.7517%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="11.5682%" y="197" width="0.0249%" height="15" fill="rgb(246,177,23)" fg:x="6963" fg:w="15"/><text x="11.8182%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="11.5781%" y="181" width="0.0150%" height="15" fill="rgb(230,62,27)" fg:x="6969" fg:w="9"/><text x="11.8281%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (93 samples, 0.15%)</title><rect x="11.5931%" y="197" width="0.1545%" height="15" fill="rgb(216,154,8)" fg:x="6978" fg:w="93"/><text x="11.8431%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (64 samples, 0.11%)</title><rect x="11.7476%" y="197" width="0.1063%" height="15" fill="rgb(244,35,45)" fg:x="7071" fg:w="64"/><text x="11.9976%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (24 samples, 0.04%)</title><rect x="11.8606%" y="197" width="0.0399%" height="15" fill="rgb(251,115,12)" fg:x="7139" fg:w="24"/><text x="12.1106%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (290 samples, 0.48%)</title><rect x="11.9088%" y="197" width="0.4818%" height="15" fill="rgb(240,54,50)" fg:x="7168" fg:w="290"/><text x="12.1588%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.10%)</title><rect x="12.3906%" y="197" width="0.1047%" height="15" fill="rgb(233,84,52)" fg:x="7458" fg:w="63"/><text x="12.6406%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (100 samples, 0.17%)</title><rect x="12.4952%" y="197" width="0.1661%" height="15" fill="rgb(207,117,47)" fg:x="7521" fg:w="100"/><text x="12.7452%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,310 samples, 3.84%)</title><rect x="12.6614%" y="197" width="3.8378%" height="15" fill="rgb(249,43,39)" fg:x="7621" fg:w="2310"/><text x="12.9114%" y="207.50">rust..</text></g><g><title>rust_qecp`DYLD-STUB$$free (81 samples, 0.13%)</title><rect x="16.5008%" y="197" width="0.1346%" height="15" fill="rgb(209,38,44)" fg:x="9932" fg:w="81"/><text x="16.7508%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (25 samples, 0.04%)</title><rect x="16.6387%" y="197" width="0.0415%" height="15" fill="rgb(236,212,23)" fg:x="10015" fg:w="25"/><text x="16.8887%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (22 samples, 0.04%)</title><rect x="16.6836%" y="197" width="0.0366%" height="15" fill="rgb(242,79,21)" fg:x="10042" fg:w="22"/><text x="16.9336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="16.7400%" y="149" width="0.0150%" height="15" fill="rgb(211,96,35)" fg:x="10076" fg:w="9"/><text x="16.9900%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="16.7334%" y="197" width="0.0233%" height="15" fill="rgb(253,215,40)" fg:x="10072" fg:w="14"/><text x="16.9834%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="16.7367%" y="181" width="0.0199%" height="15" fill="rgb(211,81,21)" fg:x="10074" fg:w="12"/><text x="16.9867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="16.7400%" y="165" width="0.0166%" height="15" fill="rgb(208,190,38)" fg:x="10076" fg:w="10"/><text x="16.9900%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.04%)</title><rect x="16.9145%" y="149" width="0.0366%" height="15" fill="rgb(235,213,38)" fg:x="10181" fg:w="22"/><text x="17.1645%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.03%)</title><rect x="16.9162%" y="133" width="0.0349%" height="15" fill="rgb(237,122,38)" fg:x="10182" fg:w="21"/><text x="17.1662%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="16.9311%" y="117" width="0.0199%" height="15" fill="rgb(244,218,35)" fg:x="10191" fg:w="12"/><text x="17.1811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.06%)</title><rect x="16.8962%" y="165" width="0.0631%" height="15" fill="rgb(240,68,47)" fg:x="10170" fg:w="38"/><text x="17.1462%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="17.0358%" y="133" width="0.0249%" height="15" fill="rgb(210,16,53)" fg:x="10254" fg:w="15"/><text x="17.2858%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="17.0856%" y="117" width="0.0233%" height="15" fill="rgb(235,124,12)" fg:x="10284" fg:w="14"/><text x="17.3356%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="17.1089%" y="101" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="10298" fg:w="9"/><text x="17.3589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="17.1089%" y="117" width="0.0183%" height="15" fill="rgb(250,166,2)" fg:x="10298" fg:w="11"/><text x="17.3589%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (60 samples, 0.10%)</title><rect x="17.0607%" y="133" width="0.0997%" height="15" fill="rgb(242,216,29)" fg:x="10269" fg:w="60"/><text x="17.3107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="17.1338%" y="117" width="0.0266%" height="15" fill="rgb(230,116,27)" fg:x="10313" fg:w="16"/><text x="17.3838%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="17.1355%" y="101" width="0.0249%" height="15" fill="rgb(228,99,48)" fg:x="10314" fg:w="15"/><text x="17.3855%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="17.1454%" y="85" width="0.0150%" height="15" fill="rgb(253,11,6)" fg:x="10320" fg:w="9"/><text x="17.3954%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="17.2169%" y="101" width="0.0133%" height="15" fill="rgb(247,143,39)" fg:x="10363" fg:w="8"/><text x="17.4669%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (31 samples, 0.05%)</title><rect x="17.1986%" y="117" width="0.0515%" height="15" fill="rgb(236,97,10)" fg:x="10352" fg:w="31"/><text x="17.4486%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.01%)</title><rect x="17.2368%" y="101" width="0.0133%" height="15" fill="rgb(233,208,19)" fg:x="10375" fg:w="8"/><text x="17.4868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="17.2501%" y="117" width="0.0282%" height="15" fill="rgb(216,164,2)" fg:x="10383" fg:w="17"/><text x="17.5001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="17.2534%" y="101" width="0.0249%" height="15" fill="rgb(220,129,5)" fg:x="10385" fg:w="15"/><text x="17.5034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (22 samples, 0.04%)</title><rect x="17.2900%" y="117" width="0.0366%" height="15" fill="rgb(242,17,10)" fg:x="10407" fg:w="22"/><text x="17.5400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (10 samples, 0.02%)</title><rect x="17.3265%" y="117" width="0.0166%" height="15" fill="rgb(242,107,0)" fg:x="10429" fg:w="10"/><text x="17.5765%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.02%)</title><rect x="17.3680%" y="69" width="0.0216%" height="15" fill="rgb(251,28,31)" fg:x="10454" fg:w="13"/><text x="17.6180%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (38 samples, 0.06%)</title><rect x="17.3464%" y="101" width="0.0631%" height="15" fill="rgb(233,223,10)" fg:x="10441" fg:w="38"/><text x="17.5964%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (33 samples, 0.05%)</title><rect x="17.3548%" y="85" width="0.0548%" height="15" fill="rgb(215,21,27)" fg:x="10446" fg:w="33"/><text x="17.6048%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="17.3979%" y="69" width="0.0116%" height="15" fill="rgb(232,23,21)" fg:x="10472" fg:w="7"/><text x="17.6479%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.07%)</title><rect x="17.3431%" y="117" width="0.0748%" height="15" fill="rgb(244,5,23)" fg:x="10439" fg:w="45"/><text x="17.5931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (152 samples, 0.25%)</title><rect x="17.1753%" y="133" width="0.2525%" height="15" fill="rgb(226,81,46)" fg:x="10338" fg:w="152"/><text x="17.4253%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (331 samples, 0.55%)</title><rect x="17.0009%" y="149" width="0.5499%" height="15" fill="rgb(247,70,30)" fg:x="10233" fg:w="331"/><text x="17.2509%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.12%)</title><rect x="17.4312%" y="133" width="0.1196%" height="15" fill="rgb(212,68,19)" fg:x="10492" fg:w="72"/><text x="17.6812%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="17.5508%" y="149" width="0.0183%" height="15" fill="rgb(240,187,13)" fg:x="10564" fg:w="11"/><text x="17.8008%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (511 samples, 0.85%)</title><rect x="16.7567%" y="197" width="0.8490%" height="15" fill="rgb(223,113,26)" fg:x="10086" fg:w="511"/><text x="17.0067%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (430 samples, 0.71%)</title><rect x="16.8912%" y="181" width="0.7144%" height="15" fill="rgb(206,192,2)" fg:x="10167" fg:w="430"/><text x="17.1412%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (386 samples, 0.64%)</title><rect x="16.9643%" y="165" width="0.6413%" height="15" fill="rgb(241,108,4)" fg:x="10211" fg:w="386"/><text x="17.2143%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="17.5857%" y="149" width="0.0199%" height="15" fill="rgb(247,173,49)" fg:x="10585" fg:w="12"/><text x="17.8357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="17.5890%" y="133" width="0.0166%" height="15" fill="rgb(224,114,35)" fg:x="10587" fg:w="10"/><text x="17.8390%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="17.6056%" y="197" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="10597" fg:w="8"/><text x="17.8556%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (20 samples, 0.03%)</title><rect x="17.8050%" y="181" width="0.0332%" height="15" fill="rgb(245,172,44)" fg:x="10717" fg:w="20"/><text x="18.0550%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (175 samples, 0.29%)</title><rect x="18.4263%" y="165" width="0.2907%" height="15" fill="rgb(236,23,11)" fg:x="11091" fg:w="175"/><text x="18.6763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (26 samples, 0.04%)</title><rect x="18.7171%" y="165" width="0.0432%" height="15" fill="rgb(205,117,38)" fg:x="11266" fg:w="26"/><text x="18.9671%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (44 samples, 0.07%)</title><rect x="18.7603%" y="165" width="0.0731%" height="15" fill="rgb(237,72,25)" fg:x="11292" fg:w="44"/><text x="19.0103%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (116 samples, 0.19%)</title><rect x="18.8334%" y="165" width="0.1927%" height="15" fill="rgb(244,70,9)" fg:x="11336" fg:w="116"/><text x="19.0834%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (74 samples, 0.12%)</title><rect x="18.9032%" y="149" width="0.1229%" height="15" fill="rgb(217,125,39)" fg:x="11378" fg:w="74"/><text x="19.1532%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (716 samples, 1.19%)</title><rect x="17.8382%" y="181" width="1.1895%" height="15" fill="rgb(235,36,10)" fg:x="10737" fg:w="716"/><text x="18.0882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (147 samples, 0.24%)</title><rect x="19.3335%" y="165" width="0.2442%" height="15" fill="rgb(251,123,47)" fg:x="11637" fg:w="147"/><text x="19.5835%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (33 samples, 0.05%)</title><rect x="19.5777%" y="165" width="0.0548%" height="15" fill="rgb(221,13,13)" fg:x="11784" fg:w="33"/><text x="19.8277%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (40 samples, 0.07%)</title><rect x="19.6325%" y="165" width="0.0665%" height="15" fill="rgb(238,131,9)" fg:x="11817" fg:w="40"/><text x="19.8825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (664 samples, 1.10%)</title><rect x="19.0278%" y="181" width="1.1032%" height="15" fill="rgb(211,50,8)" fg:x="11453" fg:w="664"/><text x="19.2778%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (260 samples, 0.43%)</title><rect x="19.6990%" y="165" width="0.4320%" height="15" fill="rgb(245,182,24)" fg:x="11857" fg:w="260"/><text x="19.9490%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (74 samples, 0.12%)</title><rect x="20.4084%" y="149" width="0.1229%" height="15" fill="rgb(242,14,37)" fg:x="12284" fg:w="74"/><text x="20.6584%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (319 samples, 0.53%)</title><rect x="20.1309%" y="181" width="0.5300%" height="15" fill="rgb(246,228,12)" fg:x="12117" fg:w="319"/><text x="20.3809%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (249 samples, 0.41%)</title><rect x="20.2472%" y="165" width="0.4137%" height="15" fill="rgb(213,55,15)" fg:x="12187" fg:w="249"/><text x="20.4972%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (78 samples, 0.13%)</title><rect x="20.5313%" y="149" width="0.1296%" height="15" fill="rgb(209,9,3)" fg:x="12358" fg:w="78"/><text x="20.7813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (40 samples, 0.07%)</title><rect x="20.6609%" y="181" width="0.0665%" height="15" fill="rgb(230,59,30)" fg:x="12436" fg:w="40"/><text x="20.9109%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (161 samples, 0.27%)</title><rect x="20.9201%" y="149" width="0.2675%" height="15" fill="rgb(209,121,21)" fg:x="12592" fg:w="161"/><text x="21.1701%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (279 samples, 0.46%)</title><rect x="20.7274%" y="181" width="0.4635%" height="15" fill="rgb(220,109,13)" fg:x="12476" fg:w="279"/><text x="20.9774%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (163 samples, 0.27%)</title><rect x="20.9201%" y="165" width="0.2708%" height="15" fill="rgb(232,18,1)" fg:x="12592" fg:w="163"/><text x="21.1701%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (45 samples, 0.07%)</title><rect x="21.1909%" y="181" width="0.0748%" height="15" fill="rgb(215,41,42)" fg:x="12755" fg:w="45"/><text x="21.4409%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="21.2706%" y="181" width="0.0216%" height="15" fill="rgb(224,123,36)" fg:x="12803" fg:w="13"/><text x="21.5206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (52 samples, 0.09%)</title><rect x="21.2922%" y="181" width="0.0864%" height="15" fill="rgb(240,125,3)" fg:x="12816" fg:w="52"/><text x="21.5422%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="21.3786%" y="181" width="0.0382%" height="15" fill="rgb(205,98,50)" fg:x="12868" fg:w="23"/><text x="21.6286%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.03%)</title><rect x="21.4168%" y="181" width="0.0266%" height="15" fill="rgb(205,185,37)" fg:x="12891" fg:w="16"/><text x="21.6668%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (16 samples, 0.03%)</title><rect x="21.4434%" y="181" width="0.0266%" height="15" fill="rgb(238,207,15)" fg:x="12907" fg:w="16"/><text x="21.6934%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (65 samples, 0.11%)</title><rect x="21.6843%" y="149" width="0.1080%" height="15" fill="rgb(213,199,42)" fg:x="13052" fg:w="65"/><text x="21.9343%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (171 samples, 0.28%)</title><rect x="21.5115%" y="165" width="0.2841%" height="15" fill="rgb(235,201,11)" fg:x="12948" fg:w="171"/><text x="21.7615%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="21.7956%" y="165" width="0.0183%" height="15" fill="rgb(207,46,11)" fg:x="13119" fg:w="11"/><text x="22.0456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (53 samples, 0.09%)</title><rect x="21.8139%" y="165" width="0.0881%" height="15" fill="rgb(241,35,35)" fg:x="13130" fg:w="53"/><text x="22.0639%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,592 samples, 4.31%)</title><rect x="17.6206%" y="197" width="4.3063%" height="15" fill="rgb(243,32,47)" fg:x="10606" fg:w="2592"/><text x="17.8706%" y="207.50">rust_..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (275 samples, 0.46%)</title><rect x="21.4700%" y="181" width="0.4569%" height="15" fill="rgb(247,202,23)" fg:x="12923" fg:w="275"/><text x="21.7200%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="21.9019%" y="165" width="0.0249%" height="15" fill="rgb(219,102,11)" fg:x="13183" fg:w="15"/><text x="22.1519%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (118 samples, 0.20%)</title><rect x="21.9269%" y="197" width="0.1960%" height="15" fill="rgb(243,110,44)" fg:x="13198" fg:w="118"/><text x="22.1769%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (70 samples, 0.12%)</title><rect x="22.0066%" y="181" width="0.1163%" height="15" fill="rgb(222,74,54)" fg:x="13246" fg:w="70"/><text x="22.2566%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (23 samples, 0.04%)</title><rect x="22.0847%" y="165" width="0.0382%" height="15" fill="rgb(216,99,12)" fg:x="13293" fg:w="23"/><text x="22.3347%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (109 samples, 0.18%)</title><rect x="22.1296%" y="197" width="0.1811%" height="15" fill="rgb(226,22,26)" fg:x="13320" fg:w="109"/><text x="22.3796%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,347 samples, 5.56%)</title><rect x="22.3106%" y="197" width="5.5606%" height="15" fill="rgb(217,163,10)" fg:x="13429" fg:w="3347"/><text x="22.5606%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (314 samples, 0.52%)</title><rect x="27.8713%" y="197" width="0.5217%" height="15" fill="rgb(213,25,53)" fg:x="16776" fg:w="314"/><text x="28.1213%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="28.6953%" y="165" width="0.0133%" height="15" fill="rgb(252,105,26)" fg:x="17272" fg:w="8"/><text x="28.9453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (40 samples, 0.07%)</title><rect x="28.6854%" y="181" width="0.0665%" height="15" fill="rgb(220,39,43)" fg:x="17266" fg:w="40"/><text x="28.9354%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="28.7153%" y="165" width="0.0366%" height="15" fill="rgb(229,68,48)" fg:x="17284" fg:w="22"/><text x="28.9653%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.03%)</title><rect x="28.7186%" y="149" width="0.0332%" height="15" fill="rgb(252,8,32)" fg:x="17286" fg:w="20"/><text x="28.9686%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.04%)</title><rect x="28.7518%" y="181" width="0.0366%" height="15" fill="rgb(223,20,43)" fg:x="17306" fg:w="22"/><text x="29.0018%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="28.7884%" y="181" width="0.0266%" height="15" fill="rgb(229,81,49)" fg:x="17328" fg:w="16"/><text x="29.0384%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="28.7900%" y="165" width="0.0249%" height="15" fill="rgb(236,28,36)" fg:x="17329" fg:w="15"/><text x="29.0400%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.02%)</title><rect x="28.8266%" y="181" width="0.0249%" height="15" fill="rgb(249,185,26)" fg:x="17351" fg:w="15"/><text x="29.0766%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (221 samples, 0.37%)</title><rect x="28.8565%" y="181" width="0.3672%" height="15" fill="rgb(249,174,33)" fg:x="17369" fg:w="221"/><text x="29.1065%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="29.7652%" y="133" width="0.0133%" height="15" fill="rgb(233,201,37)" fg:x="17916" fg:w="8"/><text x="30.0152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="29.7553%" y="149" width="0.0249%" height="15" fill="rgb(221,78,26)" fg:x="17910" fg:w="15"/><text x="30.0053%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="29.8217%" y="101" width="0.0183%" height="15" fill="rgb(250,127,30)" fg:x="17950" fg:w="11"/><text x="30.0717%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (36 samples, 0.06%)</title><rect x="29.7952%" y="133" width="0.0598%" height="15" fill="rgb(230,49,44)" fg:x="17934" fg:w="36"/><text x="30.0452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (30 samples, 0.05%)</title><rect x="29.8051%" y="117" width="0.0498%" height="15" fill="rgb(229,67,23)" fg:x="17940" fg:w="30"/><text x="30.0551%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="29.8583%" y="117" width="0.0116%" height="15" fill="rgb(249,83,47)" fg:x="17972" fg:w="7"/><text x="30.1083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.14%)</title><rect x="29.7370%" y="165" width="0.1412%" height="15" fill="rgb(215,43,3)" fg:x="17899" fg:w="85"/><text x="29.9870%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (57 samples, 0.09%)</title><rect x="29.7835%" y="149" width="0.0947%" height="15" fill="rgb(238,154,13)" fg:x="17927" fg:w="57"/><text x="30.0335%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="29.8550%" y="133" width="0.0233%" height="15" fill="rgb(219,56,2)" fg:x="17970" fg:w="14"/><text x="30.1050%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (88 samples, 0.15%)</title><rect x="29.8899%" y="165" width="0.1462%" height="15" fill="rgb(233,0,4)" fg:x="17991" fg:w="88"/><text x="30.1399%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (416 samples, 0.69%)</title><rect x="30.0361%" y="165" width="0.6911%" height="15" fill="rgb(235,30,7)" fg:x="18079" fg:w="416"/><text x="30.2861%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,954 samples, 3.25%)</title><rect x="28.3929%" y="197" width="3.2463%" height="15" fill="rgb(250,79,13)" fg:x="17090" fg:w="1954"/><text x="28.6429%" y="207.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,454 samples, 2.42%)</title><rect x="29.2236%" y="181" width="2.4156%" height="15" fill="rgb(211,146,34)" fg:x="17590" fg:w="1454"/><text x="29.4736%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (549 samples, 0.91%)</title><rect x="30.7272%" y="165" width="0.9121%" height="15" fill="rgb(228,22,38)" fg:x="18495" fg:w="549"/><text x="30.9772%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (23 samples, 0.04%)</title><rect x="31.6393%" y="197" width="0.0382%" height="15" fill="rgb(235,168,5)" fg:x="19044" fg:w="23"/><text x="31.8893%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (30 samples, 0.05%)</title><rect x="31.6792%" y="197" width="0.0498%" height="15" fill="rgb(221,155,16)" fg:x="19068" fg:w="30"/><text x="31.9292%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (204 samples, 0.34%)</title><rect x="31.7290%" y="197" width="0.3389%" height="15" fill="rgb(215,215,53)" fg:x="19098" fg:w="204"/><text x="31.9790%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,350 samples, 7.23%)</title><rect x="36.1782%" y="181" width="7.2270%" height="15" fill="rgb(223,4,10)" fg:x="21776" fg:w="4350"/><text x="36.4282%" y="191.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="43.4284%" y="101" width="0.0199%" height="15" fill="rgb(234,103,6)" fg:x="26140" fg:w="12"/><text x="43.6784%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="43.4666%" y="101" width="0.0199%" height="15" fill="rgb(227,97,0)" fg:x="26163" fg:w="12"/><text x="43.7166%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="43.4700%" y="85" width="0.0166%" height="15" fill="rgb(234,150,53)" fg:x="26165" fg:w="10"/><text x="43.7200%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="43.4716%" y="69" width="0.0150%" height="15" fill="rgb(228,201,54)" fg:x="26166" fg:w="9"/><text x="43.7216%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (38 samples, 0.06%)</title><rect x="43.4251%" y="117" width="0.0631%" height="15" fill="rgb(222,22,37)" fg:x="26138" fg:w="38"/><text x="43.6751%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (56 samples, 0.09%)</title><rect x="43.4185%" y="133" width="0.0930%" height="15" fill="rgb(237,53,32)" fg:x="26134" fg:w="56"/><text x="43.6685%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="43.4882%" y="117" width="0.0233%" height="15" fill="rgb(233,25,53)" fg:x="26176" fg:w="14"/><text x="43.7382%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (67 samples, 0.11%)</title><rect x="43.4068%" y="181" width="0.1113%" height="15" fill="rgb(210,40,34)" fg:x="26127" fg:w="67"/><text x="43.6568%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (64 samples, 0.11%)</title><rect x="43.4118%" y="165" width="0.1063%" height="15" fill="rgb(241,220,44)" fg:x="26130" fg:w="64"/><text x="43.6618%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (63 samples, 0.10%)</title><rect x="43.4135%" y="149" width="0.1047%" height="15" fill="rgb(235,28,35)" fg:x="26131" fg:w="63"/><text x="43.6635%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,278 samples, 3.78%)</title><rect x="43.5198%" y="181" width="3.7846%" height="15" fill="rgb(210,56,17)" fg:x="26195" fg:w="2278"/><text x="43.7698%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (117 samples, 0.19%)</title><rect x="47.3044%" y="181" width="0.1944%" height="15" fill="rgb(224,130,29)" fg:x="28473" fg:w="117"/><text x="47.5544%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="47.6101%" y="165" width="0.0183%" height="15" fill="rgb(235,212,8)" fg:x="28657" fg:w="11"/><text x="47.8601%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="47.6168%" y="149" width="0.0116%" height="15" fill="rgb(223,33,50)" fg:x="28661" fg:w="7"/><text x="47.8668%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="47.6168%" y="133" width="0.0116%" height="15" fill="rgb(219,149,13)" fg:x="28661" fg:w="7"/><text x="47.8668%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="47.6284%" y="165" width="0.0116%" height="15" fill="rgb(250,156,29)" fg:x="28668" fg:w="7"/><text x="47.8784%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (110 samples, 0.18%)</title><rect x="47.6666%" y="165" width="0.1828%" height="15" fill="rgb(216,193,19)" fg:x="28691" fg:w="110"/><text x="47.9166%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.03%)</title><rect x="48.1667%" y="117" width="0.0299%" height="15" fill="rgb(216,135,14)" fg:x="28992" fg:w="18"/><text x="48.4167%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="48.1816%" y="101" width="0.0150%" height="15" fill="rgb(241,47,5)" fg:x="29001" fg:w="9"/><text x="48.4316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="48.1617%" y="149" width="0.0366%" height="15" fill="rgb(233,42,35)" fg:x="28989" fg:w="22"/><text x="48.4117%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="48.1667%" y="133" width="0.0316%" height="15" fill="rgb(231,13,6)" fg:x="28992" fg:w="19"/><text x="48.4167%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (360 samples, 0.60%)</title><rect x="48.1999%" y="149" width="0.5981%" height="15" fill="rgb(207,181,40)" fg:x="29012" fg:w="360"/><text x="48.4499%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,136 samples, 1.89%)</title><rect x="47.4988%" y="181" width="1.8873%" height="15" fill="rgb(254,173,49)" fg:x="28590" fg:w="1136"/><text x="47.7488%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (925 samples, 1.54%)</title><rect x="47.8493%" y="165" width="1.5368%" height="15" fill="rgb(221,1,38)" fg:x="28801" fg:w="925"/><text x="48.0993%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (354 samples, 0.59%)</title><rect x="48.7980%" y="149" width="0.5881%" height="15" fill="rgb(206,124,46)" fg:x="29372" fg:w="354"/><text x="49.0480%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="54.3869%" y="101" width="0.0150%" height="15" fill="rgb(249,21,11)" fg:x="32736" fg:w="9"/><text x="54.6369%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="54.4284%" y="85" width="0.0216%" height="15" fill="rgb(222,201,40)" fg:x="32761" fg:w="13"/><text x="54.6784%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="54.4317%" y="69" width="0.0183%" height="15" fill="rgb(235,61,29)" fg:x="32763" fg:w="11"/><text x="54.6817%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="54.4367%" y="53" width="0.0133%" height="15" fill="rgb(219,207,3)" fg:x="32766" fg:w="8"/><text x="54.6867%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (29 samples, 0.05%)</title><rect x="54.4035%" y="101" width="0.0482%" height="15" fill="rgb(222,56,46)" fg:x="32746" fg:w="29"/><text x="54.6535%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (67 samples, 0.11%)</title><rect x="54.3752%" y="117" width="0.1113%" height="15" fill="rgb(239,76,54)" fg:x="32729" fg:w="67"/><text x="54.6252%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.03%)</title><rect x="54.4517%" y="101" width="0.0349%" height="15" fill="rgb(231,124,27)" fg:x="32775" fg:w="21"/><text x="54.7017%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (82 samples, 0.14%)</title><rect x="54.3619%" y="133" width="0.1362%" height="15" fill="rgb(249,195,6)" fg:x="32721" fg:w="82"/><text x="54.6119%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (88 samples, 0.15%)</title><rect x="54.3536%" y="165" width="0.1462%" height="15" fill="rgb(237,174,47)" fg:x="32716" fg:w="88"/><text x="54.6036%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.14%)</title><rect x="54.3570%" y="149" width="0.1429%" height="15" fill="rgb(206,201,31)" fg:x="32718" fg:w="86"/><text x="54.6070%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,503 samples, 22.43%)</title><rect x="32.0679%" y="197" width="22.4336%" height="15" fill="rgb(231,57,52)" fg:x="19302" fg:w="13503"/><text x="32.3179%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarCo..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,077 samples, 5.11%)</title><rect x="49.3894%" y="181" width="5.1121%" height="15" fill="rgb(248,177,22)" fg:x="29728" fg:w="3077"/><text x="49.6394%" y="191.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="56.6414%" y="85" width="0.0116%" height="15" fill="rgb(215,211,37)" fg:x="34093" fg:w="7"/><text x="56.8914%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="56.6347%" y="101" width="0.0216%" height="15" fill="rgb(241,128,51)" fg:x="34089" fg:w="13"/><text x="56.8847%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.04%)</title><rect x="56.6281%" y="117" width="0.0399%" height="15" fill="rgb(227,165,31)" fg:x="34085" fg:w="24"/><text x="56.8781%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="56.6563%" y="101" width="0.0116%" height="15" fill="rgb(228,167,24)" fg:x="34102" fg:w="7"/><text x="56.9063%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.06%)</title><rect x="56.6131%" y="165" width="0.0565%" height="15" fill="rgb(228,143,12)" fg:x="34076" fg:w="34"/><text x="56.8631%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (31 samples, 0.05%)</title><rect x="56.6181%" y="149" width="0.0515%" height="15" fill="rgb(249,149,8)" fg:x="34079" fg:w="31"/><text x="56.8681%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="56.6198%" y="133" width="0.0498%" height="15" fill="rgb(243,35,44)" fg:x="34080" fg:w="30"/><text x="56.8698%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.13%)</title><rect x="56.5367%" y="181" width="0.1346%" height="15" fill="rgb(246,89,9)" fg:x="34030" fg:w="81"/><text x="56.7867%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (13 samples, 0.02%)</title><rect x="56.6945%" y="149" width="0.0216%" height="15" fill="rgb(233,213,13)" fg:x="34125" fg:w="13"/><text x="56.9445%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (27 samples, 0.04%)</title><rect x="56.6779%" y="165" width="0.0449%" height="15" fill="rgb(233,141,41)" fg:x="34115" fg:w="27"/><text x="56.9279%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (41 samples, 0.07%)</title><rect x="56.6713%" y="181" width="0.0681%" height="15" fill="rgb(239,167,4)" fg:x="34111" fg:w="41"/><text x="56.9213%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="56.7277%" y="165" width="0.0116%" height="15" fill="rgb(209,217,16)" fg:x="34145" fg:w="7"/><text x="56.9777%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (48 samples, 0.08%)</title><rect x="56.7410%" y="165" width="0.0797%" height="15" fill="rgb(219,88,35)" fg:x="34153" fg:w="48"/><text x="56.9910%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="56.8208%" y="165" width="0.0199%" height="15" fill="rgb(220,193,23)" fg:x="34201" fg:w="12"/><text x="57.0708%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (31 samples, 0.05%)</title><rect x="56.8407%" y="165" width="0.0515%" height="15" fill="rgb(230,90,52)" fg:x="34213" fg:w="31"/><text x="57.0907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="56.8922%" y="165" width="0.0532%" height="15" fill="rgb(252,106,19)" fg:x="34244" fg:w="32"/><text x="57.1422%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.05%)</title><rect x="56.9454%" y="165" width="0.0465%" height="15" fill="rgb(206,74,20)" fg:x="34276" fg:w="28"/><text x="57.1954%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="56.9919%" y="165" width="0.0366%" height="15" fill="rgb(230,138,44)" fg:x="34304" fg:w="22"/><text x="57.2419%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="57.3740%" y="133" width="0.0399%" height="15" fill="rgb(235,182,43)" fg:x="34534" fg:w="24"/><text x="57.6240%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (232 samples, 0.39%)</title><rect x="57.5202%" y="117" width="0.3854%" height="15" fill="rgb(242,16,51)" fg:x="34622" fg:w="232"/><text x="57.7702%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (70 samples, 0.12%)</title><rect x="57.7894%" y="101" width="0.1163%" height="15" fill="rgb(248,9,4)" fg:x="34784" fg:w="70"/><text x="58.0394%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (493 samples, 0.82%)</title><rect x="57.1331%" y="149" width="0.8191%" height="15" fill="rgb(210,31,22)" fg:x="34389" fg:w="493"/><text x="57.3831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (324 samples, 0.54%)</title><rect x="57.4139%" y="133" width="0.5383%" height="15" fill="rgb(239,54,39)" fg:x="34558" fg:w="324"/><text x="57.6639%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.05%)</title><rect x="57.9057%" y="117" width="0.0465%" height="15" fill="rgb(230,99,41)" fg:x="34854" fg:w="28"/><text x="58.1557%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (47 samples, 0.08%)</title><rect x="57.9522%" y="149" width="0.0781%" height="15" fill="rgb(253,106,12)" fg:x="34882" fg:w="47"/><text x="58.2022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (189 samples, 0.31%)</title><rect x="58.0303%" y="149" width="0.3140%" height="15" fill="rgb(213,46,41)" fg:x="34929" fg:w="189"/><text x="58.2803%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.13%)</title><rect x="58.2097%" y="133" width="0.1346%" height="15" fill="rgb(215,133,35)" fg:x="35037" fg:w="81"/><text x="58.4597%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="58.3443%" y="149" width="0.0116%" height="15" fill="rgb(213,28,5)" fg:x="35118" fg:w="7"/><text x="58.5943%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (51 samples, 0.08%)</title><rect x="58.3559%" y="149" width="0.0847%" height="15" fill="rgb(215,77,49)" fg:x="35125" fg:w="51"/><text x="58.6059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="58.4506%" y="149" width="0.0282%" height="15" fill="rgb(248,100,22)" fg:x="35182" fg:w="17"/><text x="58.7006%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (136 samples, 0.23%)</title><rect x="58.5503%" y="133" width="0.2259%" height="15" fill="rgb(208,67,9)" fg:x="35242" fg:w="136"/><text x="58.8003%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="58.7762%" y="133" width="0.0233%" height="15" fill="rgb(219,133,21)" fg:x="35378" fg:w="14"/><text x="59.0262%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="58.7995%" y="133" width="0.0183%" height="15" fill="rgb(246,46,29)" fg:x="35392" fg:w="11"/><text x="59.0495%" y="143.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="58.8178%" y="133" width="0.0116%" height="15" fill="rgb(246,185,52)" fg:x="35403" fg:w="7"/><text x="59.0678%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (63 samples, 0.10%)</title><rect x="58.8743%" y="117" width="0.1047%" height="15" fill="rgb(252,136,11)" fg:x="35437" fg:w="63"/><text x="59.1243%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (101 samples, 0.17%)</title><rect x="58.9789%" y="117" width="0.1678%" height="15" fill="rgb(219,138,53)" fg:x="35500" fg:w="101"/><text x="59.2289%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (208 samples, 0.35%)</title><rect x="58.8294%" y="133" width="0.3456%" height="15" fill="rgb(211,51,23)" fg:x="35410" fg:w="208"/><text x="59.0794%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.03%)</title><rect x="59.1467%" y="117" width="0.0282%" height="15" fill="rgb(247,221,28)" fg:x="35601" fg:w="17"/><text x="59.3967%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.03%)</title><rect x="59.1750%" y="133" width="0.0332%" height="15" fill="rgb(251,222,45)" fg:x="35618" fg:w="20"/><text x="59.4250%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="59.4591%" y="101" width="0.0299%" height="15" fill="rgb(217,162,53)" fg:x="35789" fg:w="18"/><text x="59.7091%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (119 samples, 0.20%)</title><rect x="59.5371%" y="85" width="0.1977%" height="15" fill="rgb(229,93,14)" fg:x="35836" fg:w="119"/><text x="59.7871%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="59.6817%" y="69" width="0.0532%" height="15" fill="rgb(209,67,49)" fg:x="35923" fg:w="32"/><text x="59.9317%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (235 samples, 0.39%)</title><rect x="59.3743%" y="117" width="0.3904%" height="15" fill="rgb(213,87,29)" fg:x="35738" fg:w="235"/><text x="59.6243%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (166 samples, 0.28%)</title><rect x="59.4890%" y="101" width="0.2758%" height="15" fill="rgb(205,151,52)" fg:x="35807" fg:w="166"/><text x="59.7390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="59.7348%" y="85" width="0.0299%" height="15" fill="rgb(253,215,39)" fg:x="35955" fg:w="18"/><text x="59.9848%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="59.7647%" y="117" width="0.0415%" height="15" fill="rgb(221,220,41)" fg:x="35973" fg:w="25"/><text x="60.0147%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (809 samples, 1.34%)</title><rect x="58.4788%" y="149" width="1.3441%" height="15" fill="rgb(218,133,21)" fg:x="35199" fg:w="809"/><text x="58.7288%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (370 samples, 0.61%)</title><rect x="59.2082%" y="133" width="0.6147%" height="15" fill="rgb(221,193,43)" fg:x="35638" fg:w="370"/><text x="59.4582%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="59.8063%" y="117" width="0.0166%" height="15" fill="rgb(240,128,52)" fg:x="35998" fg:w="10"/><text x="60.0563%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (47 samples, 0.08%)</title><rect x="59.9774%" y="133" width="0.0781%" height="15" fill="rgb(253,114,12)" fg:x="36101" fg:w="47"/><text x="60.2274%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (96 samples, 0.16%)</title><rect x="60.0555%" y="133" width="0.1595%" height="15" fill="rgb(215,223,47)" fg:x="36148" fg:w="96"/><text x="60.3055%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (270 samples, 0.45%)</title><rect x="59.8229%" y="149" width="0.4486%" height="15" fill="rgb(248,225,23)" fg:x="36008" fg:w="270"/><text x="60.0729%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (34 samples, 0.06%)</title><rect x="60.2150%" y="133" width="0.0565%" height="15" fill="rgb(250,108,0)" fg:x="36244" fg:w="34"/><text x="60.4650%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="60.2715%" y="149" width="0.0266%" height="15" fill="rgb(228,208,7)" fg:x="36278" fg:w="16"/><text x="60.5215%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,991 samples, 3.31%)</title><rect x="57.0285%" y="165" width="3.3078%" height="15" fill="rgb(244,45,10)" fg:x="34326" fg:w="1991"/><text x="57.2785%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.04%)</title><rect x="60.2981%" y="149" width="0.0382%" height="15" fill="rgb(207,125,25)" fg:x="36294" fg:w="23"/><text x="60.5481%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10 samples, 0.02%)</title><rect x="60.3363%" y="165" width="0.0166%" height="15" fill="rgb(210,195,18)" fg:x="36317" fg:w="10"/><text x="60.5863%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (23 samples, 0.04%)</title><rect x="60.3529%" y="165" width="0.0382%" height="15" fill="rgb(249,80,12)" fg:x="36327" fg:w="23"/><text x="60.6029%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (26 samples, 0.04%)</title><rect x="60.3911%" y="165" width="0.0432%" height="15" fill="rgb(221,65,9)" fg:x="36350" fg:w="26"/><text x="60.6411%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (24 samples, 0.04%)</title><rect x="60.4359%" y="165" width="0.0399%" height="15" fill="rgb(235,49,36)" fg:x="36377" fg:w="24"/><text x="60.6859%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.03%)</title><rect x="60.4758%" y="165" width="0.0332%" height="15" fill="rgb(225,32,20)" fg:x="36401" fg:w="20"/><text x="60.7258%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="60.5090%" y="165" width="0.0183%" height="15" fill="rgb(215,141,46)" fg:x="36421" fg:w="11"/><text x="60.7590%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="60.5107%" y="149" width="0.0166%" height="15" fill="rgb(250,160,47)" fg:x="36422" fg:w="10"/><text x="60.7607%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="60.5140%" y="133" width="0.0133%" height="15" fill="rgb(216,222,40)" fg:x="36424" fg:w="8"/><text x="60.7640%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="60.5140%" y="117" width="0.0133%" height="15" fill="rgb(234,217,39)" fg:x="36424" fg:w="8"/><text x="60.7640%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="60.5157%" y="101" width="0.0116%" height="15" fill="rgb(207,178,40)" fg:x="36425" fg:w="7"/><text x="60.7657%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,296 samples, 3.81%)</title><rect x="56.7394%" y="181" width="3.8145%" height="15" fill="rgb(221,136,13)" fg:x="34152" fg:w="2296"/><text x="56.9894%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (16 samples, 0.03%)</title><rect x="60.5273%" y="165" width="0.0266%" height="15" fill="rgb(249,199,10)" fg:x="36432" fg:w="16"/><text x="60.7773%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="60.5788%" y="101" width="0.0116%" height="15" fill="rgb(249,222,13)" fg:x="36463" fg:w="7"/><text x="60.8288%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="60.5672%" y="149" width="0.0282%" height="15" fill="rgb(244,185,38)" fg:x="36456" fg:w="17"/><text x="60.8172%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="60.5672%" y="133" width="0.0282%" height="15" fill="rgb(236,202,9)" fg:x="36456" fg:w="17"/><text x="60.8172%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="60.5772%" y="117" width="0.0183%" height="15" fill="rgb(250,229,37)" fg:x="36462" fg:w="11"/><text x="60.8272%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.04%)</title><rect x="60.5539%" y="181" width="0.0432%" height="15" fill="rgb(206,174,23)" fg:x="36448" fg:w="26"/><text x="60.8039%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="60.5639%" y="165" width="0.0332%" height="15" fill="rgb(211,33,43)" fg:x="36454" fg:w="20"/><text x="60.8139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="60.8530%" y="165" width="0.0249%" height="15" fill="rgb(245,58,50)" fg:x="36628" fg:w="15"/><text x="61.1030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.03%)</title><rect x="60.8779%" y="165" width="0.0349%" height="15" fill="rgb(244,68,36)" fg:x="36643" fg:w="21"/><text x="61.1279%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (20 samples, 0.03%)</title><rect x="60.9128%" y="165" width="0.0332%" height="15" fill="rgb(232,229,15)" fg:x="36664" fg:w="20"/><text x="61.1628%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (25 samples, 0.04%)</title><rect x="60.9460%" y="165" width="0.0415%" height="15" fill="rgb(254,30,23)" fg:x="36684" fg:w="25"/><text x="61.1960%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (14 samples, 0.02%)</title><rect x="60.9875%" y="165" width="0.0233%" height="15" fill="rgb(235,160,14)" fg:x="36709" fg:w="14"/><text x="61.2375%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (16 samples, 0.03%)</title><rect x="61.0108%" y="165" width="0.0266%" height="15" fill="rgb(212,155,44)" fg:x="36723" fg:w="16"/><text x="61.2608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (132 samples, 0.22%)</title><rect x="61.3231%" y="117" width="0.2193%" height="15" fill="rgb(226,2,50)" fg:x="36911" fg:w="132"/><text x="61.5731%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="61.4793%" y="101" width="0.0631%" height="15" fill="rgb(234,177,6)" fg:x="37005" fg:w="38"/><text x="61.7293%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (277 samples, 0.46%)</title><rect x="61.0988%" y="149" width="0.4602%" height="15" fill="rgb(217,24,9)" fg:x="36776" fg:w="277"/><text x="61.3488%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (177 samples, 0.29%)</title><rect x="61.2650%" y="133" width="0.2941%" height="15" fill="rgb(220,13,46)" fg:x="36876" fg:w="177"/><text x="61.5150%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="61.5424%" y="117" width="0.0166%" height="15" fill="rgb(239,221,27)" fg:x="37043" fg:w="10"/><text x="61.7924%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="61.5590%" y="149" width="0.0299%" height="15" fill="rgb(222,198,25)" fg:x="37053" fg:w="18"/><text x="61.8090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.03%)</title><rect x="61.5889%" y="149" width="0.0299%" height="15" fill="rgb(211,99,13)" fg:x="37071" fg:w="18"/><text x="61.8389%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="61.6205%" y="149" width="0.0366%" height="15" fill="rgb(232,111,31)" fg:x="37090" fg:w="22"/><text x="61.8705%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (27 samples, 0.04%)</title><rect x="61.8697%" y="133" width="0.0449%" height="15" fill="rgb(245,82,37)" fg:x="37240" fg:w="27"/><text x="62.1197%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.02%)</title><rect x="62.0275%" y="117" width="0.0199%" height="15" fill="rgb(227,149,46)" fg:x="37335" fg:w="12"/><text x="62.2775%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (25 samples, 0.04%)</title><rect x="62.0475%" y="117" width="0.0415%" height="15" fill="rgb(218,36,50)" fg:x="37347" fg:w="25"/><text x="62.2975%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="62.0890%" y="117" width="0.0532%" height="15" fill="rgb(226,80,48)" fg:x="37372" fg:w="32"/><text x="62.3390%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (140 samples, 0.23%)</title><rect x="62.1488%" y="117" width="0.2326%" height="15" fill="rgb(238,224,15)" fg:x="37408" fg:w="140"/><text x="62.3988%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="62.5758%" y="101" width="0.0299%" height="15" fill="rgb(241,136,10)" fg:x="37665" fg:w="18"/><text x="62.8258%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="62.6057%" y="101" width="0.0449%" height="15" fill="rgb(208,32,45)" fg:x="37683" fg:w="27"/><text x="62.8557%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (107 samples, 0.18%)</title><rect x="62.6506%" y="101" width="0.1778%" height="15" fill="rgb(207,135,9)" fg:x="37710" fg:w="107"/><text x="62.9006%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (85 samples, 0.14%)</title><rect x="63.1290%" y="69" width="0.1412%" height="15" fill="rgb(206,86,44)" fg:x="37998" fg:w="85"/><text x="63.3790%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (254 samples, 0.42%)</title><rect x="62.8682%" y="85" width="0.4220%" height="15" fill="rgb(245,177,15)" fg:x="37841" fg:w="254"/><text x="63.1182%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.02%)</title><rect x="63.2703%" y="69" width="0.0199%" height="15" fill="rgb(206,64,50)" fg:x="38083" fg:w="12"/><text x="63.5203%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (294 samples, 0.49%)</title><rect x="62.8283%" y="101" width="0.4884%" height="15" fill="rgb(234,36,40)" fg:x="37817" fg:w="294"/><text x="63.0783%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="63.2902%" y="85" width="0.0266%" height="15" fill="rgb(213,64,8)" fg:x="38095" fg:w="16"/><text x="63.5402%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (121 samples, 0.20%)</title><rect x="63.3168%" y="101" width="0.2010%" height="15" fill="rgb(210,75,36)" fg:x="38111" fg:w="121"/><text x="63.5668%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="63.5460%" y="85" width="0.0116%" height="15" fill="rgb(229,88,21)" fg:x="38249" fg:w="7"/><text x="63.7960%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.05%)</title><rect x="63.6341%" y="69" width="0.0548%" height="15" fill="rgb(252,204,47)" fg:x="38302" fg:w="33"/><text x="63.8841%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (182 samples, 0.30%)</title><rect x="63.5178%" y="101" width="0.3024%" height="15" fill="rgb(208,77,27)" fg:x="38232" fg:w="182"/><text x="63.7678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (158 samples, 0.26%)</title><rect x="63.5577%" y="85" width="0.2625%" height="15" fill="rgb(221,76,26)" fg:x="38256" fg:w="158"/><text x="63.8077%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (79 samples, 0.13%)</title><rect x="63.6889%" y="69" width="0.1312%" height="15" fill="rgb(225,139,18)" fg:x="38335" fg:w="79"/><text x="63.9389%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (879 samples, 1.46%)</title><rect x="62.3814%" y="117" width="1.4604%" height="15" fill="rgb(230,137,11)" fg:x="37548" fg:w="879"/><text x="62.6314%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="63.8202%" y="101" width="0.0216%" height="15" fill="rgb(212,28,1)" fg:x="38414" fg:w="13"/><text x="64.0702%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,246 samples, 2.07%)</title><rect x="61.9146%" y="133" width="2.0701%" height="15" fill="rgb(248,164,17)" fg:x="37267" fg:w="1246"/><text x="62.1646%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (82 samples, 0.14%)</title><rect x="63.8484%" y="117" width="0.1362%" height="15" fill="rgb(222,171,42)" fg:x="38431" fg:w="82"/><text x="64.0984%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (136 samples, 0.23%)</title><rect x="63.9846%" y="133" width="0.2259%" height="15" fill="rgb(243,84,45)" fg:x="38513" fg:w="136"/><text x="64.2346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.05%)</title><rect x="64.2106%" y="133" width="0.0548%" height="15" fill="rgb(252,49,23)" fg:x="38649" fg:w="33"/><text x="64.4606%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,577 samples, 2.62%)</title><rect x="61.6571%" y="149" width="2.6200%" height="15" fill="rgb(215,19,7)" fg:x="37112" fg:w="1577"/><text x="61.9071%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="64.2654%" y="133" width="0.0116%" height="15" fill="rgb(238,81,41)" fg:x="38682" fg:w="7"/><text x="64.5154%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,219 samples, 3.69%)</title><rect x="60.5971%" y="181" width="3.6866%" height="15" fill="rgb(210,199,37)" fg:x="36474" fg:w="2219"/><text x="60.8471%" y="191.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,954 samples, 3.25%)</title><rect x="61.0374%" y="165" width="3.2463%" height="15" fill="rgb(244,192,49)" fg:x="36739" fg:w="1954"/><text x="61.2874%" y="175.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (87 samples, 0.14%)</title><rect x="64.2837%" y="181" width="0.1445%" height="15" fill="rgb(226,211,11)" fg:x="38693" fg:w="87"/><text x="64.5337%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (69 samples, 0.11%)</title><rect x="64.4282%" y="165" width="0.1146%" height="15" fill="rgb(236,162,54)" fg:x="38780" fg:w="69"/><text x="64.6782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="64.5462%" y="101" width="0.0166%" height="15" fill="rgb(220,229,9)" fg:x="38851" fg:w="10"/><text x="64.7962%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="64.5429%" y="165" width="0.0216%" height="15" fill="rgb(250,87,22)" fg:x="38849" fg:w="13"/><text x="64.7929%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="64.5429%" y="149" width="0.0216%" height="15" fill="rgb(239,43,17)" fg:x="38849" fg:w="13"/><text x="64.7929%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="64.5429%" y="133" width="0.0216%" height="15" fill="rgb(231,177,25)" fg:x="38849" fg:w="13"/><text x="64.7929%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="64.5445%" y="117" width="0.0199%" height="15" fill="rgb(219,179,1)" fg:x="38850" fg:w="12"/><text x="64.7945%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.03%)</title><rect x="64.6774%" y="149" width="0.0299%" height="15" fill="rgb(238,219,53)" fg:x="38930" fg:w="18"/><text x="64.9274%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (20 samples, 0.03%)</title><rect x="64.7073%" y="149" width="0.0332%" height="15" fill="rgb(232,167,36)" fg:x="38948" fg:w="20"/><text x="64.9573%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="64.7489%" y="149" width="0.0216%" height="15" fill="rgb(244,19,51)" fg:x="38973" fg:w="13"/><text x="64.9989%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="65.0047%" y="117" width="0.0382%" height="15" fill="rgb(224,6,22)" fg:x="39127" fg:w="23"/><text x="65.2547%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="65.0429%" y="117" width="0.0399%" height="15" fill="rgb(224,145,5)" fg:x="39150" fg:w="24"/><text x="65.2929%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="65.1343%" y="101" width="0.0166%" height="15" fill="rgb(234,130,49)" fg:x="39205" fg:w="10"/><text x="65.3843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="65.3337%" y="85" width="0.0116%" height="15" fill="rgb(254,6,2)" fg:x="39325" fg:w="7"/><text x="65.5837%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (312 samples, 0.52%)</title><rect x="65.4932%" y="69" width="0.5183%" height="15" fill="rgb(208,96,46)" fg:x="39421" fg:w="312"/><text x="65.7432%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (42 samples, 0.07%)</title><rect x="66.0115%" y="69" width="0.0698%" height="15" fill="rgb(239,3,39)" fg:x="39733" fg:w="42"/><text x="66.2615%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (861 samples, 1.43%)</title><rect x="64.8619%" y="133" width="1.4304%" height="15" fill="rgb(233,210,1)" fg:x="39041" fg:w="861"/><text x="65.1119%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (728 samples, 1.21%)</title><rect x="65.0828%" y="117" width="1.2095%" height="15" fill="rgb(244,137,37)" fg:x="39174" fg:w="728"/><text x="65.3328%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (687 samples, 1.14%)</title><rect x="65.1509%" y="101" width="1.1414%" height="15" fill="rgb(240,136,2)" fg:x="39215" fg:w="687"/><text x="65.4009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (570 samples, 0.95%)</title><rect x="65.3453%" y="85" width="0.9470%" height="15" fill="rgb(239,18,37)" fg:x="39332" fg:w="570"/><text x="65.5953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (127 samples, 0.21%)</title><rect x="66.0813%" y="69" width="0.2110%" height="15" fill="rgb(218,185,22)" fg:x="39775" fg:w="127"/><text x="66.3313%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (23 samples, 0.04%)</title><rect x="66.2923%" y="133" width="0.0382%" height="15" fill="rgb(225,218,4)" fg:x="39902" fg:w="23"/><text x="66.5423%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (53 samples, 0.09%)</title><rect x="66.3305%" y="133" width="0.0881%" height="15" fill="rgb(230,182,32)" fg:x="39925" fg:w="53"/><text x="66.5805%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,116 samples, 1.85%)</title><rect x="64.5761%" y="165" width="1.8541%" height="15" fill="rgb(242,56,43)" fg:x="38869" fg:w="1116"/><text x="64.8261%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (999 samples, 1.66%)</title><rect x="64.7705%" y="149" width="1.6597%" height="15" fill="rgb(233,99,24)" fg:x="38986" fg:w="999"/><text x="65.0205%" y="159.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,227 samples, 2.04%)</title><rect x="64.4282%" y="181" width="2.0385%" height="15" fill="rgb(234,209,42)" fg:x="38780" fg:w="1227"/><text x="64.6782%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (22 samples, 0.04%)</title><rect x="66.4302%" y="165" width="0.0366%" height="15" fill="rgb(227,7,12)" fg:x="39985" fg:w="22"/><text x="66.6802%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (19 samples, 0.03%)</title><rect x="67.6065%" y="149" width="0.0316%" height="15" fill="rgb(245,203,43)" fg:x="40693" fg:w="19"/><text x="67.8565%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (32 samples, 0.05%)</title><rect x="68.0916%" y="133" width="0.0532%" height="15" fill="rgb(238,205,33)" fg:x="40985" fg:w="32"/><text x="68.3416%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (18 samples, 0.03%)</title><rect x="68.3674%" y="117" width="0.0299%" height="15" fill="rgb(231,56,7)" fg:x="41151" fg:w="18"/><text x="68.6174%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,216 samples, 2.02%)</title><rect x="66.4667%" y="181" width="2.0202%" height="15" fill="rgb(244,186,29)" fg:x="40007" fg:w="1216"/><text x="66.7167%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (892 samples, 1.48%)</title><rect x="67.0050%" y="165" width="1.4819%" height="15" fill="rgb(234,111,31)" fg:x="40331" fg:w="892"/><text x="67.2550%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (511 samples, 0.85%)</title><rect x="67.6380%" y="149" width="0.8490%" height="15" fill="rgb(241,149,10)" fg:x="40712" fg:w="511"/><text x="67.8880%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (206 samples, 0.34%)</title><rect x="68.1447%" y="133" width="0.3422%" height="15" fill="rgb(249,206,44)" fg:x="41017" fg:w="206"/><text x="68.3947%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (54 samples, 0.09%)</title><rect x="68.3973%" y="117" width="0.0897%" height="15" fill="rgb(251,153,30)" fg:x="41169" fg:w="54"/><text x="68.6473%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="68.4754%" y="101" width="0.0116%" height="15" fill="rgb(239,152,38)" fg:x="41216" fg:w="7"/><text x="68.7254%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (582 samples, 0.97%)</title><rect x="69.3077%" y="165" width="0.9669%" height="15" fill="rgb(249,139,47)" fg:x="41717" fg:w="582"/><text x="69.5577%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,073 samples, 1.78%)</title><rect x="70.2746%" y="165" width="1.7827%" height="15" fill="rgb(244,64,35)" fg:x="42299" fg:w="1073"/><text x="70.5246%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,606 samples, 4.33%)</title><rect x="68.4870%" y="181" width="4.3296%" height="15" fill="rgb(216,46,15)" fg:x="41223" fg:w="2606"/><text x="68.7370%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (457 samples, 0.76%)</title><rect x="72.0573%" y="165" width="0.7592%" height="15" fill="rgb(250,74,19)" fg:x="43372" fg:w="457"/><text x="72.3073%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (37 samples, 0.06%)</title><rect x="72.8165%" y="181" width="0.0615%" height="15" fill="rgb(249,42,33)" fg:x="43829" fg:w="37"/><text x="73.0665%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (11,331 samples, 18.83%)</title><rect x="54.5181%" y="197" width="18.8251%" height="15" fill="rgb(242,149,17)" fg:x="32815" fg:w="11331"/><text x="54.7681%" y="207.50">rust_qecp`rust_qecp::union_fi..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (280 samples, 0.47%)</title><rect x="72.8780%" y="181" width="0.4652%" height="15" fill="rgb(244,29,21)" fg:x="43866" fg:w="280"/><text x="73.1280%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (279 samples, 0.46%)</title><rect x="77.2508%" y="181" width="0.4635%" height="15" fill="rgb(220,130,37)" fg:x="46498" fg:w="279"/><text x="77.5008%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="77.8804%" y="165" width="0.0183%" height="15" fill="rgb(211,67,2)" fg:x="46877" fg:w="11"/><text x="78.1304%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (108 samples, 0.18%)</title><rect x="77.9784%" y="149" width="0.1794%" height="15" fill="rgb(235,68,52)" fg:x="46936" fg:w="108"/><text x="78.2284%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="78.1030%" y="133" width="0.0548%" height="15" fill="rgb(246,142,3)" fg:x="47011" fg:w="33"/><text x="78.3530%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (172 samples, 0.29%)</title><rect x="77.8987%" y="165" width="0.2858%" height="15" fill="rgb(241,25,7)" fg:x="46888" fg:w="172"/><text x="78.1487%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="78.1579%" y="149" width="0.0266%" height="15" fill="rgb(242,119,39)" fg:x="47044" fg:w="16"/><text x="78.4079%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (289 samples, 0.48%)</title><rect x="77.7143%" y="181" width="0.4801%" height="15" fill="rgb(241,98,45)" fg:x="46777" fg:w="289"/><text x="77.9643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="78.1944%" y="181" width="0.0299%" height="15" fill="rgb(254,28,30)" fg:x="47066" fg:w="18"/><text x="78.4444%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (167 samples, 0.28%)</title><rect x="78.5865%" y="165" width="0.2775%" height="15" fill="rgb(241,142,54)" fg:x="47302" fg:w="167"/><text x="78.8365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (10 samples, 0.02%)</title><rect x="78.8673%" y="165" width="0.0166%" height="15" fill="rgb(222,85,15)" fg:x="47471" fg:w="10"/><text x="79.1173%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (428 samples, 0.71%)</title><rect x="78.2243%" y="181" width="0.7111%" height="15" fill="rgb(210,85,47)" fg:x="47084" fg:w="428"/><text x="78.4743%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.05%)</title><rect x="78.8839%" y="165" width="0.0515%" height="15" fill="rgb(224,206,25)" fg:x="47481" fg:w="31"/><text x="79.1339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (28 samples, 0.05%)</title><rect x="78.8889%" y="149" width="0.0465%" height="15" fill="rgb(243,201,19)" fg:x="47484" fg:w="28"/><text x="79.1389%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="79.0018%" y="165" width="0.0150%" height="15" fill="rgb(236,59,4)" fg:x="47552" fg:w="9"/><text x="79.2518%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (64 samples, 0.11%)</title><rect x="78.9354%" y="181" width="0.1063%" height="15" fill="rgb(254,179,45)" fg:x="47512" fg:w="64"/><text x="79.1854%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (12 samples, 0.02%)</title><rect x="79.0218%" y="165" width="0.0199%" height="15" fill="rgb(226,14,10)" fg:x="47564" fg:w="12"/><text x="79.2718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="79.1215%" y="149" width="0.0216%" height="15" fill="rgb(244,27,41)" fg:x="47624" fg:w="13"/><text x="79.3715%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (63 samples, 0.10%)</title><rect x="79.0417%" y="181" width="0.1047%" height="15" fill="rgb(235,35,32)" fg:x="47576" fg:w="63"/><text x="79.2917%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (51 samples, 0.08%)</title><rect x="79.0617%" y="165" width="0.0847%" height="15" fill="rgb(218,68,31)" fg:x="47588" fg:w="51"/><text x="79.3117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.05%)</title><rect x="79.1464%" y="181" width="0.0532%" height="15" fill="rgb(207,120,37)" fg:x="47639" fg:w="32"/><text x="79.3964%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (114 samples, 0.19%)</title><rect x="79.1995%" y="181" width="0.1894%" height="15" fill="rgb(227,98,0)" fg:x="47671" fg:w="114"/><text x="79.4495%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (36 samples, 0.06%)</title><rect x="79.3989%" y="181" width="0.0598%" height="15" fill="rgb(207,7,3)" fg:x="47791" fg:w="36"/><text x="79.6489%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (71 samples, 0.12%)</title><rect x="79.4720%" y="181" width="0.1180%" height="15" fill="rgb(206,98,19)" fg:x="47835" fg:w="71"/><text x="79.7220%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="79.6033%" y="149" width="0.0116%" height="15" fill="rgb(217,5,26)" fg:x="47914" fg:w="7"/><text x="79.8533%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="79.6149%" y="149" width="0.0199%" height="15" fill="rgb(235,190,38)" fg:x="47921" fg:w="12"/><text x="79.8649%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.05%)</title><rect x="79.5916%" y="165" width="0.0482%" height="15" fill="rgb(247,86,24)" fg:x="47907" fg:w="29"/><text x="79.8416%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.06%)</title><rect x="79.5900%" y="181" width="0.0598%" height="15" fill="rgb(205,101,16)" fg:x="47906" fg:w="36"/><text x="79.8400%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.04%)</title><rect x="79.6498%" y="181" width="0.0366%" height="15" fill="rgb(246,168,33)" fg:x="47942" fg:w="22"/><text x="79.8998%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (894 samples, 1.49%)</title><rect x="79.6863%" y="181" width="1.4853%" height="15" fill="rgb(231,114,1)" fg:x="47964" fg:w="894"/><text x="79.9363%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="81.1782%" y="181" width="0.0183%" height="15" fill="rgb(207,184,53)" fg:x="48862" fg:w="11"/><text x="81.4282%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (21 samples, 0.03%)</title><rect x="81.1965%" y="181" width="0.0349%" height="15" fill="rgb(224,95,51)" fg:x="48873" fg:w="21"/><text x="81.4465%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="81.2314%" y="181" width="0.0150%" height="15" fill="rgb(212,188,45)" fg:x="48894" fg:w="9"/><text x="81.4814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="81.3029%" y="117" width="0.0150%" height="15" fill="rgb(223,154,38)" fg:x="48937" fg:w="9"/><text x="81.5529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="81.3377%" y="85" width="0.0183%" height="15" fill="rgb(251,22,52)" fg:x="48958" fg:w="11"/><text x="81.5877%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="81.3427%" y="69" width="0.0133%" height="15" fill="rgb(229,209,22)" fg:x="48961" fg:w="8"/><text x="81.5927%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="81.3344%" y="101" width="0.0233%" height="15" fill="rgb(234,138,34)" fg:x="48956" fg:w="14"/><text x="81.5844%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (30 samples, 0.05%)</title><rect x="81.3178%" y="117" width="0.0498%" height="15" fill="rgb(212,95,11)" fg:x="48946" fg:w="30"/><text x="81.5678%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (52 samples, 0.09%)</title><rect x="81.2929%" y="133" width="0.0864%" height="15" fill="rgb(240,179,47)" fg:x="48931" fg:w="52"/><text x="81.5429%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="81.3676%" y="117" width="0.0116%" height="15" fill="rgb(240,163,11)" fg:x="48976" fg:w="7"/><text x="81.6176%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="81.3793%" y="133" width="0.0183%" height="15" fill="rgb(236,37,12)" fg:x="48983" fg:w="11"/><text x="81.6293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (74 samples, 0.12%)</title><rect x="81.2763%" y="149" width="0.1229%" height="15" fill="rgb(232,164,16)" fg:x="48921" fg:w="74"/><text x="81.5263%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (93 samples, 0.15%)</title><rect x="81.2464%" y="181" width="0.1545%" height="15" fill="rgb(244,205,15)" fg:x="48903" fg:w="93"/><text x="81.4964%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (79 samples, 0.13%)</title><rect x="81.2696%" y="165" width="0.1312%" height="15" fill="rgb(223,117,47)" fg:x="48917" fg:w="79"/><text x="81.5196%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,544 samples, 2.57%)</title><rect x="81.4025%" y="181" width="2.5652%" height="15" fill="rgb(244,107,35)" fg:x="48997" fg:w="1544"/><text x="81.6525%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (219 samples, 0.36%)</title><rect x="83.9677%" y="181" width="0.3638%" height="15" fill="rgb(205,140,8)" fg:x="50541" fg:w="219"/><text x="84.2177%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (53 samples, 0.09%)</title><rect x="84.3315%" y="181" width="0.0881%" height="15" fill="rgb(228,84,46)" fg:x="50760" fg:w="53"/><text x="84.5815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (120 samples, 0.20%)</title><rect x="84.7602%" y="133" width="0.1994%" height="15" fill="rgb(254,188,9)" fg:x="51018" fg:w="120"/><text x="85.0102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (66 samples, 0.11%)</title><rect x="84.8499%" y="117" width="0.1097%" height="15" fill="rgb(206,112,54)" fg:x="51072" fg:w="66"/><text x="85.0999%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (214 samples, 0.36%)</title><rect x="84.6090%" y="149" width="0.3555%" height="15" fill="rgb(216,84,49)" fg:x="50927" fg:w="214"/><text x="84.8590%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.04%)</title><rect x="84.9845%" y="133" width="0.0366%" height="15" fill="rgb(214,194,35)" fg:x="51153" fg:w="22"/><text x="85.2345%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.02%)</title><rect x="84.9961%" y="117" width="0.0249%" height="15" fill="rgb(249,28,3)" fg:x="51160" fg:w="15"/><text x="85.2461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="85.0393%" y="117" width="0.0266%" height="15" fill="rgb(222,56,52)" fg:x="51186" fg:w="16"/><text x="85.2893%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (104 samples, 0.17%)</title><rect x="84.9662%" y="149" width="0.1728%" height="15" fill="rgb(245,217,50)" fg:x="51142" fg:w="104"/><text x="85.2162%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 0.11%)</title><rect x="85.0243%" y="133" width="0.1146%" height="15" fill="rgb(213,201,24)" fg:x="51177" fg:w="69"/><text x="85.2743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (44 samples, 0.07%)</title><rect x="85.0659%" y="117" width="0.0731%" height="15" fill="rgb(248,116,28)" fg:x="51202" fg:w="44"/><text x="85.3159%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (380 samples, 0.63%)</title><rect x="84.5126%" y="165" width="0.6313%" height="15" fill="rgb(219,72,43)" fg:x="50869" fg:w="380"/><text x="84.7626%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="85.1440%" y="165" width="0.0299%" height="15" fill="rgb(209,138,14)" fg:x="51249" fg:w="18"/><text x="85.3940%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (462 samples, 0.77%)</title><rect x="84.4196%" y="181" width="0.7676%" height="15" fill="rgb(222,18,33)" fg:x="50813" fg:w="462"/><text x="84.6696%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (19 samples, 0.03%)</title><rect x="85.1872%" y="181" width="0.0316%" height="15" fill="rgb(213,199,7)" fg:x="51275" fg:w="19"/><text x="85.4372%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (11 samples, 0.02%)</title><rect x="85.2187%" y="181" width="0.0183%" height="15" fill="rgb(250,110,10)" fg:x="51294" fg:w="11"/><text x="85.4687%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,166 samples, 11.91%)</title><rect x="73.3432%" y="197" width="11.9054%" height="15" fill="rgb(248,123,6)" fg:x="44146" fg:w="7166"/><text x="73.5932%" y="207.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`std::time::Instant::elapsed (7 samples, 0.01%)</title><rect x="85.2370%" y="181" width="0.0116%" height="15" fill="rgb(206,91,31)" fg:x="51305" fg:w="7"/><text x="85.4870%" y="191.50"></text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (23 samples, 0.04%)</title><rect x="85.2486%" y="197" width="0.0382%" height="15" fill="rgb(211,154,13)" fg:x="51312" fg:w="23"/><text x="85.4986%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (51,199 samples, 85.06%)</title><rect x="0.2409%" y="229" width="85.0609%" height="15" fill="rgb(225,148,7)" fg:x="145" fg:w="51199"/><text x="0.4909%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,624 samples, 82.44%)</title><rect x="2.8576%" y="213" width="82.4442%" height="15" fill="rgb(220,160,43)" fg:x="1720" fg:w="49624"/><text x="3.1076%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,071 samples, 1.78%)</title><rect x="85.3018%" y="229" width="1.7793%" height="15" fill="rgb(213,52,39)" fg:x="51344" fg:w="1071"/><text x="85.5518%" y="239.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="87.3702%" y="181" width="0.0150%" height="15" fill="rgb(243,137,7)" fg:x="52589" fg:w="9"/><text x="87.6202%" y="191.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="87.3685%" y="213" width="0.0183%" height="15" fill="rgb(230,79,13)" fg:x="52588" fg:w="11"/><text x="87.6185%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.02%)</title><rect x="87.3702%" y="197" width="0.0166%" height="15" fill="rgb(247,105,23)" fg:x="52589" fg:w="10"/><text x="87.6202%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (290 samples, 0.48%)</title><rect x="87.0811%" y="229" width="0.4818%" height="15" fill="rgb(223,179,41)" fg:x="52415" fg:w="290"/><text x="87.3311%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (106 samples, 0.18%)</title><rect x="87.3868%" y="213" width="0.1761%" height="15" fill="rgb(218,9,34)" fg:x="52599" fg:w="106"/><text x="87.6368%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,347 samples, 5.56%)</title><rect x="87.5629%" y="229" width="5.5606%" height="15" fill="rgb(222,106,8)" fg:x="52705" fg:w="3347"/><text x="87.8129%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (135 samples, 0.22%)</title><rect x="93.1435%" y="213" width="0.2243%" height="15" fill="rgb(211,220,0)" fg:x="56064" fg:w="135"/><text x="93.3935%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (321 samples, 0.53%)</title><rect x="93.1236%" y="229" width="0.5333%" height="15" fill="rgb(229,52,16)" fg:x="56052" fg:w="321"/><text x="93.3736%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (174 samples, 0.29%)</title><rect x="93.3678%" y="213" width="0.2891%" height="15" fill="rgb(212,155,18)" fg:x="56199" fg:w="174"/><text x="93.6178%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (10 samples, 0.02%)</title><rect x="93.6402%" y="197" width="0.0166%" height="15" fill="rgb(242,21,14)" fg:x="56363" fg:w="10"/><text x="93.8902%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (59 samples, 0.10%)</title><rect x="93.6569%" y="229" width="0.0980%" height="15" fill="rgb(222,19,48)" fg:x="56373" fg:w="59"/><text x="93.9069%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,755 samples, 6.24%)</title><rect x="93.7582%" y="229" width="6.2385%" height="15" fill="rgb(232,45,27)" fg:x="56434" fg:w="3755"/><text x="94.0082%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,668 samples, 4.43%)</title><rect x="95.5641%" y="213" width="4.4326%" height="15" fill="rgb(249,103,42)" fg:x="57521" fg:w="2668"/><text x="95.8141%" y="223.50">rust_..</text></g><g><title>all (60,191 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(246,81,33)" fg:x="0" fg:w="60191"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,120 samples, 99.88%)</title><rect x="0.1180%" y="309" width="99.8820%" height="15" fill="rgb(252,33,42)" fg:x="71" fg:w="60120"/><text x="0.3680%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,120 samples, 99.88%)</title><rect x="0.1180%" y="293" width="99.8820%" height="15" fill="rgb(209,212,41)" fg:x="71" fg:w="60120"/><text x="0.3680%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,120 samples, 99.88%)</title><rect x="0.1180%" y="277" width="99.8820%" height="15" fill="rgb(207,154,6)" fg:x="71" fg:w="60120"/><text x="0.3680%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,120 samples, 99.88%)</title><rect x="0.1180%" y="261" width="99.8820%" height="15" fill="rgb(223,64,47)" fg:x="71" fg:w="60120"/><text x="0.3680%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,117 samples, 99.88%)</title><rect x="0.1229%" y="245" width="99.8771%" height="15" fill="rgb(211,161,38)" fg:x="74" fg:w="60117"/><text x="0.3729%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>