<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="69175"><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.01%)</title><rect x="0.0304%" y="133" width="0.0145%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="10"/><text x="0.2804%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.0448%" y="133" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="9"/><text x="0.2948%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="0.0145%" y="149" width="0.0492%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="34"/><text x="0.2645%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (50 samples, 0.07%)</title><rect x="0.0925%" y="53" width="0.0723%" height="15" fill="rgb(248,212,6)" fg:x="64" fg:w="50"/><text x="0.3425%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (9 samples, 0.01%)</title><rect x="0.1648%" y="53" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="114" fg:w="9"/><text x="0.4148%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="0.1648%" y="37" width="0.0130%" height="15" fill="rgb(232,128,0)" fg:x="114" fg:w="9"/><text x="0.4148%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (65 samples, 0.09%)</title><rect x="0.0925%" y="69" width="0.0940%" height="15" fill="rgb(207,160,47)" fg:x="64" fg:w="65"/><text x="0.3425%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.01%)</title><rect x="0.1865%" y="69" width="0.0130%" height="15" fill="rgb(228,23,34)" fg:x="129" fg:w="9"/><text x="0.4365%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.01%)</title><rect x="0.1865%" y="53" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="129" fg:w="9"/><text x="0.4365%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.07%)</title><rect x="0.2009%" y="69" width="0.0737%" height="15" fill="rgb(220,122,19)" fg:x="139" fg:w="51"/><text x="0.4509%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (134 samples, 0.19%)</title><rect x="0.0896%" y="149" width="0.1937%" height="15" fill="rgb(250,228,42)" fg:x="62" fg:w="134"/><text x="0.3396%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (134 samples, 0.19%)</title><rect x="0.0896%" y="133" width="0.1937%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="134"/><text x="0.3396%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.19%)</title><rect x="0.0896%" y="117" width="0.1937%" height="15" fill="rgb(216,20,37)" fg:x="62" fg:w="134"/><text x="0.3396%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.19%)</title><rect x="0.0896%" y="101" width="0.1937%" height="15" fill="rgb(206,188,39)" fg:x="62" fg:w="134"/><text x="0.3396%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (133 samples, 0.19%)</title><rect x="0.0911%" y="85" width="0.1923%" height="15" fill="rgb(217,207,13)" fg:x="63" fg:w="133"/><text x="0.3411%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="0.2877%" y="69" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="199" fg:w="9"/><text x="0.5377%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="0.2877%" y="85" width="0.0188%" height="15" fill="rgb(225,20,46)" fg:x="199" fg:w="13"/><text x="0.5377%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (25 samples, 0.04%)</title><rect x="0.2833%" y="149" width="0.0361%" height="15" fill="rgb(210,31,41)" fg:x="196" fg:w="25"/><text x="0.5333%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="0.2833%" y="133" width="0.0361%" height="15" fill="rgb(221,200,47)" fg:x="196" fg:w="25"/><text x="0.5333%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="0.2833%" y="117" width="0.0361%" height="15" fill="rgb(226,26,5)" fg:x="196" fg:w="25"/><text x="0.5333%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (22 samples, 0.03%)</title><rect x="0.2877%" y="101" width="0.0318%" height="15" fill="rgb(249,33,26)" fg:x="199" fg:w="22"/><text x="0.5377%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (8 samples, 0.01%)</title><rect x="0.3079%" y="85" width="0.0116%" height="15" fill="rgb(235,183,28)" fg:x="213" fg:w="8"/><text x="0.5579%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (497 samples, 0.72%)</title><rect x="0.3195%" y="149" width="0.7185%" height="15" fill="rgb(221,5,38)" fg:x="221" fg:w="497"/><text x="0.5695%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (207 samples, 0.30%)</title><rect x="1.0379%" y="149" width="0.2992%" height="15" fill="rgb(247,18,42)" fg:x="718" fg:w="207"/><text x="1.2879%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="1.3372%" y="149" width="0.0101%" height="15" fill="rgb(241,131,45)" fg:x="925" fg:w="7"/><text x="1.5872%" y="159.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (9 samples, 0.01%)</title><rect x="1.3473%" y="149" width="0.0130%" height="15" fill="rgb(249,31,29)" fg:x="932" fg:w="9"/><text x="1.5973%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.10%)</title><rect x="6.0108%" y="133" width="0.0997%" height="15" fill="rgb(225,111,53)" fg:x="4158" fg:w="69"/><text x="6.2608%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.11%)</title><rect x="6.1106%" y="133" width="0.1055%" height="15" fill="rgb(238,160,17)" fg:x="4227" fg:w="73"/><text x="6.3606%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (58 samples, 0.08%)</title><rect x="6.2161%" y="133" width="0.0838%" height="15" fill="rgb(214,148,48)" fg:x="4300" fg:w="58"/><text x="6.4661%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (473 samples, 0.68%)</title><rect x="6.3000%" y="133" width="0.6838%" height="15" fill="rgb(232,36,49)" fg:x="4358" fg:w="473"/><text x="6.5500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="6.9881%" y="69" width="0.0101%" height="15" fill="rgb(209,103,24)" fg:x="4834" fg:w="7"/><text x="7.2381%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.02%)</title><rect x="6.9866%" y="85" width="0.0231%" height="15" fill="rgb(229,88,8)" fg:x="4833" fg:w="16"/><text x="7.2366%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="6.9982%" y="69" width="0.0116%" height="15" fill="rgb(213,181,19)" fg:x="4841" fg:w="8"/><text x="7.2482%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="6.9866%" y="101" width="0.0260%" height="15" fill="rgb(254,191,54)" fg:x="4833" fg:w="18"/><text x="7.2366%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (21 samples, 0.03%)</title><rect x="6.9837%" y="133" width="0.0304%" height="15" fill="rgb(241,83,37)" fg:x="4831" fg:w="21"/><text x="7.2337%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="6.9852%" y="117" width="0.0289%" height="15" fill="rgb(233,36,39)" fg:x="4832" fg:w="20"/><text x="7.2352%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (99 samples, 0.14%)</title><rect x="7.6155%" y="117" width="0.1431%" height="15" fill="rgb(226,3,54)" fg:x="5268" fg:w="99"/><text x="7.8655%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="7.7976%" y="101" width="0.0101%" height="15" fill="rgb(245,192,40)" fg:x="5394" fg:w="7"/><text x="8.0476%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (684 samples, 0.99%)</title><rect x="7.0141%" y="133" width="0.9888%" height="15" fill="rgb(238,167,29)" fg:x="4852" fg:w="684"/><text x="7.2641%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (167 samples, 0.24%)</title><rect x="7.7615%" y="117" width="0.2414%" height="15" fill="rgb(232,182,51)" fg:x="5369" fg:w="167"/><text x="8.0115%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (135 samples, 0.20%)</title><rect x="7.8077%" y="101" width="0.1952%" height="15" fill="rgb(231,60,39)" fg:x="5401" fg:w="135"/><text x="8.0577%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="8.0029%" y="133" width="0.0101%" height="15" fill="rgb(208,69,12)" fg:x="5536" fg:w="7"/><text x="8.2529%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (12 samples, 0.02%)</title><rect x="8.0130%" y="133" width="0.0173%" height="15" fill="rgb(235,93,37)" fg:x="5543" fg:w="12"/><text x="8.2630%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (154 samples, 0.22%)</title><rect x="10.8450%" y="117" width="0.2226%" height="15" fill="rgb(213,116,39)" fg:x="7502" fg:w="154"/><text x="11.0950%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (445 samples, 0.64%)</title><rect x="11.0690%" y="117" width="0.6433%" height="15" fill="rgb(222,207,29)" fg:x="7657" fg:w="445"/><text x="11.3190%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (22 samples, 0.03%)</title><rect x="11.7542%" y="101" width="0.0318%" height="15" fill="rgb(206,96,30)" fg:x="8131" fg:w="22"/><text x="12.0042%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,697 samples, 3.90%)</title><rect x="8.0304%" y="133" width="3.8988%" height="15" fill="rgb(218,138,4)" fg:x="5555" fg:w="2697"/><text x="8.2804%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (150 samples, 0.22%)</title><rect x="11.7123%" y="117" width="0.2168%" height="15" fill="rgb(250,191,14)" fg:x="8102" fg:w="150"/><text x="11.9623%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (99 samples, 0.14%)</title><rect x="11.7860%" y="101" width="0.1431%" height="15" fill="rgb(239,60,40)" fg:x="8153" fg:w="99"/><text x="12.0360%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,312 samples, 10.57%)</title><rect x="1.3603%" y="149" width="10.5703%" height="15" fill="rgb(206,27,48)" fg:x="941" fg:w="7312"/><text x="1.6103%" y="159.50">rust_qecp`rust_..</text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="11.9480%" y="133" width="0.0173%" height="15" fill="rgb(225,35,8)" fg:x="8265" fg:w="12"/><text x="12.1980%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.17%)</title><rect x="11.9740%" y="133" width="0.1691%" height="15" fill="rgb(250,213,24)" fg:x="8283" fg:w="117"/><text x="12.2240%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="12.4510%" y="117" width="0.0188%" height="15" fill="rgb(247,123,22)" fg:x="8613" fg:w="13"/><text x="12.7010%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.03%)</title><rect x="12.4785%" y="117" width="0.0318%" height="15" fill="rgb(231,138,38)" fg:x="8632" fg:w="22"/><text x="12.7285%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="12.5435%" y="53" width="0.0188%" height="15" fill="rgb(231,145,46)" fg:x="8677" fg:w="13"/><text x="12.7935%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="12.5291%" y="85" width="0.0361%" height="15" fill="rgb(251,118,11)" fg:x="8667" fg:w="25"/><text x="12.7791%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="12.5378%" y="69" width="0.0275%" height="15" fill="rgb(217,147,25)" fg:x="8673" fg:w="19"/><text x="12.7878%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 0.06%)</title><rect x="12.5103%" y="117" width="0.0622%" height="15" fill="rgb(247,81,37)" fg:x="8654" fg:w="43"/><text x="12.7603%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="12.5248%" y="101" width="0.0477%" height="15" fill="rgb(209,12,38)" fg:x="8664" fg:w="33"/><text x="12.7748%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="12.5739%" y="117" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="8698" fg:w="9"/><text x="12.8239%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="12.5869%" y="117" width="0.0173%" height="15" fill="rgb(248,47,43)" fg:x="8707" fg:w="12"/><text x="12.8369%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="12.5927%" y="101" width="0.0116%" height="15" fill="rgb(221,10,30)" fg:x="8711" fg:w="8"/><text x="12.8427%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (21 samples, 0.03%)</title><rect x="12.6043%" y="117" width="0.0304%" height="15" fill="rgb(210,229,1)" fg:x="8719" fg:w="21"/><text x="12.8543%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (572 samples, 0.83%)</title><rect x="12.1590%" y="133" width="0.8269%" height="15" fill="rgb(222,148,37)" fg:x="8411" fg:w="572"/><text x="12.4090%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (243 samples, 0.35%)</title><rect x="12.6346%" y="117" width="0.3513%" height="15" fill="rgb(234,67,33)" fg:x="8740" fg:w="243"/><text x="12.8846%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (745 samples, 1.08%)</title><rect x="11.9306%" y="149" width="1.0770%" height="15" fill="rgb(247,98,35)" fg:x="8253" fg:w="745"/><text x="12.1806%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (12 samples, 0.02%)</title><rect x="12.9902%" y="133" width="0.0173%" height="15" fill="rgb(247,138,52)" fg:x="8986" fg:w="12"/><text x="13.2402%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (8 samples, 0.01%)</title><rect x="13.0090%" y="149" width="0.0116%" height="15" fill="rgb(213,79,30)" fg:x="8999" fg:w="8"/><text x="13.2590%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (7 samples, 0.01%)</title><rect x="13.0105%" y="133" width="0.0101%" height="15" fill="rgb(246,177,23)" fg:x="9000" fg:w="7"/><text x="13.2605%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="13.0105%" y="117" width="0.0101%" height="15" fill="rgb(230,62,27)" fg:x="9000" fg:w="7"/><text x="13.2605%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (25 samples, 0.04%)</title><rect x="13.0206%" y="149" width="0.0361%" height="15" fill="rgb(216,154,8)" fg:x="9007" fg:w="25"/><text x="13.2706%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (20 samples, 0.03%)</title><rect x="13.0278%" y="133" width="0.0289%" height="15" fill="rgb(244,35,45)" fg:x="9012" fg:w="20"/><text x="13.2778%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.01%)</title><rect x="13.0423%" y="117" width="0.0145%" height="15" fill="rgb(251,115,12)" fg:x="9022" fg:w="10"/><text x="13.2923%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="13.0452%" y="101" width="0.0116%" height="15" fill="rgb(240,54,50)" fg:x="9024" fg:w="8"/><text x="13.2952%" y="111.50"></text></g><g><title>dyld`start (9,034 samples, 13.06%)</title><rect x="0.0000%" y="373" width="13.0596%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="9034"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>rust_qecp`main (9,030 samples, 13.05%)</title><rect x="0.0058%" y="357" width="13.0538%" height="15" fill="rgb(207,117,47)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="367.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (9,030 samples, 13.05%)</title><rect x="0.0058%" y="341" width="13.0538%" height="15" fill="rgb(249,43,39)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="351.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (9,030 samples, 13.05%)</title><rect x="0.0058%" y="325" width="13.0538%" height="15" fill="rgb(209,38,44)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="335.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (9,030 samples, 13.05%)</title><rect x="0.0058%" y="309" width="13.0538%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="319.50">rust_qecp`std::sys_c..</text></g><g><title>rust_qecp`rust_qecp::main (9,030 samples, 13.05%)</title><rect x="0.0058%" y="293" width="13.0538%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="303.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (9,030 samples, 13.05%)</title><rect x="0.0058%" y="277" width="13.0538%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="287.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,030 samples, 13.05%)</title><rect x="0.0058%" y="261" width="13.0538%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="271.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (9,030 samples, 13.05%)</title><rect x="0.0058%" y="245" width="13.0538%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="255.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,030 samples, 13.05%)</title><rect x="0.0058%" y="229" width="13.0538%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="239.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,030 samples, 13.05%)</title><rect x="0.0058%" y="213" width="13.0538%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="223.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,030 samples, 13.05%)</title><rect x="0.0058%" y="197" width="13.0538%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="207.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (9,030 samples, 13.05%)</title><rect x="0.0058%" y="181" width="13.0538%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="9030"/><text x="0.2558%" y="191.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (9,029 samples, 13.05%)</title><rect x="0.0072%" y="165" width="13.0524%" height="15" fill="rgb(240,68,47)" fg:x="5" fg:w="9029"/><text x="0.2572%" y="175.50">rust_qecp`rust_qecp:..</text></g><g><title>libsystem_kernel.dylib`__exit (12 samples, 0.02%)</title><rect x="13.0596%" y="373" width="0.0173%" height="15" fill="rgb(210,16,53)" fg:x="9034" fg:w="12"/><text x="13.3096%" y="383.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (8 samples, 0.01%)</title><rect x="13.1030%" y="293" width="0.0116%" height="15" fill="rgb(235,124,12)" fg:x="9064" fg:w="8"/><text x="13.3530%" y="303.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (8 samples, 0.01%)</title><rect x="13.1030%" y="277" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="9064" fg:w="8"/><text x="13.3530%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="13.1030%" y="261" width="0.0116%" height="15" fill="rgb(250,166,2)" fg:x="9064" fg:w="8"/><text x="13.3530%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="13.1030%" y="245" width="0.0116%" height="15" fill="rgb(242,216,29)" fg:x="9064" fg:w="8"/><text x="13.3530%" y="255.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (7 samples, 0.01%)</title><rect x="13.1044%" y="229" width="0.0101%" height="15" fill="rgb(230,116,27)" fg:x="9065" fg:w="7"/><text x="13.3544%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="13.1290%" y="277" width="0.0188%" height="15" fill="rgb(228,99,48)" fg:x="9082" fg:w="13"/><text x="13.3790%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (44 samples, 0.06%)</title><rect x="13.1579%" y="277" width="0.0636%" height="15" fill="rgb(253,11,6)" fg:x="9102" fg:w="44"/><text x="13.4079%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (320 samples, 0.46%)</title><rect x="13.2215%" y="277" width="0.4626%" height="15" fill="rgb(247,143,39)" fg:x="9146" fg:w="320"/><text x="13.4715%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (7 samples, 0.01%)</title><rect x="13.6841%" y="277" width="0.0101%" height="15" fill="rgb(236,97,10)" fg:x="9466" fg:w="7"/><text x="13.9341%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="13.7015%" y="277" width="0.0101%" height="15" fill="rgb(233,208,19)" fg:x="9478" fg:w="7"/><text x="13.9515%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="13.7015%" y="261" width="0.0101%" height="15" fill="rgb(216,164,2)" fg:x="9478" fg:w="7"/><text x="13.9515%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (426 samples, 0.62%)</title><rect x="13.7130%" y="277" width="0.6158%" height="15" fill="rgb(220,129,5)" fg:x="9486" fg:w="426"/><text x="13.9630%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (36 samples, 0.05%)</title><rect x="14.3289%" y="277" width="0.0520%" height="15" fill="rgb(242,17,10)" fg:x="9912" fg:w="36"/><text x="14.5789%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (32 samples, 0.05%)</title><rect x="14.3809%" y="277" width="0.0463%" height="15" fill="rgb(242,107,0)" fg:x="9948" fg:w="32"/><text x="14.6309%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="14.7770%" y="261" width="0.0145%" height="15" fill="rgb(251,28,31)" fg:x="10222" fg:w="10"/><text x="15.0270%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="14.7785%" y="245" width="0.0130%" height="15" fill="rgb(233,223,10)" fg:x="10223" fg:w="9"/><text x="15.0285%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="14.7814%" y="229" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="10225" fg:w="7"/><text x="15.0314%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.01%)</title><rect x="14.8001%" y="229" width="0.0130%" height="15" fill="rgb(232,23,21)" fg:x="10238" fg:w="9"/><text x="15.0501%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.02%)</title><rect x="14.7944%" y="261" width="0.0231%" height="15" fill="rgb(244,5,23)" fg:x="10234" fg:w="16"/><text x="15.0444%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="14.7987%" y="245" width="0.0188%" height="15" fill="rgb(226,81,46)" fg:x="10237" fg:w="13"/><text x="15.0487%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (266 samples, 0.38%)</title><rect x="14.4344%" y="277" width="0.3845%" height="15" fill="rgb(247,70,30)" fg:x="9985" fg:w="266"/><text x="14.6844%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (65 samples, 0.09%)</title><rect x="20.0636%" y="261" width="0.0940%" height="15" fill="rgb(212,68,19)" fg:x="13879" fg:w="65"/><text x="20.3136%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="20.1576%" y="261" width="0.0304%" height="15" fill="rgb(240,187,13)" fg:x="13944" fg:w="21"/><text x="20.4076%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (47 samples, 0.07%)</title><rect x="20.1894%" y="261" width="0.0679%" height="15" fill="rgb(223,113,26)" fg:x="13966" fg:w="47"/><text x="20.4394%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.09%)</title><rect x="20.2573%" y="261" width="0.0911%" height="15" fill="rgb(206,192,2)" fg:x="14013" fg:w="63"/><text x="20.5073%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="20.3542%" y="261" width="0.0116%" height="15" fill="rgb(241,108,4)" fg:x="14080" fg:w="8"/><text x="20.6042%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (52 samples, 0.08%)</title><rect x="20.3759%" y="261" width="0.0752%" height="15" fill="rgb(247,173,49)" fg:x="14095" fg:w="52"/><text x="20.6259%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="20.4510%" y="261" width="0.0289%" height="15" fill="rgb(224,114,35)" fg:x="14147" fg:w="20"/><text x="20.7010%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.01%)</title><rect x="20.4799%" y="261" width="0.0145%" height="15" fill="rgb(245,159,27)" fg:x="14167" fg:w="10"/><text x="20.7299%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.13%)</title><rect x="20.4958%" y="261" width="0.1316%" height="15" fill="rgb(245,172,44)" fg:x="14178" fg:w="91"/><text x="20.7458%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.03%)</title><rect x="20.6274%" y="261" width="0.0347%" height="15" fill="rgb(236,23,11)" fg:x="14269" fg:w="24"/><text x="20.8774%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (81 samples, 0.12%)</title><rect x="20.6621%" y="261" width="0.1171%" height="15" fill="rgb(205,117,38)" fg:x="14293" fg:w="81"/><text x="20.9121%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,029 samples, 2.93%)</title><rect x="20.7792%" y="261" width="2.9331%" height="15" fill="rgb(237,72,25)" fg:x="14374" fg:w="2029"/><text x="21.0292%" y="271.50">ru..</text></g><g><title>rust_qecp`DYLD-STUB$$free (25 samples, 0.04%)</title><rect x="23.7123%" y="261" width="0.0361%" height="15" fill="rgb(244,70,9)" fg:x="16403" fg:w="25"/><text x="23.9623%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="23.7571%" y="261" width="0.0130%" height="15" fill="rgb(217,125,39)" fg:x="16434" fg:w="9"/><text x="24.0071%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="23.9349%" y="133" width="0.0101%" height="15" fill="rgb(235,36,10)" fg:x="16557" fg:w="7"/><text x="24.1849%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.03%)</title><rect x="23.9118%" y="197" width="0.0347%" height="15" fill="rgb(251,123,47)" fg:x="16541" fg:w="24"/><text x="24.1618%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="23.9321%" y="181" width="0.0145%" height="15" fill="rgb(221,13,13)" fg:x="16555" fg:w="10"/><text x="24.1821%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="23.9335%" y="165" width="0.0130%" height="15" fill="rgb(238,131,9)" fg:x="16556" fg:w="9"/><text x="24.1835%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="23.9335%" y="149" width="0.0130%" height="15" fill="rgb(211,50,8)" fg:x="16556" fg:w="9"/><text x="24.1835%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (129 samples, 0.19%)</title><rect x="23.9031%" y="213" width="0.1865%" height="15" fill="rgb(245,182,24)" fg:x="16535" fg:w="129"/><text x="24.1531%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (99 samples, 0.14%)</title><rect x="23.9465%" y="197" width="0.1431%" height="15" fill="rgb(242,14,37)" fg:x="16565" fg:w="99"/><text x="24.1965%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (228 samples, 0.33%)</title><rect x="23.7759%" y="261" width="0.3296%" height="15" fill="rgb(246,228,12)" fg:x="16447" fg:w="228"/><text x="24.0259%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (148 samples, 0.21%)</title><rect x="23.8916%" y="245" width="0.2140%" height="15" fill="rgb(213,55,15)" fg:x="16527" fg:w="148"/><text x="24.1416%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (141 samples, 0.20%)</title><rect x="23.9017%" y="229" width="0.2038%" height="15" fill="rgb(209,9,3)" fg:x="16534" fg:w="141"/><text x="24.1517%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (13 samples, 0.02%)</title><rect x="24.1879%" y="245" width="0.0188%" height="15" fill="rgb(230,59,30)" fg:x="16732" fg:w="13"/><text x="24.4379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (65 samples, 0.09%)</title><rect x="24.5479%" y="229" width="0.0940%" height="15" fill="rgb(209,121,21)" fg:x="16981" fg:w="65"/><text x="24.7979%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="24.6419%" y="229" width="0.0260%" height="15" fill="rgb(220,109,13)" fg:x="17046" fg:w="18"/><text x="24.8919%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (36 samples, 0.05%)</title><rect x="24.6679%" y="229" width="0.0520%" height="15" fill="rgb(232,18,1)" fg:x="17064" fg:w="36"/><text x="24.9179%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (458 samples, 0.66%)</title><rect x="24.2067%" y="245" width="0.6621%" height="15" fill="rgb(215,41,42)" fg:x="16745" fg:w="458"/><text x="24.4567%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (103 samples, 0.15%)</title><rect x="24.7199%" y="229" width="0.1489%" height="15" fill="rgb(224,123,36)" fg:x="17100" fg:w="103"/><text x="24.9699%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (74 samples, 0.11%)</title><rect x="24.7618%" y="213" width="0.1070%" height="15" fill="rgb(240,125,3)" fg:x="17129" fg:w="74"/><text x="25.0118%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="24.8688%" y="245" width="0.0101%" height="15" fill="rgb(205,98,50)" fg:x="17203" fg:w="7"/><text x="25.1188%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (115 samples, 0.17%)</title><rect x="25.0712%" y="229" width="0.1662%" height="15" fill="rgb(205,185,37)" fg:x="17343" fg:w="115"/><text x="25.3212%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (29 samples, 0.04%)</title><rect x="25.2374%" y="229" width="0.0419%" height="15" fill="rgb(238,207,15)" fg:x="17458" fg:w="29"/><text x="25.4874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (34 samples, 0.05%)</title><rect x="25.2794%" y="229" width="0.0492%" height="15" fill="rgb(213,199,42)" fg:x="17487" fg:w="34"/><text x="25.5294%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (184 samples, 0.27%)</title><rect x="25.3285%" y="229" width="0.2660%" height="15" fill="rgb(235,201,11)" fg:x="17521" fg:w="184"/><text x="25.5785%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (362 samples, 0.52%)</title><rect x="25.6017%" y="229" width="0.5233%" height="15" fill="rgb(207,46,11)" fg:x="17710" fg:w="362"/><text x="25.8517%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (359 samples, 0.52%)</title><rect x="25.6061%" y="213" width="0.5190%" height="15" fill="rgb(241,35,35)" fg:x="17713" fg:w="359"/><text x="25.8561%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (924 samples, 1.34%)</title><rect x="24.8789%" y="245" width="1.3357%" height="15" fill="rgb(243,32,47)" fg:x="17210" fg:w="924"/><text x="25.1289%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (62 samples, 0.09%)</title><rect x="26.1250%" y="229" width="0.0896%" height="15" fill="rgb(247,202,23)" fg:x="18072" fg:w="62"/><text x="26.3750%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.09%)</title><rect x="26.1279%" y="213" width="0.0867%" height="15" fill="rgb(219,102,11)" fg:x="18074" fg:w="60"/><text x="26.3779%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (32 samples, 0.05%)</title><rect x="26.4286%" y="213" width="0.0463%" height="15" fill="rgb(243,110,44)" fg:x="18282" fg:w="32"/><text x="26.6786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (84 samples, 0.12%)</title><rect x="26.4749%" y="213" width="0.1214%" height="15" fill="rgb(222,74,54)" fg:x="18314" fg:w="84"/><text x="26.7249%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (97 samples, 0.14%)</title><rect x="26.5963%" y="213" width="0.1402%" height="15" fill="rgb(216,99,12)" fg:x="18398" fg:w="97"/><text x="26.8463%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (34 samples, 0.05%)</title><rect x="26.7365%" y="213" width="0.0492%" height="15" fill="rgb(226,22,26)" fg:x="18495" fg:w="34"/><text x="26.9865%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (49 samples, 0.07%)</title><rect x="26.7857%" y="213" width="0.0708%" height="15" fill="rgb(217,163,10)" fg:x="18529" fg:w="49"/><text x="27.0357%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.04%)</title><rect x="26.8160%" y="197" width="0.0405%" height="15" fill="rgb(213,25,53)" fg:x="18550" fg:w="28"/><text x="27.0660%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (120 samples, 0.17%)</title><rect x="26.8739%" y="197" width="0.1735%" height="15" fill="rgb(252,105,26)" fg:x="18590" fg:w="120"/><text x="27.1239%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (520 samples, 0.75%)</title><rect x="26.2971%" y="229" width="0.7517%" height="15" fill="rgb(220,39,43)" fg:x="18191" fg:w="520"/><text x="26.5471%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (133 samples, 0.19%)</title><rect x="26.8565%" y="213" width="0.1923%" height="15" fill="rgb(229,68,48)" fg:x="18578" fg:w="133"/><text x="27.1065%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (579 samples, 0.84%)</title><rect x="26.2147%" y="245" width="0.8370%" height="15" fill="rgb(252,8,32)" fg:x="18134" fg:w="579"/><text x="26.4647%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.04%)</title><rect x="27.0517%" y="245" width="0.0419%" height="15" fill="rgb(223,20,43)" fg:x="18713" fg:w="29"/><text x="27.3017%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (173 samples, 0.25%)</title><rect x="27.0936%" y="245" width="0.2501%" height="15" fill="rgb(229,81,49)" fg:x="18742" fg:w="173"/><text x="27.3436%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (100 samples, 0.14%)</title><rect x="27.1991%" y="229" width="0.1446%" height="15" fill="rgb(236,28,36)" fg:x="18815" fg:w="100"/><text x="27.4491%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (100 samples, 0.14%)</title><rect x="27.1991%" y="213" width="0.1446%" height="15" fill="rgb(249,185,26)" fg:x="18815" fg:w="100"/><text x="27.4491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (38 samples, 0.05%)</title><rect x="27.3437%" y="245" width="0.0549%" height="15" fill="rgb(249,174,33)" fg:x="18915" fg:w="38"/><text x="27.5937%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (35 samples, 0.05%)</title><rect x="27.4102%" y="245" width="0.0506%" height="15" fill="rgb(233,201,37)" fg:x="18961" fg:w="35"/><text x="27.6602%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.03%)</title><rect x="27.4608%" y="245" width="0.0332%" height="15" fill="rgb(221,78,26)" fg:x="18996" fg:w="23"/><text x="27.7108%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="27.5027%" y="245" width="0.0116%" height="15" fill="rgb(250,127,30)" fg:x="19025" fg:w="8"/><text x="27.7527%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (60 samples, 0.09%)</title><rect x="27.6169%" y="213" width="0.0867%" height="15" fill="rgb(230,49,44)" fg:x="19104" fg:w="60"/><text x="27.8669%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (122 samples, 0.18%)</title><rect x="27.5316%" y="229" width="0.1764%" height="15" fill="rgb(229,67,23)" fg:x="19045" fg:w="122"/><text x="27.7816%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (95 samples, 0.14%)</title><rect x="27.7152%" y="229" width="0.1373%" height="15" fill="rgb(249,83,47)" fg:x="19172" fg:w="95"/><text x="27.9652%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (13 samples, 0.02%)</title><rect x="27.8338%" y="213" width="0.0188%" height="15" fill="rgb(215,43,3)" fg:x="19254" fg:w="13"/><text x="28.0838%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="27.8338%" y="197" width="0.0188%" height="15" fill="rgb(238,154,13)" fg:x="19254" fg:w="13"/><text x="28.0838%" y="207.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,598 samples, 3.76%)</title><rect x="24.1084%" y="261" width="3.7557%" height="15" fill="rgb(219,56,2)" fg:x="16677" fg:w="2598"/><text x="24.3584%" y="271.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (242 samples, 0.35%)</title><rect x="27.5143%" y="245" width="0.3498%" height="15" fill="rgb(233,0,4)" fg:x="19033" fg:w="242"/><text x="27.7643%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="27.8525%" y="229" width="0.0116%" height="15" fill="rgb(235,30,7)" fg:x="19267" fg:w="8"/><text x="28.1025%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (247 samples, 0.36%)</title><rect x="27.8641%" y="261" width="0.3571%" height="15" fill="rgb(250,79,13)" fg:x="19275" fg:w="247"/><text x="28.1141%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (220 samples, 0.32%)</title><rect x="27.9031%" y="245" width="0.3180%" height="15" fill="rgb(211,146,34)" fg:x="19302" fg:w="220"/><text x="28.1531%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (176 samples, 0.25%)</title><rect x="27.9668%" y="229" width="0.2544%" height="15" fill="rgb(228,22,38)" fg:x="19346" fg:w="176"/><text x="28.2168%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (101 samples, 0.15%)</title><rect x="28.0752%" y="213" width="0.1460%" height="15" fill="rgb(235,168,5)" fg:x="19421" fg:w="101"/><text x="28.3252%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (34 samples, 0.05%)</title><rect x="28.1720%" y="197" width="0.0492%" height="15" fill="rgb(221,155,16)" fg:x="19488" fg:w="34"/><text x="28.4220%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (11 samples, 0.02%)</title><rect x="28.2053%" y="181" width="0.0159%" height="15" fill="rgb(215,215,53)" fg:x="19511" fg:w="11"/><text x="28.4553%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (328 samples, 0.47%)</title><rect x="28.2226%" y="261" width="0.4742%" height="15" fill="rgb(223,4,10)" fg:x="19523" fg:w="328"/><text x="28.4726%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,713 samples, 3.92%)</title><rect x="28.6968%" y="261" width="3.9219%" height="15" fill="rgb(234,103,6)" fg:x="19851" fg:w="2713"/><text x="28.9468%" y="271.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (163 samples, 0.24%)</title><rect x="32.6187%" y="261" width="0.2356%" height="15" fill="rgb(227,97,0)" fg:x="22564" fg:w="163"/><text x="32.8687%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="32.9874%" y="245" width="0.0116%" height="15" fill="rgb(234,150,53)" fg:x="22819" fg:w="8"/><text x="33.2374%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (112 samples, 0.16%)</title><rect x="32.9989%" y="245" width="0.1619%" height="15" fill="rgb(228,201,54)" fg:x="22827" fg:w="112"/><text x="33.2489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="33.3979%" y="229" width="0.0101%" height="15" fill="rgb(222,22,37)" fg:x="23103" fg:w="7"/><text x="33.6479%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (47 samples, 0.07%)</title><rect x="33.4080%" y="229" width="0.0679%" height="15" fill="rgb(237,53,32)" fg:x="23110" fg:w="47"/><text x="33.6580%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (243 samples, 0.35%)</title><rect x="33.4760%" y="229" width="0.3513%" height="15" fill="rgb(233,25,53)" fg:x="23157" fg:w="243"/><text x="33.7260%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (995 samples, 1.44%)</title><rect x="32.8544%" y="261" width="1.4384%" height="15" fill="rgb(210,40,34)" fg:x="22727" fg:w="995"/><text x="33.1044%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (783 samples, 1.13%)</title><rect x="33.1608%" y="245" width="1.1319%" height="15" fill="rgb(241,220,44)" fg:x="22939" fg:w="783"/><text x="33.4108%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (322 samples, 0.47%)</title><rect x="33.8272%" y="229" width="0.4655%" height="15" fill="rgb(235,28,35)" fg:x="23400" fg:w="322"/><text x="34.0772%" y="239.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (158 samples, 0.23%)</title><rect x="34.3086%" y="261" width="0.2284%" height="15" fill="rgb(210,56,17)" fg:x="23733" fg:w="158"/><text x="34.5586%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,677 samples, 5.32%)</title><rect x="37.0379%" y="245" width="5.3155%" height="15" fill="rgb(224,130,29)" fg:x="25621" fg:w="3677"/><text x="37.2879%" y="255.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.04%)</title><rect x="42.3535%" y="197" width="0.0390%" height="15" fill="rgb(235,212,8)" fg:x="29298" fg:w="27"/><text x="42.6035%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="42.3636%" y="181" width="0.0289%" height="15" fill="rgb(223,33,50)" fg:x="29305" fg:w="20"/><text x="42.6136%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 0.04%)</title><rect x="42.3535%" y="245" width="0.0405%" height="15" fill="rgb(219,149,13)" fg:x="29298" fg:w="28"/><text x="42.6035%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (28 samples, 0.04%)</title><rect x="42.3535%" y="229" width="0.0405%" height="15" fill="rgb(250,156,29)" fg:x="29298" fg:w="28"/><text x="42.6035%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.04%)</title><rect x="42.3535%" y="213" width="0.0405%" height="15" fill="rgb(216,193,19)" fg:x="29298" fg:w="28"/><text x="42.6035%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,407 samples, 4.93%)</title><rect x="42.3939%" y="245" width="4.9252%" height="15" fill="rgb(216,135,14)" fg:x="29326" fg:w="3407"/><text x="42.6439%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (704 samples, 1.02%)</title><rect x="47.3191%" y="245" width="1.0177%" height="15" fill="rgb(241,47,5)" fg:x="32733" fg:w="704"/><text x="47.5691%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (33 samples, 0.05%)</title><rect x="48.3773%" y="229" width="0.0477%" height="15" fill="rgb(233,42,35)" fg:x="33465" fg:w="33"/><text x="48.6273%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (32 samples, 0.05%)</title><rect x="48.3787%" y="213" width="0.0463%" height="15" fill="rgb(231,13,6)" fg:x="33466" fg:w="32"/><text x="48.6287%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (133 samples, 0.19%)</title><rect x="48.4366%" y="229" width="0.1923%" height="15" fill="rgb(207,181,40)" fg:x="33506" fg:w="133"/><text x="48.6866%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (243 samples, 0.35%)</title><rect x="48.7720%" y="213" width="0.3513%" height="15" fill="rgb(254,173,49)" fg:x="33738" fg:w="243"/><text x="49.0220%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (717 samples, 1.04%)</title><rect x="48.3368%" y="245" width="1.0365%" height="15" fill="rgb(221,1,38)" fg:x="33437" fg:w="717"/><text x="48.5868%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (515 samples, 0.74%)</title><rect x="48.6288%" y="229" width="0.7445%" height="15" fill="rgb(206,124,46)" fg:x="33639" fg:w="515"/><text x="48.8788%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (173 samples, 0.25%)</title><rect x="49.1232%" y="213" width="0.2501%" height="15" fill="rgb(249,21,11)" fg:x="33981" fg:w="173"/><text x="49.3732%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (12,421 samples, 17.96%)</title><rect x="34.5370%" y="261" width="17.9559%" height="15" fill="rgb(222,201,40)" fg:x="23891" fg:w="12421"/><text x="34.7870%" y="271.50">rust_qecp`rust_qecp::ftqec::..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,158 samples, 3.12%)</title><rect x="49.3733%" y="245" width="3.1196%" height="15" fill="rgb(235,61,29)" fg:x="34154" fg:w="2158"/><text x="49.6233%" y="255.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.06%)</title><rect x="52.4351%" y="229" width="0.0578%" height="15" fill="rgb(219,207,3)" fg:x="36272" fg:w="40"/><text x="52.6851%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (40 samples, 0.06%)</title><rect x="52.4351%" y="213" width="0.0578%" height="15" fill="rgb(222,56,46)" fg:x="36272" fg:w="40"/><text x="52.6851%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 0.05%)</title><rect x="52.4395%" y="197" width="0.0535%" height="15" fill="rgb(239,76,54)" fg:x="36275" fg:w="37"/><text x="52.6895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (37 samples, 0.05%)</title><rect x="52.4395%" y="181" width="0.0535%" height="15" fill="rgb(231,124,27)" fg:x="36275" fg:w="37"/><text x="52.6895%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.04%)</title><rect x="52.4496%" y="165" width="0.0434%" height="15" fill="rgb(249,195,6)" fg:x="36282" fg:w="30"/><text x="52.6996%" y="175.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 0.03%)</title><rect x="54.0744%" y="245" width="0.0260%" height="15" fill="rgb(237,174,47)" fg:x="37406" fg:w="18"/><text x="54.3244%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.01%)</title><rect x="54.1005%" y="229" width="0.0145%" height="15" fill="rgb(206,201,31)" fg:x="37424" fg:w="10"/><text x="54.3505%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.02%)</title><rect x="54.1005%" y="245" width="0.0159%" height="15" fill="rgb(231,57,52)" fg:x="37424" fg:w="11"/><text x="54.3505%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.04%)</title><rect x="54.1164%" y="229" width="0.0390%" height="15" fill="rgb(248,177,22)" fg:x="37435" fg:w="27"/><text x="54.3664%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="54.1554%" y="229" width="0.0101%" height="15" fill="rgb(215,211,37)" fg:x="37462" fg:w="7"/><text x="54.4054%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="54.1655%" y="229" width="0.0260%" height="15" fill="rgb(241,128,51)" fg:x="37469" fg:w="18"/><text x="54.4155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="54.1915%" y="229" width="0.0231%" height="15" fill="rgb(227,165,31)" fg:x="37487" fg:w="16"/><text x="54.4415%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="54.2147%" y="229" width="0.0202%" height="15" fill="rgb(228,167,24)" fg:x="37503" fg:w="14"/><text x="54.4647%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="54.2349%" y="229" width="0.0159%" height="15" fill="rgb(228,143,12)" fg:x="37517" fg:w="11"/><text x="54.4849%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="54.4431%" y="197" width="0.0275%" height="15" fill="rgb(249,149,8)" fg:x="37661" fg:w="19"/><text x="54.6931%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 0.07%)</title><rect x="54.7539%" y="165" width="0.0694%" height="15" fill="rgb(243,35,44)" fg:x="37876" fg:w="48"/><text x="55.0039%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (201 samples, 0.29%)</title><rect x="54.5399%" y="181" width="0.2906%" height="15" fill="rgb(246,89,9)" fg:x="37728" fg:w="201"/><text x="54.7899%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (387 samples, 0.56%)</title><rect x="54.2985%" y="213" width="0.5595%" height="15" fill="rgb(233,213,13)" fg:x="37561" fg:w="387"/><text x="54.5485%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (268 samples, 0.39%)</title><rect x="54.4705%" y="197" width="0.3874%" height="15" fill="rgb(233,141,41)" fg:x="37680" fg:w="268"/><text x="54.7205%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="54.8305%" y="181" width="0.0275%" height="15" fill="rgb(239,167,4)" fg:x="37929" fg:w="19"/><text x="55.0805%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (32 samples, 0.05%)</title><rect x="54.8580%" y="213" width="0.0463%" height="15" fill="rgb(209,217,16)" fg:x="37948" fg:w="32"/><text x="55.1080%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (112 samples, 0.16%)</title><rect x="54.9042%" y="213" width="0.1619%" height="15" fill="rgb(219,88,35)" fg:x="37980" fg:w="112"/><text x="55.1542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (56 samples, 0.08%)</title><rect x="54.9852%" y="197" width="0.0810%" height="15" fill="rgb(220,193,23)" fg:x="38036" fg:w="56"/><text x="55.2352%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="55.0661%" y="213" width="0.0188%" height="15" fill="rgb(230,90,52)" fg:x="38092" fg:w="13"/><text x="55.3161%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (40 samples, 0.06%)</title><rect x="55.0849%" y="213" width="0.0578%" height="15" fill="rgb(252,106,19)" fg:x="38105" fg:w="40"/><text x="55.3349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="55.1428%" y="213" width="0.0101%" height="15" fill="rgb(206,74,20)" fg:x="38145" fg:w="7"/><text x="55.3928%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="55.1529%" y="213" width="0.0217%" height="15" fill="rgb(230,138,44)" fg:x="38152" fg:w="15"/><text x="55.4029%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (648 samples, 0.94%)</title><rect x="55.2208%" y="197" width="0.9368%" height="15" fill="rgb(235,182,43)" fg:x="38199" fg:w="648"/><text x="55.4708%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.07%)</title><rect x="56.2096%" y="181" width="0.0694%" height="15" fill="rgb(242,16,51)" fg:x="38883" fg:w="48"/><text x="56.4596%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (73 samples, 0.11%)</title><rect x="56.2790%" y="181" width="0.1055%" height="15" fill="rgb(248,9,4)" fg:x="38931" fg:w="73"/><text x="56.5290%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 samples, 0.22%)</title><rect x="56.1764%" y="197" width="0.2241%" height="15" fill="rgb(210,31,22)" fg:x="38860" fg:w="155"/><text x="56.4264%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="56.3845%" y="181" width="0.0159%" height="15" fill="rgb(239,54,39)" fg:x="39004" fg:w="11"/><text x="56.6345%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="56.4004%" y="197" width="0.0188%" height="15" fill="rgb(230,99,41)" fg:x="39015" fg:w="13"/><text x="56.6504%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="56.5913%" y="165" width="0.0130%" height="15" fill="rgb(253,106,12)" fg:x="39147" fg:w="9"/><text x="56.8413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.03%)</title><rect x="56.7720%" y="133" width="0.0332%" height="15" fill="rgb(213,46,41)" fg:x="39272" fg:w="23"/><text x="57.0220%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (142 samples, 0.21%)</title><rect x="56.6259%" y="149" width="0.2053%" height="15" fill="rgb(215,133,35)" fg:x="39171" fg:w="142"/><text x="56.8759%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.03%)</title><rect x="56.8052%" y="133" width="0.0260%" height="15" fill="rgb(213,28,5)" fg:x="39295" fg:w="18"/><text x="57.0552%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (223 samples, 0.32%)</title><rect x="56.5262%" y="181" width="0.3224%" height="15" fill="rgb(215,77,49)" fg:x="39102" fg:w="223"/><text x="56.7762%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (169 samples, 0.24%)</title><rect x="56.6043%" y="165" width="0.2443%" height="15" fill="rgb(248,100,22)" fg:x="39156" fg:w="169"/><text x="56.8543%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="56.8312%" y="149" width="0.0173%" height="15" fill="rgb(208,67,9)" fg:x="39313" fg:w="12"/><text x="57.0812%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="56.8486%" y="181" width="0.0130%" height="15" fill="rgb(219,133,21)" fg:x="39325" fg:w="9"/><text x="57.0986%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,172 samples, 1.69%)</title><rect x="55.1746%" y="213" width="1.6943%" height="15" fill="rgb(246,46,29)" fg:x="38167" fg:w="1172"/><text x="55.4246%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (311 samples, 0.45%)</title><rect x="56.4192%" y="197" width="0.4496%" height="15" fill="rgb(246,185,52)" fg:x="39028" fg:w="311"/><text x="56.6692%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.07%)</title><rect x="56.9295%" y="197" width="0.0694%" height="15" fill="rgb(252,136,11)" fg:x="39381" fg:w="48"/><text x="57.1795%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (67 samples, 0.10%)</title><rect x="56.9989%" y="197" width="0.0969%" height="15" fill="rgb(219,138,53)" fg:x="39429" fg:w="67"/><text x="57.2489%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (194 samples, 0.28%)</title><rect x="56.8688%" y="213" width="0.2804%" height="15" fill="rgb(211,51,23)" fg:x="39339" fg:w="194"/><text x="57.1188%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (37 samples, 0.05%)</title><rect x="57.0958%" y="197" width="0.0535%" height="15" fill="rgb(247,221,28)" fg:x="39496" fg:w="37"/><text x="57.3458%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.03%)</title><rect x="57.1493%" y="213" width="0.0289%" height="15" fill="rgb(251,222,45)" fg:x="39533" fg:w="20"/><text x="57.3993%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,029 samples, 2.93%)</title><rect x="54.2595%" y="229" width="2.9331%" height="15" fill="rgb(217,162,53)" fg:x="37534" fg:w="2029"/><text x="54.5095%" y="239.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.01%)</title><rect x="57.1782%" y="213" width="0.0145%" height="15" fill="rgb(229,93,14)" fg:x="39553" fg:w="10"/><text x="57.4282%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (11 samples, 0.02%)</title><rect x="57.1999%" y="229" width="0.0159%" height="15" fill="rgb(209,67,49)" fg:x="39568" fg:w="11"/><text x="57.4499%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="57.2158%" y="229" width="0.0173%" height="15" fill="rgb(213,87,29)" fg:x="39579" fg:w="12"/><text x="57.4658%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="57.2331%" y="229" width="0.0188%" height="15" fill="rgb(205,151,52)" fg:x="39591" fg:w="13"/><text x="57.4831%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.02%)</title><rect x="57.2519%" y="229" width="0.0231%" height="15" fill="rgb(253,215,39)" fg:x="39604" fg:w="16"/><text x="57.5019%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,191 samples, 3.17%)</title><rect x="54.1164%" y="245" width="3.1673%" height="15" fill="rgb(221,220,41)" fg:x="37435" fg:w="2191"/><text x="54.3664%" y="255.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.03%)</title><rect x="57.2837%" y="245" width="0.0289%" height="15" fill="rgb(218,133,21)" fg:x="39626" fg:w="20"/><text x="57.5337%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="57.2837%" y="229" width="0.0289%" height="15" fill="rgb(221,193,43)" fg:x="39626" fg:w="20"/><text x="57.5337%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="57.2837%" y="213" width="0.0289%" height="15" fill="rgb(240,128,52)" fg:x="39626" fg:w="20"/><text x="57.5337%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="57.2851%" y="197" width="0.0275%" height="15" fill="rgb(253,114,12)" fg:x="39627" fg:w="19"/><text x="57.5351%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.03%)</title><rect x="57.2866%" y="181" width="0.0260%" height="15" fill="rgb(215,223,47)" fg:x="39628" fg:w="18"/><text x="57.5366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.03%)</title><rect x="57.2866%" y="165" width="0.0260%" height="15" fill="rgb(248,225,23)" fg:x="39628" fg:w="18"/><text x="57.5366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (18 samples, 0.03%)</title><rect x="57.2866%" y="149" width="0.0260%" height="15" fill="rgb(250,108,0)" fg:x="39628" fg:w="18"/><text x="57.5366%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="57.4832%" y="229" width="0.0101%" height="15" fill="rgb(228,208,7)" fg:x="39764" fg:w="7"/><text x="57.7332%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.04%)</title><rect x="57.4933%" y="229" width="0.0405%" height="15" fill="rgb(244,45,10)" fg:x="39771" fg:w="28"/><text x="57.7433%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (17 samples, 0.02%)</title><rect x="57.5338%" y="229" width="0.0246%" height="15" fill="rgb(207,125,25)" fg:x="39799" fg:w="17"/><text x="57.7838%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (30 samples, 0.04%)</title><rect x="57.5584%" y="229" width="0.0434%" height="15" fill="rgb(210,195,18)" fg:x="39816" fg:w="30"/><text x="57.8084%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (14 samples, 0.02%)</title><rect x="57.6017%" y="229" width="0.0202%" height="15" fill="rgb(249,80,12)" fg:x="39846" fg:w="14"/><text x="57.8517%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (10 samples, 0.01%)</title><rect x="57.6220%" y="229" width="0.0145%" height="15" fill="rgb(221,65,9)" fg:x="39860" fg:w="10"/><text x="57.8720%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="57.9024%" y="165" width="0.0463%" height="15" fill="rgb(235,49,36)" fg:x="40054" fg:w="32"/><text x="58.1524%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (110 samples, 0.16%)</title><rect x="57.7954%" y="181" width="0.1590%" height="15" fill="rgb(225,32,20)" fg:x="39980" fg:w="110"/><text x="58.0454%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (192 samples, 0.28%)</title><rect x="57.6928%" y="213" width="0.2776%" height="15" fill="rgb(215,141,46)" fg:x="39909" fg:w="192"/><text x="57.9428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (141 samples, 0.20%)</title><rect x="57.7665%" y="197" width="0.2038%" height="15" fill="rgb(250,160,47)" fg:x="39960" fg:w="141"/><text x="58.0165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="57.9545%" y="181" width="0.0159%" height="15" fill="rgb(216,222,40)" fg:x="40090" fg:w="11"/><text x="58.2045%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="57.9704%" y="213" width="0.0260%" height="15" fill="rgb(234,217,39)" fg:x="40101" fg:w="18"/><text x="58.2204%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.01%)</title><rect x="57.9964%" y="213" width="0.0145%" height="15" fill="rgb(207,178,40)" fg:x="40119" fg:w="10"/><text x="58.2464%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (24 samples, 0.03%)</title><rect x="58.0108%" y="213" width="0.0347%" height="15" fill="rgb(221,136,13)" fg:x="40129" fg:w="24"/><text x="58.2608%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (17 samples, 0.02%)</title><rect x="58.2176%" y="197" width="0.0246%" height="15" fill="rgb(249,199,10)" fg:x="40272" fg:w="17"/><text x="58.4676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (13 samples, 0.02%)</title><rect x="58.3332%" y="181" width="0.0188%" height="15" fill="rgb(249,222,13)" fg:x="40352" fg:w="13"/><text x="58.5832%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (12 samples, 0.02%)</title><rect x="58.3520%" y="181" width="0.0173%" height="15" fill="rgb(244,185,38)" fg:x="40365" fg:w="12"/><text x="58.6020%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.03%)</title><rect x="58.3694%" y="181" width="0.0332%" height="15" fill="rgb(236,202,9)" fg:x="40377" fg:w="23"/><text x="58.6194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (277 samples, 0.40%)</title><rect x="58.4069%" y="181" width="0.4004%" height="15" fill="rgb(250,229,37)" fg:x="40403" fg:w="277"/><text x="58.6569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="58.9346%" y="165" width="0.0390%" height="15" fill="rgb(206,174,23)" fg:x="40768" fg:w="27"/><text x="59.1846%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (117 samples, 0.17%)</title><rect x="58.9736%" y="165" width="0.1691%" height="15" fill="rgb(211,33,43)" fg:x="40795" fg:w="117"/><text x="59.2236%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.04%)</title><rect x="59.2888%" y="133" width="0.0405%" height="15" fill="rgb(245,58,50)" fg:x="41013" fg:w="28"/><text x="59.5388%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (105 samples, 0.15%)</title><rect x="59.1890%" y="149" width="0.1518%" height="15" fill="rgb(244,68,36)" fg:x="40944" fg:w="105"/><text x="59.4390%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="59.3292%" y="133" width="0.0116%" height="15" fill="rgb(232,229,15)" fg:x="41041" fg:w="8"/><text x="59.5792%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (141 samples, 0.20%)</title><rect x="59.1428%" y="165" width="0.2038%" height="15" fill="rgb(254,30,23)" fg:x="40912" fg:w="141"/><text x="59.3928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (101 samples, 0.15%)</title><rect x="59.3466%" y="165" width="0.1460%" height="15" fill="rgb(235,160,14)" fg:x="41053" fg:w="101"/><text x="59.5966%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="59.5172%" y="149" width="0.0101%" height="15" fill="rgb(212,155,44)" fg:x="41171" fg:w="7"/><text x="59.7672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (46 samples, 0.07%)</title><rect x="59.6155%" y="133" width="0.0665%" height="15" fill="rgb(226,2,50)" fg:x="41239" fg:w="46"/><text x="59.8655%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (381 samples, 0.55%)</title><rect x="59.4926%" y="165" width="0.5508%" height="15" fill="rgb(234,177,6)" fg:x="41154" fg:w="381"/><text x="59.7426%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (357 samples, 0.52%)</title><rect x="59.5273%" y="149" width="0.5161%" height="15" fill="rgb(217,24,9)" fg:x="41178" fg:w="357"/><text x="59.7773%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (247 samples, 0.36%)</title><rect x="59.6863%" y="133" width="0.3571%" height="15" fill="rgb(220,13,46)" fg:x="41288" fg:w="247"/><text x="59.9363%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (864 samples, 1.25%)</title><rect x="58.8074%" y="181" width="1.2490%" height="15" fill="rgb(239,221,27)" fg:x="40680" fg:w="864"/><text x="59.0574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="60.0434%" y="165" width="0.0130%" height="15" fill="rgb(222,198,25)" fg:x="41535" fg:w="9"/><text x="60.2934%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,333 samples, 1.93%)</title><rect x="58.2421%" y="197" width="1.9270%" height="15" fill="rgb(211,99,13)" fg:x="40289" fg:w="1333"/><text x="58.4921%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.11%)</title><rect x="60.0622%" y="181" width="0.1070%" height="15" fill="rgb(232,111,31)" fg:x="41548" fg:w="74"/><text x="60.3122%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (107 samples, 0.15%)</title><rect x="60.1691%" y="197" width="0.1547%" height="15" fill="rgb(245,82,37)" fg:x="41622" fg:w="107"/><text x="60.4191%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (28 samples, 0.04%)</title><rect x="60.3238%" y="197" width="0.0405%" height="15" fill="rgb(227,149,46)" fg:x="41729" fg:w="28"/><text x="60.5738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,611 samples, 2.33%)</title><rect x="58.0455%" y="213" width="2.3289%" height="15" fill="rgb(218,36,50)" fg:x="40153" fg:w="1611"/><text x="58.2955%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="60.3643%" y="197" width="0.0101%" height="15" fill="rgb(226,80,48)" fg:x="41757" fg:w="7"/><text x="60.6143%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,127 samples, 3.07%)</title><rect x="57.3126%" y="245" width="3.0748%" height="15" fill="rgb(238,224,15)" fg:x="39646" fg:w="2127"/><text x="57.5626%" y="255.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,903 samples, 2.75%)</title><rect x="57.6364%" y="229" width="2.7510%" height="15" fill="rgb(241,136,10)" fg:x="39870" fg:w="1903"/><text x="57.8864%" y="239.50">ru..</text></g><g><title>rust_qecp`__rdl_realloc (9 samples, 0.01%)</title><rect x="60.3744%" y="213" width="0.0130%" height="15" fill="rgb(208,32,45)" fg:x="41764" fg:w="9"/><text x="60.6244%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (54 samples, 0.08%)</title><rect x="60.3874%" y="245" width="0.0781%" height="15" fill="rgb(207,135,9)" fg:x="41773" fg:w="54"/><text x="60.6374%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (289 samples, 0.42%)</title><rect x="60.4655%" y="229" width="0.4178%" height="15" fill="rgb(206,86,44)" fg:x="41827" fg:w="289"/><text x="60.7155%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.02%)</title><rect x="61.5367%" y="213" width="0.0217%" height="15" fill="rgb(245,177,15)" fg:x="42568" fg:w="15"/><text x="61.7867%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="61.5641%" y="213" width="0.0101%" height="15" fill="rgb(206,64,50)" fg:x="42587" fg:w="7"/><text x="61.8141%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="61.8244%" y="181" width="0.0231%" height="15" fill="rgb(234,36,40)" fg:x="42767" fg:w="16"/><text x="62.0744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.02%)</title><rect x="61.8475%" y="181" width="0.0246%" height="15" fill="rgb(213,64,8)" fg:x="42783" fg:w="17"/><text x="62.0975%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="61.8909%" y="165" width="0.0159%" height="15" fill="rgb(210,75,36)" fg:x="42813" fg:w="11"/><text x="62.1409%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (209 samples, 0.30%)</title><rect x="62.0296%" y="149" width="0.3021%" height="15" fill="rgb(229,88,21)" fg:x="42909" fg:w="209"/><text x="62.2796%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,796 samples, 2.60%)</title><rect x="62.4272%" y="133" width="2.5963%" height="15" fill="rgb(252,204,47)" fg:x="43184" fg:w="1796"/><text x="62.6772%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="65.0235%" y="133" width="0.0361%" height="15" fill="rgb(208,77,27)" fg:x="44980" fg:w="25"/><text x="65.2735%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,507 samples, 3.62%)</title><rect x="61.6798%" y="197" width="3.6241%" height="15" fill="rgb(221,76,26)" fg:x="42667" fg:w="2507"/><text x="61.9298%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,374 samples, 3.43%)</title><rect x="61.8721%" y="181" width="3.4319%" height="15" fill="rgb(225,139,18)" fg:x="42800" fg:w="2374"/><text x="62.1221%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2,350 samples, 3.40%)</title><rect x="61.9068%" y="165" width="3.3972%" height="15" fill="rgb(230,137,11)" fg:x="42824" fg:w="2350"/><text x="62.1568%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2,052 samples, 2.97%)</title><rect x="62.3375%" y="149" width="2.9664%" height="15" fill="rgb(212,28,1)" fg:x="43122" fg:w="2052"/><text x="62.5875%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (169 samples, 0.24%)</title><rect x="65.0596%" y="133" width="0.2443%" height="15" fill="rgb(248,164,17)" fg:x="45005" fg:w="169"/><text x="65.3096%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (140 samples, 0.20%)</title><rect x="65.3039%" y="197" width="0.2024%" height="15" fill="rgb(222,171,42)" fg:x="45174" fg:w="140"/><text x="65.5539%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (172 samples, 0.25%)</title><rect x="65.5063%" y="197" width="0.2486%" height="15" fill="rgb(243,84,45)" fg:x="45314" fg:w="172"/><text x="65.7563%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,376 samples, 4.88%)</title><rect x="60.8833%" y="229" width="4.8804%" height="15" fill="rgb(252,49,23)" fg:x="42116" fg:w="3376"/><text x="61.1333%" y="239.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,895 samples, 4.19%)</title><rect x="61.5786%" y="213" width="4.1850%" height="15" fill="rgb(215,19,7)" fg:x="42597" fg:w="2895"/><text x="61.8286%" y="223.50">rust_..</text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,680 samples, 5.32%)</title><rect x="60.4655%" y="245" width="5.3198%" height="15" fill="rgb(238,81,41)" fg:x="41827" fg:w="3680"/><text x="60.7155%" y="255.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.02%)</title><rect x="65.7636%" y="229" width="0.0217%" height="15" fill="rgb(210,199,37)" fg:x="45492" fg:w="15"/><text x="66.0136%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (16 samples, 0.02%)</title><rect x="66.4720%" y="213" width="0.0231%" height="15" fill="rgb(244,192,49)" fg:x="45982" fg:w="16"/><text x="66.7220%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="66.9172%" y="197" width="0.0217%" height="15" fill="rgb(226,211,11)" fg:x="46290" fg:w="15"/><text x="67.1672%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (30 samples, 0.04%)</title><rect x="67.3639%" y="181" width="0.0434%" height="15" fill="rgb(236,162,54)" fg:x="46599" fg:w="30"/><text x="67.6139%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (36 samples, 0.05%)</title><rect x="67.7947%" y="165" width="0.0520%" height="15" fill="rgb(220,229,9)" fg:x="46897" fg:w="36"/><text x="68.0447%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.03%)</title><rect x="68.1503%" y="149" width="0.0318%" height="15" fill="rgb(250,87,22)" fg:x="47143" fg:w="22"/><text x="68.4003%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,860 samples, 2.69%)</title><rect x="65.7853%" y="245" width="2.6888%" height="15" fill="rgb(239,43,17)" fg:x="45507" fg:w="1860"/><text x="66.0353%" y="255.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,619 samples, 2.34%)</title><rect x="66.1337%" y="229" width="2.3404%" height="15" fill="rgb(231,177,25)" fg:x="45748" fg:w="1619"/><text x="66.3837%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,369 samples, 1.98%)</title><rect x="66.4951%" y="213" width="1.9790%" height="15" fill="rgb(219,179,1)" fg:x="45998" fg:w="1369"/><text x="66.7451%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,062 samples, 1.54%)</title><rect x="66.9389%" y="197" width="1.5352%" height="15" fill="rgb(238,219,53)" fg:x="46305" fg:w="1062"/><text x="67.1889%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (738 samples, 1.07%)</title><rect x="67.4073%" y="181" width="1.0669%" height="15" fill="rgb(232,167,36)" fg:x="46629" fg:w="738"/><text x="67.6573%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (434 samples, 0.63%)</title><rect x="67.8468%" y="165" width="0.6274%" height="15" fill="rgb(244,19,51)" fg:x="46933" fg:w="434"/><text x="68.0968%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (202 samples, 0.29%)</title><rect x="68.1821%" y="149" width="0.2920%" height="15" fill="rgb(224,6,22)" fg:x="47165" fg:w="202"/><text x="68.4321%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (79 samples, 0.11%)</title><rect x="68.3600%" y="133" width="0.1142%" height="15" fill="rgb(224,145,5)" fg:x="47288" fg:w="79"/><text x="68.6100%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (11 samples, 0.02%)</title><rect x="68.4583%" y="117" width="0.0159%" height="15" fill="rgb(234,130,49)" fg:x="47356" fg:w="11"/><text x="68.7083%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (466 samples, 0.67%)</title><rect x="69.6350%" y="229" width="0.6737%" height="15" fill="rgb(254,6,2)" fg:x="48170" fg:w="466"/><text x="69.8850%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (986 samples, 1.43%)</title><rect x="70.3086%" y="229" width="1.4254%" height="15" fill="rgb(208,96,46)" fg:x="48636" fg:w="986"/><text x="70.5586%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,383 samples, 4.89%)</title><rect x="68.4742%" y="245" width="4.8905%" height="15" fill="rgb(239,3,39)" fg:x="47367" fg:w="3383"/><text x="68.7242%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,128 samples, 1.63%)</title><rect x="71.7340%" y="229" width="1.6306%" height="15" fill="rgb(233,210,1)" fg:x="49622" fg:w="1128"/><text x="71.9840%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (49 samples, 0.07%)</title><rect x="73.3647%" y="245" width="0.0708%" height="15" fill="rgb(244,137,37)" fg:x="50750" fg:w="49"/><text x="73.6147%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (14,892 samples, 21.53%)</title><rect x="52.5002%" y="261" width="21.5280%" height="15" fill="rgb(240,136,2)" fg:x="36317" fg:w="14892"/><text x="52.7502%" y="271.50">rust_qecp`rust_qecp::union_find_de..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (410 samples, 0.59%)</title><rect x="73.4355%" y="245" width="0.5927%" height="15" fill="rgb(239,18,37)" fg:x="50799" fg:w="410"/><text x="73.6855%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="74.9924%" y="245" width="0.0304%" height="15" fill="rgb(218,185,22)" fg:x="51876" fg:w="21"/><text x="75.2424%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="75.1485%" y="197" width="0.0159%" height="15" fill="rgb(225,218,4)" fg:x="51984" fg:w="11"/><text x="75.3985%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.06%)</title><rect x="75.1095%" y="213" width="0.0593%" height="15" fill="rgb(230,182,32)" fg:x="51957" fg:w="41"/><text x="75.3595%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (62 samples, 0.09%)</title><rect x="75.0878%" y="229" width="0.0896%" height="15" fill="rgb(242,56,43)" fg:x="51942" fg:w="62"/><text x="75.3378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (109 samples, 0.16%)</title><rect x="75.0228%" y="245" width="0.1576%" height="15" fill="rgb(233,99,24)" fg:x="51897" fg:w="109"/><text x="75.2728%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="75.1803%" y="245" width="0.0159%" height="15" fill="rgb(234,209,42)" fg:x="52006" fg:w="11"/><text x="75.4303%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (54 samples, 0.08%)</title><rect x="75.2786%" y="229" width="0.0781%" height="15" fill="rgb(227,7,12)" fg:x="52074" fg:w="54"/><text x="75.5286%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (117 samples, 0.17%)</title><rect x="75.1962%" y="245" width="0.1691%" height="15" fill="rgb(245,203,43)" fg:x="52017" fg:w="117"/><text x="75.4462%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.02%)</title><rect x="75.3755%" y="245" width="0.0202%" height="15" fill="rgb(238,205,33)" fg:x="52141" fg:w="14"/><text x="75.6255%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="75.3798%" y="229" width="0.0159%" height="15" fill="rgb(231,56,7)" fg:x="52144" fg:w="11"/><text x="75.6298%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="75.3957%" y="245" width="0.0130%" height="15" fill="rgb(244,186,29)" fg:x="52155" fg:w="9"/><text x="75.6457%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (50 samples, 0.07%)</title><rect x="75.4087%" y="245" width="0.0723%" height="15" fill="rgb(234,111,31)" fg:x="52164" fg:w="50"/><text x="75.6587%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.01%)</title><rect x="75.4709%" y="229" width="0.0101%" height="15" fill="rgb(241,149,10)" fg:x="52207" fg:w="7"/><text x="75.7209%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="75.4709%" y="213" width="0.0101%" height="15" fill="rgb(249,206,44)" fg:x="52207" fg:w="7"/><text x="75.7209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="75.4825%" y="245" width="0.0145%" height="15" fill="rgb(251,153,30)" fg:x="52215" fg:w="10"/><text x="75.7325%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.03%)</title><rect x="75.4984%" y="245" width="0.0332%" height="15" fill="rgb(239,152,38)" fg:x="52226" fg:w="23"/><text x="75.7484%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (485 samples, 0.70%)</title><rect x="75.5490%" y="245" width="0.7011%" height="15" fill="rgb(249,139,47)" fg:x="52261" fg:w="485"/><text x="75.7990%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="76.2790%" y="165" width="0.0130%" height="15" fill="rgb(244,64,35)" fg:x="52766" fg:w="9"/><text x="76.5290%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="76.2732%" y="181" width="0.0202%" height="15" fill="rgb(216,46,15)" fg:x="52762" fg:w="14"/><text x="76.5232%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="76.2689%" y="197" width="0.0275%" height="15" fill="rgb(250,74,19)" fg:x="52759" fg:w="19"/><text x="76.5189%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.04%)</title><rect x="76.2617%" y="245" width="0.0405%" height="15" fill="rgb(249,42,33)" fg:x="52754" fg:w="28"/><text x="76.5117%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (27 samples, 0.04%)</title><rect x="76.2631%" y="229" width="0.0390%" height="15" fill="rgb(242,149,17)" fg:x="52755" fg:w="27"/><text x="76.5131%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.03%)</title><rect x="76.2674%" y="213" width="0.0347%" height="15" fill="rgb(244,29,21)" fg:x="52758" fg:w="24"/><text x="76.5174%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (956 samples, 1.38%)</title><rect x="76.3021%" y="245" width="1.3820%" height="15" fill="rgb(220,130,37)" fg:x="52782" fg:w="956"/><text x="76.5521%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (66 samples, 0.10%)</title><rect x="77.6841%" y="245" width="0.0954%" height="15" fill="rgb(211,67,2)" fg:x="53738" fg:w="66"/><text x="77.9341%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="77.7795%" y="245" width="0.0304%" height="15" fill="rgb(235,68,52)" fg:x="53804" fg:w="21"/><text x="78.0295%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="77.9545%" y="181" width="0.0231%" height="15" fill="rgb(246,142,3)" fg:x="53925" fg:w="16"/><text x="78.2045%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (38 samples, 0.05%)</title><rect x="77.9256%" y="197" width="0.0549%" height="15" fill="rgb(241,25,7)" fg:x="53905" fg:w="38"/><text x="78.1756%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (84 samples, 0.12%)</title><rect x="77.8634%" y="213" width="0.1214%" height="15" fill="rgb(242,119,39)" fg:x="53862" fg:w="84"/><text x="78.1134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="78.0007%" y="181" width="0.0116%" height="15" fill="rgb(241,98,45)" fg:x="53957" fg:w="8"/><text x="78.2507%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (150 samples, 0.22%)</title><rect x="77.8272%" y="229" width="0.2168%" height="15" fill="rgb(254,28,30)" fg:x="53837" fg:w="150"/><text x="78.0772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.06%)</title><rect x="77.9848%" y="213" width="0.0593%" height="15" fill="rgb(241,142,54)" fg:x="53946" fg:w="41"/><text x="78.2348%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.05%)</title><rect x="77.9949%" y="197" width="0.0492%" height="15" fill="rgb(222,85,15)" fg:x="53953" fg:w="34"/><text x="78.2449%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.03%)</title><rect x="78.0123%" y="181" width="0.0318%" height="15" fill="rgb(210,85,47)" fg:x="53965" fg:w="22"/><text x="78.2623%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (172 samples, 0.25%)</title><rect x="77.8099%" y="245" width="0.2486%" height="15" fill="rgb(224,206,25)" fg:x="53825" fg:w="172"/><text x="78.0599%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (13 samples, 0.02%)</title><rect x="78.0585%" y="245" width="0.0188%" height="15" fill="rgb(243,201,19)" fg:x="53997" fg:w="13"/><text x="78.3085%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (2,806 samples, 4.06%)</title><rect x="74.0282%" y="261" width="4.0564%" height="15" fill="rgb(236,59,4)" fg:x="51209" fg:w="2806"/><text x="74.2782%" y="271.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (44,953 samples, 64.98%)</title><rect x="13.1146%" y="293" width="64.9845%" height="15" fill="rgb(254,179,45)" fg:x="9072" fg:w="44953"/><text x="13.3646%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,774 samples, 63.28%)</title><rect x="14.8189%" y="277" width="63.2801%" height="15" fill="rgb(226,14,10)" fg:x="10251" fg:w="43774"/><text x="15.0689%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (10 samples, 0.01%)</title><rect x="78.0846%" y="261" width="0.0145%" height="15" fill="rgb(244,27,41)" fg:x="54015" fg:w="10"/><text x="78.3346%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,960 samples, 2.83%)</title><rect x="78.0990%" y="293" width="2.8334%" height="15" fill="rgb(235,35,32)" fg:x="54025" fg:w="1960"/><text x="78.3490%" y="303.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (269 samples, 0.39%)</title><rect x="80.9324%" y="293" width="0.3889%" height="15" fill="rgb(218,68,31)" fg:x="55985" fg:w="269"/><text x="81.1824%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (113 samples, 0.16%)</title><rect x="81.1579%" y="277" width="0.1634%" height="15" fill="rgb(207,120,37)" fg:x="56141" fg:w="113"/><text x="81.4079%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,074 samples, 10.23%)</title><rect x="81.3213%" y="293" width="10.2262%" height="15" fill="rgb(227,98,0)" fg:x="56254" fg:w="7074"/><text x="81.5713%" y="303.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (88 samples, 0.13%)</title><rect x="91.5519%" y="277" width="0.1272%" height="15" fill="rgb(207,7,3)" fg:x="63331" fg:w="88"/><text x="91.8019%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (447 samples, 0.65%)</title><rect x="91.5475%" y="293" width="0.6462%" height="15" fill="rgb(206,98,19)" fg:x="63328" fg:w="447"/><text x="91.7975%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (356 samples, 0.51%)</title><rect x="91.6791%" y="277" width="0.5146%" height="15" fill="rgb(217,5,26)" fg:x="63419" fg:w="356"/><text x="91.9291%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (53 samples, 0.08%)</title><rect x="92.1937%" y="293" width="0.0766%" height="15" fill="rgb(235,190,38)" fg:x="63775" fg:w="53"/><text x="92.4437%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (5,288 samples, 7.64%)</title><rect x="92.2761%" y="293" width="7.6444%" height="15" fill="rgb(247,86,24)" fg:x="63832" fg:w="5288"/><text x="92.5261%" y="303.50">rust_qecp`..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,743 samples, 5.41%)</title><rect x="94.5096%" y="277" width="5.4109%" height="15" fill="rgb(205,101,16)" fg:x="65377" fg:w="3743"/><text x="94.7596%" y="287.50">rust_qe..</text></g><g><title>all (69,175 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="69175"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,129 samples, 86.92%)</title><rect x="13.0770%" y="373" width="86.9230%" height="15" fill="rgb(231,114,1)" fg:x="9046" fg:w="60129"/><text x="13.3270%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,129 samples, 86.92%)</title><rect x="13.0770%" y="357" width="86.9230%" height="15" fill="rgb(207,184,53)" fg:x="9046" fg:w="60129"/><text x="13.3270%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,129 samples, 86.92%)</title><rect x="13.0770%" y="341" width="86.9230%" height="15" fill="rgb(224,95,51)" fg:x="9046" fg:w="60129"/><text x="13.3270%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,129 samples, 86.92%)</title><rect x="13.0770%" y="325" width="86.9230%" height="15" fill="rgb(212,188,45)" fg:x="9046" fg:w="60129"/><text x="13.3270%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,129 samples, 86.92%)</title><rect x="13.0770%" y="309" width="86.9230%" height="15" fill="rgb(223,154,38)" fg:x="9046" fg:w="60129"/><text x="13.3270%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (55 samples, 0.08%)</title><rect x="99.9205%" y="293" width="0.0795%" height="15" fill="rgb(251,22,52)" fg:x="69120" fg:w="55"/><text x="100.1705%" y="303.50"></text></g></svg></svg>