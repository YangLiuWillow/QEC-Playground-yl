<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61413"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.0081%" y="133" width="0.0147%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="9"/><text x="0.2581%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="0.0244%" y="53" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="7"/><text x="0.2744%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.0244%" y="37" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="7"/><text x="0.2744%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="0.0244%" y="133" width="0.0244%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="15"/><text x="0.2744%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (15 samples, 0.02%)</title><rect x="0.0244%" y="117" width="0.0244%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="15"/><text x="0.2744%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0244%" y="101" width="0.0244%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="15"/><text x="0.2744%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0244%" y="85" width="0.0244%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="15"/><text x="0.2744%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (15 samples, 0.02%)</title><rect x="0.0244%" y="69" width="0.0244%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="15"/><text x="0.2744%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0358%" y="53" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="8"/><text x="0.2858%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (10 samples, 0.02%)</title><rect x="0.0488%" y="133" width="0.0163%" height="15" fill="rgb(220,122,19)" fg:x="30" fg:w="10"/><text x="0.2988%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0488%" y="117" width="0.0163%" height="15" fill="rgb(250,228,42)" fg:x="30" fg:w="10"/><text x="0.2988%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0488%" y="101" width="0.0163%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="10"/><text x="0.2988%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (9 samples, 0.01%)</title><rect x="0.0505%" y="85" width="0.0147%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="9"/><text x="0.3005%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="0.0537%" y="69" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="7"/><text x="0.3037%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (52 samples, 0.08%)</title><rect x="0.0651%" y="133" width="0.0847%" height="15" fill="rgb(217,207,13)" fg:x="40" fg:w="52"/><text x="0.3151%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (30 samples, 0.05%)</title><rect x="0.1498%" y="133" width="0.0488%" height="15" fill="rgb(231,73,38)" fg:x="92" fg:w="30"/><text x="0.3998%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="0.8484%" y="117" width="0.0212%" height="15" fill="rgb(225,20,46)" fg:x="521" fg:w="13"/><text x="1.0984%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (34 samples, 0.06%)</title><rect x="0.8777%" y="117" width="0.0554%" height="15" fill="rgb(210,31,41)" fg:x="539" fg:w="34"/><text x="1.1277%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (58 samples, 0.09%)</title><rect x="0.9347%" y="117" width="0.0944%" height="15" fill="rgb(221,200,47)" fg:x="574" fg:w="58"/><text x="1.1847%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="1.0047%" y="101" width="0.0244%" height="15" fill="rgb(226,26,5)" fg:x="617" fg:w="15"/><text x="1.2547%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="1.0047%" y="85" width="0.0244%" height="15" fill="rgb(249,33,26)" fg:x="617" fg:w="15"/><text x="1.2547%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (19 samples, 0.03%)</title><rect x="1.3059%" y="101" width="0.0309%" height="15" fill="rgb(235,183,28)" fg:x="802" fg:w="19"/><text x="1.5559%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (46 samples, 0.07%)</title><rect x="1.3417%" y="101" width="0.0749%" height="15" fill="rgb(221,5,38)" fg:x="824" fg:w="46"/><text x="1.5917%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (249 samples, 0.41%)</title><rect x="1.0389%" y="117" width="0.4055%" height="15" fill="rgb(247,18,42)" fg:x="638" fg:w="249"/><text x="1.2889%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="1.4183%" y="101" width="0.0261%" height="15" fill="rgb(241,131,45)" fg:x="871" fg:w="16"/><text x="1.6683%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (761 samples, 1.24%)</title><rect x="0.2068%" y="133" width="1.2392%" height="15" fill="rgb(249,31,29)" fg:x="127" fg:w="761"/><text x="0.4568%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="1.4541%" y="117" width="0.0440%" height="15" fill="rgb(225,111,53)" fg:x="893" fg:w="27"/><text x="1.7041%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (119 samples, 0.19%)</title><rect x="1.5062%" y="117" width="0.1938%" height="15" fill="rgb(238,160,17)" fg:x="925" fg:w="119"/><text x="1.7562%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (50 samples, 0.08%)</title><rect x="1.6185%" y="101" width="0.0814%" height="15" fill="rgb(214,148,48)" fg:x="994" fg:w="50"/><text x="1.8685%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (159 samples, 0.26%)</title><rect x="1.4459%" y="133" width="0.2589%" height="15" fill="rgb(232,36,49)" fg:x="888" fg:w="159"/><text x="1.6959%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7114%" y="133" width="0.0114%" height="15" fill="rgb(209,103,24)" fg:x="1051" fg:w="7"/><text x="1.9614%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (7 samples, 0.01%)</title><rect x="1.7114%" y="117" width="0.0114%" height="15" fill="rgb(229,88,8)" fg:x="1051" fg:w="7"/><text x="1.9614%" y="127.50"></text></g><g><title>dyld`start (1,062 samples, 1.73%)</title><rect x="0.0000%" y="357" width="1.7293%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1062"/><text x="0.2500%" y="367.50"></text></g><g><title>rust_qecp`main (1,059 samples, 1.72%)</title><rect x="0.0049%" y="341" width="1.7244%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,059 samples, 1.72%)</title><rect x="0.0049%" y="325" width="1.7244%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="335.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,059 samples, 1.72%)</title><rect x="0.0049%" y="309" width="1.7244%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="319.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,059 samples, 1.72%)</title><rect x="0.0049%" y="293" width="1.7244%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::main (1,059 samples, 1.72%)</title><rect x="0.0049%" y="277" width="1.7244%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (1,059 samples, 1.72%)</title><rect x="0.0049%" y="261" width="1.7244%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="271.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,059 samples, 1.72%)</title><rect x="0.0049%" y="245" width="1.7244%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="255.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,059 samples, 1.72%)</title><rect x="0.0049%" y="229" width="1.7244%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 1.72%)</title><rect x="0.0049%" y="213" width="1.7244%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,059 samples, 1.72%)</title><rect x="0.0049%" y="197" width="1.7244%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 1.72%)</title><rect x="0.0049%" y="181" width="1.7244%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1059"/><text x="0.2549%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,058 samples, 1.72%)</title><rect x="0.0065%" y="165" width="1.7228%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1058"/><text x="0.2565%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,057 samples, 1.72%)</title><rect x="0.0081%" y="149" width="1.7211%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1057"/><text x="0.2581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="1.7407%" y="277" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="1069" fg:w="7"/><text x="1.9907%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="1.7521%" y="277" width="0.0130%" height="15" fill="rgb(250,191,14)" fg:x="1076" fg:w="8"/><text x="2.0021%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="1.7781%" y="277" width="0.0212%" height="15" fill="rgb(239,60,40)" fg:x="1092" fg:w="13"/><text x="2.0281%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (7 samples, 0.01%)</title><rect x="1.7879%" y="261" width="0.0114%" height="15" fill="rgb(206,27,48)" fg:x="1098" fg:w="7"/><text x="2.0379%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.02%)</title><rect x="1.8107%" y="261" width="0.0179%" height="15" fill="rgb(225,35,8)" fg:x="1112" fg:w="11"/><text x="2.0607%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (27 samples, 0.04%)</title><rect x="1.8579%" y="261" width="0.0440%" height="15" fill="rgb(250,213,24)" fg:x="1141" fg:w="27"/><text x="2.1079%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="1.9019%" y="261" width="0.0130%" height="15" fill="rgb(247,123,22)" fg:x="1168" fg:w="8"/><text x="2.1519%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.04%)</title><rect x="1.9149%" y="261" width="0.0440%" height="15" fill="rgb(231,138,38)" fg:x="1176" fg:w="27"/><text x="2.1649%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (54 samples, 0.09%)</title><rect x="1.9589%" y="261" width="0.0879%" height="15" fill="rgb(231,145,46)" fg:x="1203" fg:w="54"/><text x="2.2089%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (20 samples, 0.03%)</title><rect x="2.0142%" y="245" width="0.0326%" height="15" fill="rgb(251,118,11)" fg:x="1237" fg:w="20"/><text x="2.2642%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (18 samples, 0.03%)</title><rect x="2.0175%" y="229" width="0.0293%" height="15" fill="rgb(217,147,25)" fg:x="1239" fg:w="18"/><text x="2.2675%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="2.0207%" y="213" width="0.0261%" height="15" fill="rgb(247,81,37)" fg:x="1241" fg:w="16"/><text x="2.2707%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.02%)</title><rect x="2.0305%" y="197" width="0.0163%" height="15" fill="rgb(209,12,38)" fg:x="1247" fg:w="10"/><text x="2.2805%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="20.1277%" y="245" width="0.0342%" height="15" fill="rgb(227,1,9)" fg:x="12361" fg:w="21"/><text x="20.3777%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="20.1765%" y="213" width="0.0244%" height="15" fill="rgb(248,47,43)" fg:x="12391" fg:w="15"/><text x="20.4265%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="20.1619%" y="245" width="0.0456%" height="15" fill="rgb(221,10,30)" fg:x="12382" fg:w="28"/><text x="20.4119%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.04%)</title><rect x="20.1716%" y="229" width="0.0358%" height="15" fill="rgb(210,229,1)" fg:x="12388" fg:w="22"/><text x="20.4216%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.07%)</title><rect x="20.2107%" y="245" width="0.0749%" height="15" fill="rgb(222,148,37)" fg:x="12412" fg:w="46"/><text x="20.4607%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="20.2661%" y="229" width="0.0195%" height="15" fill="rgb(234,67,33)" fg:x="12446" fg:w="12"/><text x="20.5161%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="20.2970%" y="245" width="0.0147%" height="15" fill="rgb(247,98,35)" fg:x="12465" fg:w="9"/><text x="20.5470%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="20.3117%" y="245" width="0.0212%" height="15" fill="rgb(247,138,52)" fg:x="12474" fg:w="13"/><text x="20.5617%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="20.3426%" y="245" width="0.0391%" height="15" fill="rgb(213,79,30)" fg:x="12493" fg:w="24"/><text x="20.5926%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="20.3996%" y="229" width="0.0130%" height="15" fill="rgb(246,177,23)" fg:x="12528" fg:w="8"/><text x="20.6496%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (20 samples, 0.03%)</title><rect x="20.3849%" y="245" width="0.0326%" height="15" fill="rgb(230,62,27)" fg:x="12519" fg:w="20"/><text x="20.6349%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="20.4175%" y="213" width="0.0130%" height="15" fill="rgb(216,154,8)" fg:x="12539" fg:w="8"/><text x="20.6675%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="20.4191%" y="197" width="0.0114%" height="15" fill="rgb(244,35,45)" fg:x="12540" fg:w="7"/><text x="20.6691%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="20.4191%" y="181" width="0.0114%" height="15" fill="rgb(251,115,12)" fg:x="12540" fg:w="7"/><text x="20.6691%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="20.4550%" y="181" width="0.0228%" height="15" fill="rgb(240,54,50)" fg:x="12562" fg:w="14"/><text x="20.7050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.05%)</title><rect x="20.4354%" y="197" width="0.0456%" height="15" fill="rgb(233,84,52)" fg:x="12550" fg:w="28"/><text x="20.6854%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 0.07%)</title><rect x="20.4175%" y="245" width="0.0733%" height="15" fill="rgb(207,117,47)" fg:x="12539" fg:w="45"/><text x="20.6675%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (45 samples, 0.07%)</title><rect x="20.4175%" y="229" width="0.0733%" height="15" fill="rgb(249,43,39)" fg:x="12539" fg:w="45"/><text x="20.6675%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.06%)</title><rect x="20.4322%" y="213" width="0.0586%" height="15" fill="rgb(209,38,44)" fg:x="12548" fg:w="36"/><text x="20.6822%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="20.5706%" y="165" width="0.0163%" height="15" fill="rgb(236,212,23)" fg:x="12633" fg:w="10"/><text x="20.8206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="20.5754%" y="149" width="0.0114%" height="15" fill="rgb(242,79,21)" fg:x="12636" fg:w="7"/><text x="20.8254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (23 samples, 0.04%)</title><rect x="20.5510%" y="181" width="0.0375%" height="15" fill="rgb(211,96,35)" fg:x="12621" fg:w="23"/><text x="20.8010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (11 samples, 0.02%)</title><rect x="20.6178%" y="165" width="0.0179%" height="15" fill="rgb(253,215,40)" fg:x="12662" fg:w="11"/><text x="20.8678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="20.6438%" y="149" width="0.0195%" height="15" fill="rgb(211,81,21)" fg:x="12678" fg:w="12"/><text x="20.8938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="20.6373%" y="165" width="0.0277%" height="15" fill="rgb(208,190,38)" fg:x="12674" fg:w="17"/><text x="20.8873%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (56 samples, 0.09%)</title><rect x="20.5934%" y="181" width="0.0912%" height="15" fill="rgb(235,213,38)" fg:x="12647" fg:w="56"/><text x="20.8434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (158 samples, 0.26%)</title><rect x="20.5396%" y="197" width="0.2573%" height="15" fill="rgb(237,122,38)" fg:x="12614" fg:w="158"/><text x="20.7896%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.11%)</title><rect x="20.6862%" y="181" width="0.1107%" height="15" fill="rgb(244,218,35)" fg:x="12704" fg:w="68"/><text x="20.9362%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (202 samples, 0.33%)</title><rect x="20.4908%" y="245" width="0.3289%" height="15" fill="rgb(240,68,47)" fg:x="12584" fg:w="202"/><text x="20.7408%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (195 samples, 0.32%)</title><rect x="20.5022%" y="229" width="0.3175%" height="15" fill="rgb(210,16,53)" fg:x="12591" fg:w="195"/><text x="20.7522%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (180 samples, 0.29%)</title><rect x="20.5266%" y="213" width="0.2931%" height="15" fill="rgb(235,124,12)" fg:x="12606" fg:w="180"/><text x="20.7766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="22.2477%" y="197" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="13663" fg:w="7"/><text x="22.4977%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="22.2461%" y="229" width="0.0228%" height="15" fill="rgb(250,166,2)" fg:x="13662" fg:w="14"/><text x="22.4961%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="22.2477%" y="213" width="0.0212%" height="15" fill="rgb(242,216,29)" fg:x="13663" fg:w="13"/><text x="22.4977%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="22.2689%" y="229" width="0.0114%" height="15" fill="rgb(230,116,27)" fg:x="13676" fg:w="7"/><text x="22.5189%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (65 samples, 0.11%)</title><rect x="22.2803%" y="229" width="0.1058%" height="15" fill="rgb(228,99,48)" fg:x="13683" fg:w="65"/><text x="22.5303%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (63 samples, 0.10%)</title><rect x="22.2836%" y="213" width="0.1026%" height="15" fill="rgb(253,11,6)" fg:x="13685" fg:w="63"/><text x="22.5336%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (342 samples, 0.56%)</title><rect x="22.4041%" y="229" width="0.5569%" height="15" fill="rgb(247,143,39)" fg:x="13759" fg:w="342"/><text x="22.6541%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (66 samples, 0.11%)</title><rect x="23.1075%" y="213" width="0.1075%" height="15" fill="rgb(236,97,10)" fg:x="14191" fg:w="66"/><text x="23.3575%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.02%)</title><rect x="23.2182%" y="213" width="0.0228%" height="15" fill="rgb(233,208,19)" fg:x="14259" fg:w="14"/><text x="23.4682%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (834 samples, 1.36%)</title><rect x="23.2443%" y="213" width="1.3580%" height="15" fill="rgb(216,164,2)" fg:x="14275" fg:w="834"/><text x="23.4943%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (28 samples, 0.05%)</title><rect x="24.6023%" y="213" width="0.0456%" height="15" fill="rgb(220,129,5)" fg:x="15109" fg:w="28"/><text x="24.8523%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (7 samples, 0.01%)</title><rect x="24.6479%" y="213" width="0.0114%" height="15" fill="rgb(242,17,10)" fg:x="15137" fg:w="7"/><text x="24.8979%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (17 samples, 0.03%)</title><rect x="24.6593%" y="213" width="0.0277%" height="15" fill="rgb(242,107,0)" fg:x="15144" fg:w="17"/><text x="24.9093%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="24.6674%" y="197" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="15149" fg:w="12"/><text x="24.9174%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="24.6690%" y="181" width="0.0179%" height="15" fill="rgb(233,223,10)" fg:x="15150" fg:w="11"/><text x="24.9190%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (82 samples, 0.13%)</title><rect x="24.6870%" y="213" width="0.1335%" height="15" fill="rgb(215,21,27)" fg:x="15161" fg:w="82"/><text x="24.9370%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (322 samples, 0.52%)</title><rect x="24.9149%" y="197" width="0.5243%" height="15" fill="rgb(232,23,21)" fg:x="15301" fg:w="322"/><text x="25.1649%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (69 samples, 0.11%)</title><rect x="25.4392%" y="181" width="0.1124%" height="15" fill="rgb(244,5,23)" fg:x="15623" fg:w="69"/><text x="25.6892%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (70 samples, 0.11%)</title><rect x="25.4392%" y="197" width="0.1140%" height="15" fill="rgb(226,81,46)" fg:x="15623" fg:w="70"/><text x="25.6892%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (35 samples, 0.06%)</title><rect x="25.5581%" y="197" width="0.0570%" height="15" fill="rgb(247,70,30)" fg:x="15696" fg:w="35"/><text x="25.8081%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (10 samples, 0.02%)</title><rect x="26.1883%" y="149" width="0.0163%" height="15" fill="rgb(212,68,19)" fg:x="16083" fg:w="10"/><text x="26.4383%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (156 samples, 0.25%)</title><rect x="25.9538%" y="181" width="0.2540%" height="15" fill="rgb(240,187,13)" fg:x="15939" fg:w="156"/><text x="26.2038%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (12 samples, 0.02%)</title><rect x="26.1883%" y="165" width="0.0195%" height="15" fill="rgb(223,113,26)" fg:x="16083" fg:w="12"/><text x="26.4383%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (393 samples, 0.64%)</title><rect x="25.6151%" y="197" width="0.6399%" height="15" fill="rgb(206,192,2)" fg:x="15731" fg:w="393"/><text x="25.8651%" y="207.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (29 samples, 0.05%)</title><rect x="26.2078%" y="181" width="0.0472%" height="15" fill="rgb(241,108,4)" fg:x="16095" fg:w="29"/><text x="26.4578%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,061 samples, 3.36%)</title><rect x="26.4797%" y="181" width="3.3560%" height="15" fill="rgb(247,173,49)" fg:x="16262" fg:w="2061"/><text x="26.7297%" y="191.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,201 samples, 3.58%)</title><rect x="26.2550%" y="197" width="3.5839%" height="15" fill="rgb(224,114,35)" fg:x="16124" fg:w="2201"/><text x="26.5050%" y="207.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::Shrink (426 samples, 0.69%)</title><rect x="29.8390%" y="197" width="0.6937%" height="15" fill="rgb(245,159,27)" fg:x="18325" fg:w="426"/><text x="30.0890%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (7 samples, 0.01%)</title><rect x="30.5212%" y="181" width="0.0114%" height="15" fill="rgb(245,172,44)" fg:x="18744" fg:w="7"/><text x="30.7712%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (3,544 samples, 5.77%)</title><rect x="24.8221%" y="213" width="5.7708%" height="15" fill="rgb(236,23,11)" fg:x="15244" fg:w="3544"/><text x="25.0721%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (36 samples, 0.06%)</title><rect x="30.5343%" y="197" width="0.0586%" height="15" fill="rgb(205,117,38)" fg:x="18752" fg:w="36"/><text x="30.7843%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (23 samples, 0.04%)</title><rect x="30.5929%" y="213" width="0.0375%" height="15" fill="rgb(237,72,25)" fg:x="18788" fg:w="23"/><text x="30.8429%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (6,047 samples, 9.85%)</title><rect x="20.8311%" y="245" width="9.8464%" height="15" fill="rgb(244,70,9)" fg:x="12793" fg:w="6047"/><text x="21.0811%" y="255.50">rust_qecp`rust..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (4,738 samples, 7.71%)</title><rect x="22.9626%" y="229" width="7.7150%" height="15" fill="rgb(217,125,39)" fg:x="14102" fg:w="4738"/><text x="23.2126%" y="239.50">rust_qecp`m..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (29 samples, 0.05%)</title><rect x="30.6303%" y="213" width="0.0472%" height="15" fill="rgb(235,36,10)" fg:x="18811" fg:w="29"/><text x="30.8803%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="31.6692%" y="229" width="0.0440%" height="15" fill="rgb(251,123,47)" fg:x="19449" fg:w="27"/><text x="31.9192%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="31.6790%" y="213" width="0.0342%" height="15" fill="rgb(221,13,13)" fg:x="19455" fg:w="21"/><text x="31.9290%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="31.6871%" y="197" width="0.0261%" height="15" fill="rgb(238,131,9)" fg:x="19460" fg:w="16"/><text x="31.9371%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (18,220 samples, 29.67%)</title><rect x="2.0745%" y="261" width="29.6680%" height="15" fill="rgb(211,50,8)" fg:x="1274" fg:w="18220"/><text x="2.3245%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::dec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (654 samples, 1.06%)</title><rect x="30.6775%" y="245" width="1.0649%" height="15" fill="rgb(245,182,24)" fg:x="18840" fg:w="654"/><text x="30.9275%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.02%)</title><rect x="31.7180%" y="229" width="0.0244%" height="15" fill="rgb(242,14,37)" fg:x="19479" fg:w="15"/><text x="31.9680%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="31.7197%" y="213" width="0.0228%" height="15" fill="rgb(246,228,12)" fg:x="19480" fg:w="14"/><text x="31.9697%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="31.7229%" y="197" width="0.0195%" height="15" fill="rgb(213,55,15)" fg:x="19482" fg:w="12"/><text x="31.9729%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (18,608 samples, 30.30%)</title><rect x="1.8107%" y="277" width="30.2998%" height="15" fill="rgb(209,9,3)" fg:x="1112" fg:w="18608"/><text x="2.0607%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::deco..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (226 samples, 0.37%)</title><rect x="31.7425%" y="261" width="0.3680%" height="15" fill="rgb(230,59,30)" fg:x="19494" fg:w="226"/><text x="31.9925%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (4,713 samples, 7.67%)</title><rect x="32.1105%" y="277" width="7.6743%" height="15" fill="rgb(209,121,21)" fg:x="19720" fg:w="4713"/><text x="32.3605%" y="287.50">rust_qecp`r..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (17 samples, 0.03%)</title><rect x="40.5842%" y="261" width="0.0277%" height="15" fill="rgb(220,109,13)" fg:x="24924" fg:w="17"/><text x="40.8342%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.03%)</title><rect x="40.5859%" y="245" width="0.0261%" height="15" fill="rgb(232,18,1)" fg:x="24925" fg:w="16"/><text x="40.8359%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="40.5859%" y="229" width="0.0261%" height="15" fill="rgb(215,41,42)" fg:x="24925" fg:w="16"/><text x="40.8359%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.02%)</title><rect x="40.5891%" y="213" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="24927" fg:w="14"/><text x="40.8391%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (984 samples, 1.60%)</title><rect x="39.7847%" y="277" width="1.6023%" height="15" fill="rgb(240,125,3)" fg:x="24433" fg:w="984"/><text x="40.0347%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (476 samples, 0.78%)</title><rect x="40.6119%" y="261" width="0.7751%" height="15" fill="rgb(205,98,50)" fg:x="24941" fg:w="476"/><text x="40.8619%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (17,772 samples, 28.94%)</title><rect x="41.3870%" y="277" width="28.9385%" height="15" fill="rgb(205,185,37)" fg:x="25417" fg:w="17772"/><text x="41.6370%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::ge..</text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="70.3288%" y="261" width="0.0179%" height="15" fill="rgb(238,207,15)" fg:x="43191" fg:w="11"/><text x="70.5788%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (718 samples, 1.17%)</title><rect x="70.3483%" y="261" width="1.1691%" height="15" fill="rgb(213,199,42)" fg:x="43203" fg:w="718"/><text x="70.5983%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (18 samples, 0.03%)</title><rect x="72.7517%" y="229" width="0.0293%" height="15" fill="rgb(235,201,11)" fg:x="44679" fg:w="18"/><text x="73.0017%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="72.7517%" y="213" width="0.0293%" height="15" fill="rgb(207,46,11)" fg:x="44679" fg:w="18"/><text x="73.0017%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="72.7631%" y="197" width="0.0179%" height="15" fill="rgb(241,35,35)" fg:x="44686" fg:w="11"/><text x="73.0131%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,509 samples, 2.46%)</title><rect x="70.3255%" y="277" width="2.4571%" height="15" fill="rgb(243,32,47)" fg:x="43189" fg:w="1509"/><text x="70.5755%" y="287.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (777 samples, 1.27%)</title><rect x="71.5174%" y="261" width="1.2652%" height="15" fill="rgb(247,202,23)" fg:x="43921" fg:w="777"/><text x="71.7674%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (23 samples, 0.04%)</title><rect x="72.7452%" y="245" width="0.0375%" height="15" fill="rgb(219,102,11)" fg:x="44675" fg:w="23"/><text x="72.9952%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (16,703 samples, 27.20%)</title><rect x="72.7859%" y="277" width="27.1978%" height="15" fill="rgb(243,110,44)" fg:x="44700" fg:w="16703"/><text x="73.0359%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel:..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (12,310 samples, 20.04%)</title><rect x="79.9391%" y="261" width="20.0446%" height="15" fill="rgb(222,74,54)" fg:x="49093" fg:w="12310"/><text x="80.1891%" y="271.50">rust_qecp`rust_qecp::ftqec::Pla..</text></g><g><title>all (61,413 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="61413"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,351 samples, 98.27%)</title><rect x="1.7293%" y="357" width="98.2707%" height="15" fill="rgb(226,22,26)" fg:x="1062" fg:w="60351"/><text x="1.9793%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,351 samples, 98.27%)</title><rect x="1.7293%" y="341" width="98.2707%" height="15" fill="rgb(217,163,10)" fg:x="1062" fg:w="60351"/><text x="1.9793%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,351 samples, 98.27%)</title><rect x="1.7293%" y="325" width="98.2707%" height="15" fill="rgb(213,25,53)" fg:x="1062" fg:w="60351"/><text x="1.9793%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,351 samples, 98.27%)</title><rect x="1.7293%" y="309" width="98.2707%" height="15" fill="rgb(252,105,26)" fg:x="1062" fg:w="60351"/><text x="1.9793%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,347 samples, 98.26%)</title><rect x="1.7358%" y="293" width="98.2642%" height="15" fill="rgb(220,39,43)" fg:x="1066" fg:w="60347"/><text x="1.9858%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (10 samples, 0.02%)</title><rect x="99.9837%" y="277" width="0.0163%" height="15" fill="rgb(229,68,48)" fg:x="61403" fg:w="10"/><text x="100.2337%" y="287.50"></text></g></svg></svg>