<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="60281"><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (15 samples, 0.02%)</title><rect x="0.0100%" y="69" width="0.0249%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="15"/><text x="0.2600%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (52 samples, 0.09%)</title><rect x="0.0348%" y="69" width="0.0863%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="52"/><text x="0.2848%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (45 samples, 0.07%)</title><rect x="0.0464%" y="53" width="0.0747%" height="15" fill="rgb(221,193,54)" fg:x="28" fg:w="45"/><text x="0.2964%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16 samples, 0.03%)</title><rect x="0.0946%" y="37" width="0.0265%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="16"/><text x="0.3446%" y="47.50"></text></g><g><title>dyld`start (75 samples, 0.12%)</title><rect x="0.0000%" y="293" width="0.1244%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="75"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`main (73 samples, 0.12%)</title><rect x="0.0033%" y="277" width="0.1211%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="73"/><text x="0.2533%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (73 samples, 0.12%)</title><rect x="0.0033%" y="261" width="0.1211%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="73"/><text x="0.2533%" y="271.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (73 samples, 0.12%)</title><rect x="0.0033%" y="245" width="0.1211%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="73"/><text x="0.2533%" y="255.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (73 samples, 0.12%)</title><rect x="0.0033%" y="229" width="0.1211%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="73"/><text x="0.2533%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::main (73 samples, 0.12%)</title><rect x="0.0033%" y="213" width="0.1211%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="73"/><text x="0.2533%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (73 samples, 0.12%)</title><rect x="0.0033%" y="197" width="0.1211%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="73"/><text x="0.2533%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (73 samples, 0.12%)</title><rect x="0.0033%" y="181" width="0.1211%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="73"/><text x="0.2533%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (73 samples, 0.12%)</title><rect x="0.0033%" y="165" width="0.1211%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="73"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (73 samples, 0.12%)</title><rect x="0.0033%" y="149" width="0.1211%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="73"/><text x="0.2533%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (73 samples, 0.12%)</title><rect x="0.0033%" y="133" width="0.1211%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="73"/><text x="0.2533%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (73 samples, 0.12%)</title><rect x="0.0033%" y="117" width="0.1211%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="73"/><text x="0.2533%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (73 samples, 0.12%)</title><rect x="0.0033%" y="101" width="0.1211%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="73"/><text x="0.2533%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (73 samples, 0.12%)</title><rect x="0.0033%" y="85" width="0.1211%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="73"/><text x="0.2533%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="0.1344%" y="213" width="0.0133%" height="15" fill="rgb(221,200,47)" fg:x="81" fg:w="8"/><text x="0.3844%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="0.1476%" y="213" width="0.0315%" height="15" fill="rgb(226,26,5)" fg:x="89" fg:w="19"/><text x="0.3976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="0.1792%" y="213" width="0.0199%" height="15" fill="rgb(249,33,26)" fg:x="108" fg:w="12"/><text x="0.4292%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="0.1991%" y="213" width="0.0216%" height="15" fill="rgb(235,183,28)" fg:x="120" fg:w="13"/><text x="0.4491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="0.1991%" y="197" width="0.0216%" height="15" fill="rgb(221,5,38)" fg:x="120" fg:w="13"/><text x="0.4491%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="0.2206%" y="213" width="0.0182%" height="15" fill="rgb(247,18,42)" fg:x="133" fg:w="11"/><text x="0.4706%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="0.2389%" y="213" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="144" fg:w="7"/><text x="0.4889%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.04%)</title><rect x="0.2522%" y="213" width="0.0448%" height="15" fill="rgb(249,31,29)" fg:x="152" fg:w="27"/><text x="0.5022%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.10%)</title><rect x="0.3102%" y="213" width="0.0979%" height="15" fill="rgb(225,111,53)" fg:x="187" fg:w="59"/><text x="0.5602%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.09%)</title><rect x="0.4446%" y="197" width="0.0896%" height="15" fill="rgb(238,160,17)" fg:x="268" fg:w="54"/><text x="0.6946%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.04%)</title><rect x="0.4910%" y="181" width="0.0431%" height="15" fill="rgb(214,148,48)" fg:x="296" fg:w="26"/><text x="0.7410%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="0.5408%" y="197" width="0.0481%" height="15" fill="rgb(232,36,49)" fg:x="326" fg:w="29"/><text x="0.7908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (12 samples, 0.02%)</title><rect x="0.5690%" y="181" width="0.0199%" height="15" fill="rgb(209,103,24)" fg:x="343" fg:w="12"/><text x="0.8190%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="0.5690%" y="165" width="0.0199%" height="15" fill="rgb(229,88,8)" fg:x="343" fg:w="12"/><text x="0.8190%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.19%)</title><rect x="0.4081%" y="213" width="0.1858%" height="15" fill="rgb(213,181,19)" fg:x="246" fg:w="112"/><text x="0.6581%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="0.6271%" y="213" width="0.0265%" height="15" fill="rgb(254,191,54)" fg:x="378" fg:w="16"/><text x="0.8771%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.01%)</title><rect x="0.7216%" y="197" width="0.0133%" height="15" fill="rgb(241,83,37)" fg:x="435" fg:w="8"/><text x="0.9716%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="0.7548%" y="165" width="0.0232%" height="15" fill="rgb(233,36,39)" fg:x="455" fg:w="14"/><text x="1.0048%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="0.7648%" y="149" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="461" fg:w="8"/><text x="1.0148%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="0.7349%" y="197" width="0.0448%" height="15" fill="rgb(245,192,40)" fg:x="443" fg:w="27"/><text x="0.9849%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="0.7482%" y="181" width="0.0315%" height="15" fill="rgb(238,167,29)" fg:x="451" fg:w="19"/><text x="0.9982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.03%)</title><rect x="0.7797%" y="197" width="0.0265%" height="15" fill="rgb(232,182,51)" fg:x="470" fg:w="16"/><text x="1.0297%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="0.9008%" y="181" width="0.0265%" height="15" fill="rgb(231,60,39)" fg:x="543" fg:w="16"/><text x="1.1508%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (74 samples, 0.12%)</title><rect x="0.8062%" y="197" width="0.1228%" height="15" fill="rgb(208,69,12)" fg:x="486" fg:w="74"/><text x="1.0562%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="0.9323%" y="197" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="562" fg:w="7"/><text x="1.1823%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (30 samples, 0.05%)</title><rect x="0.9439%" y="197" width="0.0498%" height="15" fill="rgb(213,116,39)" fg:x="569" fg:w="30"/><text x="1.1939%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.04%)</title><rect x="0.9937%" y="197" width="0.0382%" height="15" fill="rgb(222,207,29)" fg:x="599" fg:w="23"/><text x="1.2437%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.09%)</title><rect x="1.0401%" y="197" width="0.0946%" height="15" fill="rgb(206,96,30)" fg:x="627" fg:w="57"/><text x="1.2901%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.09%)</title><rect x="1.1347%" y="197" width="0.0896%" height="15" fill="rgb(218,138,4)" fg:x="684" fg:w="54"/><text x="1.3847%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (327 samples, 0.54%)</title><rect x="1.2243%" y="197" width="0.5425%" height="15" fill="rgb(250,191,14)" fg:x="738" fg:w="327"/><text x="1.4743%" y="207.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (39 samples, 0.06%)</title><rect x="1.7667%" y="197" width="0.0647%" height="15" fill="rgb(239,60,40)" fg:x="1065" fg:w="39"/><text x="2.0167%" y="207.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (10 samples, 0.02%)</title><rect x="1.8148%" y="181" width="0.0166%" height="15" fill="rgb(206,27,48)" fg:x="1094" fg:w="10"/><text x="2.0648%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (29 samples, 0.05%)</title><rect x="1.8314%" y="197" width="0.0481%" height="15" fill="rgb(225,35,8)" fg:x="1104" fg:w="29"/><text x="2.0814%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="1.8828%" y="197" width="0.0116%" height="15" fill="rgb(250,213,24)" fg:x="1135" fg:w="7"/><text x="2.1328%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="1.9077%" y="133" width="0.0182%" height="15" fill="rgb(247,123,22)" fg:x="1150" fg:w="11"/><text x="2.1577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="1.9061%" y="149" width="0.0315%" height="15" fill="rgb(231,138,38)" fg:x="1149" fg:w="19"/><text x="2.1561%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.05%)</title><rect x="1.8961%" y="197" width="0.0464%" height="15" fill="rgb(231,145,46)" fg:x="1143" fg:w="28"/><text x="2.1461%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (26 samples, 0.04%)</title><rect x="1.8994%" y="181" width="0.0431%" height="15" fill="rgb(251,118,11)" fg:x="1145" fg:w="26"/><text x="2.1494%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.04%)</title><rect x="1.9028%" y="165" width="0.0398%" height="15" fill="rgb(217,147,25)" fg:x="1147" fg:w="24"/><text x="2.1528%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.07%)</title><rect x="1.9509%" y="197" width="0.0664%" height="15" fill="rgb(247,81,37)" fg:x="1176" fg:w="40"/><text x="2.2009%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (452 samples, 0.75%)</title><rect x="2.0172%" y="197" width="0.7498%" height="15" fill="rgb(209,12,38)" fg:x="1216" fg:w="452"/><text x="2.2672%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (33 samples, 0.05%)</title><rect x="2.7670%" y="197" width="0.0547%" height="15" fill="rgb(227,1,9)" fg:x="1668" fg:w="33"/><text x="3.0170%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="2.8218%" y="197" width="0.0382%" height="15" fill="rgb(248,47,43)" fg:x="1701" fg:w="23"/><text x="3.0718%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (8 samples, 0.01%)</title><rect x="2.8599%" y="197" width="0.0133%" height="15" fill="rgb(221,10,30)" fg:x="1724" fg:w="8"/><text x="3.1099%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (8 samples, 0.01%)</title><rect x="2.8732%" y="197" width="0.0133%" height="15" fill="rgb(210,229,1)" fg:x="1732" fg:w="8"/><text x="3.1232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.04%)</title><rect x="3.5301%" y="149" width="0.0365%" height="15" fill="rgb(222,148,37)" fg:x="2128" fg:w="22"/><text x="3.7801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="3.5417%" y="133" width="0.0249%" height="15" fill="rgb(234,67,33)" fg:x="2135" fg:w="15"/><text x="3.7917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="3.5152%" y="181" width="0.0531%" height="15" fill="rgb(247,98,35)" fg:x="2119" fg:w="32"/><text x="3.7652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.04%)</title><rect x="3.5285%" y="165" width="0.0398%" height="15" fill="rgb(247,138,52)" fg:x="2127" fg:w="24"/><text x="3.7785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="3.6098%" y="149" width="0.0149%" height="15" fill="rgb(213,79,30)" fg:x="2176" fg:w="9"/><text x="3.8598%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="3.6131%" y="133" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="2178" fg:w="7"/><text x="3.8631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="3.6280%" y="133" width="0.0199%" height="15" fill="rgb(230,62,27)" fg:x="2187" fg:w="12"/><text x="3.8780%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="3.6313%" y="117" width="0.0166%" height="15" fill="rgb(216,154,8)" fg:x="2189" fg:w="10"/><text x="3.8813%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 0.08%)</title><rect x="3.5766%" y="181" width="0.0796%" height="15" fill="rgb(244,35,45)" fg:x="2156" fg:w="48"/><text x="3.8266%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="3.6031%" y="165" width="0.0531%" height="15" fill="rgb(251,115,12)" fg:x="2172" fg:w="32"/><text x="3.8531%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="3.6263%" y="149" width="0.0299%" height="15" fill="rgb(240,54,50)" fg:x="2186" fg:w="18"/><text x="3.8763%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (467 samples, 0.77%)</title><rect x="2.8865%" y="197" width="0.7747%" height="15" fill="rgb(233,84,52)" fg:x="1740" fg:w="467"/><text x="3.1365%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (100 samples, 0.17%)</title><rect x="12.4683%" y="181" width="0.1659%" height="15" fill="rgb(207,117,47)" fg:x="7516" fg:w="100"/><text x="12.7183%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (89 samples, 0.15%)</title><rect x="12.6342%" y="181" width="0.1476%" height="15" fill="rgb(249,43,39)" fg:x="7616" fg:w="89"/><text x="12.8842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="12.7818%" y="181" width="0.0133%" height="15" fill="rgb(209,38,44)" fg:x="7705" fg:w="8"/><text x="13.0318%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (71 samples, 0.12%)</title><rect x="12.7951%" y="181" width="0.1178%" height="15" fill="rgb(236,212,23)" fg:x="7713" fg:w="71"/><text x="13.0451%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (78 samples, 0.13%)</title><rect x="13.2679%" y="165" width="0.1294%" height="15" fill="rgb(242,79,21)" fg:x="7998" fg:w="78"/><text x="13.5179%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (353 samples, 0.59%)</title><rect x="12.9129%" y="181" width="0.5856%" height="15" fill="rgb(211,96,35)" fg:x="7784" fg:w="353"/><text x="13.1629%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (53 samples, 0.09%)</title><rect x="13.4105%" y="165" width="0.0879%" height="15" fill="rgb(253,215,40)" fg:x="8084" fg:w="53"/><text x="13.6605%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (40 samples, 0.07%)</title><rect x="13.4321%" y="149" width="0.0664%" height="15" fill="rgb(211,81,21)" fg:x="8097" fg:w="40"/><text x="13.6821%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="13.5383%" y="165" width="0.0149%" height="15" fill="rgb(208,190,38)" fg:x="8161" fg:w="9"/><text x="13.7883%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (42 samples, 0.07%)</title><rect x="13.4984%" y="181" width="0.0697%" height="15" fill="rgb(235,213,38)" fg:x="8137" fg:w="42"/><text x="13.7484%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (57 samples, 0.09%)</title><rect x="13.8103%" y="149" width="0.0946%" height="15" fill="rgb(237,122,38)" fg:x="8325" fg:w="57"/><text x="14.0603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (243 samples, 0.40%)</title><rect x="13.5681%" y="181" width="0.4031%" height="15" fill="rgb(244,218,35)" fg:x="8179" fg:w="243"/><text x="13.8181%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (185 samples, 0.31%)</title><rect x="13.6643%" y="165" width="0.3069%" height="15" fill="rgb(240,68,47)" fg:x="8237" fg:w="185"/><text x="13.9143%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (40 samples, 0.07%)</title><rect x="13.9049%" y="149" width="0.0664%" height="15" fill="rgb(210,16,53)" fg:x="8382" fg:w="40"/><text x="14.1549%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (97 samples, 0.16%)</title><rect x="13.9729%" y="181" width="0.1609%" height="15" fill="rgb(235,124,12)" fg:x="8423" fg:w="97"/><text x="14.2229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (69 samples, 0.11%)</title><rect x="14.1338%" y="181" width="0.1145%" height="15" fill="rgb(224,169,11)" fg:x="8520" fg:w="69"/><text x="14.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.03%)</title><rect x="14.2483%" y="181" width="0.0332%" height="15" fill="rgb(250,166,2)" fg:x="8589" fg:w="20"/><text x="14.4983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (27 samples, 0.04%)</title><rect x="14.2831%" y="181" width="0.0448%" height="15" fill="rgb(242,216,29)" fg:x="8610" fg:w="27"/><text x="14.5331%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="14.3279%" y="181" width="0.0133%" height="15" fill="rgb(230,116,27)" fg:x="8637" fg:w="8"/><text x="14.5779%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="14.3412%" y="181" width="0.0199%" height="15" fill="rgb(228,99,48)" fg:x="8645" fg:w="12"/><text x="14.5912%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="14.3611%" y="181" width="0.0232%" height="15" fill="rgb(253,11,6)" fg:x="8657" fg:w="14"/><text x="14.6111%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (93 samples, 0.15%)</title><rect x="14.4490%" y="165" width="0.1543%" height="15" fill="rgb(247,143,39)" fg:x="8710" fg:w="93"/><text x="14.6990%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="14.5767%" y="149" width="0.0265%" height="15" fill="rgb(236,97,10)" fg:x="8787" fg:w="16"/><text x="14.8267%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (160 samples, 0.27%)</title><rect x="14.3860%" y="181" width="0.2654%" height="15" fill="rgb(233,208,19)" fg:x="8672" fg:w="160"/><text x="14.6360%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.05%)</title><rect x="14.6033%" y="165" width="0.0481%" height="15" fill="rgb(216,164,2)" fg:x="8803" fg:w="29"/><text x="14.8533%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (437 samples, 0.72%)</title><rect x="14.6514%" y="181" width="0.7249%" height="15" fill="rgb(220,129,5)" fg:x="8832" fg:w="437"/><text x="14.9014%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.07%)</title><rect x="15.3763%" y="181" width="0.0680%" height="15" fill="rgb(242,17,10)" fg:x="9269" fg:w="41"/><text x="15.6263%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (78 samples, 0.13%)</title><rect x="15.4443%" y="181" width="0.1294%" height="15" fill="rgb(242,107,0)" fg:x="9310" fg:w="78"/><text x="15.6943%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,997 samples, 3.31%)</title><rect x="15.5737%" y="181" width="3.3128%" height="15" fill="rgb(251,28,31)" fg:x="9388" fg:w="1997"/><text x="15.8237%" y="191.50">rus..</text></g><g><title>rust_qecp`DYLD-STUB$$free (66 samples, 0.11%)</title><rect x="18.8915%" y="181" width="0.1095%" height="15" fill="rgb(233,223,10)" fg:x="11388" fg:w="66"/><text x="19.1415%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (18 samples, 0.03%)</title><rect x="19.0010%" y="181" width="0.0299%" height="15" fill="rgb(215,21,27)" fg:x="11454" fg:w="18"/><text x="19.2510%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="19.0342%" y="181" width="0.0182%" height="15" fill="rgb(232,23,21)" fg:x="11474" fg:w="11"/><text x="19.2842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="19.0806%" y="133" width="0.0133%" height="15" fill="rgb(244,5,23)" fg:x="11502" fg:w="8"/><text x="19.3306%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="19.0657%" y="181" width="0.0315%" height="15" fill="rgb(226,81,46)" fg:x="11493" fg:w="19"/><text x="19.3157%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="19.0723%" y="165" width="0.0249%" height="15" fill="rgb(247,70,30)" fg:x="11497" fg:w="15"/><text x="19.3223%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="19.0790%" y="149" width="0.0182%" height="15" fill="rgb(212,68,19)" fg:x="11501" fg:w="11"/><text x="19.3290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="19.2266%" y="117" width="0.0232%" height="15" fill="rgb(240,187,13)" fg:x="11590" fg:w="14"/><text x="19.4766%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="19.2233%" y="133" width="0.0282%" height="15" fill="rgb(223,113,26)" fg:x="11588" fg:w="17"/><text x="19.4733%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.04%)</title><rect x="19.2183%" y="149" width="0.0398%" height="15" fill="rgb(206,192,2)" fg:x="11585" fg:w="24"/><text x="19.4683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="19.3510%" y="101" width="0.0116%" height="15" fill="rgb(241,108,4)" fg:x="11665" fg:w="7"/><text x="19.6010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="19.3627%" y="101" width="0.0265%" height="15" fill="rgb(247,173,49)" fg:x="11672" fg:w="16"/><text x="19.6127%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="19.3660%" y="85" width="0.0232%" height="15" fill="rgb(224,114,35)" fg:x="11674" fg:w="14"/><text x="19.6160%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="19.3759%" y="69" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="11680" fg:w="8"/><text x="19.6259%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="19.3958%" y="101" width="0.0365%" height="15" fill="rgb(245,172,44)" fg:x="11692" fg:w="22"/><text x="19.6458%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="19.3991%" y="85" width="0.0332%" height="15" fill="rgb(236,23,11)" fg:x="11694" fg:w="20"/><text x="19.6491%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="19.4124%" y="69" width="0.0199%" height="15" fill="rgb(205,117,38)" fg:x="11702" fg:w="12"/><text x="19.6624%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (63 samples, 0.10%)</title><rect x="19.3295%" y="117" width="0.1045%" height="15" fill="rgb(237,72,25)" fg:x="11652" fg:w="63"/><text x="19.5795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="19.4788%" y="85" width="0.0116%" height="15" fill="rgb(244,70,9)" fg:x="11742" fg:w="7"/><text x="19.7288%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (25 samples, 0.04%)</title><rect x="19.4555%" y="101" width="0.0415%" height="15" fill="rgb(217,125,39)" fg:x="11728" fg:w="25"/><text x="19.7055%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (27 samples, 0.04%)</title><rect x="19.4970%" y="101" width="0.0448%" height="15" fill="rgb(235,36,10)" fg:x="11753" fg:w="27"/><text x="19.7470%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (25 samples, 0.04%)</title><rect x="19.5003%" y="85" width="0.0415%" height="15" fill="rgb(251,123,47)" fg:x="11755" fg:w="25"/><text x="19.7503%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (13 samples, 0.02%)</title><rect x="19.5418%" y="101" width="0.0216%" height="15" fill="rgb(221,13,13)" fg:x="11780" fg:w="13"/><text x="19.7918%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="19.6015%" y="53" width="0.0133%" height="15" fill="rgb(238,131,9)" fg:x="11816" fg:w="8"/><text x="19.8515%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (36 samples, 0.06%)</title><rect x="19.5750%" y="85" width="0.0597%" height="15" fill="rgb(211,50,8)" fg:x="11800" fg:w="36"/><text x="19.8250%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (32 samples, 0.05%)</title><rect x="19.5816%" y="69" width="0.0531%" height="15" fill="rgb(245,182,24)" fg:x="11804" fg:w="32"/><text x="19.8316%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.07%)</title><rect x="19.5700%" y="101" width="0.0747%" height="15" fill="rgb(242,14,37)" fg:x="11797" fg:w="45"/><text x="19.8200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (126 samples, 0.21%)</title><rect x="19.4473%" y="117" width="0.2090%" height="15" fill="rgb(246,228,12)" fg:x="11723" fg:w="126"/><text x="19.6973%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (292 samples, 0.48%)</title><rect x="19.2980%" y="133" width="0.4844%" height="15" fill="rgb(213,55,15)" fg:x="11633" fg:w="292"/><text x="19.5480%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.12%)</title><rect x="19.6596%" y="117" width="0.1228%" height="15" fill="rgb(209,9,3)" fg:x="11851" fg:w="74"/><text x="19.9096%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="19.7824%" y="133" width="0.0265%" height="15" fill="rgb(230,59,30)" fg:x="11925" fg:w="16"/><text x="20.0324%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (348 samples, 0.58%)</title><rect x="19.2714%" y="149" width="0.5773%" height="15" fill="rgb(209,121,21)" fg:x="11617" fg:w="348"/><text x="19.5214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="19.8238%" y="133" width="0.0249%" height="15" fill="rgb(220,109,13)" fg:x="11950" fg:w="15"/><text x="20.0738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="19.8288%" y="117" width="0.0199%" height="15" fill="rgb(232,18,1)" fg:x="11953" fg:w="12"/><text x="20.0788%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (456 samples, 0.76%)</title><rect x="19.0972%" y="181" width="0.7565%" height="15" fill="rgb(215,41,42)" fg:x="11512" fg:w="456"/><text x="19.3472%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (390 samples, 0.65%)</title><rect x="19.2067%" y="165" width="0.6470%" height="15" fill="rgb(224,123,36)" fg:x="11578" fg:w="390"/><text x="19.4567%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="19.8537%" y="181" width="0.0182%" height="15" fill="rgb(240,125,3)" fg:x="11968" fg:w="11"/><text x="20.1037%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (13 samples, 0.02%)</title><rect x="19.9997%" y="165" width="0.0216%" height="15" fill="rgb(205,98,50)" fg:x="12056" fg:w="13"/><text x="20.2497%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (137 samples, 0.23%)</title><rect x="20.4177%" y="149" width="0.2273%" height="15" fill="rgb(205,185,37)" fg:x="12308" fg:w="137"/><text x="20.6677%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.05%)</title><rect x="20.6450%" y="149" width="0.0464%" height="15" fill="rgb(238,207,15)" fg:x="12445" fg:w="28"/><text x="20.8950%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (35 samples, 0.06%)</title><rect x="20.6914%" y="149" width="0.0581%" height="15" fill="rgb(213,199,42)" fg:x="12473" fg:w="35"/><text x="20.9414%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (534 samples, 0.89%)</title><rect x="20.0212%" y="165" width="0.8859%" height="15" fill="rgb(235,201,11)" fg:x="12069" fg:w="534"/><text x="20.2712%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (95 samples, 0.16%)</title><rect x="20.7495%" y="149" width="0.1576%" height="15" fill="rgb(207,46,11)" fg:x="12508" fg:w="95"/><text x="20.9995%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (72 samples, 0.12%)</title><rect x="20.7876%" y="133" width="0.1194%" height="15" fill="rgb(241,35,35)" fg:x="12531" fg:w="72"/><text x="21.0376%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (115 samples, 0.19%)</title><rect x="21.1791%" y="149" width="0.1908%" height="15" fill="rgb(243,32,47)" fg:x="12767" fg:w="115"/><text x="21.4291%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (21 samples, 0.03%)</title><rect x="21.3699%" y="149" width="0.0348%" height="15" fill="rgb(247,202,23)" fg:x="12882" fg:w="21"/><text x="21.6199%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (31 samples, 0.05%)</title><rect x="21.4048%" y="149" width="0.0514%" height="15" fill="rgb(219,102,11)" fg:x="12903" fg:w="31"/><text x="21.6548%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (541 samples, 0.90%)</title><rect x="20.9071%" y="165" width="0.8975%" height="15" fill="rgb(243,110,44)" fg:x="12603" fg:w="541"/><text x="21.1571%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (210 samples, 0.35%)</title><rect x="21.4562%" y="149" width="0.3484%" height="15" fill="rgb(222,74,54)" fg:x="12934" fg:w="210"/><text x="21.7062%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (72 samples, 0.12%)</title><rect x="22.0550%" y="133" width="0.1194%" height="15" fill="rgb(216,99,12)" fg:x="13295" fg:w="72"/><text x="22.3050%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (296 samples, 0.49%)</title><rect x="21.8045%" y="165" width="0.4910%" height="15" fill="rgb(226,22,26)" fg:x="13144" fg:w="296"/><text x="22.0545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (255 samples, 0.42%)</title><rect x="21.8726%" y="149" width="0.4230%" height="15" fill="rgb(217,163,10)" fg:x="13185" fg:w="255"/><text x="22.1226%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (73 samples, 0.12%)</title><rect x="22.1745%" y="133" width="0.1211%" height="15" fill="rgb(213,25,53)" fg:x="13367" fg:w="73"/><text x="22.4245%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.05%)</title><rect x="22.2956%" y="165" width="0.0531%" height="15" fill="rgb(252,105,26)" fg:x="13440" fg:w="32"/><text x="22.5456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (280 samples, 0.46%)</title><rect x="22.3487%" y="165" width="0.4645%" height="15" fill="rgb(220,39,43)" fg:x="13472" fg:w="280"/><text x="22.5987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (158 samples, 0.26%)</title><rect x="22.5511%" y="149" width="0.2621%" height="15" fill="rgb(229,68,48)" fg:x="13594" fg:w="158"/><text x="22.8011%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (158 samples, 0.26%)</title><rect x="22.5511%" y="133" width="0.2621%" height="15" fill="rgb(252,8,32)" fg:x="13594" fg:w="158"/><text x="22.8011%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (47 samples, 0.08%)</title><rect x="22.8132%" y="165" width="0.0780%" height="15" fill="rgb(223,20,43)" fg:x="13752" fg:w="47"/><text x="23.0632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="22.8994%" y="165" width="0.0149%" height="15" fill="rgb(229,81,49)" fg:x="13804" fg:w="9"/><text x="23.1494%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (37 samples, 0.06%)</title><rect x="22.9177%" y="165" width="0.0614%" height="15" fill="rgb(236,28,36)" fg:x="13815" fg:w="37"/><text x="23.1677%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="22.9790%" y="165" width="0.0299%" height="15" fill="rgb(249,185,26)" fg:x="13852" fg:w="18"/><text x="23.2290%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="23.0089%" y="165" width="0.0182%" height="15" fill="rgb(249,174,33)" fg:x="13870" fg:w="11"/><text x="23.2589%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.02%)</title><rect x="23.0272%" y="165" width="0.0166%" height="15" fill="rgb(233,201,37)" fg:x="13881" fg:w="10"/><text x="23.2772%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (104 samples, 0.17%)</title><rect x="23.0504%" y="149" width="0.1725%" height="15" fill="rgb(221,78,26)" fg:x="13895" fg:w="104"/><text x="23.3004%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.08%)</title><rect x="23.1416%" y="133" width="0.0813%" height="15" fill="rgb(250,127,30)" fg:x="13950" fg:w="49"/><text x="23.3916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="23.2229%" y="149" width="0.0149%" height="15" fill="rgb(230,49,44)" fg:x="13999" fg:w="9"/><text x="23.4729%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.06%)</title><rect x="23.2378%" y="149" width="0.0581%" height="15" fill="rgb(229,67,23)" fg:x="14008" fg:w="35"/><text x="23.4878%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,066 samples, 3.43%)</title><rect x="19.8753%" y="181" width="3.4273%" height="15" fill="rgb(249,83,47)" fg:x="11981" fg:w="2066"/><text x="20.1253%" y="191.50">rus..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (156 samples, 0.26%)</title><rect x="23.0437%" y="165" width="0.2588%" height="15" fill="rgb(215,43,3)" fg:x="13891" fg:w="156"/><text x="23.2937%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (113 samples, 0.19%)</title><rect x="23.3025%" y="181" width="0.1875%" height="15" fill="rgb(238,154,13)" fg:x="14047" fg:w="113"/><text x="23.5525%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (59 samples, 0.10%)</title><rect x="23.3921%" y="165" width="0.0979%" height="15" fill="rgb(219,56,2)" fg:x="14101" fg:w="59"/><text x="23.6421%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (9 samples, 0.01%)</title><rect x="23.4751%" y="149" width="0.0149%" height="15" fill="rgb(233,0,4)" fg:x="14151" fg:w="9"/><text x="23.7251%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (60 samples, 0.10%)</title><rect x="23.4900%" y="181" width="0.0995%" height="15" fill="rgb(235,30,7)" fg:x="14160" fg:w="60"/><text x="23.7400%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="24.8337%" y="165" width="0.0166%" height="15" fill="rgb(250,79,13)" fg:x="14970" fg:w="10"/><text x="25.0837%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.04%)</title><rect x="24.8503%" y="165" width="0.0365%" height="15" fill="rgb(211,146,34)" fg:x="14980" fg:w="22"/><text x="25.1003%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="24.8868%" y="165" width="0.0232%" height="15" fill="rgb(228,22,38)" fg:x="15002" fg:w="14"/><text x="25.1368%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="24.9183%" y="165" width="0.0216%" height="15" fill="rgb(235,168,5)" fg:x="15021" fg:w="13"/><text x="25.1683%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="25.6399%" y="149" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="15456" fg:w="8"/><text x="25.8899%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (66 samples, 0.11%)</title><rect x="25.7759%" y="133" width="0.1095%" height="15" fill="rgb(215,215,53)" fg:x="15538" fg:w="66"/><text x="26.0259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (142 samples, 0.24%)</title><rect x="25.6532%" y="149" width="0.2356%" height="15" fill="rgb(223,4,10)" fg:x="15464" fg:w="142"/><text x="25.9032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.04%)</title><rect x="25.8954%" y="149" width="0.0382%" height="15" fill="rgb(234,103,6)" fg:x="15610" fg:w="23"/><text x="26.1454%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="25.9335%" y="149" width="0.0149%" height="15" fill="rgb(227,97,0)" fg:x="15633" fg:w="9"/><text x="26.1835%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (44 samples, 0.07%)</title><rect x="25.9485%" y="149" width="0.0730%" height="15" fill="rgb(234,150,53)" fg:x="15642" fg:w="44"/><text x="26.1985%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (30 samples, 0.05%)</title><rect x="26.0215%" y="149" width="0.0498%" height="15" fill="rgb(228,201,54)" fg:x="15686" fg:w="30"/><text x="26.2715%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="26.0712%" y="149" width="0.0199%" height="15" fill="rgb(222,22,37)" fg:x="15716" fg:w="12"/><text x="26.3212%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="26.0911%" y="149" width="0.0199%" height="15" fill="rgb(237,53,32)" fg:x="15728" fg:w="12"/><text x="26.3411%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (89 samples, 0.15%)</title><rect x="26.8576%" y="101" width="0.1476%" height="15" fill="rgb(233,25,53)" fg:x="16190" fg:w="89"/><text x="27.1076%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="26.9571%" y="85" width="0.0481%" height="15" fill="rgb(210,40,34)" fg:x="16250" fg:w="29"/><text x="27.2071%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (145 samples, 0.24%)</title><rect x="26.7729%" y="117" width="0.2405%" height="15" fill="rgb(241,220,44)" fg:x="16139" fg:w="145"/><text x="27.0229%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (40 samples, 0.07%)</title><rect x="27.1362%" y="85" width="0.0664%" height="15" fill="rgb(235,28,35)" fg:x="16358" fg:w="40"/><text x="27.3862%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (315 samples, 0.52%)</title><rect x="27.0135%" y="117" width="0.5226%" height="15" fill="rgb(210,56,17)" fg:x="16284" fg:w="315"/><text x="27.2635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (296 samples, 0.49%)</title><rect x="27.0450%" y="101" width="0.4910%" height="15" fill="rgb(224,130,29)" fg:x="16303" fg:w="296"/><text x="27.2950%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (201 samples, 0.33%)</title><rect x="27.2026%" y="85" width="0.3334%" height="15" fill="rgb(235,212,8)" fg:x="16398" fg:w="201"/><text x="27.4526%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (107 samples, 0.18%)</title><rect x="27.3585%" y="69" width="0.1775%" height="15" fill="rgb(223,33,50)" fg:x="16492" fg:w="107"/><text x="27.6085%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (587 samples, 0.97%)</title><rect x="26.5805%" y="133" width="0.9738%" height="15" fill="rgb(219,149,13)" fg:x="16023" fg:w="587"/><text x="26.8305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="27.5360%" y="117" width="0.0182%" height="15" fill="rgb(250,156,29)" fg:x="16599" fg:w="11"/><text x="27.7860%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (37 samples, 0.06%)</title><rect x="27.5543%" y="133" width="0.0614%" height="15" fill="rgb(216,193,19)" fg:x="16610" fg:w="37"/><text x="27.8043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="27.6157%" y="133" width="0.0182%" height="15" fill="rgb(216,135,14)" fg:x="16647" fg:w="11"/><text x="27.8657%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (123 samples, 0.20%)</title><rect x="27.6422%" y="133" width="0.2040%" height="15" fill="rgb(241,47,5)" fg:x="16663" fg:w="123"/><text x="27.8922%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,986 samples, 3.29%)</title><rect x="24.9448%" y="165" width="3.2946%" height="15" fill="rgb(233,42,35)" fg:x="15037" fg:w="1986"/><text x="25.1948%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,280 samples, 2.12%)</title><rect x="26.1160%" y="149" width="2.1234%" height="15" fill="rgb(231,13,6)" fg:x="15743" fg:w="1280"/><text x="26.3660%" y="159.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (237 samples, 0.39%)</title><rect x="27.8463%" y="133" width="0.3932%" height="15" fill="rgb(207,181,40)" fg:x="16786" fg:w="237"/><text x="28.0963%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,820 samples, 4.68%)</title><rect x="23.5895%" y="181" width="4.6781%" height="15" fill="rgb(254,173,49)" fg:x="14220" fg:w="2820"/><text x="23.8395%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="28.2394%" y="165" width="0.0282%" height="15" fill="rgb(221,1,38)" fg:x="17023" fg:w="17"/><text x="28.4894%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,315 samples, 3.84%)</title><rect x="28.2676%" y="181" width="3.8403%" height="15" fill="rgb(206,124,46)" fg:x="17040" fg:w="2315"/><text x="28.5176%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (228 samples, 0.38%)</title><rect x="32.1080%" y="181" width="0.3782%" height="15" fill="rgb(249,21,11)" fg:x="19355" fg:w="228"/><text x="32.3580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.05%)</title><rect x="32.8346%" y="165" width="0.0498%" height="15" fill="rgb(222,201,40)" fg:x="19793" fg:w="30"/><text x="33.0846%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="32.8594%" y="149" width="0.0249%" height="15" fill="rgb(235,61,29)" fg:x="19808" fg:w="15"/><text x="33.1094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="32.8594%" y="133" width="0.0249%" height="15" fill="rgb(219,207,3)" fg:x="19808" fg:w="15"/><text x="33.1094%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.03%)</title><rect x="32.8843%" y="165" width="0.0265%" height="15" fill="rgb(222,56,46)" fg:x="19823" fg:w="16"/><text x="33.1343%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.02%)</title><rect x="32.9109%" y="165" width="0.0232%" height="15" fill="rgb(239,76,54)" fg:x="19839" fg:w="14"/><text x="33.1609%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="32.9109%" y="149" width="0.0232%" height="15" fill="rgb(231,124,27)" fg:x="19839" fg:w="14"/><text x="33.1609%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.03%)</title><rect x="32.9540%" y="165" width="0.0299%" height="15" fill="rgb(249,195,6)" fg:x="19865" fg:w="18"/><text x="33.2040%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (115 samples, 0.19%)</title><rect x="32.9839%" y="165" width="0.1908%" height="15" fill="rgb(237,174,47)" fg:x="19883" fg:w="115"/><text x="33.2339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="33.6341%" y="117" width="0.0216%" height="15" fill="rgb(206,201,31)" fg:x="20275" fg:w="13"/><text x="33.8841%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="33.6275%" y="133" width="0.0299%" height="15" fill="rgb(231,57,52)" fg:x="20271" fg:w="18"/><text x="33.8775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (25 samples, 0.04%)</title><rect x="33.6723%" y="117" width="0.0415%" height="15" fill="rgb(248,177,22)" fg:x="20298" fg:w="25"/><text x="33.9223%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (19 samples, 0.03%)</title><rect x="33.6823%" y="101" width="0.0315%" height="15" fill="rgb(215,211,37)" fg:x="20304" fg:w="19"/><text x="33.9323%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.14%)</title><rect x="33.6126%" y="149" width="0.1410%" height="15" fill="rgb(241,128,51)" fg:x="20262" fg:w="85"/><text x="33.8626%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (58 samples, 0.10%)</title><rect x="33.6574%" y="133" width="0.0962%" height="15" fill="rgb(227,165,31)" fg:x="20289" fg:w="58"/><text x="33.9074%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.04%)</title><rect x="33.7154%" y="117" width="0.0382%" height="15" fill="rgb(228,167,24)" fg:x="20324" fg:w="23"/><text x="33.9654%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.02%)</title><rect x="33.7304%" y="101" width="0.0232%" height="15" fill="rgb(228,143,12)" fg:x="20333" fg:w="14"/><text x="33.9804%" y="111.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (59 samples, 0.10%)</title><rect x="33.7536%" y="149" width="0.0979%" height="15" fill="rgb(249,149,8)" fg:x="20347" fg:w="59"/><text x="34.0036%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (283 samples, 0.47%)</title><rect x="33.8515%" y="149" width="0.4695%" height="15" fill="rgb(243,35,44)" fg:x="20406" fg:w="283"/><text x="34.1015%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,533 samples, 2.54%)</title><rect x="32.4862%" y="181" width="2.5431%" height="15" fill="rgb(246,89,9)" fg:x="19583" fg:w="1533"/><text x="32.7362%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,118 samples, 1.85%)</title><rect x="33.1746%" y="165" width="1.8546%" height="15" fill="rgb(233,213,13)" fg:x="19998" fg:w="1118"/><text x="33.4246%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (427 samples, 0.71%)</title><rect x="34.3209%" y="149" width="0.7083%" height="15" fill="rgb(233,141,41)" fg:x="20689" fg:w="427"/><text x="34.5709%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (40 samples, 0.07%)</title><rect x="35.0293%" y="181" width="0.0664%" height="15" fill="rgb(239,167,4)" fg:x="21116" fg:w="40"/><text x="35.2793%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.03%)</title><rect x="35.1056%" y="181" width="0.0299%" height="15" fill="rgb(209,217,16)" fg:x="21162" fg:w="18"/><text x="35.3556%" y="191.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (356 samples, 0.59%)</title><rect x="35.1371%" y="181" width="0.5906%" height="15" fill="rgb(219,88,35)" fg:x="21181" fg:w="356"/><text x="35.3871%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (517 samples, 0.86%)</title><rect x="37.6819%" y="149" width="0.8577%" height="15" fill="rgb(220,193,23)" fg:x="22715" fg:w="517"/><text x="37.9319%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,860 samples, 3.09%)</title><rect x="36.3829%" y="165" width="3.0855%" height="15" fill="rgb(230,90,52)" fg:x="21932" fg:w="1860"/><text x="36.6329%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (560 samples, 0.93%)</title><rect x="38.5395%" y="149" width="0.9290%" height="15" fill="rgb(252,106,19)" fg:x="23232" fg:w="560"/><text x="38.7895%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,398 samples, 3.98%)</title><rect x="35.7277%" y="181" width="3.9780%" height="15" fill="rgb(206,74,20)" fg:x="21537" fg:w="2398"/><text x="35.9777%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (143 samples, 0.24%)</title><rect x="39.4685%" y="165" width="0.2372%" height="15" fill="rgb(230,138,44)" fg:x="23792" fg:w="143"/><text x="39.7185%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,321 samples, 5.51%)</title><rect x="42.8775%" y="165" width="5.5092%" height="15" fill="rgb(235,182,43)" fg:x="25847" fg:w="3321"/><text x="43.1275%" y="175.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="48.4348%" y="85" width="0.0166%" height="15" fill="rgb(242,16,51)" fg:x="29197" fg:w="10"/><text x="48.6848%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="48.4348%" y="69" width="0.0166%" height="15" fill="rgb(248,9,4)" fg:x="29197" fg:w="10"/><text x="48.6848%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="48.4381%" y="53" width="0.0133%" height="15" fill="rgb(210,31,22)" fg:x="29199" fg:w="8"/><text x="48.6881%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.04%)</title><rect x="48.4133%" y="101" width="0.0398%" height="15" fill="rgb(239,54,39)" fg:x="29184" fg:w="24"/><text x="48.6633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.07%)</title><rect x="48.4000%" y="117" width="0.0747%" height="15" fill="rgb(230,99,41)" fg:x="29176" fg:w="45"/><text x="48.6500%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="48.4547%" y="101" width="0.0199%" height="15" fill="rgb(253,106,12)" fg:x="29209" fg:w="12"/><text x="48.7047%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (55 samples, 0.09%)</title><rect x="48.3950%" y="133" width="0.0912%" height="15" fill="rgb(213,46,41)" fg:x="29173" fg:w="55"/><text x="48.6450%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (61 samples, 0.10%)</title><rect x="48.3867%" y="165" width="0.1012%" height="15" fill="rgb(215,133,35)" fg:x="29168" fg:w="61"/><text x="48.6367%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (58 samples, 0.10%)</title><rect x="48.3917%" y="149" width="0.0962%" height="15" fill="rgb(213,28,5)" fg:x="29171" fg:w="58"/><text x="48.6417%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,866 samples, 3.10%)</title><rect x="48.4879%" y="165" width="3.0955%" height="15" fill="rgb(215,77,49)" fg:x="29229" fg:w="1866"/><text x="48.7379%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (82 samples, 0.14%)</title><rect x="51.5834%" y="165" width="0.1360%" height="15" fill="rgb(248,100,22)" fg:x="31095" fg:w="82"/><text x="51.8334%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="51.8123%" y="149" width="0.0116%" height="15" fill="rgb(208,67,9)" fg:x="31233" fg:w="7"/><text x="52.0623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="51.8240%" y="149" width="0.0182%" height="15" fill="rgb(219,133,21)" fg:x="31240" fg:w="11"/><text x="52.0740%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="51.8422%" y="149" width="0.0166%" height="15" fill="rgb(246,46,29)" fg:x="31251" fg:w="10"/><text x="52.0922%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="51.8439%" y="133" width="0.0149%" height="15" fill="rgb(246,185,52)" fg:x="31252" fg:w="9"/><text x="52.0939%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (60 samples, 0.10%)</title><rect x="51.8654%" y="149" width="0.0995%" height="15" fill="rgb(252,136,11)" fg:x="31265" fg:w="60"/><text x="52.1154%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="52.1839%" y="101" width="0.0149%" height="15" fill="rgb(219,138,53)" fg:x="31457" fg:w="9"/><text x="52.4339%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="52.1839%" y="133" width="0.0216%" height="15" fill="rgb(211,51,23)" fg:x="31457" fg:w="13"/><text x="52.4339%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="52.1839%" y="117" width="0.0216%" height="15" fill="rgb(247,221,28)" fg:x="31457" fg:w="13"/><text x="52.4339%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (244 samples, 0.40%)</title><rect x="52.2072%" y="133" width="0.4048%" height="15" fill="rgb(251,222,45)" fg:x="31471" fg:w="244"/><text x="52.4572%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (765 samples, 1.27%)</title><rect x="51.7194%" y="165" width="1.2691%" height="15" fill="rgb(217,162,53)" fg:x="31177" fg:w="765"/><text x="51.9694%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (617 samples, 1.02%)</title><rect x="51.9650%" y="149" width="1.0235%" height="15" fill="rgb(229,93,14)" fg:x="31325" fg:w="617"/><text x="52.2150%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (227 samples, 0.38%)</title><rect x="52.6119%" y="133" width="0.3766%" height="15" fill="rgb(209,67,49)" fg:x="31715" fg:w="227"/><text x="52.8619%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (7 samples, 0.01%)</title><rect x="55.8634%" y="69" width="0.0116%" height="15" fill="rgb(213,87,29)" fg:x="33675" fg:w="7"/><text x="56.1134%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.04%)</title><rect x="55.8484%" y="85" width="0.0382%" height="15" fill="rgb(205,151,52)" fg:x="33666" fg:w="23"/><text x="56.0984%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (40 samples, 0.07%)</title><rect x="55.8335%" y="101" width="0.0664%" height="15" fill="rgb(253,215,39)" fg:x="33657" fg:w="40"/><text x="56.0835%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="55.8866%" y="85" width="0.0133%" height="15" fill="rgb(221,220,41)" fg:x="33689" fg:w="8"/><text x="56.1366%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (58 samples, 0.10%)</title><rect x="55.8169%" y="149" width="0.0962%" height="15" fill="rgb(218,133,21)" fg:x="33647" fg:w="58"/><text x="56.0669%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.09%)</title><rect x="55.8269%" y="133" width="0.0863%" height="15" fill="rgb(221,193,43)" fg:x="33653" fg:w="52"/><text x="56.0769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (49 samples, 0.08%)</title><rect x="55.8319%" y="117" width="0.0813%" height="15" fill="rgb(240,128,52)" fg:x="33656" fg:w="49"/><text x="56.0819%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (9,771 samples, 16.21%)</title><rect x="39.7057%" y="181" width="16.2091%" height="15" fill="rgb(253,114,12)" fg:x="23935" fg:w="9771"/><text x="39.9557%" y="191.50">rust_qecp`rust_qecp::ftqe..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,764 samples, 2.93%)</title><rect x="52.9885%" y="165" width="2.9263%" height="15" fill="rgb(215,223,47)" fg:x="31942" fg:w="1764"/><text x="53.2385%" y="175.50">ru..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (15 samples, 0.02%)</title><rect x="55.9148%" y="181" width="0.0249%" height="15" fill="rgb(248,225,23)" fg:x="33706" fg:w="15"/><text x="56.1648%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (9 samples, 0.01%)</title><rect x="55.9397%" y="181" width="0.0149%" height="15" fill="rgb(250,108,0)" fg:x="33721" fg:w="9"/><text x="56.1897%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="57.6235%" y="85" width="0.0166%" height="15" fill="rgb(228,208,7)" fg:x="34736" fg:w="10"/><text x="57.8735%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (68 samples, 0.11%)</title><rect x="57.5355%" y="165" width="0.1128%" height="15" fill="rgb(244,45,10)" fg:x="34683" fg:w="68"/><text x="57.7855%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.03%)</title><rect x="57.6152%" y="149" width="0.0332%" height="15" fill="rgb(207,125,25)" fg:x="34731" fg:w="20"/><text x="57.8652%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="57.6168%" y="133" width="0.0315%" height="15" fill="rgb(210,195,18)" fg:x="34732" fg:w="19"/><text x="57.8668%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="57.6185%" y="117" width="0.0299%" height="15" fill="rgb(249,80,12)" fg:x="34733" fg:w="18"/><text x="57.8685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="57.6218%" y="101" width="0.0265%" height="15" fill="rgb(221,65,9)" fg:x="34735" fg:w="16"/><text x="57.8718%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="57.6666%" y="133" width="0.0133%" height="15" fill="rgb(235,49,36)" fg:x="34762" fg:w="8"/><text x="57.9166%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (24 samples, 0.04%)</title><rect x="57.6799%" y="133" width="0.0398%" height="15" fill="rgb(225,32,20)" fg:x="34770" fg:w="24"/><text x="57.9299%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.07%)</title><rect x="57.6566%" y="149" width="0.0713%" height="15" fill="rgb(215,141,46)" fg:x="34756" fg:w="43"/><text x="57.9066%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (61 samples, 0.10%)</title><rect x="57.6500%" y="165" width="0.1012%" height="15" fill="rgb(250,160,47)" fg:x="34752" fg:w="61"/><text x="57.9000%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="57.7330%" y="149" width="0.0182%" height="15" fill="rgb(216,222,40)" fg:x="34802" fg:w="11"/><text x="57.9830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="57.7396%" y="133" width="0.0116%" height="15" fill="rgb(234,217,39)" fg:x="34806" fg:w="7"/><text x="57.9896%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.7396%" y="117" width="0.0116%" height="15" fill="rgb(207,178,40)" fg:x="34806" fg:w="7"/><text x="57.9896%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.7396%" y="101" width="0.0116%" height="15" fill="rgb(221,136,13)" fg:x="34806" fg:w="7"/><text x="57.9896%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="57.7396%" y="85" width="0.0116%" height="15" fill="rgb(249,199,10)" fg:x="34806" fg:w="7"/><text x="57.9896%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (40 samples, 0.07%)</title><rect x="57.7512%" y="149" width="0.0664%" height="15" fill="rgb(249,222,13)" fg:x="34813" fg:w="40"/><text x="58.0012%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="57.8176%" y="149" width="0.0216%" height="15" fill="rgb(244,185,38)" fg:x="34853" fg:w="13"/><text x="58.0676%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (15 samples, 0.02%)</title><rect x="57.8391%" y="149" width="0.0249%" height="15" fill="rgb(236,202,9)" fg:x="34866" fg:w="15"/><text x="58.0891%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.03%)</title><rect x="57.8640%" y="149" width="0.0282%" height="15" fill="rgb(250,229,37)" fg:x="34881" fg:w="17"/><text x="58.1140%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="57.8922%" y="149" width="0.0315%" height="15" fill="rgb(206,174,23)" fg:x="34898" fg:w="19"/><text x="58.1422%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="57.9237%" y="149" width="0.0149%" height="15" fill="rgb(211,33,43)" fg:x="34917" fg:w="9"/><text x="58.1737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="58.1991%" y="117" width="0.0282%" height="15" fill="rgb(245,58,50)" fg:x="35083" fg:w="17"/><text x="58.4491%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (223 samples, 0.37%)</title><rect x="58.3202%" y="101" width="0.3699%" height="15" fill="rgb(244,68,36)" fg:x="35156" fg:w="223"/><text x="58.5702%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (81 samples, 0.13%)</title><rect x="58.5558%" y="85" width="0.1344%" height="15" fill="rgb(232,229,15)" fg:x="35298" fg:w="81"/><text x="58.8058%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (424 samples, 0.70%)</title><rect x="58.0216%" y="133" width="0.7034%" height="15" fill="rgb(254,30,23)" fg:x="34976" fg:w="424"/><text x="58.2716%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (300 samples, 0.50%)</title><rect x="58.2273%" y="117" width="0.4977%" height="15" fill="rgb(235,160,14)" fg:x="35100" fg:w="300"/><text x="58.4773%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.03%)</title><rect x="58.6901%" y="101" width="0.0348%" height="15" fill="rgb(212,155,44)" fg:x="35379" fg:w="21"/><text x="58.9401%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.05%)</title><rect x="58.7250%" y="133" width="0.0514%" height="15" fill="rgb(226,2,50)" fg:x="35400" fg:w="31"/><text x="58.9750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (64 samples, 0.11%)</title><rect x="58.9207%" y="117" width="0.1062%" height="15" fill="rgb(234,177,6)" fg:x="35518" fg:w="64"/><text x="59.1707%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (152 samples, 0.25%)</title><rect x="58.7764%" y="133" width="0.2522%" height="15" fill="rgb(217,24,9)" fg:x="35431" fg:w="152"/><text x="59.0264%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="59.0285%" y="133" width="0.0149%" height="15" fill="rgb(220,13,46)" fg:x="35583" fg:w="9"/><text x="59.2785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="59.0435%" y="133" width="0.0531%" height="15" fill="rgb(239,221,27)" fg:x="35592" fg:w="32"/><text x="59.2935%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="59.0966%" y="133" width="0.0216%" height="15" fill="rgb(222,198,25)" fg:x="35624" fg:w="13"/><text x="59.3466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="59.1181%" y="133" width="0.0265%" height="15" fill="rgb(211,99,13)" fg:x="35637" fg:w="16"/><text x="59.3681%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (121 samples, 0.20%)</title><rect x="59.2177%" y="117" width="0.2007%" height="15" fill="rgb(232,111,31)" fg:x="35697" fg:w="121"/><text x="59.4677%" y="127.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="59.4184%" y="117" width="0.0116%" height="15" fill="rgb(245,82,37)" fg:x="35818" fg:w="7"/><text x="59.6684%" y="127.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="59.4350%" y="117" width="0.0116%" height="15" fill="rgb(227,149,46)" fg:x="35828" fg:w="7"/><text x="59.6850%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 0.06%)</title><rect x="59.4798%" y="101" width="0.0630%" height="15" fill="rgb(218,36,50)" fg:x="35855" fg:w="38"/><text x="59.7298%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (68 samples, 0.11%)</title><rect x="59.5428%" y="101" width="0.1128%" height="15" fill="rgb(226,80,48)" fg:x="35893" fg:w="68"/><text x="59.7928%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (140 samples, 0.23%)</title><rect x="59.4466%" y="117" width="0.2322%" height="15" fill="rgb(238,224,15)" fg:x="35835" fg:w="140"/><text x="59.6966%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="59.6556%" y="101" width="0.0232%" height="15" fill="rgb(241,136,10)" fg:x="35961" fg:w="14"/><text x="59.9056%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="59.6788%" y="117" width="0.0232%" height="15" fill="rgb(208,32,45)" fg:x="35975" fg:w="14"/><text x="59.9288%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="59.8713%" y="85" width="0.0149%" height="15" fill="rgb(207,135,9)" fg:x="36091" fg:w="9"/><text x="60.1213%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (96 samples, 0.16%)</title><rect x="59.9260%" y="69" width="0.1593%" height="15" fill="rgb(206,86,44)" fg:x="36124" fg:w="96"/><text x="60.1760%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="60.0289%" y="53" width="0.0564%" height="15" fill="rgb(245,177,15)" fg:x="36186" fg:w="34"/><text x="60.2789%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (180 samples, 0.30%)</title><rect x="59.8149%" y="101" width="0.2986%" height="15" fill="rgb(206,64,50)" fg:x="36057" fg:w="180"/><text x="60.0649%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (137 samples, 0.23%)</title><rect x="59.8862%" y="85" width="0.2273%" height="15" fill="rgb(234,36,40)" fg:x="36100" fg:w="137"/><text x="60.1362%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="60.0853%" y="69" width="0.0282%" height="15" fill="rgb(213,64,8)" fg:x="36220" fg:w="17"/><text x="60.3353%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="60.1135%" y="101" width="0.0249%" height="15" fill="rgb(210,75,36)" fg:x="36237" fg:w="15"/><text x="60.3635%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (600 samples, 1.00%)</title><rect x="59.1447%" y="133" width="0.9953%" height="15" fill="rgb(229,88,21)" fg:x="35653" fg:w="600"/><text x="59.3947%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (264 samples, 0.44%)</title><rect x="59.7021%" y="117" width="0.4379%" height="15" fill="rgb(252,204,47)" fg:x="35989" fg:w="264"/><text x="59.9521%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.07%)</title><rect x="60.2296%" y="117" width="0.0730%" height="15" fill="rgb(208,77,27)" fg:x="36307" fg:w="44"/><text x="60.4796%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (89 samples, 0.15%)</title><rect x="60.3026%" y="117" width="0.1476%" height="15" fill="rgb(221,76,26)" fg:x="36351" fg:w="89"/><text x="60.5526%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (218 samples, 0.36%)</title><rect x="60.1400%" y="133" width="0.3616%" height="15" fill="rgb(225,139,18)" fg:x="36253" fg:w="218"/><text x="60.3900%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.05%)</title><rect x="60.4502%" y="117" width="0.0514%" height="15" fill="rgb(230,137,11)" fg:x="36440" fg:w="31"/><text x="60.7002%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="60.5017%" y="133" width="0.0182%" height="15" fill="rgb(212,28,1)" fg:x="36471" fg:w="11"/><text x="60.7517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,565 samples, 2.60%)</title><rect x="57.9387%" y="149" width="2.5962%" height="15" fill="rgb(248,164,17)" fg:x="34926" fg:w="1565"/><text x="58.1887%" y="159.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="60.5199%" y="133" width="0.0149%" height="15" fill="rgb(222,171,42)" fg:x="36482" fg:w="9"/><text x="60.7699%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.02%)</title><rect x="60.5348%" y="149" width="0.0182%" height="15" fill="rgb(243,84,45)" fg:x="36491" fg:w="11"/><text x="60.7848%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="60.5531%" y="149" width="0.0133%" height="15" fill="rgb(252,49,23)" fg:x="36502" fg:w="8"/><text x="60.8031%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="60.5663%" y="149" width="0.0265%" height="15" fill="rgb(215,19,7)" fg:x="36510" fg:w="16"/><text x="60.8163%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="60.5929%" y="149" width="0.0199%" height="15" fill="rgb(238,81,41)" fg:x="36526" fg:w="12"/><text x="60.8429%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.03%)</title><rect x="60.6145%" y="149" width="0.0282%" height="15" fill="rgb(210,199,37)" fg:x="36539" fg:w="17"/><text x="60.8645%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="60.6427%" y="149" width="0.0116%" height="15" fill="rgb(244,192,49)" fg:x="36556" fg:w="7"/><text x="60.8927%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,752 samples, 2.91%)</title><rect x="57.7512%" y="165" width="2.9064%" height="15" fill="rgb(226,211,11)" fg:x="34813" fg:w="1752"/><text x="58.0012%" y="175.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="60.6642%" y="117" width="0.0249%" height="15" fill="rgb(236,162,54)" fg:x="36569" fg:w="15"/><text x="60.9142%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="60.6709%" y="101" width="0.0182%" height="15" fill="rgb(220,229,9)" fg:x="36573" fg:w="11"/><text x="60.9209%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="60.6609%" y="133" width="0.0299%" height="15" fill="rgb(250,87,22)" fg:x="36567" fg:w="18"/><text x="60.9109%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="60.6576%" y="165" width="0.0348%" height="15" fill="rgb(239,43,17)" fg:x="36565" fg:w="21"/><text x="60.9076%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="60.6592%" y="149" width="0.0332%" height="15" fill="rgb(231,177,25)" fg:x="36566" fg:w="20"/><text x="60.9092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="60.8683%" y="149" width="0.0265%" height="15" fill="rgb(219,179,1)" fg:x="36692" fg:w="16"/><text x="61.1183%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.04%)</title><rect x="60.8948%" y="149" width="0.0415%" height="15" fill="rgb(238,219,53)" fg:x="36708" fg:w="25"/><text x="61.1448%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="60.9363%" y="149" width="0.0182%" height="15" fill="rgb(232,167,36)" fg:x="36733" fg:w="11"/><text x="61.1863%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (33 samples, 0.05%)</title><rect x="60.9545%" y="149" width="0.0547%" height="15" fill="rgb(244,19,51)" fg:x="36744" fg:w="33"/><text x="61.2045%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="61.0093%" y="149" width="0.0149%" height="15" fill="rgb(224,6,22)" fg:x="36777" fg:w="9"/><text x="61.2593%" y="159.50"></text></g><g><title>rust_qecp`__rdl_realloc (10 samples, 0.02%)</title><rect x="61.0242%" y="149" width="0.0166%" height="15" fill="rgb(224,145,5)" fg:x="36786" fg:w="10"/><text x="61.2742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (113 samples, 0.19%)</title><rect x="61.2830%" y="101" width="0.1875%" height="15" fill="rgb(234,130,49)" fg:x="36942" fg:w="113"/><text x="61.5330%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="61.4140%" y="85" width="0.0564%" height="15" fill="rgb(254,6,2)" fg:x="37021" fg:w="34"/><text x="61.6640%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (228 samples, 0.38%)</title><rect x="61.1071%" y="133" width="0.3782%" height="15" fill="rgb(208,96,46)" fg:x="36836" fg:w="228"/><text x="61.3571%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (153 samples, 0.25%)</title><rect x="61.2316%" y="117" width="0.2538%" height="15" fill="rgb(239,3,39)" fg:x="36911" fg:w="153"/><text x="61.4816%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="61.4704%" y="101" width="0.0149%" height="15" fill="rgb(233,210,1)" fg:x="37055" fg:w="9"/><text x="61.7204%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="61.4854%" y="133" width="0.0216%" height="15" fill="rgb(244,137,37)" fg:x="37064" fg:w="13"/><text x="61.7354%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="61.5069%" y="133" width="0.0216%" height="15" fill="rgb(240,136,2)" fg:x="37077" fg:w="13"/><text x="61.7569%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="61.5302%" y="133" width="0.0315%" height="15" fill="rgb(239,18,37)" fg:x="37091" fg:w="19"/><text x="61.7802%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (27 samples, 0.04%)</title><rect x="61.6977%" y="117" width="0.0448%" height="15" fill="rgb(218,185,22)" fg:x="37192" fg:w="27"/><text x="61.9477%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (18 samples, 0.03%)</title><rect x="61.8537%" y="101" width="0.0299%" height="15" fill="rgb(225,218,4)" fg:x="37286" fg:w="18"/><text x="62.1037%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (22 samples, 0.04%)</title><rect x="61.8835%" y="101" width="0.0365%" height="15" fill="rgb(230,182,32)" fg:x="37304" fg:w="22"/><text x="62.1335%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.04%)</title><rect x="61.9200%" y="101" width="0.0398%" height="15" fill="rgb(242,56,43)" fg:x="37326" fg:w="24"/><text x="62.1700%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (110 samples, 0.18%)</title><rect x="61.9665%" y="101" width="0.1825%" height="15" fill="rgb(233,99,24)" fg:x="37354" fg:w="110"/><text x="62.2165%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="62.2966%" y="85" width="0.0182%" height="15" fill="rgb(234,209,42)" fg:x="37553" fg:w="11"/><text x="62.5466%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="62.3148%" y="85" width="0.0448%" height="15" fill="rgb(227,7,12)" fg:x="37564" fg:w="27"/><text x="62.5648%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (90 samples, 0.15%)</title><rect x="62.3596%" y="85" width="0.1493%" height="15" fill="rgb(245,203,43)" fg:x="37591" fg:w="90"/><text x="62.6096%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (58 samples, 0.10%)</title><rect x="62.7312%" y="53" width="0.0962%" height="15" fill="rgb(238,205,33)" fg:x="37815" fg:w="58"/><text x="62.9812%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (175 samples, 0.29%)</title><rect x="62.5520%" y="69" width="0.2903%" height="15" fill="rgb(231,56,7)" fg:x="37707" fg:w="175"/><text x="62.8020%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.01%)</title><rect x="62.8274%" y="53" width="0.0149%" height="15" fill="rgb(244,186,29)" fg:x="37873" fg:w="9"/><text x="63.0774%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (213 samples, 0.35%)</title><rect x="62.5089%" y="85" width="0.3533%" height="15" fill="rgb(234,111,31)" fg:x="37681" fg:w="213"/><text x="62.7589%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="62.8424%" y="69" width="0.0199%" height="15" fill="rgb(241,149,10)" fg:x="37882" fg:w="12"/><text x="63.0924%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (74 samples, 0.12%)</title><rect x="62.8623%" y="85" width="0.1228%" height="15" fill="rgb(249,206,44)" fg:x="37894" fg:w="74"/><text x="63.1123%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="63.0680%" y="53" width="0.0265%" height="15" fill="rgb(251,153,30)" fg:x="38018" fg:w="16"/><text x="63.3180%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (123 samples, 0.20%)</title><rect x="62.9850%" y="85" width="0.2040%" height="15" fill="rgb(239,152,38)" fg:x="37968" fg:w="123"/><text x="63.2350%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (109 samples, 0.18%)</title><rect x="63.0082%" y="69" width="0.1808%" height="15" fill="rgb(249,139,47)" fg:x="37982" fg:w="109"/><text x="63.2582%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (57 samples, 0.09%)</title><rect x="63.0945%" y="53" width="0.0946%" height="15" fill="rgb(244,64,35)" fg:x="38034" fg:w="57"/><text x="63.3445%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (634 samples, 1.05%)</title><rect x="62.1489%" y="101" width="1.0517%" height="15" fill="rgb(216,46,15)" fg:x="37464" fg:w="634"/><text x="62.3989%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="63.1891%" y="85" width="0.0116%" height="15" fill="rgb(250,74,19)" fg:x="38091" fg:w="7"/><text x="63.4391%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="63.2007%" y="101" width="0.0133%" height="15" fill="rgb(249,42,33)" fg:x="38098" fg:w="8"/><text x="63.4507%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (950 samples, 1.58%)</title><rect x="61.7425%" y="117" width="1.5760%" height="15" fill="rgb(242,149,17)" fg:x="37219" fg:w="950"/><text x="61.9925%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.10%)</title><rect x="63.2139%" y="101" width="0.1045%" height="15" fill="rgb(244,29,21)" fg:x="38106" fg:w="63"/><text x="63.4639%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (111 samples, 0.18%)</title><rect x="63.3185%" y="117" width="0.1841%" height="15" fill="rgb(220,130,37)" fg:x="38169" fg:w="111"/><text x="63.5685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (28 samples, 0.05%)</title><rect x="63.5026%" y="117" width="0.0464%" height="15" fill="rgb(211,67,2)" fg:x="38280" fg:w="28"/><text x="63.7526%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,200 samples, 1.99%)</title><rect x="61.5617%" y="133" width="1.9907%" height="15" fill="rgb(235,68,52)" fg:x="37110" fg:w="1200"/><text x="61.8117%" y="143.50">l..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,725 samples, 2.86%)</title><rect x="60.6924%" y="165" width="2.8616%" height="15" fill="rgb(246,142,3)" fg:x="36586" fg:w="1725"/><text x="60.9424%" y="175.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,515 samples, 2.51%)</title><rect x="61.0408%" y="149" width="2.5132%" height="15" fill="rgb(241,25,7)" fg:x="36796" fg:w="1515"/><text x="61.2908%" y="159.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.09%)</title><rect x="63.5540%" y="165" width="0.0863%" height="15" fill="rgb(242,119,39)" fg:x="38311" fg:w="52"/><text x="63.8040%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (54 samples, 0.09%)</title><rect x="63.6419%" y="149" width="0.0896%" height="15" fill="rgb(241,98,45)" fg:x="38364" fg:w="54"/><text x="63.8919%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="63.7315%" y="149" width="0.0116%" height="15" fill="rgb(254,28,30)" fg:x="38418" fg:w="7"/><text x="63.9815%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.03%)</title><rect x="63.8394%" y="133" width="0.0315%" height="15" fill="rgb(241,142,54)" fg:x="38483" fg:w="19"/><text x="64.0894%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="64.0534%" y="101" width="0.0182%" height="15" fill="rgb(222,85,15)" fg:x="38612" fg:w="11"/><text x="64.3034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="64.0716%" y="101" width="0.0199%" height="15" fill="rgb(210,85,47)" fg:x="38623" fg:w="12"/><text x="64.3216%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="64.1313%" y="85" width="0.0116%" height="15" fill="rgb(224,206,25)" fg:x="38659" fg:w="7"/><text x="64.3813%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (234 samples, 0.39%)</title><rect x="64.4382%" y="53" width="0.3882%" height="15" fill="rgb(243,201,19)" fg:x="38844" fg:w="234"/><text x="64.6882%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (37 samples, 0.06%)</title><rect x="64.8264%" y="53" width="0.0614%" height="15" fill="rgb(236,59,4)" fg:x="39078" fg:w="37"/><text x="65.0764%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (656 samples, 1.09%)</title><rect x="63.9455%" y="117" width="1.0882%" height="15" fill="rgb(254,179,45)" fg:x="38547" fg:w="656"/><text x="64.1955%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (568 samples, 0.94%)</title><rect x="64.0915%" y="101" width="0.9423%" height="15" fill="rgb(226,14,10)" fg:x="38635" fg:w="568"/><text x="64.3415%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (537 samples, 0.89%)</title><rect x="64.1429%" y="85" width="0.8908%" height="15" fill="rgb(244,27,41)" fg:x="38666" fg:w="537"/><text x="64.3929%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (424 samples, 0.70%)</title><rect x="64.3304%" y="69" width="0.7034%" height="15" fill="rgb(235,35,32)" fg:x="38779" fg:w="424"/><text x="64.5804%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (88 samples, 0.15%)</title><rect x="64.8878%" y="53" width="0.1460%" height="15" fill="rgb(218,68,31)" fg:x="39115" fg:w="88"/><text x="65.1378%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.04%)</title><rect x="65.0338%" y="117" width="0.0448%" height="15" fill="rgb(207,120,37)" fg:x="39203" fg:w="27"/><text x="65.2838%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.07%)</title><rect x="65.0785%" y="117" width="0.0664%" height="15" fill="rgb(227,98,0)" fg:x="39230" fg:w="40"/><text x="65.3285%" y="127.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (846 samples, 1.40%)</title><rect x="63.7597%" y="149" width="1.4034%" height="15" fill="rgb(207,7,3)" fg:x="38435" fg:w="846"/><text x="64.0097%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (765 samples, 1.27%)</title><rect x="63.8941%" y="133" width="1.2691%" height="15" fill="rgb(206,98,19)" fg:x="38516" fg:w="765"/><text x="64.1441%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="65.1449%" y="117" width="0.0182%" height="15" fill="rgb(217,5,26)" fg:x="39270" fg:w="11"/><text x="65.3949%" y="127.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (936 samples, 1.55%)</title><rect x="63.6403%" y="165" width="1.5527%" height="15" fill="rgb(235,190,38)" fg:x="38363" fg:w="936"/><text x="63.8903%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.03%)</title><rect x="65.1632%" y="149" width="0.0299%" height="15" fill="rgb(247,86,24)" fg:x="39281" fg:w="18"/><text x="65.4132%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (7 samples, 0.01%)</title><rect x="65.5911%" y="149" width="0.0116%" height="15" fill="rgb(205,101,16)" fg:x="39539" fg:w="7"/><text x="65.8411%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.04%)</title><rect x="66.0921%" y="133" width="0.0382%" height="15" fill="rgb(246,168,33)" fg:x="39841" fg:w="23"/><text x="66.3421%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="66.4886%" y="117" width="0.0249%" height="15" fill="rgb(231,114,1)" fg:x="40080" fg:w="15"/><text x="66.7386%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (978 samples, 1.62%)</title><rect x="65.1930%" y="165" width="1.6224%" height="15" fill="rgb(207,184,53)" fg:x="39299" fg:w="978"/><text x="65.4430%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (731 samples, 1.21%)</title><rect x="65.6028%" y="149" width="1.2127%" height="15" fill="rgb(224,95,51)" fg:x="39546" fg:w="731"/><text x="65.8528%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (413 samples, 0.69%)</title><rect x="66.1303%" y="133" width="0.6851%" height="15" fill="rgb(212,188,45)" fg:x="39864" fg:w="413"/><text x="66.3803%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (182 samples, 0.30%)</title><rect x="66.5135%" y="117" width="0.3019%" height="15" fill="rgb(223,154,38)" fg:x="40095" fg:w="182"/><text x="66.7635%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (49 samples, 0.08%)</title><rect x="66.7341%" y="101" width="0.0813%" height="15" fill="rgb(251,22,52)" fg:x="40228" fg:w="49"/><text x="66.9841%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (431 samples, 0.71%)</title><rect x="67.3927%" y="149" width="0.7150%" height="15" fill="rgb(229,209,22)" fg:x="40625" fg:w="431"/><text x="67.6427%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (818 samples, 1.36%)</title><rect x="68.1077%" y="149" width="1.3570%" height="15" fill="rgb(234,138,34)" fg:x="41056" fg:w="818"/><text x="68.3577%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,892 samples, 3.14%)</title><rect x="66.8154%" y="165" width="3.1386%" height="15" fill="rgb(212,95,11)" fg:x="40277" fg:w="1892"/><text x="67.0654%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (295 samples, 0.49%)</title><rect x="69.4647%" y="149" width="0.4894%" height="15" fill="rgb(240,179,47)" fg:x="41874" fg:w="295"/><text x="69.7147%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (27 samples, 0.04%)</title><rect x="69.9540%" y="165" width="0.0448%" height="15" fill="rgb(240,163,11)" fg:x="42169" fg:w="27"/><text x="70.2040%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (8,662 samples, 14.37%)</title><rect x="55.9546%" y="181" width="14.3694%" height="15" fill="rgb(236,37,12)" fg:x="33730" fg:w="8662"/><text x="56.2046%" y="191.50">rust_qecp`rust_qecp::u..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (196 samples, 0.33%)</title><rect x="69.9988%" y="165" width="0.3251%" height="15" fill="rgb(232,164,16)" fg:x="42196" fg:w="196"/><text x="70.2488%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (58 samples, 0.10%)</title><rect x="75.5213%" y="165" width="0.0962%" height="15" fill="rgb(244,205,15)" fg:x="45525" fg:w="58"/><text x="75.7713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="75.7768%" y="149" width="0.0116%" height="15" fill="rgb(223,117,47)" fg:x="45679" fg:w="7"/><text x="76.0268%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (138 samples, 0.23%)</title><rect x="75.8398%" y="133" width="0.2289%" height="15" fill="rgb(244,107,35)" fg:x="45717" fg:w="138"/><text x="76.0898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (46 samples, 0.08%)</title><rect x="75.9924%" y="117" width="0.0763%" height="15" fill="rgb(205,140,8)" fg:x="45809" fg:w="46"/><text x="76.2424%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (178 samples, 0.30%)</title><rect x="75.7884%" y="149" width="0.2953%" height="15" fill="rgb(228,84,46)" fg:x="45686" fg:w="178"/><text x="76.0384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="76.0687%" y="133" width="0.0149%" height="15" fill="rgb(254,188,9)" fg:x="45855" fg:w="9"/><text x="76.3187%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (293 samples, 0.49%)</title><rect x="75.6175%" y="165" width="0.4861%" height="15" fill="rgb(206,112,54)" fg:x="45583" fg:w="293"/><text x="75.8675%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="76.0837%" y="149" width="0.0199%" height="15" fill="rgb(216,84,49)" fg:x="45864" fg:w="12"/><text x="76.3337%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="76.1036%" y="165" width="0.0415%" height="15" fill="rgb(214,194,35)" fg:x="45876" fg:w="25"/><text x="76.3536%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (172 samples, 0.29%)</title><rect x="76.5598%" y="149" width="0.2853%" height="15" fill="rgb(249,28,3)" fg:x="46151" fg:w="172"/><text x="76.8098%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (471 samples, 0.78%)</title><rect x="76.1451%" y="165" width="0.7813%" height="15" fill="rgb(222,56,52)" fg:x="45901" fg:w="471"/><text x="76.3951%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 0.06%)</title><rect x="76.8650%" y="149" width="0.0614%" height="15" fill="rgb(245,217,50)" fg:x="46335" fg:w="37"/><text x="77.1150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (34 samples, 0.06%)</title><rect x="76.8700%" y="133" width="0.0564%" height="15" fill="rgb(213,201,24)" fg:x="46338" fg:w="34"/><text x="77.1200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.04%)</title><rect x="76.9264%" y="165" width="0.0365%" height="15" fill="rgb(248,116,28)" fg:x="46372" fg:w="22"/><text x="77.1764%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="77.0359%" y="133" width="0.0348%" height="15" fill="rgb(219,72,43)" fg:x="46438" fg:w="21"/><text x="77.2859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (77 samples, 0.13%)</title><rect x="76.9629%" y="165" width="0.1277%" height="15" fill="rgb(209,138,14)" fg:x="46394" fg:w="77"/><text x="77.2129%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (67 samples, 0.11%)</title><rect x="76.9795%" y="149" width="0.1111%" height="15" fill="rgb(222,18,33)" fg:x="46404" fg:w="67"/><text x="77.2295%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="77.0707%" y="133" width="0.0199%" height="15" fill="rgb(213,199,7)" fg:x="46459" fg:w="12"/><text x="77.3207%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="77.0906%" y="165" width="0.0315%" height="15" fill="rgb(250,110,10)" fg:x="46471" fg:w="19"/><text x="77.3406%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (106 samples, 0.18%)</title><rect x="77.1221%" y="165" width="0.1758%" height="15" fill="rgb(248,123,6)" fg:x="46490" fg:w="106"/><text x="77.3721%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (43 samples, 0.07%)</title><rect x="77.2996%" y="165" width="0.0713%" height="15" fill="rgb(206,91,31)" fg:x="46597" fg:w="43"/><text x="77.5496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="77.3726%" y="165" width="0.0133%" height="15" fill="rgb(211,154,13)" fg:x="46641" fg:w="8"/><text x="77.6226%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (59 samples, 0.10%)</title><rect x="77.4042%" y="165" width="0.0979%" height="15" fill="rgb(225,148,7)" fg:x="46660" fg:w="59"/><text x="77.6542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="77.6016%" y="149" width="0.0149%" height="15" fill="rgb(220,160,43)" fg:x="46779" fg:w="9"/><text x="77.8516%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 0.12%)</title><rect x="77.5020%" y="165" width="0.1161%" height="15" fill="rgb(213,52,39)" fg:x="46719" fg:w="70"/><text x="77.7520%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="77.6646%" y="133" width="0.0166%" height="15" fill="rgb(243,137,7)" fg:x="46817" fg:w="10"/><text x="77.9146%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (16 samples, 0.03%)</title><rect x="77.6812%" y="133" width="0.0265%" height="15" fill="rgb(230,79,13)" fg:x="46827" fg:w="16"/><text x="77.9312%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 0.11%)</title><rect x="77.6298%" y="149" width="0.1128%" height="15" fill="rgb(247,105,23)" fg:x="46796" fg:w="68"/><text x="77.8798%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="77.7077%" y="133" width="0.0348%" height="15" fill="rgb(223,179,41)" fg:x="46843" fg:w="21"/><text x="77.9577%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="77.7310%" y="117" width="0.0116%" height="15" fill="rgb(218,9,34)" fg:x="46857" fg:w="7"/><text x="77.9810%" y="127.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (81 samples, 0.13%)</title><rect x="77.6182%" y="165" width="0.1344%" height="15" fill="rgb(222,106,8)" fg:x="46789" fg:w="81"/><text x="77.8682%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.04%)</title><rect x="77.7525%" y="165" width="0.0382%" height="15" fill="rgb(211,220,0)" fg:x="46870" fg:w="23"/><text x="78.0025%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,195 samples, 1.98%)</title><rect x="77.7907%" y="165" width="1.9824%" height="15" fill="rgb(229,52,16)" fg:x="46893" fg:w="1195"/><text x="78.0407%" y="175.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="79.7764%" y="165" width="0.0199%" height="15" fill="rgb(212,155,18)" fg:x="48090" fg:w="12"/><text x="80.0264%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="79.9041%" y="101" width="0.0265%" height="15" fill="rgb(242,21,14)" fg:x="48167" fg:w="16"/><text x="80.1541%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="79.9738%" y="69" width="0.0315%" height="15" fill="rgb(222,19,48)" fg:x="48209" fg:w="19"/><text x="80.2238%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="79.9937%" y="53" width="0.0116%" height="15" fill="rgb(232,45,27)" fg:x="48221" fg:w="7"/><text x="80.2437%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.05%)</title><rect x="79.9589%" y="85" width="0.0498%" height="15" fill="rgb(249,103,42)" fg:x="48200" fg:w="30"/><text x="80.2089%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (57 samples, 0.09%)</title><rect x="79.9307%" y="101" width="0.0946%" height="15" fill="rgb(246,81,33)" fg:x="48183" fg:w="57"/><text x="80.1807%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="80.0086%" y="85" width="0.0166%" height="15" fill="rgb(252,33,42)" fg:x="48230" fg:w="10"/><text x="80.2586%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (101 samples, 0.17%)</title><rect x="79.8809%" y="117" width="0.1675%" height="15" fill="rgb(209,212,41)" fg:x="48153" fg:w="101"/><text x="80.1309%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="80.0252%" y="101" width="0.0232%" height="15" fill="rgb(207,154,6)" fg:x="48240" fg:w="14"/><text x="80.2752%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="80.0484%" y="117" width="0.0216%" height="15" fill="rgb(223,64,47)" fg:x="48254" fg:w="13"/><text x="80.2984%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (137 samples, 0.23%)</title><rect x="79.8494%" y="133" width="0.2273%" height="15" fill="rgb(211,161,38)" fg:x="48134" fg:w="137"/><text x="80.0994%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (164 samples, 0.27%)</title><rect x="79.8062%" y="165" width="0.2721%" height="15" fill="rgb(219,138,40)" fg:x="48108" fg:w="164"/><text x="80.0562%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (147 samples, 0.24%)</title><rect x="79.8344%" y="149" width="0.2439%" height="15" fill="rgb(241,228,46)" fg:x="48125" fg:w="147"/><text x="80.0844%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,409 samples, 2.34%)</title><rect x="80.0965%" y="165" width="2.3374%" height="15" fill="rgb(223,209,38)" fg:x="48283" fg:w="1409"/><text x="80.3465%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (225 samples, 0.37%)</title><rect x="82.4339%" y="165" width="0.3733%" height="15" fill="rgb(236,164,45)" fg:x="49692" fg:w="225"/><text x="82.6839%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (43 samples, 0.07%)</title><rect x="82.8072%" y="165" width="0.0713%" height="15" fill="rgb(231,15,5)" fg:x="49917" fg:w="43"/><text x="83.0572%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="82.9001%" y="149" width="0.0133%" height="15" fill="rgb(252,35,15)" fg:x="49973" fg:w="8"/><text x="83.1501%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="82.9134%" y="149" width="0.0116%" height="15" fill="rgb(248,181,18)" fg:x="49981" fg:w="7"/><text x="83.1634%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.07%)</title><rect x="82.8785%" y="165" width="0.0680%" height="15" fill="rgb(233,39,42)" fg:x="49960" fg:w="41"/><text x="83.1285%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (13 samples, 0.02%)</title><rect x="82.9250%" y="149" width="0.0216%" height="15" fill="rgb(238,110,33)" fg:x="49988" fg:w="13"/><text x="83.1750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="83.1307%" y="133" width="0.0133%" height="15" fill="rgb(233,195,10)" fg:x="50112" fg:w="8"/><text x="83.3807%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (62 samples, 0.10%)</title><rect x="83.7776%" y="101" width="0.1029%" height="15" fill="rgb(254,105,3)" fg:x="50502" fg:w="62"/><text x="84.0276%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (160 samples, 0.27%)</title><rect x="83.6267%" y="117" width="0.2654%" height="15" fill="rgb(221,225,9)" fg:x="50411" fg:w="160"/><text x="83.8767%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="83.8805%" y="101" width="0.0116%" height="15" fill="rgb(224,227,45)" fg:x="50564" fg:w="7"/><text x="84.1305%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (464 samples, 0.77%)</title><rect x="83.1439%" y="133" width="0.7697%" height="15" fill="rgb(229,198,43)" fg:x="50120" fg:w="464"/><text x="83.3939%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="83.8921%" y="117" width="0.0216%" height="15" fill="rgb(206,209,35)" fg:x="50571" fg:w="13"/><text x="84.1421%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="83.9137%" y="133" width="0.0199%" height="15" fill="rgb(245,195,53)" fg:x="50584" fg:w="12"/><text x="84.1637%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (35 samples, 0.06%)</title><rect x="83.9717%" y="117" width="0.0581%" height="15" fill="rgb(240,92,26)" fg:x="50619" fg:w="35"/><text x="84.2217%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.03%)</title><rect x="84.0033%" y="101" width="0.0265%" height="15" fill="rgb(207,40,23)" fg:x="50638" fg:w="16"/><text x="84.2533%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (21 samples, 0.03%)</title><rect x="84.0663%" y="101" width="0.0348%" height="15" fill="rgb(223,111,35)" fg:x="50676" fg:w="21"/><text x="84.3163%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (170 samples, 0.28%)</title><rect x="83.9336%" y="133" width="0.2820%" height="15" fill="rgb(229,147,28)" fg:x="50596" fg:w="170"/><text x="84.1836%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (110 samples, 0.18%)</title><rect x="84.0331%" y="117" width="0.1825%" height="15" fill="rgb(211,29,28)" fg:x="50656" fg:w="110"/><text x="84.2831%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (69 samples, 0.11%)</title><rect x="84.1011%" y="101" width="0.1145%" height="15" fill="rgb(228,72,33)" fg:x="50697" fg:w="69"/><text x="84.3511%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="84.1973%" y="85" width="0.0182%" height="15" fill="rgb(205,214,31)" fg:x="50755" fg:w="11"/><text x="84.4473%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (723 samples, 1.20%)</title><rect x="83.0245%" y="149" width="1.1994%" height="15" fill="rgb(224,111,15)" fg:x="50048" fg:w="723"/><text x="83.2745%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="84.2239%" y="149" width="0.0332%" height="15" fill="rgb(253,21,26)" fg:x="50771" fg:w="20"/><text x="84.4739%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="84.2571%" y="149" width="0.0116%" height="15" fill="rgb(245,139,43)" fg:x="50791" fg:w="7"/><text x="84.5071%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (799 samples, 1.33%)</title><rect x="82.9465%" y="165" width="1.3255%" height="15" fill="rgb(252,170,7)" fg:x="50001" fg:w="799"/><text x="83.1965%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (69 samples, 0.11%)</title><rect x="84.2720%" y="165" width="0.1145%" height="15" fill="rgb(231,118,14)" fg:x="50800" fg:w="69"/><text x="84.5220%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (8,505 samples, 14.11%)</title><rect x="70.3240%" y="181" width="14.1089%" height="15" fill="rgb(238,83,0)" fg:x="42392" fg:w="8505"/><text x="70.5740%" y="191.50">rust_qecp`rust_qecp::..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (28 samples, 0.05%)</title><rect x="84.3865%" y="165" width="0.0464%" height="15" fill="rgb(221,39,39)" fg:x="50869" fg:w="28"/><text x="84.6365%" y="175.50"></text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (9 samples, 0.01%)</title><rect x="84.4329%" y="181" width="0.0149%" height="15" fill="rgb(222,119,46)" fg:x="50897" fg:w="9"/><text x="84.6829%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (48,699 samples, 80.79%)</title><rect x="3.6645%" y="197" width="80.7866%" height="15" fill="rgb(222,165,49)" fg:x="2209" fg:w="48699"/><text x="3.9145%" y="207.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,513 samples, 83.80%)</title><rect x="0.6569%" y="213" width="83.7959%" height="15" fill="rgb(219,113,52)" fg:x="396" fg:w="50513"/><text x="0.9069%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.06%)</title><rect x="87.4355%" y="197" width="0.0614%" height="15" fill="rgb(214,7,15)" fg:x="52707" fg:w="37"/><text x="87.6855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="87.5234%" y="117" width="0.0116%" height="15" fill="rgb(235,32,4)" fg:x="52760" fg:w="7"/><text x="87.7734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="87.5234%" y="101" width="0.0116%" height="15" fill="rgb(238,90,54)" fg:x="52760" fg:w="7"/><text x="87.7734%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.02%)</title><rect x="87.5218%" y="133" width="0.0216%" height="15" fill="rgb(213,208,19)" fg:x="52759" fg:w="13"/><text x="87.7718%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="87.5102%" y="149" width="0.0365%" height="15" fill="rgb(233,156,4)" fg:x="52752" fg:w="22"/><text x="87.7602%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 0.06%)</title><rect x="87.4969%" y="197" width="0.0564%" height="15" fill="rgb(207,194,5)" fg:x="52744" fg:w="34"/><text x="87.7469%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (28 samples, 0.05%)</title><rect x="87.5068%" y="181" width="0.0464%" height="15" fill="rgb(206,111,30)" fg:x="52750" fg:w="28"/><text x="87.7568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.04%)</title><rect x="87.5102%" y="165" width="0.0431%" height="15" fill="rgb(243,70,54)" fg:x="52752" fg:w="26"/><text x="87.7602%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="87.7009%" y="165" width="0.0182%" height="15" fill="rgb(242,28,8)" fg:x="52867" fg:w="11"/><text x="87.9509%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="87.7059%" y="149" width="0.0133%" height="15" fill="rgb(219,106,18)" fg:x="52870" fg:w="8"/><text x="87.9559%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (15 samples, 0.02%)</title><rect x="87.7424%" y="165" width="0.0249%" height="15" fill="rgb(244,222,10)" fg:x="52892" fg:w="15"/><text x="87.9924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="87.8287%" y="117" width="0.0182%" height="15" fill="rgb(236,179,52)" fg:x="52944" fg:w="11"/><text x="88.0787%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="87.8220%" y="149" width="0.0315%" height="15" fill="rgb(213,23,39)" fg:x="52940" fg:w="19"/><text x="88.0720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="87.8237%" y="133" width="0.0299%" height="15" fill="rgb(238,48,10)" fg:x="52941" fg:w="18"/><text x="88.0737%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.06%)</title><rect x="87.8536%" y="149" width="0.0614%" height="15" fill="rgb(251,196,23)" fg:x="52959" fg:w="37"/><text x="88.1036%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (246 samples, 0.41%)</title><rect x="87.5533%" y="197" width="0.4081%" height="15" fill="rgb(250,152,24)" fg:x="52778" fg:w="246"/><text x="87.8033%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (171 samples, 0.28%)</title><rect x="87.6777%" y="181" width="0.2837%" height="15" fill="rgb(209,150,17)" fg:x="52853" fg:w="171"/><text x="87.9277%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 0.19%)</title><rect x="87.7673%" y="165" width="0.1941%" height="15" fill="rgb(234,202,34)" fg:x="52907" fg:w="117"/><text x="88.0173%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (28 samples, 0.05%)</title><rect x="87.9149%" y="149" width="0.0464%" height="15" fill="rgb(253,148,53)" fg:x="52996" fg:w="28"/><text x="88.1649%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="88.0377%" y="181" width="0.0133%" height="15" fill="rgb(218,129,16)" fg:x="53070" fg:w="8"/><text x="88.2877%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="88.0593%" y="181" width="0.0182%" height="15" fill="rgb(216,85,19)" fg:x="53083" fg:w="11"/><text x="88.3093%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="88.0609%" y="165" width="0.0166%" height="15" fill="rgb(235,228,7)" fg:x="53084" fg:w="10"/><text x="88.3109%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.03%)</title><rect x="88.0858%" y="181" width="0.0282%" height="15" fill="rgb(245,175,0)" fg:x="53099" fg:w="17"/><text x="88.3358%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.04%)</title><rect x="88.3695%" y="117" width="0.0382%" height="15" fill="rgb(208,168,36)" fg:x="53270" fg:w="23"/><text x="88.6195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (65 samples, 0.11%)</title><rect x="88.3064%" y="133" width="0.1078%" height="15" fill="rgb(246,171,24)" fg:x="53232" fg:w="65"/><text x="88.5564%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 0.13%)</title><rect x="88.2865%" y="149" width="0.1327%" height="15" fill="rgb(215,142,24)" fg:x="53220" fg:w="80"/><text x="88.5365%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="88.4192%" y="133" width="0.0199%" height="15" fill="rgb(250,187,7)" fg:x="53300" fg:w="12"/><text x="88.6692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="88.4259%" y="117" width="0.0133%" height="15" fill="rgb(228,66,33)" fg:x="53304" fg:w="8"/><text x="88.6759%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (123 samples, 0.20%)</title><rect x="88.2517%" y="165" width="0.2040%" height="15" fill="rgb(234,215,21)" fg:x="53199" fg:w="123"/><text x="88.5017%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="88.4192%" y="149" width="0.0365%" height="15" fill="rgb(222,191,20)" fg:x="53300" fg:w="22"/><text x="88.6692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="88.4391%" y="133" width="0.0166%" height="15" fill="rgb(245,79,54)" fg:x="53312" fg:w="10"/><text x="88.6891%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (306 samples, 0.51%)</title><rect x="87.9614%" y="197" width="0.5076%" height="15" fill="rgb(240,10,37)" fg:x="53024" fg:w="306"/><text x="88.2114%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (204 samples, 0.34%)</title><rect x="88.1306%" y="181" width="0.3384%" height="15" fill="rgb(214,192,32)" fg:x="53126" fg:w="204"/><text x="88.3806%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,430 samples, 4.03%)</title><rect x="84.4528%" y="213" width="4.0311%" height="15" fill="rgb(209,36,54)" fg:x="50909" fg:w="2430"/><text x="84.7028%" y="223.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="88.4690%" y="197" width="0.0149%" height="15" fill="rgb(220,10,11)" fg:x="53330" fg:w="9"/><text x="88.7190%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.02%)</title><rect x="88.7742%" y="181" width="0.0166%" height="15" fill="rgb(221,106,17)" fg:x="53514" fg:w="10"/><text x="89.0242%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="88.7776%" y="165" width="0.0133%" height="15" fill="rgb(251,142,44)" fg:x="53516" fg:w="8"/><text x="89.0276%" y="175.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (12 samples, 0.02%)</title><rect x="88.7742%" y="197" width="0.0199%" height="15" fill="rgb(238,13,15)" fg:x="53514" fg:w="12"/><text x="89.0242%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (256 samples, 0.42%)</title><rect x="88.4839%" y="213" width="0.4247%" height="15" fill="rgb(208,107,27)" fg:x="53339" fg:w="256"/><text x="88.7339%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (69 samples, 0.11%)</title><rect x="88.7941%" y="197" width="0.1145%" height="15" fill="rgb(205,136,37)" fg:x="53526" fg:w="69"/><text x="89.0441%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="93.8339%" y="149" width="0.0232%" height="15" fill="rgb(250,205,27)" fg:x="56564" fg:w="14"/><text x="94.0839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.02%)</title><rect x="93.8405%" y="133" width="0.0166%" height="15" fill="rgb(210,80,43)" fg:x="56568" fg:w="10"/><text x="94.0905%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,985 samples, 4.95%)</title><rect x="88.9086%" y="213" width="4.9518%" height="15" fill="rgb(247,160,36)" fg:x="53595" fg:w="2985"/><text x="89.1586%" y="223.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.04%)</title><rect x="93.8156%" y="197" width="0.0448%" height="15" fill="rgb(234,13,49)" fg:x="56553" fg:w="27"/><text x="94.0656%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.04%)</title><rect x="93.8239%" y="181" width="0.0365%" height="15" fill="rgb(234,122,0)" fg:x="56558" fg:w="22"/><text x="94.0739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="93.8289%" y="165" width="0.0315%" height="15" fill="rgb(207,146,38)" fg:x="56561" fg:w="19"/><text x="94.0789%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (99 samples, 0.16%)</title><rect x="93.8687%" y="197" width="0.1642%" height="15" fill="rgb(207,177,25)" fg:x="56585" fg:w="99"/><text x="94.1187%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (310 samples, 0.51%)</title><rect x="93.8604%" y="213" width="0.5143%" height="15" fill="rgb(211,178,42)" fg:x="56580" fg:w="310"/><text x="94.1104%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (206 samples, 0.34%)</title><rect x="94.0329%" y="197" width="0.3417%" height="15" fill="rgb(230,69,54)" fg:x="56684" fg:w="206"/><text x="94.2829%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (69 samples, 0.11%)</title><rect x="94.3747%" y="213" width="0.1145%" height="15" fill="rgb(214,135,41)" fg:x="56890" fg:w="69"/><text x="94.6247%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,321 samples, 5.51%)</title><rect x="94.4891%" y="213" width="5.5092%" height="15" fill="rgb(237,67,25)" fg:x="56959" fg:w="3321"/><text x="94.7391%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,483 samples, 4.12%)</title><rect x="95.8793%" y="197" width="4.1190%" height="15" fill="rgb(222,189,50)" fg:x="57797" fg:w="2483"/><text x="96.1293%" y="207.50">rust..</text></g><g><title>all (60,281 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,148,34)" fg:x="0" fg:w="60281"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,206 samples, 99.88%)</title><rect x="0.1244%" y="293" width="99.8756%" height="15" fill="rgb(222,29,6)" fg:x="75" fg:w="60206"/><text x="0.3744%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,206 samples, 99.88%)</title><rect x="0.1244%" y="277" width="99.8756%" height="15" fill="rgb(221,189,43)" fg:x="75" fg:w="60206"/><text x="0.3744%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,206 samples, 99.88%)</title><rect x="0.1244%" y="261" width="99.8756%" height="15" fill="rgb(207,36,27)" fg:x="75" fg:w="60206"/><text x="0.3744%" y="271.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,206 samples, 99.88%)</title><rect x="0.1244%" y="245" width="99.8756%" height="15" fill="rgb(217,90,24)" fg:x="75" fg:w="60206"/><text x="0.3744%" y="255.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,203 samples, 99.87%)</title><rect x="0.1294%" y="229" width="99.8706%" height="15" fill="rgb(224,66,35)" fg:x="78" fg:w="60203"/><text x="0.3794%" y="239.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>