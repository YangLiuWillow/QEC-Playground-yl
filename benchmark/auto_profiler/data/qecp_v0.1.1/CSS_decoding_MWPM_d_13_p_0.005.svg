<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="69008"><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="0.0304%" y="133" width="0.0174%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="12"/><text x="0.2804%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="0.0478%" y="133" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="33" fg:w="7"/><text x="0.2978%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.05%)</title><rect x="0.0130%" y="149" width="0.0464%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="32"/><text x="0.2630%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.09%)</title><rect x="0.0826%" y="53" width="0.0898%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="62"/><text x="0.3326%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (7 samples, 0.01%)</title><rect x="0.1724%" y="53" width="0.0101%" height="15" fill="rgb(208,68,35)" fg:x="119" fg:w="7"/><text x="0.4224%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.1724%" y="37" width="0.0101%" height="15" fill="rgb(232,128,0)" fg:x="119" fg:w="7"/><text x="0.4224%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (76 samples, 0.11%)</title><rect x="0.0826%" y="69" width="0.1101%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="76"/><text x="0.3326%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (7 samples, 0.01%)</title><rect x="0.1826%" y="53" width="0.0101%" height="15" fill="rgb(228,23,34)" fg:x="126" fg:w="7"/><text x="0.4326%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.1826%" y="37" width="0.0101%" height="15" fill="rgb(218,30,26)" fg:x="126" fg:w="7"/><text x="0.4326%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.01%)</title><rect x="0.1927%" y="69" width="0.0101%" height="15" fill="rgb(220,122,19)" fg:x="133" fg:w="7"/><text x="0.4427%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.01%)</title><rect x="0.1927%" y="53" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="133" fg:w="7"/><text x="0.4427%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.07%)</title><rect x="0.2029%" y="69" width="0.0681%" height="15" fill="rgb(240,193,28)" fg:x="140" fg:w="47"/><text x="0.4529%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (134 samples, 0.19%)</title><rect x="0.0783%" y="149" width="0.1942%" height="15" fill="rgb(216,20,37)" fg:x="54" fg:w="134"/><text x="0.3283%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (134 samples, 0.19%)</title><rect x="0.0783%" y="133" width="0.1942%" height="15" fill="rgb(206,188,39)" fg:x="54" fg:w="134"/><text x="0.3283%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.19%)</title><rect x="0.0783%" y="117" width="0.1942%" height="15" fill="rgb(217,207,13)" fg:x="54" fg:w="134"/><text x="0.3283%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (134 samples, 0.19%)</title><rect x="0.0783%" y="101" width="0.1942%" height="15" fill="rgb(231,73,38)" fg:x="54" fg:w="134"/><text x="0.3283%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (132 samples, 0.19%)</title><rect x="0.0812%" y="85" width="0.1913%" height="15" fill="rgb(225,20,46)" fg:x="56" fg:w="132"/><text x="0.3312%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.2797%" y="69" width="0.0101%" height="15" fill="rgb(210,31,41)" fg:x="193" fg:w="7"/><text x="0.5297%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="0.2797%" y="85" width="0.0188%" height="15" fill="rgb(221,200,47)" fg:x="193" fg:w="13"/><text x="0.5297%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="0.2724%" y="117" width="0.0348%" height="15" fill="rgb(226,26,5)" fg:x="188" fg:w="24"/><text x="0.5224%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (23 samples, 0.03%)</title><rect x="0.2739%" y="101" width="0.0333%" height="15" fill="rgb(249,33,26)" fg:x="189" fg:w="23"/><text x="0.5239%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (25 samples, 0.04%)</title><rect x="0.2724%" y="149" width="0.0362%" height="15" fill="rgb(235,183,28)" fg:x="188" fg:w="25"/><text x="0.5224%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="0.2724%" y="133" width="0.0362%" height="15" fill="rgb(221,5,38)" fg:x="188" fg:w="25"/><text x="0.5224%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (510 samples, 0.74%)</title><rect x="0.3087%" y="149" width="0.7390%" height="15" fill="rgb(247,18,42)" fg:x="213" fg:w="510"/><text x="0.5587%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (190 samples, 0.28%)</title><rect x="1.0477%" y="149" width="0.2753%" height="15" fill="rgb(241,131,45)" fg:x="723" fg:w="190"/><text x="1.2977%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="1.3230%" y="149" width="0.0101%" height="15" fill="rgb(249,31,29)" fg:x="913" fg:w="7"/><text x="1.5730%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 0.11%)</title><rect x="5.9355%" y="133" width="0.1116%" height="15" fill="rgb(225,111,53)" fg:x="4096" fg:w="77"/><text x="6.1855%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.12%)</title><rect x="6.0471%" y="133" width="0.1174%" height="15" fill="rgb(238,160,17)" fg:x="4173" fg:w="81"/><text x="6.2971%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (50 samples, 0.07%)</title><rect x="6.1645%" y="133" width="0.0725%" height="15" fill="rgb(214,148,48)" fg:x="4254" fg:w="50"/><text x="6.4145%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (481 samples, 0.70%)</title><rect x="6.2370%" y="133" width="0.6970%" height="15" fill="rgb(232,36,49)" fg:x="4304" fg:w="481"/><text x="6.4870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.02%)</title><rect x="6.9354%" y="85" width="0.0246%" height="15" fill="rgb(209,103,24)" fg:x="4786" fg:w="17"/><text x="7.1854%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="6.9485%" y="69" width="0.0116%" height="15" fill="rgb(229,88,8)" fg:x="4795" fg:w="8"/><text x="7.1985%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.03%)</title><rect x="6.9340%" y="133" width="0.0275%" height="15" fill="rgb(213,181,19)" fg:x="4785" fg:w="19"/><text x="7.1840%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="6.9340%" y="117" width="0.0275%" height="15" fill="rgb(254,191,54)" fg:x="4785" fg:w="19"/><text x="7.1840%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="6.9340%" y="101" width="0.0275%" height="15" fill="rgb(241,83,37)" fg:x="4785" fg:w="19"/><text x="7.1840%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (82 samples, 0.12%)</title><rect x="7.5629%" y="117" width="0.1188%" height="15" fill="rgb(233,36,39)" fg:x="5219" fg:w="82"/><text x="7.8129%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="7.7165%" y="101" width="0.0130%" height="15" fill="rgb(226,3,54)" fg:x="5325" fg:w="9"/><text x="7.9665%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (687 samples, 1.00%)</title><rect x="6.9615%" y="133" width="0.9955%" height="15" fill="rgb(245,192,40)" fg:x="4804" fg:w="687"/><text x="7.2115%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (188 samples, 0.27%)</title><rect x="7.6846%" y="117" width="0.2724%" height="15" fill="rgb(238,167,29)" fg:x="5303" fg:w="188"/><text x="7.9346%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (151 samples, 0.22%)</title><rect x="7.7382%" y="101" width="0.2188%" height="15" fill="rgb(232,182,51)" fg:x="5340" fg:w="151"/><text x="7.9882%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (14 samples, 0.02%)</title><rect x="7.9643%" y="133" width="0.0203%" height="15" fill="rgb(231,60,39)" fg:x="5496" fg:w="14"/><text x="8.2143%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (172 samples, 0.25%)</title><rect x="10.8335%" y="117" width="0.2492%" height="15" fill="rgb(208,69,12)" fg:x="7476" fg:w="172"/><text x="11.0835%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (432 samples, 0.63%)</title><rect x="11.0900%" y="117" width="0.6260%" height="15" fill="rgb(235,93,37)" fg:x="7653" fg:w="432"/><text x="11.3400%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (20 samples, 0.03%)</title><rect x="11.7769%" y="101" width="0.0290%" height="15" fill="rgb(213,116,39)" fg:x="8127" fg:w="20"/><text x="12.0269%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,713 samples, 3.93%)</title><rect x="7.9846%" y="133" width="3.9314%" height="15" fill="rgb(222,207,29)" fg:x="5510" fg:w="2713"/><text x="8.2346%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (138 samples, 0.20%)</title><rect x="11.7160%" y="117" width="0.2000%" height="15" fill="rgb(206,96,30)" fg:x="8085" fg:w="138"/><text x="11.9660%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (76 samples, 0.11%)</title><rect x="11.8059%" y="101" width="0.1101%" height="15" fill="rgb(218,138,4)" fg:x="8147" fg:w="76"/><text x="12.0559%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,301 samples, 10.58%)</title><rect x="1.3375%" y="149" width="10.5799%" height="15" fill="rgb(250,191,14)" fg:x="923" fg:w="7301"/><text x="1.5875%" y="159.50">rust_qecp`rust_..</text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="11.9363%" y="133" width="0.0145%" height="15" fill="rgb(239,60,40)" fg:x="8237" fg:w="10"/><text x="12.1863%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 0.17%)</title><rect x="11.9653%" y="133" width="0.1666%" height="15" fill="rgb(206,27,48)" fg:x="8257" fg:w="115"/><text x="12.2153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="12.4420%" y="117" width="0.0290%" height="15" fill="rgb(225,35,8)" fg:x="8586" fg:w="20"/><text x="12.6920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="12.4565%" y="101" width="0.0145%" height="15" fill="rgb(250,213,24)" fg:x="8596" fg:w="10"/><text x="12.7065%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.01%)</title><rect x="12.4797%" y="117" width="0.0145%" height="15" fill="rgb(247,123,22)" fg:x="8612" fg:w="10"/><text x="12.7297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="12.5261%" y="53" width="0.0188%" height="15" fill="rgb(231,138,38)" fg:x="8644" fg:w="13"/><text x="12.7761%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.04%)</title><rect x="12.5029%" y="85" width="0.0435%" height="15" fill="rgb(231,145,46)" fg:x="8628" fg:w="30"/><text x="12.7529%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="12.5159%" y="69" width="0.0304%" height="15" fill="rgb(251,118,11)" fg:x="8637" fg:w="21"/><text x="12.7659%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.06%)</title><rect x="12.4942%" y="117" width="0.0580%" height="15" fill="rgb(217,147,25)" fg:x="8622" fg:w="40"/><text x="12.7442%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (34 samples, 0.05%)</title><rect x="12.5029%" y="101" width="0.0493%" height="15" fill="rgb(247,81,37)" fg:x="8628" fg:w="34"/><text x="12.7529%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="12.5565%" y="117" width="0.0130%" height="15" fill="rgb(209,12,38)" fg:x="8665" fg:w="9"/><text x="12.8065%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="12.5696%" y="117" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="8674" fg:w="8"/><text x="12.8196%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (18 samples, 0.03%)</title><rect x="12.5812%" y="117" width="0.0261%" height="15" fill="rgb(248,47,43)" fg:x="8682" fg:w="18"/><text x="12.8312%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (557 samples, 0.81%)</title><rect x="12.1551%" y="133" width="0.8072%" height="15" fill="rgb(221,10,30)" fg:x="8388" fg:w="557"/><text x="12.4051%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (245 samples, 0.36%)</title><rect x="12.6072%" y="117" width="0.3550%" height="15" fill="rgb(210,229,1)" fg:x="8700" fg:w="245"/><text x="12.8572%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (737 samples, 1.07%)</title><rect x="11.9175%" y="149" width="1.0680%" height="15" fill="rgb(222,148,37)" fg:x="8224" fg:w="737"/><text x="12.1675%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (12 samples, 0.02%)</title><rect x="12.9681%" y="133" width="0.0174%" height="15" fill="rgb(234,67,33)" fg:x="8949" fg:w="12"/><text x="13.2181%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (10 samples, 0.01%)</title><rect x="12.9855%" y="149" width="0.0145%" height="15" fill="rgb(247,98,35)" fg:x="8961" fg:w="10"/><text x="13.2355%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (8 samples, 0.01%)</title><rect x="12.9883%" y="133" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="8963" fg:w="8"/><text x="13.2383%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="12.9999%" y="149" width="0.0333%" height="15" fill="rgb(213,79,30)" fg:x="8971" fg:w="23"/><text x="13.2499%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (17 samples, 0.02%)</title><rect x="13.0086%" y="133" width="0.0246%" height="15" fill="rgb(246,177,23)" fg:x="8977" fg:w="17"/><text x="13.2586%" y="143.50"></text></g><g><title>dyld`start (8,996 samples, 13.04%)</title><rect x="0.0000%" y="373" width="13.0362%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="8996"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>rust_qecp`main (8,992 samples, 13.03%)</title><rect x="0.0058%" y="357" width="13.0304%" height="15" fill="rgb(216,154,8)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="367.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,992 samples, 13.03%)</title><rect x="0.0058%" y="341" width="13.0304%" height="15" fill="rgb(244,35,45)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="351.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,992 samples, 13.03%)</title><rect x="0.0058%" y="325" width="13.0304%" height="15" fill="rgb(251,115,12)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="335.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,992 samples, 13.03%)</title><rect x="0.0058%" y="309" width="13.0304%" height="15" fill="rgb(240,54,50)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="319.50">rust_qecp`std::sys_c..</text></g><g><title>rust_qecp`rust_qecp::main (8,992 samples, 13.03%)</title><rect x="0.0058%" y="293" width="13.0304%" height="15" fill="rgb(233,84,52)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="303.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (8,992 samples, 13.03%)</title><rect x="0.0058%" y="277" width="13.0304%" height="15" fill="rgb(207,117,47)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="287.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,992 samples, 13.03%)</title><rect x="0.0058%" y="261" width="13.0304%" height="15" fill="rgb(249,43,39)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="271.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (8,992 samples, 13.03%)</title><rect x="0.0058%" y="245" width="13.0304%" height="15" fill="rgb(209,38,44)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="255.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,992 samples, 13.03%)</title><rect x="0.0058%" y="229" width="13.0304%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="239.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,992 samples, 13.03%)</title><rect x="0.0058%" y="213" width="13.0304%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="223.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,992 samples, 13.03%)</title><rect x="0.0058%" y="197" width="13.0304%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="207.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,992 samples, 13.03%)</title><rect x="0.0058%" y="181" width="13.0304%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="8992"/><text x="0.2558%" y="191.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,991 samples, 13.03%)</title><rect x="0.0072%" y="165" width="13.0289%" height="15" fill="rgb(211,81,21)" fg:x="5" fg:w="8991"/><text x="0.2572%" y="175.50">rust_qecp`rust_qecp:..</text></g><g><title>libsystem_kernel.dylib`__exit (8 samples, 0.01%)</title><rect x="13.0362%" y="373" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="8996" fg:w="8"/><text x="13.2862%" y="383.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (11 samples, 0.02%)</title><rect x="13.0521%" y="293" width="0.0159%" height="15" fill="rgb(235,213,38)" fg:x="9007" fg:w="11"/><text x="13.3021%" y="303.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (11 samples, 0.02%)</title><rect x="13.0521%" y="277" width="0.0159%" height="15" fill="rgb(237,122,38)" fg:x="9007" fg:w="11"/><text x="13.3021%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="13.0521%" y="261" width="0.0159%" height="15" fill="rgb(244,218,35)" fg:x="9007" fg:w="11"/><text x="13.3021%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="13.0521%" y="245" width="0.0159%" height="15" fill="rgb(240,68,47)" fg:x="9007" fg:w="11"/><text x="13.3021%" y="255.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (9 samples, 0.01%)</title><rect x="13.0550%" y="229" width="0.0130%" height="15" fill="rgb(210,16,53)" fg:x="9009" fg:w="9"/><text x="13.3050%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.03%)</title><rect x="20.3976%" y="261" width="0.0319%" height="15" fill="rgb(235,124,12)" fg:x="14076" fg:w="22"/><text x="20.6476%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (38 samples, 0.06%)</title><rect x="20.4411%" y="181" width="0.0551%" height="15" fill="rgb(224,169,11)" fg:x="14106" fg:w="38"/><text x="20.6911%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (38 samples, 0.06%)</title><rect x="20.4411%" y="165" width="0.0551%" height="15" fill="rgb(250,166,2)" fg:x="14106" fg:w="38"/><text x="20.6911%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (42 samples, 0.06%)</title><rect x="20.4411%" y="197" width="0.0609%" height="15" fill="rgb(242,216,29)" fg:x="14106" fg:w="42"/><text x="20.6911%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (52 samples, 0.08%)</title><rect x="20.4368%" y="213" width="0.0754%" height="15" fill="rgb(230,116,27)" fg:x="14103" fg:w="52"/><text x="20.6868%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="20.5020%" y="197" width="0.0101%" height="15" fill="rgb(228,99,48)" fg:x="14148" fg:w="7"/><text x="20.7520%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (55 samples, 0.08%)</title><rect x="20.4339%" y="261" width="0.0797%" height="15" fill="rgb(253,11,6)" fg:x="14101" fg:w="55"/><text x="20.6839%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (55 samples, 0.08%)</title><rect x="20.4339%" y="245" width="0.0797%" height="15" fill="rgb(247,143,39)" fg:x="14101" fg:w="55"/><text x="20.6839%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (54 samples, 0.08%)</title><rect x="20.4353%" y="229" width="0.0783%" height="15" fill="rgb(236,97,10)" fg:x="14102" fg:w="54"/><text x="20.6853%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (54 samples, 0.08%)</title><rect x="21.3439%" y="245" width="0.0783%" height="15" fill="rgb(233,208,19)" fg:x="14729" fg:w="54"/><text x="21.5939%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (54 samples, 0.08%)</title><rect x="21.3439%" y="229" width="0.0783%" height="15" fill="rgb(216,164,2)" fg:x="14729" fg:w="54"/><text x="21.5939%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (230 samples, 0.33%)</title><rect x="21.4222%" y="245" width="0.3333%" height="15" fill="rgb(220,129,5)" fg:x="14783" fg:w="230"/><text x="21.6722%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (876 samples, 1.27%)</title><rect x="21.8453%" y="229" width="1.2694%" height="15" fill="rgb(242,17,10)" fg:x="15075" fg:w="876"/><text x="22.0953%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (10 samples, 0.01%)</title><rect x="23.1147%" y="229" width="0.0145%" height="15" fill="rgb(242,107,0)" fg:x="15951" fg:w="10"/><text x="23.3647%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (336 samples, 0.49%)</title><rect x="23.1292%" y="229" width="0.4869%" height="15" fill="rgb(251,28,31)" fg:x="15961" fg:w="336"/><text x="23.3792%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (225 samples, 0.33%)</title><rect x="23.8552%" y="213" width="0.3260%" height="15" fill="rgb(233,223,10)" fg:x="16462" fg:w="225"/><text x="24.1052%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (207 samples, 0.30%)</title><rect x="24.1827%" y="197" width="0.3000%" height="15" fill="rgb(215,21,27)" fg:x="16688" fg:w="207"/><text x="24.4327%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (209 samples, 0.30%)</title><rect x="24.1813%" y="213" width="0.3029%" height="15" fill="rgb(232,23,21)" fg:x="16687" fg:w="209"/><text x="24.4313%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (25 samples, 0.04%)</title><rect x="79.9965%" y="181" width="0.0362%" height="15" fill="rgb(244,5,23)" fg:x="55204" fg:w="25"/><text x="80.2465%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (38,333 samples, 55.55%)</title><rect x="24.4885%" y="213" width="55.5486%" height="15" fill="rgb(226,81,46)" fg:x="16899" fg:w="38333"/><text x="24.7385%" y="223.50">rust_qecp`PerfectMatching::Expand</text></g><g><title>rust_qecp`PerfectMatching::Augment (28 samples, 0.04%)</title><rect x="79.9965%" y="197" width="0.0406%" height="15" fill="rgb(247,70,30)" fg:x="55204" fg:w="28"/><text x="80.2465%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (202 samples, 0.29%)</title><rect x="83.1150%" y="165" width="0.2927%" height="15" fill="rgb(212,68,19)" fg:x="57356" fg:w="202"/><text x="83.3650%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,133 samples, 1.64%)</title><rect x="81.8050%" y="197" width="1.6418%" height="15" fill="rgb(240,187,13)" fg:x="56452" fg:w="1133"/><text x="82.0550%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (229 samples, 0.33%)</title><rect x="83.1150%" y="181" width="0.3318%" height="15" fill="rgb(223,113,26)" fg:x="57356" fg:w="229"/><text x="83.3650%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (27 samples, 0.04%)</title><rect x="83.4077%" y="165" width="0.0391%" height="15" fill="rgb(206,192,2)" fg:x="57558" fg:w="27"/><text x="83.6577%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,708 samples, 3.92%)</title><rect x="80.0400%" y="213" width="3.9242%" height="15" fill="rgb(241,108,4)" fg:x="55234" fg:w="2708"/><text x="80.2900%" y="223.50">rust..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (357 samples, 0.52%)</title><rect x="83.4468%" y="197" width="0.5173%" height="15" fill="rgb(247,173,49)" fg:x="57585" fg:w="357"/><text x="83.6968%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,680 samples, 2.43%)</title><rect x="84.2554%" y="197" width="2.4345%" height="15" fill="rgb(224,114,35)" fg:x="58143" fg:w="1680"/><text x="84.5054%" y="207.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (1,882 samples, 2.73%)</title><rect x="83.9642%" y="213" width="2.7272%" height="15" fill="rgb(245,159,27)" fg:x="57942" fg:w="1882"/><text x="84.2142%" y="223.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (81 samples, 0.12%)</title><rect x="92.3531%" y="181" width="0.1174%" height="15" fill="rgb(245,172,44)" fg:x="63731" fg:w="81"/><text x="92.6031%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (112 samples, 0.16%)</title><rect x="92.3531%" y="197" width="0.1623%" height="15" fill="rgb(236,23,11)" fg:x="63731" fg:w="112"/><text x="92.6031%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (31 samples, 0.04%)</title><rect x="92.4704%" y="181" width="0.0449%" height="15" fill="rgb(205,117,38)" fg:x="63812" fg:w="31"/><text x="92.7204%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (4,032 samples, 5.84%)</title><rect x="86.6928%" y="213" width="5.8428%" height="15" fill="rgb(237,72,25)" fg:x="59825" fg:w="4032"/><text x="86.9428%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (14 samples, 0.02%)</title><rect x="92.5154%" y="197" width="0.0203%" height="15" fill="rgb(244,70,9)" fg:x="63843" fg:w="14"/><text x="92.7654%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (47,934 samples, 69.46%)</title><rect x="23.6161%" y="229" width="69.4615%" height="15" fill="rgb(217,125,39)" fg:x="16297" fg:w="47934"/><text x="23.8661%" y="239.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (374 samples, 0.54%)</title><rect x="92.5356%" y="213" width="0.5420%" height="15" fill="rgb(235,36,10)" fg:x="63857" fg:w="374"/><text x="92.7856%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (97 samples, 0.14%)</title><rect x="93.0776%" y="213" width="0.1406%" height="15" fill="rgb(251,123,47)" fg:x="64231" fg:w="97"/><text x="93.3276%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (101 samples, 0.15%)</title><rect x="93.0776%" y="229" width="0.1464%" height="15" fill="rgb(221,13,13)" fg:x="64231" fg:w="101"/><text x="93.3276%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (50,339 samples, 72.95%)</title><rect x="20.5136%" y="261" width="72.9466%" height="15" fill="rgb(238,131,9)" fg:x="14156" fg:w="50339"/><text x="20.7636%" y="271.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (49,481 samples, 71.70%)</title><rect x="21.7569%" y="245" width="71.7033%" height="15" fill="rgb(211,50,8)" fg:x="15014" fg:w="49481"/><text x="22.0069%" y="255.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (163 samples, 0.24%)</title><rect x="93.2240%" y="229" width="0.2362%" height="15" fill="rgb(245,182,24)" fg:x="64332" fg:w="163"/><text x="93.4740%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (55,600 samples, 80.57%)</title><rect x="13.0927%" y="277" width="80.5704%" height="15" fill="rgb(242,14,37)" fg:x="9035" fg:w="55600"/><text x="13.3427%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (140 samples, 0.20%)</title><rect x="93.4602%" y="261" width="0.2029%" height="15" fill="rgb(246,228,12)" fg:x="64495" fg:w="140"/><text x="93.7102%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (24 samples, 0.03%)</title><rect x="93.6631%" y="277" width="0.0348%" height="15" fill="rgb(213,55,15)" fg:x="64635" fg:w="24"/><text x="93.9131%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (55,642 samples, 80.63%)</title><rect x="13.0681%" y="293" width="80.6312%" height="15" fill="rgb(209,9,3)" fg:x="9018" fg:w="55642"/><text x="13.3181%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (544 samples, 0.79%)</title><rect x="93.6993%" y="293" width="0.7883%" height="15" fill="rgb(230,59,30)" fg:x="64660" fg:w="544"/><text x="93.9493%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (63 samples, 0.09%)</title><rect x="94.4876%" y="293" width="0.0913%" height="15" fill="rgb(209,121,21)" fg:x="65204" fg:w="63"/><text x="94.7376%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (18 samples, 0.03%)</title><rect x="94.5528%" y="277" width="0.0261%" height="15" fill="rgb(220,109,13)" fg:x="65249" fg:w="18"/><text x="94.8028%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,124 samples, 3.08%)</title><rect x="94.5789%" y="293" width="3.0779%" height="15" fill="rgb(232,18,1)" fg:x="65267" fg:w="2124"/><text x="94.8289%" y="303.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (25 samples, 0.04%)</title><rect x="97.6568%" y="277" width="0.0362%" height="15" fill="rgb(215,41,42)" fg:x="67391" fg:w="25"/><text x="97.9068%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (125 samples, 0.18%)</title><rect x="97.6568%" y="293" width="0.1811%" height="15" fill="rgb(224,123,36)" fg:x="67391" fg:w="125"/><text x="97.9068%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (100 samples, 0.14%)</title><rect x="97.6930%" y="277" width="0.1449%" height="15" fill="rgb(240,125,3)" fg:x="67416" fg:w="100"/><text x="97.9430%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (1,482 samples, 2.15%)</title><rect x="97.8408%" y="293" width="2.1476%" height="15" fill="rgb(205,98,50)" fg:x="67518" fg:w="1482"/><text x="98.0908%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (1,077 samples, 1.56%)</title><rect x="98.4277%" y="277" width="1.5607%" height="15" fill="rgb(205,185,37)" fg:x="67923" fg:w="1077"/><text x="98.6777%" y="287.50"></text></g><g><title>all (69,008 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="69008"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,003 samples, 86.95%)</title><rect x="13.0492%" y="373" width="86.9508%" height="15" fill="rgb(213,199,42)" fg:x="9005" fg:w="60003"/><text x="13.2992%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,003 samples, 86.95%)</title><rect x="13.0492%" y="357" width="86.9508%" height="15" fill="rgb(235,201,11)" fg:x="9005" fg:w="60003"/><text x="13.2992%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,003 samples, 86.95%)</title><rect x="13.0492%" y="341" width="86.9508%" height="15" fill="rgb(207,46,11)" fg:x="9005" fg:w="60003"/><text x="13.2992%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,003 samples, 86.95%)</title><rect x="13.0492%" y="325" width="86.9508%" height="15" fill="rgb(241,35,35)" fg:x="9005" fg:w="60003"/><text x="13.2992%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,003 samples, 86.95%)</title><rect x="13.0492%" y="309" width="86.9508%" height="15" fill="rgb(243,32,47)" fg:x="9005" fg:w="60003"/><text x="13.2992%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (8 samples, 0.01%)</title><rect x="99.9884%" y="293" width="0.0116%" height="15" fill="rgb(247,202,23)" fg:x="69000" fg:w="8"/><text x="100.2384%" y="303.50"></text></g></svg></svg>