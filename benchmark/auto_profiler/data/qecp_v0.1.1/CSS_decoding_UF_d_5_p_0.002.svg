<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="60247"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (7 samples, 0.01%)</title><rect x="0.0216%" y="53" width="0.0116%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="7"/><text x="0.2716%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.01%)</title><rect x="0.0216%" y="37" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="7"/><text x="0.2716%" y="47.50"></text></g><g><title>rust_qecp`alloc::fmt::format (7 samples, 0.01%)</title><rect x="0.0365%" y="53" width="0.0116%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="7"/><text x="0.2865%" y="63.50"></text></g><g><title>rust_qecp`core::fmt::write (7 samples, 0.01%)</title><rect x="0.0365%" y="37" width="0.0116%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="7"/><text x="0.2865%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (25 samples, 0.04%)</title><rect x="0.0183%" y="69" width="0.0415%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="25"/><text x="0.2683%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (12 samples, 0.02%)</title><rect x="0.0598%" y="69" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="36" fg:w="12"/><text x="0.3098%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (13 samples, 0.02%)</title><rect x="0.0863%" y="53" width="0.0216%" height="15" fill="rgb(207,160,47)" fg:x="52" fg:w="13"/><text x="0.3363%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (8 samples, 0.01%)</title><rect x="0.0946%" y="37" width="0.0133%" height="15" fill="rgb(228,23,34)" fg:x="57" fg:w="8"/><text x="0.3446%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (18 samples, 0.03%)</title><rect x="0.0797%" y="69" width="0.0299%" height="15" fill="rgb(218,30,26)" fg:x="48" fg:w="18"/><text x="0.3297%" y="79.50"></text></g><g><title>dyld`start (70 samples, 0.12%)</title><rect x="0.0000%" y="293" width="0.1162%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="70"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`main (70 samples, 0.12%)</title><rect x="0.0000%" y="277" width="0.1162%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="70"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (70 samples, 0.12%)</title><rect x="0.0000%" y="261" width="0.1162%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="70"/><text x="0.2500%" y="271.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (70 samples, 0.12%)</title><rect x="0.0000%" y="245" width="0.1162%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="70"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 0.12%)</title><rect x="0.0000%" y="229" width="0.1162%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="70"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::main (70 samples, 0.12%)</title><rect x="0.0000%" y="213" width="0.1162%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="70"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (70 samples, 0.12%)</title><rect x="0.0000%" y="197" width="0.1162%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="70"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (70 samples, 0.12%)</title><rect x="0.0000%" y="181" width="0.1162%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="70"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (70 samples, 0.12%)</title><rect x="0.0000%" y="165" width="0.1162%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="70"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.12%)</title><rect x="0.0000%" y="149" width="0.1162%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="70"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (70 samples, 0.12%)</title><rect x="0.0000%" y="133" width="0.1162%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="70"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.12%)</title><rect x="0.0000%" y="117" width="0.1162%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="70"/><text x="0.2500%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (69 samples, 0.11%)</title><rect x="0.0017%" y="101" width="0.1145%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="69"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (69 samples, 0.11%)</title><rect x="0.0017%" y="85" width="0.1145%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="69"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.01%)</title><rect x="0.1228%" y="213" width="0.0133%" height="15" fill="rgb(247,18,42)" fg:x="74" fg:w="8"/><text x="0.3728%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="0.1693%" y="197" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="102" fg:w="7"/><text x="0.4193%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="0.1660%" y="213" width="0.0332%" height="15" fill="rgb(249,31,29)" fg:x="100" fg:w="20"/><text x="0.4160%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (8 samples, 0.01%)</title><rect x="0.1859%" y="197" width="0.0133%" height="15" fill="rgb(225,111,53)" fg:x="112" fg:w="8"/><text x="0.4359%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (18 samples, 0.03%)</title><rect x="0.2473%" y="197" width="0.0299%" height="15" fill="rgb(238,160,17)" fg:x="149" fg:w="18"/><text x="0.4973%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.02%)</title><rect x="0.2955%" y="197" width="0.0166%" height="15" fill="rgb(214,148,48)" fg:x="178" fg:w="10"/><text x="0.5455%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="0.3237%" y="197" width="0.0398%" height="15" fill="rgb(232,36,49)" fg:x="195" fg:w="24"/><text x="0.5737%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (362 samples, 0.60%)</title><rect x="0.3635%" y="197" width="0.6009%" height="15" fill="rgb(209,103,24)" fg:x="219" fg:w="362"/><text x="0.6135%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="0.9876%" y="165" width="0.0133%" height="15" fill="rgb(229,88,8)" fg:x="595" fg:w="8"/><text x="1.2376%" y="175.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (24 samples, 0.04%)</title><rect x="0.9644%" y="197" width="0.0398%" height="15" fill="rgb(213,181,19)" fg:x="581" fg:w="24"/><text x="1.2144%" y="207.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="0.9859%" y="181" width="0.0183%" height="15" fill="rgb(254,191,54)" fg:x="594" fg:w="11"/><text x="1.2359%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="1.0208%" y="197" width="0.0149%" height="15" fill="rgb(241,83,37)" fg:x="615" fg:w="9"/><text x="1.2708%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="1.0225%" y="181" width="0.0133%" height="15" fill="rgb(233,36,39)" fg:x="616" fg:w="8"/><text x="1.2725%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="1.0225%" y="165" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="616" fg:w="8"/><text x="1.2725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="1.0241%" y="149" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="617" fg:w="7"/><text x="1.2741%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="1.0357%" y="197" width="0.0133%" height="15" fill="rgb(238,167,29)" fg:x="624" fg:w="8"/><text x="1.2857%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (598 samples, 0.99%)</title><rect x="1.0540%" y="197" width="0.9926%" height="15" fill="rgb(232,182,51)" fg:x="635" fg:w="598"/><text x="1.3040%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (89 samples, 0.15%)</title><rect x="2.0466%" y="197" width="0.1477%" height="15" fill="rgb(231,60,39)" fg:x="1233" fg:w="89"/><text x="2.2966%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.07%)</title><rect x="2.1943%" y="197" width="0.0697%" height="15" fill="rgb(208,69,12)" fg:x="1322" fg:w="42"/><text x="2.4443%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (9 samples, 0.01%)</title><rect x="2.2640%" y="197" width="0.0149%" height="15" fill="rgb(235,93,37)" fg:x="1364" fg:w="9"/><text x="2.5140%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="2.4848%" y="149" width="0.0149%" height="15" fill="rgb(213,116,39)" fg:x="1497" fg:w="9"/><text x="2.7348%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="2.4864%" y="133" width="0.0133%" height="15" fill="rgb(222,207,29)" fg:x="1498" fg:w="8"/><text x="2.7364%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="2.4831%" y="181" width="0.0183%" height="15" fill="rgb(206,96,30)" fg:x="1496" fg:w="11"/><text x="2.7331%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="2.4831%" y="165" width="0.0183%" height="15" fill="rgb(218,138,4)" fg:x="1496" fg:w="11"/><text x="2.7331%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (142 samples, 0.24%)</title><rect x="2.2790%" y="197" width="0.2357%" height="15" fill="rgb(250,191,14)" fg:x="1373" fg:w="142"/><text x="2.5290%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="2.5030%" y="181" width="0.0116%" height="15" fill="rgb(239,60,40)" fg:x="1508" fg:w="7"/><text x="2.7530%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (122 samples, 0.20%)</title><rect x="10.1349%" y="181" width="0.2025%" height="15" fill="rgb(206,27,48)" fg:x="6106" fg:w="122"/><text x="10.3849%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (375 samples, 0.62%)</title><rect x="10.3374%" y="181" width="0.6224%" height="15" fill="rgb(225,35,8)" fg:x="6228" fg:w="375"/><text x="10.5874%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="10.9599%" y="181" width="0.0232%" height="15" fill="rgb(250,213,24)" fg:x="6603" fg:w="14"/><text x="11.2099%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (73 samples, 0.12%)</title><rect x="10.9831%" y="181" width="0.1212%" height="15" fill="rgb(247,123,22)" fg:x="6617" fg:w="73"/><text x="11.2331%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (126 samples, 0.21%)</title><rect x="11.1043%" y="181" width="0.2091%" height="15" fill="rgb(231,138,38)" fg:x="6690" fg:w="126"/><text x="11.3543%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="11.3566%" y="165" width="0.0133%" height="15" fill="rgb(231,145,46)" fg:x="6842" fg:w="8"/><text x="11.6066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (45 samples, 0.07%)</title><rect x="11.3134%" y="181" width="0.0747%" height="15" fill="rgb(251,118,11)" fg:x="6816" fg:w="45"/><text x="11.5634%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="11.3881%" y="181" width="0.0166%" height="15" fill="rgb(217,147,25)" fg:x="6861" fg:w="10"/><text x="11.6381%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (94 samples, 0.16%)</title><rect x="11.4047%" y="181" width="0.1560%" height="15" fill="rgb(247,81,37)" fg:x="6871" fg:w="94"/><text x="11.6547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (49 samples, 0.08%)</title><rect x="11.5607%" y="181" width="0.0813%" height="15" fill="rgb(209,12,38)" fg:x="6965" fg:w="49"/><text x="11.8107%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (20 samples, 0.03%)</title><rect x="11.6437%" y="181" width="0.0332%" height="15" fill="rgb(227,1,9)" fg:x="7015" fg:w="20"/><text x="11.8937%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.21%)</title><rect x="11.6869%" y="181" width="0.2141%" height="15" fill="rgb(248,47,43)" fg:x="7041" fg:w="129"/><text x="11.9369%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="11.9010%" y="181" width="0.0398%" height="15" fill="rgb(221,10,30)" fg:x="7170" fg:w="24"/><text x="12.1510%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (104 samples, 0.17%)</title><rect x="11.9408%" y="181" width="0.1726%" height="15" fill="rgb(210,229,1)" fg:x="7194" fg:w="104"/><text x="12.1908%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,574 samples, 4.27%)</title><rect x="12.1135%" y="181" width="4.2724%" height="15" fill="rgb(222,148,37)" fg:x="7298" fg:w="2574"/><text x="12.3635%" y="191.50">rust_..</text></g><g><title>rust_qecp`DYLD-STUB$$free (70 samples, 0.12%)</title><rect x="16.3859%" y="181" width="0.1162%" height="15" fill="rgb(234,67,33)" fg:x="9872" fg:w="70"/><text x="16.6359%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="16.5021%" y="181" width="0.0216%" height="15" fill="rgb(247,98,35)" fg:x="9942" fg:w="13"/><text x="16.7521%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (15 samples, 0.02%)</title><rect x="16.5236%" y="181" width="0.0249%" height="15" fill="rgb(247,138,52)" fg:x="9955" fg:w="15"/><text x="16.7736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="16.7328%" y="133" width="0.0282%" height="15" fill="rgb(213,79,30)" fg:x="10081" fg:w="17"/><text x="16.9828%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="16.7444%" y="117" width="0.0166%" height="15" fill="rgb(246,177,23)" fg:x="10088" fg:w="10"/><text x="16.9944%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="16.7278%" y="149" width="0.0481%" height="15" fill="rgb(230,62,27)" fg:x="10078" fg:w="29"/><text x="16.9778%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="16.7610%" y="133" width="0.0149%" height="15" fill="rgb(216,154,8)" fg:x="10098" fg:w="9"/><text x="17.0110%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="16.7610%" y="117" width="0.0149%" height="15" fill="rgb(244,35,45)" fg:x="10098" fg:w="9"/><text x="17.0110%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="16.7627%" y="101" width="0.0133%" height="15" fill="rgb(251,115,12)" fg:x="10099" fg:w="8"/><text x="17.0127%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="16.8639%" y="117" width="0.0216%" height="15" fill="rgb(240,54,50)" fg:x="10160" fg:w="13"/><text x="17.1139%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="16.9120%" y="101" width="0.0199%" height="15" fill="rgb(233,84,52)" fg:x="10189" fg:w="12"/><text x="17.1620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="16.9701%" y="69" width="0.0116%" height="15" fill="rgb(207,117,47)" fg:x="10224" fg:w="7"/><text x="17.2201%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="16.9336%" y="85" width="0.0498%" height="15" fill="rgb(249,43,39)" fg:x="10202" fg:w="30"/><text x="17.1836%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.05%)</title><rect x="16.9320%" y="101" width="0.0531%" height="15" fill="rgb(209,38,44)" fg:x="10201" fg:w="32"/><text x="17.1820%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="16.9851%" y="101" width="0.0249%" height="15" fill="rgb(236,212,23)" fg:x="10233" fg:w="15"/><text x="17.2351%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (99 samples, 0.16%)</title><rect x="16.8855%" y="117" width="0.1643%" height="15" fill="rgb(242,79,21)" fg:x="10173" fg:w="99"/><text x="17.1355%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.04%)</title><rect x="17.0100%" y="101" width="0.0398%" height="15" fill="rgb(211,96,35)" fg:x="10248" fg:w="24"/><text x="17.2600%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.04%)</title><rect x="17.0133%" y="85" width="0.0365%" height="15" fill="rgb(253,215,40)" fg:x="10250" fg:w="22"/><text x="17.2633%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="17.0316%" y="69" width="0.0183%" height="15" fill="rgb(211,81,21)" fg:x="10261" fg:w="11"/><text x="17.2816%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.05%)</title><rect x="17.0797%" y="101" width="0.0531%" height="15" fill="rgb(208,190,38)" fg:x="10290" fg:w="32"/><text x="17.3297%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="17.1212%" y="85" width="0.0116%" height="15" fill="rgb(235,213,38)" fg:x="10315" fg:w="7"/><text x="17.3712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.04%)</title><rect x="17.1328%" y="101" width="0.0415%" height="15" fill="rgb(237,122,38)" fg:x="10322" fg:w="25"/><text x="17.3828%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.03%)</title><rect x="17.1394%" y="85" width="0.0349%" height="15" fill="rgb(244,218,35)" fg:x="10326" fg:w="21"/><text x="17.3894%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (26 samples, 0.04%)</title><rect x="17.1826%" y="101" width="0.0432%" height="15" fill="rgb(240,68,47)" fg:x="10352" fg:w="26"/><text x="17.4326%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="17.2805%" y="53" width="0.0199%" height="15" fill="rgb(210,16,53)" fg:x="10411" fg:w="12"/><text x="17.5305%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (45 samples, 0.07%)</title><rect x="17.2407%" y="85" width="0.0747%" height="15" fill="rgb(235,124,12)" fg:x="10387" fg:w="45"/><text x="17.4907%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (35 samples, 0.06%)</title><rect x="17.2573%" y="69" width="0.0581%" height="15" fill="rgb(224,169,11)" fg:x="10397" fg:w="35"/><text x="17.5073%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (52 samples, 0.09%)</title><rect x="17.2357%" y="101" width="0.0863%" height="15" fill="rgb(250,166,2)" fg:x="10384" fg:w="52"/><text x="17.4857%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="17.3220%" y="101" width="0.0116%" height="15" fill="rgb(242,216,29)" fg:x="10436" fg:w="7"/><text x="17.5720%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (164 samples, 0.27%)</title><rect x="17.0631%" y="117" width="0.2722%" height="15" fill="rgb(230,116,27)" fg:x="10280" fg:w="164"/><text x="17.3131%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (372 samples, 0.62%)</title><rect x="16.8307%" y="133" width="0.6175%" height="15" fill="rgb(228,99,48)" fg:x="10140" fg:w="372"/><text x="17.0807%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 0.11%)</title><rect x="17.3386%" y="117" width="0.1095%" height="15" fill="rgb(253,11,6)" fg:x="10446" fg:w="66"/><text x="17.5886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="17.4482%" y="133" width="0.0332%" height="15" fill="rgb(247,143,39)" fg:x="10512" fg:w="20"/><text x="17.6982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (447 samples, 0.74%)</title><rect x="16.7842%" y="149" width="0.7419%" height="15" fill="rgb(236,97,10)" fg:x="10112" fg:w="447"/><text x="17.0342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="17.5046%" y="133" width="0.0216%" height="15" fill="rgb(233,208,19)" fg:x="10546" fg:w="13"/><text x="17.7546%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="17.5063%" y="117" width="0.0199%" height="15" fill="rgb(216,164,2)" fg:x="10547" fg:w="12"/><text x="17.7563%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (580 samples, 0.96%)</title><rect x="16.5668%" y="181" width="0.9627%" height="15" fill="rgb(220,129,5)" fg:x="9981" fg:w="580"/><text x="16.8168%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (491 samples, 0.81%)</title><rect x="16.7145%" y="165" width="0.8150%" height="15" fill="rgb(242,17,10)" fg:x="10070" fg:w="491"/><text x="16.9645%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="17.5295%" y="181" width="0.0133%" height="15" fill="rgb(242,107,0)" fg:x="10561" fg:w="8"/><text x="17.7795%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (26 samples, 0.04%)</title><rect x="17.7204%" y="165" width="0.0432%" height="15" fill="rgb(251,28,31)" fg:x="10676" fg:w="26"/><text x="17.9704%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (231 samples, 0.38%)</title><rect x="18.4590%" y="149" width="0.3834%" height="15" fill="rgb(233,223,10)" fg:x="11121" fg:w="231"/><text x="18.7090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (33 samples, 0.05%)</title><rect x="18.8424%" y="149" width="0.0548%" height="15" fill="rgb(215,21,27)" fg:x="11352" fg:w="33"/><text x="19.0924%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (38 samples, 0.06%)</title><rect x="18.8972%" y="149" width="0.0631%" height="15" fill="rgb(232,23,21)" fg:x="11385" fg:w="38"/><text x="19.1472%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (106 samples, 0.18%)</title><rect x="18.9603%" y="149" width="0.1759%" height="15" fill="rgb(244,5,23)" fg:x="11423" fg:w="106"/><text x="19.2103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (62 samples, 0.10%)</title><rect x="19.0333%" y="133" width="0.1029%" height="15" fill="rgb(226,81,46)" fg:x="11467" fg:w="62"/><text x="19.2833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (828 samples, 1.37%)</title><rect x="17.7635%" y="165" width="1.3743%" height="15" fill="rgb(247,70,30)" fg:x="10702" fg:w="828"/><text x="18.0135%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (174 samples, 0.29%)</title><rect x="19.4831%" y="149" width="0.2888%" height="15" fill="rgb(212,68,19)" fg:x="11738" fg:w="174"/><text x="19.7331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (35 samples, 0.06%)</title><rect x="19.7719%" y="149" width="0.0581%" height="15" fill="rgb(240,187,13)" fg:x="11912" fg:w="35"/><text x="20.0219%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (34 samples, 0.06%)</title><rect x="19.8300%" y="149" width="0.0564%" height="15" fill="rgb(223,113,26)" fg:x="11947" fg:w="34"/><text x="20.0800%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (751 samples, 1.25%)</title><rect x="19.1379%" y="165" width="1.2465%" height="15" fill="rgb(206,192,2)" fg:x="11530" fg:w="751"/><text x="19.3879%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (300 samples, 0.50%)</title><rect x="19.8865%" y="149" width="0.4980%" height="15" fill="rgb(241,108,4)" fg:x="11981" fg:w="300"/><text x="20.1365%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (90 samples, 0.15%)</title><rect x="20.6699%" y="133" width="0.1494%" height="15" fill="rgb(247,173,49)" fg:x="12453" fg:w="90"/><text x="20.9199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (355 samples, 0.59%)</title><rect x="20.3844%" y="165" width="0.5892%" height="15" fill="rgb(224,114,35)" fg:x="12281" fg:w="355"/><text x="20.6344%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (290 samples, 0.48%)</title><rect x="20.4923%" y="149" width="0.4814%" height="15" fill="rgb(245,159,27)" fg:x="12346" fg:w="290"/><text x="20.7423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (93 samples, 0.15%)</title><rect x="20.8193%" y="133" width="0.1544%" height="15" fill="rgb(245,172,44)" fg:x="12543" fg:w="93"/><text x="21.0693%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (48 samples, 0.08%)</title><rect x="20.9737%" y="165" width="0.0797%" height="15" fill="rgb(236,23,11)" fg:x="12636" fg:w="48"/><text x="21.2237%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (298 samples, 0.49%)</title><rect x="21.0533%" y="165" width="0.4946%" height="15" fill="rgb(205,117,38)" fg:x="12684" fg:w="298"/><text x="21.3033%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (119 samples, 0.20%)</title><rect x="21.3504%" y="149" width="0.1975%" height="15" fill="rgb(237,72,25)" fg:x="12863" fg:w="119"/><text x="21.6004%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (118 samples, 0.20%)</title><rect x="21.3521%" y="133" width="0.1959%" height="15" fill="rgb(244,70,9)" fg:x="12864" fg:w="118"/><text x="21.6021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (55 samples, 0.09%)</title><rect x="21.5480%" y="165" width="0.0913%" height="15" fill="rgb(217,125,39)" fg:x="12982" fg:w="55"/><text x="21.7980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (14 samples, 0.02%)</title><rect x="21.6459%" y="165" width="0.0232%" height="15" fill="rgb(235,36,10)" fg:x="13041" fg:w="14"/><text x="21.8959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (56 samples, 0.09%)</title><rect x="21.6691%" y="165" width="0.0930%" height="15" fill="rgb(251,123,47)" fg:x="13055" fg:w="56"/><text x="21.9191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="21.7621%" y="165" width="0.0315%" height="15" fill="rgb(221,13,13)" fg:x="13111" fg:w="19"/><text x="22.0121%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="21.7936%" y="165" width="0.0166%" height="15" fill="rgb(238,131,9)" fg:x="13130" fg:w="10"/><text x="22.0436%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (17 samples, 0.03%)</title><rect x="21.8102%" y="165" width="0.0282%" height="15" fill="rgb(211,50,8)" fg:x="13140" fg:w="17"/><text x="22.0602%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (224 samples, 0.37%)</title><rect x="21.8866%" y="149" width="0.3718%" height="15" fill="rgb(245,182,24)" fg:x="13186" fg:w="224"/><text x="22.1366%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (80 samples, 0.13%)</title><rect x="22.1256%" y="133" width="0.1328%" height="15" fill="rgb(242,14,37)" fg:x="13330" fg:w="80"/><text x="22.3756%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="22.2584%" y="149" width="0.0332%" height="15" fill="rgb(246,228,12)" fg:x="13410" fg:w="20"/><text x="22.5084%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (71 samples, 0.12%)</title><rect x="22.2916%" y="149" width="0.1178%" height="15" fill="rgb(213,55,15)" fg:x="13430" fg:w="71"/><text x="22.5416%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,954 samples, 4.90%)</title><rect x="17.5428%" y="181" width="4.9031%" height="15" fill="rgb(209,9,3)" fg:x="10569" fg:w="2954"/><text x="17.7928%" y="191.50">rust_q..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (366 samples, 0.61%)</title><rect x="21.8384%" y="165" width="0.6075%" height="15" fill="rgb(230,59,30)" fg:x="13157" fg:w="366"/><text x="22.0884%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="22.4094%" y="149" width="0.0365%" height="15" fill="rgb(209,121,21)" fg:x="13501" fg:w="22"/><text x="22.6594%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (130 samples, 0.22%)</title><rect x="22.4459%" y="181" width="0.2158%" height="15" fill="rgb(220,109,13)" fg:x="13523" fg:w="130"/><text x="22.6959%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (83 samples, 0.14%)</title><rect x="22.5239%" y="165" width="0.1378%" height="15" fill="rgb(232,18,1)" fg:x="13570" fg:w="83"/><text x="22.7739%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (27 samples, 0.04%)</title><rect x="22.6169%" y="149" width="0.0448%" height="15" fill="rgb(215,41,42)" fg:x="13626" fg:w="27"/><text x="22.8669%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (135 samples, 0.22%)</title><rect x="22.6667%" y="181" width="0.2241%" height="15" fill="rgb(224,123,36)" fg:x="13656" fg:w="135"/><text x="22.9167%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,347 samples, 5.56%)</title><rect x="22.8908%" y="181" width="5.5555%" height="15" fill="rgb(240,125,3)" fg:x="13791" fg:w="3347"/><text x="23.1408%" y="191.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (319 samples, 0.53%)</title><rect x="28.4462%" y="181" width="0.5295%" height="15" fill="rgb(205,98,50)" fg:x="17138" fg:w="319"/><text x="28.6962%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="29.2994%" y="149" width="0.0166%" height="15" fill="rgb(205,185,37)" fg:x="17652" fg:w="10"/><text x="29.5494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.08%)</title><rect x="29.2761%" y="165" width="0.0780%" height="15" fill="rgb(238,207,15)" fg:x="17638" fg:w="47"/><text x="29.5261%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="29.3226%" y="149" width="0.0315%" height="15" fill="rgb(213,199,42)" fg:x="17666" fg:w="19"/><text x="29.5726%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.03%)</title><rect x="29.3243%" y="133" width="0.0299%" height="15" fill="rgb(235,201,11)" fg:x="17667" fg:w="18"/><text x="29.5743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (23 samples, 0.04%)</title><rect x="29.3542%" y="165" width="0.0382%" height="15" fill="rgb(207,46,11)" fg:x="17685" fg:w="23"/><text x="29.6042%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.03%)</title><rect x="29.3923%" y="165" width="0.0349%" height="15" fill="rgb(241,35,35)" fg:x="17708" fg:w="21"/><text x="29.6423%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.03%)</title><rect x="29.3957%" y="149" width="0.0315%" height="15" fill="rgb(243,32,47)" fg:x="17710" fg:w="19"/><text x="29.6457%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.02%)</title><rect x="29.4388%" y="165" width="0.0166%" height="15" fill="rgb(247,202,23)" fg:x="17736" fg:w="10"/><text x="29.6888%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (232 samples, 0.39%)</title><rect x="29.4637%" y="165" width="0.3851%" height="15" fill="rgb(219,102,11)" fg:x="17751" fg:w="232"/><text x="29.7137%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="30.5061%" y="85" width="0.0199%" height="15" fill="rgb(243,110,44)" fg:x="18379" fg:w="12"/><text x="30.7561%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (34 samples, 0.06%)</title><rect x="30.4795%" y="117" width="0.0564%" height="15" fill="rgb(222,74,54)" fg:x="18363" fg:w="34"/><text x="30.7295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (30 samples, 0.05%)</title><rect x="30.4862%" y="101" width="0.0498%" height="15" fill="rgb(216,99,12)" fg:x="18367" fg:w="30"/><text x="30.7362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (52 samples, 0.09%)</title><rect x="30.4662%" y="133" width="0.0863%" height="15" fill="rgb(226,22,26)" fg:x="18355" fg:w="52"/><text x="30.7162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="30.5360%" y="117" width="0.0166%" height="15" fill="rgb(217,163,10)" fg:x="18397" fg:w="10"/><text x="30.7860%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.12%)</title><rect x="30.4380%" y="149" width="0.1162%" height="15" fill="rgb(213,25,53)" fg:x="18338" fg:w="70"/><text x="30.6880%" y="159.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (105 samples, 0.17%)</title><rect x="30.5658%" y="149" width="0.1743%" height="15" fill="rgb(252,105,26)" fg:x="18415" fg:w="105"/><text x="30.8158%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (447 samples, 0.74%)</title><rect x="30.7401%" y="149" width="0.7419%" height="15" fill="rgb(220,39,43)" fg:x="18520" fg:w="447"/><text x="30.9901%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,203 samples, 3.66%)</title><rect x="28.9757%" y="181" width="3.6566%" height="15" fill="rgb(229,68,48)" fg:x="17457" fg:w="2203"/><text x="29.2257%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,677 samples, 2.78%)</title><rect x="29.8488%" y="165" width="2.7835%" height="15" fill="rgb(252,8,32)" fg:x="17983" fg:w="1677"/><text x="30.0988%" y="175.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (693 samples, 1.15%)</title><rect x="31.4821%" y="149" width="1.1503%" height="15" fill="rgb(223,20,43)" fg:x="18967" fg:w="693"/><text x="31.7321%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (9 samples, 0.01%)</title><rect x="32.6323%" y="181" width="0.0149%" height="15" fill="rgb(229,81,49)" fg:x="19660" fg:w="9"/><text x="32.8823%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (18 samples, 0.03%)</title><rect x="32.6489%" y="181" width="0.0299%" height="15" fill="rgb(236,28,36)" fg:x="19670" fg:w="18"/><text x="32.8989%" y="191.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (213 samples, 0.35%)</title><rect x="32.6788%" y="181" width="0.3535%" height="15" fill="rgb(249,185,26)" fg:x="19688" fg:w="213"/><text x="32.9288%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,943 samples, 8.20%)</title><rect x="37.4259%" y="165" width="8.2046%" height="15" fill="rgb(249,174,33)" fg:x="22548" fg:w="4943"/><text x="37.6759%" y="175.50">rust_qecp`&lt;..</text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="45.6687%" y="85" width="0.0166%" height="15" fill="rgb(233,201,37)" fg:x="27514" fg:w="10"/><text x="45.9187%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="45.6952%" y="85" width="0.0183%" height="15" fill="rgb(221,78,26)" fg:x="27530" fg:w="11"/><text x="45.9452%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="45.6985%" y="69" width="0.0149%" height="15" fill="rgb(250,127,30)" fg:x="27532" fg:w="9"/><text x="45.9485%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="45.6985%" y="53" width="0.0149%" height="15" fill="rgb(230,49,44)" fg:x="27532" fg:w="9"/><text x="45.9485%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (32 samples, 0.05%)</title><rect x="45.6637%" y="101" width="0.0531%" height="15" fill="rgb(229,67,23)" fg:x="27511" fg:w="32"/><text x="45.9137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (55 samples, 0.09%)</title><rect x="45.6471%" y="117" width="0.0913%" height="15" fill="rgb(249,83,47)" fg:x="27501" fg:w="55"/><text x="45.8971%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="45.7168%" y="101" width="0.0216%" height="15" fill="rgb(215,43,3)" fg:x="27543" fg:w="13"/><text x="45.9668%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.10%)</title><rect x="45.6454%" y="133" width="0.0963%" height="15" fill="rgb(238,154,13)" fg:x="27500" fg:w="58"/><text x="45.8954%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (68 samples, 0.11%)</title><rect x="45.6305%" y="165" width="0.1129%" height="15" fill="rgb(219,56,2)" fg:x="27491" fg:w="68"/><text x="45.8805%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (62 samples, 0.10%)</title><rect x="45.6404%" y="149" width="0.1029%" height="15" fill="rgb(233,0,4)" fg:x="27497" fg:w="62"/><text x="45.8904%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,553 samples, 4.24%)</title><rect x="45.7450%" y="165" width="4.2376%" height="15" fill="rgb(235,30,7)" fg:x="27560" fg:w="2553"/><text x="45.9950%" y="175.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (114 samples, 0.19%)</title><rect x="49.9826%" y="165" width="0.1892%" height="15" fill="rgb(250,79,13)" fg:x="30113" fg:w="114"/><text x="50.2326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.03%)</title><rect x="50.2730%" y="149" width="0.0299%" height="15" fill="rgb(211,146,34)" fg:x="30288" fg:w="18"/><text x="50.5230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="50.2880%" y="133" width="0.0149%" height="15" fill="rgb(228,22,38)" fg:x="30297" fg:w="9"/><text x="50.5380%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="50.2896%" y="117" width="0.0133%" height="15" fill="rgb(235,168,5)" fg:x="30298" fg:w="8"/><text x="50.5396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.02%)</title><rect x="50.3029%" y="149" width="0.0216%" height="15" fill="rgb(221,155,16)" fg:x="30306" fg:w="13"/><text x="50.5529%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (130 samples, 0.22%)</title><rect x="50.3394%" y="149" width="0.2158%" height="15" fill="rgb(215,215,53)" fg:x="30328" fg:w="130"/><text x="50.5894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="50.8922%" y="101" width="0.0216%" height="15" fill="rgb(223,4,10)" fg:x="30661" fg:w="13"/><text x="51.1422%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="50.8988%" y="85" width="0.0149%" height="15" fill="rgb(234,103,6)" fg:x="30665" fg:w="9"/><text x="51.1488%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.05%)</title><rect x="50.8805%" y="133" width="0.0498%" height="15" fill="rgb(227,97,0)" fg:x="30654" fg:w="30"/><text x="51.1305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.04%)</title><rect x="50.8888%" y="117" width="0.0415%" height="15" fill="rgb(234,150,53)" fg:x="30659" fg:w="25"/><text x="51.1388%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="50.9137%" y="101" width="0.0166%" height="15" fill="rgb(228,201,54)" fg:x="30674" fg:w="10"/><text x="51.1637%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (392 samples, 0.65%)</title><rect x="50.9337%" y="133" width="0.6507%" height="15" fill="rgb(222,22,37)" fg:x="30686" fg:w="392"/><text x="51.1837%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,198 samples, 1.99%)</title><rect x="50.1718%" y="165" width="1.9885%" height="15" fill="rgb(237,53,32)" fg:x="30227" fg:w="1198"/><text x="50.4218%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (967 samples, 1.61%)</title><rect x="50.5552%" y="149" width="1.6051%" height="15" fill="rgb(233,25,53)" fg:x="30458" fg:w="967"/><text x="50.8052%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (347 samples, 0.58%)</title><rect x="51.5843%" y="133" width="0.5760%" height="15" fill="rgb(210,40,34)" fg:x="31078" fg:w="347"/><text x="51.8343%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="57.3473%" y="85" width="0.0149%" height="15" fill="rgb(241,220,44)" fg:x="34550" fg:w="9"/><text x="57.5973%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.3805%" y="69" width="0.0116%" height="15" fill="rgb(235,28,35)" fg:x="34570" fg:w="7"/><text x="57.6305%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.03%)</title><rect x="57.3622%" y="85" width="0.0315%" height="15" fill="rgb(210,56,17)" fg:x="34559" fg:w="19"/><text x="57.6122%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (66 samples, 0.11%)</title><rect x="57.3340%" y="101" width="0.1095%" height="15" fill="rgb(224,130,29)" fg:x="34542" fg:w="66"/><text x="57.5840%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.05%)</title><rect x="57.3954%" y="85" width="0.0481%" height="15" fill="rgb(235,212,8)" fg:x="34579" fg:w="29"/><text x="57.6454%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (89 samples, 0.15%)</title><rect x="57.3058%" y="149" width="0.1477%" height="15" fill="rgb(223,33,50)" fg:x="34525" fg:w="89"/><text x="57.5558%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (82 samples, 0.14%)</title><rect x="57.3174%" y="133" width="0.1361%" height="15" fill="rgb(219,149,13)" fg:x="34532" fg:w="82"/><text x="57.5674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (80 samples, 0.13%)</title><rect x="57.3207%" y="117" width="0.1328%" height="15" fill="rgb(250,156,29)" fg:x="34534" fg:w="80"/><text x="57.5707%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (14,714 samples, 24.42%)</title><rect x="33.0324%" y="181" width="24.4228%" height="15" fill="rgb(216,193,19)" fg:x="19901" fg:w="14714"/><text x="33.2824%" y="191.50">rust_qecp`rust_qecp::ftqec::PlanarCodeM..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,190 samples, 5.29%)</title><rect x="52.1603%" y="165" width="5.2949%" height="15" fill="rgb(216,135,14)" fg:x="31425" fg:w="3190"/><text x="52.4103%" y="175.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="59.6577%" y="85" width="0.0149%" height="15" fill="rgb(241,47,5)" fg:x="35942" fg:w="9"/><text x="59.9077%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="59.6544%" y="101" width="0.0216%" height="15" fill="rgb(233,42,35)" fg:x="35940" fg:w="13"/><text x="59.9044%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.03%)</title><rect x="59.6511%" y="149" width="0.0282%" height="15" fill="rgb(231,13,6)" fg:x="35938" fg:w="17"/><text x="59.9011%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="59.6511%" y="133" width="0.0282%" height="15" fill="rgb(207,181,40)" fg:x="35938" fg:w="17"/><text x="59.9011%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.03%)</title><rect x="59.6528%" y="117" width="0.0266%" height="15" fill="rgb(254,173,49)" fg:x="35939" fg:w="16"/><text x="59.9028%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 0.07%)</title><rect x="59.6096%" y="165" width="0.0714%" height="15" fill="rgb(221,1,38)" fg:x="35913" fg:w="43"/><text x="59.8596%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.03%)</title><rect x="59.6876%" y="149" width="0.0266%" height="15" fill="rgb(206,124,46)" fg:x="35960" fg:w="16"/><text x="59.9376%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.04%)</title><rect x="59.6810%" y="165" width="0.0382%" height="15" fill="rgb(249,21,11)" fg:x="35956" fg:w="23"/><text x="59.9310%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (63 samples, 0.10%)</title><rect x="59.7192%" y="149" width="0.1046%" height="15" fill="rgb(222,201,40)" fg:x="35979" fg:w="63"/><text x="59.9692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="59.8237%" y="149" width="0.0282%" height="15" fill="rgb(235,61,29)" fg:x="36042" fg:w="17"/><text x="60.0737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (24 samples, 0.04%)</title><rect x="59.8519%" y="149" width="0.0398%" height="15" fill="rgb(219,207,3)" fg:x="36059" fg:w="24"/><text x="60.1019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.06%)</title><rect x="59.8918%" y="149" width="0.0598%" height="15" fill="rgb(222,56,46)" fg:x="36083" fg:w="36"/><text x="60.1418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.04%)</title><rect x="59.9532%" y="149" width="0.0398%" height="15" fill="rgb(239,76,54)" fg:x="36120" fg:w="24"/><text x="60.2032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="59.9930%" y="149" width="0.0349%" height="15" fill="rgb(231,124,27)" fg:x="36144" fg:w="21"/><text x="60.2430%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.04%)</title><rect x="60.4445%" y="117" width="0.0365%" height="15" fill="rgb(249,195,6)" fg:x="36416" fg:w="22"/><text x="60.6945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (253 samples, 0.42%)</title><rect x="60.6121%" y="101" width="0.4199%" height="15" fill="rgb(237,174,47)" fg:x="36517" fg:w="253"/><text x="60.8621%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (86 samples, 0.14%)</title><rect x="60.8893%" y="85" width="0.1427%" height="15" fill="rgb(206,201,31)" fg:x="36684" fg:w="86"/><text x="61.1393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (567 samples, 0.94%)</title><rect x="60.1424%" y="133" width="0.9411%" height="15" fill="rgb(231,57,52)" fg:x="36234" fg:w="567"/><text x="60.3924%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (363 samples, 0.60%)</title><rect x="60.4810%" y="117" width="0.6025%" height="15" fill="rgb(248,177,22)" fg:x="36438" fg:w="363"/><text x="60.7310%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.05%)</title><rect x="61.0321%" y="101" width="0.0515%" height="15" fill="rgb(215,211,37)" fg:x="36770" fg:w="31"/><text x="61.2821%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (54 samples, 0.09%)</title><rect x="61.0835%" y="133" width="0.0896%" height="15" fill="rgb(241,128,51)" fg:x="36801" fg:w="54"/><text x="61.3335%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (103 samples, 0.17%)</title><rect x="61.3873%" y="117" width="0.1710%" height="15" fill="rgb(227,165,31)" fg:x="36984" fg:w="103"/><text x="61.6373%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (233 samples, 0.39%)</title><rect x="61.1732%" y="133" width="0.3867%" height="15" fill="rgb(228,167,24)" fg:x="36855" fg:w="233"/><text x="61.4232%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="61.5599%" y="133" width="0.0149%" height="15" fill="rgb(228,143,12)" fg:x="37088" fg:w="9"/><text x="61.8099%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (71 samples, 0.12%)</title><rect x="61.5749%" y="133" width="0.1178%" height="15" fill="rgb(249,149,8)" fg:x="37097" fg:w="71"/><text x="61.8249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="61.6927%" y="133" width="0.0183%" height="15" fill="rgb(243,35,44)" fg:x="37168" fg:w="11"/><text x="61.9427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.04%)</title><rect x="61.7110%" y="133" width="0.0382%" height="15" fill="rgb(246,89,9)" fg:x="37179" fg:w="23"/><text x="61.9610%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (145 samples, 0.24%)</title><rect x="61.8670%" y="117" width="0.2407%" height="15" fill="rgb(233,213,13)" fg:x="37273" fg:w="145"/><text x="62.1170%" y="127.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="62.1077%" y="117" width="0.0216%" height="15" fill="rgb(233,141,41)" fg:x="37418" fg:w="13"/><text x="62.3577%" y="127.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="62.1392%" y="117" width="0.0149%" height="15" fill="rgb(239,167,4)" fg:x="37437" fg:w="9"/><text x="62.3892%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (73 samples, 0.12%)</title><rect x="62.2272%" y="101" width="0.1212%" height="15" fill="rgb(209,217,16)" fg:x="37490" fg:w="73"/><text x="62.4772%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (143 samples, 0.24%)</title><rect x="62.3483%" y="101" width="0.2374%" height="15" fill="rgb(219,88,35)" fg:x="37563" fg:w="143"/><text x="62.5983%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (277 samples, 0.46%)</title><rect x="62.1541%" y="117" width="0.4598%" height="15" fill="rgb(220,193,23)" fg:x="37446" fg:w="277"/><text x="62.4041%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.03%)</title><rect x="62.5857%" y="101" width="0.0282%" height="15" fill="rgb(230,90,52)" fg:x="37706" fg:w="17"/><text x="62.8357%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="62.6139%" y="117" width="0.0249%" height="15" fill="rgb(252,106,19)" fg:x="37723" fg:w="15"/><text x="62.8639%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="62.9442%" y="85" width="0.0315%" height="15" fill="rgb(206,74,20)" fg:x="37922" fg:w="19"/><text x="63.1942%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (137 samples, 0.23%)</title><rect x="63.0272%" y="69" width="0.2274%" height="15" fill="rgb(230,138,44)" fg:x="37972" fg:w="137"/><text x="63.2772%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="63.2131%" y="53" width="0.0415%" height="15" fill="rgb(235,182,43)" fg:x="38084" fg:w="25"/><text x="63.4631%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (283 samples, 0.47%)</title><rect x="62.8181%" y="101" width="0.4697%" height="15" fill="rgb(242,16,51)" fg:x="37846" fg:w="283"/><text x="63.0681%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (188 samples, 0.31%)</title><rect x="62.9757%" y="85" width="0.3120%" height="15" fill="rgb(248,9,4)" fg:x="37941" fg:w="188"/><text x="63.2257%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="63.2546%" y="69" width="0.0332%" height="15" fill="rgb(210,31,22)" fg:x="38109" fg:w="20"/><text x="63.5046%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="63.2878%" y="101" width="0.0299%" height="15" fill="rgb(239,54,39)" fg:x="38129" fg:w="18"/><text x="63.5378%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (951 samples, 1.58%)</title><rect x="61.7491%" y="133" width="1.5785%" height="15" fill="rgb(230,99,41)" fg:x="37202" fg:w="951"/><text x="61.9991%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (415 samples, 0.69%)</title><rect x="62.6388%" y="117" width="0.6888%" height="15" fill="rgb(253,106,12)" fg:x="37738" fg:w="415"/><text x="62.8888%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (63 samples, 0.10%)</title><rect x="63.4704%" y="117" width="0.1046%" height="15" fill="rgb(213,46,41)" fg:x="38239" fg:w="63"/><text x="63.7204%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (114 samples, 0.19%)</title><rect x="63.5749%" y="117" width="0.1892%" height="15" fill="rgb(215,133,35)" fg:x="38302" fg:w="114"/><text x="63.8249%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (305 samples, 0.51%)</title><rect x="63.3276%" y="133" width="0.5062%" height="15" fill="rgb(213,28,5)" fg:x="38153" fg:w="305"/><text x="63.5776%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.07%)</title><rect x="63.7642%" y="117" width="0.0697%" height="15" fill="rgb(215,77,49)" fg:x="38416" fg:w="42"/><text x="64.0142%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.04%)</title><rect x="63.8339%" y="133" width="0.0448%" height="15" fill="rgb(248,100,22)" fg:x="38458" fg:w="27"/><text x="64.0839%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,338 samples, 3.88%)</title><rect x="60.0279%" y="149" width="3.8807%" height="15" fill="rgb(208,67,9)" fg:x="36165" fg:w="2338"/><text x="60.2779%" y="159.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="63.8787%" y="133" width="0.0299%" height="15" fill="rgb(219,133,21)" fg:x="38485" fg:w="18"/><text x="64.1287%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.01%)</title><rect x="63.9086%" y="149" width="0.0116%" height="15" fill="rgb(246,46,29)" fg:x="38503" fg:w="7"/><text x="64.1586%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (25 samples, 0.04%)</title><rect x="63.9202%" y="149" width="0.0415%" height="15" fill="rgb(246,185,52)" fg:x="38510" fg:w="25"/><text x="64.1702%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (38 samples, 0.06%)</title><rect x="63.9617%" y="149" width="0.0631%" height="15" fill="rgb(252,136,11)" fg:x="38535" fg:w="38"/><text x="64.2117%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (29 samples, 0.05%)</title><rect x="64.0248%" y="149" width="0.0481%" height="15" fill="rgb(219,138,53)" fg:x="38573" fg:w="29"/><text x="64.2748%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.03%)</title><rect x="64.0729%" y="149" width="0.0315%" height="15" fill="rgb(211,51,23)" fg:x="38602" fg:w="19"/><text x="64.3229%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="64.1078%" y="133" width="0.0116%" height="15" fill="rgb(247,221,28)" fg:x="38623" fg:w="7"/><text x="64.3578%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.02%)</title><rect x="64.1044%" y="149" width="0.0166%" height="15" fill="rgb(251,222,45)" fg:x="38621" fg:w="10"/><text x="64.3544%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,661 samples, 4.42%)</title><rect x="59.7192%" y="165" width="4.4168%" height="15" fill="rgb(217,162,53)" fg:x="35979" fg:w="2661"/><text x="59.9692%" y="175.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (9 samples, 0.01%)</title><rect x="64.1210%" y="149" width="0.0149%" height="15" fill="rgb(229,93,14)" fg:x="38631" fg:w="9"/><text x="64.3710%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="64.1609%" y="101" width="0.0149%" height="15" fill="rgb(209,67,49)" fg:x="38655" fg:w="9"/><text x="64.4109%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="64.1625%" y="85" width="0.0133%" height="15" fill="rgb(213,87,29)" fg:x="38656" fg:w="8"/><text x="64.4125%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="64.1576%" y="117" width="0.0382%" height="15" fill="rgb(205,151,52)" fg:x="38653" fg:w="23"/><text x="64.4076%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="64.1775%" y="101" width="0.0183%" height="15" fill="rgb(253,215,39)" fg:x="38665" fg:w="11"/><text x="64.4275%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="64.1824%" y="85" width="0.0133%" height="15" fill="rgb(221,220,41)" fg:x="38668" fg:w="8"/><text x="64.4324%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="64.1559%" y="133" width="0.0415%" height="15" fill="rgb(218,133,21)" fg:x="38652" fg:w="25"/><text x="64.4059%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (36 samples, 0.06%)</title><rect x="64.1393%" y="165" width="0.0598%" height="15" fill="rgb(221,193,43)" fg:x="38642" fg:w="36"/><text x="64.3893%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (27 samples, 0.04%)</title><rect x="64.1542%" y="149" width="0.0448%" height="15" fill="rgb(240,128,52)" fg:x="38651" fg:w="27"/><text x="64.4042%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="64.5244%" y="149" width="0.0199%" height="15" fill="rgb(253,114,12)" fg:x="38874" fg:w="12"/><text x="64.7744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (41 samples, 0.07%)</title><rect x="64.5460%" y="149" width="0.0681%" height="15" fill="rgb(215,223,47)" fg:x="38887" fg:w="41"/><text x="64.7960%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (20 samples, 0.03%)</title><rect x="64.6140%" y="149" width="0.0332%" height="15" fill="rgb(248,225,23)" fg:x="38928" fg:w="20"/><text x="64.8640%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (24 samples, 0.04%)</title><rect x="64.6472%" y="149" width="0.0398%" height="15" fill="rgb(250,108,0)" fg:x="38948" fg:w="24"/><text x="64.8972%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="64.6870%" y="149" width="0.0166%" height="15" fill="rgb(228,208,7)" fg:x="38972" fg:w="10"/><text x="64.9370%" y="159.50"></text></g><g><title>rust_qecp`__rdl_realloc (20 samples, 0.03%)</title><rect x="64.7036%" y="149" width="0.0332%" height="15" fill="rgb(244,45,10)" fg:x="38982" fg:w="20"/><text x="64.9536%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="64.9410%" y="117" width="0.0166%" height="15" fill="rgb(207,125,25)" fg:x="39125" fg:w="10"/><text x="65.1910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (168 samples, 0.28%)</title><rect x="65.0389%" y="101" width="0.2789%" height="15" fill="rgb(210,195,18)" fg:x="39184" fg:w="168"/><text x="65.2889%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (66 samples, 0.11%)</title><rect x="65.2082%" y="85" width="0.1095%" height="15" fill="rgb(249,80,12)" fg:x="39286" fg:w="66"/><text x="65.4582%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (311 samples, 0.52%)</title><rect x="64.8215%" y="133" width="0.5162%" height="15" fill="rgb(221,65,9)" fg:x="39053" fg:w="311"/><text x="65.0715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (229 samples, 0.38%)</title><rect x="64.9576%" y="117" width="0.3801%" height="15" fill="rgb(235,49,36)" fg:x="39135" fg:w="229"/><text x="65.2076%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="65.3178%" y="101" width="0.0199%" height="15" fill="rgb(225,32,20)" fg:x="39352" fg:w="12"/><text x="65.5678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="65.3377%" y="133" width="0.0299%" height="15" fill="rgb(215,141,46)" fg:x="39364" fg:w="18"/><text x="65.5877%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.02%)</title><rect x="65.3676%" y="133" width="0.0166%" height="15" fill="rgb(250,160,47)" fg:x="39382" fg:w="10"/><text x="65.6176%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (29 samples, 0.05%)</title><rect x="65.3891%" y="133" width="0.0481%" height="15" fill="rgb(216,222,40)" fg:x="39395" fg:w="29"/><text x="65.6391%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (40 samples, 0.07%)</title><rect x="65.7045%" y="117" width="0.0664%" height="15" fill="rgb(234,217,39)" fg:x="39585" fg:w="40"/><text x="65.9545%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (18 samples, 0.03%)</title><rect x="65.9352%" y="101" width="0.0299%" height="15" fill="rgb(207,178,40)" fg:x="39724" fg:w="18"/><text x="66.1852%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (34 samples, 0.06%)</title><rect x="65.9651%" y="101" width="0.0564%" height="15" fill="rgb(221,136,13)" fg:x="39742" fg:w="34"/><text x="66.2151%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="66.0215%" y="101" width="0.0531%" height="15" fill="rgb(249,199,10)" fg:x="39776" fg:w="32"/><text x="66.2715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (160 samples, 0.27%)</title><rect x="66.0813%" y="101" width="0.2656%" height="15" fill="rgb(249,222,13)" fg:x="39812" fg:w="160"/><text x="66.3313%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="66.6008%" y="85" width="0.0183%" height="15" fill="rgb(244,185,38)" fg:x="40125" fg:w="11"/><text x="66.8508%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (43 samples, 0.07%)</title><rect x="66.6191%" y="85" width="0.0714%" height="15" fill="rgb(236,202,9)" fg:x="40136" fg:w="43"/><text x="66.8691%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (132 samples, 0.22%)</title><rect x="66.6905%" y="85" width="0.2191%" height="15" fill="rgb(250,229,37)" fg:x="40179" fg:w="132"/><text x="66.9405%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (113 samples, 0.19%)</title><rect x="67.2847%" y="53" width="0.1876%" height="15" fill="rgb(206,174,23)" fg:x="40537" fg:w="113"/><text x="67.5347%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (316 samples, 0.52%)</title><rect x="66.9693%" y="69" width="0.5245%" height="15" fill="rgb(211,33,43)" fg:x="40347" fg:w="316"/><text x="67.2193%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="67.4722%" y="53" width="0.0216%" height="15" fill="rgb(245,58,50)" fg:x="40650" fg:w="13"/><text x="67.7222%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="67.4938%" y="69" width="0.0199%" height="15" fill="rgb(244,68,36)" fg:x="40663" fg:w="12"/><text x="67.7438%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (365 samples, 0.61%)</title><rect x="66.9096%" y="85" width="0.6058%" height="15" fill="rgb(232,229,15)" fg:x="40311" fg:w="365"/><text x="67.1596%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (132 samples, 0.22%)</title><rect x="67.5154%" y="85" width="0.2191%" height="15" fill="rgb(254,30,23)" fg:x="40676" fg:w="132"/><text x="67.7654%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (52 samples, 0.09%)</title><rect x="67.8872%" y="53" width="0.0863%" height="15" fill="rgb(235,160,14)" fg:x="40900" fg:w="52"/><text x="68.1372%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (239 samples, 0.40%)</title><rect x="67.7345%" y="85" width="0.3967%" height="15" fill="rgb(212,155,44)" fg:x="40808" fg:w="239"/><text x="67.9845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (208 samples, 0.35%)</title><rect x="67.7859%" y="69" width="0.3452%" height="15" fill="rgb(226,2,50)" fg:x="40839" fg:w="208"/><text x="68.0359%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (95 samples, 0.16%)</title><rect x="67.9735%" y="53" width="0.1577%" height="15" fill="rgb(234,177,6)" fg:x="40952" fg:w="95"/><text x="68.2235%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,093 samples, 1.81%)</title><rect x="66.3469%" y="101" width="1.8142%" height="15" fill="rgb(217,24,9)" fg:x="39972" fg:w="1093"/><text x="66.5969%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.03%)</title><rect x="68.1312%" y="85" width="0.0299%" height="15" fill="rgb(220,13,46)" fg:x="41047" fg:w="18"/><text x="68.3812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="68.1611%" y="101" width="0.0133%" height="15" fill="rgb(239,221,27)" fg:x="41065" fg:w="8"/><text x="68.4111%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,538 samples, 2.55%)</title><rect x="65.7709%" y="117" width="2.5528%" height="15" fill="rgb(222,198,25)" fg:x="39625" fg:w="1538"/><text x="66.0209%" y="127.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.15%)</title><rect x="68.1743%" y="101" width="0.1494%" height="15" fill="rgb(211,99,13)" fg:x="41073" fg:w="90"/><text x="68.4243%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (148 samples, 0.25%)</title><rect x="68.3237%" y="117" width="0.2457%" height="15" fill="rgb(232,111,31)" fg:x="41163" fg:w="148"/><text x="68.5737%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (30 samples, 0.05%)</title><rect x="68.5694%" y="117" width="0.0498%" height="15" fill="rgb(245,82,37)" fg:x="41311" fg:w="30"/><text x="68.8194%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,927 samples, 3.20%)</title><rect x="65.4373%" y="133" width="3.1985%" height="15" fill="rgb(227,149,46)" fg:x="39424" fg:w="1927"/><text x="65.6873%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="68.6192%" y="117" width="0.0166%" height="15" fill="rgb(218,36,50)" fg:x="41341" fg:w="10"/><text x="68.8692%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,685 samples, 4.46%)</title><rect x="64.1990%" y="165" width="4.4567%" height="15" fill="rgb(226,80,48)" fg:x="38678" fg:w="2685"/><text x="64.4490%" y="175.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,361 samples, 3.92%)</title><rect x="64.7368%" y="149" width="3.9189%" height="15" fill="rgb(238,224,15)" fg:x="39002" fg:w="2361"/><text x="64.9868%" y="159.50">rust..</text></g><g><title>rust_qecp`__rdl_realloc (12 samples, 0.02%)</title><rect x="68.6358%" y="133" width="0.0199%" height="15" fill="rgb(241,136,10)" fg:x="41351" fg:w="12"/><text x="68.8858%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (82 samples, 0.14%)</title><rect x="68.6557%" y="165" width="0.1361%" height="15" fill="rgb(208,32,45)" fg:x="41363" fg:w="82"/><text x="68.9057%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (74 samples, 0.12%)</title><rect x="68.7918%" y="149" width="0.1228%" height="15" fill="rgb(207,135,9)" fg:x="41445" fg:w="74"/><text x="69.0418%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.02%)</title><rect x="68.9296%" y="149" width="0.0216%" height="15" fill="rgb(206,86,44)" fg:x="41528" fg:w="13"/><text x="69.1796%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (27 samples, 0.04%)</title><rect x="69.0823%" y="133" width="0.0448%" height="15" fill="rgb(245,177,15)" fg:x="41620" fg:w="27"/><text x="69.3323%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="69.1271%" y="133" width="0.0216%" height="15" fill="rgb(206,64,50)" fg:x="41647" fg:w="13"/><text x="69.3771%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="69.1487%" y="133" width="0.0183%" height="15" fill="rgb(234,36,40)" fg:x="41660" fg:w="11"/><text x="69.3987%" y="143.50"></text></g><g><title>rust_qecp`__rdl_alloc (15 samples, 0.02%)</title><rect x="69.1669%" y="133" width="0.0249%" height="15" fill="rgb(213,64,8)" fg:x="41671" fg:w="15"/><text x="69.4169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="69.4723%" y="101" width="0.0216%" height="15" fill="rgb(210,75,36)" fg:x="41855" fg:w="13"/><text x="69.7223%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (26 samples, 0.04%)</title><rect x="69.4939%" y="101" width="0.0432%" height="15" fill="rgb(229,88,21)" fg:x="41868" fg:w="26"/><text x="69.7439%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.02%)</title><rect x="69.5852%" y="85" width="0.0232%" height="15" fill="rgb(252,204,47)" fg:x="41923" fg:w="14"/><text x="69.8352%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (366 samples, 0.61%)</title><rect x="70.0118%" y="53" width="0.6075%" height="15" fill="rgb(208,77,27)" fg:x="42180" fg:w="366"/><text x="70.2618%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (68 samples, 0.11%)</title><rect x="70.6193%" y="53" width="0.1129%" height="15" fill="rgb(221,76,26)" fg:x="42546" fg:w="68"/><text x="70.8693%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (983 samples, 1.63%)</title><rect x="69.3196%" y="117" width="1.6316%" height="15" fill="rgb(225,139,18)" fg:x="41763" fg:w="983"/><text x="69.5696%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (852 samples, 1.41%)</title><rect x="69.5371%" y="101" width="1.4142%" height="15" fill="rgb(230,137,11)" fg:x="41894" fg:w="852"/><text x="69.7871%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (809 samples, 1.34%)</title><rect x="69.6084%" y="85" width="1.3428%" height="15" fill="rgb(212,28,1)" fg:x="41937" fg:w="809"/><text x="69.8584%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (674 samples, 1.12%)</title><rect x="69.8325%" y="69" width="1.1187%" height="15" fill="rgb(248,164,17)" fg:x="42072" fg:w="674"/><text x="70.0825%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (132 samples, 0.22%)</title><rect x="70.7322%" y="53" width="0.2191%" height="15" fill="rgb(222,171,42)" fg:x="42614" fg:w="132"/><text x="70.9822%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (38 samples, 0.06%)</title><rect x="70.9513%" y="117" width="0.0631%" height="15" fill="rgb(243,84,45)" fg:x="42746" fg:w="38"/><text x="71.2013%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.08%)</title><rect x="71.0143%" y="117" width="0.0764%" height="15" fill="rgb(252,49,23)" fg:x="42784" fg:w="46"/><text x="71.2643%" y="127.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,302 samples, 2.16%)</title><rect x="68.9545%" y="149" width="2.1611%" height="15" fill="rgb(215,19,7)" fg:x="41543" fg:w="1302"/><text x="69.2045%" y="159.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,159 samples, 1.92%)</title><rect x="69.1918%" y="133" width="1.9237%" height="15" fill="rgb(238,81,41)" fg:x="41686" fg:w="1159"/><text x="69.4418%" y="143.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="71.0907%" y="117" width="0.0249%" height="15" fill="rgb(210,199,37)" fg:x="42830" fg:w="15"/><text x="71.3407%" y="127.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,423 samples, 2.36%)</title><rect x="68.7918%" y="165" width="2.3619%" height="15" fill="rgb(244,192,49)" fg:x="41445" fg:w="1423"/><text x="69.0418%" y="175.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.04%)</title><rect x="71.1156%" y="149" width="0.0382%" height="15" fill="rgb(226,211,11)" fg:x="42845" fg:w="23"/><text x="71.3656%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (24 samples, 0.04%)</title><rect x="72.4966%" y="133" width="0.0398%" height="15" fill="rgb(236,162,54)" fg:x="43677" fg:w="24"/><text x="72.7466%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.05%)</title><rect x="73.0509%" y="117" width="0.0481%" height="15" fill="rgb(220,229,9)" fg:x="44011" fg:w="29"/><text x="73.3009%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.03%)</title><rect x="73.3779%" y="101" width="0.0282%" height="15" fill="rgb(250,87,22)" fg:x="44208" fg:w="17"/><text x="73.6279%" y="111.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,423 samples, 2.36%)</title><rect x="71.1538%" y="165" width="2.3619%" height="15" fill="rgb(239,43,17)" fg:x="42868" fg:w="1423"/><text x="71.4038%" y="175.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,006 samples, 1.67%)</title><rect x="71.8459%" y="149" width="1.6698%" height="15" fill="rgb(231,177,25)" fg:x="43285" fg:w="1006"/><text x="72.0959%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (590 samples, 0.98%)</title><rect x="72.5364%" y="133" width="0.9793%" height="15" fill="rgb(219,179,1)" fg:x="43701" fg:w="590"/><text x="72.7864%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (251 samples, 0.42%)</title><rect x="73.0991%" y="117" width="0.4166%" height="15" fill="rgb(238,219,53)" fg:x="44040" fg:w="251"/><text x="73.3491%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (66 samples, 0.11%)</title><rect x="73.4061%" y="101" width="0.1095%" height="15" fill="rgb(232,167,36)" fg:x="44225" fg:w="66"/><text x="73.6561%" y="111.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (13 samples, 0.02%)</title><rect x="73.4941%" y="85" width="0.0216%" height="15" fill="rgb(244,19,51)" fg:x="44278" fg:w="13"/><text x="73.7441%" y="95.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (649 samples, 1.08%)</title><rect x="74.3805%" y="149" width="1.0772%" height="15" fill="rgb(224,6,22)" fg:x="44812" fg:w="649"/><text x="74.6305%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,151 samples, 1.91%)</title><rect x="75.4577%" y="149" width="1.9105%" height="15" fill="rgb(224,145,5)" fg:x="45461" fg:w="1151"/><text x="75.7077%" y="159.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,786 samples, 4.62%)</title><rect x="73.5157%" y="165" width="4.6243%" height="15" fill="rgb(234,130,49)" fg:x="44291" fg:w="2786"/><text x="73.7657%" y="175.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (465 samples, 0.77%)</title><rect x="77.3682%" y="149" width="0.7718%" height="15" fill="rgb(254,6,2)" fg:x="46612" fg:w="465"/><text x="77.6182%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (27 samples, 0.04%)</title><rect x="78.1400%" y="165" width="0.0448%" height="15" fill="rgb(208,96,46)" fg:x="47077" fg:w="27"/><text x="78.3900%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (298 samples, 0.49%)</title><rect x="78.1848%" y="165" width="0.4946%" height="15" fill="rgb(239,3,39)" fg:x="47104" fg:w="298"/><text x="78.4348%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (12,786 samples, 21.22%)</title><rect x="57.4601%" y="181" width="21.2226%" height="15" fill="rgb(233,210,1)" fg:x="34618" fg:w="12786"/><text x="57.7101%" y="191.50">rust_qecp`rust_qecp::union_find_d..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (199 samples, 0.33%)</title><rect x="80.3774%" y="165" width="0.3303%" height="15" fill="rgb(244,137,37)" fg:x="48425" fg:w="199"/><text x="80.6274%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="80.7808%" y="149" width="0.0116%" height="15" fill="rgb(240,136,2)" fg:x="48668" fg:w="7"/><text x="81.0308%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (68 samples, 0.11%)</title><rect x="80.8256%" y="133" width="0.1129%" height="15" fill="rgb(239,18,37)" fg:x="48695" fg:w="68"/><text x="81.0756%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="80.9069%" y="117" width="0.0315%" height="15" fill="rgb(218,185,22)" fg:x="48744" fg:w="19"/><text x="81.1569%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (93 samples, 0.15%)</title><rect x="80.7924%" y="149" width="0.1544%" height="15" fill="rgb(225,218,4)" fg:x="48675" fg:w="93"/><text x="81.0424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (149 samples, 0.25%)</title><rect x="80.7078%" y="165" width="0.2473%" height="15" fill="rgb(230,182,32)" fg:x="48624" fg:w="149"/><text x="80.9578%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (98 samples, 0.16%)</title><rect x="81.1708%" y="149" width="0.1627%" height="15" fill="rgb(242,56,43)" fg:x="48903" fg:w="98"/><text x="81.4208%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (247 samples, 0.41%)</title><rect x="80.9650%" y="165" width="0.4100%" height="15" fill="rgb(233,99,24)" fg:x="48779" fg:w="247"/><text x="81.2150%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="81.3451%" y="149" width="0.0299%" height="15" fill="rgb(234,209,42)" fg:x="49008" fg:w="18"/><text x="81.5951%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.03%)</title><rect x="81.3468%" y="133" width="0.0282%" height="15" fill="rgb(227,7,12)" fg:x="49009" fg:w="17"/><text x="81.5968%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.04%)</title><rect x="81.3750%" y="165" width="0.0365%" height="15" fill="rgb(245,203,43)" fg:x="49026" fg:w="22"/><text x="81.6250%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="81.4746%" y="133" width="0.0232%" height="15" fill="rgb(238,205,33)" fg:x="49086" fg:w="14"/><text x="81.7246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (55 samples, 0.09%)</title><rect x="81.4115%" y="165" width="0.0913%" height="15" fill="rgb(231,56,7)" fg:x="49048" fg:w="55"/><text x="81.6615%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (50 samples, 0.08%)</title><rect x="81.4198%" y="149" width="0.0830%" height="15" fill="rgb(244,186,29)" fg:x="49053" fg:w="50"/><text x="81.6698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="81.5028%" y="165" width="0.0266%" height="15" fill="rgb(234,111,31)" fg:x="49103" fg:w="16"/><text x="81.7528%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (64 samples, 0.11%)</title><rect x="81.5294%" y="165" width="0.1062%" height="15" fill="rgb(241,149,10)" fg:x="49119" fg:w="64"/><text x="81.7794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="81.6422%" y="165" width="0.0365%" height="15" fill="rgb(249,206,44)" fg:x="49187" fg:w="22"/><text x="81.8922%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.04%)</title><rect x="81.6954%" y="165" width="0.0382%" height="15" fill="rgb(251,153,30)" fg:x="49219" fg:w="23"/><text x="81.9454%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (401 samples, 0.67%)</title><rect x="81.7534%" y="165" width="0.6656%" height="15" fill="rgb(239,152,38)" fg:x="49254" fg:w="401"/><text x="82.0034%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="82.4340%" y="165" width="0.0149%" height="15" fill="rgb(249,139,47)" fg:x="49664" fg:w="9"/><text x="82.6840%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="82.4871%" y="101" width="0.0266%" height="15" fill="rgb(244,64,35)" fg:x="49696" fg:w="16"/><text x="82.7371%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="82.4937%" y="85" width="0.0199%" height="15" fill="rgb(216,46,15)" fg:x="49700" fg:w="12"/><text x="82.7437%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.05%)</title><rect x="82.4722%" y="117" width="0.0465%" height="15" fill="rgb(250,74,19)" fg:x="49687" fg:w="28"/><text x="82.7222%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.07%)</title><rect x="82.4572%" y="165" width="0.0681%" height="15" fill="rgb(249,42,33)" fg:x="49678" fg:w="41"/><text x="82.7072%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (37 samples, 0.06%)</title><rect x="82.4639%" y="149" width="0.0614%" height="15" fill="rgb(242,149,17)" fg:x="49682" fg:w="37"/><text x="82.7139%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.06%)</title><rect x="82.4672%" y="133" width="0.0581%" height="15" fill="rgb(244,29,21)" fg:x="49684" fg:w="35"/><text x="82.7172%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (736 samples, 1.22%)</title><rect x="82.5303%" y="165" width="1.2216%" height="15" fill="rgb(220,130,37)" fg:x="49722" fg:w="736"/><text x="82.7803%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (110 samples, 0.18%)</title><rect x="83.7519%" y="165" width="0.1826%" height="15" fill="rgb(211,67,2)" fg:x="50458" fg:w="110"/><text x="84.0019%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="83.9345%" y="165" width="0.0315%" height="15" fill="rgb(235,68,52)" fg:x="50568" fg:w="19"/><text x="84.1845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="84.0324%" y="133" width="0.0166%" height="15" fill="rgb(246,142,3)" fg:x="50627" fg:w="10"/><text x="84.2824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.14%)</title><rect x="84.1154%" y="117" width="0.1378%" height="15" fill="rgb(241,25,7)" fg:x="50677" fg:w="83"/><text x="84.3654%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (50 samples, 0.08%)</title><rect x="84.1702%" y="101" width="0.0830%" height="15" fill="rgb(242,119,39)" fg:x="50710" fg:w="50"/><text x="84.4202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (126 samples, 0.21%)</title><rect x="84.0490%" y="133" width="0.2091%" height="15" fill="rgb(241,98,45)" fg:x="50637" fg:w="126"/><text x="84.2990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.01%)</title><rect x="84.2830%" y="101" width="0.0149%" height="15" fill="rgb(254,28,30)" fg:x="50778" fg:w="9"/><text x="84.5330%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.07%)</title><rect x="84.2598%" y="133" width="0.0747%" height="15" fill="rgb(241,142,54)" fg:x="50764" fg:w="45"/><text x="84.5098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.06%)</title><rect x="84.2731%" y="117" width="0.0614%" height="15" fill="rgb(222,85,15)" fg:x="50772" fg:w="37"/><text x="84.5231%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.04%)</title><rect x="84.2980%" y="101" width="0.0365%" height="15" fill="rgb(210,85,47)" fg:x="50787" fg:w="22"/><text x="84.5480%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (207 samples, 0.34%)</title><rect x="83.9926%" y="149" width="0.3436%" height="15" fill="rgb(224,206,25)" fg:x="50603" fg:w="207"/><text x="84.2426%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="84.3361%" y="149" width="0.0133%" height="15" fill="rgb(243,201,19)" fg:x="50810" fg:w="8"/><text x="84.5861%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (239 samples, 0.40%)</title><rect x="83.9660%" y="165" width="0.3967%" height="15" fill="rgb(236,59,4)" fg:x="50587" fg:w="239"/><text x="84.2160%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,431 samples, 5.69%)</title><rect x="78.6828%" y="181" width="5.6949%" height="15" fill="rgb(254,179,45)" fg:x="47404" fg:w="3431"/><text x="78.9328%" y="191.50">rust_qe..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (22 samples, 0.04%)</title><rect x="84.3776%" y="181" width="0.0365%" height="15" fill="rgb(226,14,10)" fg:x="50835" fg:w="22"/><text x="84.6276%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,733 samples, 84.21%)</title><rect x="0.2125%" y="213" width="84.2083%" height="15" fill="rgb(244,27,41)" fg:x="128" fg:w="50733"/><text x="0.4625%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,345 samples, 81.90%)</title><rect x="2.5163%" y="197" width="81.9045%" height="15" fill="rgb(235,35,32)" fg:x="1516" fg:w="49345"/><text x="2.7663%" y="207.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,257 samples, 2.09%)</title><rect x="84.4208%" y="213" width="2.0864%" height="15" fill="rgb(218,68,31)" fg:x="50861" fg:w="1257"/><text x="84.6708%" y="223.50">r..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (14 samples, 0.02%)</title><rect x="86.7429%" y="181" width="0.0232%" height="15" fill="rgb(207,120,37)" fg:x="52260" fg:w="14"/><text x="86.9929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="86.7429%" y="165" width="0.0232%" height="15" fill="rgb(227,98,0)" fg:x="52260" fg:w="14"/><text x="86.9929%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="86.7529%" y="149" width="0.0133%" height="15" fill="rgb(207,7,3)" fg:x="52266" fg:w="8"/><text x="87.0029%" y="159.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (16 samples, 0.03%)</title><rect x="86.7412%" y="197" width="0.0266%" height="15" fill="rgb(206,98,19)" fg:x="52259" fg:w="16"/><text x="86.9912%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (267 samples, 0.44%)</title><rect x="86.5072%" y="213" width="0.4432%" height="15" fill="rgb(217,5,26)" fg:x="52118" fg:w="267"/><text x="86.7572%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (110 samples, 0.18%)</title><rect x="86.7678%" y="197" width="0.1826%" height="15" fill="rgb(235,190,38)" fg:x="52275" fg:w="110"/><text x="87.0178%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,730 samples, 6.19%)</title><rect x="86.9504%" y="213" width="6.1912%" height="15" fill="rgb(247,86,24)" fg:x="52385" fg:w="3730"/><text x="87.2004%" y="223.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (145 samples, 0.24%)</title><rect x="93.1598%" y="197" width="0.2407%" height="15" fill="rgb(205,101,16)" fg:x="56126" fg:w="145"/><text x="93.4098%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (348 samples, 0.58%)</title><rect x="93.1416%" y="213" width="0.5776%" height="15" fill="rgb(246,168,33)" fg:x="56115" fg:w="348"/><text x="93.3916%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (192 samples, 0.32%)</title><rect x="93.4005%" y="197" width="0.3187%" height="15" fill="rgb(231,114,1)" fg:x="56271" fg:w="192"/><text x="93.6505%" y="207.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="93.7059%" y="181" width="0.0133%" height="15" fill="rgb(207,184,53)" fg:x="56455" fg:w="8"/><text x="93.9559%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (37 samples, 0.06%)</title><rect x="93.7192%" y="213" width="0.0614%" height="15" fill="rgb(224,95,51)" fg:x="56463" fg:w="37"/><text x="93.9692%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,744 samples, 6.21%)</title><rect x="93.7806%" y="213" width="6.2144%" height="15" fill="rgb(212,188,45)" fg:x="56500" fg:w="3744"/><text x="94.0306%" y="223.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,609 samples, 4.33%)</title><rect x="95.6645%" y="197" width="4.3305%" height="15" fill="rgb(223,154,38)" fg:x="57635" fg:w="2609"/><text x="95.9145%" y="207.50">rust_..</text></g><g><title>all (60,247 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="60247"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,177 samples, 99.88%)</title><rect x="0.1162%" y="293" width="99.8838%" height="15" fill="rgb(229,209,22)" fg:x="70" fg:w="60177"/><text x="0.3662%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,177 samples, 99.88%)</title><rect x="0.1162%" y="277" width="99.8838%" height="15" fill="rgb(234,138,34)" fg:x="70" fg:w="60177"/><text x="0.3662%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,177 samples, 99.88%)</title><rect x="0.1162%" y="261" width="99.8838%" height="15" fill="rgb(212,95,11)" fg:x="70" fg:w="60177"/><text x="0.3662%" y="271.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,177 samples, 99.88%)</title><rect x="0.1162%" y="245" width="99.8838%" height="15" fill="rgb(240,179,47)" fg:x="70" fg:w="60177"/><text x="0.3662%" y="255.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,175 samples, 99.88%)</title><rect x="0.1195%" y="229" width="99.8805%" height="15" fill="rgb(240,163,11)" fg:x="72" fg:w="60175"/><text x="0.3695%" y="239.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>