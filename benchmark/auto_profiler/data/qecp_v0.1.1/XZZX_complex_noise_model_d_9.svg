<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61500"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.02%)</title><rect x="0.0130%" y="133" width="0.0228%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="14"/><text x="0.2630%" y="143.50"></text></g><g><title>rust_qecp`alloc::fmt::format (10 samples, 0.02%)</title><rect x="0.0390%" y="133" width="0.0163%" height="15" fill="rgb(217,0,24)" fg:x="24" fg:w="10"/><text x="0.2890%" y="143.50"></text></g><g><title>rust_qecp`core::fmt::write (8 samples, 0.01%)</title><rect x="0.0423%" y="117" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="8"/><text x="0.2923%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0585%" y="53" width="0.0130%" height="15" fill="rgb(248,212,6)" fg:x="36" fg:w="8"/><text x="0.3085%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0585%" y="37" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="8"/><text x="0.3085%" y="47.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0715%" y="53" width="0.0114%" height="15" fill="rgb(232,128,0)" fg:x="44" fg:w="7"/><text x="0.3215%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.03%)</title><rect x="0.0585%" y="133" width="0.0260%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="16"/><text x="0.3085%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (16 samples, 0.03%)</title><rect x="0.0585%" y="117" width="0.0260%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="16"/><text x="0.3085%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0585%" y="101" width="0.0260%" height="15" fill="rgb(218,30,26)" fg:x="36" fg:w="16"/><text x="0.3085%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0585%" y="85" width="0.0260%" height="15" fill="rgb(220,122,19)" fg:x="36" fg:w="16"/><text x="0.3085%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (16 samples, 0.03%)</title><rect x="0.0585%" y="69" width="0.0260%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="16"/><text x="0.3085%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="0.0862%" y="69" width="0.0114%" height="15" fill="rgb(240,193,28)" fg:x="53" fg:w="7"/><text x="0.3362%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (11 samples, 0.02%)</title><rect x="0.0846%" y="133" width="0.0179%" height="15" fill="rgb(216,20,37)" fg:x="52" fg:w="11"/><text x="0.3346%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="0.0846%" y="117" width="0.0179%" height="15" fill="rgb(206,188,39)" fg:x="52" fg:w="11"/><text x="0.3346%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="0.0846%" y="101" width="0.0179%" height="15" fill="rgb(217,207,13)" fg:x="52" fg:w="11"/><text x="0.3346%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (10 samples, 0.02%)</title><rect x="0.0862%" y="85" width="0.0163%" height="15" fill="rgb(231,73,38)" fg:x="53" fg:w="10"/><text x="0.3362%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (49 samples, 0.08%)</title><rect x="0.1024%" y="133" width="0.0797%" height="15" fill="rgb(225,20,46)" fg:x="63" fg:w="49"/><text x="0.3524%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (39 samples, 0.06%)</title><rect x="0.1821%" y="133" width="0.0634%" height="15" fill="rgb(210,31,41)" fg:x="112" fg:w="39"/><text x="0.4321%" y="143.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (7 samples, 0.01%)</title><rect x="0.2569%" y="117" width="0.0114%" height="15" fill="rgb(221,200,47)" fg:x="158" fg:w="7"/><text x="0.5069%" y="127.50"></text></g><g><title>libsystem_c.dylib`isatty (7 samples, 0.01%)</title><rect x="0.2569%" y="101" width="0.0114%" height="15" fill="rgb(226,26,5)" fg:x="158" fg:w="7"/><text x="0.5069%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (7 samples, 0.01%)</title><rect x="0.2569%" y="85" width="0.0114%" height="15" fill="rgb(249,33,26)" fg:x="158" fg:w="7"/><text x="0.5069%" y="95.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (14 samples, 0.02%)</title><rect x="0.2472%" y="133" width="0.0228%" height="15" fill="rgb(235,183,28)" fg:x="152" fg:w="14"/><text x="0.4972%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.02%)</title><rect x="0.9089%" y="117" width="0.0228%" height="15" fill="rgb(221,5,38)" fg:x="559" fg:w="14"/><text x="1.1589%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.9317%" y="117" width="0.0114%" height="15" fill="rgb(247,18,42)" fg:x="573" fg:w="7"/><text x="1.1817%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (9 samples, 0.01%)</title><rect x="0.9431%" y="117" width="0.0146%" height="15" fill="rgb(241,131,45)" fg:x="580" fg:w="9"/><text x="1.1931%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (42 samples, 0.07%)</title><rect x="0.9577%" y="117" width="0.0683%" height="15" fill="rgb(249,31,29)" fg:x="589" fg:w="42"/><text x="1.2077%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="1.1203%" y="101" width="0.0195%" height="15" fill="rgb(225,111,53)" fg:x="689" fg:w="12"/><text x="1.3703%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (93 samples, 0.15%)</title><rect x="1.0325%" y="117" width="0.1512%" height="15" fill="rgb(238,160,17)" fg:x="635" fg:w="93"/><text x="1.2825%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.04%)</title><rect x="1.1398%" y="101" width="0.0439%" height="15" fill="rgb(214,148,48)" fg:x="701" fg:w="27"/><text x="1.3898%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="1.1593%" y="85" width="0.0244%" height="15" fill="rgb(232,36,49)" fg:x="713" fg:w="15"/><text x="1.4093%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="1.4569%" y="101" width="0.0260%" height="15" fill="rgb(209,103,24)" fg:x="896" fg:w="16"/><text x="1.7069%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (40 samples, 0.07%)</title><rect x="1.4862%" y="101" width="0.0650%" height="15" fill="rgb(229,88,8)" fg:x="914" fg:w="40"/><text x="1.7362%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (237 samples, 0.39%)</title><rect x="1.1902%" y="117" width="0.3854%" height="15" fill="rgb(213,181,19)" fg:x="732" fg:w="237"/><text x="1.4402%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="1.5512%" y="101" width="0.0244%" height="15" fill="rgb(254,191,54)" fg:x="954" fg:w="15"/><text x="1.8012%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (9 samples, 0.01%)</title><rect x="1.5610%" y="85" width="0.0146%" height="15" fill="rgb(241,83,37)" fg:x="960" fg:w="9"/><text x="1.8110%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (803 samples, 1.31%)</title><rect x="0.2715%" y="133" width="1.3057%" height="15" fill="rgb(233,36,39)" fg:x="167" fg:w="803"/><text x="0.5215%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.16%)</title><rect x="1.6000%" y="117" width="0.1561%" height="15" fill="rgb(226,3,54)" fg:x="984" fg:w="96"/><text x="1.8500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="2.0130%" y="101" width="0.0179%" height="15" fill="rgb(245,192,40)" fg:x="1238" fg:w="11"/><text x="2.2630%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.0374%" y="101" width="0.0130%" height="15" fill="rgb(238,167,29)" fg:x="1253" fg:w="8"/><text x="2.2874%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="2.0715%" y="37" width="0.0130%" height="15" fill="rgb(232,182,51)" fg:x="1274" fg:w="8"/><text x="2.3215%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="2.0634%" y="69" width="0.0260%" height="15" fill="rgb(231,60,39)" fg:x="1269" fg:w="16"/><text x="2.3134%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="2.0699%" y="53" width="0.0195%" height="15" fill="rgb(208,69,12)" fg:x="1273" fg:w="12"/><text x="2.3199%" y="63.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (26 samples, 0.04%)</title><rect x="2.0504%" y="101" width="0.0423%" height="15" fill="rgb(235,93,37)" fg:x="1261" fg:w="26"/><text x="2.3004%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="2.0585%" y="85" width="0.0341%" height="15" fill="rgb(213,116,39)" fg:x="1266" fg:w="21"/><text x="2.3085%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (7 samples, 0.01%)</title><rect x="2.0943%" y="101" width="0.0114%" height="15" fill="rgb(222,207,29)" fg:x="1288" fg:w="7"/><text x="2.3443%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="2.1057%" y="101" width="0.0114%" height="15" fill="rgb(206,96,30)" fg:x="1295" fg:w="7"/><text x="2.3557%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="2.1057%" y="85" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="1295" fg:w="7"/><text x="2.3557%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (16 samples, 0.03%)</title><rect x="2.1171%" y="101" width="0.0260%" height="15" fill="rgb(250,191,14)" fg:x="1302" fg:w="16"/><text x="2.3671%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (404 samples, 0.66%)</title><rect x="1.7707%" y="117" width="0.6569%" height="15" fill="rgb(239,60,40)" fg:x="1089" fg:w="404"/><text x="2.0207%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (175 samples, 0.28%)</title><rect x="2.1431%" y="101" width="0.2846%" height="15" fill="rgb(206,27,48)" fg:x="1318" fg:w="175"/><text x="2.3931%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (528 samples, 0.86%)</title><rect x="1.5772%" y="133" width="0.8585%" height="15" fill="rgb(225,35,8)" fg:x="970" fg:w="528"/><text x="1.8272%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (16 samples, 0.03%)</title><rect x="2.4407%" y="133" width="0.0260%" height="15" fill="rgb(250,213,24)" fg:x="1501" fg:w="16"/><text x="2.6907%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (14 samples, 0.02%)</title><rect x="2.4439%" y="117" width="0.0228%" height="15" fill="rgb(247,123,22)" fg:x="1503" fg:w="14"/><text x="2.6939%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (12 samples, 0.02%)</title><rect x="2.4472%" y="101" width="0.0195%" height="15" fill="rgb(231,138,38)" fg:x="1505" fg:w="12"/><text x="2.6972%" y="111.50"></text></g><g><title>dyld`start (1,529 samples, 2.49%)</title><rect x="0.0000%" y="357" width="2.4862%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="1529"/><text x="0.2500%" y="367.50">dy..</text></g><g><title>rust_qecp`main (1,525 samples, 2.48%)</title><rect x="0.0065%" y="341" width="2.4797%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="351.50">ru..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,525 samples, 2.48%)</title><rect x="0.0065%" y="325" width="2.4797%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="335.50">ru..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,525 samples, 2.48%)</title><rect x="0.0065%" y="309" width="2.4797%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="319.50">ru..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,525 samples, 2.48%)</title><rect x="0.0065%" y="293" width="2.4797%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="303.50">ru..</text></g><g><title>rust_qecp`rust_qecp::main (1,525 samples, 2.48%)</title><rect x="0.0065%" y="277" width="2.4797%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="287.50">ru..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (1,525 samples, 2.48%)</title><rect x="0.0065%" y="261" width="2.4797%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="271.50">ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,525 samples, 2.48%)</title><rect x="0.0065%" y="245" width="2.4797%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="255.50">ru..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,525 samples, 2.48%)</title><rect x="0.0065%" y="229" width="2.4797%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="239.50">ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,525 samples, 2.48%)</title><rect x="0.0065%" y="213" width="2.4797%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="223.50">ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,525 samples, 2.48%)</title><rect x="0.0065%" y="197" width="2.4797%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="207.50">ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,525 samples, 2.48%)</title><rect x="0.0065%" y="181" width="2.4797%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="191.50">ru..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,525 samples, 2.48%)</title><rect x="0.0065%" y="165" width="2.4797%" height="15" fill="rgb(247,138,52)" fg:x="4" fg:w="1525"/><text x="0.2565%" y="175.50">ru..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,524 samples, 2.48%)</title><rect x="0.0081%" y="149" width="2.4780%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1524"/><text x="0.2581%" y="159.50">ru..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="2.4959%" y="277" width="0.0179%" height="15" fill="rgb(246,177,23)" fg:x="1535" fg:w="11"/><text x="2.7459%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="2.5138%" y="277" width="0.0179%" height="15" fill="rgb(230,62,27)" fg:x="1546" fg:w="11"/><text x="2.7638%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (78 samples, 0.13%)</title><rect x="2.5317%" y="277" width="0.1268%" height="15" fill="rgb(216,154,8)" fg:x="1557" fg:w="78"/><text x="2.7817%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (77 samples, 0.13%)</title><rect x="2.5333%" y="261" width="0.1252%" height="15" fill="rgb(244,35,45)" fg:x="1558" fg:w="77"/><text x="2.7833%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="2.6618%" y="277" width="0.0211%" height="15" fill="rgb(251,115,12)" fg:x="1637" fg:w="13"/><text x="2.9118%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.04%)</title><rect x="2.6927%" y="277" width="0.0439%" height="15" fill="rgb(240,54,50)" fg:x="1656" fg:w="27"/><text x="2.9427%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.09%)</title><rect x="2.7398%" y="277" width="0.0927%" height="15" fill="rgb(233,84,52)" fg:x="1685" fg:w="57"/><text x="2.9898%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="2.9252%" y="245" width="0.0276%" height="15" fill="rgb(207,117,47)" fg:x="1799" fg:w="17"/><text x="3.1752%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.09%)</title><rect x="2.8634%" y="261" width="0.0927%" height="15" fill="rgb(249,43,39)" fg:x="1761" fg:w="57"/><text x="3.1134%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="2.9561%" y="261" width="0.0163%" height="15" fill="rgb(209,38,44)" fg:x="1818" fg:w="10"/><text x="3.2061%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="2.9593%" y="245" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="1820" fg:w="8"/><text x="3.2093%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (75 samples, 0.12%)</title><rect x="2.9772%" y="261" width="0.1220%" height="15" fill="rgb(242,79,21)" fg:x="1831" fg:w="75"/><text x="3.2272%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (51 samples, 0.08%)</title><rect x="3.0163%" y="245" width="0.0829%" height="15" fill="rgb(211,96,35)" fg:x="1855" fg:w="51"/><text x="3.2663%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (51 samples, 0.08%)</title><rect x="3.0163%" y="229" width="0.0829%" height="15" fill="rgb(253,215,40)" fg:x="1855" fg:w="51"/><text x="3.2663%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167 samples, 0.27%)</title><rect x="2.8325%" y="277" width="0.2715%" height="15" fill="rgb(211,81,21)" fg:x="1742" fg:w="167"/><text x="3.0825%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="3.1041%" y="277" width="0.0114%" height="15" fill="rgb(208,190,38)" fg:x="1909" fg:w="7"/><text x="3.3541%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="3.1415%" y="277" width="0.0309%" height="15" fill="rgb(235,213,38)" fg:x="1932" fg:w="19"/><text x="3.3915%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="3.2195%" y="261" width="0.0504%" height="15" fill="rgb(237,122,38)" fg:x="1980" fg:w="31"/><text x="3.4695%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="3.2407%" y="245" width="0.0293%" height="15" fill="rgb(244,218,35)" fg:x="1993" fg:w="18"/><text x="3.4907%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="3.2455%" y="229" width="0.0244%" height="15" fill="rgb(240,68,47)" fg:x="1996" fg:w="15"/><text x="3.4955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="3.2553%" y="213" width="0.0146%" height="15" fill="rgb(210,16,53)" fg:x="2002" fg:w="9"/><text x="3.5053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="3.2699%" y="261" width="0.0276%" height="15" fill="rgb(235,124,12)" fg:x="2011" fg:w="17"/><text x="3.5199%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.09%)</title><rect x="3.2992%" y="261" width="0.0894%" height="15" fill="rgb(224,169,11)" fg:x="2029" fg:w="55"/><text x="3.5492%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="3.3691%" y="245" width="0.0195%" height="15" fill="rgb(250,166,2)" fg:x="2072" fg:w="12"/><text x="3.6191%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="3.3919%" y="261" width="0.0260%" height="15" fill="rgb(242,216,29)" fg:x="2086" fg:w="16"/><text x="3.6419%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 0.06%)</title><rect x="3.4179%" y="261" width="0.0553%" height="15" fill="rgb(230,116,27)" fg:x="2102" fg:w="34"/><text x="3.6679%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (116 samples, 0.19%)</title><rect x="3.4878%" y="261" width="0.1886%" height="15" fill="rgb(228,99,48)" fg:x="2145" fg:w="116"/><text x="3.7378%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.08%)</title><rect x="3.6764%" y="261" width="0.0829%" height="15" fill="rgb(253,11,6)" fg:x="2261" fg:w="51"/><text x="3.9264%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (301 samples, 0.49%)</title><rect x="3.7593%" y="261" width="0.4894%" height="15" fill="rgb(247,143,39)" fg:x="2312" fg:w="301"/><text x="4.0093%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (33 samples, 0.05%)</title><rect x="4.2488%" y="261" width="0.0537%" height="15" fill="rgb(236,97,10)" fg:x="2613" fg:w="33"/><text x="4.4988%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (16 samples, 0.03%)</title><rect x="4.3024%" y="261" width="0.0260%" height="15" fill="rgb(233,208,19)" fg:x="2646" fg:w="16"/><text x="4.5524%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (8 samples, 0.01%)</title><rect x="4.3317%" y="261" width="0.0130%" height="15" fill="rgb(216,164,2)" fg:x="2664" fg:w="8"/><text x="4.5817%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.01%)</title><rect x="4.3593%" y="197" width="0.0130%" height="15" fill="rgb(220,129,5)" fg:x="2681" fg:w="8"/><text x="4.6093%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.02%)</title><rect x="4.3496%" y="261" width="0.0244%" height="15" fill="rgb(242,17,10)" fg:x="2675" fg:w="15"/><text x="4.5996%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="4.3496%" y="245" width="0.0244%" height="15" fill="rgb(242,107,0)" fg:x="2675" fg:w="15"/><text x="4.5996%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.02%)</title><rect x="4.3496%" y="229" width="0.0244%" height="15" fill="rgb(251,28,31)" fg:x="2675" fg:w="15"/><text x="4.5996%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="4.3512%" y="213" width="0.0228%" height="15" fill="rgb(233,223,10)" fg:x="2676" fg:w="14"/><text x="4.6012%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (46 samples, 0.07%)</title><rect x="4.3821%" y="261" width="0.0748%" height="15" fill="rgb(215,21,27)" fg:x="2695" fg:w="46"/><text x="4.6321%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (363 samples, 0.59%)</title><rect x="4.4569%" y="261" width="0.5902%" height="15" fill="rgb(232,23,21)" fg:x="2741" fg:w="363"/><text x="4.7069%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (28 samples, 0.05%)</title><rect x="5.0472%" y="261" width="0.0455%" height="15" fill="rgb(244,5,23)" fg:x="3104" fg:w="28"/><text x="5.2972%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 0.04%)</title><rect x="5.0927%" y="261" width="0.0407%" height="15" fill="rgb(226,81,46)" fg:x="3132" fg:w="25"/><text x="5.3427%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="6.8114%" y="213" width="0.0325%" height="15" fill="rgb(247,70,30)" fg:x="4189" fg:w="20"/><text x="7.0614%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="6.8244%" y="197" width="0.0195%" height="15" fill="rgb(212,68,19)" fg:x="4197" fg:w="12"/><text x="7.0744%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="6.7984%" y="245" width="0.0472%" height="15" fill="rgb(240,187,13)" fg:x="4181" fg:w="29"/><text x="7.0484%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="6.8049%" y="229" width="0.0407%" height="15" fill="rgb(223,113,26)" fg:x="4185" fg:w="25"/><text x="7.0549%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="6.9317%" y="165" width="0.0276%" height="15" fill="rgb(206,192,2)" fg:x="4263" fg:w="17"/><text x="7.1817%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (23 samples, 0.04%)</title><rect x="6.9268%" y="197" width="0.0374%" height="15" fill="rgb(241,108,4)" fg:x="4260" fg:w="23"/><text x="7.1768%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.04%)</title><rect x="6.9285%" y="181" width="0.0358%" height="15" fill="rgb(247,173,49)" fg:x="4261" fg:w="22"/><text x="7.1785%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (71 samples, 0.12%)</title><rect x="6.8585%" y="245" width="0.1154%" height="15" fill="rgb(224,114,35)" fg:x="4218" fg:w="71"/><text x="7.1085%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.08%)</title><rect x="6.8894%" y="229" width="0.0846%" height="15" fill="rgb(245,159,27)" fg:x="4237" fg:w="52"/><text x="7.1394%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="6.9252%" y="213" width="0.0488%" height="15" fill="rgb(245,172,44)" fg:x="4259" fg:w="30"/><text x="7.1752%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,130 samples, 1.84%)</title><rect x="5.1480%" y="261" width="1.8374%" height="15" fill="rgb(236,23,11)" fg:x="3166" fg:w="1130"/><text x="5.3980%" y="271.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="6.9740%" y="245" width="0.0114%" height="15" fill="rgb(205,117,38)" fg:x="4289" fg:w="7"/><text x="7.2240%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (80 samples, 0.13%)</title><rect x="15.2748%" y="245" width="0.1301%" height="15" fill="rgb(237,72,25)" fg:x="9394" fg:w="80"/><text x="15.5248%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (46 samples, 0.07%)</title><rect x="15.4049%" y="245" width="0.0748%" height="15" fill="rgb(244,70,9)" fg:x="9474" fg:w="46"/><text x="15.6549%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (51 samples, 0.08%)</title><rect x="15.4846%" y="245" width="0.0829%" height="15" fill="rgb(217,125,39)" fg:x="9523" fg:w="51"/><text x="15.7346%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.06%)</title><rect x="15.8049%" y="229" width="0.0569%" height="15" fill="rgb(235,36,10)" fg:x="9720" fg:w="35"/><text x="16.0549%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (226 samples, 0.37%)</title><rect x="15.5675%" y="245" width="0.3675%" height="15" fill="rgb(251,123,47)" fg:x="9574" fg:w="226"/><text x="15.8175%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 0.07%)</title><rect x="15.8650%" y="229" width="0.0699%" height="15" fill="rgb(221,13,13)" fg:x="9757" fg:w="43"/><text x="16.1150%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 0.06%)</title><rect x="15.8715%" y="213" width="0.0634%" height="15" fill="rgb(238,131,9)" fg:x="9761" fg:w="39"/><text x="16.1215%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (137 samples, 0.22%)</title><rect x="15.9350%" y="245" width="0.2228%" height="15" fill="rgb(211,50,8)" fg:x="9800" fg:w="137"/><text x="16.1850%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (133 samples, 0.22%)</title><rect x="15.9415%" y="229" width="0.2163%" height="15" fill="rgb(245,182,24)" fg:x="9804" fg:w="133"/><text x="16.1915%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="16.4000%" y="213" width="0.0341%" height="15" fill="rgb(242,14,37)" fg:x="10086" fg:w="21"/><text x="16.6500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (184 samples, 0.30%)</title><rect x="16.1659%" y="245" width="0.2992%" height="15" fill="rgb(246,228,12)" fg:x="9942" fg:w="184"/><text x="16.4159%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (138 samples, 0.22%)</title><rect x="16.2407%" y="229" width="0.2244%" height="15" fill="rgb(213,55,15)" fg:x="9988" fg:w="138"/><text x="16.4907%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (19 samples, 0.03%)</title><rect x="16.4341%" y="213" width="0.0309%" height="15" fill="rgb(209,9,3)" fg:x="10107" fg:w="19"/><text x="16.6841%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (59 samples, 0.10%)</title><rect x="16.4650%" y="245" width="0.0959%" height="15" fill="rgb(230,59,30)" fg:x="10126" fg:w="59"/><text x="16.7150%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (41 samples, 0.07%)</title><rect x="16.5610%" y="245" width="0.0667%" height="15" fill="rgb(209,121,21)" fg:x="10185" fg:w="41"/><text x="16.8110%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="16.6276%" y="245" width="0.0211%" height="15" fill="rgb(220,109,13)" fg:x="10226" fg:w="13"/><text x="16.8776%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (32 samples, 0.05%)</title><rect x="16.6488%" y="245" width="0.0520%" height="15" fill="rgb(232,18,1)" fg:x="10239" fg:w="32"/><text x="16.8988%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="16.7008%" y="245" width="0.0179%" height="15" fill="rgb(215,41,42)" fg:x="10271" fg:w="11"/><text x="16.9508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="16.7187%" y="245" width="0.0211%" height="15" fill="rgb(224,123,36)" fg:x="10282" fg:w="13"/><text x="16.9687%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="16.7398%" y="245" width="0.0195%" height="15" fill="rgb(240,125,3)" fg:x="10295" fg:w="12"/><text x="16.9898%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (139 samples, 0.23%)</title><rect x="16.8065%" y="229" width="0.2260%" height="15" fill="rgb(205,98,50)" fg:x="10336" fg:w="139"/><text x="17.0565%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="17.0016%" y="213" width="0.0309%" height="15" fill="rgb(205,185,37)" fg:x="10456" fg:w="19"/><text x="17.2516%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (181 samples, 0.29%)</title><rect x="16.7593%" y="245" width="0.2943%" height="15" fill="rgb(238,207,15)" fg:x="10307" fg:w="181"/><text x="17.0093%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="17.0325%" y="229" width="0.0211%" height="15" fill="rgb(213,199,42)" fg:x="10475" fg:w="13"/><text x="17.2825%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (516 samples, 0.84%)</title><rect x="17.0537%" y="245" width="0.8390%" height="15" fill="rgb(235,201,11)" fg:x="10488" fg:w="516"/><text x="17.3037%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.07%)</title><rect x="17.8927%" y="245" width="0.0748%" height="15" fill="rgb(207,46,11)" fg:x="11004" fg:w="46"/><text x="18.1427%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (51 samples, 0.08%)</title><rect x="17.9675%" y="245" width="0.0829%" height="15" fill="rgb(241,35,35)" fg:x="11050" fg:w="51"/><text x="18.2175%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,686 samples, 2.74%)</title><rect x="18.0504%" y="245" width="2.7415%" height="15" fill="rgb(243,32,47)" fg:x="11101" fg:w="1686"/><text x="18.3004%" y="255.50">ru..</text></g><g><title>rust_qecp`DYLD-STUB$$free (44 samples, 0.07%)</title><rect x="20.7919%" y="245" width="0.0715%" height="15" fill="rgb(247,202,23)" fg:x="12787" fg:w="44"/><text x="21.0419%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="20.8634%" y="245" width="0.0146%" height="15" fill="rgb(219,102,11)" fg:x="12831" fg:w="9"/><text x="21.1134%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="20.8862%" y="245" width="0.0211%" height="15" fill="rgb(243,110,44)" fg:x="12845" fg:w="13"/><text x="21.1362%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="21.0780%" y="213" width="0.0163%" height="15" fill="rgb(222,74,54)" fg:x="12963" fg:w="10"/><text x="21.3280%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.02%)</title><rect x="21.1154%" y="181" width="0.0244%" height="15" fill="rgb(216,99,12)" fg:x="12986" fg:w="15"/><text x="21.3654%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="21.1496%" y="165" width="0.0130%" height="15" fill="rgb(226,22,26)" fg:x="13007" fg:w="8"/><text x="21.3996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="21.2016%" y="117" width="0.0146%" height="15" fill="rgb(217,163,10)" fg:x="13039" fg:w="9"/><text x="21.4516%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.03%)</title><rect x="21.1935%" y="149" width="0.0260%" height="15" fill="rgb(213,25,53)" fg:x="13034" fg:w="16"/><text x="21.4435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.02%)</title><rect x="21.1967%" y="133" width="0.0228%" height="15" fill="rgb(252,105,26)" fg:x="13036" fg:w="14"/><text x="21.4467%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="21.1919%" y="165" width="0.0309%" height="15" fill="rgb(220,39,43)" fg:x="13033" fg:w="19"/><text x="21.4419%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (53 samples, 0.09%)</title><rect x="21.1431%" y="181" width="0.0862%" height="15" fill="rgb(229,68,48)" fg:x="13003" fg:w="53"/><text x="21.3931%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (129 samples, 0.21%)</title><rect x="21.1041%" y="197" width="0.2098%" height="15" fill="rgb(252,8,32)" fg:x="12979" fg:w="129"/><text x="21.3541%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.08%)</title><rect x="21.2325%" y="181" width="0.0813%" height="15" fill="rgb(223,20,43)" fg:x="13058" fg:w="50"/><text x="21.4825%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (254 samples, 0.41%)</title><rect x="20.9187%" y="245" width="0.4130%" height="15" fill="rgb(229,81,49)" fg:x="12865" fg:w="254"/><text x="21.1687%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (157 samples, 0.26%)</title><rect x="21.0764%" y="229" width="0.2553%" height="15" fill="rgb(236,28,36)" fg:x="12962" fg:w="157"/><text x="21.3264%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (143 samples, 0.23%)</title><rect x="21.0992%" y="213" width="0.2325%" height="15" fill="rgb(249,185,26)" fg:x="12976" fg:w="143"/><text x="21.3492%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="21.4260%" y="229" width="0.0146%" height="15" fill="rgb(249,174,33)" fg:x="13177" fg:w="9"/><text x="21.6760%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (76 samples, 0.12%)</title><rect x="21.7073%" y="213" width="0.1236%" height="15" fill="rgb(233,201,37)" fg:x="13350" fg:w="76"/><text x="21.9573%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="21.8309%" y="213" width="0.0228%" height="15" fill="rgb(221,78,26)" fg:x="13426" fg:w="14"/><text x="22.0809%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (36 samples, 0.06%)</title><rect x="21.8537%" y="213" width="0.0585%" height="15" fill="rgb(250,127,30)" fg:x="13440" fg:w="36"/><text x="22.1037%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (370 samples, 0.60%)</title><rect x="21.4407%" y="229" width="0.6016%" height="15" fill="rgb(230,49,44)" fg:x="13186" fg:w="370"/><text x="21.6907%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.13%)</title><rect x="21.9122%" y="213" width="0.1301%" height="15" fill="rgb(229,67,23)" fg:x="13476" fg:w="80"/><text x="22.1622%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (64 samples, 0.10%)</title><rect x="21.9382%" y="197" width="0.1041%" height="15" fill="rgb(249,83,47)" fg:x="13492" fg:w="64"/><text x="22.1882%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (163 samples, 0.27%)</title><rect x="22.0455%" y="213" width="0.2650%" height="15" fill="rgb(215,43,3)" fg:x="13558" fg:w="163"/><text x="22.2955%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (166 samples, 0.27%)</title><rect x="22.0423%" y="229" width="0.2699%" height="15" fill="rgb(238,154,13)" fg:x="13556" fg:w="166"/><text x="22.2923%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (75 samples, 0.12%)</title><rect x="22.4878%" y="213" width="0.1220%" height="15" fill="rgb(219,56,2)" fg:x="13830" fg:w="75"/><text x="22.7378%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (20 samples, 0.03%)</title><rect x="22.6098%" y="213" width="0.0325%" height="15" fill="rgb(233,0,4)" fg:x="13905" fg:w="20"/><text x="22.8598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (22 samples, 0.04%)</title><rect x="22.6423%" y="213" width="0.0358%" height="15" fill="rgb(235,30,7)" fg:x="13925" fg:w="22"/><text x="22.8923%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (378 samples, 0.61%)</title><rect x="22.3122%" y="229" width="0.6146%" height="15" fill="rgb(250,79,13)" fg:x="13722" fg:w="378"/><text x="22.5622%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (153 samples, 0.25%)</title><rect x="22.6780%" y="213" width="0.2488%" height="15" fill="rgb(211,146,34)" fg:x="13947" fg:w="153"/><text x="22.9280%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (66 samples, 0.11%)</title><rect x="23.1187%" y="197" width="0.1073%" height="15" fill="rgb(228,22,38)" fg:x="14218" fg:w="66"/><text x="23.3687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (266 samples, 0.43%)</title><rect x="22.9268%" y="229" width="0.4325%" height="15" fill="rgb(235,168,5)" fg:x="14100" fg:w="266"/><text x="23.1768%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (237 samples, 0.39%)</title><rect x="22.9740%" y="213" width="0.3854%" height="15" fill="rgb(221,155,16)" fg:x="14129" fg:w="237"/><text x="23.2240%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (82 samples, 0.13%)</title><rect x="23.2260%" y="197" width="0.1333%" height="15" fill="rgb(215,215,53)" fg:x="14284" fg:w="82"/><text x="23.4760%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (23 samples, 0.04%)</title><rect x="23.3593%" y="229" width="0.0374%" height="15" fill="rgb(223,4,10)" fg:x="14366" fg:w="23"/><text x="23.6093%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (179 samples, 0.29%)</title><rect x="23.3967%" y="229" width="0.2911%" height="15" fill="rgb(234,103,6)" fg:x="14389" fg:w="179"/><text x="23.6467%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (133 samples, 0.22%)</title><rect x="23.4715%" y="213" width="0.2163%" height="15" fill="rgb(227,97,0)" fg:x="14435" fg:w="133"/><text x="23.7215%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (133 samples, 0.22%)</title><rect x="23.4715%" y="197" width="0.2163%" height="15" fill="rgb(234,150,53)" fg:x="14435" fg:w="133"/><text x="23.7215%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (35 samples, 0.06%)</title><rect x="23.6878%" y="229" width="0.0569%" height="15" fill="rgb(228,201,54)" fg:x="14568" fg:w="35"/><text x="23.9378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="23.7545%" y="229" width="0.0114%" height="15" fill="rgb(222,22,37)" fg:x="14609" fg:w="7"/><text x="24.0045%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (33 samples, 0.05%)</title><rect x="23.7659%" y="229" width="0.0537%" height="15" fill="rgb(237,53,32)" fg:x="14616" fg:w="33"/><text x="24.0159%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="23.8195%" y="229" width="0.0228%" height="15" fill="rgb(233,25,53)" fg:x="14649" fg:w="14"/><text x="24.0695%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="23.8423%" y="229" width="0.0244%" height="15" fill="rgb(210,40,34)" fg:x="14663" fg:w="15"/><text x="24.0923%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (32 samples, 0.05%)</title><rect x="23.9561%" y="197" width="0.0520%" height="15" fill="rgb(241,220,44)" fg:x="14733" fg:w="32"/><text x="24.2061%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (75 samples, 0.12%)</title><rect x="23.8894%" y="213" width="0.1220%" height="15" fill="rgb(235,28,35)" fg:x="14692" fg:w="75"/><text x="24.1394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (53 samples, 0.09%)</title><rect x="24.0130%" y="213" width="0.0862%" height="15" fill="rgb(210,56,17)" fg:x="14768" fg:w="53"/><text x="24.2630%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (14 samples, 0.02%)</title><rect x="24.0764%" y="197" width="0.0228%" height="15" fill="rgb(224,130,29)" fg:x="14807" fg:w="14"/><text x="24.3264%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.02%)</title><rect x="24.0764%" y="181" width="0.0228%" height="15" fill="rgb(235,212,8)" fg:x="14807" fg:w="14"/><text x="24.3264%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,701 samples, 2.77%)</title><rect x="21.3398%" y="245" width="2.7659%" height="15" fill="rgb(223,33,50)" fg:x="13124" fg:w="1701"/><text x="21.5898%" y="255.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (142 samples, 0.23%)</title><rect x="23.8748%" y="229" width="0.2309%" height="15" fill="rgb(219,149,13)" fg:x="14683" fg:w="142"/><text x="24.1248%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (221 samples, 0.36%)</title><rect x="24.1057%" y="245" width="0.3593%" height="15" fill="rgb(250,156,29)" fg:x="14825" fg:w="221"/><text x="24.3557%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (189 samples, 0.31%)</title><rect x="24.1577%" y="229" width="0.3073%" height="15" fill="rgb(216,193,19)" fg:x="14857" fg:w="189"/><text x="24.4077%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (123 samples, 0.20%)</title><rect x="24.2650%" y="213" width="0.2000%" height="15" fill="rgb(216,135,14)" fg:x="14923" fg:w="123"/><text x="24.5150%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (46 samples, 0.07%)</title><rect x="24.3902%" y="197" width="0.0748%" height="15" fill="rgb(241,47,5)" fg:x="15000" fg:w="46"/><text x="24.6402%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (57 samples, 0.09%)</title><rect x="24.4650%" y="245" width="0.0927%" height="15" fill="rgb(233,42,35)" fg:x="15046" fg:w="57"/><text x="24.7150%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="25.6455%" y="229" width="0.0325%" height="15" fill="rgb(231,13,6)" fg:x="15772" fg:w="20"/><text x="25.8955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="25.6780%" y="229" width="0.0163%" height="15" fill="rgb(207,181,40)" fg:x="15792" fg:w="10"/><text x="25.9280%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="25.6943%" y="229" width="0.0146%" height="15" fill="rgb(254,173,49)" fg:x="15802" fg:w="9"/><text x="25.9443%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.02%)</title><rect x="25.7089%" y="229" width="0.0163%" height="15" fill="rgb(221,1,38)" fg:x="15811" fg:w="10"/><text x="25.9589%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="26.4439%" y="213" width="0.0114%" height="15" fill="rgb(206,124,46)" fg:x="16263" fg:w="7"/><text x="26.6939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (53 samples, 0.09%)</title><rect x="26.5593%" y="197" width="0.0862%" height="15" fill="rgb(249,21,11)" fg:x="16334" fg:w="53"/><text x="26.8093%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (118 samples, 0.19%)</title><rect x="26.4553%" y="213" width="0.1919%" height="15" fill="rgb(222,201,40)" fg:x="16270" fg:w="118"/><text x="26.7053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="26.6553%" y="213" width="0.0358%" height="15" fill="rgb(235,61,29)" fg:x="16393" fg:w="22"/><text x="26.9053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="26.6911%" y="213" width="0.0130%" height="15" fill="rgb(219,207,3)" fg:x="16415" fg:w="8"/><text x="26.9411%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (54 samples, 0.09%)</title><rect x="26.7041%" y="213" width="0.0878%" height="15" fill="rgb(222,56,46)" fg:x="16423" fg:w="54"/><text x="26.9541%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (20 samples, 0.03%)</title><rect x="26.7919%" y="213" width="0.0325%" height="15" fill="rgb(239,76,54)" fg:x="16477" fg:w="20"/><text x="27.0419%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="26.8244%" y="213" width="0.0130%" height="15" fill="rgb(231,124,27)" fg:x="16497" fg:w="8"/><text x="27.0744%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="26.8374%" y="213" width="0.0146%" height="15" fill="rgb(249,195,6)" fg:x="16505" fg:w="9"/><text x="27.0874%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (68 samples, 0.11%)</title><rect x="27.4911%" y="165" width="0.1106%" height="15" fill="rgb(237,174,47)" fg:x="16907" fg:w="68"/><text x="27.7411%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="27.5610%" y="149" width="0.0407%" height="15" fill="rgb(206,201,31)" fg:x="16950" fg:w="25"/><text x="27.8110%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (113 samples, 0.18%)</title><rect x="27.4293%" y="181" width="0.1837%" height="15" fill="rgb(231,57,52)" fg:x="16869" fg:w="113"/><text x="27.6793%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="27.6016%" y="165" width="0.0114%" height="15" fill="rgb(248,177,22)" fg:x="16975" fg:w="7"/><text x="27.8516%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (45 samples, 0.07%)</title><rect x="27.7301%" y="149" width="0.0732%" height="15" fill="rgb(215,211,37)" fg:x="17054" fg:w="45"/><text x="27.9801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (259 samples, 0.42%)</title><rect x="27.6130%" y="181" width="0.4211%" height="15" fill="rgb(241,128,51)" fg:x="16982" fg:w="259"/><text x="27.8630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (244 samples, 0.40%)</title><rect x="27.6374%" y="165" width="0.3967%" height="15" fill="rgb(227,165,31)" fg:x="16997" fg:w="244"/><text x="27.8874%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (142 samples, 0.23%)</title><rect x="27.8033%" y="149" width="0.2309%" height="15" fill="rgb(228,167,24)" fg:x="17099" fg:w="142"/><text x="28.0533%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (64 samples, 0.10%)</title><rect x="27.9301%" y="133" width="0.1041%" height="15" fill="rgb(228,143,12)" fg:x="17177" fg:w="64"/><text x="28.1801%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (458 samples, 0.74%)</title><rect x="27.2976%" y="197" width="0.7447%" height="15" fill="rgb(249,149,8)" fg:x="16788" fg:w="458"/><text x="27.5476%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="28.0423%" y="197" width="0.0358%" height="15" fill="rgb(243,35,44)" fg:x="17246" fg:w="22"/><text x="28.2923%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (115 samples, 0.19%)</title><rect x="28.0846%" y="197" width="0.1870%" height="15" fill="rgb(246,89,9)" fg:x="17272" fg:w="115"/><text x="28.3346%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,774 samples, 2.88%)</title><rect x="25.7268%" y="229" width="2.8846%" height="15" fill="rgb(233,213,13)" fg:x="15822" fg:w="1774"/><text x="25.9768%" y="239.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,077 samples, 1.75%)</title><rect x="26.8602%" y="213" width="1.7512%" height="15" fill="rgb(233,141,41)" fg:x="16519" fg:w="1077"/><text x="27.1102%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (209 samples, 0.34%)</title><rect x="28.2715%" y="197" width="0.3398%" height="15" fill="rgb(239,167,4)" fg:x="17387" fg:w="209"/><text x="28.5215%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,503 samples, 4.07%)</title><rect x="24.5577%" y="245" width="4.0699%" height="15" fill="rgb(209,217,16)" fg:x="15103" fg:w="2503"/><text x="24.8077%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.02%)</title><rect x="28.6114%" y="229" width="0.0163%" height="15" fill="rgb(219,88,35)" fg:x="17596" fg:w="10"/><text x="28.8614%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,938 samples, 3.15%)</title><rect x="28.6276%" y="245" width="3.1512%" height="15" fill="rgb(220,193,23)" fg:x="17606" fg:w="1938"/><text x="28.8776%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (103 samples, 0.17%)</title><rect x="31.7789%" y="245" width="0.1675%" height="15" fill="rgb(230,90,52)" fg:x="19544" fg:w="103"/><text x="32.0289%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="32.2813%" y="229" width="0.0114%" height="15" fill="rgb(252,106,19)" fg:x="19853" fg:w="7"/><text x="32.5313%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="32.3057%" y="229" width="0.0130%" height="15" fill="rgb(206,74,20)" fg:x="19868" fg:w="8"/><text x="32.5557%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (70 samples, 0.11%)</title><rect x="32.3187%" y="229" width="0.1138%" height="15" fill="rgb(230,138,44)" fg:x="19876" fg:w="70"/><text x="32.5687%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="32.6358%" y="213" width="0.0244%" height="15" fill="rgb(235,182,43)" fg:x="20071" fg:w="15"/><text x="32.8858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="32.6472%" y="197" width="0.0130%" height="15" fill="rgb(242,16,51)" fg:x="20078" fg:w="8"/><text x="32.8972%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (23 samples, 0.04%)</title><rect x="32.6634%" y="213" width="0.0374%" height="15" fill="rgb(248,9,4)" fg:x="20088" fg:w="23"/><text x="32.9134%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (179 samples, 0.29%)</title><rect x="32.7008%" y="213" width="0.2911%" height="15" fill="rgb(210,31,22)" fg:x="20111" fg:w="179"/><text x="32.9508%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (874 samples, 1.42%)</title><rect x="31.9463%" y="245" width="1.4211%" height="15" fill="rgb(239,54,39)" fg:x="19647" fg:w="874"/><text x="32.1963%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (575 samples, 0.93%)</title><rect x="32.4325%" y="229" width="0.9350%" height="15" fill="rgb(230,99,41)" fg:x="19946" fg:w="575"/><text x="32.6825%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (231 samples, 0.38%)</title><rect x="32.9919%" y="213" width="0.3756%" height="15" fill="rgb(253,106,12)" fg:x="20290" fg:w="231"/><text x="33.2419%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (96 samples, 0.16%)</title><rect x="33.3675%" y="245" width="0.1561%" height="15" fill="rgb(213,46,41)" fg:x="20521" fg:w="96"/><text x="33.6175%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.02%)</title><rect x="33.5268%" y="245" width="0.0244%" height="15" fill="rgb(215,133,35)" fg:x="20619" fg:w="15"/><text x="33.7768%" y="255.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (319 samples, 0.52%)</title><rect x="33.5512%" y="245" width="0.5187%" height="15" fill="rgb(213,28,5)" fg:x="20634" fg:w="319"/><text x="33.8012%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (458 samples, 0.74%)</title><rect x="36.0780%" y="213" width="0.7447%" height="15" fill="rgb(215,77,49)" fg:x="22188" fg:w="458"/><text x="36.3280%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,955 samples, 3.18%)</title><rect x="34.4585%" y="229" width="3.1789%" height="15" fill="rgb(248,100,22)" fg:x="21192" fg:w="1955"/><text x="34.7085%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (501 samples, 0.81%)</title><rect x="36.8228%" y="213" width="0.8146%" height="15" fill="rgb(208,67,9)" fg:x="22646" fg:w="501"/><text x="37.0728%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,313 samples, 3.76%)</title><rect x="34.0699%" y="245" width="3.7610%" height="15" fill="rgb(219,133,21)" fg:x="20953" fg:w="2313"/><text x="34.3199%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (119 samples, 0.19%)</title><rect x="37.6374%" y="229" width="0.1935%" height="15" fill="rgb(246,46,29)" fg:x="23147" fg:w="119"/><text x="37.8874%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,858 samples, 4.65%)</title><rect x="40.9935%" y="229" width="4.6472%" height="15" fill="rgb(246,185,52)" fg:x="25211" fg:w="2858"/><text x="41.2435%" y="239.50">rust_..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="45.6455%" y="181" width="0.0211%" height="15" fill="rgb(252,136,11)" fg:x="28072" fg:w="13"/><text x="45.8955%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="45.6520%" y="165" width="0.0146%" height="15" fill="rgb(219,138,53)" fg:x="28076" fg:w="9"/><text x="45.9020%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.03%)</title><rect x="45.6407%" y="229" width="0.0276%" height="15" fill="rgb(211,51,23)" fg:x="28069" fg:w="17"/><text x="45.8907%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="45.6439%" y="213" width="0.0244%" height="15" fill="rgb(247,221,28)" fg:x="28071" fg:w="15"/><text x="45.8939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.02%)</title><rect x="45.6455%" y="197" width="0.0228%" height="15" fill="rgb(251,222,45)" fg:x="28072" fg:w="14"/><text x="45.8955%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,039 samples, 3.32%)</title><rect x="45.6683%" y="229" width="3.3154%" height="15" fill="rgb(217,162,53)" fg:x="28086" fg:w="2039"/><text x="45.9183%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (392 samples, 0.64%)</title><rect x="48.9837%" y="229" width="0.6374%" height="15" fill="rgb(229,93,14)" fg:x="30125" fg:w="392"/><text x="49.2337%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (53 samples, 0.09%)</title><rect x="49.6618%" y="213" width="0.0862%" height="15" fill="rgb(209,67,49)" fg:x="30542" fg:w="53"/><text x="49.9118%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (135 samples, 0.22%)</title><rect x="49.8618%" y="197" width="0.2195%" height="15" fill="rgb(213,87,29)" fg:x="30665" fg:w="135"/><text x="50.1118%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (396 samples, 0.64%)</title><rect x="49.6211%" y="229" width="0.6439%" height="15" fill="rgb(205,151,52)" fg:x="30517" fg:w="396"/><text x="49.8711%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (318 samples, 0.52%)</title><rect x="49.7480%" y="213" width="0.5171%" height="15" fill="rgb(253,215,39)" fg:x="30595" fg:w="318"/><text x="49.9980%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (113 samples, 0.18%)</title><rect x="50.0813%" y="197" width="0.1837%" height="15" fill="rgb(221,220,41)" fg:x="30800" fg:w="113"/><text x="50.3313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="52.6293%" y="149" width="0.0114%" height="15" fill="rgb(218,133,21)" fg:x="32367" fg:w="7"/><text x="52.8793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="52.6276%" y="165" width="0.0358%" height="15" fill="rgb(221,193,43)" fg:x="32366" fg:w="22"/><text x="52.8776%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="52.6407%" y="149" width="0.0228%" height="15" fill="rgb(240,128,52)" fg:x="32374" fg:w="14"/><text x="52.8907%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (9,128 samples, 14.84%)</title><rect x="37.8309%" y="245" width="14.8423%" height="15" fill="rgb(253,114,12)" fg:x="23266" fg:w="9128"/><text x="38.0809%" y="255.50">rust_qecp`rust_qecp::ft..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,480 samples, 2.41%)</title><rect x="50.2667%" y="229" width="2.4065%" height="15" fill="rgb(215,223,47)" fg:x="30914" fg:w="1480"/><text x="50.5167%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.05%)</title><rect x="52.6244%" y="213" width="0.0488%" height="15" fill="rgb(248,225,23)" fg:x="32364" fg:w="30"/><text x="52.8744%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (29 samples, 0.05%)</title><rect x="52.6260%" y="197" width="0.0472%" height="15" fill="rgb(250,108,0)" fg:x="32365" fg:w="29"/><text x="52.8760%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="52.6260%" y="181" width="0.0472%" height="15" fill="rgb(228,208,7)" fg:x="32365" fg:w="29"/><text x="52.8760%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (13 samples, 0.02%)</title><rect x="52.6732%" y="245" width="0.0211%" height="15" fill="rgb(244,45,10)" fg:x="32394" fg:w="13"/><text x="52.9232%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="54.2228%" y="165" width="0.0146%" height="15" fill="rgb(207,125,25)" fg:x="33347" fg:w="9"/><text x="54.4728%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.02%)</title><rect x="54.2195%" y="213" width="0.0211%" height="15" fill="rgb(210,195,18)" fg:x="33345" fg:w="13"/><text x="54.4695%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="54.2211%" y="197" width="0.0195%" height="15" fill="rgb(249,80,12)" fg:x="33346" fg:w="12"/><text x="54.4711%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="54.2211%" y="181" width="0.0195%" height="15" fill="rgb(221,65,9)" fg:x="33346" fg:w="12"/><text x="54.4711%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (59 samples, 0.10%)</title><rect x="54.1463%" y="229" width="0.0959%" height="15" fill="rgb(235,49,36)" fg:x="33300" fg:w="59"/><text x="54.3963%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.02%)</title><rect x="54.2732%" y="197" width="0.0244%" height="15" fill="rgb(225,32,20)" fg:x="33378" fg:w="15"/><text x="54.5232%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (21 samples, 0.03%)</title><rect x="54.2976%" y="197" width="0.0341%" height="15" fill="rgb(215,141,46)" fg:x="33393" fg:w="21"/><text x="54.5476%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (70 samples, 0.11%)</title><rect x="54.2439%" y="213" width="0.1138%" height="15" fill="rgb(250,160,47)" fg:x="33360" fg:w="70"/><text x="54.4939%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="54.3317%" y="197" width="0.0260%" height="15" fill="rgb(216,222,40)" fg:x="33414" fg:w="16"/><text x="54.5817%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="54.3593%" y="213" width="0.0130%" height="15" fill="rgb(234,217,39)" fg:x="33431" fg:w="8"/><text x="54.6093%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (82 samples, 0.13%)</title><rect x="54.2423%" y="229" width="0.1333%" height="15" fill="rgb(207,178,40)" fg:x="33359" fg:w="82"/><text x="54.4923%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.04%)</title><rect x="54.3756%" y="213" width="0.0439%" height="15" fill="rgb(221,136,13)" fg:x="33441" fg:w="27"/><text x="54.6256%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="54.4195%" y="213" width="0.0163%" height="15" fill="rgb(249,199,10)" fg:x="33468" fg:w="10"/><text x="54.6695%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="54.4358%" y="213" width="0.0276%" height="15" fill="rgb(249,222,13)" fg:x="33478" fg:w="17"/><text x="54.6858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="54.4634%" y="213" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="33495" fg:w="14"/><text x="54.7134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.03%)</title><rect x="54.4862%" y="213" width="0.0276%" height="15" fill="rgb(236,202,9)" fg:x="33509" fg:w="17"/><text x="54.7362%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="54.5138%" y="213" width="0.0163%" height="15" fill="rgb(250,229,37)" fg:x="33526" fg:w="10"/><text x="54.7638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="54.7415%" y="181" width="0.0179%" height="15" fill="rgb(206,174,23)" fg:x="33666" fg:w="11"/><text x="54.9915%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="54.9951%" y="149" width="0.0618%" height="15" fill="rgb(211,33,43)" fg:x="33822" fg:w="38"/><text x="55.2451%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (147 samples, 0.24%)</title><rect x="54.8228%" y="165" width="0.2390%" height="15" fill="rgb(245,58,50)" fg:x="33716" fg:w="147"/><text x="55.0728%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (312 samples, 0.51%)</title><rect x="54.5870%" y="197" width="0.5073%" height="15" fill="rgb(244,68,36)" fg:x="33571" fg:w="312"/><text x="54.8370%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (206 samples, 0.33%)</title><rect x="54.7593%" y="181" width="0.3350%" height="15" fill="rgb(232,229,15)" fg:x="33677" fg:w="206"/><text x="55.0093%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="55.0618%" y="165" width="0.0325%" height="15" fill="rgb(254,30,23)" fg:x="33863" fg:w="20"/><text x="55.3118%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="55.0943%" y="197" width="0.0358%" height="15" fill="rgb(235,160,14)" fg:x="33883" fg:w="22"/><text x="55.3443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.08%)</title><rect x="55.2488%" y="181" width="0.0797%" height="15" fill="rgb(212,155,44)" fg:x="33978" fg:w="49"/><text x="55.4988%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (123 samples, 0.20%)</title><rect x="55.1301%" y="197" width="0.2000%" height="15" fill="rgb(226,2,50)" fg:x="33905" fg:w="123"/><text x="55.3801%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="55.3301%" y="197" width="0.0211%" height="15" fill="rgb(234,177,6)" fg:x="34028" fg:w="13"/><text x="55.5801%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="55.3512%" y="197" width="0.0520%" height="15" fill="rgb(217,24,9)" fg:x="34041" fg:w="32"/><text x="55.6012%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="55.4130%" y="197" width="0.0163%" height="15" fill="rgb(220,13,46)" fg:x="34079" fg:w="10"/><text x="55.6630%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (252 samples, 0.41%)</title><rect x="55.4683%" y="181" width="0.4098%" height="15" fill="rgb(239,221,27)" fg:x="34113" fg:w="252"/><text x="55.7183%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.07%)</title><rect x="55.9398%" y="165" width="0.0699%" height="15" fill="rgb(222,198,25)" fg:x="34403" fg:w="43"/><text x="56.1898%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (46 samples, 0.07%)</title><rect x="56.0098%" y="165" width="0.0748%" height="15" fill="rgb(211,99,13)" fg:x="34446" fg:w="46"/><text x="56.2598%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (131 samples, 0.21%)</title><rect x="55.9041%" y="181" width="0.2130%" height="15" fill="rgb(232,111,31)" fg:x="34381" fg:w="131"/><text x="56.1541%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.03%)</title><rect x="56.0846%" y="165" width="0.0325%" height="15" fill="rgb(245,82,37)" fg:x="34492" fg:w="20"/><text x="56.3346%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="56.1171%" y="181" width="0.0163%" height="15" fill="rgb(227,149,46)" fg:x="34512" fg:w="10"/><text x="56.3671%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="56.4195%" y="117" width="0.0244%" height="15" fill="rgb(218,36,50)" fg:x="34698" fg:w="15"/><text x="56.6695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (95 samples, 0.15%)</title><rect x="56.3171%" y="133" width="0.1545%" height="15" fill="rgb(226,80,48)" fg:x="34635" fg:w="95"/><text x="56.5671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.03%)</title><rect x="56.4439%" y="117" width="0.0276%" height="15" fill="rgb(238,224,15)" fg:x="34713" fg:w="17"/><text x="56.6939%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (162 samples, 0.26%)</title><rect x="56.2179%" y="165" width="0.2634%" height="15" fill="rgb(241,136,10)" fg:x="34574" fg:w="162"/><text x="56.4679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (116 samples, 0.19%)</title><rect x="56.2927%" y="149" width="0.1886%" height="15" fill="rgb(208,32,45)" fg:x="34620" fg:w="116"/><text x="56.5427%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="56.4813%" y="165" width="0.0179%" height="15" fill="rgb(207,135,9)" fg:x="34736" fg:w="11"/><text x="56.7313%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (661 samples, 1.07%)</title><rect x="55.4293%" y="197" width="1.0748%" height="15" fill="rgb(206,86,44)" fg:x="34089" fg:w="661"/><text x="55.6793%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (228 samples, 0.37%)</title><rect x="56.1333%" y="181" width="0.3707%" height="15" fill="rgb(245,177,15)" fg:x="34522" fg:w="228"/><text x="56.3833%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.05%)</title><rect x="56.6179%" y="181" width="0.0504%" height="15" fill="rgb(206,64,50)" fg:x="34820" fg:w="31"/><text x="56.8679%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (63 samples, 0.10%)</title><rect x="56.6683%" y="181" width="0.1024%" height="15" fill="rgb(234,36,40)" fg:x="34851" fg:w="63"/><text x="56.9183%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (187 samples, 0.30%)</title><rect x="56.5041%" y="197" width="0.3041%" height="15" fill="rgb(213,64,8)" fg:x="34750" fg:w="187"/><text x="56.7541%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="56.7707%" y="181" width="0.0374%" height="15" fill="rgb(210,75,36)" fg:x="34914" fg:w="23"/><text x="57.0207%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="56.8081%" y="197" width="0.0228%" height="15" fill="rgb(229,88,21)" fg:x="34937" fg:w="14"/><text x="57.0581%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,421 samples, 2.31%)</title><rect x="54.5350%" y="213" width="2.3106%" height="15" fill="rgb(252,204,47)" fg:x="33539" fg:w="1421"/><text x="54.7850%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="56.8309%" y="197" width="0.0146%" height="15" fill="rgb(208,77,27)" fg:x="34951" fg:w="9"/><text x="57.0809%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.01%)</title><rect x="56.8455%" y="213" width="0.0130%" height="15" fill="rgb(221,76,26)" fg:x="34960" fg:w="8"/><text x="57.0955%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="56.8667%" y="213" width="0.0179%" height="15" fill="rgb(225,139,18)" fg:x="34973" fg:w="11"/><text x="57.1167%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="56.8846%" y="213" width="0.0163%" height="15" fill="rgb(230,137,11)" fg:x="34984" fg:w="10"/><text x="57.1346%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.03%)</title><rect x="56.9008%" y="213" width="0.0260%" height="15" fill="rgb(212,28,1)" fg:x="34994" fg:w="16"/><text x="57.1508%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,572 samples, 2.56%)</title><rect x="54.3756%" y="229" width="2.5561%" height="15" fill="rgb(248,164,17)" fg:x="33441" fg:w="1572"/><text x="54.6256%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="56.9317%" y="229" width="0.0130%" height="15" fill="rgb(222,171,42)" fg:x="35013" fg:w="8"/><text x="57.1817%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="57.0569%" y="213" width="0.0309%" height="15" fill="rgb(243,84,45)" fg:x="35090" fg:w="19"/><text x="57.3069%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="57.0878%" y="213" width="0.0195%" height="15" fill="rgb(252,49,23)" fg:x="35109" fg:w="12"/><text x="57.3378%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (31 samples, 0.05%)</title><rect x="57.1073%" y="213" width="0.0504%" height="15" fill="rgb(215,19,7)" fg:x="35121" fg:w="31"/><text x="57.3573%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="57.1577%" y="213" width="0.0146%" height="15" fill="rgb(238,81,41)" fg:x="35152" fg:w="9"/><text x="57.4077%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.12%)</title><rect x="57.3415%" y="165" width="0.1220%" height="15" fill="rgb(210,199,37)" fg:x="35265" fg:w="75"/><text x="57.5915%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="57.4423%" y="149" width="0.0211%" height="15" fill="rgb(244,192,49)" fg:x="35327" fg:w="13"/><text x="57.6923%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.26%)</title><rect x="57.2179%" y="197" width="0.2618%" height="15" fill="rgb(226,211,11)" fg:x="35189" fg:w="161"/><text x="57.4679%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (108 samples, 0.18%)</title><rect x="57.3041%" y="181" width="0.1756%" height="15" fill="rgb(236,162,54)" fg:x="35242" fg:w="108"/><text x="57.5541%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="57.4634%" y="165" width="0.0163%" height="15" fill="rgb(220,229,9)" fg:x="35340" fg:w="10"/><text x="57.7134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="57.4797%" y="197" width="0.0130%" height="15" fill="rgb(250,87,22)" fg:x="35350" fg:w="8"/><text x="57.7297%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="57.4927%" y="197" width="0.0146%" height="15" fill="rgb(239,43,17)" fg:x="35358" fg:w="9"/><text x="57.7427%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="57.5106%" y="197" width="0.0260%" height="15" fill="rgb(231,177,25)" fg:x="35369" fg:w="16"/><text x="57.7606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (14 samples, 0.02%)</title><rect x="57.6780%" y="181" width="0.0228%" height="15" fill="rgb(219,179,1)" fg:x="35472" fg:w="14"/><text x="57.9280%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (13 samples, 0.02%)</title><rect x="57.7935%" y="165" width="0.0211%" height="15" fill="rgb(238,219,53)" fg:x="35543" fg:w="13"/><text x="58.0435%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="57.8146%" y="165" width="0.0358%" height="15" fill="rgb(232,167,36)" fg:x="35556" fg:w="22"/><text x="58.0646%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (177 samples, 0.29%)</title><rect x="57.8504%" y="165" width="0.2878%" height="15" fill="rgb(244,19,51)" fg:x="35578" fg:w="177"/><text x="58.1004%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (34 samples, 0.06%)</title><rect x="58.2569%" y="149" width="0.0553%" height="15" fill="rgb(224,6,22)" fg:x="35828" fg:w="34"/><text x="58.5069%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (56 samples, 0.09%)</title><rect x="58.3122%" y="149" width="0.0911%" height="15" fill="rgb(224,145,5)" fg:x="35862" fg:w="56"/><text x="58.5622%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (49 samples, 0.08%)</title><rect x="58.6000%" y="117" width="0.0797%" height="15" fill="rgb(234,130,49)" fg:x="36039" fg:w="49"/><text x="58.8500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (167 samples, 0.27%)</title><rect x="58.4260%" y="133" width="0.2715%" height="15" fill="rgb(254,6,2)" fg:x="35932" fg:w="167"/><text x="58.6760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.02%)</title><rect x="58.6797%" y="117" width="0.0179%" height="15" fill="rgb(208,96,46)" fg:x="36088" fg:w="11"/><text x="58.9297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (186 samples, 0.30%)</title><rect x="58.4033%" y="149" width="0.3024%" height="15" fill="rgb(239,3,39)" fg:x="35918" fg:w="186"/><text x="58.6533%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (94 samples, 0.15%)</title><rect x="58.7057%" y="149" width="0.1528%" height="15" fill="rgb(233,210,1)" fg:x="36104" fg:w="94"/><text x="58.9557%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.05%)</title><rect x="58.9919%" y="117" width="0.0455%" height="15" fill="rgb(244,137,37)" fg:x="36280" fg:w="28"/><text x="59.2419%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (165 samples, 0.27%)</title><rect x="58.8585%" y="149" width="0.2683%" height="15" fill="rgb(240,136,2)" fg:x="36198" fg:w="165"/><text x="59.1085%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (144 samples, 0.23%)</title><rect x="58.8927%" y="133" width="0.2341%" height="15" fill="rgb(239,18,37)" fg:x="36219" fg:w="144"/><text x="59.1427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 0.09%)</title><rect x="59.0374%" y="117" width="0.0894%" height="15" fill="rgb(218,185,22)" fg:x="36308" fg:w="55"/><text x="59.2874%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (615 samples, 1.00%)</title><rect x="58.1382%" y="165" width="1.0000%" height="15" fill="rgb(225,218,4)" fg:x="35755" fg:w="615"/><text x="58.3882%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="59.1268%" y="149" width="0.0114%" height="15" fill="rgb(230,182,32)" fg:x="36363" fg:w="7"/><text x="59.3768%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (940 samples, 1.53%)</title><rect x="57.7008%" y="181" width="1.5285%" height="15" fill="rgb(242,56,43)" fg:x="35486" fg:w="940"/><text x="57.9508%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (51 samples, 0.08%)</title><rect x="59.1463%" y="165" width="0.0829%" height="15" fill="rgb(233,99,24)" fg:x="36375" fg:w="51"/><text x="59.3963%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (104 samples, 0.17%)</title><rect x="59.2293%" y="181" width="0.1691%" height="15" fill="rgb(234,209,42)" fg:x="36426" fg:w="104"/><text x="59.4793%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="59.3984%" y="181" width="0.0341%" height="15" fill="rgb(227,7,12)" fg:x="36530" fg:w="21"/><text x="59.6484%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,175 samples, 1.91%)</title><rect x="57.5366%" y="197" width="1.9106%" height="15" fill="rgb(245,203,43)" fg:x="35385" fg:w="1175"/><text x="57.7866%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="59.4325%" y="181" width="0.0146%" height="15" fill="rgb(238,205,33)" fg:x="36551" fg:w="9"/><text x="59.6825%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,540 samples, 2.50%)</title><rect x="56.9447%" y="229" width="2.5041%" height="15" fill="rgb(231,56,7)" fg:x="35021" fg:w="1540"/><text x="57.1947%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,398 samples, 2.27%)</title><rect x="57.1756%" y="213" width="2.2732%" height="15" fill="rgb(244,186,29)" fg:x="35163" fg:w="1398"/><text x="57.4256%" y="223.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (50 samples, 0.08%)</title><rect x="59.4488%" y="229" width="0.0813%" height="15" fill="rgb(234,111,31)" fg:x="36561" fg:w="50"/><text x="59.6988%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (115 samples, 0.19%)</title><rect x="59.5301%" y="213" width="0.1870%" height="15" fill="rgb(241,149,10)" fg:x="36611" fg:w="115"/><text x="59.7801%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="59.9122%" y="197" width="0.0146%" height="15" fill="rgb(249,206,44)" fg:x="36846" fg:w="9"/><text x="60.1622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="60.2179%" y="165" width="0.0276%" height="15" fill="rgb(251,153,30)" fg:x="37034" fg:w="17"/><text x="60.4679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (21 samples, 0.03%)</title><rect x="60.2455%" y="165" width="0.0341%" height="15" fill="rgb(239,152,38)" fg:x="37051" fg:w="21"/><text x="60.4955%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="60.3106%" y="149" width="0.0130%" height="15" fill="rgb(249,139,47)" fg:x="37091" fg:w="8"/><text x="60.5606%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (51 samples, 0.08%)</title><rect x="60.4520%" y="133" width="0.0829%" height="15" fill="rgb(244,64,35)" fg:x="37178" fg:w="51"/><text x="60.7020%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (369 samples, 0.60%)</title><rect x="60.6033%" y="117" width="0.6000%" height="15" fill="rgb(216,46,15)" fg:x="37271" fg:w="369"/><text x="60.8533%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (29 samples, 0.05%)</title><rect x="61.2033%" y="117" width="0.0472%" height="15" fill="rgb(250,74,19)" fg:x="37640" fg:w="29"/><text x="61.4533%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (848 samples, 1.38%)</title><rect x="60.0195%" y="181" width="1.3789%" height="15" fill="rgb(249,42,33)" fg:x="36912" fg:w="848"/><text x="60.2695%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (688 samples, 1.12%)</title><rect x="60.2797%" y="165" width="1.1187%" height="15" fill="rgb(242,149,17)" fg:x="37072" fg:w="688"/><text x="60.5297%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (661 samples, 1.07%)</title><rect x="60.3236%" y="149" width="1.0748%" height="15" fill="rgb(244,29,21)" fg:x="37099" fg:w="661"/><text x="60.5736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (529 samples, 0.86%)</title><rect x="60.5382%" y="133" width="0.8602%" height="15" fill="rgb(220,130,37)" fg:x="37231" fg:w="529"/><text x="60.7882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (91 samples, 0.15%)</title><rect x="61.2504%" y="117" width="0.1480%" height="15" fill="rgb(211,67,2)" fg:x="37669" fg:w="91"/><text x="61.5004%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (98 samples, 0.16%)</title><rect x="61.3984%" y="181" width="0.1593%" height="15" fill="rgb(235,68,52)" fg:x="37760" fg:w="98"/><text x="61.6484%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (268 samples, 0.44%)</title><rect x="61.5577%" y="181" width="0.4358%" height="15" fill="rgb(246,142,3)" fg:x="37858" fg:w="268"/><text x="61.8077%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,403 samples, 2.28%)</title><rect x="59.7285%" y="213" width="2.2813%" height="15" fill="rgb(241,25,7)" fg:x="36733" fg:w="1403"/><text x="59.9785%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,263 samples, 2.05%)</title><rect x="59.9561%" y="197" width="2.0537%" height="15" fill="rgb(242,119,39)" fg:x="36873" fg:w="1263"/><text x="60.2061%" y="207.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="61.9935%" y="181" width="0.0163%" height="15" fill="rgb(241,98,45)" fg:x="38126" fg:w="10"/><text x="62.2435%" y="191.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,537 samples, 2.50%)</title><rect x="59.5301%" y="229" width="2.4992%" height="15" fill="rgb(254,28,30)" fg:x="36611" fg:w="1537"/><text x="59.7801%" y="239.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.02%)</title><rect x="62.0098%" y="213" width="0.0195%" height="15" fill="rgb(241,142,54)" fg:x="38136" fg:w="12"/><text x="62.2598%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (26 samples, 0.04%)</title><rect x="62.3675%" y="213" width="0.0423%" height="15" fill="rgb(222,85,15)" fg:x="38356" fg:w="26"/><text x="62.6175%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="62.8016%" y="197" width="0.0195%" height="15" fill="rgb(210,85,47)" fg:x="38623" fg:w="12"/><text x="63.0516%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (20 samples, 0.03%)</title><rect x="63.2341%" y="181" width="0.0325%" height="15" fill="rgb(224,206,25)" fg:x="38889" fg:w="20"/><text x="63.4841%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (24 samples, 0.04%)</title><rect x="63.6911%" y="165" width="0.0390%" height="15" fill="rgb(243,201,19)" fg:x="39170" fg:w="24"/><text x="63.9411%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (32 samples, 0.05%)</title><rect x="64.0585%" y="149" width="0.0520%" height="15" fill="rgb(236,59,4)" fg:x="39396" fg:w="32"/><text x="64.3085%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="64.2959%" y="133" width="0.0228%" height="15" fill="rgb(254,179,45)" fg:x="39542" fg:w="14"/><text x="64.5459%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,451 samples, 2.36%)</title><rect x="62.0309%" y="229" width="2.3593%" height="15" fill="rgb(226,14,10)" fg:x="38149" fg:w="1451"/><text x="62.2809%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,218 samples, 1.98%)</title><rect x="62.4098%" y="213" width="1.9805%" height="15" fill="rgb(244,27,41)" fg:x="38382" fg:w="1218"/><text x="62.6598%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (965 samples, 1.57%)</title><rect x="62.8211%" y="197" width="1.5691%" height="15" fill="rgb(235,35,32)" fg:x="38635" fg:w="965"/><text x="63.0711%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (691 samples, 1.12%)</title><rect x="63.2667%" y="181" width="1.1236%" height="15" fill="rgb(218,68,31)" fg:x="38909" fg:w="691"/><text x="63.5167%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (406 samples, 0.66%)</title><rect x="63.7301%" y="165" width="0.6602%" height="15" fill="rgb(207,120,37)" fg:x="39194" fg:w="406"/><text x="63.9801%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (172 samples, 0.28%)</title><rect x="64.1106%" y="149" width="0.2797%" height="15" fill="rgb(227,98,0)" fg:x="39428" fg:w="172"/><text x="64.3606%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (44 samples, 0.07%)</title><rect x="64.3187%" y="133" width="0.0715%" height="15" fill="rgb(207,7,3)" fg:x="39556" fg:w="44"/><text x="64.5687%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (347 samples, 0.56%)</title><rect x="65.2179%" y="213" width="0.5642%" height="15" fill="rgb(206,98,19)" fg:x="40109" fg:w="347"/><text x="65.4679%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (729 samples, 1.19%)</title><rect x="65.7821%" y="213" width="1.1854%" height="15" fill="rgb(217,5,26)" fg:x="40456" fg:w="729"/><text x="66.0321%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,155 samples, 3.50%)</title><rect x="64.3902%" y="229" width="3.5041%" height="15" fill="rgb(235,190,38)" fg:x="39600" fg:w="2155"/><text x="64.6402%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (570 samples, 0.93%)</title><rect x="66.9675%" y="213" width="0.9268%" height="15" fill="rgb(247,86,24)" fg:x="41185" fg:w="570"/><text x="67.2175%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (82 samples, 0.13%)</title><rect x="67.8943%" y="229" width="0.1333%" height="15" fill="rgb(205,101,16)" fg:x="41755" fg:w="82"/><text x="68.1443%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (293 samples, 0.48%)</title><rect x="68.0276%" y="229" width="0.4764%" height="15" fill="rgb(246,168,33)" fg:x="41837" fg:w="293"/><text x="68.2776%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (9,722 samples, 15.81%)</title><rect x="52.6992%" y="245" width="15.8081%" height="15" fill="rgb(231,114,1)" fg:x="32410" fg:w="9722"/><text x="52.9492%" y="255.50">rust_qecp`rust_qecp::uni..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.04%)</title><rect x="73.7252%" y="229" width="0.0374%" height="15" fill="rgb(207,184,53)" fg:x="45341" fg:w="23"/><text x="73.9752%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="73.8618%" y="213" width="0.0179%" height="15" fill="rgb(224,95,51)" fg:x="45425" fg:w="11"/><text x="74.1118%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (92 samples, 0.15%)</title><rect x="73.9122%" y="197" width="0.1496%" height="15" fill="rgb(212,188,45)" fg:x="45456" fg:w="92"/><text x="74.1622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="74.0081%" y="181" width="0.0537%" height="15" fill="rgb(223,154,38)" fg:x="45515" fg:w="33"/><text x="74.2581%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (123 samples, 0.20%)</title><rect x="73.8797%" y="213" width="0.2000%" height="15" fill="rgb(251,22,52)" fg:x="45436" fg:w="123"/><text x="74.1297%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="74.0618%" y="197" width="0.0179%" height="15" fill="rgb(229,209,22)" fg:x="45548" fg:w="11"/><text x="74.3118%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (199 samples, 0.32%)</title><rect x="73.7626%" y="229" width="0.3236%" height="15" fill="rgb(234,138,34)" fg:x="45364" fg:w="199"/><text x="74.0126%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.02%)</title><rect x="74.0862%" y="229" width="0.0228%" height="15" fill="rgb(212,95,11)" fg:x="45563" fg:w="14"/><text x="74.3362%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (138 samples, 0.22%)</title><rect x="74.3886%" y="213" width="0.2244%" height="15" fill="rgb(240,179,47)" fg:x="45749" fg:w="138"/><text x="74.6386%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (360 samples, 0.59%)</title><rect x="74.1089%" y="229" width="0.5854%" height="15" fill="rgb(240,163,11)" fg:x="45577" fg:w="360"/><text x="74.3589%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.07%)</title><rect x="74.6293%" y="213" width="0.0650%" height="15" fill="rgb(236,37,12)" fg:x="45897" fg:w="40"/><text x="74.8793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.06%)</title><rect x="74.6341%" y="197" width="0.0602%" height="15" fill="rgb(232,164,16)" fg:x="45900" fg:w="37"/><text x="74.8841%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (802 samples, 1.30%)</title><rect x="74.6959%" y="213" width="1.3041%" height="15" fill="rgb(244,205,15)" fg:x="45938" fg:w="802"/><text x="74.9459%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (804 samples, 1.31%)</title><rect x="74.6943%" y="229" width="1.3073%" height="15" fill="rgb(223,117,47)" fg:x="45937" fg:w="804"/><text x="74.9443%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.06%)</title><rect x="76.0016%" y="229" width="0.0585%" height="15" fill="rgb(244,107,35)" fg:x="46741" fg:w="36"/><text x="76.2516%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="76.0992%" y="197" width="0.0228%" height="15" fill="rgb(205,140,8)" fg:x="46801" fg:w="14"/><text x="76.3492%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (42 samples, 0.07%)</title><rect x="76.0602%" y="229" width="0.0683%" height="15" fill="rgb(228,84,46)" fg:x="46777" fg:w="42"/><text x="76.3102%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.06%)</title><rect x="76.0683%" y="213" width="0.0602%" height="15" fill="rgb(254,188,9)" fg:x="46782" fg:w="37"/><text x="76.3183%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="76.1301%" y="229" width="0.0228%" height="15" fill="rgb(206,112,54)" fg:x="46820" fg:w="14"/><text x="76.3801%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (177 samples, 0.29%)</title><rect x="76.1528%" y="229" width="0.2878%" height="15" fill="rgb(216,84,49)" fg:x="46834" fg:w="177"/><text x="76.4028%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (30 samples, 0.05%)</title><rect x="76.3919%" y="213" width="0.0488%" height="15" fill="rgb(214,194,35)" fg:x="46981" fg:w="30"/><text x="76.6419%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.05%)</title><rect x="76.3919%" y="197" width="0.0488%" height="15" fill="rgb(249,28,3)" fg:x="46981" fg:w="30"/><text x="76.6419%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.06%)</title><rect x="76.4423%" y="229" width="0.0553%" height="15" fill="rgb(222,56,52)" fg:x="47012" fg:w="34"/><text x="76.6923%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (57 samples, 0.09%)</title><rect x="76.5171%" y="229" width="0.0927%" height="15" fill="rgb(245,217,50)" fg:x="47058" fg:w="57"/><text x="76.7671%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 0.04%)</title><rect x="76.6098%" y="229" width="0.0423%" height="15" fill="rgb(213,201,24)" fg:x="47115" fg:w="26"/><text x="76.8598%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="76.6927%" y="197" width="0.0179%" height="15" fill="rgb(248,116,28)" fg:x="47166" fg:w="11"/><text x="76.9427%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (21 samples, 0.03%)</title><rect x="76.7122%" y="197" width="0.0341%" height="15" fill="rgb(219,72,43)" fg:x="47178" fg:w="21"/><text x="76.9622%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84 samples, 0.14%)</title><rect x="76.6569%" y="213" width="0.1366%" height="15" fill="rgb(209,138,14)" fg:x="47144" fg:w="84"/><text x="76.9069%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.05%)</title><rect x="76.7463%" y="197" width="0.0472%" height="15" fill="rgb(222,18,33)" fg:x="47199" fg:w="29"/><text x="76.9963%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="76.7659%" y="181" width="0.0276%" height="15" fill="rgb(213,199,7)" fg:x="47211" fg:w="17"/><text x="77.0159%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="76.7935%" y="213" width="0.0146%" height="15" fill="rgb(250,110,10)" fg:x="47228" fg:w="9"/><text x="77.0435%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (100 samples, 0.16%)</title><rect x="76.6520%" y="229" width="0.1626%" height="15" fill="rgb(248,123,6)" fg:x="47141" fg:w="100"/><text x="76.9020%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="76.8146%" y="229" width="0.0309%" height="15" fill="rgb(206,91,31)" fg:x="47241" fg:w="19"/><text x="77.0646%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,437 samples, 2.34%)</title><rect x="76.8455%" y="229" width="2.3366%" height="15" fill="rgb(211,154,13)" fg:x="47260" fg:w="1437"/><text x="77.0955%" y="239.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="79.1821%" y="229" width="0.0114%" height="15" fill="rgb(225,148,7)" fg:x="48697" fg:w="7"/><text x="79.4321%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="79.1935%" y="229" width="0.0130%" height="15" fill="rgb(220,160,43)" fg:x="48704" fg:w="8"/><text x="79.4435%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (7 samples, 0.01%)</title><rect x="79.2650%" y="181" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="48748" fg:w="7"/><text x="79.5150%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="79.2927%" y="165" width="0.0146%" height="15" fill="rgb(243,137,7)" fg:x="48765" fg:w="9"/><text x="79.5427%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="79.3301%" y="149" width="0.0179%" height="15" fill="rgb(230,79,13)" fg:x="48788" fg:w="11"/><text x="79.5801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.04%)</title><rect x="79.3480%" y="149" width="0.0358%" height="15" fill="rgb(247,105,23)" fg:x="48799" fg:w="22"/><text x="79.5980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="79.3545%" y="133" width="0.0293%" height="15" fill="rgb(223,179,41)" fg:x="48803" fg:w="18"/><text x="79.6045%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (53 samples, 0.09%)</title><rect x="79.3073%" y="165" width="0.0862%" height="15" fill="rgb(218,9,34)" fg:x="48774" fg:w="53"/><text x="79.5573%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (84 samples, 0.14%)</title><rect x="79.2764%" y="181" width="0.1366%" height="15" fill="rgb(222,106,8)" fg:x="48755" fg:w="84"/><text x="79.5264%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="79.3935%" y="165" width="0.0195%" height="15" fill="rgb(211,220,0)" fg:x="48827" fg:w="12"/><text x="79.6435%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="79.4130%" y="181" width="0.0309%" height="15" fill="rgb(229,52,16)" fg:x="48839" fg:w="19"/><text x="79.6630%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (142 samples, 0.23%)</title><rect x="79.2146%" y="229" width="0.2309%" height="15" fill="rgb(212,155,18)" fg:x="48717" fg:w="142"/><text x="79.4646%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (127 samples, 0.21%)</title><rect x="79.2390%" y="213" width="0.2065%" height="15" fill="rgb(242,21,14)" fg:x="48732" fg:w="127"/><text x="79.4890%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (122 samples, 0.20%)</title><rect x="79.2472%" y="197" width="0.1984%" height="15" fill="rgb(222,19,48)" fg:x="48737" fg:w="122"/><text x="79.4972%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,326 samples, 2.16%)</title><rect x="79.4537%" y="229" width="2.1561%" height="15" fill="rgb(232,45,27)" fg:x="48864" fg:w="1326"/><text x="79.7037%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (215 samples, 0.35%)</title><rect x="81.6098%" y="229" width="0.3496%" height="15" fill="rgb(249,103,42)" fg:x="50190" fg:w="215"/><text x="81.8598%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (57 samples, 0.09%)</title><rect x="81.9593%" y="229" width="0.0927%" height="15" fill="rgb(246,81,33)" fg:x="50405" fg:w="57"/><text x="82.2093%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="82.0650%" y="213" width="0.0146%" height="15" fill="rgb(252,33,42)" fg:x="50470" fg:w="9"/><text x="82.3150%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="82.0667%" y="197" width="0.0130%" height="15" fill="rgb(209,212,41)" fg:x="50471" fg:w="8"/><text x="82.3167%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="82.0797%" y="213" width="0.0130%" height="15" fill="rgb(207,154,6)" fg:x="50479" fg:w="8"/><text x="82.3297%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (38 samples, 0.06%)</title><rect x="82.0520%" y="229" width="0.0618%" height="15" fill="rgb(223,64,47)" fg:x="50462" fg:w="38"/><text x="82.3020%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (13 samples, 0.02%)</title><rect x="82.0927%" y="213" width="0.0211%" height="15" fill="rgb(211,161,38)" fg:x="50487" fg:w="13"/><text x="82.3427%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="82.2325%" y="197" width="0.0114%" height="15" fill="rgb(219,138,40)" fg:x="50573" fg:w="7"/><text x="82.4825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="82.8114%" y="165" width="0.0618%" height="15" fill="rgb(241,228,46)" fg:x="50929" fg:w="38"/><text x="83.0614%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (152 samples, 0.25%)</title><rect x="82.6520%" y="181" width="0.2472%" height="15" fill="rgb(223,209,38)" fg:x="50831" fg:w="152"/><text x="82.9020%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.03%)</title><rect x="82.8732%" y="165" width="0.0260%" height="15" fill="rgb(236,164,45)" fg:x="50967" fg:w="16"/><text x="83.1232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (412 samples, 0.67%)</title><rect x="82.2439%" y="197" width="0.6699%" height="15" fill="rgb(231,15,5)" fg:x="50580" fg:w="412"/><text x="82.4939%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="82.8992%" y="181" width="0.0146%" height="15" fill="rgb(252,35,15)" fg:x="50983" fg:w="9"/><text x="83.1492%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="82.9138%" y="197" width="0.0211%" height="15" fill="rgb(248,181,18)" fg:x="50992" fg:w="13"/><text x="83.1638%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (48 samples, 0.08%)</title><rect x="83.0000%" y="181" width="0.0780%" height="15" fill="rgb(233,39,42)" fg:x="51045" fg:w="48"/><text x="83.2500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (21 samples, 0.03%)</title><rect x="83.0439%" y="165" width="0.0341%" height="15" fill="rgb(238,110,33)" fg:x="51072" fg:w="21"/><text x="83.2939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.02%)</title><rect x="83.1106%" y="165" width="0.0244%" height="15" fill="rgb(233,195,10)" fg:x="51113" fg:w="15"/><text x="83.3606%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (172 samples, 0.28%)</title><rect x="82.9350%" y="197" width="0.2797%" height="15" fill="rgb(254,105,3)" fg:x="51005" fg:w="172"/><text x="83.1850%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (83 samples, 0.13%)</title><rect x="83.0797%" y="181" width="0.1350%" height="15" fill="rgb(221,225,9)" fg:x="51094" fg:w="83"/><text x="83.3297%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (49 samples, 0.08%)</title><rect x="83.1350%" y="165" width="0.0797%" height="15" fill="rgb(224,227,45)" fg:x="51128" fg:w="49"/><text x="83.3850%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (650 samples, 1.06%)</title><rect x="82.1593%" y="213" width="1.0569%" height="15" fill="rgb(229,198,43)" fg:x="50528" fg:w="650"/><text x="82.4093%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="83.2163%" y="213" width="0.0179%" height="15" fill="rgb(206,209,35)" fg:x="51178" fg:w="11"/><text x="83.4663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="83.2341%" y="213" width="0.0130%" height="15" fill="rgb(245,195,53)" fg:x="51189" fg:w="8"/><text x="83.4841%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (699 samples, 1.14%)</title><rect x="82.1138%" y="229" width="1.1366%" height="15" fill="rgb(240,92,26)" fg:x="50500" fg:w="699"/><text x="82.3638%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (55 samples, 0.09%)</title><rect x="83.2504%" y="229" width="0.0894%" height="15" fill="rgb(207,40,23)" fg:x="51199" fg:w="55"/><text x="83.5004%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (9,152 samples, 14.88%)</title><rect x="68.5073%" y="245" width="14.8813%" height="15" fill="rgb(223,111,35)" fg:x="42132" fg:w="9152"/><text x="68.7573%" y="255.50">rust_qecp`rust_qecp::un..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (30 samples, 0.05%)</title><rect x="83.3398%" y="229" width="0.0488%" height="15" fill="rgb(229,147,28)" fg:x="51254" fg:w="30"/><text x="83.5898%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (46,994 samples, 76.41%)</title><rect x="6.9870%" y="261" width="76.4130%" height="15" fill="rgb(211,29,28)" fg:x="4297" fg:w="46994"/><text x="7.2370%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (7 samples, 0.01%)</title><rect x="83.3886%" y="245" width="0.0114%" height="15" fill="rgb(228,72,33)" fg:x="51284" fg:w="7"/><text x="83.6386%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (49,337 samples, 80.22%)</title><rect x="3.1789%" y="277" width="80.2228%" height="15" fill="rgb(205,214,31)" fg:x="1955" fg:w="49337"/><text x="3.4289%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="86.2016%" y="261" width="0.0374%" height="15" fill="rgb(224,111,15)" fg:x="53014" fg:w="23"/><text x="86.4516%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="86.2407%" y="261" width="0.0179%" height="15" fill="rgb(253,21,26)" fg:x="53038" fg:w="11"/><text x="86.4907%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="86.2423%" y="245" width="0.0163%" height="15" fill="rgb(245,139,43)" fg:x="53039" fg:w="10"/><text x="86.4923%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.01%)</title><rect x="86.2439%" y="229" width="0.0146%" height="15" fill="rgb(252,170,7)" fg:x="53040" fg:w="9"/><text x="86.4939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="86.2455%" y="213" width="0.0130%" height="15" fill="rgb(231,118,14)" fg:x="53041" fg:w="8"/><text x="86.4955%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (23 samples, 0.04%)</title><rect x="86.4488%" y="229" width="0.0374%" height="15" fill="rgb(238,83,0)" fg:x="53166" fg:w="23"/><text x="86.6988%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.09%)</title><rect x="86.5919%" y="213" width="0.0894%" height="15" fill="rgb(221,39,39)" fg:x="53254" fg:w="55"/><text x="86.8419%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (293 samples, 0.48%)</title><rect x="86.2585%" y="261" width="0.4764%" height="15" fill="rgb(222,119,46)" fg:x="53049" fg:w="293"/><text x="86.5085%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (193 samples, 0.31%)</title><rect x="86.4211%" y="245" width="0.3138%" height="15" fill="rgb(222,165,49)" fg:x="53149" fg:w="193"/><text x="86.6711%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (153 samples, 0.25%)</title><rect x="86.4862%" y="229" width="0.2488%" height="15" fill="rgb(219,113,52)" fg:x="53189" fg:w="153"/><text x="86.7362%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (33 samples, 0.05%)</title><rect x="86.6813%" y="213" width="0.0537%" height="15" fill="rgb(214,7,15)" fg:x="53309" fg:w="33"/><text x="86.9313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.02%)</title><rect x="86.8016%" y="245" width="0.0195%" height="15" fill="rgb(235,32,4)" fg:x="53383" fg:w="12"/><text x="87.0516%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="86.8016%" y="229" width="0.0195%" height="15" fill="rgb(238,90,54)" fg:x="53383" fg:w="12"/><text x="87.0516%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="86.8325%" y="245" width="0.0195%" height="15" fill="rgb(213,208,19)" fg:x="53402" fg:w="12"/><text x="87.0825%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="87.1366%" y="181" width="0.0260%" height="15" fill="rgb(233,156,4)" fg:x="53589" fg:w="16"/><text x="87.3866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (97 samples, 0.16%)</title><rect x="87.0602%" y="197" width="0.1577%" height="15" fill="rgb(207,194,5)" fg:x="53542" fg:w="97"/><text x="87.3102%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (34 samples, 0.06%)</title><rect x="87.1626%" y="181" width="0.0553%" height="15" fill="rgb(206,111,30)" fg:x="53605" fg:w="34"/><text x="87.4126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (113 samples, 0.18%)</title><rect x="87.0439%" y="213" width="0.1837%" height="15" fill="rgb(243,70,54)" fg:x="53532" fg:w="113"/><text x="87.2939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="87.2276%" y="213" width="0.0146%" height="15" fill="rgb(242,28,8)" fg:x="53645" fg:w="9"/><text x="87.4776%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (147 samples, 0.24%)</title><rect x="87.0049%" y="229" width="0.2390%" height="15" fill="rgb(219,106,18)" fg:x="53508" fg:w="147"/><text x="87.2549%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (318 samples, 0.52%)</title><rect x="86.7350%" y="261" width="0.5171%" height="15" fill="rgb(244,222,10)" fg:x="53342" fg:w="318"/><text x="86.9850%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (238 samples, 0.39%)</title><rect x="86.8650%" y="245" width="0.3870%" height="15" fill="rgb(236,179,52)" fg:x="53422" fg:w="238"/><text x="87.1150%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,372 samples, 3.86%)</title><rect x="83.4016%" y="277" width="3.8569%" height="15" fill="rgb(213,23,39)" fg:x="51292" fg:w="2372"/><text x="83.6516%" y="287.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (180 samples, 0.29%)</title><rect x="87.2585%" y="277" width="0.2927%" height="15" fill="rgb(238,48,10)" fg:x="53664" fg:w="180"/><text x="87.5085%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (43 samples, 0.07%)</title><rect x="87.4813%" y="261" width="0.0699%" height="15" fill="rgb(251,196,23)" fg:x="53801" fg:w="43"/><text x="87.7313%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,296 samples, 6.99%)</title><rect x="87.5512%" y="277" width="6.9854%" height="15" fill="rgb(250,152,24)" fg:x="53844" fg:w="4296"/><text x="87.8012%" y="287.50">rust_qecp..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="94.5236%" y="261" width="0.0130%" height="15" fill="rgb(209,150,17)" fg:x="58132" fg:w="8"/><text x="94.7736%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (78 samples, 0.13%)</title><rect x="94.5447%" y="261" width="0.1268%" height="15" fill="rgb(234,202,34)" fg:x="58145" fg:w="78"/><text x="94.7947%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (344 samples, 0.56%)</title><rect x="94.5366%" y="277" width="0.5593%" height="15" fill="rgb(253,148,53)" fg:x="58140" fg:w="344"/><text x="94.7866%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (261 samples, 0.42%)</title><rect x="94.6715%" y="261" width="0.4244%" height="15" fill="rgb(218,129,16)" fg:x="58223" fg:w="261"/><text x="94.9215%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (71 samples, 0.12%)</title><rect x="95.0959%" y="277" width="0.1154%" height="15" fill="rgb(216,85,19)" fg:x="58484" fg:w="71"/><text x="95.3459%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (2,943 samples, 4.79%)</title><rect x="95.2130%" y="277" width="4.7854%" height="15" fill="rgb(235,228,7)" fg:x="58556" fg:w="2943"/><text x="95.4630%" y="287.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,401 samples, 3.90%)</title><rect x="96.0943%" y="261" width="3.9041%" height="15" fill="rgb(245,175,0)" fg:x="59098" fg:w="2401"/><text x="96.3443%" y="271.50">rust..</text></g><g><title>all (61,500 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="61500"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,970 samples, 97.51%)</title><rect x="2.4878%" y="357" width="97.5122%" height="15" fill="rgb(246,171,24)" fg:x="1530" fg:w="59970"/><text x="2.7378%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,970 samples, 97.51%)</title><rect x="2.4878%" y="341" width="97.5122%" height="15" fill="rgb(215,142,24)" fg:x="1530" fg:w="59970"/><text x="2.7378%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,970 samples, 97.51%)</title><rect x="2.4878%" y="325" width="97.5122%" height="15" fill="rgb(250,187,7)" fg:x="1530" fg:w="59970"/><text x="2.7378%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,970 samples, 97.51%)</title><rect x="2.4878%" y="309" width="97.5122%" height="15" fill="rgb(228,66,33)" fg:x="1530" fg:w="59970"/><text x="2.7378%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,969 samples, 97.51%)</title><rect x="2.4894%" y="293" width="97.5106%" height="15" fill="rgb(234,215,21)" fg:x="1531" fg:w="59969"/><text x="2.7394%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>