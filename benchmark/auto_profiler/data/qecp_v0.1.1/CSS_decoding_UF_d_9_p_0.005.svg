<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="60952"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0115%" y="133" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="11"/><text x="0.2615%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="0.0361%" y="53" width="0.0148%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="9"/><text x="0.2861%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="0.0361%" y="37" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="9"/><text x="0.2861%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (19 samples, 0.03%)</title><rect x="0.0345%" y="133" width="0.0312%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="19"/><text x="0.2845%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (19 samples, 0.03%)</title><rect x="0.0345%" y="117" width="0.0312%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="19"/><text x="0.2845%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0345%" y="101" width="0.0312%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="19"/><text x="0.2845%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0345%" y="85" width="0.0312%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="19"/><text x="0.2845%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (18 samples, 0.03%)</title><rect x="0.0361%" y="69" width="0.0295%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="18"/><text x="0.2861%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="0.0509%" y="53" width="0.0148%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="9"/><text x="0.3009%" y="63.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (62 samples, 0.10%)</title><rect x="0.0755%" y="133" width="0.1017%" height="15" fill="rgb(220,122,19)" fg:x="46" fg:w="62"/><text x="0.3255%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (36 samples, 0.06%)</title><rect x="0.1772%" y="133" width="0.0591%" height="15" fill="rgb(250,228,42)" fg:x="108" fg:w="36"/><text x="0.4272%" y="143.50"></text></g><g><title>rust_qecp`alloc::fmt::format (9 samples, 0.01%)</title><rect x="0.2510%" y="117" width="0.0148%" height="15" fill="rgb(240,193,28)" fg:x="153" fg:w="9"/><text x="0.5010%" y="127.50"></text></g><g><title>rust_qecp`core::fmt::write (7 samples, 0.01%)</title><rect x="0.2543%" y="101" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="155" fg:w="7"/><text x="0.5043%" y="111.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (23 samples, 0.04%)</title><rect x="0.2379%" y="133" width="0.0377%" height="15" fill="rgb(206,188,39)" fg:x="145" fg:w="23"/><text x="0.4879%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="0.9220%" y="117" width="0.0131%" height="15" fill="rgb(217,207,13)" fg:x="562" fg:w="8"/><text x="1.1720%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="0.9352%" y="117" width="0.0164%" height="15" fill="rgb(231,73,38)" fg:x="570" fg:w="10"/><text x="1.1852%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (51 samples, 0.08%)</title><rect x="0.9614%" y="117" width="0.0837%" height="15" fill="rgb(225,20,46)" fg:x="586" fg:w="51"/><text x="1.2114%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="1.1025%" y="101" width="0.0148%" height="15" fill="rgb(210,31,41)" fg:x="672" fg:w="9"/><text x="1.3525%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (71 samples, 0.12%)</title><rect x="1.0467%" y="117" width="0.1165%" height="15" fill="rgb(221,200,47)" fg:x="638" fg:w="71"/><text x="1.2967%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (28 samples, 0.05%)</title><rect x="1.1173%" y="101" width="0.0459%" height="15" fill="rgb(226,26,5)" fg:x="681" fg:w="28"/><text x="1.3673%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="1.1353%" y="85" width="0.0279%" height="15" fill="rgb(249,33,26)" fg:x="692" fg:w="17"/><text x="1.3853%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (20 samples, 0.03%)</title><rect x="1.4454%" y="101" width="0.0328%" height="15" fill="rgb(235,183,28)" fg:x="881" fg:w="20"/><text x="1.6954%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (51 samples, 0.08%)</title><rect x="1.4815%" y="101" width="0.0837%" height="15" fill="rgb(221,5,38)" fg:x="903" fg:w="51"/><text x="1.7315%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (797 samples, 1.31%)</title><rect x="0.2756%" y="133" width="1.3076%" height="15" fill="rgb(247,18,42)" fg:x="168" fg:w="797"/><text x="0.5256%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (252 samples, 0.41%)</title><rect x="1.1698%" y="117" width="0.4134%" height="15" fill="rgb(241,131,45)" fg:x="713" fg:w="252"/><text x="1.4198%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="1.5652%" y="101" width="0.0180%" height="15" fill="rgb(249,31,29)" fg:x="954" fg:w="11"/><text x="1.8152%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.05%)</title><rect x="1.5980%" y="117" width="0.0525%" height="15" fill="rgb(225,111,53)" fg:x="974" fg:w="32"/><text x="1.8480%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="1.7456%" y="101" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="1064" fg:w="9"/><text x="1.9956%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (133 samples, 0.22%)</title><rect x="1.6538%" y="117" width="0.2182%" height="15" fill="rgb(214,148,48)" fg:x="1008" fg:w="133"/><text x="1.9038%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (59 samples, 0.10%)</title><rect x="1.7752%" y="101" width="0.0968%" height="15" fill="rgb(232,36,49)" fg:x="1082" fg:w="59"/><text x="2.0252%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (178 samples, 0.29%)</title><rect x="1.5832%" y="133" width="0.2920%" height="15" fill="rgb(209,103,24)" fg:x="965" fg:w="178"/><text x="1.8332%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.8818%" y="133" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="1147" fg:w="7"/><text x="2.1318%" y="143.50"></text></g><g><title>dyld`start (1,158 samples, 1.90%)</title><rect x="0.0000%" y="357" width="1.8999%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1158"/><text x="0.2500%" y="367.50">d..</text></g><g><title>rust_qecp`main (1,153 samples, 1.89%)</title><rect x="0.0082%" y="341" width="1.8917%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,153 samples, 1.89%)</title><rect x="0.0082%" y="325" width="1.8917%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,153 samples, 1.89%)</title><rect x="0.0082%" y="309" width="1.8917%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="319.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,153 samples, 1.89%)</title><rect x="0.0082%" y="293" width="1.8917%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,153 samples, 1.89%)</title><rect x="0.0082%" y="277" width="1.8917%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (1,153 samples, 1.89%)</title><rect x="0.0082%" y="261" width="1.8917%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,153 samples, 1.89%)</title><rect x="0.0082%" y="245" width="1.8917%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,153 samples, 1.89%)</title><rect x="0.0082%" y="229" width="1.8917%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,153 samples, 1.89%)</title><rect x="0.0082%" y="213" width="1.8917%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,153 samples, 1.89%)</title><rect x="0.0082%" y="197" width="1.8917%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,153 samples, 1.89%)</title><rect x="0.0082%" y="181" width="1.8917%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,153 samples, 1.89%)</title><rect x="0.0082%" y="165" width="1.8917%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,153 samples, 1.89%)</title><rect x="0.0082%" y="149" width="1.8917%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1153"/><text x="0.2582%" y="159.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="1.9327%" y="277" width="0.0328%" height="15" fill="rgb(218,138,4)" fg:x="1178" fg:w="20"/><text x="2.1827%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="2.0377%" y="261" width="0.0246%" height="15" fill="rgb(250,191,14)" fg:x="1242" fg:w="15"/><text x="2.2877%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="2.0410%" y="245" width="0.0213%" height="15" fill="rgb(239,60,40)" fg:x="1244" fg:w="13"/><text x="2.2910%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="2.0426%" y="229" width="0.0197%" height="15" fill="rgb(206,27,48)" fg:x="1245" fg:w="12"/><text x="2.2926%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="2.0459%" y="213" width="0.0164%" height="15" fill="rgb(225,35,8)" fg:x="1247" fg:w="10"/><text x="2.2959%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="2.0902%" y="245" width="0.0246%" height="15" fill="rgb(250,213,24)" fg:x="1274" fg:w="15"/><text x="2.3402%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.05%)</title><rect x="2.0656%" y="261" width="0.0509%" height="15" fill="rgb(247,123,22)" fg:x="1259" fg:w="31"/><text x="2.3156%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="2.1246%" y="261" width="0.0197%" height="15" fill="rgb(231,138,38)" fg:x="1295" fg:w="12"/><text x="2.3746%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (75 samples, 0.12%)</title><rect x="2.1476%" y="261" width="0.1230%" height="15" fill="rgb(231,145,46)" fg:x="1309" fg:w="75"/><text x="2.3976%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 0.58%)</title><rect x="2.2706%" y="261" width="0.5824%" height="15" fill="rgb(251,118,11)" fg:x="1384" fg:w="355"/><text x="2.5206%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (19 samples, 0.03%)</title><rect x="2.8531%" y="261" width="0.0312%" height="15" fill="rgb(217,147,25)" fg:x="1739" fg:w="19"/><text x="3.1031%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="2.9072%" y="213" width="0.0131%" height="15" fill="rgb(247,81,37)" fg:x="1772" fg:w="8"/><text x="3.1572%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.01%)</title><rect x="2.9072%" y="229" width="0.0148%" height="15" fill="rgb(209,12,38)" fg:x="1772" fg:w="9"/><text x="3.1572%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.02%)</title><rect x="2.9039%" y="261" width="0.0197%" height="15" fill="rgb(227,1,9)" fg:x="1770" fg:w="12"/><text x="3.1539%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="2.9056%" y="245" width="0.0180%" height="15" fill="rgb(248,47,43)" fg:x="1771" fg:w="11"/><text x="3.1556%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (528 samples, 0.87%)</title><rect x="2.9302%" y="261" width="0.8663%" height="15" fill="rgb(221,10,30)" fg:x="1786" fg:w="528"/><text x="3.1802%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (85 samples, 0.14%)</title><rect x="3.7964%" y="261" width="0.1395%" height="15" fill="rgb(210,229,1)" fg:x="2314" fg:w="85"/><text x="4.0464%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (39 samples, 0.06%)</title><rect x="3.9359%" y="261" width="0.0640%" height="15" fill="rgb(222,148,37)" fg:x="2399" fg:w="39"/><text x="4.1859%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.08%)</title><rect x="5.2008%" y="245" width="0.0788%" height="15" fill="rgb(234,67,33)" fg:x="3170" fg:w="48"/><text x="5.4508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (42 samples, 0.07%)</title><rect x="5.2107%" y="229" width="0.0689%" height="15" fill="rgb(247,98,35)" fg:x="3176" fg:w="42"/><text x="5.4607%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (40 samples, 0.07%)</title><rect x="5.2139%" y="213" width="0.0656%" height="15" fill="rgb(247,138,52)" fg:x="3178" fg:w="40"/><text x="5.4639%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="5.2238%" y="197" width="0.0558%" height="15" fill="rgb(213,79,30)" fg:x="3184" fg:w="34"/><text x="5.4738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="5.3419%" y="165" width="0.0148%" height="15" fill="rgb(246,177,23)" fg:x="3256" fg:w="9"/><text x="5.5919%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.04%)</title><rect x="5.3271%" y="197" width="0.0394%" height="15" fill="rgb(230,62,27)" fg:x="3247" fg:w="24"/><text x="5.5771%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.03%)</title><rect x="5.3386%" y="181" width="0.0279%" height="15" fill="rgb(216,154,8)" fg:x="3254" fg:w="17"/><text x="5.5886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (39 samples, 0.06%)</title><rect x="5.3222%" y="213" width="0.0640%" height="15" fill="rgb(244,35,45)" fg:x="3244" fg:w="39"/><text x="5.5722%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="5.3665%" y="197" width="0.0197%" height="15" fill="rgb(251,115,12)" fg:x="3271" fg:w="12"/><text x="5.6165%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.09%)</title><rect x="5.3009%" y="245" width="0.0919%" height="15" fill="rgb(240,54,50)" fg:x="3231" fg:w="56"/><text x="5.5509%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (48 samples, 0.08%)</title><rect x="5.3140%" y="229" width="0.0788%" height="15" fill="rgb(233,84,52)" fg:x="3239" fg:w="48"/><text x="5.5640%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (848 samples, 1.39%)</title><rect x="4.0097%" y="261" width="1.3913%" height="15" fill="rgb(207,117,47)" fg:x="2444" fg:w="848"/><text x="4.2597%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (100 samples, 0.16%)</title><rect x="12.5984%" y="245" width="0.1641%" height="15" fill="rgb(249,43,39)" fg:x="7679" fg:w="100"/><text x="12.8484%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (92 samples, 0.15%)</title><rect x="12.7625%" y="245" width="0.1509%" height="15" fill="rgb(209,38,44)" fg:x="7779" fg:w="92"/><text x="13.0125%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="12.9134%" y="245" width="0.0131%" height="15" fill="rgb(236,212,23)" fg:x="7871" fg:w="8"/><text x="13.1634%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (67 samples, 0.11%)</title><rect x="12.9266%" y="245" width="0.1099%" height="15" fill="rgb(242,79,21)" fg:x="7879" fg:w="67"/><text x="13.1766%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (92 samples, 0.15%)</title><rect x="13.0365%" y="245" width="0.1509%" height="15" fill="rgb(211,96,35)" fg:x="7946" fg:w="92"/><text x="13.2865%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (373 samples, 0.61%)</title><rect x="13.1956%" y="229" width="0.6120%" height="15" fill="rgb(253,215,40)" fg:x="8043" fg:w="373"/><text x="13.4456%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (379 samples, 0.62%)</title><rect x="13.1874%" y="245" width="0.6218%" height="15" fill="rgb(211,81,21)" fg:x="8038" fg:w="379"/><text x="13.4374%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="13.8191%" y="245" width="0.0131%" height="15" fill="rgb(208,190,38)" fg:x="8423" fg:w="8"/><text x="14.0691%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (75 samples, 0.12%)</title><rect x="13.8322%" y="245" width="0.1230%" height="15" fill="rgb(235,213,38)" fg:x="8431" fg:w="75"/><text x="14.0822%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.06%)</title><rect x="13.9552%" y="245" width="0.0623%" height="15" fill="rgb(237,122,38)" fg:x="8506" fg:w="38"/><text x="14.2052%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (15 samples, 0.02%)</title><rect x="14.0209%" y="245" width="0.0246%" height="15" fill="rgb(244,218,35)" fg:x="8546" fg:w="15"/><text x="14.2709%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="14.0455%" y="245" width="0.0115%" height="15" fill="rgb(240,68,47)" fg:x="8561" fg:w="7"/><text x="14.2955%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (270 samples, 0.44%)</title><rect x="14.0586%" y="245" width="0.4430%" height="15" fill="rgb(210,16,53)" fg:x="8569" fg:w="270"/><text x="14.3086%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.10%)</title><rect x="14.5016%" y="245" width="0.1017%" height="15" fill="rgb(235,124,12)" fg:x="8839" fg:w="62"/><text x="14.7516%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (74 samples, 0.12%)</title><rect x="14.6033%" y="245" width="0.1214%" height="15" fill="rgb(224,169,11)" fg:x="8901" fg:w="74"/><text x="14.8533%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,038 samples, 3.34%)</title><rect x="14.7247%" y="245" width="3.3436%" height="15" fill="rgb(250,166,2)" fg:x="8975" fg:w="2038"/><text x="14.9747%" y="255.50">rus..</text></g><g><title>rust_qecp`DYLD-STUB$$free (45 samples, 0.07%)</title><rect x="18.0683%" y="245" width="0.0738%" height="15" fill="rgb(242,216,29)" fg:x="11013" fg:w="45"/><text x="18.3183%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="18.1421%" y="245" width="0.0361%" height="15" fill="rgb(230,116,27)" fg:x="11058" fg:w="22"/><text x="18.3921%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (22 samples, 0.04%)</title><rect x="18.1815%" y="245" width="0.0361%" height="15" fill="rgb(228,99,48)" fg:x="11082" fg:w="22"/><text x="18.4315%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="18.4801%" y="197" width="0.0180%" height="15" fill="rgb(253,11,6)" fg:x="11264" fg:w="11"/><text x="18.7301%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="18.4867%" y="181" width="0.0115%" height="15" fill="rgb(247,143,39)" fg:x="11268" fg:w="7"/><text x="18.7367%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="18.4752%" y="213" width="0.0263%" height="15" fill="rgb(236,97,10)" fg:x="11261" fg:w="16"/><text x="18.7252%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="18.5343%" y="181" width="0.0230%" height="15" fill="rgb(233,208,19)" fg:x="11297" fg:w="14"/><text x="18.7843%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="18.5638%" y="165" width="0.0148%" height="15" fill="rgb(216,164,2)" fg:x="11315" fg:w="9"/><text x="18.8138%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.02%)</title><rect x="18.6179%" y="149" width="0.0246%" height="15" fill="rgb(220,129,5)" fg:x="11348" fg:w="15"/><text x="18.8679%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="18.6212%" y="133" width="0.0213%" height="15" fill="rgb(242,17,10)" fg:x="11350" fg:w="13"/><text x="18.8712%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="18.6097%" y="165" width="0.0377%" height="15" fill="rgb(242,107,0)" fg:x="11343" fg:w="23"/><text x="18.8597%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (60 samples, 0.10%)</title><rect x="18.5589%" y="181" width="0.0984%" height="15" fill="rgb(251,28,31)" fg:x="11312" fg:w="60"/><text x="18.8089%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (155 samples, 0.25%)</title><rect x="18.5228%" y="197" width="0.2543%" height="15" fill="rgb(233,223,10)" fg:x="11290" fg:w="155"/><text x="18.7728%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.12%)</title><rect x="18.6589%" y="181" width="0.1181%" height="15" fill="rgb(215,21,27)" fg:x="11373" fg:w="72"/><text x="18.9089%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (7 samples, 0.01%)</title><rect x="18.7886%" y="197" width="0.0115%" height="15" fill="rgb(232,23,21)" fg:x="11452" fg:w="7"/><text x="19.0386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (186 samples, 0.31%)</title><rect x="18.5113%" y="213" width="0.3052%" height="15" fill="rgb(244,5,23)" fg:x="11283" fg:w="186"/><text x="18.7613%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="18.8017%" y="197" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="11460" fg:w="9"/><text x="19.0517%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="18.8050%" y="181" width="0.0115%" height="15" fill="rgb(247,70,30)" fg:x="11462" fg:w="7"/><text x="19.0550%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (359 samples, 0.59%)</title><rect x="18.2291%" y="245" width="0.5890%" height="15" fill="rgb(212,68,19)" fg:x="11111" fg:w="359"/><text x="18.4791%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (211 samples, 0.35%)</title><rect x="18.4719%" y="229" width="0.3462%" height="15" fill="rgb(240,187,13)" fg:x="11259" fg:w="211"/><text x="18.7219%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="18.9313%" y="229" width="0.0180%" height="15" fill="rgb(223,113,26)" fg:x="11539" fg:w="11"/><text x="19.1813%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (104 samples, 0.17%)</title><rect x="19.3890%" y="213" width="0.1706%" height="15" fill="rgb(206,192,2)" fg:x="11818" fg:w="104"/><text x="19.6390%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="19.5597%" y="213" width="0.0180%" height="15" fill="rgb(241,108,4)" fg:x="11922" fg:w="11"/><text x="19.8097%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (43 samples, 0.07%)</title><rect x="19.5777%" y="213" width="0.0705%" height="15" fill="rgb(247,173,49)" fg:x="11933" fg:w="43"/><text x="19.8277%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (126 samples, 0.21%)</title><rect x="19.6482%" y="213" width="0.2067%" height="15" fill="rgb(224,114,35)" fg:x="11976" fg:w="126"/><text x="19.8982%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (83 samples, 0.14%)</title><rect x="19.7188%" y="197" width="0.1362%" height="15" fill="rgb(245,159,27)" fg:x="12019" fg:w="83"/><text x="19.9688%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (554 samples, 0.91%)</title><rect x="18.9493%" y="229" width="0.9089%" height="15" fill="rgb(245,172,44)" fg:x="11550" fg:w="554"/><text x="19.1993%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="19.8615%" y="213" width="0.0279%" height="15" fill="rgb(236,23,11)" fg:x="12106" fg:w="17"/><text x="20.1115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (21 samples, 0.03%)</title><rect x="19.8582%" y="229" width="0.0345%" height="15" fill="rgb(205,117,38)" fg:x="12104" fg:w="21"/><text x="20.1082%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (104 samples, 0.17%)</title><rect x="20.1240%" y="213" width="0.1706%" height="15" fill="rgb(237,72,25)" fg:x="12266" fg:w="104"/><text x="20.3740%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (22 samples, 0.04%)</title><rect x="20.2947%" y="213" width="0.0361%" height="15" fill="rgb(244,70,9)" fg:x="12370" fg:w="22"/><text x="20.5447%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (22 samples, 0.04%)</title><rect x="20.3308%" y="213" width="0.0361%" height="15" fill="rgb(217,125,39)" fg:x="12392" fg:w="22"/><text x="20.5808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (531 samples, 0.87%)</title><rect x="19.8927%" y="229" width="0.8712%" height="15" fill="rgb(235,36,10)" fg:x="12125" fg:w="531"/><text x="20.1427%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (242 samples, 0.40%)</title><rect x="20.3668%" y="213" width="0.3970%" height="15" fill="rgb(251,123,47)" fg:x="12414" fg:w="242"/><text x="20.6168%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (88 samples, 0.14%)</title><rect x="21.0953%" y="197" width="0.1444%" height="15" fill="rgb(221,13,13)" fg:x="12858" fg:w="88"/><text x="21.3453%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (398 samples, 0.65%)</title><rect x="20.7639%" y="229" width="0.6530%" height="15" fill="rgb(238,131,9)" fg:x="12656" fg:w="398"/><text x="21.0139%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (314 samples, 0.52%)</title><rect x="20.9017%" y="213" width="0.5152%" height="15" fill="rgb(211,50,8)" fg:x="12740" fg:w="314"/><text x="21.1517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (108 samples, 0.18%)</title><rect x="21.2397%" y="197" width="0.1772%" height="15" fill="rgb(245,182,24)" fg:x="12946" fg:w="108"/><text x="21.4897%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (38 samples, 0.06%)</title><rect x="21.4169%" y="229" width="0.0623%" height="15" fill="rgb(242,14,37)" fg:x="13054" fg:w="38"/><text x="21.6669%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (115 samples, 0.19%)</title><rect x="21.6187%" y="197" width="0.1887%" height="15" fill="rgb(246,228,12)" fg:x="13177" fg:w="115"/><text x="21.8687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (201 samples, 0.33%)</title><rect x="21.4792%" y="229" width="0.3298%" height="15" fill="rgb(213,55,15)" fg:x="13092" fg:w="201"/><text x="21.7292%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (116 samples, 0.19%)</title><rect x="21.6187%" y="213" width="0.1903%" height="15" fill="rgb(209,9,3)" fg:x="13177" fg:w="116"/><text x="21.8687%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (43 samples, 0.07%)</title><rect x="21.8090%" y="229" width="0.0705%" height="15" fill="rgb(230,59,30)" fg:x="13293" fg:w="43"/><text x="22.0590%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="21.8861%" y="229" width="0.0148%" height="15" fill="rgb(209,121,21)" fg:x="13340" fg:w="9"/><text x="22.1361%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (53 samples, 0.09%)</title><rect x="21.9008%" y="229" width="0.0870%" height="15" fill="rgb(220,109,13)" fg:x="13349" fg:w="53"/><text x="22.1508%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="21.9878%" y="229" width="0.0377%" height="15" fill="rgb(232,18,1)" fg:x="13402" fg:w="23"/><text x="22.2378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="22.0255%" y="229" width="0.0361%" height="15" fill="rgb(215,41,42)" fg:x="13425" fg:w="22"/><text x="22.2755%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (53 samples, 0.09%)</title><rect x="22.2306%" y="197" width="0.0870%" height="15" fill="rgb(224,123,36)" fg:x="13550" fg:w="53"/><text x="22.4806%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (132 samples, 0.22%)</title><rect x="22.1026%" y="213" width="0.2166%" height="15" fill="rgb(240,125,3)" fg:x="13472" fg:w="132"/><text x="22.3526%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="22.3208%" y="213" width="0.0197%" height="15" fill="rgb(205,98,50)" fg:x="13605" fg:w="12"/><text x="22.5708%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (97 samples, 0.16%)</title><rect x="22.3405%" y="213" width="0.1591%" height="15" fill="rgb(205,185,37)" fg:x="13617" fg:w="97"/><text x="22.5905%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (16 samples, 0.03%)</title><rect x="22.4734%" y="197" width="0.0263%" height="15" fill="rgb(238,207,15)" fg:x="13698" fg:w="16"/><text x="22.7234%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.03%)</title><rect x="22.4734%" y="181" width="0.0263%" height="15" fill="rgb(213,199,42)" fg:x="13698" fg:w="16"/><text x="22.7234%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,248 samples, 3.69%)</title><rect x="18.8263%" y="245" width="3.6881%" height="15" fill="rgb(235,201,11)" fg:x="11475" fg:w="2248"/><text x="19.0763%" y="255.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (268 samples, 0.44%)</title><rect x="22.0747%" y="229" width="0.4397%" height="15" fill="rgb(207,46,11)" fg:x="13455" fg:w="268"/><text x="22.3247%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="22.4997%" y="213" width="0.0148%" height="15" fill="rgb(241,35,35)" fg:x="13714" fg:w="9"/><text x="22.7497%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (236 samples, 0.39%)</title><rect x="22.5144%" y="245" width="0.3872%" height="15" fill="rgb(243,32,47)" fg:x="13723" fg:w="236"/><text x="22.7644%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (199 samples, 0.33%)</title><rect x="22.5751%" y="229" width="0.3265%" height="15" fill="rgb(247,202,23)" fg:x="13760" fg:w="199"/><text x="22.8251%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (128 samples, 0.21%)</title><rect x="22.6916%" y="213" width="0.2100%" height="15" fill="rgb(219,102,11)" fg:x="13831" fg:w="128"/><text x="22.9416%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (62 samples, 0.10%)</title><rect x="22.7999%" y="197" width="0.1017%" height="15" fill="rgb(243,110,44)" fg:x="13897" fg:w="62"/><text x="23.0499%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (13 samples, 0.02%)</title><rect x="22.8803%" y="181" width="0.0213%" height="15" fill="rgb(222,74,54)" fg:x="13946" fg:w="13"/><text x="23.1303%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (129 samples, 0.21%)</title><rect x="22.9033%" y="245" width="0.2116%" height="15" fill="rgb(216,99,12)" fg:x="13960" fg:w="129"/><text x="23.1533%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,890 samples, 4.74%)</title><rect x="23.1149%" y="245" width="4.7414%" height="15" fill="rgb(226,22,26)" fg:x="14089" fg:w="2890"/><text x="23.3649%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (180 samples, 0.30%)</title><rect x="27.8563%" y="245" width="0.2953%" height="15" fill="rgb(217,163,10)" fg:x="16979" fg:w="180"/><text x="28.1063%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="28.3535%" y="229" width="0.0148%" height="15" fill="rgb(213,25,53)" fg:x="17282" fg:w="9"/><text x="28.6035%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="28.3567%" y="213" width="0.0115%" height="15" fill="rgb(252,105,26)" fg:x="17284" fg:w="7"/><text x="28.6067%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="28.3567%" y="197" width="0.0115%" height="15" fill="rgb(220,39,43)" fg:x="17284" fg:w="7"/><text x="28.6067%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (103 samples, 0.17%)</title><rect x="28.3978%" y="229" width="0.1690%" height="15" fill="rgb(229,68,48)" fg:x="17309" fg:w="103"/><text x="28.6478%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="28.8686%" y="181" width="0.0164%" height="15" fill="rgb(252,8,32)" fg:x="17596" fg:w="10"/><text x="29.1186%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="28.8703%" y="165" width="0.0148%" height="15" fill="rgb(223,20,43)" fg:x="17597" fg:w="9"/><text x="29.1203%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="28.8555%" y="213" width="0.0377%" height="15" fill="rgb(229,81,49)" fg:x="17588" fg:w="23"/><text x="29.1055%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="28.8637%" y="197" width="0.0295%" height="15" fill="rgb(236,28,36)" fg:x="17593" fg:w="18"/><text x="29.1137%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (49 samples, 0.08%)</title><rect x="28.8949%" y="213" width="0.0804%" height="15" fill="rgb(249,185,26)" fg:x="17612" fg:w="49"/><text x="29.1449%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (212 samples, 0.35%)</title><rect x="28.9753%" y="213" width="0.3478%" height="15" fill="rgb(249,174,33)" fg:x="17661" fg:w="212"/><text x="29.2253%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (997 samples, 1.64%)</title><rect x="28.1517%" y="245" width="1.6357%" height="15" fill="rgb(233,201,37)" fg:x="17159" fg:w="997"/><text x="28.4017%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (744 samples, 1.22%)</title><rect x="28.5667%" y="229" width="1.2206%" height="15" fill="rgb(221,78,26)" fg:x="17412" fg:w="744"/><text x="28.8167%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (283 samples, 0.46%)</title><rect x="29.3231%" y="213" width="0.4643%" height="15" fill="rgb(250,127,30)" fg:x="17873" fg:w="283"/><text x="29.5731%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (67 samples, 0.11%)</title><rect x="29.7874%" y="245" width="0.1099%" height="15" fill="rgb(230,49,44)" fg:x="18156" fg:w="67"/><text x="30.0374%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (28 samples, 0.05%)</title><rect x="29.9022%" y="245" width="0.0459%" height="15" fill="rgb(229,67,23)" fg:x="18226" fg:w="28"/><text x="30.1522%" y="255.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (181 samples, 0.30%)</title><rect x="29.9482%" y="245" width="0.2970%" height="15" fill="rgb(249,83,47)" fg:x="18254" fg:w="181"/><text x="30.1982%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,884 samples, 6.37%)</title><rect x="34.5994%" y="229" width="6.3722%" height="15" fill="rgb(215,43,3)" fg:x="21089" fg:w="3884"/><text x="34.8494%" y="239.50">rust_qec..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.02%)</title><rect x="40.9847%" y="165" width="0.0230%" height="15" fill="rgb(238,154,13)" fg:x="24981" fg:w="14"/><text x="41.2347%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (38 samples, 0.06%)</title><rect x="40.9781%" y="181" width="0.0623%" height="15" fill="rgb(219,56,2)" fg:x="24977" fg:w="38"/><text x="41.2281%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="41.0077%" y="165" width="0.0328%" height="15" fill="rgb(233,0,4)" fg:x="24995" fg:w="20"/><text x="41.2577%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (44 samples, 0.07%)</title><rect x="40.9716%" y="229" width="0.0722%" height="15" fill="rgb(235,30,7)" fg:x="24973" fg:w="44"/><text x="41.2216%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (41 samples, 0.07%)</title><rect x="40.9765%" y="213" width="0.0673%" height="15" fill="rgb(250,79,13)" fg:x="24976" fg:w="41"/><text x="41.2265%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (40 samples, 0.07%)</title><rect x="40.9781%" y="197" width="0.0656%" height="15" fill="rgb(211,146,34)" fg:x="24977" fg:w="40"/><text x="41.2281%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,514 samples, 4.12%)</title><rect x="41.0438%" y="229" width="4.1246%" height="15" fill="rgb(228,22,38)" fg:x="25017" fg:w="2514"/><text x="41.2938%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (569 samples, 0.93%)</title><rect x="45.1683%" y="229" width="0.9335%" height="15" fill="rgb(235,168,5)" fg:x="27531" fg:w="569"/><text x="45.4183%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="46.1757%" y="197" width="0.0213%" height="15" fill="rgb(221,155,16)" fg:x="28145" fg:w="13"/><text x="46.4257%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.03%)</title><rect x="46.1724%" y="213" width="0.0263%" height="15" fill="rgb(215,215,53)" fg:x="28143" fg:w="16"/><text x="46.4224%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (90 samples, 0.15%)</title><rect x="46.2052%" y="213" width="0.1477%" height="15" fill="rgb(223,4,10)" fg:x="28163" fg:w="90"/><text x="46.4552%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="46.4776%" y="197" width="0.0213%" height="15" fill="rgb(234,103,6)" fg:x="28329" fg:w="13"/><text x="46.7276%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="46.4776%" y="181" width="0.0213%" height="15" fill="rgb(227,97,0)" fg:x="28329" fg:w="13"/><text x="46.7276%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (214 samples, 0.35%)</title><rect x="46.4989%" y="197" width="0.3511%" height="15" fill="rgb(234,150,53)" fg:x="28342" fg:w="214"/><text x="46.7489%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (614 samples, 1.01%)</title><rect x="46.1019%" y="229" width="1.0074%" height="15" fill="rgb(228,201,54)" fg:x="28100" fg:w="614"/><text x="46.3519%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (461 samples, 0.76%)</title><rect x="46.3529%" y="213" width="0.7563%" height="15" fill="rgb(222,22,37)" fg:x="28253" fg:w="461"/><text x="46.6029%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (158 samples, 0.26%)</title><rect x="46.8500%" y="197" width="0.2592%" height="15" fill="rgb(237,53,32)" fg:x="28556" fg:w="158"/><text x="47.1000%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="51.7292%" y="149" width="0.0115%" height="15" fill="rgb(233,25,53)" fg:x="31530" fg:w="7"/><text x="51.9792%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="51.7276%" y="165" width="0.0263%" height="15" fill="rgb(210,40,34)" fg:x="31529" fg:w="16"/><text x="51.9776%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="51.7407%" y="149" width="0.0131%" height="15" fill="rgb(241,220,44)" fg:x="31537" fg:w="8"/><text x="51.9907%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="51.7276%" y="181" width="0.0295%" height="15" fill="rgb(235,28,35)" fg:x="31529" fg:w="18"/><text x="51.9776%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,113 samples, 21.51%)</title><rect x="30.2451%" y="245" width="21.5137%" height="15" fill="rgb(210,56,17)" fg:x="18435" fg:w="13113"/><text x="30.4951%" y="255.50">rust_qecp`rust_qecp::ftqec::Planar..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,834 samples, 4.65%)</title><rect x="47.1092%" y="229" width="4.6496%" height="15" fill="rgb(224,130,29)" fg:x="28714" fg:w="2834"/><text x="47.3592%" y="239.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (21 samples, 0.03%)</title><rect x="51.7243%" y="213" width="0.0345%" height="15" fill="rgb(235,212,8)" fg:x="31527" fg:w="21"/><text x="51.9743%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="51.7243%" y="197" width="0.0345%" height="15" fill="rgb(223,33,50)" fg:x="31527" fg:w="21"/><text x="51.9743%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (9 samples, 0.01%)</title><rect x="51.7588%" y="245" width="0.0148%" height="15" fill="rgb(219,149,13)" fg:x="31548" fg:w="9"/><text x="52.0088%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="53.7324%" y="165" width="0.0180%" height="15" fill="rgb(250,156,29)" fg:x="32751" fg:w="11"/><text x="53.9824%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="53.7374%" y="149" width="0.0131%" height="15" fill="rgb(216,193,19)" fg:x="32754" fg:w="8"/><text x="53.9874%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 0.07%)</title><rect x="53.6783%" y="229" width="0.0738%" height="15" fill="rgb(216,135,14)" fg:x="32718" fg:w="45"/><text x="53.9283%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.02%)</title><rect x="53.7308%" y="213" width="0.0213%" height="15" fill="rgb(241,47,5)" fg:x="32750" fg:w="13"/><text x="53.9808%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="53.7308%" y="197" width="0.0213%" height="15" fill="rgb(233,42,35)" fg:x="32750" fg:w="13"/><text x="53.9808%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="53.7308%" y="181" width="0.0213%" height="15" fill="rgb(231,13,6)" fg:x="32750" fg:w="13"/><text x="53.9808%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="53.7685%" y="197" width="0.0131%" height="15" fill="rgb(207,181,40)" fg:x="32773" fg:w="8"/><text x="54.0185%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="53.7817%" y="197" width="0.0197%" height="15" fill="rgb(254,173,49)" fg:x="32781" fg:w="12"/><text x="54.0317%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.05%)</title><rect x="53.7554%" y="213" width="0.0525%" height="15" fill="rgb(221,1,38)" fg:x="32765" fg:w="32"/><text x="54.0054%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (38 samples, 0.06%)</title><rect x="53.7538%" y="229" width="0.0623%" height="15" fill="rgb(206,124,46)" fg:x="32764" fg:w="38"/><text x="54.0038%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (42 samples, 0.07%)</title><rect x="53.8161%" y="213" width="0.0689%" height="15" fill="rgb(249,21,11)" fg:x="32802" fg:w="42"/><text x="54.0661%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="53.8850%" y="213" width="0.0213%" height="15" fill="rgb(222,201,40)" fg:x="32844" fg:w="13"/><text x="54.1350%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="53.9064%" y="213" width="0.0279%" height="15" fill="rgb(235,61,29)" fg:x="32857" fg:w="17"/><text x="54.1564%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.05%)</title><rect x="53.9342%" y="213" width="0.0509%" height="15" fill="rgb(219,207,3)" fg:x="32874" fg:w="31"/><text x="54.1842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="53.9851%" y="213" width="0.0263%" height="15" fill="rgb(222,56,46)" fg:x="32905" fg:w="16"/><text x="54.2351%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="54.0114%" y="213" width="0.0246%" height="15" fill="rgb(239,76,54)" fg:x="32921" fg:w="15"/><text x="54.2614%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="54.2788%" y="181" width="0.0180%" height="15" fill="rgb(231,124,27)" fg:x="33084" fg:w="11"/><text x="54.5288%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (63 samples, 0.10%)</title><rect x="54.5938%" y="149" width="0.1034%" height="15" fill="rgb(249,195,6)" fg:x="33276" fg:w="63"/><text x="54.8438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (213 samples, 0.35%)</title><rect x="54.3575%" y="165" width="0.3495%" height="15" fill="rgb(237,174,47)" fg:x="33132" fg:w="213"/><text x="54.6075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (372 samples, 0.61%)</title><rect x="54.1196%" y="197" width="0.6103%" height="15" fill="rgb(206,201,31)" fg:x="32987" fg:w="372"/><text x="54.3696%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (264 samples, 0.43%)</title><rect x="54.2968%" y="181" width="0.4331%" height="15" fill="rgb(231,57,52)" fg:x="33095" fg:w="264"/><text x="54.5468%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="54.7070%" y="165" width="0.0230%" height="15" fill="rgb(248,177,22)" fg:x="33345" fg:w="14"/><text x="54.9570%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.05%)</title><rect x="54.7300%" y="197" width="0.0541%" height="15" fill="rgb(215,211,37)" fg:x="33359" fg:w="33"/><text x="54.9800%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (143 samples, 0.23%)</title><rect x="54.7841%" y="197" width="0.2346%" height="15" fill="rgb(241,128,51)" fg:x="33392" fg:w="143"/><text x="55.0341%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (60 samples, 0.10%)</title><rect x="54.9203%" y="181" width="0.0984%" height="15" fill="rgb(227,165,31)" fg:x="33475" fg:w="60"/><text x="55.1703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (27 samples, 0.04%)</title><rect x="55.0187%" y="197" width="0.0443%" height="15" fill="rgb(228,167,24)" fg:x="33535" fg:w="27"/><text x="55.2687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (41 samples, 0.07%)</title><rect x="55.0630%" y="197" width="0.0673%" height="15" fill="rgb(228,143,12)" fg:x="33562" fg:w="41"/><text x="55.3130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="55.1368%" y="197" width="0.0213%" height="15" fill="rgb(249,149,8)" fg:x="33607" fg:w="13"/><text x="55.3868%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (330 samples, 0.54%)</title><rect x="55.2172%" y="181" width="0.5414%" height="15" fill="rgb(243,35,44)" fg:x="33656" fg:w="330"/><text x="55.4672%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="55.7636%" y="181" width="0.0131%" height="15" fill="rgb(246,89,9)" fg:x="33989" fg:w="8"/><text x="56.0136%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (52 samples, 0.09%)</title><rect x="55.8423%" y="165" width="0.0853%" height="15" fill="rgb(233,213,13)" fg:x="34037" fg:w="52"/><text x="56.0923%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (88 samples, 0.14%)</title><rect x="55.9276%" y="165" width="0.1444%" height="15" fill="rgb(233,141,41)" fg:x="34089" fg:w="88"/><text x="56.1776%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (194 samples, 0.32%)</title><rect x="55.7849%" y="181" width="0.3183%" height="15" fill="rgb(239,167,4)" fg:x="34002" fg:w="194"/><text x="56.0349%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="56.0720%" y="165" width="0.0312%" height="15" fill="rgb(209,217,16)" fg:x="34177" fg:w="19"/><text x="56.3220%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="56.1032%" y="181" width="0.0295%" height="15" fill="rgb(219,88,35)" fg:x="34196" fg:w="18"/><text x="56.3532%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="56.3361%" y="149" width="0.0115%" height="15" fill="rgb(220,193,23)" fg:x="34338" fg:w="7"/><text x="56.5861%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 0.08%)</title><rect x="56.5494%" y="117" width="0.0788%" height="15" fill="rgb(230,90,52)" fg:x="34468" fg:w="48"/><text x="56.7994%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (167 samples, 0.27%)</title><rect x="56.3821%" y="133" width="0.2740%" height="15" fill="rgb(252,106,19)" fg:x="34366" fg:w="167"/><text x="56.6321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.03%)</title><rect x="56.6282%" y="117" width="0.0279%" height="15" fill="rgb(206,74,20)" fg:x="34516" fg:w="17"/><text x="56.8782%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (253 samples, 0.42%)</title><rect x="56.2541%" y="165" width="0.4151%" height="15" fill="rgb(230,138,44)" fg:x="34288" fg:w="253"/><text x="56.5041%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (196 samples, 0.32%)</title><rect x="56.3476%" y="149" width="0.3216%" height="15" fill="rgb(235,182,43)" fg:x="34345" fg:w="196"/><text x="56.5976%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="56.6561%" y="133" width="0.0131%" height="15" fill="rgb(242,16,51)" fg:x="34533" fg:w="8"/><text x="56.9061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="56.6692%" y="165" width="0.0246%" height="15" fill="rgb(248,9,4)" fg:x="34541" fg:w="15"/><text x="56.9192%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (941 samples, 1.54%)</title><rect x="55.1582%" y="197" width="1.5438%" height="15" fill="rgb(210,31,22)" fg:x="33620" fg:w="941"/><text x="55.4082%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (347 samples, 0.57%)</title><rect x="56.1327%" y="181" width="0.5693%" height="15" fill="rgb(239,54,39)" fg:x="34214" fg:w="347"/><text x="56.3827%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.07%)</title><rect x="56.8267%" y="181" width="0.0738%" height="15" fill="rgb(230,99,41)" fg:x="34637" fg:w="45"/><text x="57.0767%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (81 samples, 0.13%)</title><rect x="56.9005%" y="181" width="0.1329%" height="15" fill="rgb(253,106,12)" fg:x="34682" fg:w="81"/><text x="57.1505%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (232 samples, 0.38%)</title><rect x="56.7020%" y="197" width="0.3806%" height="15" fill="rgb(213,46,41)" fg:x="34561" fg:w="232"/><text x="56.9520%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (30 samples, 0.05%)</title><rect x="57.0334%" y="181" width="0.0492%" height="15" fill="rgb(215,133,35)" fg:x="34763" fg:w="30"/><text x="57.2834%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="57.0826%" y="197" width="0.0345%" height="15" fill="rgb(213,28,5)" fg:x="34793" fg:w="21"/><text x="57.3326%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,889 samples, 3.10%)</title><rect x="54.0392%" y="213" width="3.0992%" height="15" fill="rgb(215,77,49)" fg:x="32938" fg:w="1889"/><text x="54.2892%" y="223.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="57.1171%" y="197" width="0.0213%" height="15" fill="rgb(248,100,22)" fg:x="34814" fg:w="13"/><text x="57.3671%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (17 samples, 0.03%)</title><rect x="57.1417%" y="213" width="0.0279%" height="15" fill="rgb(208,67,9)" fg:x="34829" fg:w="17"/><text x="57.3917%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="57.1696%" y="213" width="0.0263%" height="15" fill="rgb(219,133,21)" fg:x="34846" fg:w="16"/><text x="57.4196%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (20 samples, 0.03%)</title><rect x="57.1958%" y="213" width="0.0328%" height="15" fill="rgb(246,46,29)" fg:x="34862" fg:w="20"/><text x="57.4458%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.03%)</title><rect x="57.2286%" y="213" width="0.0312%" height="15" fill="rgb(246,185,52)" fg:x="34882" fg:w="19"/><text x="57.4786%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,108 samples, 3.46%)</title><rect x="53.8161%" y="229" width="3.4585%" height="15" fill="rgb(252,136,11)" fg:x="32802" fg:w="2108"/><text x="54.0661%" y="239.50">rus..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="57.4813%" y="213" width="0.0115%" height="15" fill="rgb(219,138,53)" fg:x="35036" fg:w="7"/><text x="57.7313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="57.4928%" y="213" width="0.0476%" height="15" fill="rgb(211,51,23)" fg:x="35043" fg:w="29"/><text x="57.7428%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="57.5404%" y="213" width="0.0263%" height="15" fill="rgb(247,221,28)" fg:x="35072" fg:w="16"/><text x="57.7904%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (23 samples, 0.04%)</title><rect x="57.5666%" y="213" width="0.0377%" height="15" fill="rgb(251,222,45)" fg:x="35088" fg:w="23"/><text x="57.8166%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="57.6043%" y="213" width="0.0148%" height="15" fill="rgb(217,162,53)" fg:x="35111" fg:w="9"/><text x="57.8543%" y="223.50"></text></g><g><title>rust_qecp`__rdl_realloc (15 samples, 0.02%)</title><rect x="57.6191%" y="213" width="0.0246%" height="15" fill="rgb(229,93,14)" fg:x="35120" fg:w="15"/><text x="57.8691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (110 samples, 0.18%)</title><rect x="57.8767%" y="165" width="0.1805%" height="15" fill="rgb(209,67,49)" fg:x="35277" fg:w="110"/><text x="58.1267%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.06%)</title><rect x="57.9997%" y="149" width="0.0574%" height="15" fill="rgb(213,87,29)" fg:x="35352" fg:w="35"/><text x="58.2497%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (224 samples, 0.37%)</title><rect x="57.7011%" y="197" width="0.3675%" height="15" fill="rgb(205,151,52)" fg:x="35170" fg:w="224"/><text x="57.9511%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (146 samples, 0.24%)</title><rect x="57.8291%" y="181" width="0.2395%" height="15" fill="rgb(253,215,39)" fg:x="35248" fg:w="146"/><text x="58.0791%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="58.0572%" y="165" width="0.0115%" height="15" fill="rgb(221,220,41)" fg:x="35387" fg:w="7"/><text x="58.3072%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="58.0686%" y="197" width="0.0279%" height="15" fill="rgb(218,133,21)" fg:x="35394" fg:w="17"/><text x="58.3186%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="58.0965%" y="197" width="0.0213%" height="15" fill="rgb(221,193,43)" fg:x="35411" fg:w="13"/><text x="58.3465%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="58.1244%" y="197" width="0.0361%" height="15" fill="rgb(240,128,52)" fg:x="35428" fg:w="22"/><text x="58.3744%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (26 samples, 0.04%)</title><rect x="58.3541%" y="181" width="0.0427%" height="15" fill="rgb(253,114,12)" fg:x="35568" fg:w="26"/><text x="58.6041%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (16 samples, 0.03%)</title><rect x="58.5001%" y="165" width="0.0263%" height="15" fill="rgb(215,223,47)" fg:x="35657" fg:w="16"/><text x="58.7501%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (23 samples, 0.04%)</title><rect x="58.5264%" y="165" width="0.0377%" height="15" fill="rgb(248,225,23)" fg:x="35673" fg:w="23"/><text x="58.7764%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.05%)</title><rect x="58.5641%" y="165" width="0.0492%" height="15" fill="rgb(250,108,0)" fg:x="35696" fg:w="30"/><text x="58.8141%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (253 samples, 0.42%)</title><rect x="58.6133%" y="165" width="0.4151%" height="15" fill="rgb(228,208,7)" fg:x="35726" fg:w="253"/><text x="58.8633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (29 samples, 0.05%)</title><rect x="59.1892%" y="149" width="0.0476%" height="15" fill="rgb(244,45,10)" fg:x="36077" fg:w="29"/><text x="59.4392%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (115 samples, 0.19%)</title><rect x="59.2368%" y="149" width="0.1887%" height="15" fill="rgb(207,125,25)" fg:x="36106" fg:w="115"/><text x="59.4868%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="59.6420%" y="117" width="0.0623%" height="15" fill="rgb(210,195,18)" fg:x="36353" fg:w="38"/><text x="59.8920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (164 samples, 0.27%)</title><rect x="59.4681%" y="133" width="0.2691%" height="15" fill="rgb(249,80,12)" fg:x="36247" fg:w="164"/><text x="59.7181%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (20 samples, 0.03%)</title><rect x="59.7044%" y="117" width="0.0328%" height="15" fill="rgb(221,65,9)" fg:x="36391" fg:w="20"/><text x="59.9544%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (197 samples, 0.32%)</title><rect x="59.4254%" y="149" width="0.3232%" height="15" fill="rgb(235,49,36)" fg:x="36221" fg:w="197"/><text x="59.6754%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="59.7372%" y="133" width="0.0115%" height="15" fill="rgb(225,32,20)" fg:x="36411" fg:w="7"/><text x="59.9872%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (123 samples, 0.20%)</title><rect x="59.7487%" y="149" width="0.2018%" height="15" fill="rgb(215,141,46)" fg:x="36418" fg:w="123"/><text x="59.9987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="59.9718%" y="133" width="0.0148%" height="15" fill="rgb(250,160,47)" fg:x="36554" fg:w="9"/><text x="60.2218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (49 samples, 0.08%)</title><rect x="60.1047%" y="117" width="0.0804%" height="15" fill="rgb(216,222,40)" fg:x="36635" fg:w="49"/><text x="60.3547%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (218 samples, 0.36%)</title><rect x="59.9505%" y="149" width="0.3577%" height="15" fill="rgb(234,217,39)" fg:x="36541" fg:w="218"/><text x="60.2005%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (196 samples, 0.32%)</title><rect x="59.9865%" y="133" width="0.3216%" height="15" fill="rgb(207,178,40)" fg:x="36563" fg:w="196"/><text x="60.2365%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (75 samples, 0.12%)</title><rect x="60.1851%" y="117" width="0.1230%" height="15" fill="rgb(221,136,13)" fg:x="36684" fg:w="75"/><text x="60.4351%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (794 samples, 1.30%)</title><rect x="59.0284%" y="165" width="1.3027%" height="15" fill="rgb(249,199,10)" fg:x="35979" fg:w="794"/><text x="59.2784%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="60.3081%" y="149" width="0.0230%" height="15" fill="rgb(249,222,13)" fg:x="36759" fg:w="14"/><text x="60.5581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,250 samples, 2.05%)</title><rect x="58.3968%" y="181" width="2.0508%" height="15" fill="rgb(244,185,38)" fg:x="35594" fg:w="1250"/><text x="58.6468%" y="191.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 0.11%)</title><rect x="60.3393%" y="165" width="0.1083%" height="15" fill="rgb(236,202,9)" fg:x="36778" fg:w="66"/><text x="60.5893%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (111 samples, 0.18%)</title><rect x="60.4476%" y="181" width="0.1821%" height="15" fill="rgb(250,229,37)" fg:x="36844" fg:w="111"/><text x="60.6976%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.06%)</title><rect x="60.6297%" y="181" width="0.0574%" height="15" fill="rgb(206,174,23)" fg:x="36955" fg:w="35"/><text x="60.8797%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,554 samples, 2.55%)</title><rect x="58.1605%" y="197" width="2.5495%" height="15" fill="rgb(211,33,43)" fg:x="35450" fg:w="1554"/><text x="58.4105%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="60.6871%" y="181" width="0.0230%" height="15" fill="rgb(245,58,50)" fg:x="36990" fg:w="14"/><text x="60.9371%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,094 samples, 3.44%)</title><rect x="57.2811%" y="229" width="3.4355%" height="15" fill="rgb(244,68,36)" fg:x="34914" fg:w="2094"/><text x="57.5311%" y="239.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,873 samples, 3.07%)</title><rect x="57.6437%" y="213" width="3.0729%" height="15" fill="rgb(232,229,15)" fg:x="35135" fg:w="1873"/><text x="57.8937%" y="223.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (59 samples, 0.10%)</title><rect x="60.7166%" y="229" width="0.0968%" height="15" fill="rgb(254,30,23)" fg:x="37008" fg:w="59"/><text x="60.9666%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (123 samples, 0.20%)</title><rect x="60.8134%" y="213" width="0.2018%" height="15" fill="rgb(235,160,14)" fg:x="37067" fg:w="123"/><text x="61.0634%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="61.0218%" y="213" width="0.0131%" height="15" fill="rgb(212,155,44)" fg:x="37194" fg:w="8"/><text x="61.2718%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="61.2351%" y="197" width="0.0213%" height="15" fill="rgb(226,2,50)" fg:x="37324" fg:w="13"/><text x="61.4851%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="61.2564%" y="197" width="0.0197%" height="15" fill="rgb(234,177,6)" fg:x="37337" fg:w="12"/><text x="61.5064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="61.6764%" y="165" width="0.0328%" height="15" fill="rgb(217,24,9)" fg:x="37593" fg:w="20"/><text x="61.9264%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 0.05%)</title><rect x="61.7092%" y="165" width="0.0476%" height="15" fill="rgb(220,13,46)" fg:x="37613" fg:w="29"/><text x="61.9592%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="61.7994%" y="149" width="0.0164%" height="15" fill="rgb(239,221,27)" fg:x="37668" fg:w="10"/><text x="62.0494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (40 samples, 0.07%)</title><rect x="61.9963%" y="133" width="0.0656%" height="15" fill="rgb(222,198,25)" fg:x="37788" fg:w="40"/><text x="62.2463%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (586 samples, 0.96%)</title><rect x="62.2260%" y="117" width="0.9614%" height="15" fill="rgb(211,99,13)" fg:x="37928" fg:w="586"/><text x="62.4760%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (23 samples, 0.04%)</title><rect x="63.1874%" y="117" width="0.0377%" height="15" fill="rgb(232,111,31)" fg:x="38514" fg:w="23"/><text x="63.4374%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,209 samples, 1.98%)</title><rect x="61.3909%" y="181" width="1.9835%" height="15" fill="rgb(245,82,37)" fg:x="37419" fg:w="1209"/><text x="61.6409%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (986 samples, 1.62%)</title><rect x="61.7568%" y="165" width="1.6177%" height="15" fill="rgb(227,149,46)" fg:x="37642" fg:w="986"/><text x="62.0068%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (950 samples, 1.56%)</title><rect x="61.8159%" y="149" width="1.5586%" height="15" fill="rgb(218,36,50)" fg:x="37678" fg:w="950"/><text x="62.0659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (798 samples, 1.31%)</title><rect x="62.0652%" y="133" width="1.3092%" height="15" fill="rgb(226,80,48)" fg:x="37830" fg:w="798"/><text x="62.3152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (91 samples, 0.15%)</title><rect x="63.2252%" y="117" width="0.1493%" height="15" fill="rgb(238,224,15)" fg:x="38537" fg:w="91"/><text x="63.4752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (142 samples, 0.23%)</title><rect x="63.3745%" y="181" width="0.2330%" height="15" fill="rgb(241,136,10)" fg:x="38628" fg:w="142"/><text x="63.6245%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (339 samples, 0.56%)</title><rect x="63.6074%" y="181" width="0.5562%" height="15" fill="rgb(208,32,45)" fg:x="38770" fg:w="339"/><text x="63.8574%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,925 samples, 3.16%)</title><rect x="61.0349%" y="213" width="3.1582%" height="15" fill="rgb(207,135,9)" fg:x="37202" fg:w="1925"/><text x="61.2849%" y="223.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,769 samples, 2.90%)</title><rect x="61.2909%" y="197" width="2.9023%" height="15" fill="rgb(206,86,44)" fg:x="37358" fg:w="1769"/><text x="61.5409%" y="207.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="64.1636%" y="181" width="0.0295%" height="15" fill="rgb(245,177,15)" fg:x="39109" fg:w="18"/><text x="64.4136%" y="191.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,083 samples, 3.42%)</title><rect x="60.8134%" y="229" width="3.4174%" height="15" fill="rgb(206,64,50)" fg:x="37067" fg:w="2083"/><text x="61.0634%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.04%)</title><rect x="64.1931%" y="213" width="0.0377%" height="15" fill="rgb(234,36,40)" fg:x="39127" fg:w="23"/><text x="64.4431%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (8 samples, 0.01%)</title><rect x="64.6000%" y="213" width="0.0131%" height="15" fill="rgb(213,64,8)" fg:x="39375" fg:w="8"/><text x="64.8500%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (40 samples, 0.07%)</title><rect x="65.0971%" y="197" width="0.0656%" height="15" fill="rgb(210,75,36)" fg:x="39678" fg:w="40"/><text x="65.3471%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (25 samples, 0.04%)</title><rect x="65.7747%" y="181" width="0.0410%" height="15" fill="rgb(229,88,21)" fg:x="40091" fg:w="25"/><text x="66.0247%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (47 samples, 0.08%)</title><rect x="66.3735%" y="165" width="0.0771%" height="15" fill="rgb(252,204,47)" fg:x="40456" fg:w="47"/><text x="66.6235%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (28 samples, 0.05%)</title><rect x="66.7985%" y="149" width="0.0459%" height="15" fill="rgb(208,77,27)" fg:x="40715" fg:w="28"/><text x="67.0485%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (21 samples, 0.03%)</title><rect x="67.0347%" y="133" width="0.0345%" height="15" fill="rgb(221,76,26)" fg:x="40859" fg:w="21"/><text x="67.2847%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="67.1381%" y="117" width="0.0148%" height="15" fill="rgb(225,139,18)" fg:x="40922" fg:w="9"/><text x="67.3881%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,794 samples, 2.94%)</title><rect x="64.2309%" y="229" width="2.9433%" height="15" fill="rgb(230,137,11)" fg:x="39150" fg:w="1794"/><text x="64.4809%" y="239.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,561 samples, 2.56%)</title><rect x="64.6131%" y="213" width="2.5610%" height="15" fill="rgb(212,28,1)" fg:x="39383" fg:w="1561"/><text x="64.8631%" y="223.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,226 samples, 2.01%)</title><rect x="65.1628%" y="197" width="2.0114%" height="15" fill="rgb(248,164,17)" fg:x="39718" fg:w="1226"/><text x="65.4128%" y="207.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (828 samples, 1.36%)</title><rect x="65.8157%" y="181" width="1.3584%" height="15" fill="rgb(222,171,42)" fg:x="40116" fg:w="828"/><text x="66.0657%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (441 samples, 0.72%)</title><rect x="66.4506%" y="165" width="0.7235%" height="15" fill="rgb(243,84,45)" fg:x="40503" fg:w="441"/><text x="66.7006%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (201 samples, 0.33%)</title><rect x="66.8444%" y="149" width="0.3298%" height="15" fill="rgb(252,49,23)" fg:x="40743" fg:w="201"/><text x="67.0944%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (64 samples, 0.11%)</title><rect x="67.0692%" y="133" width="0.1050%" height="15" fill="rgb(215,19,7)" fg:x="40880" fg:w="64"/><text x="67.3192%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (13 samples, 0.02%)</title><rect x="67.1528%" y="117" width="0.0213%" height="15" fill="rgb(238,81,41)" fg:x="40931" fg:w="13"/><text x="67.4028%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (522 samples, 0.86%)</title><rect x="68.3702%" y="213" width="0.8564%" height="15" fill="rgb(210,199,37)" fg:x="41673" fg:w="522"/><text x="68.6202%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,016 samples, 1.67%)</title><rect x="69.2266%" y="213" width="1.6669%" height="15" fill="rgb(244,192,49)" fg:x="42195" fg:w="1016"/><text x="69.4766%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,184 samples, 5.22%)</title><rect x="67.1742%" y="229" width="5.2238%" height="15" fill="rgb(226,211,11)" fg:x="40944" fg:w="3184"/><text x="67.4242%" y="239.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (917 samples, 1.50%)</title><rect x="70.8935%" y="213" width="1.5045%" height="15" fill="rgb(236,162,54)" fg:x="43211" fg:w="917"/><text x="71.1435%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (50 samples, 0.08%)</title><rect x="72.3980%" y="229" width="0.0820%" height="15" fill="rgb(220,229,9)" fg:x="44128" fg:w="50"/><text x="72.6480%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (12,973 samples, 21.28%)</title><rect x="51.7817%" y="245" width="21.2840%" height="15" fill="rgb(250,87,22)" fg:x="31562" fg:w="12973"/><text x="52.0317%" y="255.50">rust_qecp`rust_qecp::union_find_de..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (357 samples, 0.59%)</title><rect x="72.4800%" y="229" width="0.5857%" height="15" fill="rgb(239,43,17)" fg:x="44178" fg:w="357"/><text x="72.7300%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (57 samples, 0.09%)</title><rect x="76.7013%" y="229" width="0.0935%" height="15" fill="rgb(231,177,25)" fg:x="46751" fg:w="57"/><text x="76.9513%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="76.9458%" y="213" width="0.0131%" height="15" fill="rgb(219,179,1)" fg:x="46900" fg:w="8"/><text x="77.1958%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (97 samples, 0.16%)</title><rect x="77.0131%" y="197" width="0.1591%" height="15" fill="rgb(238,219,53)" fg:x="46941" fg:w="97"/><text x="77.2631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.06%)</title><rect x="77.1115%" y="181" width="0.0607%" height="15" fill="rgb(232,167,36)" fg:x="47001" fg:w="37"/><text x="77.3615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (139 samples, 0.23%)</title><rect x="76.9589%" y="213" width="0.2280%" height="15" fill="rgb(244,19,51)" fg:x="46908" fg:w="139"/><text x="77.2089%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="77.1722%" y="197" width="0.0148%" height="15" fill="rgb(224,6,22)" fg:x="47038" fg:w="9"/><text x="77.4222%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="77.1870%" y="213" width="0.0279%" height="15" fill="rgb(224,145,5)" fg:x="47047" fg:w="17"/><text x="77.4370%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="77.1935%" y="197" width="0.0213%" height="15" fill="rgb(234,130,49)" fg:x="47051" fg:w="13"/><text x="77.4435%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="77.2017%" y="181" width="0.0131%" height="15" fill="rgb(254,6,2)" fg:x="47056" fg:w="8"/><text x="77.4517%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (257 samples, 0.42%)</title><rect x="76.7949%" y="229" width="0.4216%" height="15" fill="rgb(208,96,46)" fg:x="46808" fg:w="257"/><text x="77.0449%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="77.2165%" y="229" width="0.0295%" height="15" fill="rgb(239,3,39)" fg:x="47065" fg:w="18"/><text x="77.4665%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (141 samples, 0.23%)</title><rect x="77.5053%" y="213" width="0.2313%" height="15" fill="rgb(233,210,1)" fg:x="47241" fg:w="141"/><text x="77.7553%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (328 samples, 0.54%)</title><rect x="77.2460%" y="229" width="0.5381%" height="15" fill="rgb(244,137,37)" fg:x="47083" fg:w="328"/><text x="77.4960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="77.7464%" y="213" width="0.0377%" height="15" fill="rgb(240,136,2)" fg:x="47388" fg:w="23"/><text x="77.9964%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.03%)</title><rect x="77.7497%" y="197" width="0.0345%" height="15" fill="rgb(239,18,37)" fg:x="47390" fg:w="21"/><text x="77.9997%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (31 samples, 0.05%)</title><rect x="77.7842%" y="229" width="0.0509%" height="15" fill="rgb(218,185,22)" fg:x="47411" fg:w="31"/><text x="78.0342%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.05%)</title><rect x="77.7858%" y="213" width="0.0492%" height="15" fill="rgb(225,218,4)" fg:x="47412" fg:w="30"/><text x="78.0358%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (21 samples, 0.03%)</title><rect x="77.8350%" y="229" width="0.0345%" height="15" fill="rgb(230,182,32)" fg:x="47442" fg:w="21"/><text x="78.0850%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="77.9154%" y="197" width="0.0213%" height="15" fill="rgb(242,56,43)" fg:x="47491" fg:w="13"/><text x="78.1654%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (47 samples, 0.08%)</title><rect x="77.8695%" y="229" width="0.0771%" height="15" fill="rgb(233,99,24)" fg:x="47463" fg:w="47"/><text x="78.1195%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (43 samples, 0.07%)</title><rect x="77.8760%" y="213" width="0.0705%" height="15" fill="rgb(234,209,42)" fg:x="47467" fg:w="43"/><text x="78.1260%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (27 samples, 0.04%)</title><rect x="77.9466%" y="229" width="0.0443%" height="15" fill="rgb(227,7,12)" fg:x="47510" fg:w="27"/><text x="78.1966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (102 samples, 0.17%)</title><rect x="77.9909%" y="229" width="0.1673%" height="15" fill="rgb(245,203,43)" fg:x="47537" fg:w="102"/><text x="78.2409%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.04%)</title><rect x="78.1582%" y="229" width="0.0377%" height="15" fill="rgb(238,205,33)" fg:x="47639" fg:w="23"/><text x="78.4082%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (54 samples, 0.09%)</title><rect x="78.2124%" y="229" width="0.0886%" height="15" fill="rgb(231,56,7)" fg:x="47672" fg:w="54"/><text x="78.4624%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="78.3124%" y="197" width="0.0213%" height="15" fill="rgb(244,186,29)" fg:x="47733" fg:w="13"/><text x="78.5624%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (11 samples, 0.02%)</title><rect x="78.3338%" y="197" width="0.0180%" height="15" fill="rgb(234,111,31)" fg:x="47746" fg:w="11"/><text x="78.5838%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.06%)</title><rect x="78.3010%" y="229" width="0.0591%" height="15" fill="rgb(241,149,10)" fg:x="47726" fg:w="36"/><text x="78.5510%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.05%)</title><rect x="78.3059%" y="213" width="0.0541%" height="15" fill="rgb(249,206,44)" fg:x="47729" fg:w="33"/><text x="78.5559%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="78.3600%" y="229" width="0.0443%" height="15" fill="rgb(251,153,30)" fg:x="47762" fg:w="27"/><text x="78.6100%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,132 samples, 1.86%)</title><rect x="78.4043%" y="229" width="1.8572%" height="15" fill="rgb(239,152,38)" fg:x="47789" fg:w="1132"/><text x="78.6543%" y="239.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="80.2632%" y="229" width="0.0115%" height="15" fill="rgb(249,139,47)" fg:x="48922" fg:w="7"/><text x="80.5132%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (16 samples, 0.03%)</title><rect x="80.2746%" y="229" width="0.0263%" height="15" fill="rgb(244,64,35)" fg:x="48929" fg:w="16"/><text x="80.5246%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="80.3534%" y="149" width="0.0115%" height="15" fill="rgb(216,46,15)" fg:x="48977" fg:w="7"/><text x="80.6034%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="80.3649%" y="149" width="0.0230%" height="15" fill="rgb(250,74,19)" fg:x="48984" fg:w="14"/><text x="80.6149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="80.3698%" y="133" width="0.0180%" height="15" fill="rgb(249,42,33)" fg:x="48987" fg:w="11"/><text x="80.6198%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (29 samples, 0.05%)</title><rect x="80.3468%" y="165" width="0.0476%" height="15" fill="rgb(242,149,17)" fg:x="48973" fg:w="29"/><text x="80.5968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (48 samples, 0.08%)</title><rect x="80.3353%" y="181" width="0.0788%" height="15" fill="rgb(244,29,21)" fg:x="48966" fg:w="48"/><text x="80.5853%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="80.3993%" y="165" width="0.0148%" height="15" fill="rgb(220,130,37)" fg:x="49005" fg:w="9"/><text x="80.6493%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (73 samples, 0.12%)</title><rect x="80.3091%" y="229" width="0.1198%" height="15" fill="rgb(211,67,2)" fg:x="48950" fg:w="73"/><text x="80.5591%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (61 samples, 0.10%)</title><rect x="80.3288%" y="213" width="0.1001%" height="15" fill="rgb(235,68,52)" fg:x="48962" fg:w="61"/><text x="80.5788%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (59 samples, 0.10%)</title><rect x="80.3321%" y="197" width="0.0968%" height="15" fill="rgb(246,142,3)" fg:x="48964" fg:w="59"/><text x="80.5821%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="80.4141%" y="181" width="0.0148%" height="15" fill="rgb(241,25,7)" fg:x="49014" fg:w="9"/><text x="80.6641%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,169 samples, 3.56%)</title><rect x="80.4387%" y="229" width="3.5585%" height="15" fill="rgb(242,119,39)" fg:x="49029" fg:w="2169"/><text x="80.6887%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (176 samples, 0.29%)</title><rect x="83.9972%" y="229" width="0.2888%" height="15" fill="rgb(241,98,45)" fg:x="51198" fg:w="176"/><text x="84.2472%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (63 samples, 0.10%)</title><rect x="84.2860%" y="229" width="0.1034%" height="15" fill="rgb(254,28,30)" fg:x="51374" fg:w="63"/><text x="84.5360%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="84.5272%" y="197" width="0.0197%" height="15" fill="rgb(241,142,54)" fg:x="51521" fg:w="12"/><text x="84.7772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (66 samples, 0.11%)</title><rect x="84.7290%" y="181" width="0.1083%" height="15" fill="rgb(222,85,15)" fg:x="51644" fg:w="66"/><text x="84.9790%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="84.7831%" y="165" width="0.0541%" height="15" fill="rgb(210,85,47)" fg:x="51677" fg:w="33"/><text x="85.0331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (188 samples, 0.31%)</title><rect x="84.5469%" y="197" width="0.3084%" height="15" fill="rgb(224,206,25)" fg:x="51533" fg:w="188"/><text x="84.7969%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="84.8372%" y="181" width="0.0180%" height="15" fill="rgb(243,201,19)" fg:x="51710" fg:w="11"/><text x="85.0872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (23 samples, 0.04%)</title><rect x="84.8750%" y="181" width="0.0377%" height="15" fill="rgb(236,59,4)" fg:x="51733" fg:w="23"/><text x="85.1250%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.02%)</title><rect x="84.8881%" y="165" width="0.0246%" height="15" fill="rgb(254,179,45)" fg:x="51741" fg:w="15"/><text x="85.1381%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="84.9308%" y="165" width="0.0263%" height="15" fill="rgb(226,14,10)" fg:x="51767" fg:w="16"/><text x="85.1808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (118 samples, 0.19%)</title><rect x="84.8586%" y="197" width="0.1936%" height="15" fill="rgb(244,27,41)" fg:x="51723" fg:w="118"/><text x="85.1086%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (84 samples, 0.14%)</title><rect x="84.9144%" y="181" width="0.1378%" height="15" fill="rgb(235,35,32)" fg:x="51757" fg:w="84"/><text x="85.1644%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (58 samples, 0.10%)</title><rect x="84.9570%" y="165" width="0.0952%" height="15" fill="rgb(218,68,31)" fg:x="51783" fg:w="58"/><text x="85.2070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="85.0374%" y="149" width="0.0148%" height="15" fill="rgb(207,120,37)" fg:x="51832" fg:w="9"/><text x="85.2874%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (374 samples, 0.61%)</title><rect x="84.4402%" y="213" width="0.6136%" height="15" fill="rgb(227,98,0)" fg:x="51468" fg:w="374"/><text x="84.6902%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="85.0538%" y="213" width="0.0197%" height="15" fill="rgb(207,7,3)" fg:x="51842" fg:w="12"/><text x="85.3038%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (422 samples, 0.69%)</title><rect x="84.3894%" y="229" width="0.6923%" height="15" fill="rgb(206,98,19)" fg:x="51437" fg:w="422"/><text x="84.6394%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (22 samples, 0.04%)</title><rect x="85.0817%" y="229" width="0.0361%" height="15" fill="rgb(217,5,26)" fg:x="51859" fg:w="22"/><text x="85.3317%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,358 samples, 12.07%)</title><rect x="73.0657%" y="245" width="12.0718%" height="15" fill="rgb(235,190,38)" fg:x="44535" fg:w="7358"/><text x="73.3157%" y="255.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (12 samples, 0.02%)</title><rect x="85.1178%" y="229" width="0.0197%" height="15" fill="rgb(247,86,24)" fg:x="51881" fg:w="12"/><text x="85.3678%" y="239.50"></text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (18 samples, 0.03%)</title><rect x="85.1375%" y="245" width="0.0295%" height="15" fill="rgb(205,101,16)" fg:x="51893" fg:w="18"/><text x="85.3875%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,698 samples, 83.18%)</title><rect x="1.9934%" y="277" width="83.1769%" height="15" fill="rgb(246,168,33)" fg:x="1215" fg:w="50698"/><text x="2.2434%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (48,618 samples, 79.76%)</title><rect x="5.4059%" y="261" width="79.7644%" height="15" fill="rgb(231,114,1)" fg:x="3295" fg:w="48618"/><text x="5.6559%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (784 samples, 1.29%)</title><rect x="85.1703%" y="277" width="1.2863%" height="15" fill="rgb(207,184,53)" fg:x="51913" fg:w="784"/><text x="85.4203%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (209 samples, 0.34%)</title><rect x="86.4566%" y="277" width="0.3429%" height="15" fill="rgb(224,95,51)" fg:x="52697" fg:w="209"/><text x="86.7066%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (76 samples, 0.12%)</title><rect x="86.6748%" y="261" width="0.1247%" height="15" fill="rgb(212,188,45)" fg:x="52830" fg:w="76"/><text x="86.9248%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,252 samples, 6.98%)</title><rect x="86.7994%" y="277" width="6.9760%" height="15" fill="rgb(223,154,38)" fg:x="52906" fg:w="4252"/><text x="87.0494%" y="287.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (110 samples, 0.18%)</title><rect x="93.7787%" y="261" width="0.1805%" height="15" fill="rgb(251,22,52)" fg:x="57160" fg:w="110"/><text x="94.0287%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (395 samples, 0.65%)</title><rect x="93.7754%" y="277" width="0.6481%" height="15" fill="rgb(229,209,22)" fg:x="57158" fg:w="395"/><text x="94.0254%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (283 samples, 0.46%)</title><rect x="93.9592%" y="261" width="0.4643%" height="15" fill="rgb(234,138,34)" fg:x="57270" fg:w="283"/><text x="94.2092%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (37 samples, 0.06%)</title><rect x="94.4235%" y="277" width="0.0607%" height="15" fill="rgb(212,95,11)" fg:x="57553" fg:w="37"/><text x="94.6735%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,354 samples, 5.50%)</title><rect x="94.4842%" y="277" width="5.5027%" height="15" fill="rgb(240,179,47)" fg:x="57590" fg:w="3354"/><text x="94.7342%" y="287.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,554 samples, 4.19%)</title><rect x="95.7967%" y="261" width="4.1902%" height="15" fill="rgb(240,163,11)" fg:x="58390" fg:w="2554"/><text x="96.0467%" y="271.50">rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (7 samples, 0.01%)</title><rect x="99.9869%" y="277" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="60944" fg:w="7"/><text x="100.2369%" y="287.50"></text></g><g><title>all (60,952 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="60952"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,794 samples, 98.10%)</title><rect x="1.8999%" y="357" width="98.1001%" height="15" fill="rgb(244,205,15)" fg:x="1158" fg:w="59794"/><text x="2.1499%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,794 samples, 98.10%)</title><rect x="1.8999%" y="341" width="98.1001%" height="15" fill="rgb(223,117,47)" fg:x="1158" fg:w="59794"/><text x="2.1499%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,794 samples, 98.10%)</title><rect x="1.8999%" y="325" width="98.1001%" height="15" fill="rgb(244,107,35)" fg:x="1158" fg:w="59794"/><text x="2.1499%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,794 samples, 98.10%)</title><rect x="1.8999%" y="309" width="98.1001%" height="15" fill="rgb(205,140,8)" fg:x="1158" fg:w="59794"/><text x="2.1499%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,793 samples, 98.10%)</title><rect x="1.9015%" y="293" width="98.0985%" height="15" fill="rgb(228,84,46)" fg:x="1159" fg:w="59793"/><text x="2.1515%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>