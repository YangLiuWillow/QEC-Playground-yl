<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61071"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="0.0082%" y="133" width="0.0164%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="10"/><text x="0.2582%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0327%" y="53" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="8"/><text x="0.2827%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0327%" y="37" width="0.0131%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="8"/><text x="0.2827%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.02%)</title><rect x="0.0295%" y="133" width="0.0229%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="14"/><text x="0.2795%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (14 samples, 0.02%)</title><rect x="0.0295%" y="117" width="0.0229%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="14"/><text x="0.2795%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0295%" y="101" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="14"/><text x="0.2795%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0295%" y="85" width="0.0229%" height="15" fill="rgb(207,160,47)" fg:x="18" fg:w="14"/><text x="0.2795%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (14 samples, 0.02%)</title><rect x="0.0295%" y="69" width="0.0229%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="14"/><text x="0.2795%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (8 samples, 0.01%)</title><rect x="0.0524%" y="133" width="0.0131%" height="15" fill="rgb(218,30,26)" fg:x="32" fg:w="8"/><text x="0.3024%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0524%" y="117" width="0.0131%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="8"/><text x="0.3024%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0524%" y="101" width="0.0131%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="8"/><text x="0.3024%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (8 samples, 0.01%)</title><rect x="0.0524%" y="85" width="0.0131%" height="15" fill="rgb(240,193,28)" fg:x="32" fg:w="8"/><text x="0.3024%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (48 samples, 0.08%)</title><rect x="0.0655%" y="133" width="0.0786%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="48"/><text x="0.3155%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (39 samples, 0.06%)</title><rect x="0.1441%" y="133" width="0.0639%" height="15" fill="rgb(206,188,39)" fg:x="88" fg:w="39"/><text x="0.3941%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="0.8646%" y="117" width="0.0131%" height="15" fill="rgb(217,207,13)" fg:x="528" fg:w="8"/><text x="1.1146%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.8777%" y="117" width="0.0115%" height="15" fill="rgb(231,73,38)" fg:x="536" fg:w="7"/><text x="1.1277%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (7 samples, 0.01%)</title><rect x="0.8891%" y="117" width="0.0115%" height="15" fill="rgb(225,20,46)" fg:x="543" fg:w="7"/><text x="1.1391%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (42 samples, 0.07%)</title><rect x="0.9006%" y="117" width="0.0688%" height="15" fill="rgb(210,31,41)" fg:x="550" fg:w="42"/><text x="1.1506%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="1.0594%" y="101" width="0.0115%" height="15" fill="rgb(221,200,47)" fg:x="647" fg:w="7"/><text x="1.3094%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.13%)</title><rect x="0.9710%" y="117" width="0.1261%" height="15" fill="rgb(226,26,5)" fg:x="593" fg:w="77"/><text x="1.2210%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="1.0709%" y="101" width="0.0262%" height="15" fill="rgb(249,33,26)" fg:x="654" fg:w="16"/><text x="1.3209%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="1.0840%" y="85" width="0.0131%" height="15" fill="rgb(235,183,28)" fg:x="662" fg:w="8"/><text x="1.3340%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (9 samples, 0.01%)</title><rect x="1.3967%" y="101" width="0.0147%" height="15" fill="rgb(221,5,38)" fg:x="853" fg:w="9"/><text x="1.6467%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (44 samples, 0.07%)</title><rect x="1.4115%" y="101" width="0.0720%" height="15" fill="rgb(247,18,42)" fg:x="862" fg:w="44"/><text x="1.6615%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (249 samples, 0.41%)</title><rect x="1.0987%" y="117" width="0.4077%" height="15" fill="rgb(241,131,45)" fg:x="671" fg:w="249"/><text x="1.3487%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="1.4835%" y="101" width="0.0229%" height="15" fill="rgb(249,31,29)" fg:x="906" fg:w="14"/><text x="1.7335%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="1.4901%" y="85" width="0.0164%" height="15" fill="rgb(225,111,53)" fg:x="910" fg:w="10"/><text x="1.7401%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (792 samples, 1.30%)</title><rect x="0.2112%" y="133" width="1.2969%" height="15" fill="rgb(238,160,17)" fg:x="129" fg:w="792"/><text x="0.4612%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.05%)</title><rect x="1.5130%" y="117" width="0.0524%" height="15" fill="rgb(214,148,48)" fg:x="924" fg:w="32"/><text x="1.7630%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="1.6571%" y="101" width="0.0147%" height="15" fill="rgb(232,36,49)" fg:x="1012" fg:w="9"/><text x="1.9071%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="1.6604%" y="85" width="0.0115%" height="15" fill="rgb(209,103,24)" fg:x="1014" fg:w="7"/><text x="1.9104%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (11 samples, 0.02%)</title><rect x="1.6849%" y="101" width="0.0180%" height="15" fill="rgb(229,88,8)" fg:x="1029" fg:w="11"/><text x="1.9349%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (136 samples, 0.22%)</title><rect x="1.5687%" y="117" width="0.2227%" height="15" fill="rgb(213,181,19)" fg:x="958" fg:w="136"/><text x="1.8187%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (54 samples, 0.09%)</title><rect x="1.7029%" y="101" width="0.0884%" height="15" fill="rgb(254,191,54)" fg:x="1040" fg:w="54"/><text x="1.9529%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (176 samples, 0.29%)</title><rect x="1.5081%" y="133" width="0.2882%" height="15" fill="rgb(241,83,37)" fg:x="921" fg:w="176"/><text x="1.7581%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.8012%" y="133" width="0.0115%" height="15" fill="rgb(233,36,39)" fg:x="1100" fg:w="7"/><text x="2.0512%" y="143.50"></text></g><g><title>dyld`start (1,111 samples, 1.82%)</title><rect x="0.0000%" y="357" width="1.8192%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="1111"/><text x="0.2500%" y="367.50">d..</text></g><g><title>rust_qecp`main (1,107 samples, 1.81%)</title><rect x="0.0065%" y="341" width="1.8126%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,107 samples, 1.81%)</title><rect x="0.0065%" y="325" width="1.8126%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,107 samples, 1.81%)</title><rect x="0.0065%" y="309" width="1.8126%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="319.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,107 samples, 1.81%)</title><rect x="0.0065%" y="293" width="1.8126%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,107 samples, 1.81%)</title><rect x="0.0065%" y="277" width="1.8126%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (1,107 samples, 1.81%)</title><rect x="0.0065%" y="261" width="1.8126%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,107 samples, 1.81%)</title><rect x="0.0065%" y="245" width="1.8126%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,107 samples, 1.81%)</title><rect x="0.0065%" y="229" width="1.8126%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,107 samples, 1.81%)</title><rect x="0.0065%" y="213" width="1.8126%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,107 samples, 1.81%)</title><rect x="0.0065%" y="197" width="1.8126%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,107 samples, 1.81%)</title><rect x="0.0065%" y="181" width="1.8126%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,107 samples, 1.81%)</title><rect x="0.0065%" y="165" width="1.8126%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,107 samples, 1.81%)</title><rect x="0.0065%" y="149" width="1.8126%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1107"/><text x="0.2565%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="1.8667%" y="261" width="0.0115%" height="15" fill="rgb(225,35,8)" fg:x="1140" fg:w="7"/><text x="2.1167%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="1.8798%" y="261" width="0.0262%" height="15" fill="rgb(250,213,24)" fg:x="1148" fg:w="16"/><text x="2.1298%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="1.9125%" y="261" width="0.0278%" height="15" fill="rgb(247,123,22)" fg:x="1168" fg:w="17"/><text x="2.1625%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (26 samples, 0.04%)</title><rect x="1.9404%" y="261" width="0.0426%" height="15" fill="rgb(231,138,38)" fg:x="1185" fg:w="26"/><text x="2.1904%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (8 samples, 0.01%)</title><rect x="1.9846%" y="261" width="0.0131%" height="15" fill="rgb(231,145,46)" fg:x="1212" fg:w="8"/><text x="2.2346%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (8 samples, 0.01%)</title><rect x="25.2935%" y="245" width="0.0131%" height="15" fill="rgb(251,118,11)" fg:x="15447" fg:w="8"/><text x="25.5435%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="25.3066%" y="245" width="0.0278%" height="15" fill="rgb(217,147,25)" fg:x="15455" fg:w="17"/><text x="25.5566%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="25.3164%" y="229" width="0.0180%" height="15" fill="rgb(247,81,37)" fg:x="15461" fg:w="11"/><text x="25.5664%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (60 samples, 0.10%)</title><rect x="25.3344%" y="245" width="0.0982%" height="15" fill="rgb(209,12,38)" fg:x="15472" fg:w="60"/><text x="25.5844%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.03%)</title><rect x="25.3983%" y="229" width="0.0344%" height="15" fill="rgb(227,1,9)" fg:x="15511" fg:w="21"/><text x="25.6483%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="25.4392%" y="245" width="0.0262%" height="15" fill="rgb(248,47,43)" fg:x="15536" fg:w="16"/><text x="25.6892%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="25.4818%" y="245" width="0.0671%" height="15" fill="rgb(221,10,30)" fg:x="15562" fg:w="41"/><text x="25.7318%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="25.5621%" y="245" width="0.0147%" height="15" fill="rgb(210,229,1)" fg:x="15611" fg:w="9"/><text x="25.8121%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="25.6030%" y="181" width="0.0115%" height="15" fill="rgb(222,148,37)" fg:x="15636" fg:w="7"/><text x="25.8530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.03%)</title><rect x="25.5899%" y="197" width="0.0278%" height="15" fill="rgb(234,67,33)" fg:x="15628" fg:w="17"/><text x="25.8399%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (30 samples, 0.05%)</title><rect x="25.5768%" y="245" width="0.0491%" height="15" fill="rgb(247,98,35)" fg:x="15620" fg:w="30"/><text x="25.8268%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (30 samples, 0.05%)</title><rect x="25.5768%" y="229" width="0.0491%" height="15" fill="rgb(247,138,52)" fg:x="15620" fg:w="30"/><text x="25.8268%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.04%)</title><rect x="25.5866%" y="213" width="0.0393%" height="15" fill="rgb(213,79,30)" fg:x="15626" fg:w="24"/><text x="25.8366%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="25.7029%" y="165" width="0.0278%" height="15" fill="rgb(246,177,23)" fg:x="15697" fg:w="17"/><text x="25.9529%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="25.7127%" y="149" width="0.0180%" height="15" fill="rgb(230,62,27)" fg:x="15703" fg:w="11"/><text x="25.9627%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="25.7176%" y="133" width="0.0131%" height="15" fill="rgb(216,154,8)" fg:x="15706" fg:w="8"/><text x="25.9676%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (46 samples, 0.08%)</title><rect x="25.6668%" y="181" width="0.0753%" height="15" fill="rgb(244,35,45)" fg:x="15675" fg:w="46"/><text x="25.9168%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (99 samples, 0.16%)</title><rect x="25.6505%" y="197" width="0.1621%" height="15" fill="rgb(251,115,12)" fg:x="15665" fg:w="99"/><text x="25.9005%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (43 samples, 0.07%)</title><rect x="25.7422%" y="181" width="0.0704%" height="15" fill="rgb(240,54,50)" fg:x="15721" fg:w="43"/><text x="25.9922%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (131 samples, 0.21%)</title><rect x="25.6259%" y="245" width="0.2145%" height="15" fill="rgb(233,84,52)" fg:x="15650" fg:w="131"/><text x="25.8759%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (127 samples, 0.21%)</title><rect x="25.6325%" y="229" width="0.2080%" height="15" fill="rgb(207,117,47)" fg:x="15654" fg:w="127"/><text x="25.8825%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (118 samples, 0.19%)</title><rect x="25.6472%" y="213" width="0.1932%" height="15" fill="rgb(249,43,39)" fg:x="15663" fg:w="118"/><text x="25.8972%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="25.8240%" y="197" width="0.0164%" height="15" fill="rgb(209,38,44)" fg:x="15771" fg:w="10"/><text x="26.0740%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="25.8240%" y="181" width="0.0164%" height="15" fill="rgb(236,212,23)" fg:x="15771" fg:w="10"/><text x="26.0740%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,623 samples, 2.66%)</title><rect x="28.2278%" y="213" width="2.6576%" height="15" fill="rgb(242,79,21)" fg:x="17239" fg:w="1623"/><text x="28.4778%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`free_medium (1,629 samples, 2.67%)</title><rect x="28.2229%" y="229" width="2.6674%" height="15" fill="rgb(211,96,35)" fg:x="17236" fg:w="1629"/><text x="28.4729%" y="239.50">li..</text></g><g><title>rust_qecp`PerfectMatching::AddEdge (614 samples, 1.01%)</title><rect x="30.8936%" y="229" width="1.0054%" height="15" fill="rgb(253,215,40)" fg:x="18867" fg:w="614"/><text x="31.1436%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (33 samples, 0.05%)</title><rect x="32.1216%" y="213" width="0.0540%" height="15" fill="rgb(211,81,21)" fg:x="19617" fg:w="33"/><text x="32.3716%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="32.1789%" y="213" width="0.0196%" height="15" fill="rgb(208,190,38)" fg:x="19652" fg:w="12"/><text x="32.4289%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (1,762 samples, 2.89%)</title><rect x="32.1986%" y="213" width="2.8852%" height="15" fill="rgb(235,213,38)" fg:x="19664" fg:w="1762"/><text x="32.4486%" y="223.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::Finish (56 samples, 0.09%)</title><rect x="35.0854%" y="213" width="0.0917%" height="15" fill="rgb(237,122,38)" fg:x="21427" fg:w="56"/><text x="35.3354%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (8 samples, 0.01%)</title><rect x="35.1771%" y="213" width="0.0131%" height="15" fill="rgb(244,218,35)" fg:x="21483" fg:w="8"/><text x="35.4271%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (526 samples, 0.86%)</title><rect x="35.2000%" y="213" width="0.8613%" height="15" fill="rgb(240,68,47)" fg:x="21497" fg:w="526"/><text x="35.4500%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (902 samples, 1.48%)</title><rect x="36.4248%" y="197" width="1.4770%" height="15" fill="rgb(210,16,53)" fg:x="22245" fg:w="902"/><text x="36.6748%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (418 samples, 0.68%)</title><rect x="37.9051%" y="181" width="0.6844%" height="15" fill="rgb(235,124,12)" fg:x="23149" fg:w="418"/><text x="38.1551%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (424 samples, 0.69%)</title><rect x="37.9051%" y="197" width="0.6943%" height="15" fill="rgb(224,169,11)" fg:x="23149" fg:w="424"/><text x="38.1551%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (9,030 samples, 14.79%)</title><rect x="38.6092%" y="197" width="14.7861%" height="15" fill="rgb(250,166,2)" fg:x="23579" fg:w="9030"/><text x="38.8592%" y="207.50">rust_qecp`PerfectMatchi..</text></g><g><title>rust_qecp`PerfectMatching::Augment (11 samples, 0.02%)</title><rect x="53.3772%" y="181" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="32598" fg:w="11"/><text x="53.6272%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (11 samples, 0.02%)</title><rect x="53.3772%" y="165" width="0.0180%" height="15" fill="rgb(230,116,27)" fg:x="32598" fg:w="11"/><text x="53.6272%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (138 samples, 0.23%)</title><rect x="57.4888%" y="149" width="0.2260%" height="15" fill="rgb(228,99,48)" fg:x="35109" fg:w="138"/><text x="57.7388%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,199 samples, 1.96%)</title><rect x="55.7777%" y="181" width="1.9633%" height="15" fill="rgb(253,11,6)" fg:x="34064" fg:w="1199"/><text x="56.0277%" y="191.50">r..</text></g><g><title>rust_qecp`PerfectMatching::Augment (154 samples, 0.25%)</title><rect x="57.4888%" y="165" width="0.2522%" height="15" fill="rgb(247,143,39)" fg:x="35109" fg:w="154"/><text x="57.7388%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (16 samples, 0.03%)</title><rect x="57.7148%" y="149" width="0.0262%" height="15" fill="rgb(236,97,10)" fg:x="35247" fg:w="16"/><text x="57.9648%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (3,089 samples, 5.06%)</title><rect x="53.4001%" y="197" width="5.0580%" height="15" fill="rgb(233,208,19)" fg:x="32612" fg:w="3089"/><text x="53.6501%" y="207.50">rust_q..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (438 samples, 0.72%)</title><rect x="57.7410%" y="181" width="0.7172%" height="15" fill="rgb(216,164,2)" fg:x="35263" fg:w="438"/><text x="57.9910%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (3,605 samples, 5.90%)</title><rect x="59.1328%" y="181" width="5.9030%" height="15" fill="rgb(220,129,5)" fg:x="36113" fg:w="3605"/><text x="59.3828%" y="191.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (4,029 samples, 6.60%)</title><rect x="58.4582%" y="197" width="6.5972%" height="15" fill="rgb(242,17,10)" fg:x="35701" fg:w="4029"/><text x="58.7082%" y="207.50">rust_qecp..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (12 samples, 0.02%)</title><rect x="65.0358%" y="181" width="0.0196%" height="15" fill="rgb(242,107,0)" fg:x="39718" fg:w="12"/><text x="65.2858%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (61 samples, 0.10%)</title><rect x="70.2952%" y="165" width="0.0999%" height="15" fill="rgb(251,28,31)" fg:x="42930" fg:w="61"/><text x="70.5452%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (83 samples, 0.14%)</title><rect x="70.2952%" y="181" width="0.1359%" height="15" fill="rgb(233,223,10)" fg:x="42930" fg:w="83"/><text x="70.5452%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (22 samples, 0.04%)</title><rect x="70.3951%" y="165" width="0.0360%" height="15" fill="rgb(215,21,27)" fg:x="42991" fg:w="22"/><text x="70.6451%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,309 samples, 5.42%)</title><rect x="65.0620%" y="197" width="5.4183%" height="15" fill="rgb(232,23,21)" fg:x="39734" fg:w="3309"/><text x="65.3120%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (30 samples, 0.05%)</title><rect x="70.4311%" y="181" width="0.0491%" height="15" fill="rgb(244,5,23)" fg:x="43013" fg:w="30"/><text x="70.6811%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (21,514 samples, 35.23%)</title><rect x="36.0613%" y="213" width="35.2278%" height="15" fill="rgb(226,81,46)" fg:x="22023" fg:w="21514"/><text x="36.3113%" y="223.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (492 samples, 0.81%)</title><rect x="70.4835%" y="197" width="0.8056%" height="15" fill="rgb(247,70,30)" fg:x="43045" fg:w="492"/><text x="70.7335%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (12 samples, 0.02%)</title><rect x="71.2892%" y="213" width="0.0196%" height="15" fill="rgb(212,68,19)" fg:x="43537" fg:w="12"/><text x="71.5392%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (27,985 samples, 45.82%)</title><rect x="25.8404%" y="245" width="45.8237%" height="15" fill="rgb(240,187,13)" fg:x="15781" fg:w="27985"/><text x="26.0904%" y="255.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (24,282 samples, 39.76%)</title><rect x="31.9038%" y="229" width="39.7603%" height="15" fill="rgb(223,113,26)" fg:x="19484" fg:w="24282"/><text x="32.1538%" y="239.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (217 samples, 0.36%)</title><rect x="71.3088%" y="213" width="0.3553%" height="15" fill="rgb(206,192,2)" fg:x="43549" fg:w="217"/><text x="71.5588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="72.4763%" y="197" width="0.0115%" height="15" fill="rgb(241,108,4)" fg:x="44262" fg:w="7"/><text x="72.7263%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="72.4583%" y="229" width="0.0311%" height="15" fill="rgb(247,173,49)" fg:x="44251" fg:w="19"/><text x="72.7083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="72.4681%" y="213" width="0.0213%" height="15" fill="rgb(224,114,35)" fg:x="44257" fg:w="13"/><text x="72.7181%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="72.4992%" y="181" width="0.0147%" height="15" fill="rgb(245,159,27)" fg:x="44276" fg:w="9"/><text x="72.7492%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.03%)</title><rect x="72.4910%" y="229" width="0.0278%" height="15" fill="rgb(245,172,44)" fg:x="44271" fg:w="17"/><text x="72.7410%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="72.4943%" y="213" width="0.0246%" height="15" fill="rgb(236,23,11)" fg:x="44273" fg:w="15"/><text x="72.7443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="72.4976%" y="197" width="0.0213%" height="15" fill="rgb(205,117,38)" fg:x="44275" fg:w="13"/><text x="72.7476%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (43,065 samples, 70.52%)</title><rect x="2.0042%" y="261" width="70.5163%" height="15" fill="rgb(237,72,25)" fg:x="1224" fg:w="43065"/><text x="2.2542%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (523 samples, 0.86%)</title><rect x="71.6641%" y="245" width="0.8564%" height="15" fill="rgb(244,70,9)" fg:x="43766" fg:w="523"/><text x="71.9141%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (43,300 samples, 70.90%)</title><rect x="1.8585%" y="277" width="70.9011%" height="15" fill="rgb(217,125,39)" fg:x="1135" fg:w="43300"/><text x="2.1085%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (146 samples, 0.24%)</title><rect x="72.5205%" y="261" width="0.2391%" height="15" fill="rgb(235,36,10)" fg:x="44289" fg:w="146"/><text x="72.7705%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,495 samples, 2.45%)</title><rect x="72.7596%" y="277" width="2.4480%" height="15" fill="rgb(251,123,47)" fg:x="44435" fg:w="1495"/><text x="73.0096%" y="287.50">ru..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="75.5874%" y="261" width="0.0131%" height="15" fill="rgb(221,13,13)" fg:x="46162" fg:w="8"/><text x="75.8374%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="75.5891%" y="245" width="0.0115%" height="15" fill="rgb(238,131,9)" fg:x="46163" fg:w="7"/><text x="75.8391%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="75.5891%" y="229" width="0.0115%" height="15" fill="rgb(211,50,8)" fg:x="46163" fg:w="7"/><text x="75.8391%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (413 samples, 0.68%)</title><rect x="75.2075%" y="277" width="0.6763%" height="15" fill="rgb(245,182,24)" fg:x="45930" fg:w="413"/><text x="75.4575%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (173 samples, 0.28%)</title><rect x="75.6005%" y="261" width="0.2833%" height="15" fill="rgb(242,14,37)" fg:x="46170" fg:w="173"/><text x="75.8505%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,538 samples, 12.34%)</title><rect x="75.8838%" y="277" width="12.3430%" height="15" fill="rgb(246,228,12)" fg:x="46343" fg:w="7538"/><text x="76.1338%" y="287.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (226 samples, 0.37%)</title><rect x="88.2301%" y="261" width="0.3701%" height="15" fill="rgb(213,55,15)" fg:x="53883" fg:w="226"/><text x="88.4801%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (757 samples, 1.24%)</title><rect x="88.2268%" y="277" width="1.2395%" height="15" fill="rgb(209,9,3)" fg:x="53881" fg:w="757"/><text x="88.4768%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (529 samples, 0.87%)</title><rect x="88.6002%" y="261" width="0.8662%" height="15" fill="rgb(230,59,30)" fg:x="54109" fg:w="529"/><text x="88.8502%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (7 samples, 0.01%)</title><rect x="89.4549%" y="245" width="0.0115%" height="15" fill="rgb(209,121,21)" fg:x="54631" fg:w="7"/><text x="89.7049%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="89.4549%" y="229" width="0.0115%" height="15" fill="rgb(220,109,13)" fg:x="54631" fg:w="7"/><text x="89.7049%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="89.4549%" y="213" width="0.0115%" height="15" fill="rgb(232,18,1)" fg:x="54631" fg:w="7"/><text x="89.7049%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (6,428 samples, 10.53%)</title><rect x="89.4696%" y="277" width="10.5255%" height="15" fill="rgb(215,41,42)" fg:x="54640" fg:w="6428"/><text x="89.7196%" y="287.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (5,032 samples, 8.24%)</title><rect x="91.7555%" y="261" width="8.2396%" height="15" fill="rgb(224,123,36)" fg:x="56036" fg:w="5032"/><text x="92.0055%" y="271.50">rust_qecp`r..</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,959 samples, 98.18%)</title><rect x="1.8192%" y="309" width="98.1792%" height="15" fill="rgb(240,125,3)" fg:x="1111" fg:w="59959"/><text x="2.0692%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,956 samples, 98.17%)</title><rect x="1.8241%" y="293" width="98.1743%" height="15" fill="rgb(205,98,50)" fg:x="1114" fg:w="59956"/><text x="2.0741%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (61,071 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="61071"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,960 samples, 98.18%)</title><rect x="1.8192%" y="357" width="98.1808%" height="15" fill="rgb(238,207,15)" fg:x="1111" fg:w="59960"/><text x="2.0692%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,960 samples, 98.18%)</title><rect x="1.8192%" y="341" width="98.1808%" height="15" fill="rgb(213,199,42)" fg:x="1111" fg:w="59960"/><text x="2.0692%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,960 samples, 98.18%)</title><rect x="1.8192%" y="325" width="98.1808%" height="15" fill="rgb(235,201,11)" fg:x="1111" fg:w="59960"/><text x="2.0692%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g></svg></svg>