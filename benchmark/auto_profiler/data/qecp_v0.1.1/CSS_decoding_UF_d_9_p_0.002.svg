<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="60952"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0115%" y="133" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="11"/><text x="0.2615%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0427%" y="53" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="8"/><text x="0.2927%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0427%" y="37" width="0.0131%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="8"/><text x="0.2927%" y="47.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0558%" y="53" width="0.0131%" height="15" fill="rgb(248,212,6)" fg:x="34" fg:w="8"/><text x="0.3058%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.03%)</title><rect x="0.0427%" y="133" width="0.0279%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="17"/><text x="0.2927%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (17 samples, 0.03%)</title><rect x="0.0427%" y="117" width="0.0279%" height="15" fill="rgb(232,128,0)" fg:x="26" fg:w="17"/><text x="0.2927%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="0.0427%" y="101" width="0.0279%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="17"/><text x="0.2927%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="0.0427%" y="85" width="0.0279%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="17"/><text x="0.2927%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (17 samples, 0.03%)</title><rect x="0.0427%" y="69" width="0.0279%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="17"/><text x="0.2927%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (7 samples, 0.01%)</title><rect x="0.0705%" y="133" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="43" fg:w="7"/><text x="0.3205%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0705%" y="117" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="7"/><text x="0.3205%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0705%" y="101" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="43" fg:w="7"/><text x="0.3205%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (66 samples, 0.11%)</title><rect x="0.0837%" y="133" width="0.1083%" height="15" fill="rgb(216,20,37)" fg:x="51" fg:w="66"/><text x="0.3337%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (37 samples, 0.06%)</title><rect x="0.1920%" y="133" width="0.0607%" height="15" fill="rgb(206,188,39)" fg:x="117" fg:w="37"/><text x="0.4420%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (19 samples, 0.03%)</title><rect x="0.2527%" y="133" width="0.0312%" height="15" fill="rgb(217,207,13)" fg:x="154" fg:w="19"/><text x="0.5027%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (41 samples, 0.07%)</title><rect x="0.9319%" y="117" width="0.0673%" height="15" fill="rgb(231,73,38)" fg:x="568" fg:w="41"/><text x="1.1819%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="1.0648%" y="101" width="0.0131%" height="15" fill="rgb(225,20,46)" fg:x="649" fg:w="8"/><text x="1.3148%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (77 samples, 0.13%)</title><rect x="1.0008%" y="117" width="0.1263%" height="15" fill="rgb(210,31,41)" fg:x="610" fg:w="77"/><text x="1.2508%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.05%)</title><rect x="1.0795%" y="101" width="0.0476%" height="15" fill="rgb(221,200,47)" fg:x="658" fg:w="29"/><text x="1.3295%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.03%)</title><rect x="1.0959%" y="85" width="0.0312%" height="15" fill="rgb(226,26,5)" fg:x="668" fg:w="19"/><text x="1.3459%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (18 samples, 0.03%)</title><rect x="1.3995%" y="101" width="0.0295%" height="15" fill="rgb(249,33,26)" fg:x="853" fg:w="18"/><text x="1.6495%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (41 samples, 0.07%)</title><rect x="1.4323%" y="101" width="0.0673%" height="15" fill="rgb(235,183,28)" fg:x="873" fg:w="41"/><text x="1.6823%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (754 samples, 1.24%)</title><rect x="0.2855%" y="133" width="1.2370%" height="15" fill="rgb(221,5,38)" fg:x="174" fg:w="754"/><text x="0.5355%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (240 samples, 0.39%)</title><rect x="1.1288%" y="117" width="0.3938%" height="15" fill="rgb(247,18,42)" fg:x="688" fg:w="240"/><text x="1.3788%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="1.4995%" y="101" width="0.0230%" height="15" fill="rgb(241,131,45)" fg:x="914" fg:w="14"/><text x="1.7495%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="1.5110%" y="85" width="0.0115%" height="15" fill="rgb(249,31,29)" fg:x="921" fg:w="7"/><text x="1.7610%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="1.5340%" y="117" width="0.0427%" height="15" fill="rgb(225,111,53)" fg:x="935" fg:w="26"/><text x="1.7840%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.01%)</title><rect x="1.6767%" y="101" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="1022" fg:w="7"/><text x="1.9267%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (123 samples, 0.20%)</title><rect x="1.5865%" y="117" width="0.2018%" height="15" fill="rgb(214,148,48)" fg:x="967" fg:w="123"/><text x="1.8365%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (48 samples, 0.08%)</title><rect x="1.7095%" y="101" width="0.0788%" height="15" fill="rgb(232,36,49)" fg:x="1042" fg:w="48"/><text x="1.9595%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (165 samples, 0.27%)</title><rect x="1.5225%" y="133" width="0.2707%" height="15" fill="rgb(209,103,24)" fg:x="928" fg:w="165"/><text x="1.7725%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (8 samples, 0.01%)</title><rect x="1.7965%" y="133" width="0.0131%" height="15" fill="rgb(229,88,8)" fg:x="1095" fg:w="8"/><text x="2.0465%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (7 samples, 0.01%)</title><rect x="1.7981%" y="117" width="0.0115%" height="15" fill="rgb(213,181,19)" fg:x="1096" fg:w="7"/><text x="2.0481%" y="127.50"></text></g><g><title>dyld`start (1,107 samples, 1.82%)</title><rect x="0.0000%" y="357" width="1.8162%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="1107"/><text x="0.2500%" y="367.50">d..</text></g><g><title>rust_qecp`main (1,104 samples, 1.81%)</title><rect x="0.0049%" y="341" width="1.8113%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,104 samples, 1.81%)</title><rect x="0.0049%" y="325" width="1.8113%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,104 samples, 1.81%)</title><rect x="0.0049%" y="309" width="1.8113%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="319.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,104 samples, 1.81%)</title><rect x="0.0049%" y="293" width="1.8113%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,104 samples, 1.81%)</title><rect x="0.0049%" y="277" width="1.8113%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (1,104 samples, 1.81%)</title><rect x="0.0049%" y="261" width="1.8113%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,104 samples, 1.81%)</title><rect x="0.0049%" y="245" width="1.8113%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,104 samples, 1.81%)</title><rect x="0.0049%" y="229" width="1.8113%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,104 samples, 1.81%)</title><rect x="0.0049%" y="213" width="1.8113%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,104 samples, 1.81%)</title><rect x="0.0049%" y="197" width="1.8113%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,104 samples, 1.81%)</title><rect x="0.0049%" y="181" width="1.8113%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,104 samples, 1.81%)</title><rect x="0.0049%" y="165" width="1.8113%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,104 samples, 1.81%)</title><rect x="0.0049%" y="149" width="1.8113%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1104"/><text x="0.2549%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="1.8802%" y="261" width="0.0180%" height="15" fill="rgb(250,191,14)" fg:x="1146" fg:w="11"/><text x="2.1302%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.06%)</title><rect x="1.9113%" y="261" width="0.0591%" height="15" fill="rgb(239,60,40)" fg:x="1165" fg:w="36"/><text x="2.1613%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (378 samples, 0.62%)</title><rect x="1.9704%" y="261" width="0.6202%" height="15" fill="rgb(206,27,48)" fg:x="1201" fg:w="378"/><text x="2.2204%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (8 samples, 0.01%)</title><rect x="2.5906%" y="261" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="1579" fg:w="8"/><text x="2.8406%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="2.6053%" y="261" width="0.0148%" height="15" fill="rgb(250,213,24)" fg:x="1588" fg:w="9"/><text x="2.8553%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="2.6070%" y="245" width="0.0131%" height="15" fill="rgb(247,123,22)" fg:x="1589" fg:w="8"/><text x="2.8570%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="2.6086%" y="229" width="0.0115%" height="15" fill="rgb(231,138,38)" fg:x="1590" fg:w="7"/><text x="2.8586%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (548 samples, 0.90%)</title><rect x="2.6349%" y="261" width="0.8991%" height="15" fill="rgb(231,145,46)" fg:x="1606" fg:w="548"/><text x="2.8849%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (58 samples, 0.10%)</title><rect x="3.5339%" y="261" width="0.0952%" height="15" fill="rgb(251,118,11)" fg:x="2154" fg:w="58"/><text x="3.7839%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (38 samples, 0.06%)</title><rect x="3.6291%" y="261" width="0.0623%" height="15" fill="rgb(217,147,25)" fg:x="2212" fg:w="38"/><text x="3.8791%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="4.1607%" y="245" width="0.0164%" height="15" fill="rgb(247,81,37)" fg:x="2536" fg:w="10"/><text x="4.4107%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="4.1639%" y="229" width="0.0131%" height="15" fill="rgb(209,12,38)" fg:x="2538" fg:w="8"/><text x="4.4139%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="4.1639%" y="213" width="0.0131%" height="15" fill="rgb(227,1,9)" fg:x="2538" fg:w="8"/><text x="4.4139%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="4.1656%" y="197" width="0.0115%" height="15" fill="rgb(248,47,43)" fg:x="2539" fg:w="7"/><text x="4.4156%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.02%)</title><rect x="4.1787%" y="245" width="0.0213%" height="15" fill="rgb(221,10,30)" fg:x="2547" fg:w="13"/><text x="4.4287%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="4.1853%" y="229" width="0.0148%" height="15" fill="rgb(210,229,1)" fg:x="2551" fg:w="9"/><text x="4.4353%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="4.1869%" y="213" width="0.0131%" height="15" fill="rgb(222,148,37)" fg:x="2552" fg:w="8"/><text x="4.4369%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (306 samples, 0.50%)</title><rect x="3.6996%" y="261" width="0.5020%" height="15" fill="rgb(234,67,33)" fg:x="2255" fg:w="306"/><text x="3.9496%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (102 samples, 0.17%)</title><rect x="11.2662%" y="245" width="0.1673%" height="15" fill="rgb(247,98,35)" fg:x="6867" fg:w="102"/><text x="11.5162%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (86 samples, 0.14%)</title><rect x="11.4336%" y="245" width="0.1411%" height="15" fill="rgb(247,138,52)" fg:x="6969" fg:w="86"/><text x="11.6836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (62 samples, 0.10%)</title><rect x="11.5812%" y="245" width="0.1017%" height="15" fill="rgb(213,79,30)" fg:x="7059" fg:w="62"/><text x="11.8312%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (94 samples, 0.15%)</title><rect x="11.6830%" y="245" width="0.1542%" height="15" fill="rgb(246,177,23)" fg:x="7121" fg:w="94"/><text x="11.9330%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,090 samples, 1.79%)</title><rect x="11.8405%" y="229" width="1.7883%" height="15" fill="rgb(230,62,27)" fg:x="7217" fg:w="1090"/><text x="12.0905%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`free_medium (1,094 samples, 1.79%)</title><rect x="11.8372%" y="245" width="1.7949%" height="15" fill="rgb(216,154,8)" fg:x="7215" fg:w="1094"/><text x="12.0872%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="13.6320%" y="245" width="0.0180%" height="15" fill="rgb(244,35,45)" fg:x="8309" fg:w="11"/><text x="13.8820%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="13.6501%" y="245" width="0.0115%" height="15" fill="rgb(251,115,12)" fg:x="8320" fg:w="7"/><text x="13.9001%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (80 samples, 0.13%)</title><rect x="13.6616%" y="245" width="0.1313%" height="15" fill="rgb(240,54,50)" fg:x="8327" fg:w="80"/><text x="13.9116%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (28 samples, 0.05%)</title><rect x="13.7928%" y="245" width="0.0459%" height="15" fill="rgb(233,84,52)" fg:x="8407" fg:w="28"/><text x="14.0428%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (20 samples, 0.03%)</title><rect x="13.8420%" y="245" width="0.0328%" height="15" fill="rgb(207,117,47)" fg:x="8437" fg:w="20"/><text x="14.0920%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 0.19%)</title><rect x="13.8798%" y="245" width="0.1854%" height="15" fill="rgb(249,43,39)" fg:x="8460" fg:w="113"/><text x="14.1298%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="14.0652%" y="245" width="0.0295%" height="15" fill="rgb(209,38,44)" fg:x="8573" fg:w="18"/><text x="14.3152%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (93 samples, 0.15%)</title><rect x="14.0947%" y="245" width="0.1526%" height="15" fill="rgb(236,212,23)" fg:x="8591" fg:w="93"/><text x="14.3447%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,343 samples, 3.84%)</title><rect x="14.2473%" y="245" width="3.8440%" height="15" fill="rgb(242,79,21)" fg:x="8684" fg:w="2343"/><text x="14.4973%" y="255.50">rust..</text></g><g><title>rust_qecp`DYLD-STUB$$free (53 samples, 0.09%)</title><rect x="18.0913%" y="245" width="0.0870%" height="15" fill="rgb(211,96,35)" fg:x="11027" fg:w="53"/><text x="18.3413%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="18.1799%" y="245" width="0.0164%" height="15" fill="rgb(253,215,40)" fg:x="11081" fg:w="10"/><text x="18.4299%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="18.1963%" y="245" width="0.0197%" height="15" fill="rgb(211,81,21)" fg:x="11091" fg:w="12"/><text x="18.4463%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="18.2324%" y="245" width="0.0131%" height="15" fill="rgb(208,190,38)" fg:x="11113" fg:w="8"/><text x="18.4824%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="18.3489%" y="213" width="0.0148%" height="15" fill="rgb(235,213,38)" fg:x="11184" fg:w="9"/><text x="18.5989%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="18.3817%" y="181" width="0.0328%" height="15" fill="rgb(237,122,38)" fg:x="11204" fg:w="20"/><text x="18.6317%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="18.4276%" y="165" width="0.0180%" height="15" fill="rgb(244,218,35)" fg:x="11232" fg:w="11"/><text x="18.6776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (9 samples, 0.01%)</title><rect x="18.4555%" y="165" width="0.0148%" height="15" fill="rgb(240,68,47)" fg:x="11249" fg:w="9"/><text x="18.7055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="18.4801%" y="149" width="0.0230%" height="15" fill="rgb(210,16,53)" fg:x="11264" fg:w="14"/><text x="18.7301%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="18.4850%" y="133" width="0.0180%" height="15" fill="rgb(235,124,12)" fg:x="11267" fg:w="11"/><text x="18.7350%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="18.4768%" y="165" width="0.0279%" height="15" fill="rgb(224,169,11)" fg:x="11262" fg:w="17"/><text x="18.7268%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (54 samples, 0.09%)</title><rect x="18.4211%" y="181" width="0.0886%" height="15" fill="rgb(250,166,2)" fg:x="11228" fg:w="54"/><text x="18.6711%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (162 samples, 0.27%)</title><rect x="18.3686%" y="197" width="0.2658%" height="15" fill="rgb(242,216,29)" fg:x="11196" fg:w="162"/><text x="18.6186%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 0.12%)</title><rect x="18.5096%" y="181" width="0.1247%" height="15" fill="rgb(230,116,27)" fg:x="11282" fg:w="76"/><text x="18.7596%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (251 samples, 0.41%)</title><rect x="18.2455%" y="245" width="0.4118%" height="15" fill="rgb(228,99,48)" fg:x="11121" fg:w="251"/><text x="18.4955%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (190 samples, 0.31%)</title><rect x="18.3456%" y="229" width="0.3117%" height="15" fill="rgb(253,11,6)" fg:x="11182" fg:w="190"/><text x="18.5956%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (178 samples, 0.29%)</title><rect x="18.3653%" y="213" width="0.2920%" height="15" fill="rgb(247,143,39)" fg:x="11194" fg:w="178"/><text x="18.6153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="18.8000%" y="229" width="0.0279%" height="15" fill="rgb(236,97,10)" fg:x="11459" fg:w="17"/><text x="19.0500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (120 samples, 0.20%)</title><rect x="19.3283%" y="213" width="0.1969%" height="15" fill="rgb(233,208,19)" fg:x="11781" fg:w="120"/><text x="19.5783%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="19.5252%" y="213" width="0.0230%" height="15" fill="rgb(216,164,2)" fg:x="11901" fg:w="14"/><text x="19.7752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (40 samples, 0.07%)</title><rect x="19.5482%" y="213" width="0.0656%" height="15" fill="rgb(220,129,5)" fg:x="11915" fg:w="40"/><text x="19.7982%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (577 samples, 0.95%)</title><rect x="18.8279%" y="229" width="0.9466%" height="15" fill="rgb(242,17,10)" fg:x="11476" fg:w="577"/><text x="19.0779%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (98 samples, 0.16%)</title><rect x="19.6138%" y="213" width="0.1608%" height="15" fill="rgb(242,107,0)" fg:x="11955" fg:w="98"/><text x="19.8638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (72 samples, 0.12%)</title><rect x="19.6565%" y="197" width="0.1181%" height="15" fill="rgb(251,28,31)" fg:x="11981" fg:w="72"/><text x="19.9065%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.07%)</title><rect x="19.7762%" y="213" width="0.0738%" height="15" fill="rgb(233,223,10)" fg:x="12054" fg:w="45"/><text x="20.0262%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (47 samples, 0.08%)</title><rect x="19.7746%" y="229" width="0.0771%" height="15" fill="rgb(215,21,27)" fg:x="12053" fg:w="47"/><text x="20.0246%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (101 samples, 0.17%)</title><rect x="20.1191%" y="213" width="0.1657%" height="15" fill="rgb(232,23,21)" fg:x="12263" fg:w="101"/><text x="20.3691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (19 samples, 0.03%)</title><rect x="20.2848%" y="213" width="0.0312%" height="15" fill="rgb(244,5,23)" fg:x="12364" fg:w="19"/><text x="20.5348%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (36 samples, 0.06%)</title><rect x="20.3160%" y="213" width="0.0591%" height="15" fill="rgb(226,81,46)" fg:x="12383" fg:w="36"/><text x="20.5660%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (507 samples, 0.83%)</title><rect x="19.8517%" y="229" width="0.8318%" height="15" fill="rgb(247,70,30)" fg:x="12100" fg:w="507"/><text x="20.1017%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (188 samples, 0.31%)</title><rect x="20.3750%" y="213" width="0.3084%" height="15" fill="rgb(212,68,19)" fg:x="12419" fg:w="188"/><text x="20.6250%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (87 samples, 0.14%)</title><rect x="20.9804%" y="197" width="0.1427%" height="15" fill="rgb(240,187,13)" fg:x="12788" fg:w="87"/><text x="21.2304%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (386 samples, 0.63%)</title><rect x="20.6835%" y="229" width="0.6333%" height="15" fill="rgb(223,113,26)" fg:x="12607" fg:w="386"/><text x="20.9335%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (315 samples, 0.52%)</title><rect x="20.8000%" y="213" width="0.5168%" height="15" fill="rgb(206,192,2)" fg:x="12678" fg:w="315"/><text x="21.0500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (118 samples, 0.19%)</title><rect x="21.1232%" y="197" width="0.1936%" height="15" fill="rgb(241,108,4)" fg:x="12875" fg:w="118"/><text x="21.3732%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (41 samples, 0.07%)</title><rect x="21.3168%" y="229" width="0.0673%" height="15" fill="rgb(247,173,49)" fg:x="12993" fg:w="41"/><text x="21.5668%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (253 samples, 0.42%)</title><rect x="21.3840%" y="229" width="0.4151%" height="15" fill="rgb(224,114,35)" fg:x="13034" fg:w="253"/><text x="21.6340%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (120 samples, 0.20%)</title><rect x="21.6022%" y="213" width="0.1969%" height="15" fill="rgb(245,159,27)" fg:x="13167" fg:w="120"/><text x="21.8522%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (120 samples, 0.20%)</title><rect x="21.6022%" y="197" width="0.1969%" height="15" fill="rgb(245,172,44)" fg:x="13167" fg:w="120"/><text x="21.8522%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (43 samples, 0.07%)</title><rect x="21.7991%" y="229" width="0.0705%" height="15" fill="rgb(236,23,11)" fg:x="13287" fg:w="43"/><text x="22.0491%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (8 samples, 0.01%)</title><rect x="21.8729%" y="229" width="0.0131%" height="15" fill="rgb(205,117,38)" fg:x="13332" fg:w="8"/><text x="22.1229%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (11 samples, 0.02%)</title><rect x="21.8861%" y="229" width="0.0180%" height="15" fill="rgb(237,72,25)" fg:x="13340" fg:w="11"/><text x="22.1361%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (54 samples, 0.09%)</title><rect x="21.9123%" y="229" width="0.0886%" height="15" fill="rgb(244,70,9)" fg:x="13356" fg:w="54"/><text x="22.1623%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="22.0009%" y="229" width="0.0295%" height="15" fill="rgb(217,125,39)" fg:x="13410" fg:w="18"/><text x="22.2509%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="22.0305%" y="229" width="0.0230%" height="15" fill="rgb(235,36,10)" fg:x="13428" fg:w="14"/><text x="22.2805%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="22.0534%" y="229" width="0.0131%" height="15" fill="rgb(251,123,47)" fg:x="13442" fg:w="8"/><text x="22.3034%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (72 samples, 0.12%)</title><rect x="22.2372%" y="197" width="0.1181%" height="15" fill="rgb(221,13,13)" fg:x="13554" fg:w="72"/><text x="22.4872%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (159 samples, 0.26%)</title><rect x="22.1043%" y="213" width="0.2609%" height="15" fill="rgb(238,131,9)" fg:x="13473" fg:w="159"/><text x="22.3543%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="22.3651%" y="213" width="0.0148%" height="15" fill="rgb(211,50,8)" fg:x="13632" fg:w="9"/><text x="22.6151%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (83 samples, 0.14%)</title><rect x="22.3799%" y="213" width="0.1362%" height="15" fill="rgb(245,182,24)" fg:x="13641" fg:w="83"/><text x="22.6299%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (18 samples, 0.03%)</title><rect x="22.4865%" y="197" width="0.0295%" height="15" fill="rgb(242,14,37)" fg:x="13706" fg:w="18"/><text x="22.7365%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.03%)</title><rect x="22.4865%" y="181" width="0.0295%" height="15" fill="rgb(246,228,12)" fg:x="13706" fg:w="18"/><text x="22.7365%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,362 samples, 3.88%)</title><rect x="18.6589%" y="245" width="3.8752%" height="15" fill="rgb(213,55,15)" fg:x="11373" fg:w="2362"/><text x="18.9089%" y="255.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (284 samples, 0.47%)</title><rect x="22.0682%" y="229" width="0.4659%" height="15" fill="rgb(209,9,3)" fg:x="13451" fg:w="284"/><text x="22.3182%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="22.5161%" y="213" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="13724" fg:w="11"/><text x="22.7661%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (254 samples, 0.42%)</title><rect x="22.5341%" y="245" width="0.4167%" height="15" fill="rgb(209,121,21)" fg:x="13735" fg:w="254"/><text x="22.7841%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (204 samples, 0.33%)</title><rect x="22.6162%" y="229" width="0.3347%" height="15" fill="rgb(220,109,13)" fg:x="13785" fg:w="204"/><text x="22.8662%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (113 samples, 0.19%)</title><rect x="22.7655%" y="213" width="0.1854%" height="15" fill="rgb(232,18,1)" fg:x="13876" fg:w="113"/><text x="23.0155%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (48 samples, 0.08%)</title><rect x="22.8721%" y="197" width="0.0788%" height="15" fill="rgb(215,41,42)" fg:x="13941" fg:w="48"/><text x="23.1221%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (14 samples, 0.02%)</title><rect x="22.9279%" y="181" width="0.0230%" height="15" fill="rgb(224,123,36)" fg:x="13975" fg:w="14"/><text x="23.1779%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (173 samples, 0.28%)</title><rect x="22.9508%" y="245" width="0.2838%" height="15" fill="rgb(240,125,3)" fg:x="13989" fg:w="173"/><text x="23.2008%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,172 samples, 5.20%)</title><rect x="23.2347%" y="245" width="5.2041%" height="15" fill="rgb(205,98,50)" fg:x="14162" fg:w="3172"/><text x="23.4847%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (178 samples, 0.29%)</title><rect x="28.4388%" y="245" width="0.2920%" height="15" fill="rgb(205,185,37)" fg:x="17334" fg:w="178"/><text x="28.6888%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="28.9047%" y="229" width="0.0131%" height="15" fill="rgb(238,207,15)" fg:x="17618" fg:w="8"/><text x="29.1547%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (105 samples, 0.17%)</title><rect x="28.9408%" y="229" width="0.1723%" height="15" fill="rgb(213,199,42)" fg:x="17640" fg:w="105"/><text x="29.1908%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="29.4149%" y="213" width="0.0246%" height="15" fill="rgb(235,201,11)" fg:x="17929" fg:w="15"/><text x="29.6649%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="29.4199%" y="197" width="0.0197%" height="15" fill="rgb(207,46,11)" fg:x="17932" fg:w="12"/><text x="29.6699%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (53 samples, 0.09%)</title><rect x="29.4412%" y="213" width="0.0870%" height="15" fill="rgb(241,35,35)" fg:x="17945" fg:w="53"/><text x="29.6912%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (210 samples, 0.34%)</title><rect x="29.5282%" y="213" width="0.3445%" height="15" fill="rgb(243,32,47)" fg:x="17998" fg:w="210"/><text x="29.7782%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,058 samples, 1.74%)</title><rect x="28.7308%" y="245" width="1.7358%" height="15" fill="rgb(247,202,23)" fg:x="17512" fg:w="1058"/><text x="28.9808%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (825 samples, 1.35%)</title><rect x="29.1131%" y="229" width="1.3535%" height="15" fill="rgb(219,102,11)" fg:x="17745" fg:w="825"/><text x="29.3631%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (362 samples, 0.59%)</title><rect x="29.8727%" y="213" width="0.5939%" height="15" fill="rgb(243,110,44)" fg:x="18208" fg:w="362"/><text x="30.1227%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (13 samples, 0.02%)</title><rect x="30.4666%" y="245" width="0.0213%" height="15" fill="rgb(222,74,54)" fg:x="18570" fg:w="13"/><text x="30.7166%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (10 samples, 0.02%)</title><rect x="30.4879%" y="245" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="18583" fg:w="10"/><text x="30.7379%" y="255.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (184 samples, 0.30%)</title><rect x="30.5043%" y="245" width="0.3019%" height="15" fill="rgb(226,22,26)" fg:x="18593" fg:w="184"/><text x="30.7543%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,261 samples, 6.99%)</title><rect x="35.4131%" y="229" width="6.9907%" height="15" fill="rgb(217,163,10)" fg:x="21585" fg:w="4261"/><text x="35.6631%" y="239.50">rust_qecp..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.02%)</title><rect x="42.4235%" y="165" width="0.0180%" height="15" fill="rgb(213,25,53)" fg:x="25858" fg:w="11"/><text x="42.6735%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (41 samples, 0.07%)</title><rect x="42.4039%" y="229" width="0.0673%" height="15" fill="rgb(252,105,26)" fg:x="25846" fg:w="41"/><text x="42.6539%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (39 samples, 0.06%)</title><rect x="42.4071%" y="213" width="0.0640%" height="15" fill="rgb(220,39,43)" fg:x="25848" fg:w="39"/><text x="42.6571%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 0.06%)</title><rect x="42.4104%" y="197" width="0.0607%" height="15" fill="rgb(229,68,48)" fg:x="25850" fg:w="37"/><text x="42.6604%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (36 samples, 0.06%)</title><rect x="42.4121%" y="181" width="0.0591%" height="15" fill="rgb(252,8,32)" fg:x="25851" fg:w="36"/><text x="42.6621%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="42.4416%" y="165" width="0.0295%" height="15" fill="rgb(223,20,43)" fg:x="25869" fg:w="18"/><text x="42.6916%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,824 samples, 4.63%)</title><rect x="42.4711%" y="229" width="4.6332%" height="15" fill="rgb(229,81,49)" fg:x="25887" fg:w="2824"/><text x="42.7211%" y="239.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (582 samples, 0.95%)</title><rect x="47.1043%" y="229" width="0.9548%" height="15" fill="rgb(236,28,36)" fg:x="28711" fg:w="582"/><text x="47.3543%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (20 samples, 0.03%)</title><rect x="48.1280%" y="213" width="0.0328%" height="15" fill="rgb(249,185,26)" fg:x="29335" fg:w="20"/><text x="48.3780%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.03%)</title><rect x="48.1297%" y="197" width="0.0312%" height="15" fill="rgb(249,174,33)" fg:x="29336" fg:w="19"/><text x="48.3797%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (144 samples, 0.24%)</title><rect x="48.1756%" y="213" width="0.2363%" height="15" fill="rgb(233,201,37)" fg:x="29364" fg:w="144"/><text x="48.4256%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="48.5874%" y="197" width="0.0230%" height="15" fill="rgb(221,78,26)" fg:x="29615" fg:w="14"/><text x="48.8374%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="48.5907%" y="181" width="0.0197%" height="15" fill="rgb(250,127,30)" fg:x="29617" fg:w="12"/><text x="48.8407%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (212 samples, 0.35%)</title><rect x="48.6104%" y="197" width="0.3478%" height="15" fill="rgb(230,49,44)" fg:x="29629" fg:w="212"/><text x="48.8604%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (721 samples, 1.18%)</title><rect x="48.0591%" y="229" width="1.1829%" height="15" fill="rgb(229,67,23)" fg:x="29293" fg:w="721"/><text x="48.3091%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (506 samples, 0.83%)</title><rect x="48.4119%" y="213" width="0.8302%" height="15" fill="rgb(249,83,47)" fg:x="29508" fg:w="506"/><text x="48.6619%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (173 samples, 0.28%)</title><rect x="48.9582%" y="197" width="0.2838%" height="15" fill="rgb(215,43,3)" fg:x="29841" fg:w="173"/><text x="49.2082%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.02%)</title><rect x="54.2755%" y="149" width="0.0164%" height="15" fill="rgb(238,154,13)" fg:x="33082" fg:w="10"/><text x="54.5255%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (14,333 samples, 23.52%)</title><rect x="30.8062%" y="245" width="23.5152%" height="15" fill="rgb(219,56,2)" fg:x="18777" fg:w="14333"/><text x="31.0562%" y="255.50">rust_qecp`rust_qecp::ftqec::PlanarCod..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,096 samples, 5.08%)</title><rect x="49.2420%" y="229" width="5.0794%" height="15" fill="rgb(233,0,4)" fg:x="30014" fg:w="3096"/><text x="49.4920%" y="239.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 0.06%)</title><rect x="54.2657%" y="213" width="0.0558%" height="15" fill="rgb(235,30,7)" fg:x="33076" fg:w="34"/><text x="54.5157%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="54.2673%" y="197" width="0.0541%" height="15" fill="rgb(250,79,13)" fg:x="33077" fg:w="33"/><text x="54.5173%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.05%)</title><rect x="54.2706%" y="181" width="0.0509%" height="15" fill="rgb(211,146,34)" fg:x="33079" fg:w="31"/><text x="54.5206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.05%)</title><rect x="54.2722%" y="165" width="0.0492%" height="15" fill="rgb(228,22,38)" fg:x="33080" fg:w="30"/><text x="54.5222%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="54.2919%" y="149" width="0.0295%" height="15" fill="rgb(235,168,5)" fg:x="33092" fg:w="18"/><text x="54.5419%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="56.2049%" y="165" width="0.0131%" height="15" fill="rgb(221,155,16)" fg:x="34258" fg:w="8"/><text x="56.4549%" y="175.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 0.06%)</title><rect x="56.1573%" y="229" width="0.0640%" height="15" fill="rgb(215,215,53)" fg:x="34229" fg:w="39"/><text x="56.4073%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="56.2032%" y="213" width="0.0180%" height="15" fill="rgb(223,4,10)" fg:x="34257" fg:w="11"/><text x="56.4532%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="56.2049%" y="197" width="0.0164%" height="15" fill="rgb(234,103,6)" fg:x="34258" fg:w="10"/><text x="56.4549%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="56.2049%" y="181" width="0.0164%" height="15" fill="rgb(227,97,0)" fg:x="34258" fg:w="10"/><text x="56.4549%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (10 samples, 0.02%)</title><rect x="56.2393%" y="197" width="0.0164%" height="15" fill="rgb(234,150,53)" fg:x="34279" fg:w="10"/><text x="56.4893%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.04%)</title><rect x="56.2229%" y="213" width="0.0394%" height="15" fill="rgb(228,201,54)" fg:x="34269" fg:w="24"/><text x="56.4729%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.05%)</title><rect x="56.2229%" y="229" width="0.0476%" height="15" fill="rgb(222,22,37)" fg:x="34269" fg:w="29"/><text x="56.4729%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (47 samples, 0.08%)</title><rect x="56.2705%" y="213" width="0.0771%" height="15" fill="rgb(237,53,32)" fg:x="34298" fg:w="47"/><text x="56.5205%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="56.3476%" y="213" width="0.0263%" height="15" fill="rgb(233,25,53)" fg:x="34345" fg:w="16"/><text x="56.5976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="56.3739%" y="213" width="0.0312%" height="15" fill="rgb(210,40,34)" fg:x="34361" fg:w="19"/><text x="56.6239%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.04%)</title><rect x="56.4050%" y="213" width="0.0394%" height="15" fill="rgb(241,220,44)" fg:x="34380" fg:w="24"/><text x="56.6550%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="56.4444%" y="213" width="0.0345%" height="15" fill="rgb(235,28,35)" fg:x="34404" fg:w="21"/><text x="56.6944%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="56.4789%" y="213" width="0.0213%" height="15" fill="rgb(210,56,17)" fg:x="34425" fg:w="13"/><text x="56.7289%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="56.8185%" y="181" width="0.0180%" height="15" fill="rgb(224,130,29)" fg:x="34632" fg:w="11"/><text x="57.0685%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (66 samples, 0.11%)</title><rect x="57.2155%" y="149" width="0.1083%" height="15" fill="rgb(235,212,8)" fg:x="34874" fg:w="66"/><text x="57.4655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (245 samples, 0.40%)</title><rect x="56.9300%" y="165" width="0.4020%" height="15" fill="rgb(223,33,50)" fg:x="34700" fg:w="245"/><text x="57.1800%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (478 samples, 0.78%)</title><rect x="56.5954%" y="197" width="0.7842%" height="15" fill="rgb(219,149,13)" fg:x="34496" fg:w="478"/><text x="56.8454%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (331 samples, 0.54%)</title><rect x="56.8365%" y="181" width="0.5431%" height="15" fill="rgb(250,156,29)" fg:x="34643" fg:w="331"/><text x="57.0865%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="57.3320%" y="165" width="0.0476%" height="15" fill="rgb(216,193,19)" fg:x="34945" fg:w="29"/><text x="57.5820%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (37 samples, 0.06%)</title><rect x="57.3796%" y="197" width="0.0607%" height="15" fill="rgb(216,135,14)" fg:x="34974" fg:w="37"/><text x="57.6296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (174 samples, 0.29%)</title><rect x="57.4403%" y="197" width="0.2855%" height="15" fill="rgb(241,47,5)" fg:x="35011" fg:w="174"/><text x="57.6903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (78 samples, 0.13%)</title><rect x="57.5978%" y="181" width="0.1280%" height="15" fill="rgb(233,42,35)" fg:x="35107" fg:w="78"/><text x="57.8478%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="57.7258%" y="197" width="0.0312%" height="15" fill="rgb(231,13,6)" fg:x="35185" fg:w="19"/><text x="57.9758%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.07%)</title><rect x="57.7569%" y="197" width="0.0689%" height="15" fill="rgb(207,181,40)" fg:x="35204" fg:w="42"/><text x="58.0069%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="57.8258%" y="197" width="0.0131%" height="15" fill="rgb(254,173,49)" fg:x="35246" fg:w="8"/><text x="58.0758%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="57.8390%" y="197" width="0.0295%" height="15" fill="rgb(221,1,38)" fg:x="35254" fg:w="18"/><text x="58.0890%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (358 samples, 0.59%)</title><rect x="57.9144%" y="181" width="0.5873%" height="15" fill="rgb(206,124,46)" fg:x="35300" fg:w="358"/><text x="58.1644%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="58.5018%" y="181" width="0.0148%" height="15" fill="rgb(249,21,11)" fg:x="35658" fg:w="9"/><text x="58.7518%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="58.5165%" y="181" width="0.0115%" height="15" fill="rgb(222,201,40)" fg:x="35667" fg:w="7"/><text x="58.7665%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="58.5280%" y="181" width="0.0148%" height="15" fill="rgb(235,61,29)" fg:x="35674" fg:w="9"/><text x="58.7780%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (54 samples, 0.09%)</title><rect x="58.5936%" y="165" width="0.0886%" height="15" fill="rgb(219,207,3)" fg:x="35714" fg:w="54"/><text x="58.8436%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (90 samples, 0.15%)</title><rect x="58.6822%" y="165" width="0.1477%" height="15" fill="rgb(222,56,46)" fg:x="35768" fg:w="90"/><text x="58.9322%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (193 samples, 0.32%)</title><rect x="58.5428%" y="181" width="0.3166%" height="15" fill="rgb(239,76,54)" fg:x="35683" fg:w="193"/><text x="58.7928%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="58.8299%" y="165" width="0.0295%" height="15" fill="rgb(231,124,27)" fg:x="35858" fg:w="18"/><text x="59.0799%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="58.8594%" y="181" width="0.0263%" height="15" fill="rgb(249,195,6)" fg:x="35876" fg:w="16"/><text x="59.1094%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="59.1203%" y="149" width="0.0148%" height="15" fill="rgb(237,174,47)" fg:x="36035" fg:w="9"/><text x="59.3703%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.06%)</title><rect x="59.3615%" y="117" width="0.0607%" height="15" fill="rgb(206,201,31)" fg:x="36182" fg:w="37"/><text x="59.6115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (175 samples, 0.29%)</title><rect x="59.1794%" y="133" width="0.2871%" height="15" fill="rgb(231,57,52)" fg:x="36071" fg:w="175"/><text x="59.4294%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (27 samples, 0.04%)</title><rect x="59.4222%" y="117" width="0.0443%" height="15" fill="rgb(248,177,22)" fg:x="36219" fg:w="27"/><text x="59.6722%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (285 samples, 0.47%)</title><rect x="59.0235%" y="165" width="0.4676%" height="15" fill="rgb(215,211,37)" fg:x="35976" fg:w="285"/><text x="59.2735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (217 samples, 0.36%)</title><rect x="59.1351%" y="149" width="0.3560%" height="15" fill="rgb(241,128,51)" fg:x="36044" fg:w="217"/><text x="59.3851%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="59.4665%" y="133" width="0.0246%" height="15" fill="rgb(227,165,31)" fg:x="36246" fg:w="15"/><text x="59.7165%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="59.4911%" y="165" width="0.0279%" height="15" fill="rgb(228,167,24)" fg:x="36261" fg:w="17"/><text x="59.7411%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,014 samples, 1.66%)</title><rect x="57.8685%" y="197" width="1.6636%" height="15" fill="rgb(228,143,12)" fg:x="35272" fg:w="1014"/><text x="58.1185%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (394 samples, 0.65%)</title><rect x="58.8857%" y="181" width="0.6464%" height="15" fill="rgb(249,149,8)" fg:x="35892" fg:w="394"/><text x="59.1357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="59.5190%" y="165" width="0.0131%" height="15" fill="rgb(243,35,44)" fg:x="36278" fg:w="8"/><text x="59.7690%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 0.08%)</title><rect x="59.7011%" y="181" width="0.0755%" height="15" fill="rgb(246,89,9)" fg:x="36389" fg:w="46"/><text x="59.9511%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (90 samples, 0.15%)</title><rect x="59.7765%" y="181" width="0.1477%" height="15" fill="rgb(233,213,13)" fg:x="36435" fg:w="90"/><text x="60.0265%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (294 samples, 0.48%)</title><rect x="59.5321%" y="197" width="0.4823%" height="15" fill="rgb(233,141,41)" fg:x="36286" fg:w="294"/><text x="59.7821%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (55 samples, 0.09%)</title><rect x="59.9242%" y="181" width="0.0902%" height="15" fill="rgb(239,167,4)" fg:x="36525" fg:w="55"/><text x="60.1742%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="60.0144%" y="197" width="0.0164%" height="15" fill="rgb(209,217,16)" fg:x="36580" fg:w="10"/><text x="60.2644%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,172 samples, 3.56%)</title><rect x="56.5018%" y="213" width="3.5635%" height="15" fill="rgb(219,88,35)" fg:x="34439" fg:w="2172"/><text x="56.7518%" y="223.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.03%)</title><rect x="60.0308%" y="197" width="0.0345%" height="15" fill="rgb(220,193,23)" fg:x="36590" fg:w="21"/><text x="60.2808%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10 samples, 0.02%)</title><rect x="60.0653%" y="213" width="0.0164%" height="15" fill="rgb(230,90,52)" fg:x="36611" fg:w="10"/><text x="60.3153%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="60.0817%" y="213" width="0.0246%" height="15" fill="rgb(252,106,19)" fg:x="36621" fg:w="15"/><text x="60.3317%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (26 samples, 0.04%)</title><rect x="60.1063%" y="213" width="0.0427%" height="15" fill="rgb(206,74,20)" fg:x="36636" fg:w="26"/><text x="60.3563%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (14 samples, 0.02%)</title><rect x="60.1490%" y="213" width="0.0230%" height="15" fill="rgb(230,138,44)" fg:x="36662" fg:w="14"/><text x="60.3990%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.02%)</title><rect x="60.1719%" y="213" width="0.0213%" height="15" fill="rgb(235,182,43)" fg:x="36676" fg:w="13"/><text x="60.4219%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,394 samples, 3.93%)</title><rect x="56.2705%" y="229" width="3.9277%" height="15" fill="rgb(242,16,51)" fg:x="34298" fg:w="2394"/><text x="56.5205%" y="239.50">rust..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="60.4426%" y="213" width="0.0164%" height="15" fill="rgb(248,9,4)" fg:x="36841" fg:w="10"/><text x="60.6926%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="60.4590%" y="213" width="0.0476%" height="15" fill="rgb(210,31,22)" fg:x="36851" fg:w="29"/><text x="60.7090%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (21 samples, 0.03%)</title><rect x="60.5066%" y="213" width="0.0345%" height="15" fill="rgb(239,54,39)" fg:x="36880" fg:w="21"/><text x="60.7566%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (35 samples, 0.06%)</title><rect x="60.5411%" y="213" width="0.0574%" height="15" fill="rgb(230,99,41)" fg:x="36901" fg:w="35"/><text x="60.7911%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="60.5985%" y="213" width="0.0213%" height="15" fill="rgb(253,106,12)" fg:x="36936" fg:w="13"/><text x="60.8485%" y="223.50"></text></g><g><title>rust_qecp`__rdl_realloc (12 samples, 0.02%)</title><rect x="60.6198%" y="213" width="0.0197%" height="15" fill="rgb(213,46,41)" fg:x="36949" fg:w="12"/><text x="60.8698%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (112 samples, 0.18%)</title><rect x="60.9562%" y="165" width="0.1838%" height="15" fill="rgb(215,133,35)" fg:x="37154" fg:w="112"/><text x="61.2062%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="61.0874%" y="149" width="0.0525%" height="15" fill="rgb(213,28,5)" fg:x="37234" fg:w="32"/><text x="61.3374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (258 samples, 0.42%)</title><rect x="60.7347%" y="197" width="0.4233%" height="15" fill="rgb(215,77,49)" fg:x="37019" fg:w="258"/><text x="60.9847%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (164 samples, 0.27%)</title><rect x="60.8889%" y="181" width="0.2691%" height="15" fill="rgb(248,100,22)" fg:x="37113" fg:w="164"/><text x="61.1389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="61.1399%" y="165" width="0.0180%" height="15" fill="rgb(208,67,9)" fg:x="37266" fg:w="11"/><text x="61.3899%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="61.1580%" y="197" width="0.0345%" height="15" fill="rgb(219,133,21)" fg:x="37277" fg:w="21"/><text x="61.4080%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.02%)</title><rect x="61.1924%" y="197" width="0.0246%" height="15" fill="rgb(246,46,29)" fg:x="37298" fg:w="15"/><text x="61.4424%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.06%)</title><rect x="61.2219%" y="197" width="0.0558%" height="15" fill="rgb(246,185,52)" fg:x="37316" fg:w="34"/><text x="61.4719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (34 samples, 0.06%)</title><rect x="61.5271%" y="181" width="0.0558%" height="15" fill="rgb(252,136,11)" fg:x="37502" fg:w="34"/><text x="61.7771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (13 samples, 0.02%)</title><rect x="61.7437%" y="165" width="0.0213%" height="15" fill="rgb(219,138,53)" fg:x="37634" fg:w="13"/><text x="61.9937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (33 samples, 0.05%)</title><rect x="61.7650%" y="165" width="0.0541%" height="15" fill="rgb(211,51,23)" fg:x="37647" fg:w="33"/><text x="62.0150%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.06%)</title><rect x="61.8191%" y="165" width="0.0574%" height="15" fill="rgb(247,221,28)" fg:x="37680" fg:w="35"/><text x="62.0691%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (218 samples, 0.36%)</title><rect x="61.8766%" y="165" width="0.3577%" height="15" fill="rgb(251,222,45)" fg:x="37715" fg:w="218"/><text x="62.1266%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (38 samples, 0.06%)</title><rect x="62.4065%" y="149" width="0.0623%" height="15" fill="rgb(217,162,53)" fg:x="38038" fg:w="38"/><text x="62.6565%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (121 samples, 0.20%)</title><rect x="62.4688%" y="149" width="0.1985%" height="15" fill="rgb(229,93,14)" fg:x="38076" fg:w="121"/><text x="62.7188%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.07%)</title><rect x="62.9151%" y="117" width="0.0738%" height="15" fill="rgb(209,67,49)" fg:x="38348" fg:w="45"/><text x="63.1651%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (178 samples, 0.29%)</title><rect x="62.7231%" y="133" width="0.2920%" height="15" fill="rgb(213,87,29)" fg:x="38231" fg:w="178"/><text x="62.9731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.03%)</title><rect x="62.9889%" y="117" width="0.0263%" height="15" fill="rgb(205,151,52)" fg:x="38393" fg:w="16"/><text x="63.2389%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (218 samples, 0.36%)</title><rect x="62.6673%" y="149" width="0.3577%" height="15" fill="rgb(253,215,39)" fg:x="38197" fg:w="218"/><text x="62.9173%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (180 samples, 0.30%)</title><rect x="63.0250%" y="149" width="0.2953%" height="15" fill="rgb(221,220,41)" fg:x="38415" fg:w="180"/><text x="63.2750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="63.3564%" y="133" width="0.0131%" height="15" fill="rgb(218,133,21)" fg:x="38617" fg:w="8"/><text x="63.6064%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (60 samples, 0.10%)</title><rect x="63.4778%" y="117" width="0.0984%" height="15" fill="rgb(221,193,43)" fg:x="38691" fg:w="60"/><text x="63.7278%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (273 samples, 0.45%)</title><rect x="63.3203%" y="149" width="0.4479%" height="15" fill="rgb(240,128,52)" fg:x="38595" fg:w="273"/><text x="63.5703%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (243 samples, 0.40%)</title><rect x="63.3695%" y="133" width="0.3987%" height="15" fill="rgb(253,114,12)" fg:x="38625" fg:w="243"/><text x="63.6195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (117 samples, 0.19%)</title><rect x="63.5763%" y="117" width="0.1920%" height="15" fill="rgb(215,223,47)" fg:x="38751" fg:w="117"/><text x="63.8263%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (947 samples, 1.55%)</title><rect x="62.2342%" y="165" width="1.5537%" height="15" fill="rgb(248,225,23)" fg:x="37933" fg:w="947"/><text x="62.4842%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="63.7682%" y="149" width="0.0197%" height="15" fill="rgb(250,108,0)" fg:x="38868" fg:w="12"/><text x="64.0182%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,420 samples, 2.33%)</title><rect x="61.5829%" y="181" width="2.3297%" height="15" fill="rgb(228,208,7)" fg:x="37536" fg:w="1420"/><text x="61.8329%" y="191.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.11%)</title><rect x="63.7977%" y="165" width="0.1148%" height="15" fill="rgb(244,45,10)" fg:x="38886" fg:w="70"/><text x="64.0477%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (130 samples, 0.21%)</title><rect x="63.9126%" y="181" width="0.2133%" height="15" fill="rgb(207,125,25)" fg:x="38956" fg:w="130"/><text x="64.1626%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (26 samples, 0.04%)</title><rect x="64.1259%" y="181" width="0.0427%" height="15" fill="rgb(210,195,18)" fg:x="39086" fg:w="26"/><text x="64.3759%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,777 samples, 2.92%)</title><rect x="61.2777%" y="197" width="2.9154%" height="15" fill="rgb(249,80,12)" fg:x="37350" fg:w="1777"/><text x="61.5277%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="64.1685%" y="181" width="0.0246%" height="15" fill="rgb(221,65,9)" fg:x="39112" fg:w="15"/><text x="64.4185%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,445 samples, 4.01%)</title><rect x="60.2048%" y="229" width="4.0114%" height="15" fill="rgb(235,49,36)" fg:x="36696" fg:w="2445"/><text x="60.4548%" y="239.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,180 samples, 3.58%)</title><rect x="60.6395%" y="213" width="3.5766%" height="15" fill="rgb(225,32,20)" fg:x="36961" fg:w="2180"/><text x="60.8895%" y="223.50">rust..</text></g><g><title>rust_qecp`__rdl_realloc (14 samples, 0.02%)</title><rect x="64.1931%" y="197" width="0.0230%" height="15" fill="rgb(215,141,46)" fg:x="39127" fg:w="14"/><text x="64.4431%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (76 samples, 0.12%)</title><rect x="64.2161%" y="229" width="0.1247%" height="15" fill="rgb(250,160,47)" fg:x="39141" fg:w="76"/><text x="64.4661%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (88 samples, 0.14%)</title><rect x="64.3408%" y="213" width="0.1444%" height="15" fill="rgb(216,222,40)" fg:x="39217" fg:w="88"/><text x="64.5908%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.03%)</title><rect x="64.4934%" y="213" width="0.0263%" height="15" fill="rgb(234,217,39)" fg:x="39310" fg:w="16"/><text x="64.7434%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="64.4983%" y="197" width="0.0213%" height="15" fill="rgb(207,178,40)" fg:x="39313" fg:w="13"/><text x="64.7483%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.04%)</title><rect x="64.6443%" y="197" width="0.0377%" height="15" fill="rgb(221,136,13)" fg:x="39402" fg:w="23"/><text x="64.8943%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="64.6820%" y="197" width="0.0180%" height="15" fill="rgb(249,199,10)" fg:x="39425" fg:w="11"/><text x="64.9320%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="64.7001%" y="197" width="0.0197%" height="15" fill="rgb(249,222,13)" fg:x="39436" fg:w="12"/><text x="64.9501%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="64.7198%" y="197" width="0.0164%" height="15" fill="rgb(244,185,38)" fg:x="39448" fg:w="10"/><text x="64.9698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.04%)</title><rect x="65.1185%" y="165" width="0.0427%" height="15" fill="rgb(236,202,9)" fg:x="39691" fg:w="26"/><text x="65.3685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.04%)</title><rect x="65.1611%" y="165" width="0.0443%" height="15" fill="rgb(250,229,37)" fg:x="39717" fg:w="27"/><text x="65.4111%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="65.2661%" y="149" width="0.0213%" height="15" fill="rgb(206,174,23)" fg:x="39781" fg:w="13"/><text x="65.5161%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (543 samples, 0.89%)</title><rect x="65.6582%" y="117" width="0.8909%" height="15" fill="rgb(211,33,43)" fg:x="40020" fg:w="543"/><text x="65.9082%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (34 samples, 0.06%)</title><rect x="66.5491%" y="117" width="0.0558%" height="15" fill="rgb(245,58,50)" fg:x="40563" fg:w="34"/><text x="66.7991%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,175 samples, 1.93%)</title><rect x="64.8215%" y="181" width="1.9277%" height="15" fill="rgb(244,68,36)" fg:x="39510" fg:w="1175"/><text x="65.0715%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (941 samples, 1.54%)</title><rect x="65.2054%" y="165" width="1.5438%" height="15" fill="rgb(232,229,15)" fg:x="39744" fg:w="941"/><text x="65.4554%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (891 samples, 1.46%)</title><rect x="65.2874%" y="149" width="1.4618%" height="15" fill="rgb(254,30,23)" fg:x="39794" fg:w="891"/><text x="65.5374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (745 samples, 1.22%)</title><rect x="65.5270%" y="133" width="1.2223%" height="15" fill="rgb(235,160,14)" fg:x="39940" fg:w="745"/><text x="65.7770%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (88 samples, 0.14%)</title><rect x="66.6049%" y="117" width="0.1444%" height="15" fill="rgb(212,155,44)" fg:x="40597" fg:w="88"/><text x="66.8549%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (202 samples, 0.33%)</title><rect x="66.7492%" y="181" width="0.3314%" height="15" fill="rgb(226,2,50)" fg:x="40685" fg:w="202"/><text x="66.9992%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (440 samples, 0.72%)</title><rect x="67.0807%" y="181" width="0.7219%" height="15" fill="rgb(234,177,6)" fg:x="40887" fg:w="440"/><text x="67.3307%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,010 samples, 3.30%)</title><rect x="64.5213%" y="213" width="3.2977%" height="15" fill="rgb(217,24,9)" fg:x="39327" fg:w="2010"/><text x="64.7713%" y="223.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,879 samples, 3.08%)</title><rect x="64.7362%" y="197" width="3.0828%" height="15" fill="rgb(220,13,46)" fg:x="39458" fg:w="1879"/><text x="64.9862%" y="207.50">rus..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="67.8025%" y="181" width="0.0164%" height="15" fill="rgb(239,221,27)" fg:x="41327" fg:w="10"/><text x="68.0525%" y="191.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,146 samples, 3.52%)</title><rect x="64.3408%" y="229" width="3.5208%" height="15" fill="rgb(222,198,25)" fg:x="39217" fg:w="2146"/><text x="64.5908%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (26 samples, 0.04%)</title><rect x="67.8189%" y="213" width="0.0427%" height="15" fill="rgb(211,99,13)" fg:x="41337" fg:w="26"/><text x="68.0689%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (16 samples, 0.03%)</title><rect x="68.2553%" y="213" width="0.0263%" height="15" fill="rgb(232,111,31)" fg:x="41603" fg:w="16"/><text x="68.5053%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (52 samples, 0.09%)</title><rect x="68.8361%" y="197" width="0.0853%" height="15" fill="rgb(245,82,37)" fg:x="41957" fg:w="52"/><text x="69.0861%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (36 samples, 0.06%)</title><rect x="69.5383%" y="181" width="0.0591%" height="15" fill="rgb(227,149,46)" fg:x="42385" fg:w="36"/><text x="69.7883%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (48 samples, 0.08%)</title><rect x="70.1929%" y="165" width="0.0788%" height="15" fill="rgb(218,36,50)" fg:x="42784" fg:w="48"/><text x="70.4429%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (19 samples, 0.03%)</title><rect x="70.6868%" y="149" width="0.0312%" height="15" fill="rgb(226,80,48)" fg:x="43085" fg:w="19"/><text x="70.9368%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (31 samples, 0.05%)</title><rect x="70.9591%" y="133" width="0.0509%" height="15" fill="rgb(238,224,15)" fg:x="43251" fg:w="31"/><text x="71.2091%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="71.1019%" y="117" width="0.0230%" height="15" fill="rgb(241,136,10)" fg:x="43338" fg:w="14"/><text x="71.3519%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,998 samples, 3.28%)</title><rect x="67.8616%" y="229" width="3.2780%" height="15" fill="rgb(208,32,45)" fg:x="41363" fg:w="1998"/><text x="68.1116%" y="239.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,742 samples, 2.86%)</title><rect x="68.2816%" y="213" width="2.8580%" height="15" fill="rgb(207,135,9)" fg:x="41619" fg:w="1742"/><text x="68.5316%" y="223.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,352 samples, 2.22%)</title><rect x="68.9214%" y="197" width="2.2181%" height="15" fill="rgb(206,86,44)" fg:x="42009" fg:w="1352"/><text x="69.1714%" y="207.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (940 samples, 1.54%)</title><rect x="69.5974%" y="181" width="1.5422%" height="15" fill="rgb(245,177,15)" fg:x="42421" fg:w="940"/><text x="69.8474%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (529 samples, 0.87%)</title><rect x="70.2717%" y="165" width="0.8679%" height="15" fill="rgb(206,64,50)" fg:x="42832" fg:w="529"/><text x="70.5217%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (257 samples, 0.42%)</title><rect x="70.7179%" y="149" width="0.4216%" height="15" fill="rgb(234,36,40)" fg:x="43104" fg:w="257"/><text x="70.9679%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (79 samples, 0.13%)</title><rect x="71.0100%" y="133" width="0.1296%" height="15" fill="rgb(213,64,8)" fg:x="43282" fg:w="79"/><text x="71.2600%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (9 samples, 0.01%)</title><rect x="71.1248%" y="117" width="0.0148%" height="15" fill="rgb(210,75,36)" fg:x="43352" fg:w="9"/><text x="71.3748%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (672 samples, 1.10%)</title><rect x="73.5037%" y="213" width="1.1025%" height="15" fill="rgb(229,88,21)" fg:x="44802" fg:w="672"/><text x="73.7537%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,334 samples, 2.19%)</title><rect x="74.6062%" y="213" width="2.1886%" height="15" fill="rgb(252,204,47)" fg:x="45474" fg:w="1334"/><text x="74.8562%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,530 samples, 7.43%)</title><rect x="71.1396%" y="229" width="7.4321%" height="15" fill="rgb(208,77,27)" fg:x="43361" fg:w="4530"/><text x="71.3896%" y="239.50">rust_qecp`..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,083 samples, 1.78%)</title><rect x="76.7949%" y="213" width="1.7768%" height="15" fill="rgb(221,76,26)" fg:x="46808" fg:w="1083"/><text x="77.0449%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (90 samples, 0.15%)</title><rect x="78.5717%" y="229" width="0.1477%" height="15" fill="rgb(225,139,18)" fg:x="47891" fg:w="90"/><text x="78.8217%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (15,436 samples, 25.32%)</title><rect x="54.3313%" y="245" width="25.3248%" height="15" fill="rgb(230,137,11)" fg:x="33116" fg:w="15436"/><text x="54.5813%" y="255.50">rust_qecp`rust_qecp::union_find_decoder:..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (571 samples, 0.94%)</title><rect x="78.7193%" y="229" width="0.9368%" height="15" fill="rgb(212,28,1)" fg:x="47981" fg:w="571"/><text x="78.9693%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (60 samples, 0.10%)</title><rect x="81.0359%" y="229" width="0.0984%" height="15" fill="rgb(248,164,17)" fg:x="49393" fg:w="60"/><text x="81.2859%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (47 samples, 0.08%)</title><rect x="81.2164%" y="197" width="0.0771%" height="15" fill="rgb(222,171,42)" fg:x="49503" fg:w="47"/><text x="81.4664%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="81.2656%" y="181" width="0.0279%" height="15" fill="rgb(243,84,45)" fg:x="49533" fg:w="17"/><text x="81.5156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (62 samples, 0.10%)</title><rect x="81.1967%" y="213" width="0.1017%" height="15" fill="rgb(252,49,23)" fg:x="49491" fg:w="62"/><text x="81.4467%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (103 samples, 0.17%)</title><rect x="81.1343%" y="229" width="0.1690%" height="15" fill="rgb(215,19,7)" fg:x="49453" fg:w="103"/><text x="81.3843%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="81.3033%" y="229" width="0.0131%" height="15" fill="rgb(238,81,41)" fg:x="49556" fg:w="8"/><text x="81.5533%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (67 samples, 0.11%)</title><rect x="81.4428%" y="213" width="0.1099%" height="15" fill="rgb(210,199,37)" fg:x="49641" fg:w="67"/><text x="81.6928%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (159 samples, 0.26%)</title><rect x="81.3164%" y="229" width="0.2609%" height="15" fill="rgb(244,192,49)" fg:x="49564" fg:w="159"/><text x="81.5664%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="81.5593%" y="213" width="0.0180%" height="15" fill="rgb(226,211,11)" fg:x="49712" fg:w="11"/><text x="81.8093%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="81.5609%" y="197" width="0.0164%" height="15" fill="rgb(236,162,54)" fg:x="49713" fg:w="10"/><text x="81.8109%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (27 samples, 0.04%)</title><rect x="81.5789%" y="213" width="0.0443%" height="15" fill="rgb(220,229,9)" fg:x="49724" fg:w="27"/><text x="81.8289%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (30 samples, 0.05%)</title><rect x="81.5773%" y="229" width="0.0492%" height="15" fill="rgb(250,87,22)" fg:x="49723" fg:w="30"/><text x="81.8273%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.03%)</title><rect x="81.6298%" y="229" width="0.0328%" height="15" fill="rgb(239,43,17)" fg:x="49755" fg:w="20"/><text x="81.8798%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.03%)</title><rect x="81.6347%" y="213" width="0.0279%" height="15" fill="rgb(231,177,25)" fg:x="49758" fg:w="17"/><text x="81.8847%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (39 samples, 0.06%)</title><rect x="81.6708%" y="229" width="0.0640%" height="15" fill="rgb(219,179,1)" fg:x="49780" fg:w="39"/><text x="81.9208%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="81.7364%" y="229" width="0.0213%" height="15" fill="rgb(238,219,53)" fg:x="49820" fg:w="13"/><text x="81.9864%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (26 samples, 0.04%)</title><rect x="81.7709%" y="229" width="0.0427%" height="15" fill="rgb(232,167,36)" fg:x="49841" fg:w="26"/><text x="82.0209%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (501 samples, 0.82%)</title><rect x="81.8234%" y="229" width="0.8220%" height="15" fill="rgb(244,19,51)" fg:x="49873" fg:w="501"/><text x="82.0734%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="82.6782%" y="165" width="0.0148%" height="15" fill="rgb(224,6,22)" fg:x="50394" fg:w="9"/><text x="82.9282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="82.6700%" y="181" width="0.0263%" height="15" fill="rgb(224,145,5)" fg:x="50389" fg:w="16"/><text x="82.9200%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.04%)</title><rect x="82.6568%" y="229" width="0.0443%" height="15" fill="rgb(234,130,49)" fg:x="50381" fg:w="27"/><text x="82.9068%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="82.6601%" y="213" width="0.0410%" height="15" fill="rgb(254,6,2)" fg:x="50383" fg:w="25"/><text x="82.9101%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.04%)</title><rect x="82.6618%" y="197" width="0.0394%" height="15" fill="rgb(208,96,46)" fg:x="50384" fg:w="24"/><text x="82.9118%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (851 samples, 1.40%)</title><rect x="82.7011%" y="229" width="1.3962%" height="15" fill="rgb(239,3,39)" fg:x="50408" fg:w="851"/><text x="82.9511%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (84 samples, 0.14%)</title><rect x="84.0973%" y="229" width="0.1378%" height="15" fill="rgb(233,210,1)" fg:x="51259" fg:w="84"/><text x="84.3473%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (28 samples, 0.05%)</title><rect x="84.2351%" y="229" width="0.0459%" height="15" fill="rgb(244,137,37)" fg:x="51343" fg:w="28"/><text x="84.4851%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (54 samples, 0.09%)</title><rect x="84.4058%" y="181" width="0.0886%" height="15" fill="rgb(240,136,2)" fg:x="51447" fg:w="54"/><text x="84.6558%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.04%)</title><rect x="84.4583%" y="165" width="0.0361%" height="15" fill="rgb(239,18,37)" fg:x="51479" fg:w="22"/><text x="84.7083%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (89 samples, 0.15%)</title><rect x="84.3565%" y="197" width="0.1460%" height="15" fill="rgb(218,185,22)" fg:x="51417" fg:w="89"/><text x="84.6065%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (157 samples, 0.26%)</title><rect x="84.3040%" y="213" width="0.2576%" height="15" fill="rgb(225,218,4)" fg:x="51385" fg:w="157"/><text x="84.5540%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.06%)</title><rect x="84.5026%" y="197" width="0.0591%" height="15" fill="rgb(230,182,32)" fg:x="51506" fg:w="36"/><text x="84.7526%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 0.04%)</title><rect x="84.5173%" y="181" width="0.0443%" height="15" fill="rgb(242,56,43)" fg:x="51515" fg:w="27"/><text x="84.7673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.03%)</title><rect x="84.5337%" y="165" width="0.0279%" height="15" fill="rgb(233,99,24)" fg:x="51525" fg:w="17"/><text x="84.7837%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="84.5698%" y="213" width="0.0148%" height="15" fill="rgb(234,209,42)" fg:x="51547" fg:w="9"/><text x="84.8198%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (187 samples, 0.31%)</title><rect x="84.2811%" y="229" width="0.3068%" height="15" fill="rgb(227,7,12)" fg:x="51371" fg:w="187"/><text x="84.5311%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (11 samples, 0.02%)</title><rect x="84.5879%" y="229" width="0.0180%" height="15" fill="rgb(245,203,43)" fg:x="51558" fg:w="11"/><text x="84.8379%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,020 samples, 4.95%)</title><rect x="79.6561%" y="245" width="4.9547%" height="15" fill="rgb(238,205,33)" fg:x="48552" fg:w="3020"/><text x="79.9061%" y="255.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,462 samples, 82.79%)</title><rect x="1.8474%" y="277" width="82.7897%" height="15" fill="rgb(231,56,7)" fg:x="1126" fg:w="50462"/><text x="2.0974%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,024 samples, 80.43%)</title><rect x="4.2066%" y="261" width="80.4305%" height="15" fill="rgb(244,186,29)" fg:x="2564" fg:w="49024"/><text x="4.4566%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (16 samples, 0.03%)</title><rect x="84.6108%" y="245" width="0.0263%" height="15" fill="rgb(234,111,31)" fg:x="51572" fg:w="16"/><text x="84.8608%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (948 samples, 1.56%)</title><rect x="84.6371%" y="277" width="1.5553%" height="15" fill="rgb(241,149,10)" fg:x="51588" fg:w="948"/><text x="84.8871%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (181 samples, 0.30%)</title><rect x="86.1924%" y="277" width="0.2970%" height="15" fill="rgb(249,206,44)" fg:x="52536" fg:w="181"/><text x="86.4424%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (82 samples, 0.13%)</title><rect x="86.3548%" y="261" width="0.1345%" height="15" fill="rgb(251,153,30)" fg:x="52635" fg:w="82"/><text x="86.6048%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,686 samples, 7.69%)</title><rect x="86.4894%" y="277" width="7.6880%" height="15" fill="rgb(239,152,38)" fg:x="52717" fg:w="4686"/><text x="86.7394%" y="287.50">rust_qecp`r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (131 samples, 0.21%)</title><rect x="94.1790%" y="261" width="0.2149%" height="15" fill="rgb(249,139,47)" fg:x="57404" fg:w="131"/><text x="94.4290%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (436 samples, 0.72%)</title><rect x="94.1774%" y="277" width="0.7153%" height="15" fill="rgb(244,64,35)" fg:x="57403" fg:w="436"/><text x="94.4274%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (304 samples, 0.50%)</title><rect x="94.3939%" y="261" width="0.4988%" height="15" fill="rgb(216,46,15)" fg:x="57535" fg:w="304"/><text x="94.6439%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (34 samples, 0.06%)</title><rect x="94.8927%" y="277" width="0.0558%" height="15" fill="rgb(250,74,19)" fg:x="57839" fg:w="34"/><text x="95.1427%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,075 samples, 5.04%)</title><rect x="94.9485%" y="277" width="5.0450%" height="15" fill="rgb(249,42,33)" fg:x="57873" fg:w="3075"/><text x="95.1985%" y="287.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,258 samples, 3.70%)</title><rect x="96.2889%" y="261" width="3.7046%" height="15" fill="rgb(242,149,17)" fg:x="58690" fg:w="2258"/><text x="96.5389%" y="271.50">rust..</text></g><g><title>all (60,952 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="60952"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,844 samples, 98.18%)</title><rect x="1.8178%" y="357" width="98.1822%" height="15" fill="rgb(220,130,37)" fg:x="1108" fg:w="59844"/><text x="2.0678%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,844 samples, 98.18%)</title><rect x="1.8178%" y="341" width="98.1822%" height="15" fill="rgb(211,67,2)" fg:x="1108" fg:w="59844"/><text x="2.0678%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,844 samples, 98.18%)</title><rect x="1.8178%" y="325" width="98.1822%" height="15" fill="rgb(235,68,52)" fg:x="1108" fg:w="59844"/><text x="2.0678%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,844 samples, 98.18%)</title><rect x="1.8178%" y="309" width="98.1822%" height="15" fill="rgb(246,142,3)" fg:x="1108" fg:w="59844"/><text x="2.0678%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,844 samples, 98.18%)</title><rect x="1.8178%" y="293" width="98.1822%" height="15" fill="rgb(241,25,7)" fg:x="1108" fg:w="59844"/><text x="2.0678%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>