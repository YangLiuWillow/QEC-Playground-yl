<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="59918"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (15 samples, 0.03%)</title><rect x="0.0117%" y="53" width="0.0250%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="15"/><text x="0.2617%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (15 samples, 0.03%)</title><rect x="0.0117%" y="37" width="0.0250%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="15"/><text x="0.2617%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (24 samples, 0.04%)</title><rect x="0.0117%" y="69" width="0.0401%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="24"/><text x="0.2617%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (12 samples, 0.02%)</title><rect x="0.0534%" y="53" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="32" fg:w="12"/><text x="0.3034%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::new (25 samples, 0.04%)</title><rect x="0.0517%" y="69" width="0.0417%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="25"/><text x="0.3017%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (12 samples, 0.02%)</title><rect x="0.0734%" y="53" width="0.0200%" height="15" fill="rgb(232,128,0)" fg:x="44" fg:w="12"/><text x="0.3234%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (10 samples, 0.02%)</title><rect x="0.0768%" y="37" width="0.0167%" height="15" fill="rgb(207,160,47)" fg:x="46" fg:w="10"/><text x="0.3268%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark::_{{closure}} (9 samples, 0.02%)</title><rect x="0.0935%" y="69" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="9"/><text x="0.3435%" y="79.50"></text></g><g><title>rust_qecp`alloc::fmt::format (9 samples, 0.02%)</title><rect x="0.0935%" y="53" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="56" fg:w="9"/><text x="0.3435%" y="63.50"></text></g><g><title>rust_qecp`core::fmt::write (8 samples, 0.01%)</title><rect x="0.0951%" y="37" width="0.0134%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="8"/><text x="0.3451%" y="47.50"></text></g><g><title>dyld`start (68 samples, 0.11%)</title><rect x="0.0000%" y="309" width="0.1135%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="68"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (68 samples, 0.11%)</title><rect x="0.0000%" y="293" width="0.1135%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="68"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (68 samples, 0.11%)</title><rect x="0.0000%" y="277" width="0.1135%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="68"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (68 samples, 0.11%)</title><rect x="0.0000%" y="261" width="0.1135%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="68"/><text x="0.2500%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (68 samples, 0.11%)</title><rect x="0.0000%" y="245" width="0.1135%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="68"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (68 samples, 0.11%)</title><rect x="0.0000%" y="229" width="0.1135%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="68"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (68 samples, 0.11%)</title><rect x="0.0000%" y="213" width="0.1135%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="68"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (68 samples, 0.11%)</title><rect x="0.0000%" y="197" width="0.1135%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="68"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (68 samples, 0.11%)</title><rect x="0.0000%" y="181" width="0.1135%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="68"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (68 samples, 0.11%)</title><rect x="0.0000%" y="165" width="0.1135%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="68"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (68 samples, 0.11%)</title><rect x="0.0000%" y="149" width="0.1135%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="68"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (68 samples, 0.11%)</title><rect x="0.0000%" y="133" width="0.1135%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="68"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (68 samples, 0.11%)</title><rect x="0.0000%" y="117" width="0.1135%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="68"/><text x="0.2500%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (67 samples, 0.11%)</title><rect x="0.0017%" y="101" width="0.1118%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="67"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (66 samples, 0.11%)</title><rect x="0.0033%" y="85" width="0.1102%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="66"/><text x="0.2533%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (34 samples, 0.06%)</title><rect x="0.1135%" y="245" width="0.0567%" height="15" fill="rgb(249,31,29)" fg:x="68" fg:w="34"/><text x="0.3635%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (94 samples, 0.16%)</title><rect x="0.2103%" y="229" width="0.1569%" height="15" fill="rgb(225,111,53)" fg:x="126" fg:w="94"/><text x="0.4603%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="0.3688%" y="229" width="0.0200%" height="15" fill="rgb(238,160,17)" fg:x="221" fg:w="12"/><text x="0.6188%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="0.3889%" y="229" width="0.0417%" height="15" fill="rgb(214,148,48)" fg:x="233" fg:w="25"/><text x="0.6389%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.02%)</title><rect x="0.4373%" y="229" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="262" fg:w="9"/><text x="0.6873%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="0.4523%" y="229" width="0.0100%" height="15" fill="rgb(209,103,24)" fg:x="271" fg:w="6"/><text x="0.7023%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (12 samples, 0.02%)</title><rect x="0.4673%" y="229" width="0.0200%" height="15" fill="rgb(229,88,8)" fg:x="280" fg:w="12"/><text x="0.7173%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.01%)</title><rect x="0.4873%" y="229" width="0.0100%" height="15" fill="rgb(213,181,19)" fg:x="292" fg:w="6"/><text x="0.7373%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="0.5324%" y="165" width="0.0117%" height="15" fill="rgb(254,191,54)" fg:x="319" fg:w="7"/><text x="0.7824%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="0.5174%" y="213" width="0.0517%" height="15" fill="rgb(241,83,37)" fg:x="310" fg:w="31"/><text x="0.7674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.05%)</title><rect x="0.5224%" y="197" width="0.0467%" height="15" fill="rgb(233,36,39)" fg:x="313" fg:w="28"/><text x="0.7724%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 0.05%)</title><rect x="0.5224%" y="181" width="0.0467%" height="15" fill="rgb(226,3,54)" fg:x="313" fg:w="28"/><text x="0.7724%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.03%)</title><rect x="0.5441%" y="165" width="0.0250%" height="15" fill="rgb(245,192,40)" fg:x="326" fg:w="15"/><text x="0.7941%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.03%)</title><rect x="0.6275%" y="149" width="0.0250%" height="15" fill="rgb(238,167,29)" fg:x="376" fg:w="15"/><text x="0.8775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.07%)</title><rect x="0.6108%" y="181" width="0.0734%" height="15" fill="rgb(232,182,51)" fg:x="366" fg:w="44"/><text x="0.8608%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 0.07%)</title><rect x="0.6192%" y="165" width="0.0651%" height="15" fill="rgb(231,60,39)" fg:x="371" fg:w="39"/><text x="0.8692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.03%)</title><rect x="0.6526%" y="149" width="0.0317%" height="15" fill="rgb(208,69,12)" fg:x="391" fg:w="19"/><text x="0.9026%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (49 samples, 0.08%)</title><rect x="0.6075%" y="197" width="0.0818%" height="15" fill="rgb(235,93,37)" fg:x="364" fg:w="49"/><text x="0.8575%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (73 samples, 0.12%)</title><rect x="0.5724%" y="213" width="0.1218%" height="15" fill="rgb(213,116,39)" fg:x="343" fg:w="73"/><text x="0.8224%" y="223.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (120 samples, 0.20%)</title><rect x="0.4973%" y="229" width="0.2003%" height="15" fill="rgb(222,207,29)" fg:x="298" fg:w="120"/><text x="0.7473%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.08%)</title><rect x="0.8245%" y="213" width="0.0768%" height="15" fill="rgb(206,96,30)" fg:x="494" fg:w="46"/><text x="1.0745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.04%)</title><rect x="0.8578%" y="197" width="0.0434%" height="15" fill="rgb(218,138,4)" fg:x="514" fg:w="26"/><text x="1.1078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.04%)</title><rect x="0.8612%" y="181" width="0.0401%" height="15" fill="rgb(250,191,14)" fg:x="516" fg:w="24"/><text x="1.1112%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.03%)</title><rect x="1.0247%" y="181" width="0.0317%" height="15" fill="rgb(239,60,40)" fg:x="614" fg:w="19"/><text x="1.2747%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (120 samples, 0.20%)</title><rect x="0.9012%" y="213" width="0.2003%" height="15" fill="rgb(206,27,48)" fg:x="540" fg:w="120"/><text x="1.1512%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (102 samples, 0.17%)</title><rect x="0.9313%" y="197" width="0.1702%" height="15" fill="rgb(225,35,8)" fg:x="558" fg:w="102"/><text x="1.1813%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (27 samples, 0.05%)</title><rect x="1.0564%" y="181" width="0.0451%" height="15" fill="rgb(250,213,24)" fg:x="633" fg:w="27"/><text x="1.3064%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="1.1099%" y="213" width="0.0184%" height="15" fill="rgb(247,123,22)" fg:x="665" fg:w="11"/><text x="1.3599%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (40 samples, 0.07%)</title><rect x="1.2217%" y="197" width="0.0668%" height="15" fill="rgb(231,138,38)" fg:x="732" fg:w="40"/><text x="1.4717%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.03%)</title><rect x="1.2550%" y="181" width="0.0334%" height="15" fill="rgb(231,145,46)" fg:x="752" fg:w="20"/><text x="1.5050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.03%)</title><rect x="1.2617%" y="165" width="0.0267%" height="15" fill="rgb(251,118,11)" fg:x="756" fg:w="16"/><text x="1.5117%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.03%)</title><rect x="1.3402%" y="165" width="0.0334%" height="15" fill="rgb(217,147,25)" fg:x="803" fg:w="20"/><text x="1.5902%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (60 samples, 0.10%)</title><rect x="1.2884%" y="197" width="0.1001%" height="15" fill="rgb(247,81,37)" fg:x="772" fg:w="60"/><text x="1.5384%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (50 samples, 0.08%)</title><rect x="1.3051%" y="181" width="0.0834%" height="15" fill="rgb(209,12,38)" fg:x="782" fg:w="50"/><text x="1.5551%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.02%)</title><rect x="1.3735%" y="165" width="0.0150%" height="15" fill="rgb(227,1,9)" fg:x="823" fg:w="9"/><text x="1.6235%" y="175.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (426 samples, 0.71%)</title><rect x="0.6976%" y="229" width="0.7110%" height="15" fill="rgb(248,47,43)" fg:x="418" fg:w="426"/><text x="0.9476%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (158 samples, 0.26%)</title><rect x="1.1449%" y="213" width="0.2637%" height="15" fill="rgb(221,10,30)" fg:x="686" fg:w="158"/><text x="1.3949%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="1.4136%" y="229" width="0.0217%" height="15" fill="rgb(210,229,1)" fg:x="847" fg:w="13"/><text x="1.6636%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (12 samples, 0.02%)</title><rect x="1.4420%" y="229" width="0.0200%" height="15" fill="rgb(222,148,37)" fg:x="864" fg:w="12"/><text x="1.6920%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (30 samples, 0.05%)</title><rect x="1.4620%" y="229" width="0.0501%" height="15" fill="rgb(234,67,33)" fg:x="876" fg:w="30"/><text x="1.7120%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.04%)</title><rect x="1.5454%" y="197" width="0.0367%" height="15" fill="rgb(247,98,35)" fg:x="926" fg:w="22"/><text x="1.7954%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="1.5822%" y="197" width="0.0267%" height="15" fill="rgb(247,138,52)" fg:x="948" fg:w="16"/><text x="1.8322%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="1.5855%" y="181" width="0.0234%" height="15" fill="rgb(213,79,30)" fg:x="950" fg:w="14"/><text x="1.8355%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.10%)</title><rect x="1.5304%" y="213" width="0.0968%" height="15" fill="rgb(246,177,23)" fg:x="917" fg:w="58"/><text x="1.7804%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (68 samples, 0.11%)</title><rect x="1.5187%" y="229" width="0.1135%" height="15" fill="rgb(230,62,27)" fg:x="910" fg:w="68"/><text x="1.7687%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (18 samples, 0.03%)</title><rect x="1.6389%" y="229" width="0.0300%" height="15" fill="rgb(216,154,8)" fg:x="982" fg:w="18"/><text x="1.8889%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (85 samples, 0.14%)</title><rect x="2.4433%" y="213" width="0.1419%" height="15" fill="rgb(244,35,45)" fg:x="1464" fg:w="85"/><text x="2.6933%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="2.5852%" y="213" width="0.0584%" height="15" fill="rgb(251,115,12)" fg:x="1549" fg:w="35"/><text x="2.8352%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="2.6052%" y="197" width="0.0384%" height="15" fill="rgb(240,54,50)" fg:x="1561" fg:w="23"/><text x="2.8552%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.04%)</title><rect x="2.6086%" y="181" width="0.0350%" height="15" fill="rgb(233,84,52)" fg:x="1563" fg:w="21"/><text x="2.8586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.01%)</title><rect x="2.6336%" y="165" width="0.0100%" height="15" fill="rgb(207,117,47)" fg:x="1578" fg:w="6"/><text x="2.8836%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.01%)</title><rect x="2.6436%" y="213" width="0.0100%" height="15" fill="rgb(249,43,39)" fg:x="1584" fg:w="6"/><text x="2.8936%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (43 samples, 0.07%)</title><rect x="2.7404%" y="197" width="0.0718%" height="15" fill="rgb(209,38,44)" fg:x="1642" fg:w="43"/><text x="2.9904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (98 samples, 0.16%)</title><rect x="2.6553%" y="213" width="0.1636%" height="15" fill="rgb(236,212,23)" fg:x="1591" fg:w="98"/><text x="2.9053%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="2.8556%" y="181" width="0.0117%" height="15" fill="rgb(242,79,21)" fg:x="1711" fg:w="7"/><text x="3.1056%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.06%)</title><rect x="2.8189%" y="213" width="0.0601%" height="15" fill="rgb(211,96,35)" fg:x="1689" fg:w="36"/><text x="3.0689%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.05%)</title><rect x="2.8289%" y="197" width="0.0501%" height="15" fill="rgb(253,215,40)" fg:x="1695" fg:w="30"/><text x="3.0789%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="2.8673%" y="181" width="0.0117%" height="15" fill="rgb(211,81,21)" fg:x="1718" fg:w="7"/><text x="3.1173%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="2.8789%" y="213" width="0.0267%" height="15" fill="rgb(208,190,38)" fg:x="1725" fg:w="16"/><text x="3.1289%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (41 samples, 0.07%)</title><rect x="2.9056%" y="213" width="0.0684%" height="15" fill="rgb(235,213,38)" fg:x="1741" fg:w="41"/><text x="3.1556%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="2.9741%" y="213" width="0.0134%" height="15" fill="rgb(237,122,38)" fg:x="1782" fg:w="8"/><text x="3.2241%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.01%)</title><rect x="2.9874%" y="213" width="0.0100%" height="15" fill="rgb(244,218,35)" fg:x="1790" fg:w="6"/><text x="3.2374%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 0.10%)</title><rect x="3.0442%" y="197" width="0.1018%" height="15" fill="rgb(240,68,47)" fg:x="1824" fg:w="61"/><text x="3.2942%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.04%)</title><rect x="3.1026%" y="181" width="0.0434%" height="15" fill="rgb(210,16,53)" fg:x="1859" fg:w="26"/><text x="3.3526%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.04%)</title><rect x="3.1042%" y="165" width="0.0417%" height="15" fill="rgb(235,124,12)" fg:x="1860" fg:w="25"/><text x="3.3542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (36 samples, 0.06%)</title><rect x="3.2161%" y="165" width="0.0601%" height="15" fill="rgb(224,169,11)" fg:x="1927" fg:w="36"/><text x="3.4661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (80 samples, 0.13%)</title><rect x="3.1460%" y="197" width="0.1335%" height="15" fill="rgb(250,166,2)" fg:x="1885" fg:w="80"/><text x="3.3960%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (61 samples, 0.10%)</title><rect x="3.1777%" y="181" width="0.1018%" height="15" fill="rgb(242,216,29)" fg:x="1904" fg:w="61"/><text x="3.4277%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.01%)</title><rect x="3.2828%" y="197" width="0.0117%" height="15" fill="rgb(230,116,27)" fg:x="1967" fg:w="7"/><text x="3.5328%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.32%)</title><rect x="3.0058%" y="213" width="0.3188%" height="15" fill="rgb(228,99,48)" fg:x="1801" fg:w="191"/><text x="3.2558%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (13 samples, 0.02%)</title><rect x="3.3028%" y="197" width="0.0217%" height="15" fill="rgb(253,11,6)" fg:x="1979" fg:w="13"/><text x="3.5528%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="3.3512%" y="197" width="0.0117%" height="15" fill="rgb(247,143,39)" fg:x="2008" fg:w="7"/><text x="3.6012%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 0.05%)</title><rect x="3.3245%" y="213" width="0.0484%" height="15" fill="rgb(236,97,10)" fg:x="1992" fg:w="29"/><text x="3.5745%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (9 samples, 0.02%)</title><rect x="3.3729%" y="213" width="0.0150%" height="15" fill="rgb(233,208,19)" fg:x="2021" fg:w="9"/><text x="3.6229%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="3.3880%" y="213" width="0.0134%" height="15" fill="rgb(216,164,2)" fg:x="2030" fg:w="8"/><text x="3.6380%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="3.4297%" y="149" width="0.0117%" height="15" fill="rgb(220,129,5)" fg:x="2055" fg:w="7"/><text x="3.6797%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.04%)</title><rect x="3.4197%" y="197" width="0.0350%" height="15" fill="rgb(242,17,10)" fg:x="2049" fg:w="21"/><text x="3.6697%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="3.4263%" y="181" width="0.0284%" height="15" fill="rgb(242,107,0)" fg:x="2053" fg:w="17"/><text x="3.6763%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="3.4280%" y="165" width="0.0267%" height="15" fill="rgb(251,28,31)" fg:x="2054" fg:w="16"/><text x="3.6780%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="3.4414%" y="149" width="0.0134%" height="15" fill="rgb(233,223,10)" fg:x="2062" fg:w="8"/><text x="3.6914%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="3.4798%" y="181" width="0.0117%" height="15" fill="rgb(215,21,27)" fg:x="2085" fg:w="7"/><text x="3.7298%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (32 samples, 0.05%)</title><rect x="3.4581%" y="197" width="0.0534%" height="15" fill="rgb(232,23,21)" fg:x="2072" fg:w="32"/><text x="3.7081%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.02%)</title><rect x="3.4948%" y="181" width="0.0167%" height="15" fill="rgb(244,5,23)" fg:x="2094" fg:w="10"/><text x="3.7448%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (61 samples, 0.10%)</title><rect x="3.4130%" y="213" width="0.1018%" height="15" fill="rgb(226,81,46)" fg:x="2045" fg:w="61"/><text x="3.6630%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (38 samples, 0.06%)</title><rect x="3.5148%" y="213" width="0.0634%" height="15" fill="rgb(247,70,30)" fg:x="2106" fg:w="38"/><text x="3.7648%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (10 samples, 0.02%)</title><rect x="3.5782%" y="213" width="0.0167%" height="15" fill="rgb(212,68,19)" fg:x="2144" fg:w="10"/><text x="3.8282%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (6 samples, 0.01%)</title><rect x="3.5949%" y="213" width="0.0100%" height="15" fill="rgb(240,187,13)" fg:x="2154" fg:w="6"/><text x="3.8449%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (22 samples, 0.04%)</title><rect x="3.6049%" y="213" width="0.0367%" height="15" fill="rgb(223,113,26)" fg:x="2160" fg:w="22"/><text x="3.8549%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.01%)</title><rect x="3.6834%" y="197" width="0.0100%" height="15" fill="rgb(206,192,2)" fg:x="2207" fg:w="6"/><text x="3.9334%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (6 samples, 0.01%)</title><rect x="3.6934%" y="197" width="0.0100%" height="15" fill="rgb(241,108,4)" fg:x="2213" fg:w="6"/><text x="3.9434%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="3.7167%" y="181" width="0.0117%" height="15" fill="rgb(247,173,49)" fg:x="2227" fg:w="7"/><text x="3.9667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="3.7735%" y="149" width="0.0134%" height="15" fill="rgb(224,114,35)" fg:x="2261" fg:w="8"/><text x="4.0235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="3.8019%" y="117" width="0.0184%" height="15" fill="rgb(245,159,27)" fg:x="2278" fg:w="11"/><text x="4.0519%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.01%)</title><rect x="3.8102%" y="101" width="0.0100%" height="15" fill="rgb(245,172,44)" fg:x="2283" fg:w="6"/><text x="4.0602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="3.8019%" y="133" width="0.0200%" height="15" fill="rgb(236,23,11)" fg:x="2278" fg:w="12"/><text x="4.0519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="3.8252%" y="133" width="0.0184%" height="15" fill="rgb(205,117,38)" fg:x="2292" fg:w="11"/><text x="4.0752%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.02%)</title><rect x="3.8286%" y="117" width="0.0150%" height="15" fill="rgb(237,72,25)" fg:x="2294" fg:w="9"/><text x="4.0786%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.06%)</title><rect x="3.7868%" y="149" width="0.0584%" height="15" fill="rgb(244,70,9)" fg:x="2269" fg:w="35"/><text x="4.0368%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="3.8736%" y="133" width="0.0117%" height="15" fill="rgb(217,125,39)" fg:x="2321" fg:w="7"/><text x="4.1236%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="3.8736%" y="117" width="0.0117%" height="15" fill="rgb(235,36,10)" fg:x="2321" fg:w="7"/><text x="4.1236%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="3.9204%" y="117" width="0.0117%" height="15" fill="rgb(251,123,47)" fg:x="2349" fg:w="7"/><text x="4.1704%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (34 samples, 0.06%)</title><rect x="3.9003%" y="133" width="0.0567%" height="15" fill="rgb(221,13,13)" fg:x="2337" fg:w="34"/><text x="4.1503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (12 samples, 0.02%)</title><rect x="3.9370%" y="117" width="0.0200%" height="15" fill="rgb(238,131,9)" fg:x="2359" fg:w="12"/><text x="4.1870%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="3.9821%" y="85" width="0.0184%" height="15" fill="rgb(211,50,8)" fg:x="2386" fg:w="11"/><text x="4.2321%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.05%)</title><rect x="3.9604%" y="133" width="0.0501%" height="15" fill="rgb(245,182,24)" fg:x="2373" fg:w="30"/><text x="4.2104%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 0.05%)</title><rect x="3.9621%" y="117" width="0.0484%" height="15" fill="rgb(242,14,37)" fg:x="2374" fg:w="29"/><text x="4.2121%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (25 samples, 0.04%)</title><rect x="3.9688%" y="101" width="0.0417%" height="15" fill="rgb(246,228,12)" fg:x="2378" fg:w="25"/><text x="4.2188%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="4.0105%" y="133" width="0.0134%" height="15" fill="rgb(213,55,15)" fg:x="2403" fg:w="8"/><text x="4.2605%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="4.0138%" y="117" width="0.0100%" height="15" fill="rgb(209,9,3)" fg:x="2405" fg:w="6"/><text x="4.2638%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (107 samples, 0.18%)</title><rect x="3.8619%" y="149" width="0.1786%" height="15" fill="rgb(230,59,30)" fg:x="2314" fg:w="107"/><text x="4.1119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (10 samples, 0.02%)</title><rect x="4.0238%" y="133" width="0.0167%" height="15" fill="rgb(209,121,21)" fg:x="2411" fg:w="10"/><text x="4.2738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (205 samples, 0.34%)</title><rect x="3.7551%" y="165" width="0.3421%" height="15" fill="rgb(220,109,13)" fg:x="2250" fg:w="205"/><text x="4.0051%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (33 samples, 0.06%)</title><rect x="4.0422%" y="149" width="0.0551%" height="15" fill="rgb(232,18,1)" fg:x="2422" fg:w="33"/><text x="4.2922%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="4.0973%" y="165" width="0.0117%" height="15" fill="rgb(215,41,42)" fg:x="2455" fg:w="7"/><text x="4.3473%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (253 samples, 0.42%)</title><rect x="3.7318%" y="181" width="0.4222%" height="15" fill="rgb(224,123,36)" fg:x="2236" fg:w="253"/><text x="3.9818%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="4.1240%" y="165" width="0.0300%" height="15" fill="rgb(240,125,3)" fg:x="2471" fg:w="18"/><text x="4.3740%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.03%)</title><rect x="4.1290%" y="149" width="0.0250%" height="15" fill="rgb(205,98,50)" fg:x="2474" fg:w="15"/><text x="4.3790%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (310 samples, 0.52%)</title><rect x="3.6416%" y="213" width="0.5174%" height="15" fill="rgb(205,185,37)" fg:x="2182" fg:w="310"/><text x="3.8916%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (269 samples, 0.45%)</title><rect x="3.7101%" y="197" width="0.4489%" height="15" fill="rgb(238,207,15)" fg:x="2223" fg:w="269"/><text x="3.9601%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="6.6474%" y="181" width="0.0217%" height="15" fill="rgb(213,199,42)" fg:x="3983" fg:w="13"/><text x="6.8974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="6.6574%" y="165" width="0.0117%" height="15" fill="rgb(235,201,11)" fg:x="3989" fg:w="7"/><text x="6.9074%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="6.7192%" y="133" width="0.0167%" height="15" fill="rgb(207,46,11)" fg:x="4026" fg:w="10"/><text x="6.9692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (45 samples, 0.08%)</title><rect x="6.6825%" y="165" width="0.0751%" height="15" fill="rgb(241,35,35)" fg:x="4004" fg:w="45"/><text x="6.9325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (37 samples, 0.06%)</title><rect x="6.6958%" y="149" width="0.0618%" height="15" fill="rgb(243,32,47)" fg:x="4012" fg:w="37"/><text x="6.9458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="6.7392%" y="133" width="0.0184%" height="15" fill="rgb(247,202,23)" fg:x="4038" fg:w="11"/><text x="6.9892%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="6.7659%" y="149" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="4054" fg:w="6"/><text x="7.0159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 0.11%)</title><rect x="6.6725%" y="181" width="0.1102%" height="15" fill="rgb(243,110,44)" fg:x="3998" fg:w="66"/><text x="6.9225%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.03%)</title><rect x="6.7576%" y="165" width="0.0250%" height="15" fill="rgb(222,74,54)" fg:x="4049" fg:w="15"/><text x="7.0076%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (86 samples, 0.14%)</title><rect x="6.6407%" y="197" width="0.1435%" height="15" fill="rgb(216,99,12)" fg:x="3979" fg:w="86"/><text x="6.8907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.02%)</title><rect x="6.8076%" y="181" width="0.0150%" height="15" fill="rgb(226,22,26)" fg:x="4079" fg:w="9"/><text x="7.0576%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (7 samples, 0.01%)</title><rect x="6.8260%" y="181" width="0.0117%" height="15" fill="rgb(217,163,10)" fg:x="4090" fg:w="7"/><text x="7.0760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.07%)</title><rect x="6.7876%" y="197" width="0.0718%" height="15" fill="rgb(213,25,53)" fg:x="4067" fg:w="43"/><text x="7.0376%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="6.8377%" y="181" width="0.0217%" height="15" fill="rgb(252,105,26)" fg:x="4097" fg:w="13"/><text x="7.0877%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="6.8427%" y="165" width="0.0167%" height="15" fill="rgb(220,39,43)" fg:x="4100" fg:w="10"/><text x="7.0927%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="6.8961%" y="181" width="0.0167%" height="15" fill="rgb(229,68,48)" fg:x="4132" fg:w="10"/><text x="7.1461%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (51 samples, 0.09%)</title><rect x="6.8594%" y="197" width="0.0851%" height="15" fill="rgb(252,8,32)" fg:x="4110" fg:w="51"/><text x="7.1094%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.02%)</title><rect x="6.9228%" y="181" width="0.0217%" height="15" fill="rgb(223,20,43)" fg:x="4148" fg:w="13"/><text x="7.1728%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.02%)</title><rect x="6.9528%" y="197" width="0.0150%" height="15" fill="rgb(229,81,49)" fg:x="4166" fg:w="9"/><text x="7.2028%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.01%)</title><rect x="6.9762%" y="197" width="0.0117%" height="15" fill="rgb(236,28,36)" fg:x="4180" fg:w="7"/><text x="7.2262%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (262 samples, 0.44%)</title><rect x="6.9929%" y="197" width="0.4373%" height="15" fill="rgb(249,185,26)" fg:x="4190" fg:w="262"/><text x="7.2429%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (11 samples, 0.02%)</title><rect x="7.5920%" y="181" width="0.0184%" height="15" fill="rgb(249,174,33)" fg:x="4549" fg:w="11"/><text x="7.8420%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="7.6004%" y="165" width="0.0100%" height="15" fill="rgb(233,201,37)" fg:x="4554" fg:w="6"/><text x="7.8504%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.01%)</title><rect x="7.6004%" y="149" width="0.0100%" height="15" fill="rgb(221,78,26)" fg:x="4554" fg:w="6"/><text x="7.8504%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (233 samples, 0.39%)</title><rect x="7.6104%" y="181" width="0.3889%" height="15" fill="rgb(250,127,30)" fg:x="4560" fg:w="233"/><text x="7.8604%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (37 samples, 0.06%)</title><rect x="8.0176%" y="181" width="0.0618%" height="15" fill="rgb(230,49,44)" fg:x="4804" fg:w="37"/><text x="8.2676%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (750 samples, 1.25%)</title><rect x="8.0911%" y="181" width="1.2517%" height="15" fill="rgb(229,67,23)" fg:x="4848" fg:w="750"/><text x="8.3411%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (85 samples, 0.14%)</title><rect x="9.3428%" y="181" width="0.1419%" height="15" fill="rgb(249,83,47)" fg:x="5598" fg:w="85"/><text x="9.5928%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (18 samples, 0.03%)</title><rect x="9.4846%" y="181" width="0.0300%" height="15" fill="rgb(215,43,3)" fg:x="5683" fg:w="18"/><text x="9.7346%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="9.5397%" y="117" width="0.0184%" height="15" fill="rgb(238,154,13)" fg:x="5716" fg:w="11"/><text x="9.7897%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="9.5447%" y="101" width="0.0134%" height="15" fill="rgb(219,56,2)" fg:x="5719" fg:w="8"/><text x="9.7947%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="9.5230%" y="149" width="0.0367%" height="15" fill="rgb(233,0,4)" fg:x="5706" fg:w="22"/><text x="9.7730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="9.5364%" y="133" width="0.0234%" height="15" fill="rgb(235,30,7)" fg:x="5714" fg:w="14"/><text x="9.7864%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (23 samples, 0.04%)</title><rect x="9.5230%" y="165" width="0.0384%" height="15" fill="rgb(250,79,13)" fg:x="5706" fg:w="23"/><text x="9.7730%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.08%)</title><rect x="9.5614%" y="165" width="0.0768%" height="15" fill="rgb(211,146,34)" fg:x="5729" fg:w="46"/><text x="9.8114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.07%)</title><rect x="9.5647%" y="149" width="0.0734%" height="15" fill="rgb(228,22,38)" fg:x="5731" fg:w="44"/><text x="9.8147%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.05%)</title><rect x="9.5848%" y="133" width="0.0534%" height="15" fill="rgb(235,168,5)" fg:x="5743" fg:w="32"/><text x="9.8348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.04%)</title><rect x="9.5981%" y="117" width="0.0401%" height="15" fill="rgb(221,155,16)" fg:x="5751" fg:w="24"/><text x="9.8481%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.01%)</title><rect x="9.6282%" y="101" width="0.0100%" height="15" fill="rgb(215,215,53)" fg:x="5769" fg:w="6"/><text x="9.8782%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (73 samples, 0.12%)</title><rect x="9.5197%" y="181" width="0.1218%" height="15" fill="rgb(223,4,10)" fg:x="5704" fg:w="73"/><text x="9.7697%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (120 samples, 0.20%)</title><rect x="9.6415%" y="181" width="0.2003%" height="15" fill="rgb(234,103,6)" fg:x="5777" fg:w="120"/><text x="9.8915%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (6 samples, 0.01%)</title><rect x="10.0804%" y="165" width="0.0100%" height="15" fill="rgb(227,97,0)" fg:x="6040" fg:w="6"/><text x="10.3304%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1,325 samples, 2.21%)</title><rect x="10.0905%" y="165" width="2.2114%" height="15" fill="rgb(234,150,53)" fg:x="6046" fg:w="1325"/><text x="10.3405%" y="175.50">l..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (241 samples, 0.40%)</title><rect x="12.3068%" y="149" width="0.4022%" height="15" fill="rgb(228,201,54)" fg:x="7374" fg:w="241"/><text x="12.5568%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (254 samples, 0.42%)</title><rect x="12.3052%" y="165" width="0.4239%" height="15" fill="rgb(222,22,37)" fg:x="7373" fg:w="254"/><text x="12.5552%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (12 samples, 0.02%)</title><rect x="12.7090%" y="149" width="0.0200%" height="15" fill="rgb(237,53,32)" fg:x="7615" fg:w="12"/><text x="12.9590%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranchInit (7 samples, 0.01%)</title><rect x="12.7291%" y="165" width="0.0117%" height="15" fill="rgb(233,25,53)" fg:x="7627" fg:w="7"/><text x="12.9791%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ComputeEpsCC (6 samples, 0.01%)</title><rect x="12.7407%" y="165" width="0.0100%" height="15" fill="rgb(210,40,34)" fg:x="7634" fg:w="6"/><text x="12.9907%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (65 samples, 0.11%)</title><rect x="12.7508%" y="165" width="0.1085%" height="15" fill="rgb(241,220,44)" fg:x="7640" fg:w="65"/><text x="13.0008%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (353 samples, 0.59%)</title><rect x="13.5185%" y="149" width="0.5891%" height="15" fill="rgb(235,28,35)" fg:x="8100" fg:w="353"/><text x="13.7685%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (30 samples, 0.05%)</title><rect x="14.0575%" y="133" width="0.0501%" height="15" fill="rgb(210,56,17)" fg:x="8423" fg:w="30"/><text x="14.3075%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (30 samples, 0.05%)</title><rect x="14.0575%" y="117" width="0.0501%" height="15" fill="rgb(224,130,29)" fg:x="8423" fg:w="30"/><text x="14.3075%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (832 samples, 1.39%)</title><rect x="12.8642%" y="165" width="1.3886%" height="15" fill="rgb(235,212,8)" fg:x="7708" fg:w="832"/><text x="13.1142%" y="175.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (87 samples, 0.15%)</title><rect x="14.1076%" y="149" width="0.1452%" height="15" fill="rgb(223,33,50)" fg:x="8453" fg:w="87"/><text x="14.3576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="18.4919%" y="133" width="0.0150%" height="15" fill="rgb(219,149,13)" fg:x="11080" fg:w="9"/><text x="18.7419%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="18.4936%" y="117" width="0.0134%" height="15" fill="rgb(250,156,29)" fg:x="11081" fg:w="8"/><text x="18.7436%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="18.4936%" y="101" width="0.0134%" height="15" fill="rgb(216,193,19)" fg:x="11081" fg:w="8"/><text x="18.7436%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,075 samples, 3.46%)</title><rect x="15.0456%" y="149" width="3.4631%" height="15" fill="rgb(216,135,14)" fg:x="9015" fg:w="2075"/><text x="15.2956%" y="159.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,574 samples, 4.30%)</title><rect x="14.2528%" y="165" width="4.2959%" height="15" fill="rgb(241,47,5)" fg:x="8540" fg:w="2574"/><text x="14.5028%" y="175.50">rust_..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (24 samples, 0.04%)</title><rect x="18.5086%" y="149" width="0.0401%" height="15" fill="rgb(233,42,35)" fg:x="11090" fg:w="24"/><text x="18.7586%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRootInit (6 samples, 0.01%)</title><rect x="18.5387%" y="133" width="0.0100%" height="15" fill="rgb(231,13,6)" fg:x="11108" fg:w="6"/><text x="18.7887%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (7 samples, 0.01%)</title><rect x="18.5487%" y="165" width="0.0117%" height="15" fill="rgb(207,181,40)" fg:x="11114" fg:w="7"/><text x="18.7987%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (12 samples, 0.02%)</title><rect x="19.5183%" y="133" width="0.0200%" height="15" fill="rgb(254,173,49)" fg:x="11695" fg:w="12"/><text x="19.7683%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (19 samples, 0.03%)</title><rect x="19.5183%" y="149" width="0.0317%" height="15" fill="rgb(221,1,38)" fg:x="11695" fg:w="19"/><text x="19.7683%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (7 samples, 0.01%)</title><rect x="19.5384%" y="133" width="0.0117%" height="15" fill="rgb(206,124,46)" fg:x="11707" fg:w="7"/><text x="19.7884%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (648 samples, 1.08%)</title><rect x="18.5604%" y="165" width="1.0815%" height="15" fill="rgb(249,21,11)" fg:x="11121" fg:w="648"/><text x="18.8104%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (55 samples, 0.09%)</title><rect x="19.5501%" y="149" width="0.0918%" height="15" fill="rgb(222,201,40)" fg:x="11714" fg:w="55"/><text x="19.8001%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::UpdateDuals (8 samples, 0.01%)</title><rect x="19.6418%" y="165" width="0.0134%" height="15" fill="rgb(235,61,29)" fg:x="11769" fg:w="8"/><text x="19.8918%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (5,989 samples, 10.00%)</title><rect x="9.8468%" y="181" width="9.9953%" height="15" fill="rgb(219,207,3)" fg:x="5900" fg:w="5989"/><text x="10.0968%" y="191.50">rust_qecp`Perf..</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (112 samples, 0.19%)</title><rect x="19.6552%" y="165" width="0.1869%" height="15" fill="rgb(222,56,46)" fg:x="11777" fg:w="112"/><text x="19.9052%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (10 samples, 0.02%)</title><rect x="19.9039%" y="149" width="0.0167%" height="15" fill="rgb(239,76,54)" fg:x="11926" fg:w="10"/><text x="20.1539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.07%)</title><rect x="19.8588%" y="165" width="0.0651%" height="15" fill="rgb(231,124,27)" fg:x="11899" fg:w="39"/><text x="20.1088%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="19.9740%" y="149" width="0.0200%" height="15" fill="rgb(249,195,6)" fg:x="11968" fg:w="12"/><text x="20.2240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (43 samples, 0.07%)</title><rect x="19.9322%" y="165" width="0.0718%" height="15" fill="rgb(237,174,47)" fg:x="11943" fg:w="43"/><text x="20.1822%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.01%)</title><rect x="20.0040%" y="165" width="0.0100%" height="15" fill="rgb(206,201,31)" fg:x="11986" fg:w="6"/><text x="20.2540%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (114 samples, 0.19%)</title><rect x="19.8438%" y="181" width="0.1903%" height="15" fill="rgb(231,57,52)" fg:x="11890" fg:w="114"/><text x="20.0938%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (9,554 samples, 15.95%)</title><rect x="4.1640%" y="213" width="15.9451%" height="15" fill="rgb(248,177,22)" fg:x="2495" fg:w="9554"/><text x="4.4140%" y="223.50">rust_qecp`rust_qecp::blos..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (7,591 samples, 12.67%)</title><rect x="7.4402%" y="197" width="12.6690%" height="15" fill="rgb(215,211,37)" fg:x="4458" fg:w="7591"/><text x="7.6902%" y="207.50">rust_qecp`minimum_w..</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (45 samples, 0.08%)</title><rect x="20.0340%" y="181" width="0.0751%" height="15" fill="rgb(241,128,51)" fg:x="12004" fg:w="45"/><text x="20.2840%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (20 samples, 0.03%)</title><rect x="20.1709%" y="117" width="0.0334%" height="15" fill="rgb(227,165,31)" fg:x="12086" fg:w="20"/><text x="20.4209%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.06%)</title><rect x="20.1559%" y="149" width="0.0618%" height="15" fill="rgb(228,167,24)" fg:x="12077" fg:w="37"/><text x="20.4059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.06%)</title><rect x="20.1609%" y="133" width="0.0567%" height="15" fill="rgb(228,143,12)" fg:x="12080" fg:w="34"/><text x="20.4109%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="20.2043%" y="117" width="0.0134%" height="15" fill="rgb(249,149,8)" fg:x="12106" fg:w="8"/><text x="20.4543%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.07%)</title><rect x="20.1492%" y="165" width="0.0718%" height="15" fill="rgb(243,35,44)" fg:x="12073" fg:w="43"/><text x="20.3992%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (37 samples, 0.06%)</title><rect x="20.2293%" y="165" width="0.0618%" height="15" fill="rgb(246,89,9)" fg:x="12121" fg:w="37"/><text x="20.4793%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (19 samples, 0.03%)</title><rect x="20.2594%" y="149" width="0.0317%" height="15" fill="rgb(233,213,13)" fg:x="12139" fg:w="19"/><text x="20.5094%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (101 samples, 0.17%)</title><rect x="20.1425%" y="181" width="0.1686%" height="15" fill="rgb(233,141,41)" fg:x="12069" fg:w="101"/><text x="20.3925%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.02%)</title><rect x="20.2911%" y="165" width="0.0200%" height="15" fill="rgb(239,167,4)" fg:x="12158" fg:w="12"/><text x="20.5411%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (122 samples, 0.20%)</title><rect x="20.1091%" y="213" width="0.2036%" height="15" fill="rgb(209,217,16)" fg:x="12049" fg:w="122"/><text x="20.3591%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (108 samples, 0.18%)</title><rect x="20.1325%" y="197" width="0.1802%" height="15" fill="rgb(219,88,35)" fg:x="12063" fg:w="108"/><text x="20.3825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (27 samples, 0.05%)</title><rect x="21.6045%" y="149" width="0.0451%" height="15" fill="rgb(220,193,23)" fg:x="12945" fg:w="27"/><text x="21.8545%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (78 samples, 0.13%)</title><rect x="21.5561%" y="181" width="0.1302%" height="15" fill="rgb(230,90,52)" fg:x="12916" fg:w="78"/><text x="21.8061%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 0.12%)</title><rect x="21.5711%" y="165" width="0.1152%" height="15" fill="rgb(252,106,19)" fg:x="12925" fg:w="69"/><text x="21.8211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.04%)</title><rect x="21.6496%" y="149" width="0.0367%" height="15" fill="rgb(206,74,20)" fg:x="12972" fg:w="22"/><text x="21.8996%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (100 samples, 0.17%)</title><rect x="21.5294%" y="197" width="0.1669%" height="15" fill="rgb(230,138,44)" fg:x="12900" fg:w="100"/><text x="21.7794%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.01%)</title><rect x="21.6863%" y="181" width="0.0100%" height="15" fill="rgb(235,182,43)" fg:x="12994" fg:w="6"/><text x="21.9363%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (88 samples, 0.15%)</title><rect x="21.7030%" y="197" width="0.1469%" height="15" fill="rgb(242,16,51)" fg:x="13004" fg:w="88"/><text x="21.9530%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (29 samples, 0.05%)</title><rect x="21.8015%" y="181" width="0.0484%" height="15" fill="rgb(248,9,4)" fg:x="13063" fg:w="29"/><text x="22.0515%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (935 samples, 1.56%)</title><rect x="20.3128%" y="213" width="1.5605%" height="15" fill="rgb(210,31,22)" fg:x="12171" fg:w="935"/><text x="20.5628%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.02%)</title><rect x="21.8565%" y="197" width="0.0167%" height="15" fill="rgb(239,54,39)" fg:x="13096" fg:w="10"/><text x="22.1065%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="38.5226%" y="149" width="0.0134%" height="15" fill="rgb(230,99,41)" fg:x="23082" fg:w="8"/><text x="38.7726%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (65 samples, 0.11%)</title><rect x="38.5577%" y="133" width="0.1085%" height="15" fill="rgb(253,106,12)" fg:x="23103" fg:w="65"/><text x="38.8077%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="38.6378%" y="117" width="0.0284%" height="15" fill="rgb(213,46,41)" fg:x="23151" fg:w="17"/><text x="38.8878%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 0.21%)</title><rect x="38.4609%" y="165" width="0.2136%" height="15" fill="rgb(215,133,35)" fg:x="23045" fg:w="128"/><text x="38.7109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (83 samples, 0.14%)</title><rect x="38.5360%" y="149" width="0.1385%" height="15" fill="rgb(213,28,5)" fg:x="23090" fg:w="83"/><text x="38.7860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="38.6745%" y="165" width="0.0200%" height="15" fill="rgb(215,77,49)" fg:x="23173" fg:w="12"/><text x="38.9245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (7 samples, 0.01%)</title><rect x="38.7446%" y="149" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="23215" fg:w="7"/><text x="38.9946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (7 samples, 0.01%)</title><rect x="38.7847%" y="133" width="0.0117%" height="15" fill="rgb(208,67,9)" fg:x="23239" fg:w="7"/><text x="39.0347%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.04%)</title><rect x="38.8047%" y="133" width="0.0434%" height="15" fill="rgb(219,133,21)" fg:x="23251" fg:w="26"/><text x="39.0547%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="38.8798%" y="117" width="0.0367%" height="15" fill="rgb(246,46,29)" fg:x="23296" fg:w="22"/><text x="39.1298%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="38.9349%" y="101" width="0.0501%" height="15" fill="rgb(246,185,52)" fg:x="23329" fg:w="30"/><text x="39.1849%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="38.9649%" y="85" width="0.0200%" height="15" fill="rgb(252,136,11)" fg:x="23347" fg:w="12"/><text x="39.2149%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (43 samples, 0.07%)</title><rect x="38.9165%" y="117" width="0.0718%" height="15" fill="rgb(219,138,53)" fg:x="23318" fg:w="43"/><text x="39.1665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (103 samples, 0.17%)</title><rect x="38.8481%" y="133" width="0.1719%" height="15" fill="rgb(211,51,23)" fg:x="23277" fg:w="103"/><text x="39.0981%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="38.9883%" y="117" width="0.0317%" height="15" fill="rgb(247,221,28)" fg:x="23361" fg:w="19"/><text x="39.2383%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (181 samples, 0.30%)</title><rect x="38.7563%" y="149" width="0.3021%" height="15" fill="rgb(251,222,45)" fg:x="23222" fg:w="181"/><text x="39.0063%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.04%)</title><rect x="39.0200%" y="133" width="0.0384%" height="15" fill="rgb(217,162,53)" fg:x="23380" fg:w="23"/><text x="39.2700%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="39.0584%" y="149" width="0.0284%" height="15" fill="rgb(229,93,14)" fg:x="23403" fg:w="17"/><text x="39.3084%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (482 samples, 0.80%)</title><rect x="38.2890%" y="197" width="0.8044%" height="15" fill="rgb(209,67,49)" fg:x="22942" fg:w="482"/><text x="38.5390%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (391 samples, 0.65%)</title><rect x="38.4409%" y="181" width="0.6526%" height="15" fill="rgb(213,87,29)" fg:x="23033" fg:w="391"/><text x="38.6909%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (229 samples, 0.38%)</title><rect x="38.7112%" y="165" width="0.3822%" height="15" fill="rgb(205,151,52)" fg:x="23195" fg:w="229"/><text x="38.9612%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="39.0934%" y="197" width="0.0300%" height="15" fill="rgb(253,215,39)" fg:x="23424" fg:w="18"/><text x="39.3434%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (10,355 samples, 17.28%)</title><rect x="21.8732%" y="213" width="17.2820%" height="15" fill="rgb(221,220,41)" fg:x="13106" fg:w="10355"/><text x="22.1232%" y="223.50">rust_qecp`rust_qecp::comple..</text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_node_unwrap (19 samples, 0.03%)</title><rect x="39.1235%" y="197" width="0.0317%" height="15" fill="rgb(218,133,21)" fg:x="23442" fg:w="19"/><text x="39.3735%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (38 samples, 0.06%)</title><rect x="39.3521%" y="197" width="0.0634%" height="15" fill="rgb(221,193,43)" fg:x="23579" fg:w="38"/><text x="39.6021%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="39.7426%" y="117" width="0.0117%" height="15" fill="rgb(240,128,52)" fg:x="23813" fg:w="7"/><text x="39.9926%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="39.7310%" y="165" width="0.0334%" height="15" fill="rgb(253,114,12)" fg:x="23806" fg:w="20"/><text x="39.9810%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="39.7343%" y="149" width="0.0300%" height="15" fill="rgb(215,223,47)" fg:x="23808" fg:w="18"/><text x="39.9843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.03%)</title><rect x="39.7343%" y="133" width="0.0300%" height="15" fill="rgb(248,225,23)" fg:x="23808" fg:w="18"/><text x="39.9843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="39.7543%" y="117" width="0.0100%" height="15" fill="rgb(250,108,0)" fg:x="23820" fg:w="6"/><text x="40.0043%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (52 samples, 0.09%)</title><rect x="39.7744%" y="149" width="0.0868%" height="15" fill="rgb(228,208,7)" fg:x="23832" fg:w="52"/><text x="40.0244%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memmove (6 samples, 0.01%)</title><rect x="39.8628%" y="149" width="0.0100%" height="15" fill="rgb(244,45,10)" fg:x="23885" fg:w="6"/><text x="40.1128%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (78 samples, 0.13%)</title><rect x="39.7643%" y="165" width="0.1302%" height="15" fill="rgb(207,125,25)" fg:x="23826" fg:w="78"/><text x="40.0143%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.02%)</title><rect x="39.8728%" y="149" width="0.0217%" height="15" fill="rgb(210,195,18)" fg:x="23891" fg:w="13"/><text x="40.1228%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (140 samples, 0.23%)</title><rect x="39.6659%" y="181" width="0.2337%" height="15" fill="rgb(249,80,12)" fg:x="23767" fg:w="140"/><text x="39.9159%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (448 samples, 0.75%)</title><rect x="39.1585%" y="213" width="0.7477%" height="15" fill="rgb(221,65,9)" fg:x="23463" fg:w="448"/><text x="39.4085%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (294 samples, 0.49%)</title><rect x="39.4155%" y="197" width="0.4907%" height="15" fill="rgb(235,49,36)" fg:x="23617" fg:w="294"/><text x="39.6655%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode (22,912 samples, 38.24%)</title><rect x="1.6689%" y="229" width="38.2389%" height="15" fill="rgb(225,32,20)" fg:x="1000" fg:w="22912"/><text x="1.9189%" y="239.50">rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="60.7964%" y="213" width="0.0417%" height="15" fill="rgb(215,141,46)" fg:x="36428" fg:w="25"/><text x="61.0464%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.04%)</title><rect x="60.8031%" y="197" width="0.0350%" height="15" fill="rgb(250,160,47)" fg:x="36432" fg:w="21"/><text x="61.0531%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (17 samples, 0.03%)</title><rect x="60.8098%" y="181" width="0.0284%" height="15" fill="rgb(216,222,40)" fg:x="36436" fg:w="17"/><text x="61.0598%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (6 samples, 0.01%)</title><rect x="60.8281%" y="165" width="0.0100%" height="15" fill="rgb(234,217,39)" fg:x="36447" fg:w="6"/><text x="61.0781%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.04%)</title><rect x="60.8381%" y="213" width="0.0384%" height="15" fill="rgb(207,178,40)" fg:x="36453" fg:w="23"/><text x="61.0881%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (35 samples, 0.06%)</title><rect x="60.8765%" y="213" width="0.0584%" height="15" fill="rgb(221,136,13)" fg:x="36476" fg:w="35"/><text x="61.1265%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (790 samples, 1.32%)</title><rect x="60.9416%" y="213" width="1.3185%" height="15" fill="rgb(249,199,10)" fg:x="36515" fg:w="790"/><text x="61.1916%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (29,498 samples, 49.23%)</title><rect x="39.9079%" y="229" width="49.2306%" height="15" fill="rgb(249,222,13)" fg:x="23912" fg:w="29498"/><text x="40.1579%" y="239.50">rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (16,105 samples, 26.88%)</title><rect x="62.2601%" y="213" width="26.8784%" height="15" fill="rgb(244,185,38)" fg:x="37305" fg:w="16105"/><text x="62.5101%" y="223.50">rust_qecp`rust_qecp::simulator::Simulator::..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (12,466 samples, 20.81%)</title><rect x="68.3334%" y="197" width="20.8051%" height="15" fill="rgb(236,202,9)" fg:x="40944" fg:w="12466"/><text x="68.5834%" y="207.50">rust_qecp`rust_qecp::simulator::S..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.06%)</title><rect x="96.5202%" y="197" width="0.0551%" height="15" fill="rgb(250,229,37)" fg:x="57833" fg:w="33"/><text x="96.7702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.05%)</title><rect x="96.5219%" y="181" width="0.0534%" height="15" fill="rgb(206,174,23)" fg:x="57834" fg:w="32"/><text x="96.7719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.05%)</title><rect x="96.5269%" y="165" width="0.0484%" height="15" fill="rgb(211,33,43)" fg:x="57837" fg:w="29"/><text x="96.7769%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.04%)</title><rect x="96.5369%" y="149" width="0.0384%" height="15" fill="rgb(245,58,50)" fg:x="57843" fg:w="23"/><text x="96.7869%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="96.5987%" y="181" width="0.0150%" height="15" fill="rgb(244,68,36)" fg:x="57880" fg:w="9"/><text x="96.8487%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="96.6004%" y="165" width="0.0134%" height="15" fill="rgb(232,229,15)" fg:x="57881" fg:w="8"/><text x="96.8504%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="96.6020%" y="149" width="0.0117%" height="15" fill="rgb(254,30,23)" fg:x="57882" fg:w="7"/><text x="96.8520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="96.6571%" y="165" width="0.0117%" height="15" fill="rgb(235,160,14)" fg:x="57915" fg:w="7"/><text x="96.9071%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (55 samples, 0.09%)</title><rect x="96.5803%" y="197" width="0.0918%" height="15" fill="rgb(212,155,44)" fg:x="57869" fg:w="55"/><text x="96.8303%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (33 samples, 0.06%)</title><rect x="96.6170%" y="181" width="0.0551%" height="15" fill="rgb(226,2,50)" fg:x="57891" fg:w="33"/><text x="96.8670%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (161 samples, 0.27%)</title><rect x="96.4134%" y="213" width="0.2687%" height="15" fill="rgb(234,177,6)" fg:x="57769" fg:w="161"/><text x="96.6634%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.01%)</title><rect x="96.6721%" y="197" width="0.0100%" height="15" fill="rgb(217,24,9)" fg:x="57924" fg:w="6"/><text x="96.9221%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_error_pattern (4,525 samples, 7.55%)</title><rect x="89.1385%" y="229" width="7.5520%" height="15" fill="rgb(220,13,46)" fg:x="53410" fg:w="4525"/><text x="89.3885%" y="239.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="99.4976%" y="181" width="0.0217%" height="15" fill="rgb(239,221,27)" fg:x="59617" fg:w="13"/><text x="99.7476%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="99.4993%" y="165" width="0.0200%" height="15" fill="rgb(222,198,25)" fg:x="59618" fg:w="12"/><text x="99.7493%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="99.4926%" y="197" width="0.0317%" height="15" fill="rgb(211,99,13)" fg:x="59614" fg:w="19"/><text x="99.7426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="99.5577%" y="165" width="0.0217%" height="15" fill="rgb(232,111,31)" fg:x="59653" fg:w="13"/><text x="99.8077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="99.5594%" y="149" width="0.0200%" height="15" fill="rgb(245,82,37)" fg:x="59654" fg:w="12"/><text x="99.8094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="99.5544%" y="181" width="0.0284%" height="15" fill="rgb(227,149,46)" fg:x="59651" fg:w="17"/><text x="99.8044%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="99.6762%" y="117" width="0.0117%" height="15" fill="rgb(218,36,50)" fg:x="59724" fg:w="7"/><text x="99.9262%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="99.6612%" y="149" width="0.0384%" height="15" fill="rgb(226,80,48)" fg:x="59715" fg:w="23"/><text x="99.9112%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="99.6662%" y="133" width="0.0334%" height="15" fill="rgb(238,224,15)" fg:x="59718" fg:w="20"/><text x="99.9162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.6879%" y="117" width="0.0117%" height="15" fill="rgb(241,136,10)" fg:x="59731" fg:w="7"/><text x="99.9379%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="99.6595%" y="165" width="0.0417%" height="15" fill="rgb(208,32,45)" fg:x="59714" fg:w="25"/><text x="99.9095%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (68 samples, 0.11%)</title><rect x="99.5894%" y="181" width="0.1135%" height="15" fill="rgb(207,135,9)" fg:x="59672" fg:w="68"/><text x="99.8394%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (111 samples, 0.19%)</title><rect x="99.5294%" y="197" width="0.1853%" height="15" fill="rgb(206,86,44)" fg:x="59636" fg:w="111"/><text x="99.7794%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::splitpoint (7 samples, 0.01%)</title><rect x="99.7029%" y="181" width="0.0117%" height="15" fill="rgb(245,177,15)" fg:x="59740" fg:w="7"/><text x="99.9529%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (507 samples, 0.85%)</title><rect x="98.8851%" y="213" width="0.8462%" height="15" fill="rgb(206,64,50)" fg:x="59250" fg:w="507"/><text x="99.1351%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.02%)</title><rect x="99.7146%" y="197" width="0.0167%" height="15" fill="rgb(234,36,40)" fg:x="59747" fg:w="10"/><text x="99.9646%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (1,834 samples, 3.06%)</title><rect x="96.6905%" y="229" width="3.0608%" height="15" fill="rgb(213,64,8)" fg:x="57935" fg:w="1834"/><text x="96.9405%" y="239.50">rus..</text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (12 samples, 0.02%)</title><rect x="99.7313%" y="213" width="0.0200%" height="15" fill="rgb(210,75,36)" fg:x="59757" fg:w="12"/><text x="99.9813%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.02%)</title><rect x="99.7530%" y="213" width="0.0184%" height="15" fill="rgb(229,88,21)" fg:x="59770" fg:w="11"/><text x="100.0030%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::validate_correction (143 samples, 0.24%)</title><rect x="99.7530%" y="229" width="0.2387%" height="15" fill="rgb(252,204,47)" fg:x="59770" fg:w="143"/><text x="100.0030%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::code_builder_validate_correction (132 samples, 0.22%)</title><rect x="99.7714%" y="213" width="0.2203%" height="15" fill="rgb(208,77,27)" fg:x="59781" fg:w="132"/><text x="100.0214%" y="223.50"></text></g><g><title>all (59,918 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="59918"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,850 samples, 99.89%)</title><rect x="0.1135%" y="309" width="99.8865%" height="15" fill="rgb(225,139,18)" fg:x="68" fg:w="59850"/><text x="0.3635%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,850 samples, 99.89%)</title><rect x="0.1135%" y="293" width="99.8865%" height="15" fill="rgb(230,137,11)" fg:x="68" fg:w="59850"/><text x="0.3635%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,850 samples, 99.89%)</title><rect x="0.1135%" y="277" width="99.8865%" height="15" fill="rgb(212,28,1)" fg:x="68" fg:w="59850"/><text x="0.3635%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,850 samples, 99.89%)</title><rect x="0.1135%" y="261" width="99.8865%" height="15" fill="rgb(248,164,17)" fg:x="68" fg:w="59850"/><text x="0.3635%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,803 samples, 99.81%)</title><rect x="0.1919%" y="245" width="99.8081%" height="15" fill="rgb(222,171,42)" fg:x="115" fg:w="59803"/><text x="0.4419%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>