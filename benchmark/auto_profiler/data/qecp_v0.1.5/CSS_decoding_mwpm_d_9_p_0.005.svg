<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="60577"><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0050%" y="85" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="10"/><text x="0.2550%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (7 samples, 0.01%)</title><rect x="0.0099%" y="69" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="7"/><text x="0.2599%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="0.0050%" y="133" width="0.0198%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="12"/><text x="0.2550%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="0.0050%" y="117" width="0.0198%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="12"/><text x="0.2550%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.02%)</title><rect x="0.0050%" y="101" width="0.0198%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="12"/><text x="0.2550%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0363%" y="69" width="0.0231%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="14"/><text x="0.2863%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (10 samples, 0.02%)</title><rect x="0.0429%" y="53" width="0.0165%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="10"/><text x="0.2929%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0429%" y="37" width="0.0165%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="10"/><text x="0.2929%" y="47.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.04%)</title><rect x="0.0297%" y="85" width="0.0380%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="23"/><text x="0.2797%" y="95.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (25 samples, 0.04%)</title><rect x="0.0297%" y="133" width="0.0413%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="25"/><text x="0.2797%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (25 samples, 0.04%)</title><rect x="0.0297%" y="117" width="0.0413%" height="15" fill="rgb(250,228,42)" fg:x="18" fg:w="25"/><text x="0.2797%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt; (25 samples, 0.04%)</title><rect x="0.0297%" y="101" width="0.0413%" height="15" fill="rgb(240,193,28)" fg:x="18" fg:w="25"/><text x="0.2797%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (8 samples, 0.01%)</title><rect x="0.0710%" y="117" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="43" fg:w="8"/><text x="0.3210%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.01%)</title><rect x="0.0710%" y="101" width="0.0132%" height="15" fill="rgb(206,188,39)" fg:x="43" fg:w="8"/><text x="0.3210%" y="111.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (15 samples, 0.02%)</title><rect x="0.0710%" y="133" width="0.0248%" height="15" fill="rgb(217,207,13)" fg:x="43" fg:w="15"/><text x="0.3210%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (16 samples, 0.03%)</title><rect x="0.1040%" y="117" width="0.0264%" height="15" fill="rgb(231,73,38)" fg:x="63" fg:w="16"/><text x="0.3540%" y="127.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.04%)</title><rect x="0.3004%" y="101" width="0.0446%" height="15" fill="rgb(225,20,46)" fg:x="182" fg:w="27"/><text x="0.5504%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (81 samples, 0.13%)</title><rect x="0.3450%" y="101" width="0.1337%" height="15" fill="rgb(210,31,41)" fg:x="209" fg:w="81"/><text x="0.5950%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 0.03%)</title><rect x="0.4787%" y="101" width="0.0347%" height="15" fill="rgb(221,200,47)" fg:x="290" fg:w="21"/><text x="0.7287%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.02%)</title><rect x="0.5150%" y="101" width="0.0182%" height="15" fill="rgb(226,26,5)" fg:x="312" fg:w="11"/><text x="0.7650%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (8 samples, 0.01%)</title><rect x="0.5332%" y="101" width="0.0132%" height="15" fill="rgb(249,33,26)" fg:x="323" fg:w="8"/><text x="0.7832%" y="111.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (27 samples, 0.04%)</title><rect x="0.5464%" y="101" width="0.0446%" height="15" fill="rgb(235,183,28)" fg:x="331" fg:w="27"/><text x="0.7964%" y="111.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (174 samples, 0.29%)</title><rect x="0.5910%" y="101" width="0.2872%" height="15" fill="rgb(221,5,38)" fg:x="358" fg:w="174"/><text x="0.8410%" y="111.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (31 samples, 0.05%)</title><rect x="0.8898%" y="101" width="0.0512%" height="15" fill="rgb(247,18,42)" fg:x="539" fg:w="31"/><text x="1.1398%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="0.9492%" y="85" width="0.0198%" height="15" fill="rgb(241,131,45)" fg:x="575" fg:w="12"/><text x="1.1992%" y="95.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (8 samples, 0.01%)</title><rect x="0.9723%" y="85" width="0.0132%" height="15" fill="rgb(249,31,29)" fg:x="589" fg:w="8"/><text x="1.2223%" y="95.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (34 samples, 0.06%)</title><rect x="0.9410%" y="101" width="0.0561%" height="15" fill="rgb(225,111,53)" fg:x="570" fg:w="34"/><text x="1.1910%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (526 samples, 0.87%)</title><rect x="0.1387%" y="117" width="0.8683%" height="15" fill="rgb(238,160,17)" fg:x="84" fg:w="526"/><text x="0.3887%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="1.1060%" y="85" width="0.0116%" height="15" fill="rgb(214,148,48)" fg:x="670" fg:w="7"/><text x="1.3560%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (66 samples, 0.11%)</title><rect x="1.0416%" y="101" width="0.1090%" height="15" fill="rgb(232,36,49)" fg:x="631" fg:w="66"/><text x="1.2916%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (13 samples, 0.02%)</title><rect x="1.1291%" y="85" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="684" fg:w="13"/><text x="1.3791%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::new (643 samples, 1.06%)</title><rect x="0.0957%" y="133" width="1.0615%" height="15" fill="rgb(229,88,8)" fg:x="58" fg:w="643"/><text x="0.3457%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (91 samples, 0.15%)</title><rect x="1.0070%" y="117" width="0.1502%" height="15" fill="rgb(213,181,19)" fg:x="610" fg:w="91"/><text x="1.2570%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark::_{{closure}} (9 samples, 0.01%)</title><rect x="1.1589%" y="133" width="0.0149%" height="15" fill="rgb(254,191,54)" fg:x="702" fg:w="9"/><text x="1.4089%" y="143.50"></text></g><g><title>rust_qecp`alloc::fmt::format (9 samples, 0.01%)</title><rect x="1.1589%" y="117" width="0.0149%" height="15" fill="rgb(241,83,37)" fg:x="702" fg:w="9"/><text x="1.4089%" y="127.50"></text></g><g><title>rust_qecp`core::fmt::write (8 samples, 0.01%)</title><rect x="1.1605%" y="101" width="0.0132%" height="15" fill="rgb(233,36,39)" fg:x="703" fg:w="8"/><text x="1.4105%" y="111.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (714 samples, 1.18%)</title><rect x="0.0017%" y="181" width="1.1787%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="714"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (714 samples, 1.18%)</title><rect x="0.0017%" y="165" width="1.1787%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="714"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (714 samples, 1.18%)</title><rect x="0.0017%" y="149" width="1.1787%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="714"/><text x="0.2517%" y="159.50"></text></g><g><title>dyld`start (716 samples, 1.18%)</title><rect x="0.0000%" y="373" width="1.1820%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="716"/><text x="0.2500%" y="383.50"></text></g><g><title>rust_qecp`main (715 samples, 1.18%)</title><rect x="0.0017%" y="357" width="1.1803%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="715"/><text x="0.2517%" y="367.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (715 samples, 1.18%)</title><rect x="0.0017%" y="341" width="1.1803%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="715"/><text x="0.2517%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (715 samples, 1.18%)</title><rect x="0.0017%" y="325" width="1.1803%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="715"/><text x="0.2517%" y="335.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (715 samples, 1.18%)</title><rect x="0.0017%" y="309" width="1.1803%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="715"/><text x="0.2517%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::main (715 samples, 1.18%)</title><rect x="0.0017%" y="293" width="1.1803%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="715"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (715 samples, 1.18%)</title><rect x="0.0017%" y="277" width="1.1803%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="715"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (715 samples, 1.18%)</title><rect x="0.0017%" y="261" width="1.1803%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="715"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (715 samples, 1.18%)</title><rect x="0.0017%" y="245" width="1.1803%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="715"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (715 samples, 1.18%)</title><rect x="0.0017%" y="229" width="1.1803%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="715"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (715 samples, 1.18%)</title><rect x="0.0017%" y="213" width="1.1803%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="715"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (715 samples, 1.18%)</title><rect x="0.0017%" y="197" width="1.1803%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="715"/><text x="0.2517%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.02%)</title><rect x="1.1886%" y="293" width="0.0198%" height="15" fill="rgb(250,213,24)" fg:x="720" fg:w="12"/><text x="1.4386%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="1.2480%" y="261" width="0.0215%" height="15" fill="rgb(247,123,22)" fg:x="756" fg:w="13"/><text x="1.4980%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="1.2480%" y="245" width="0.0215%" height="15" fill="rgb(231,138,38)" fg:x="756" fg:w="13"/><text x="1.4980%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="1.2513%" y="229" width="0.0182%" height="15" fill="rgb(231,145,46)" fg:x="758" fg:w="11"/><text x="1.5013%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (43 samples, 0.07%)</title><rect x="1.2315%" y="293" width="0.0710%" height="15" fill="rgb(251,118,11)" fg:x="746" fg:w="43"/><text x="1.4815%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (42 samples, 0.07%)</title><rect x="1.2331%" y="277" width="0.0693%" height="15" fill="rgb(217,147,25)" fg:x="747" fg:w="42"/><text x="1.4831%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (20 samples, 0.03%)</title><rect x="1.2695%" y="261" width="0.0330%" height="15" fill="rgb(247,81,37)" fg:x="769" fg:w="20"/><text x="1.5195%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="1.2794%" y="245" width="0.0231%" height="15" fill="rgb(209,12,38)" fg:x="775" fg:w="14"/><text x="1.5294%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="1.2794%" y="229" width="0.0231%" height="15" fill="rgb(227,1,9)" fg:x="775" fg:w="14"/><text x="1.5294%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="1.2794%" y="213" width="0.0231%" height="15" fill="rgb(248,47,43)" fg:x="775" fg:w="14"/><text x="1.5294%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="1.2909%" y="197" width="0.0116%" height="15" fill="rgb(221,10,30)" fg:x="782" fg:w="7"/><text x="1.5409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="1.3322%" y="277" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="807" fg:w="9"/><text x="1.5822%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="1.3470%" y="277" width="0.0149%" height="15" fill="rgb(222,148,37)" fg:x="816" fg:w="9"/><text x="1.5970%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="1.3470%" y="261" width="0.0149%" height="15" fill="rgb(234,67,33)" fg:x="816" fg:w="9"/><text x="1.5970%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="1.4131%" y="261" width="0.0314%" height="15" fill="rgb(247,98,35)" fg:x="856" fg:w="19"/><text x="1.6631%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="1.4312%" y="245" width="0.0132%" height="15" fill="rgb(247,138,52)" fg:x="867" fg:w="8"/><text x="1.6812%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="1.4312%" y="229" width="0.0132%" height="15" fill="rgb(213,79,30)" fg:x="867" fg:w="8"/><text x="1.6812%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="1.4824%" y="229" width="0.0165%" height="15" fill="rgb(246,177,23)" fg:x="898" fg:w="10"/><text x="1.7324%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (56 samples, 0.09%)</title><rect x="1.4444%" y="261" width="0.0924%" height="15" fill="rgb(230,62,27)" fg:x="875" fg:w="56"/><text x="1.6944%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (49 samples, 0.08%)</title><rect x="1.4560%" y="245" width="0.0809%" height="15" fill="rgb(216,154,8)" fg:x="882" fg:w="49"/><text x="1.7060%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (23 samples, 0.04%)</title><rect x="1.4989%" y="229" width="0.0380%" height="15" fill="rgb(244,35,45)" fg:x="908" fg:w="23"/><text x="1.7489%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (148 samples, 0.24%)</title><rect x="1.3025%" y="293" width="0.2443%" height="15" fill="rgb(251,115,12)" fg:x="789" fg:w="148"/><text x="1.5525%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (106 samples, 0.17%)</title><rect x="1.3718%" y="277" width="0.1750%" height="15" fill="rgb(240,54,50)" fg:x="831" fg:w="106"/><text x="1.6218%" y="287.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.01%)</title><rect x="1.5633%" y="293" width="0.0116%" height="15" fill="rgb(233,84,52)" fg:x="947" fg:w="7"/><text x="1.8133%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="1.5633%" y="277" width="0.0116%" height="15" fill="rgb(207,117,47)" fg:x="947" fg:w="7"/><text x="1.8133%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="2.7931%" y="277" width="0.0165%" height="15" fill="rgb(249,43,39)" fg:x="1692" fg:w="10"/><text x="3.0431%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="2.8311%" y="261" width="0.0149%" height="15" fill="rgb(209,38,44)" fg:x="1715" fg:w="9"/><text x="3.0811%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.07%)</title><rect x="2.8113%" y="277" width="0.0710%" height="15" fill="rgb(236,212,23)" fg:x="1703" fg:w="43"/><text x="3.0613%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="2.8476%" y="261" width="0.0347%" height="15" fill="rgb(242,79,21)" fg:x="1725" fg:w="21"/><text x="3.0976%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.03%)</title><rect x="2.8542%" y="245" width="0.0281%" height="15" fill="rgb(211,96,35)" fg:x="1729" fg:w="17"/><text x="3.1042%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="2.8922%" y="277" width="0.0182%" height="15" fill="rgb(253,215,40)" fg:x="1752" fg:w="11"/><text x="3.1422%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="2.9599%" y="261" width="0.0231%" height="15" fill="rgb(211,81,21)" fg:x="1793" fg:w="14"/><text x="3.2099%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="2.9698%" y="245" width="0.0132%" height="15" fill="rgb(208,190,38)" fg:x="1799" fg:w="8"/><text x="3.2198%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="2.9714%" y="229" width="0.0116%" height="15" fill="rgb(235,213,38)" fg:x="1800" fg:w="7"/><text x="3.2214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="3.0110%" y="229" width="0.0132%" height="15" fill="rgb(237,122,38)" fg:x="1824" fg:w="8"/><text x="3.2610%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.06%)</title><rect x="2.9830%" y="261" width="0.0561%" height="15" fill="rgb(244,218,35)" fg:x="1807" fg:w="34"/><text x="3.2330%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (29 samples, 0.05%)</title><rect x="2.9912%" y="245" width="0.0479%" height="15" fill="rgb(240,68,47)" fg:x="1812" fg:w="29"/><text x="3.2412%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="3.0243%" y="229" width="0.0149%" height="15" fill="rgb(210,16,53)" fg:x="1832" fg:w="9"/><text x="3.2743%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.11%)</title><rect x="2.9450%" y="277" width="0.1106%" height="15" fill="rgb(235,124,12)" fg:x="1784" fg:w="67"/><text x="3.1950%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="3.0721%" y="277" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="1861" fg:w="7"/><text x="3.3221%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (18 samples, 0.03%)</title><rect x="3.0837%" y="277" width="0.0297%" height="15" fill="rgb(250,166,2)" fg:x="1868" fg:w="18"/><text x="3.3337%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (15 samples, 0.02%)</title><rect x="3.1200%" y="277" width="0.0248%" height="15" fill="rgb(242,216,29)" fg:x="1890" fg:w="15"/><text x="3.3700%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17 samples, 0.03%)</title><rect x="3.1679%" y="213" width="0.0281%" height="15" fill="rgb(230,116,27)" fg:x="1919" fg:w="17"/><text x="3.4179%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (51 samples, 0.08%)</title><rect x="3.1580%" y="229" width="0.0842%" height="15" fill="rgb(228,99,48)" fg:x="1913" fg:w="51"/><text x="3.4080%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.05%)</title><rect x="3.1959%" y="213" width="0.0462%" height="15" fill="rgb(253,11,6)" fg:x="1936" fg:w="28"/><text x="3.4459%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (64 samples, 0.11%)</title><rect x="3.1448%" y="277" width="0.1057%" height="15" fill="rgb(247,143,39)" fg:x="1905" fg:w="64"/><text x="3.3948%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (58 samples, 0.10%)</title><rect x="3.1547%" y="261" width="0.0957%" height="15" fill="rgb(236,97,10)" fg:x="1911" fg:w="58"/><text x="3.4047%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (57 samples, 0.09%)</title><rect x="3.1563%" y="245" width="0.0941%" height="15" fill="rgb(233,208,19)" fg:x="1912" fg:w="57"/><text x="3.4063%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="7.5359%" y="261" width="0.0116%" height="15" fill="rgb(216,164,2)" fg:x="4565" fg:w="7"/><text x="7.7859%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (507 samples, 0.84%)</title><rect x="7.5590%" y="245" width="0.8370%" height="15" fill="rgb(220,129,5)" fg:x="4579" fg:w="507"/><text x="7.8090%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (512 samples, 0.85%)</title><rect x="7.5524%" y="261" width="0.8452%" height="15" fill="rgb(242,17,10)" fg:x="4575" fg:w="512"/><text x="7.8024%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (484 samples, 0.80%)</title><rect x="8.4025%" y="261" width="0.7990%" height="15" fill="rgb(242,107,0)" fg:x="5090" fg:w="484"/><text x="8.6525%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (18 samples, 0.03%)</title><rect x="9.4442%" y="245" width="0.0297%" height="15" fill="rgb(251,28,31)" fg:x="5721" fg:w="18"/><text x="9.6942%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="9.4755%" y="245" width="0.0132%" height="15" fill="rgb(233,223,10)" fg:x="5740" fg:w="8"/><text x="9.7255%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (2,403 samples, 3.97%)</title><rect x="9.4887%" y="245" width="3.9669%" height="15" fill="rgb(215,21,27)" fg:x="5748" fg:w="2403"/><text x="9.7387%" y="255.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::Finish (45 samples, 0.07%)</title><rect x="13.4556%" y="245" width="0.0743%" height="15" fill="rgb(232,23,21)" fg:x="8151" fg:w="45"/><text x="13.7056%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (483 samples, 0.80%)</title><rect x="13.5464%" y="245" width="0.7973%" height="15" fill="rgb(244,5,23)" fg:x="8206" fg:w="483"/><text x="13.7964%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (840 samples, 1.39%)</title><rect x="14.7465%" y="229" width="1.3867%" height="15" fill="rgb(226,81,46)" fg:x="8933" fg:w="840"/><text x="14.9965%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (402 samples, 0.66%)</title><rect x="16.1348%" y="213" width="0.6636%" height="15" fill="rgb(247,70,30)" fg:x="9774" fg:w="402"/><text x="16.3848%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (409 samples, 0.68%)</title><rect x="16.1348%" y="229" width="0.6752%" height="15" fill="rgb(212,68,19)" fg:x="9774" fg:w="409"/><text x="16.3848%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (7 samples, 0.01%)</title><rect x="16.7985%" y="213" width="0.0116%" height="15" fill="rgb(240,187,13)" fg:x="10176" fg:w="7"/><text x="17.0485%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (11 samples, 0.02%)</title><rect x="32.0666%" y="197" width="0.0182%" height="15" fill="rgb(223,113,26)" fg:x="19425" fg:w="11"/><text x="32.3166%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (14 samples, 0.02%)</title><rect x="32.0666%" y="213" width="0.0231%" height="15" fill="rgb(206,192,2)" fg:x="19425" fg:w="14"/><text x="32.3166%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (9,252 samples, 15.27%)</title><rect x="16.8183%" y="229" width="15.2731%" height="15" fill="rgb(241,108,4)" fg:x="10188" fg:w="9252"/><text x="17.0683%" y="239.50">rust_qecp`PerfectMatchi..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (144 samples, 0.24%)</title><rect x="36.0632%" y="181" width="0.2377%" height="15" fill="rgb(247,173,49)" fg:x="21846" fg:w="144"/><text x="36.3132%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,130 samples, 1.87%)</title><rect x="34.4586%" y="213" width="1.8654%" height="15" fill="rgb(224,114,35)" fg:x="20874" fg:w="1130"/><text x="34.7086%" y="223.50">r..</text></g><g><title>rust_qecp`PerfectMatching::Augment (158 samples, 0.26%)</title><rect x="36.0632%" y="197" width="0.2608%" height="15" fill="rgb(245,159,27)" fg:x="21846" fg:w="158"/><text x="36.3132%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (14 samples, 0.02%)</title><rect x="36.3009%" y="181" width="0.0231%" height="15" fill="rgb(245,172,44)" fg:x="21990" fg:w="14"/><text x="36.5509%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,958 samples, 4.88%)</title><rect x="32.0930%" y="229" width="4.8830%" height="15" fill="rgb(236,23,11)" fg:x="19441" fg:w="2958"/><text x="32.3430%" y="239.50">rust_q..</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (395 samples, 0.65%)</title><rect x="36.3240%" y="213" width="0.6521%" height="15" fill="rgb(205,117,38)" fg:x="22004" fg:w="395"/><text x="36.5740%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (3,326 samples, 5.49%)</title><rect x="37.5390%" y="213" width="5.4905%" height="15" fill="rgb(237,72,25)" fg:x="22740" fg:w="3326"/><text x="37.7890%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (3,672 samples, 6.06%)</title><rect x="36.9761%" y="229" width="6.0617%" height="15" fill="rgb(244,70,9)" fg:x="22399" fg:w="3672"/><text x="37.2261%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (54 samples, 0.09%)</title><rect x="48.0331%" y="197" width="0.0891%" height="15" fill="rgb(217,125,39)" fg:x="29097" fg:w="54"/><text x="48.2831%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (77 samples, 0.13%)</title><rect x="48.0314%" y="213" width="0.1271%" height="15" fill="rgb(235,36,10)" fg:x="29096" fg:w="77"/><text x="48.2814%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (22 samples, 0.04%)</title><rect x="48.1222%" y="197" width="0.0363%" height="15" fill="rgb(251,123,47)" fg:x="29151" fg:w="22"/><text x="48.3722%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,130 samples, 5.17%)</title><rect x="43.0444%" y="229" width="5.1670%" height="15" fill="rgb(221,13,13)" fg:x="26075" fg:w="3130"/><text x="43.2944%" y="239.50">rust_q..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (32 samples, 0.05%)</title><rect x="48.1585%" y="213" width="0.0528%" height="15" fill="rgb(238,131,9)" fg:x="29173" fg:w="32"/><text x="48.4085%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (20,954 samples, 34.59%)</title><rect x="14.3470%" y="245" width="34.5907%" height="15" fill="rgb(211,50,8)" fg:x="8691" fg:w="20954"/><text x="14.5970%" y="255.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (438 samples, 0.72%)</title><rect x="48.2147%" y="229" width="0.7230%" height="15" fill="rgb(245,182,24)" fg:x="29207" fg:w="438"/><text x="48.4647%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.04%)</title><rect x="48.9460%" y="213" width="0.0429%" height="15" fill="rgb(242,14,37)" fg:x="29650" fg:w="26"/><text x="49.1960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (27 samples, 0.04%)</title><rect x="48.9460%" y="229" width="0.0446%" height="15" fill="rgb(246,228,12)" fg:x="29650" fg:w="27"/><text x="49.1960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="48.9905%" y="229" width="0.0132%" height="15" fill="rgb(213,55,15)" fg:x="29677" fg:w="8"/><text x="49.2405%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (42 samples, 0.07%)</title><rect x="48.9394%" y="245" width="0.0693%" height="15" fill="rgb(209,9,3)" fg:x="29646" fg:w="42"/><text x="49.1894%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (27,910 samples, 46.07%)</title><rect x="3.2504%" y="277" width="46.0736%" height="15" fill="rgb(230,59,30)" fg:x="1969" fg:w="27910"/><text x="3.5004%" y="287.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (24,303 samples, 40.12%)</title><rect x="9.2048%" y="261" width="40.1192%" height="15" fill="rgb(209,121,21)" fg:x="5576" fg:w="24303"/><text x="9.4548%" y="271.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (191 samples, 0.32%)</title><rect x="49.0087%" y="245" width="0.3153%" height="15" fill="rgb(220,109,13)" fg:x="29688" fg:w="191"/><text x="49.2587%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="49.3488%" y="213" width="0.0264%" height="15" fill="rgb(232,18,1)" fg:x="29894" fg:w="16"/><text x="49.5988%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="49.3554%" y="197" width="0.0198%" height="15" fill="rgb(215,41,42)" fg:x="29898" fg:w="12"/><text x="49.6054%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="49.3438%" y="229" width="0.0578%" height="15" fill="rgb(224,123,36)" fg:x="29891" fg:w="35"/><text x="49.5938%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="49.3752%" y="213" width="0.0264%" height="15" fill="rgb(240,125,3)" fg:x="29910" fg:w="16"/><text x="49.6252%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (59 samples, 0.10%)</title><rect x="49.3339%" y="245" width="0.0974%" height="15" fill="rgb(205,98,50)" fg:x="29885" fg:w="59"/><text x="49.5839%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (12 samples, 0.02%)</title><rect x="49.4115%" y="229" width="0.0198%" height="15" fill="rgb(205,185,37)" fg:x="29932" fg:w="12"/><text x="49.6615%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.01%)</title><rect x="49.4164%" y="213" width="0.0149%" height="15" fill="rgb(238,207,15)" fg:x="29935" fg:w="9"/><text x="49.6664%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (72 samples, 0.12%)</title><rect x="49.3240%" y="277" width="0.1189%" height="15" fill="rgb(213,199,42)" fg:x="29879" fg:w="72"/><text x="49.5740%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (68 samples, 0.11%)</title><rect x="49.3306%" y="261" width="0.1123%" height="15" fill="rgb(235,201,11)" fg:x="29883" fg:w="68"/><text x="49.5806%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="49.4313%" y="245" width="0.0116%" height="15" fill="rgb(207,46,11)" fg:x="29944" fg:w="7"/><text x="49.6813%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.02%)</title><rect x="50.6892%" y="213" width="0.0182%" height="15" fill="rgb(241,35,35)" fg:x="30706" fg:w="11"/><text x="50.9392%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (69 samples, 0.11%)</title><rect x="50.6364%" y="245" width="0.1139%" height="15" fill="rgb(243,32,47)" fg:x="30674" fg:w="69"/><text x="50.8864%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.09%)</title><rect x="50.6644%" y="229" width="0.0858%" height="15" fill="rgb(247,202,23)" fg:x="30691" fg:w="52"/><text x="50.9144%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.04%)</title><rect x="50.7074%" y="213" width="0.0429%" height="15" fill="rgb(219,102,11)" fg:x="30717" fg:w="26"/><text x="50.9574%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="50.7371%" y="197" width="0.0132%" height="15" fill="rgb(243,110,44)" fg:x="30735" fg:w="8"/><text x="50.9871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (91 samples, 0.15%)</title><rect x="50.6215%" y="261" width="0.1502%" height="15" fill="rgb(222,74,54)" fg:x="30665" fg:w="91"/><text x="50.8715%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="50.7503%" y="245" width="0.0215%" height="15" fill="rgb(216,99,12)" fg:x="30743" fg:w="13"/><text x="51.0003%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.07%)</title><rect x="50.7783%" y="261" width="0.0677%" height="15" fill="rgb(226,22,26)" fg:x="30760" fg:w="41"/><text x="51.0283%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (60 samples, 0.10%)</title><rect x="50.8460%" y="261" width="0.0990%" height="15" fill="rgb(217,163,10)" fg:x="30801" fg:w="60"/><text x="51.0960%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (39 samples, 0.06%)</title><rect x="50.8807%" y="245" width="0.0644%" height="15" fill="rgb(213,25,53)" fg:x="30822" fg:w="39"/><text x="51.1307%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (956 samples, 1.58%)</title><rect x="49.4429%" y="277" width="1.5782%" height="15" fill="rgb(252,105,26)" fg:x="29951" fg:w="956"/><text x="49.6929%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (43 samples, 0.07%)</title><rect x="50.9500%" y="261" width="0.0710%" height="15" fill="rgb(220,39,43)" fg:x="30864" fg:w="43"/><text x="51.2000%" y="271.50"></text></g><g><title>rust_qecp`__rdl_realloc (8 samples, 0.01%)</title><rect x="84.8854%" y="245" width="0.0132%" height="15" fill="rgb(229,68,48)" fg:x="51421" fg:w="8"/><text x="85.1354%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="84.9398%" y="197" width="0.0297%" height="15" fill="rgb(252,8,32)" fg:x="51454" fg:w="18"/><text x="85.1898%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="84.9151%" y="229" width="0.0578%" height="15" fill="rgb(223,20,43)" fg:x="51439" fg:w="35"/><text x="85.1651%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.05%)</title><rect x="84.9266%" y="213" width="0.0462%" height="15" fill="rgb(229,81,49)" fg:x="51446" fg:w="28"/><text x="85.1766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="84.9811%" y="229" width="0.0132%" height="15" fill="rgb(236,28,36)" fg:x="51479" fg:w="8"/><text x="85.2311%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (7 samples, 0.01%)</title><rect x="85.0669%" y="197" width="0.0116%" height="15" fill="rgb(249,185,26)" fg:x="51531" fg:w="7"/><text x="85.3169%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="85.0785%" y="197" width="0.0132%" height="15" fill="rgb(249,174,33)" fg:x="51538" fg:w="8"/><text x="85.3285%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.04%)</title><rect x="85.0983%" y="197" width="0.0363%" height="15" fill="rgb(233,201,37)" fg:x="51550" fg:w="22"/><text x="85.3483%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (43 samples, 0.07%)</title><rect x="85.1891%" y="181" width="0.0710%" height="15" fill="rgb(221,78,26)" fg:x="51605" fg:w="43"/><text x="85.4391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (58 samples, 0.10%)</title><rect x="85.2782%" y="165" width="0.0957%" height="15" fill="rgb(250,127,30)" fg:x="51659" fg:w="58"/><text x="85.5282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.06%)</title><rect x="85.3162%" y="149" width="0.0578%" height="15" fill="rgb(230,49,44)" fg:x="51682" fg:w="35"/><text x="85.5662%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (73 samples, 0.12%)</title><rect x="85.2601%" y="181" width="0.1205%" height="15" fill="rgb(229,67,23)" fg:x="51648" fg:w="73"/><text x="85.5101%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.04%)</title><rect x="85.3806%" y="181" width="0.0413%" height="15" fill="rgb(249,83,47)" fg:x="51721" fg:w="25"/><text x="85.6306%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="85.4499%" y="149" width="0.0132%" height="15" fill="rgb(215,43,3)" fg:x="51763" fg:w="8"/><text x="85.6999%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.06%)</title><rect x="85.4219%" y="181" width="0.0594%" height="15" fill="rgb(238,154,13)" fg:x="51746" fg:w="36"/><text x="85.6719%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.05%)</title><rect x="85.4285%" y="165" width="0.0528%" height="15" fill="rgb(219,56,2)" fg:x="51750" fg:w="32"/><text x="85.6785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="85.4631%" y="149" width="0.0182%" height="15" fill="rgb(233,0,4)" fg:x="51771" fg:w="11"/><text x="85.7131%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (211 samples, 0.35%)</title><rect x="85.1346%" y="197" width="0.3483%" height="15" fill="rgb(235,30,7)" fg:x="51572" fg:w="211"/><text x="85.3846%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.02%)</title><rect x="85.4994%" y="181" width="0.0231%" height="15" fill="rgb(250,79,13)" fg:x="51793" fg:w="14"/><text x="85.7494%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="85.5259%" y="181" width="0.0182%" height="15" fill="rgb(211,146,34)" fg:x="51809" fg:w="11"/><text x="85.7759%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="85.5259%" y="165" width="0.0182%" height="15" fill="rgb(228,22,38)" fg:x="51809" fg:w="11"/><text x="85.7759%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (38 samples, 0.06%)</title><rect x="85.4862%" y="197" width="0.0627%" height="15" fill="rgb(235,168,5)" fg:x="51785" fg:w="38"/><text x="85.7362%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (350 samples, 0.58%)</title><rect x="85.0438%" y="213" width="0.5778%" height="15" fill="rgb(221,155,16)" fg:x="51517" fg:w="350"/><text x="85.2938%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.07%)</title><rect x="85.5523%" y="197" width="0.0693%" height="15" fill="rgb(215,215,53)" fg:x="51825" fg:w="42"/><text x="85.8023%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.05%)</title><rect x="85.6216%" y="213" width="0.0462%" height="15" fill="rgb(223,4,10)" fg:x="51867" fg:w="28"/><text x="85.8716%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (420 samples, 0.69%)</title><rect x="84.9943%" y="229" width="0.6933%" height="15" fill="rgb(234,103,6)" fg:x="51487" fg:w="420"/><text x="85.2443%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (542 samples, 0.89%)</title><rect x="84.7962%" y="261" width="0.8947%" height="15" fill="rgb(227,97,0)" fg:x="51367" fg:w="542"/><text x="85.0462%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (480 samples, 0.79%)</title><rect x="84.8986%" y="245" width="0.7924%" height="15" fill="rgb(234,150,53)" fg:x="51429" fg:w="480"/><text x="85.1486%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="85.6909%" y="261" width="0.0231%" height="15" fill="rgb(228,201,54)" fg:x="51909" fg:w="14"/><text x="85.9409%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (21,019 samples, 34.70%)</title><rect x="51.0210%" y="277" width="34.6980%" height="15" fill="rgb(222,22,37)" fg:x="30907" fg:w="21019"/><text x="51.2710%" y="287.50">rust_qecp`rust_qecp::complete_model_graph::CompleteModel..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="86.0128%" y="213" width="0.0165%" height="15" fill="rgb(237,53,32)" fg:x="52104" fg:w="10"/><text x="86.2628%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (36 samples, 0.06%)</title><rect x="86.0079%" y="229" width="0.0594%" height="15" fill="rgb(233,25,53)" fg:x="52101" fg:w="36"/><text x="86.2579%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (22 samples, 0.04%)</title><rect x="86.0310%" y="213" width="0.0363%" height="15" fill="rgb(210,40,34)" fg:x="52115" fg:w="22"/><text x="86.2810%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (76 samples, 0.13%)</title><rect x="85.9435%" y="245" width="0.1255%" height="15" fill="rgb(241,220,44)" fg:x="52062" fg:w="76"/><text x="86.1935%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode (51,177 samples, 84.48%)</title><rect x="1.5881%" y="293" width="84.4826%" height="15" fill="rgb(235,28,35)" fg:x="962" fg:w="51177"/><text x="1.8381%" y="303.50">rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode</text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (213 samples, 0.35%)</title><rect x="85.7190%" y="277" width="0.3516%" height="15" fill="rgb(210,56,17)" fg:x="51926" fg:w="213"/><text x="85.9690%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (172 samples, 0.28%)</title><rect x="85.7867%" y="261" width="0.2839%" height="15" fill="rgb(224,130,29)" fg:x="51967" fg:w="172"/><text x="86.0367%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (102 samples, 0.17%)</title><rect x="90.7605%" y="261" width="0.1684%" height="15" fill="rgb(235,212,8)" fg:x="54980" fg:w="102"/><text x="91.0105%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (105 samples, 0.17%)</title><rect x="90.7572%" y="277" width="0.1733%" height="15" fill="rgb(223,33,50)" fg:x="54978" fg:w="105"/><text x="91.0072%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (162 samples, 0.27%)</title><rect x="90.9306%" y="277" width="0.2674%" height="15" fill="rgb(219,149,13)" fg:x="55083" fg:w="162"/><text x="91.1806%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (6,887 samples, 11.37%)</title><rect x="86.0706%" y="293" width="11.3690%" height="15" fill="rgb(250,156,29)" fg:x="52139" fg:w="6887"/><text x="86.3206%" y="303.50">rust_qecp`rust_qe..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (3,781 samples, 6.24%)</title><rect x="91.1980%" y="277" width="6.2416%" height="15" fill="rgb(216,193,19)" fg:x="55245" fg:w="3781"/><text x="91.4480%" y="287.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (2,932 samples, 4.84%)</title><rect x="92.5995%" y="261" width="4.8401%" height="15" fill="rgb(216,135,14)" fg:x="56094" fg:w="2932"/><text x="92.8495%" y="271.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="99.1053%" y="229" width="0.0248%" height="15" fill="rgb(241,47,5)" fg:x="60035" fg:w="15"/><text x="99.3553%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="99.1086%" y="213" width="0.0215%" height="15" fill="rgb(233,42,35)" fg:x="60037" fg:w="13"/><text x="99.3586%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="99.1102%" y="197" width="0.0198%" height="15" fill="rgb(231,13,6)" fg:x="60038" fg:w="12"/><text x="99.3602%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="99.1168%" y="181" width="0.0132%" height="15" fill="rgb(207,181,40)" fg:x="60042" fg:w="8"/><text x="99.3668%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (28 samples, 0.05%)</title><rect x="99.0855%" y="245" width="0.0462%" height="15" fill="rgb(254,173,49)" fg:x="60023" fg:w="28"/><text x="99.3355%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (32 samples, 0.05%)</title><rect x="99.0805%" y="261" width="0.0528%" height="15" fill="rgb(221,1,38)" fg:x="60020" fg:w="32"/><text x="99.3305%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (100 samples, 0.17%)</title><rect x="98.9749%" y="277" width="0.1651%" height="15" fill="rgb(206,124,46)" fg:x="59956" fg:w="100"/><text x="99.2249%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_error_pattern (1,033 samples, 1.71%)</title><rect x="97.4396%" y="293" width="1.7053%" height="15" fill="rgb(249,21,11)" fg:x="59026" fg:w="1033"/><text x="97.6896%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="99.8910%" y="229" width="0.0231%" height="15" fill="rgb(222,201,40)" fg:x="60511" fg:w="14"/><text x="100.1410%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.8960%" y="213" width="0.0182%" height="15" fill="rgb(235,61,29)" fg:x="60514" fg:w="11"/><text x="100.1460%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.8960%" y="197" width="0.0182%" height="15" fill="rgb(219,207,3)" fg:x="60514" fg:w="11"/><text x="100.1460%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.9026%" y="181" width="0.0116%" height="15" fill="rgb(222,56,46)" fg:x="60518" fg:w="7"/><text x="100.1526%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (35 samples, 0.06%)</title><rect x="99.8580%" y="245" width="0.0578%" height="15" fill="rgb(239,76,54)" fg:x="60491" fg:w="35"/><text x="100.1080%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (47 samples, 0.08%)</title><rect x="99.8399%" y="261" width="0.0776%" height="15" fill="rgb(231,124,27)" fg:x="60480" fg:w="47"/><text x="100.0899%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (187 samples, 0.31%)</title><rect x="99.6187%" y="277" width="0.3087%" height="15" fill="rgb(249,195,6)" fg:x="60346" fg:w="187"/><text x="99.8687%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (477 samples, 0.79%)</title><rect x="99.1449%" y="293" width="0.7874%" height="15" fill="rgb(237,174,47)" fg:x="60059" fg:w="477"/><text x="99.3949%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::validate_correction (38 samples, 0.06%)</title><rect x="99.9323%" y="293" width="0.0627%" height="15" fill="rgb(206,201,31)" fg:x="60536" fg:w="38"/><text x="100.1823%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::code_builder_validate_correction (35 samples, 0.06%)</title><rect x="99.9373%" y="277" width="0.0578%" height="15" fill="rgb(231,57,52)" fg:x="60539" fg:w="35"/><text x="100.1873%" y="287.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,856 samples, 98.81%)</title><rect x="1.1886%" y="309" width="98.8098%" height="15" fill="rgb(248,177,22)" fg:x="720" fg:w="59856"/><text x="1.4386%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (60,577 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="60577"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,861 samples, 98.82%)</title><rect x="1.1820%" y="373" width="98.8180%" height="15" fill="rgb(241,128,51)" fg:x="716" fg:w="59861"/><text x="1.4320%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,861 samples, 98.82%)</title><rect x="1.1820%" y="357" width="98.8180%" height="15" fill="rgb(227,165,31)" fg:x="716" fg:w="59861"/><text x="1.4320%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,861 samples, 98.82%)</title><rect x="1.1820%" y="341" width="98.8180%" height="15" fill="rgb(228,167,24)" fg:x="716" fg:w="59861"/><text x="1.4320%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,861 samples, 98.82%)</title><rect x="1.1820%" y="325" width="98.8180%" height="15" fill="rgb(228,143,12)" fg:x="716" fg:w="59861"/><text x="1.4320%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>