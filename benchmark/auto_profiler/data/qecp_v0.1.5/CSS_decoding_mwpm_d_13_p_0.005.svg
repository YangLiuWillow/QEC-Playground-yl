<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="65877"><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.04%)</title><rect x="0.0592%" y="85" width="0.0425%" height="15" fill="rgb(227,0,7)" fg:x="39" fg:w="28"/><text x="0.3092%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.04%)</title><rect x="0.0607%" y="69" width="0.0410%" height="15" fill="rgb(217,0,24)" fg:x="40" fg:w="27"/><text x="0.3107%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.09%)</title><rect x="0.0182%" y="117" width="0.0865%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="57"/><text x="0.2682%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (50 samples, 0.08%)</title><rect x="0.0288%" y="101" width="0.0759%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="50"/><text x="0.2788%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.10%)</title><rect x="0.0152%" y="165" width="0.0956%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="63"/><text x="0.2652%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt; (61 samples, 0.09%)</title><rect x="0.0182%" y="149" width="0.0926%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="61"/><text x="0.2682%" y="159.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (61 samples, 0.09%)</title><rect x="0.0182%" y="133" width="0.0926%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="61"/><text x="0.2682%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="0.1548%" y="53" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="102" fg:w="7"/><text x="0.4048%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="0.1655%" y="53" width="0.0228%" height="15" fill="rgb(218,30,26)" fg:x="109" fg:w="15"/><text x="0.4155%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="0.1670%" y="37" width="0.0213%" height="15" fill="rgb(220,122,19)" fg:x="110" fg:w="14"/><text x="0.4170%" y="47.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.1518%" y="69" width="0.0486%" height="15" fill="rgb(250,228,42)" fg:x="100" fg:w="32"/><text x="0.4018%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.07%)</title><rect x="0.1366%" y="101" width="0.0653%" height="15" fill="rgb(240,193,28)" fg:x="90" fg:w="43"/><text x="0.3866%" y="111.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (36 samples, 0.05%)</title><rect x="0.1472%" y="85" width="0.0546%" height="15" fill="rgb(216,20,37)" fg:x="97" fg:w="36"/><text x="0.3972%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="0.2110%" y="69" width="0.0152%" height="15" fill="rgb(206,188,39)" fg:x="139" fg:w="10"/><text x="0.4610%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="0.2110%" y="53" width="0.0152%" height="15" fill="rgb(217,207,13)" fg:x="139" fg:w="10"/><text x="0.4610%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.11%)</title><rect x="0.1214%" y="117" width="0.1063%" height="15" fill="rgb(231,73,38)" fg:x="80" fg:w="70"/><text x="0.3714%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="0.2049%" y="101" width="0.0228%" height="15" fill="rgb(225,20,46)" fg:x="135" fg:w="15"/><text x="0.4549%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.2064%" y="85" width="0.0213%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="14"/><text x="0.4564%" y="95.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (81 samples, 0.12%)</title><rect x="0.1108%" y="165" width="0.1230%" height="15" fill="rgb(221,200,47)" fg:x="73" fg:w="81"/><text x="0.3608%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (80 samples, 0.12%)</title><rect x="0.1123%" y="149" width="0.1214%" height="15" fill="rgb(226,26,5)" fg:x="74" fg:w="80"/><text x="0.3623%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt; (79 samples, 0.12%)</title><rect x="0.1138%" y="133" width="0.1199%" height="15" fill="rgb(249,33,26)" fg:x="75" fg:w="79"/><text x="0.3638%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (10 samples, 0.02%)</title><rect x="0.2338%" y="165" width="0.0152%" height="15" fill="rgb(235,183,28)" fg:x="154" fg:w="10"/><text x="0.4838%" y="175.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (7 samples, 0.01%)</title><rect x="0.2383%" y="149" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="157" fg:w="7"/><text x="0.4883%" y="159.50"></text></g><g><title>libsystem_c.dylib`isatty (7 samples, 0.01%)</title><rect x="0.2383%" y="133" width="0.0106%" height="15" fill="rgb(247,18,42)" fg:x="157" fg:w="7"/><text x="0.4883%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (7 samples, 0.01%)</title><rect x="0.2383%" y="117" width="0.0106%" height="15" fill="rgb(241,131,45)" fg:x="157" fg:w="7"/><text x="0.4883%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (47 samples, 0.07%)</title><rect x="0.2581%" y="149" width="0.0713%" height="15" fill="rgb(249,31,29)" fg:x="170" fg:w="47"/><text x="0.5081%" y="159.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (180 samples, 0.27%)</title><rect x="0.3309%" y="149" width="0.2732%" height="15" fill="rgb(225,111,53)" fg:x="218" fg:w="180"/><text x="0.5809%" y="159.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (11 samples, 0.02%)</title><rect x="0.6042%" y="149" width="0.0167%" height="15" fill="rgb(238,160,17)" fg:x="398" fg:w="11"/><text x="0.8542%" y="159.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (7 samples, 0.01%)</title><rect x="0.6209%" y="149" width="0.0106%" height="15" fill="rgb(214,148,48)" fg:x="409" fg:w="7"/><text x="0.8709%" y="159.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (17 samples, 0.03%)</title><rect x="0.6315%" y="149" width="0.0258%" height="15" fill="rgb(232,36,49)" fg:x="416" fg:w="17"/><text x="0.8815%" y="159.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (238 samples, 0.36%)</title><rect x="2.1130%" y="133" width="0.3613%" height="15" fill="rgb(209,103,24)" fg:x="1392" fg:w="238"/><text x="2.3630%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (780 samples, 1.18%)</title><rect x="2.4743%" y="133" width="1.1840%" height="15" fill="rgb(229,88,8)" fg:x="1630" fg:w="780"/><text x="2.7243%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.05%)</title><rect x="3.8496%" y="101" width="0.0516%" height="15" fill="rgb(213,181,19)" fg:x="2536" fg:w="34"/><text x="4.0996%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (64 samples, 0.10%)</title><rect x="3.8481%" y="117" width="0.0972%" height="15" fill="rgb(254,191,54)" fg:x="2535" fg:w="64"/><text x="4.0981%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (29 samples, 0.04%)</title><rect x="3.9012%" y="101" width="0.0440%" height="15" fill="rgb(241,83,37)" fg:x="2570" fg:w="29"/><text x="4.1512%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="3.9346%" y="85" width="0.0106%" height="15" fill="rgb(233,36,39)" fg:x="2592" fg:w="7"/><text x="4.1846%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (196 samples, 0.30%)</title><rect x="3.6583%" y="133" width="0.2975%" height="15" fill="rgb(226,3,54)" fg:x="2410" fg:w="196"/><text x="3.9083%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="3.9452%" y="117" width="0.0106%" height="15" fill="rgb(245,192,40)" fg:x="2599" fg:w="7"/><text x="4.1952%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (74 samples, 0.11%)</title><rect x="3.9604%" y="133" width="0.1123%" height="15" fill="rgb(238,167,29)" fg:x="2609" fg:w="74"/><text x="4.2104%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (75 samples, 0.11%)</title><rect x="4.0727%" y="133" width="0.1138%" height="15" fill="rgb(232,182,51)" fg:x="2683" fg:w="75"/><text x="4.3227%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (328 samples, 0.50%)</title><rect x="4.1881%" y="133" width="0.4979%" height="15" fill="rgb(231,60,39)" fg:x="2759" fg:w="328"/><text x="4.4381%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1,765 samples, 2.68%)</title><rect x="4.6860%" y="133" width="2.6792%" height="15" fill="rgb(208,69,12)" fg:x="3087" fg:w="1765"/><text x="4.9360%" y="143.50">ru..</text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (32 samples, 0.05%)</title><rect x="7.3652%" y="133" width="0.0486%" height="15" fill="rgb(235,93,37)" fg:x="4852" fg:w="32"/><text x="7.6152%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (14 samples, 0.02%)</title><rect x="7.4229%" y="133" width="0.0213%" height="15" fill="rgb(213,116,39)" fg:x="4890" fg:w="14"/><text x="7.6729%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (417 samples, 0.63%)</title><rect x="7.4442%" y="133" width="0.6330%" height="15" fill="rgb(222,207,29)" fg:x="4904" fg:w="417"/><text x="7.6942%" y="143.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (18 samples, 0.03%)</title><rect x="8.1166%" y="117" width="0.0273%" height="15" fill="rgb(206,96,30)" fg:x="5347" fg:w="18"/><text x="8.3666%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (74 samples, 0.11%)</title><rect x="8.1440%" y="117" width="0.1123%" height="15" fill="rgb(218,138,4)" fg:x="5365" fg:w="74"/><text x="8.3940%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="8.2608%" y="117" width="0.0152%" height="15" fill="rgb(250,191,14)" fg:x="5442" fg:w="10"/><text x="8.5108%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (36 samples, 0.05%)</title><rect x="8.2760%" y="117" width="0.0546%" height="15" fill="rgb(239,60,40)" fg:x="5452" fg:w="36"/><text x="8.5260%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="8.3443%" y="101" width="0.0106%" height="15" fill="rgb(206,27,48)" fg:x="5497" fg:w="7"/><text x="8.5943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="8.3443%" y="85" width="0.0106%" height="15" fill="rgb(225,35,8)" fg:x="5497" fg:w="7"/><text x="8.5943%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="8.3443%" y="69" width="0.0106%" height="15" fill="rgb(250,213,24)" fg:x="5497" fg:w="7"/><text x="8.5943%" y="79.50"></text></g><g><title>rust_qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (42 samples, 0.06%)</title><rect x="8.3307%" y="117" width="0.0638%" height="15" fill="rgb(247,123,22)" fg:x="5488" fg:w="42"/><text x="8.5807%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="8.3550%" y="101" width="0.0395%" height="15" fill="rgb(231,138,38)" fg:x="5504" fg:w="26"/><text x="8.6050%" y="111.50"></text></g><g><title>rust_qecp`indexmap::map::core::raw::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (10 samples, 0.02%)</title><rect x="8.3944%" y="117" width="0.0152%" height="15" fill="rgb(231,145,46)" fg:x="5530" fg:w="10"/><text x="8.6444%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (26 samples, 0.04%)</title><rect x="8.4096%" y="117" width="0.0395%" height="15" fill="rgb(251,118,11)" fg:x="5540" fg:w="26"/><text x="8.6596%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (249 samples, 0.38%)</title><rect x="8.0772%" y="133" width="0.3780%" height="15" fill="rgb(217,147,25)" fg:x="5321" fg:w="249"/><text x="8.3272%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::left (28 samples, 0.04%)</title><rect x="8.4552%" y="133" width="0.0425%" height="15" fill="rgb(247,81,37)" fg:x="5570" fg:w="28"/><text x="8.7052%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::right (26 samples, 0.04%)</title><rect x="8.4977%" y="133" width="0.0395%" height="15" fill="rgb(209,12,38)" fg:x="5598" fg:w="26"/><text x="8.7477%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (5,204 samples, 7.90%)</title><rect x="0.6573%" y="149" width="7.8996%" height="15" fill="rgb(227,1,9)" fg:x="433" fg:w="5204"/><text x="0.9073%" y="159.50">rust_qecp`r..</text></g><g><title>rust_qecp`priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (13 samples, 0.02%)</title><rect x="8.5371%" y="133" width="0.0197%" height="15" fill="rgb(248,47,43)" fg:x="5624" fg:w="13"/><text x="8.7871%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (19 samples, 0.03%)</title><rect x="8.5918%" y="133" width="0.0288%" height="15" fill="rgb(221,10,30)" fg:x="5660" fg:w="19"/><text x="8.8418%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.02%)</title><rect x="8.6206%" y="133" width="0.0152%" height="15" fill="rgb(210,229,1)" fg:x="5679" fg:w="10"/><text x="8.8706%" y="143.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.01%)</title><rect x="8.6388%" y="133" width="0.0121%" height="15" fill="rgb(222,148,37)" fg:x="5691" fg:w="8"/><text x="8.8888%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="8.6403%" y="117" width="0.0106%" height="15" fill="rgb(234,67,33)" fg:x="5692" fg:w="7"/><text x="8.8903%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::add_edge_between (9 samples, 0.01%)</title><rect x="8.6510%" y="133" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="5699" fg:w="9"/><text x="8.9010%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::add_edge (8 samples, 0.01%)</title><rect x="8.6525%" y="117" width="0.0121%" height="15" fill="rgb(247,138,52)" fg:x="5700" fg:w="8"/><text x="8.9025%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="8.9439%" y="101" width="0.0197%" height="15" fill="rgb(213,79,30)" fg:x="5892" fg:w="13"/><text x="9.1939%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="8.9515%" y="85" width="0.0121%" height="15" fill="rgb(246,177,23)" fg:x="5897" fg:w="8"/><text x="9.2015%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="8.9515%" y="69" width="0.0121%" height="15" fill="rgb(230,62,27)" fg:x="5897" fg:w="8"/><text x="9.2015%" y="79.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (31 samples, 0.05%)</title><rect x="8.9288%" y="117" width="0.0471%" height="15" fill="rgb(216,154,8)" fg:x="5882" fg:w="31"/><text x="9.1788%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="8.9773%" y="117" width="0.0106%" height="15" fill="rgb(244,35,45)" fg:x="5914" fg:w="7"/><text x="9.2273%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="8.9880%" y="117" width="0.0167%" height="15" fill="rgb(251,115,12)" fg:x="5921" fg:w="11"/><text x="9.2380%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="8.9880%" y="101" width="0.0167%" height="15" fill="rgb(240,54,50)" fg:x="5921" fg:w="11"/><text x="9.2380%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="8.9880%" y="85" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="5921" fg:w="11"/><text x="9.2380%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (282 samples, 0.43%)</title><rect x="8.6646%" y="133" width="0.4281%" height="15" fill="rgb(207,117,47)" fg:x="5708" fg:w="282"/><text x="8.9146%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (58 samples, 0.09%)</title><rect x="9.0047%" y="117" width="0.0880%" height="15" fill="rgb(249,43,39)" fg:x="5932" fg:w="58"/><text x="9.2547%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::new (5,832 samples, 8.85%)</title><rect x="0.2505%" y="165" width="8.8529%" height="15" fill="rgb(209,38,44)" fg:x="165" fg:w="5832"/><text x="0.5005%" y="175.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (359 samples, 0.54%)</title><rect x="8.5584%" y="149" width="0.5450%" height="15" fill="rgb(236,212,23)" fg:x="5638" fg:w="359"/><text x="8.8084%" y="159.50"></text></g><g><title>rust_qecp`core::fmt::float::float_to_decimal_common_shortest (7 samples, 0.01%)</title><rect x="9.1094%" y="117" width="0.0106%" height="15" fill="rgb(242,79,21)" fg:x="6001" fg:w="7"/><text x="9.3594%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark::_{{closure}} (11 samples, 0.02%)</title><rect x="9.1048%" y="165" width="0.0167%" height="15" fill="rgb(211,96,35)" fg:x="5998" fg:w="11"/><text x="9.3548%" y="175.50"></text></g><g><title>rust_qecp`alloc::fmt::format (11 samples, 0.02%)</title><rect x="9.1048%" y="149" width="0.0167%" height="15" fill="rgb(253,215,40)" fg:x="5998" fg:w="11"/><text x="9.3548%" y="159.50"></text></g><g><title>rust_qecp`core::fmt::write (11 samples, 0.02%)</title><rect x="9.1048%" y="133" width="0.0167%" height="15" fill="rgb(211,81,21)" fg:x="5998" fg:w="11"/><text x="9.3548%" y="143.50"></text></g><g><title>rust_qecp`std::thread::sleep (10 samples, 0.02%)</title><rect x="9.1215%" y="165" width="0.0152%" height="15" fill="rgb(208,190,38)" fg:x="6009" fg:w="10"/><text x="9.3715%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (10 samples, 0.02%)</title><rect x="9.1215%" y="149" width="0.0152%" height="15" fill="rgb(235,213,38)" fg:x="6009" fg:w="10"/><text x="9.3715%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (6,013 samples, 9.13%)</title><rect x="0.0106%" y="181" width="9.1276%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="6013"/><text x="0.2606%" y="191.50">rust_qecp`rus..</text></g><g><title>dyld`start (6,021 samples, 9.14%)</title><rect x="0.0000%" y="405" width="9.1398%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="6021"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>rust_qecp`main (6,018 samples, 9.14%)</title><rect x="0.0046%" y="389" width="9.1352%" height="15" fill="rgb(240,68,47)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="399.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (6,018 samples, 9.14%)</title><rect x="0.0046%" y="373" width="9.1352%" height="15" fill="rgb(210,16,53)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="383.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (6,018 samples, 9.14%)</title><rect x="0.0046%" y="357" width="9.1352%" height="15" fill="rgb(235,124,12)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="367.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (6,018 samples, 9.14%)</title><rect x="0.0046%" y="341" width="9.1352%" height="15" fill="rgb(224,169,11)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="351.50">rust_qecp`std..</text></g><g><title>rust_qecp`rust_qecp::main (6,018 samples, 9.14%)</title><rect x="0.0046%" y="325" width="9.1352%" height="15" fill="rgb(250,166,2)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="335.50">rust_qecp`rus..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (6,018 samples, 9.14%)</title><rect x="0.0046%" y="309" width="9.1352%" height="15" fill="rgb(242,216,29)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="319.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (6,018 samples, 9.14%)</title><rect x="0.0046%" y="293" width="9.1352%" height="15" fill="rgb(230,116,27)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="303.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6,018 samples, 9.14%)</title><rect x="0.0046%" y="277" width="9.1352%" height="15" fill="rgb(228,99,48)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="287.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (6,018 samples, 9.14%)</title><rect x="0.0046%" y="261" width="9.1352%" height="15" fill="rgb(253,11,6)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="271.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,018 samples, 9.14%)</title><rect x="0.0046%" y="245" width="9.1352%" height="15" fill="rgb(247,143,39)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="255.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (6,018 samples, 9.14%)</title><rect x="0.0046%" y="229" width="9.1352%" height="15" fill="rgb(236,97,10)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="239.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,018 samples, 9.14%)</title><rect x="0.0046%" y="213" width="9.1352%" height="15" fill="rgb(233,208,19)" fg:x="3" fg:w="6018"/><text x="0.2546%" y="223.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (6,017 samples, 9.13%)</title><rect x="0.0061%" y="197" width="9.1337%" height="15" fill="rgb(216,164,2)" fg:x="4" fg:w="6017"/><text x="0.2561%" y="207.50">rust_qecp`rus..</text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.02%)</title><rect x="9.1671%" y="293" width="0.0182%" height="15" fill="rgb(220,129,5)" fg:x="6039" fg:w="12"/><text x="9.4171%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="9.1671%" y="277" width="0.0182%" height="15" fill="rgb(242,17,10)" fg:x="6039" fg:w="12"/><text x="9.4171%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="9.1747%" y="261" width="0.0106%" height="15" fill="rgb(242,107,0)" fg:x="6044" fg:w="7"/><text x="9.4247%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="9.1504%" y="325" width="0.0379%" height="15" fill="rgb(251,28,31)" fg:x="6028" fg:w="25"/><text x="9.4004%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (22 samples, 0.03%)</title><rect x="9.1549%" y="309" width="0.0334%" height="15" fill="rgb(233,223,10)" fg:x="6031" fg:w="22"/><text x="9.4049%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (7 samples, 0.01%)</title><rect x="9.1929%" y="325" width="0.0106%" height="15" fill="rgb(215,21,27)" fg:x="6056" fg:w="7"/><text x="9.4429%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.02%)</title><rect x="9.8699%" y="309" width="0.0152%" height="15" fill="rgb(232,23,21)" fg:x="6502" fg:w="10"/><text x="10.1199%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="9.8851%" y="309" width="0.0152%" height="15" fill="rgb(244,5,23)" fg:x="6512" fg:w="10"/><text x="10.1351%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="9.9261%" y="229" width="0.0273%" height="15" fill="rgb(226,81,46)" fg:x="6539" fg:w="18"/><text x="10.1761%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="9.9276%" y="213" width="0.0258%" height="15" fill="rgb(247,70,30)" fg:x="6540" fg:w="17"/><text x="10.1776%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.03%)</title><rect x="9.9261%" y="245" width="0.0288%" height="15" fill="rgb(212,68,19)" fg:x="6539" fg:w="19"/><text x="10.1761%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (51 samples, 0.08%)</title><rect x="9.9230%" y="309" width="0.0774%" height="15" fill="rgb(240,187,13)" fg:x="6537" fg:w="51"/><text x="10.1730%" y="319.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (51 samples, 0.08%)</title><rect x="9.9230%" y="293" width="0.0774%" height="15" fill="rgb(223,113,26)" fg:x="6537" fg:w="51"/><text x="10.1730%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (50 samples, 0.08%)</title><rect x="9.9246%" y="277" width="0.0759%" height="15" fill="rgb(206,192,2)" fg:x="6538" fg:w="50"/><text x="10.1746%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (50 samples, 0.08%)</title><rect x="9.9246%" y="261" width="0.0759%" height="15" fill="rgb(241,108,4)" fg:x="6538" fg:w="50"/><text x="10.1746%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.05%)</title><rect x="9.9549%" y="245" width="0.0455%" height="15" fill="rgb(247,173,49)" fg:x="6558" fg:w="30"/><text x="10.2049%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (129 samples, 0.20%)</title><rect x="11.8402%" y="293" width="0.1958%" height="15" fill="rgb(224,114,35)" fg:x="7800" fg:w="129"/><text x="12.0902%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (129 samples, 0.20%)</title><rect x="11.8402%" y="277" width="0.1958%" height="15" fill="rgb(245,159,27)" fg:x="7800" fg:w="129"/><text x="12.0902%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (181 samples, 0.27%)</title><rect x="12.0361%" y="293" width="0.2748%" height="15" fill="rgb(245,172,44)" fg:x="7929" fg:w="181"/><text x="12.2861%" y="303.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (534 samples, 0.81%)</title><rect x="12.4292%" y="277" width="0.8106%" height="15" fill="rgb(236,23,11)" fg:x="8188" fg:w="534"/><text x="12.6792%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (10 samples, 0.02%)</title><rect x="13.2398%" y="277" width="0.0152%" height="15" fill="rgb(205,117,38)" fg:x="8722" fg:w="10"/><text x="13.4898%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (306 samples, 0.46%)</title><rect x="13.2565%" y="277" width="0.4645%" height="15" fill="rgb(237,72,25)" fg:x="8733" fg:w="306"/><text x="13.5065%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (206 samples, 0.31%)</title><rect x="13.9138%" y="261" width="0.3127%" height="15" fill="rgb(244,70,9)" fg:x="9166" fg:w="206"/><text x="14.1638%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (203 samples, 0.31%)</title><rect x="14.2265%" y="245" width="0.3082%" height="15" fill="rgb(217,125,39)" fg:x="9372" fg:w="203"/><text x="14.4765%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (205 samples, 0.31%)</title><rect x="14.2265%" y="261" width="0.3112%" height="15" fill="rgb(235,36,10)" fg:x="9372" fg:w="205"/><text x="14.4765%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (15 samples, 0.02%)</title><rect x="71.9872%" y="229" width="0.0228%" height="15" fill="rgb(251,123,47)" fg:x="47423" fg:w="15"/><text x="72.2372%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (37,864 samples, 57.48%)</title><rect x="14.5423%" y="261" width="57.4768%" height="15" fill="rgb(221,13,13)" fg:x="9580" fg:w="37864"/><text x="14.7923%" y="271.50">rust_qecp`PerfectMatching::Expand</text></g><g><title>rust_qecp`PerfectMatching::Augment (21 samples, 0.03%)</title><rect x="71.9872%" y="245" width="0.0319%" height="15" fill="rgb(238,131,9)" fg:x="47423" fg:w="21"/><text x="72.2372%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (258 samples, 0.39%)</title><rect x="75.0596%" y="213" width="0.3916%" height="15" fill="rgb(211,50,8)" fg:x="49447" fg:w="258"/><text x="75.3096%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,068 samples, 1.62%)</title><rect x="73.8695%" y="245" width="1.6212%" height="15" fill="rgb(245,182,24)" fg:x="48663" fg:w="1068"/><text x="74.1195%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (284 samples, 0.43%)</title><rect x="75.0596%" y="229" width="0.4311%" height="15" fill="rgb(242,14,37)" fg:x="49447" fg:w="284"/><text x="75.3096%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (26 samples, 0.04%)</title><rect x="75.4512%" y="213" width="0.0395%" height="15" fill="rgb(246,228,12)" fg:x="49705" fg:w="26"/><text x="75.7012%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,613 samples, 3.97%)</title><rect x="72.0191%" y="261" width="3.9665%" height="15" fill="rgb(213,55,15)" fg:x="47444" fg:w="2613"/><text x="72.2691%" y="271.50">rust..</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (326 samples, 0.49%)</title><rect x="75.4907%" y="245" width="0.4949%" height="15" fill="rgb(209,9,3)" fg:x="49731" fg:w="326"/><text x="75.7407%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,513 samples, 2.30%)</title><rect x="76.1859%" y="245" width="2.2967%" height="15" fill="rgb(230,59,30)" fg:x="50189" fg:w="1513"/><text x="76.4359%" y="255.50">r..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (1,646 samples, 2.50%)</title><rect x="75.9855%" y="261" width="2.4986%" height="15" fill="rgb(209,121,21)" fg:x="50057" fg:w="1646"/><text x="76.2355%" y="271.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (90 samples, 0.14%)</title><rect x="84.0673%" y="229" width="0.1366%" height="15" fill="rgb(220,109,13)" fg:x="55381" fg:w="90"/><text x="84.3173%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (123 samples, 0.19%)</title><rect x="84.0673%" y="245" width="0.1867%" height="15" fill="rgb(232,18,1)" fg:x="55381" fg:w="123"/><text x="84.3173%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (33 samples, 0.05%)</title><rect x="84.2039%" y="229" width="0.0501%" height="15" fill="rgb(215,41,42)" fg:x="55471" fg:w="33"/><text x="84.4539%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,810 samples, 5.78%)</title><rect x="78.4857%" y="261" width="5.7835%" height="15" fill="rgb(224,123,36)" fg:x="51704" fg:w="3810"/><text x="78.7357%" y="271.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (10 samples, 0.02%)</title><rect x="84.2540%" y="245" width="0.0152%" height="15" fill="rgb(240,125,3)" fg:x="55504" fg:w="10"/><text x="84.5040%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (46,827 samples, 71.08%)</title><rect x="13.7225%" y="277" width="71.0825%" height="15" fill="rgb(205,98,50)" fg:x="9040" fg:w="46827"/><text x="13.9725%" y="287.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (352 samples, 0.53%)</title><rect x="84.2707%" y="261" width="0.5343%" height="15" fill="rgb(205,185,37)" fg:x="55515" fg:w="352"/><text x="84.5207%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="84.8050%" y="261" width="0.0106%" height="15" fill="rgb(238,207,15)" fg:x="55867" fg:w="7"/><text x="85.0550%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (62 samples, 0.09%)</title><rect x="84.8172%" y="261" width="0.0941%" height="15" fill="rgb(213,199,42)" fg:x="55875" fg:w="62"/><text x="85.0672%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.09%)</title><rect x="84.8172%" y="245" width="0.0941%" height="15" fill="rgb(235,201,11)" fg:x="55875" fg:w="62"/><text x="85.0672%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (71 samples, 0.11%)</title><rect x="84.8050%" y="277" width="0.1078%" height="15" fill="rgb(207,46,11)" fg:x="55867" fg:w="71"/><text x="85.0550%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (49,479 samples, 75.11%)</title><rect x="10.0005%" y="309" width="75.1082%" height="15" fill="rgb(241,35,35)" fg:x="6588" fg:w="49479"/><text x="10.2505%" y="319.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (47,957 samples, 72.80%)</title><rect x="12.3108%" y="293" width="72.7978%" height="15" fill="rgb(243,32,47)" fg:x="8110" fg:w="47957"/><text x="12.5608%" y="303.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (129 samples, 0.20%)</title><rect x="84.9128%" y="277" width="0.1958%" height="15" fill="rgb(247,202,23)" fg:x="55938" fg:w="129"/><text x="85.1628%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (10 samples, 0.02%)</title><rect x="85.1086%" y="309" width="0.0152%" height="15" fill="rgb(219,102,11)" fg:x="56067" fg:w="10"/><text x="85.3586%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (7 samples, 0.01%)</title><rect x="85.1132%" y="293" width="0.0106%" height="15" fill="rgb(243,110,44)" fg:x="56070" fg:w="7"/><text x="85.3632%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (17 samples, 0.03%)</title><rect x="85.4471%" y="293" width="0.0258%" height="15" fill="rgb(222,74,54)" fg:x="56290" fg:w="17"/><text x="85.6971%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="85.4517%" y="277" width="0.0213%" height="15" fill="rgb(216,99,12)" fg:x="56293" fg:w="14"/><text x="85.7017%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (249 samples, 0.38%)</title><rect x="85.1238%" y="309" width="0.3780%" height="15" fill="rgb(226,22,26)" fg:x="56077" fg:w="249"/><text x="85.3738%" y="319.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (16 samples, 0.02%)</title><rect x="85.4775%" y="293" width="0.0243%" height="15" fill="rgb(217,163,10)" fg:x="56310" fg:w="16"/><text x="85.7275%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="98.0995%" y="213" width="0.0258%" height="15" fill="rgb(213,25,53)" fg:x="64625" fg:w="17"/><text x="98.3495%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="98.1253%" y="213" width="0.0182%" height="15" fill="rgb(252,105,26)" fg:x="64642" fg:w="12"/><text x="98.3753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="98.1253%" y="197" width="0.0182%" height="15" fill="rgb(220,39,43)" fg:x="64642" fg:w="12"/><text x="98.3753%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="98.1314%" y="181" width="0.0121%" height="15" fill="rgb(229,68,48)" fg:x="64646" fg:w="8"/><text x="98.3814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (46 samples, 0.07%)</title><rect x="98.0965%" y="229" width="0.0698%" height="15" fill="rgb(252,8,32)" fg:x="64623" fg:w="46"/><text x="98.3465%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="98.1511%" y="213" width="0.0152%" height="15" fill="rgb(223,20,43)" fg:x="64659" fg:w="10"/><text x="98.4011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="98.1541%" y="197" width="0.0121%" height="15" fill="rgb(229,81,49)" fg:x="64661" fg:w="8"/><text x="98.4041%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="98.1875%" y="213" width="0.0167%" height="15" fill="rgb(236,28,36)" fg:x="64683" fg:w="11"/><text x="98.4375%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="98.1890%" y="197" width="0.0152%" height="15" fill="rgb(249,185,26)" fg:x="64684" fg:w="10"/><text x="98.4390%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (29 samples, 0.04%)</title><rect x="98.1663%" y="229" width="0.0440%" height="15" fill="rgb(249,174,33)" fg:x="64669" fg:w="29"/><text x="98.4163%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (91 samples, 0.14%)</title><rect x="98.0858%" y="245" width="0.1381%" height="15" fill="rgb(233,201,37)" fg:x="64616" fg:w="91"/><text x="98.3358%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="98.2118%" y="229" width="0.0121%" height="15" fill="rgb(221,78,26)" fg:x="64699" fg:w="8"/><text x="98.4618%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (126 samples, 0.19%)</title><rect x="98.0433%" y="293" width="0.1913%" height="15" fill="rgb(250,127,30)" fg:x="64588" fg:w="126"/><text x="98.2933%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (117 samples, 0.18%)</title><rect x="98.0570%" y="277" width="0.1776%" height="15" fill="rgb(230,49,44)" fg:x="64597" fg:w="117"/><text x="98.3070%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (106 samples, 0.16%)</title><rect x="98.0737%" y="261" width="0.1609%" height="15" fill="rgb(229,67,23)" fg:x="64608" fg:w="106"/><text x="98.3237%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (8,389 samples, 12.73%)</title><rect x="85.5018%" y="309" width="12.7343%" height="15" fill="rgb(249,83,47)" fg:x="56326" fg:w="8389"/><text x="85.7518%" y="319.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode (58,697 samples, 89.10%)</title><rect x="9.2035%" y="325" width="89.1009%" height="15" fill="rgb(215,43,3)" fg:x="6063" fg:w="58697"/><text x="9.4535%" y="335.50">rust_qecp`rust_qecp::decoder_mwpm::MWPMDecoder::decode</text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (45 samples, 0.07%)</title><rect x="98.2361%" y="309" width="0.0683%" height="15" fill="rgb(238,154,13)" fg:x="64715" fg:w="45"/><text x="98.4861%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (24 samples, 0.04%)</title><rect x="98.2680%" y="293" width="0.0364%" height="15" fill="rgb(219,56,2)" fg:x="64736" fg:w="24"/><text x="98.5180%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 0.02%)</title><rect x="98.2816%" y="277" width="0.0228%" height="15" fill="rgb(233,0,4)" fg:x="64745" fg:w="15"/><text x="98.5316%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (154 samples, 0.23%)</title><rect x="98.7978%" y="309" width="0.2338%" height="15" fill="rgb(235,30,7)" fg:x="65085" fg:w="154"/><text x="99.0478%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (154 samples, 0.23%)</title><rect x="98.7978%" y="293" width="0.2338%" height="15" fill="rgb(250,79,13)" fg:x="65085" fg:w="154"/><text x="99.0478%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (16 samples, 0.02%)</title><rect x="99.0315%" y="309" width="0.0243%" height="15" fill="rgb(211,146,34)" fg:x="65239" fg:w="16"/><text x="99.2815%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (942 samples, 1.43%)</title><rect x="98.3044%" y="325" width="1.4299%" height="15" fill="rgb(228,22,38)" fg:x="64760" fg:w="942"/><text x="98.5544%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (447 samples, 0.68%)</title><rect x="99.0558%" y="309" width="0.6785%" height="15" fill="rgb(235,168,5)" fg:x="65255" fg:w="447"/><text x="99.3058%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (345 samples, 0.52%)</title><rect x="99.2107%" y="293" width="0.5237%" height="15" fill="rgb(221,155,16)" fg:x="65357" fg:w="345"/><text x="99.4607%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_error_pattern (104 samples, 0.16%)</title><rect x="99.7344%" y="325" width="0.1579%" height="15" fill="rgb(215,215,53)" fg:x="65702" fg:w="104"/><text x="99.9844%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (13 samples, 0.02%)</title><rect x="99.8725%" y="309" width="0.0197%" height="15" fill="rgb(223,4,10)" fg:x="65793" fg:w="13"/><text x="100.1225%" y="319.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="99.8816%" y="293" width="0.0106%" height="15" fill="rgb(234,103,6)" fg:x="65799" fg:w="7"/><text x="100.1316%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (67 samples, 0.10%)</title><rect x="99.8922%" y="325" width="0.1017%" height="15" fill="rgb(227,97,0)" fg:x="65806" fg:w="67"/><text x="100.1422%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (30 samples, 0.05%)</title><rect x="99.9484%" y="309" width="0.0455%" height="15" fill="rgb(234,150,53)" fg:x="65843" fg:w="30"/><text x="100.1984%" y="319.50"></text></g><g><title>all (65,877 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="65877"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,855 samples, 90.86%)</title><rect x="9.1413%" y="405" width="90.8587%" height="15" fill="rgb(222,22,37)" fg:x="6022" fg:w="59855"/><text x="9.3913%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,855 samples, 90.86%)</title><rect x="9.1413%" y="389" width="90.8587%" height="15" fill="rgb(237,53,32)" fg:x="6022" fg:w="59855"/><text x="9.3913%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,855 samples, 90.86%)</title><rect x="9.1413%" y="373" width="90.8587%" height="15" fill="rgb(233,25,53)" fg:x="6022" fg:w="59855"/><text x="9.3913%" y="383.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,855 samples, 90.86%)</title><rect x="9.1413%" y="357" width="90.8587%" height="15" fill="rgb(210,40,34)" fg:x="6022" fg:w="59855"/><text x="9.3913%" y="367.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,854 samples, 90.86%)</title><rect x="9.1428%" y="341" width="90.8572%" height="15" fill="rgb(241,220,44)" fg:x="6023" fg:w="59854"/><text x="9.3928%" y="351.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>