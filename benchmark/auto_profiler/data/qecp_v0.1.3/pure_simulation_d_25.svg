<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="65703"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0289%" y="181" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="19" fg:w="7"/><text x="0.2789%" y="191.50"></text></g><g><title>rust_qecp`core::fmt::float::float_to_decimal_common_shortest (7 samples, 0.01%)</title><rect x="0.0563%" y="149" width="0.0107%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="7"/><text x="0.3063%" y="159.50"></text></g><g><title>rust_qecp`alloc::fmt::format (18 samples, 0.03%)</title><rect x="0.0548%" y="181" width="0.0274%" height="15" fill="rgb(221,193,54)" fg:x="36" fg:w="18"/><text x="0.3048%" y="191.50"></text></g><g><title>rust_qecp`core::fmt::write (17 samples, 0.03%)</title><rect x="0.0563%" y="165" width="0.0259%" height="15" fill="rgb(248,212,6)" fg:x="37" fg:w="17"/><text x="0.3063%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="0.0852%" y="133" width="0.0107%" height="15" fill="rgb(208,68,35)" fg:x="56" fg:w="7"/><text x="0.3352%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="0.1065%" y="117" width="0.0107%" height="15" fill="rgb(232,128,0)" fg:x="70" fg:w="7"/><text x="0.3565%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="0.1172%" y="117" width="0.0137%" height="15" fill="rgb(207,160,47)" fg:x="77" fg:w="9"/><text x="0.3672%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="0.1187%" y="101" width="0.0122%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="8"/><text x="0.3687%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="0.1309%" y="117" width="0.0183%" height="15" fill="rgb(218,30,26)" fg:x="86" fg:w="12"/><text x="0.3809%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.01%)</title><rect x="0.1385%" y="101" width="0.0107%" height="15" fill="rgb(220,122,19)" fg:x="91" fg:w="7"/><text x="0.3885%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.1385%" y="85" width="0.0107%" height="15" fill="rgb(250,228,42)" fg:x="91" fg:w="7"/><text x="0.3885%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="0.1613%" y="101" width="0.0137%" height="15" fill="rgb(240,193,28)" fg:x="106" fg:w="9"/><text x="0.4113%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="0.1903%" y="69" width="0.0137%" height="15" fill="rgb(216,20,37)" fg:x="125" fg:w="9"/><text x="0.4403%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="0.2344%" y="37" width="0.0198%" height="15" fill="rgb(206,188,39)" fg:x="154" fg:w="13"/><text x="0.4844%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (44 samples, 0.07%)</title><rect x="0.2100%" y="53" width="0.0670%" height="15" fill="rgb(217,207,13)" fg:x="138" fg:w="44"/><text x="0.4600%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (49 samples, 0.07%)</title><rect x="0.2039%" y="69" width="0.0746%" height="15" fill="rgb(231,73,38)" fg:x="134" fg:w="49"/><text x="0.4539%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.15%)</title><rect x="0.1507%" y="117" width="0.1476%" height="15" fill="rgb(225,20,46)" fg:x="99" fg:w="97"/><text x="0.4007%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (78 samples, 0.12%)</title><rect x="0.1796%" y="101" width="0.1187%" height="15" fill="rgb(210,31,41)" fg:x="118" fg:w="78"/><text x="0.4296%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.12%)</title><rect x="0.1826%" y="85" width="0.1157%" height="15" fill="rgb(221,200,47)" fg:x="120" fg:w="76"/><text x="0.4326%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (8 samples, 0.01%)</title><rect x="0.3029%" y="117" width="0.0122%" height="15" fill="rgb(226,26,5)" fg:x="199" fg:w="8"/><text x="0.5529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="0.3470%" y="53" width="0.0137%" height="15" fill="rgb(249,33,26)" fg:x="228" fg:w="9"/><text x="0.5970%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.05%)</title><rect x="0.3242%" y="85" width="0.0517%" height="15" fill="rgb(235,183,28)" fg:x="213" fg:w="34"/><text x="0.5742%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 0.05%)</title><rect x="0.3257%" y="69" width="0.0502%" height="15" fill="rgb(221,5,38)" fg:x="214" fg:w="33"/><text x="0.5757%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (9 samples, 0.01%)</title><rect x="0.3622%" y="53" width="0.0137%" height="15" fill="rgb(247,18,42)" fg:x="238" fg:w="9"/><text x="0.6122%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="0.3622%" y="37" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="238" fg:w="9"/><text x="0.6122%" y="47.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.06%)</title><rect x="0.3181%" y="101" width="0.0639%" height="15" fill="rgb(249,31,29)" fg:x="209" fg:w="42"/><text x="0.5681%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 0.28%)</title><rect x="0.1035%" y="133" width="0.2816%" height="15" fill="rgb(225,111,53)" fg:x="68" fg:w="185"/><text x="0.3535%" y="143.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (46 samples, 0.07%)</title><rect x="0.3151%" y="117" width="0.0700%" height="15" fill="rgb(238,160,17)" fg:x="207" fg:w="46"/><text x="0.5651%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.3851%" y="133" width="0.0107%" height="15" fill="rgb(214,148,48)" fg:x="253" fg:w="7"/><text x="0.6351%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (208 samples, 0.32%)</title><rect x="0.0822%" y="165" width="0.3166%" height="15" fill="rgb(232,36,49)" fg:x="54" fg:w="208"/><text x="0.3322%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt; (207 samples, 0.32%)</title><rect x="0.0837%" y="149" width="0.3151%" height="15" fill="rgb(209,103,24)" fg:x="55" fg:w="207"/><text x="0.3337%" y="159.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (211 samples, 0.32%)</title><rect x="0.0822%" y="181" width="0.3211%" height="15" fill="rgb(229,88,8)" fg:x="54" fg:w="211"/><text x="0.3322%" y="191.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (10 samples, 0.02%)</title><rect x="0.4033%" y="181" width="0.0152%" height="15" fill="rgb(213,181,19)" fg:x="265" fg:w="10"/><text x="0.6533%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::build_code (13 samples, 0.02%)</title><rect x="0.4186%" y="181" width="0.0198%" height="15" fill="rgb(254,191,54)" fg:x="275" fg:w="13"/><text x="0.6686%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="0.4246%" y="165" width="0.0137%" height="15" fill="rgb(241,83,37)" fg:x="279" fg:w="9"/><text x="0.6746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="0.4277%" y="149" width="0.0107%" height="15" fill="rgb(233,36,39)" fg:x="281" fg:w="7"/><text x="0.6777%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="0.4277%" y="133" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="281" fg:w="7"/><text x="0.6777%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::add_edge_between (12 samples, 0.02%)</title><rect x="0.4444%" y="181" width="0.0183%" height="15" fill="rgb(245,192,40)" fg:x="292" fg:w="12"/><text x="0.6944%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.04%)</title><rect x="0.5616%" y="133" width="0.0350%" height="15" fill="rgb(238,167,29)" fg:x="369" fg:w="23"/><text x="0.8116%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.06%)</title><rect x="0.5418%" y="165" width="0.0563%" height="15" fill="rgb(232,182,51)" fg:x="356" fg:w="37"/><text x="0.7918%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.04%)</title><rect x="0.5586%" y="149" width="0.0396%" height="15" fill="rgb(231,60,39)" fg:x="367" fg:w="26"/><text x="0.8086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="0.6073%" y="165" width="0.0244%" height="15" fill="rgb(208,69,12)" fg:x="399" fg:w="16"/><text x="0.8573%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="0.6514%" y="149" width="0.0198%" height="15" fill="rgb(235,93,37)" fg:x="428" fg:w="13"/><text x="0.9014%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="0.6575%" y="133" width="0.0137%" height="15" fill="rgb(213,116,39)" fg:x="432" fg:w="9"/><text x="0.9075%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="0.6575%" y="117" width="0.0137%" height="15" fill="rgb(222,207,29)" fg:x="432" fg:w="9"/><text x="0.9075%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="0.6712%" y="149" width="0.0244%" height="15" fill="rgb(206,96,30)" fg:x="441" fg:w="16"/><text x="0.9212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="0.6773%" y="133" width="0.0183%" height="15" fill="rgb(218,138,4)" fg:x="445" fg:w="12"/><text x="0.9273%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.06%)</title><rect x="0.6453%" y="165" width="0.0594%" height="15" fill="rgb(250,191,14)" fg:x="424" fg:w="39"/><text x="0.8953%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="0.7184%" y="149" width="0.0228%" height="15" fill="rgb(239,60,40)" fg:x="472" fg:w="15"/><text x="0.9684%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="0.7245%" y="133" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="476" fg:w="11"/><text x="0.9745%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="0.7245%" y="117" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="476" fg:w="11"/><text x="0.9745%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 0.04%)</title><rect x="0.7047%" y="165" width="0.0396%" height="15" fill="rgb(250,213,24)" fg:x="463" fg:w="26"/><text x="0.9547%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="0.7930%" y="101" width="0.0107%" height="15" fill="rgb(247,123,22)" fg:x="521" fg:w="7"/><text x="1.0430%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="0.7869%" y="133" width="0.0244%" height="15" fill="rgb(231,138,38)" fg:x="517" fg:w="16"/><text x="1.0369%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="0.7884%" y="117" width="0.0228%" height="15" fill="rgb(231,145,46)" fg:x="518" fg:w="15"/><text x="1.0384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.03%)</title><rect x="0.7808%" y="149" width="0.0335%" height="15" fill="rgb(251,118,11)" fg:x="513" fg:w="22"/><text x="1.0308%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (22 samples, 0.03%)</title><rect x="0.8173%" y="149" width="0.0335%" height="15" fill="rgb(217,147,25)" fg:x="537" fg:w="22"/><text x="1.0673%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.02%)</title><rect x="0.8341%" y="133" width="0.0167%" height="15" fill="rgb(247,81,37)" fg:x="548" fg:w="11"/><text x="1.0841%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (64 samples, 0.10%)</title><rect x="0.7549%" y="165" width="0.0974%" height="15" fill="rgb(209,12,38)" fg:x="496" fg:w="64"/><text x="1.0049%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (88 samples, 0.13%)</title><rect x="0.8675%" y="165" width="0.1339%" height="15" fill="rgb(227,1,9)" fg:x="570" fg:w="88"/><text x="1.1175%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (30 samples, 0.05%)</title><rect x="1.0015%" y="165" width="0.0457%" height="15" fill="rgb(248,47,43)" fg:x="658" fg:w="30"/><text x="1.2515%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="1.0684%" y="133" width="0.0107%" height="15" fill="rgb(221,10,30)" fg:x="702" fg:w="7"/><text x="1.3184%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="1.0517%" y="149" width="0.0335%" height="15" fill="rgb(210,229,1)" fg:x="691" fg:w="22"/><text x="1.3017%" y="159.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (28 samples, 0.04%)</title><rect x="1.0471%" y="165" width="0.0426%" height="15" fill="rgb(222,148,37)" fg:x="688" fg:w="28"/><text x="1.2971%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (23 samples, 0.04%)</title><rect x="1.1567%" y="149" width="0.0350%" height="15" fill="rgb(234,67,33)" fg:x="760" fg:w="23"/><text x="1.4067%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (16 samples, 0.02%)</title><rect x="1.1674%" y="133" width="0.0244%" height="15" fill="rgb(247,98,35)" fg:x="767" fg:w="16"/><text x="1.4174%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.02%)</title><rect x="1.1765%" y="117" width="0.0152%" height="15" fill="rgb(247,138,52)" fg:x="773" fg:w="10"/><text x="1.4265%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::add_edge_between (81 samples, 0.12%)</title><rect x="1.0898%" y="165" width="0.1233%" height="15" fill="rgb(213,79,30)" fg:x="716" fg:w="81"/><text x="1.3398%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.02%)</title><rect x="1.1917%" y="149" width="0.0213%" height="15" fill="rgb(246,177,23)" fg:x="783" fg:w="14"/><text x="1.4417%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="1.2009%" y="133" width="0.0122%" height="15" fill="rgb(230,62,27)" fg:x="789" fg:w="8"/><text x="1.4509%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.07%)</title><rect x="7.5065%" y="149" width="0.0731%" height="15" fill="rgb(216,154,8)" fg:x="4932" fg:w="48"/><text x="7.7565%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="7.5537%" y="133" width="0.0259%" height="15" fill="rgb(244,35,45)" fg:x="4963" fg:w="17"/><text x="7.8037%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="7.5841%" y="149" width="0.0183%" height="15" fill="rgb(251,115,12)" fg:x="4983" fg:w="12"/><text x="7.8341%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="7.6070%" y="149" width="0.0274%" height="15" fill="rgb(240,54,50)" fg:x="4998" fg:w="18"/><text x="7.8570%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="7.7135%" y="117" width="0.0122%" height="15" fill="rgb(233,84,52)" fg:x="5068" fg:w="8"/><text x="7.9635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="7.7135%" y="101" width="0.0122%" height="15" fill="rgb(207,117,47)" fg:x="5068" fg:w="8"/><text x="7.9635%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.03%)</title><rect x="7.7470%" y="85" width="0.0274%" height="15" fill="rgb(249,43,39)" fg:x="5090" fg:w="18"/><text x="7.9970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (75 samples, 0.11%)</title><rect x="7.6952%" y="133" width="0.1142%" height="15" fill="rgb(209,38,44)" fg:x="5056" fg:w="75"/><text x="7.9452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (55 samples, 0.08%)</title><rect x="7.7257%" y="117" width="0.0837%" height="15" fill="rgb(236,212,23)" fg:x="5076" fg:w="55"/><text x="7.9757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (51 samples, 0.08%)</title><rect x="7.7318%" y="101" width="0.0776%" height="15" fill="rgb(242,79,21)" fg:x="5080" fg:w="51"/><text x="7.9818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.04%)</title><rect x="7.7744%" y="85" width="0.0350%" height="15" fill="rgb(211,96,35)" fg:x="5108" fg:w="23"/><text x="8.0244%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (10 samples, 0.02%)</title><rect x="7.8140%" y="133" width="0.0152%" height="15" fill="rgb(253,215,40)" fg:x="5134" fg:w="10"/><text x="8.0640%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (127 samples, 0.19%)</title><rect x="7.6374%" y="149" width="0.1933%" height="15" fill="rgb(211,81,21)" fg:x="5018" fg:w="127"/><text x="7.8874%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="7.8398%" y="133" width="0.0122%" height="15" fill="rgb(208,190,38)" fg:x="5151" fg:w="8"/><text x="8.0898%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (17 samples, 0.03%)</title><rect x="7.8307%" y="149" width="0.0259%" height="15" fill="rgb(235,213,38)" fg:x="5145" fg:w="17"/><text x="8.0807%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (89 samples, 0.14%)</title><rect x="7.8657%" y="149" width="0.1355%" height="15" fill="rgb(237,122,38)" fg:x="5168" fg:w="89"/><text x="8.1157%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (32 samples, 0.05%)</title><rect x="8.0681%" y="85" width="0.0487%" height="15" fill="rgb(244,218,35)" fg:x="5301" fg:w="32"/><text x="8.3181%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="8.1031%" y="69" width="0.0137%" height="15" fill="rgb(240,68,47)" fg:x="5324" fg:w="9"/><text x="8.3531%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.09%)</title><rect x="8.0301%" y="117" width="0.0928%" height="15" fill="rgb(210,16,53)" fg:x="5276" fg:w="61"/><text x="8.2801%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.06%)</title><rect x="8.0620%" y="101" width="0.0609%" height="15" fill="rgb(235,124,12)" fg:x="5297" fg:w="40"/><text x="8.3120%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="8.1229%" y="117" width="0.0107%" height="15" fill="rgb(224,169,11)" fg:x="5337" fg:w="7"/><text x="8.3729%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (93 samples, 0.14%)</title><rect x="8.0012%" y="149" width="0.1415%" height="15" fill="rgb(250,166,2)" fg:x="5257" fg:w="93"/><text x="8.2512%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (82 samples, 0.12%)</title><rect x="8.0179%" y="133" width="0.1248%" height="15" fill="rgb(242,216,29)" fg:x="5268" fg:w="82"/><text x="8.2679%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (4,932 samples, 7.51%)</title><rect x="1.2146%" y="165" width="7.5065%" height="15" fill="rgb(230,116,27)" fg:x="798" fg:w="4932"/><text x="1.4646%" y="175.50">rust_qecp`..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (378 samples, 0.58%)</title><rect x="8.1457%" y="149" width="0.5753%" height="15" fill="rgb(228,99,48)" fg:x="5352" fg:w="378"/><text x="8.3957%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (5,447 samples, 8.29%)</title><rect x="0.4627%" y="181" width="8.2903%" height="15" fill="rgb(253,11,6)" fg:x="304" fg:w="5447"/><text x="0.7127%" y="191.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (21 samples, 0.03%)</title><rect x="8.7211%" y="165" width="0.0320%" height="15" fill="rgb(247,143,39)" fg:x="5730" fg:w="21"/><text x="8.9711%" y="175.50"></text></g><g><title>dyld`start (5,759 samples, 8.77%)</title><rect x="0.0000%" y="405" width="8.7652%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>rust_qecp`main (5,759 samples, 8.77%)</title><rect x="0.0000%" y="389" width="8.7652%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="399.50">rust_qecp`ma..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (5,759 samples, 8.77%)</title><rect x="0.0000%" y="373" width="8.7652%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="383.50">rust_qecp`st..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (5,759 samples, 8.77%)</title><rect x="0.0000%" y="357" width="8.7652%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="367.50">rust_qecp`st..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (5,759 samples, 8.77%)</title><rect x="0.0000%" y="341" width="8.7652%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="351.50">rust_qecp`st..</text></g><g><title>rust_qecp`rust_qecp::main (5,759 samples, 8.77%)</title><rect x="0.0000%" y="325" width="8.7652%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="335.50">rust_qecp`ru..</text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (5,759 samples, 8.77%)</title><rect x="0.0000%" y="309" width="8.7652%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="319.50">rust_qecp`to..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,759 samples, 8.77%)</title><rect x="0.0000%" y="293" width="8.7652%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="303.50">rust_qecp`to..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (5,759 samples, 8.77%)</title><rect x="0.0000%" y="277" width="8.7652%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="287.50">rust_qecp`to..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,759 samples, 8.77%)</title><rect x="0.0000%" y="261" width="8.7652%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="271.50">rust_qecp`&lt;c..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,759 samples, 8.77%)</title><rect x="0.0000%" y="245" width="8.7652%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="255.50">rust_qecp`to..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,759 samples, 8.77%)</title><rect x="0.0000%" y="229" width="8.7652%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="239.50">rust_qecp`&lt;c..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (5,759 samples, 8.77%)</title><rect x="0.0000%" y="213" width="8.7652%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="5759"/><text x="0.2500%" y="223.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (5,757 samples, 8.76%)</title><rect x="0.0030%" y="197" width="8.7622%" height="15" fill="rgb(212,68,19)" fg:x="2" fg:w="5757"/><text x="0.2530%" y="207.50">rust_qecp`ru..</text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="8.8398%" y="309" width="0.0137%" height="15" fill="rgb(240,187,13)" fg:x="5808" fg:w="9"/><text x="9.0898%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (91 samples, 0.14%)</title><rect x="8.9707%" y="293" width="0.1385%" height="15" fill="rgb(223,113,26)" fg:x="5894" fg:w="91"/><text x="9.2207%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (48 samples, 0.07%)</title><rect x="9.0361%" y="277" width="0.0731%" height="15" fill="rgb(206,192,2)" fg:x="5937" fg:w="48"/><text x="9.2861%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (44 samples, 0.07%)</title><rect x="9.0422%" y="261" width="0.0670%" height="15" fill="rgb(241,108,4)" fg:x="5941" fg:w="44"/><text x="9.2922%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (63 samples, 0.10%)</title><rect x="9.2553%" y="261" width="0.0959%" height="15" fill="rgb(247,173,49)" fg:x="6081" fg:w="63"/><text x="9.5053%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (208 samples, 0.32%)</title><rect x="9.1092%" y="293" width="0.3166%" height="15" fill="rgb(224,114,35)" fg:x="5985" fg:w="208"/><text x="9.3592%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (178 samples, 0.27%)</title><rect x="9.1548%" y="277" width="0.2709%" height="15" fill="rgb(245,159,27)" fg:x="6015" fg:w="178"/><text x="9.4048%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (49 samples, 0.07%)</title><rect x="9.3512%" y="261" width="0.0746%" height="15" fill="rgb(245,172,44)" fg:x="6144" fg:w="49"/><text x="9.6012%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="9.4288%" y="293" width="0.0107%" height="15" fill="rgb(236,23,11)" fg:x="6195" fg:w="7"/><text x="9.6788%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="9.4394%" y="293" width="0.0167%" height="15" fill="rgb(205,117,38)" fg:x="6202" fg:w="11"/><text x="9.6894%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="9.4562%" y="293" width="0.0107%" height="15" fill="rgb(237,72,25)" fg:x="6213" fg:w="7"/><text x="9.7062%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (462 samples, 0.70%)</title><rect x="8.7759%" y="325" width="0.7032%" height="15" fill="rgb(244,70,9)" fg:x="5766" fg:w="462"/><text x="9.0259%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (397 samples, 0.60%)</title><rect x="8.8748%" y="309" width="0.6042%" height="15" fill="rgb(217,125,39)" fg:x="5831" fg:w="397"/><text x="9.1248%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="9.4668%" y="293" width="0.0122%" height="15" fill="rgb(235,36,10)" fg:x="6220" fg:w="8"/><text x="9.7168%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (22 samples, 0.03%)</title><rect x="9.4836%" y="325" width="0.0335%" height="15" fill="rgb(251,123,47)" fg:x="6231" fg:w="22"/><text x="9.7336%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (28 samples, 0.04%)</title><rect x="9.5171%" y="325" width="0.0426%" height="15" fill="rgb(221,13,13)" fg:x="6253" fg:w="28"/><text x="9.7671%" y="335.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::benchmark::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="9.5597%" y="325" width="0.0107%" height="15" fill="rgb(238,131,9)" fg:x="6281" fg:w="7"/><text x="9.8097%" y="335.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::simulator::SimulatorNode&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="9.5597%" y="309" width="0.0107%" height="15" fill="rgb(211,50,8)" fg:x="6281" fg:w="7"/><text x="9.8097%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="39.9540%" y="309" width="0.0228%" height="15" fill="rgb(245,182,24)" fg:x="26251" fg:w="15"/><text x="40.2040%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (1,053 samples, 1.60%)</title><rect x="39.9860%" y="309" width="1.6027%" height="15" fill="rgb(242,14,37)" fg:x="26272" fg:w="1053"/><text x="40.2360%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (52,803 samples, 80.37%)</title><rect x="9.5703%" y="325" width="80.3662%" height="15" fill="rgb(246,228,12)" fg:x="6288" fg:w="52803"/><text x="9.8203%" y="335.50">rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (31,766 samples, 48.35%)</title><rect x="41.5887%" y="309" width="48.3479%" height="15" fill="rgb(213,55,15)" fg:x="27325" fg:w="31766"/><text x="41.8387%" y="319.50">rust_qecp`rust_qecp::simulator::Simulator::propagate_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (26,529 samples, 40.38%)</title><rect x="49.5594%" y="293" width="40.3772%" height="15" fill="rgb(209,9,3)" fg:x="32562" fg:w="26529"/><text x="49.8094%" y="303.50">rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="99.2162%" y="277" width="0.0244%" height="15" fill="rgb(230,59,30)" fg:x="65188" fg:w="16"/><text x="99.4662%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (10 samples, 0.02%)</title><rect x="99.2420%" y="277" width="0.0152%" height="15" fill="rgb(209,121,21)" fg:x="65205" fg:w="10"/><text x="99.4920%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (81 samples, 0.12%)</title><rect x="99.5875%" y="213" width="0.1233%" height="15" fill="rgb(220,109,13)" fg:x="65432" fg:w="81"/><text x="99.8375%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (182 samples, 0.28%)</title><rect x="99.5145%" y="245" width="0.2770%" height="15" fill="rgb(232,18,1)" fg:x="65384" fg:w="182"/><text x="99.7645%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (170 samples, 0.26%)</title><rect x="99.5327%" y="229" width="0.2587%" height="15" fill="rgb(215,41,42)" fg:x="65396" fg:w="170"/><text x="99.7827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.08%)</title><rect x="99.7108%" y="213" width="0.0807%" height="15" fill="rgb(224,123,36)" fg:x="65513" fg:w="53"/><text x="99.9608%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (223 samples, 0.34%)</title><rect x="99.4688%" y="261" width="0.3394%" height="15" fill="rgb(240,125,3)" fg:x="65354" fg:w="223"/><text x="99.7188%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.7915%" y="245" width="0.0167%" height="15" fill="rgb(205,98,50)" fg:x="65566" fg:w="11"/><text x="100.0415%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (369 samples, 0.56%)</title><rect x="99.2618%" y="277" width="0.5616%" height="15" fill="rgb(205,185,37)" fg:x="65218" fg:w="369"/><text x="99.5118%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (470 samples, 0.72%)</title><rect x="99.1294%" y="293" width="0.7153%" height="15" fill="rgb(238,207,15)" fg:x="65131" fg:w="470"/><text x="99.3794%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::splitpoint (14 samples, 0.02%)</title><rect x="99.8234%" y="277" width="0.0213%" height="15" fill="rgb(213,199,42)" fg:x="65587" fg:w="14"/><text x="100.0734%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3,970 samples, 6.04%)</title><rect x="93.8876%" y="309" width="6.0423%" height="15" fill="rgb(235,201,11)" fg:x="61687" fg:w="3970"/><text x="94.1376%" y="319.50">rust_qec..</text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (56 samples, 0.09%)</title><rect x="99.8448%" y="293" width="0.0852%" height="15" fill="rgb(207,46,11)" fg:x="65601" fg:w="56"/><text x="100.0948%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (6,607 samples, 10.06%)</title><rect x="89.9365%" y="325" width="10.0559%" height="15" fill="rgb(241,35,35)" fg:x="59091" fg:w="6607"/><text x="90.1865%" y="335.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (41 samples, 0.06%)</title><rect x="99.9300%" y="309" width="0.0624%" height="15" fill="rgb(243,32,47)" fg:x="65657" fg:w="41"/><text x="100.1800%" y="319.50"></text></g><g><title>all (65,703 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="65703"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,943 samples, 91.23%)</title><rect x="8.7667%" y="405" width="91.2333%" height="15" fill="rgb(219,102,11)" fg:x="5760" fg:w="59943"/><text x="9.0167%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,943 samples, 91.23%)</title><rect x="8.7667%" y="389" width="91.2333%" height="15" fill="rgb(243,110,44)" fg:x="5760" fg:w="59943"/><text x="9.0167%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,943 samples, 91.23%)</title><rect x="8.7667%" y="373" width="91.2333%" height="15" fill="rgb(222,74,54)" fg:x="5760" fg:w="59943"/><text x="9.0167%" y="383.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,943 samples, 91.23%)</title><rect x="8.7667%" y="357" width="91.2333%" height="15" fill="rgb(216,99,12)" fg:x="5760" fg:w="59943"/><text x="9.0167%" y="367.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,942 samples, 91.23%)</title><rect x="8.7682%" y="341" width="91.2318%" height="15" fill="rgb(226,22,26)" fg:x="5761" fg:w="59942"/><text x="9.0182%" y="351.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>