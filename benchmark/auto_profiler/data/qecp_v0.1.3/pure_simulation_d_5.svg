<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="59884"><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.01%)</title><rect x="0.0000%" y="53" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (6 samples, 0.01%)</title><rect x="0.0000%" y="37" width="0.0100%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="47.50"></text></g><g><title>dyld`start (7 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0117%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`main (7 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0117%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="7"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (7 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0117%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (7 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0117%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0117%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::main (7 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0117%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (7 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0117%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (7 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0117%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (7 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0117%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="127.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (7 samples, 0.01%)</title><rect x="0.0000%" y="101" width="0.0117%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="111.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.01%)</title><rect x="0.0000%" y="85" width="0.0117%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="95.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (7 samples, 0.01%)</title><rect x="0.0000%" y="69" width="0.0117%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.01%)</title><rect x="0.1085%" y="149" width="0.0100%" height="15" fill="rgb(217,207,13)" fg:x="65" fg:w="6"/><text x="0.3585%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.04%)</title><rect x="0.1186%" y="149" width="0.0351%" height="15" fill="rgb(231,73,38)" fg:x="71" fg:w="21"/><text x="0.3686%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="0.1369%" y="133" width="0.0167%" height="15" fill="rgb(225,20,46)" fg:x="82" fg:w="10"/><text x="0.3869%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.02%)</title><rect x="0.1386%" y="117" width="0.0150%" height="15" fill="rgb(210,31,41)" fg:x="83" fg:w="9"/><text x="0.3886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 0.06%)</title><rect x="0.1536%" y="149" width="0.0551%" height="15" fill="rgb(221,200,47)" fg:x="92" fg:w="33"/><text x="0.4036%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.04%)</title><rect x="0.1653%" y="133" width="0.0434%" height="15" fill="rgb(226,26,5)" fg:x="99" fg:w="26"/><text x="0.4153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="0.1887%" y="117" width="0.0200%" height="15" fill="rgb(249,33,26)" fg:x="113" fg:w="12"/><text x="0.4387%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="0.2171%" y="149" width="0.0184%" height="15" fill="rgb(235,183,28)" fg:x="130" fg:w="11"/><text x="0.4671%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="0.2438%" y="149" width="0.0117%" height="15" fill="rgb(221,5,38)" fg:x="146" fg:w="7"/><text x="0.4938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (108 samples, 0.18%)</title><rect x="0.3690%" y="133" width="0.1803%" height="15" fill="rgb(247,18,42)" fg:x="221" fg:w="108"/><text x="0.6190%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (57 samples, 0.10%)</title><rect x="0.4542%" y="117" width="0.0952%" height="15" fill="rgb(241,131,45)" fg:x="272" fg:w="57"/><text x="0.7042%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (51 samples, 0.09%)</title><rect x="0.4642%" y="101" width="0.0852%" height="15" fill="rgb(249,31,29)" fg:x="278" fg:w="51"/><text x="0.7142%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (60 samples, 0.10%)</title><rect x="0.7080%" y="101" width="0.1002%" height="15" fill="rgb(225,111,53)" fg:x="424" fg:w="60"/><text x="0.9580%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (199 samples, 0.33%)</title><rect x="0.5494%" y="133" width="0.3323%" height="15" fill="rgb(238,160,17)" fg:x="329" fg:w="199"/><text x="0.7994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (157 samples, 0.26%)</title><rect x="0.6195%" y="117" width="0.2622%" height="15" fill="rgb(214,148,48)" fg:x="371" fg:w="157"/><text x="0.8695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (44 samples, 0.07%)</title><rect x="0.8082%" y="101" width="0.0735%" height="15" fill="rgb(232,36,49)" fg:x="484" fg:w="44"/><text x="1.0582%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="0.8867%" y="133" width="0.0117%" height="15" fill="rgb(209,103,24)" fg:x="531" fg:w="7"/><text x="1.1367%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.02%)</title><rect x="0.8984%" y="133" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="538" fg:w="9"/><text x="1.1484%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (546 samples, 0.91%)</title><rect x="0.0284%" y="165" width="0.9118%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="546"/><text x="0.2784%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (410 samples, 0.68%)</title><rect x="0.2555%" y="149" width="0.6847%" height="15" fill="rgb(254,191,54)" fg:x="153" fg:w="410"/><text x="0.5055%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="0.9218%" y="133" width="0.0184%" height="15" fill="rgb(241,83,37)" fg:x="552" fg:w="11"/><text x="1.1718%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (22 samples, 0.04%)</title><rect x="0.9435%" y="165" width="0.0367%" height="15" fill="rgb(233,36,39)" fg:x="565" fg:w="22"/><text x="1.1935%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (48 samples, 0.08%)</title><rect x="0.9802%" y="165" width="0.0802%" height="15" fill="rgb(226,3,54)" fg:x="587" fg:w="48"/><text x="1.2302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="21.3329%" y="149" width="0.0200%" height="15" fill="rgb(245,192,40)" fg:x="12775" fg:w="12"/><text x="21.5829%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="21.3396%" y="133" width="0.0134%" height="15" fill="rgb(238,167,29)" fg:x="12779" fg:w="8"/><text x="21.5896%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.03%)</title><rect x="21.3596%" y="149" width="0.0250%" height="15" fill="rgb(232,182,51)" fg:x="12791" fg:w="15"/><text x="21.6096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (14 samples, 0.02%)</title><rect x="21.3847%" y="149" width="0.0234%" height="15" fill="rgb(231,60,39)" fg:x="12806" fg:w="14"/><text x="21.6347%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (53,335 samples, 89.06%)</title><rect x="1.0604%" y="165" width="89.0639%" height="15" fill="rgb(208,69,12)" fg:x="635" fg:w="53335"/><text x="1.3104%" y="175.50">rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (41,143 samples, 68.70%)</title><rect x="21.4197%" y="149" width="68.7045%" height="15" fill="rgb(235,93,37)" fg:x="12827" fg:w="41143"/><text x="21.6697%" y="159.50">rust_qecp`rust_qecp::simulator::Simulator::propagate_errors</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.03%)</title><rect x="98.8661%" y="133" width="0.0250%" height="15" fill="rgb(213,116,39)" fg:x="59205" fg:w="15"/><text x="99.1161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="98.8812%" y="117" width="0.0100%" height="15" fill="rgb(222,207,29)" fg:x="59214" fg:w="6"/><text x="99.1312%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.01%)</title><rect x="98.8812%" y="101" width="0.0100%" height="15" fill="rgb(206,96,30)" fg:x="59214" fg:w="6"/><text x="99.1312%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.03%)</title><rect x="99.0298%" y="101" width="0.0250%" height="15" fill="rgb(218,138,4)" fg:x="59303" fg:w="15"/><text x="99.2798%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="99.0315%" y="85" width="0.0234%" height="15" fill="rgb(250,191,14)" fg:x="59304" fg:w="14"/><text x="99.2815%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="99.0448%" y="69" width="0.0100%" height="15" fill="rgb(239,60,40)" fg:x="59312" fg:w="6"/><text x="99.2948%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="99.0265%" y="117" width="0.0301%" height="15" fill="rgb(206,27,48)" fg:x="59301" fg:w="18"/><text x="99.2765%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="99.0598%" y="117" width="0.0184%" height="15" fill="rgb(225,35,8)" fg:x="59321" fg:w="11"/><text x="99.3098%" y="127.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="99.0782%" y="117" width="0.0117%" height="15" fill="rgb(250,213,24)" fg:x="59332" fg:w="7"/><text x="99.3282%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.02%)</title><rect x="99.3955%" y="85" width="0.0150%" height="15" fill="rgb(247,123,22)" fg:x="59522" fg:w="9"/><text x="99.6455%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (62 samples, 0.10%)</title><rect x="99.5191%" y="53" width="0.1035%" height="15" fill="rgb(231,138,38)" fg:x="59596" fg:w="62"/><text x="99.7691%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (175 samples, 0.29%)</title><rect x="99.4105%" y="85" width="0.2922%" height="15" fill="rgb(231,145,46)" fg:x="59531" fg:w="175"/><text x="99.6605%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (159 samples, 0.27%)</title><rect x="99.4372%" y="69" width="0.2655%" height="15" fill="rgb(251,118,11)" fg:x="59547" fg:w="159"/><text x="99.6872%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.08%)</title><rect x="99.6226%" y="53" width="0.0802%" height="15" fill="rgb(217,147,25)" fg:x="59658" fg:w="48"/><text x="99.8726%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (211 samples, 0.35%)</title><rect x="99.3604%" y="101" width="0.3523%" height="15" fill="rgb(247,81,37)" fg:x="59501" fg:w="211"/><text x="99.6104%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.01%)</title><rect x="99.7028%" y="85" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="59706" fg:w="6"/><text x="99.9528%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.02%)</title><rect x="99.7128%" y="101" width="0.0150%" height="15" fill="rgb(227,1,9)" fg:x="59712" fg:w="9"/><text x="99.9628%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.01%)</title><rect x="99.7278%" y="101" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="59721" fg:w="6"/><text x="99.9778%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (393 samples, 0.66%)</title><rect x="99.0949%" y="117" width="0.6563%" height="15" fill="rgb(221,10,30)" fg:x="59342" fg:w="393"/><text x="99.3449%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="99.7378%" y="101" width="0.0134%" height="15" fill="rgb(210,229,1)" fg:x="59727" fg:w="8"/><text x="99.9878%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (532 samples, 0.89%)</title><rect x="98.8995%" y="133" width="0.8884%" height="15" fill="rgb(222,148,37)" fg:x="59225" fg:w="532"/><text x="99.1495%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::splitpoint (22 samples, 0.04%)</title><rect x="99.7512%" y="117" width="0.0367%" height="15" fill="rgb(234,67,33)" fg:x="59735" fg:w="22"/><text x="100.0012%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3,392 samples, 5.66%)</title><rect x="94.2372%" y="149" width="5.6643%" height="15" fill="rgb(247,98,35)" fg:x="56433" fg:w="3392"/><text x="94.4872%" y="159.50">rust_qe..</text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (68 samples, 0.11%)</title><rect x="99.7879%" y="133" width="0.1136%" height="15" fill="rgb(247,138,52)" fg:x="59757" fg:w="68"/><text x="100.0379%" y="143.50"></text></g><g><title>all (59,884 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="59884"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,877 samples, 99.99%)</title><rect x="0.0117%" y="245" width="99.9883%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="59877"/><text x="0.2617%" y="255.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,877 samples, 99.99%)</title><rect x="0.0117%" y="229" width="99.9883%" height="15" fill="rgb(230,62,27)" fg:x="7" fg:w="59877"/><text x="0.2617%" y="239.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,877 samples, 99.99%)</title><rect x="0.0117%" y="213" width="99.9883%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="59877"/><text x="0.2617%" y="223.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,877 samples, 99.99%)</title><rect x="0.0117%" y="197" width="99.9883%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="59877"/><text x="0.2617%" y="207.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,876 samples, 99.99%)</title><rect x="0.0134%" y="181" width="99.9866%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="59876"/><text x="0.2634%" y="191.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (5,914 samples, 9.88%)</title><rect x="90.1242%" y="165" width="9.8758%" height="15" fill="rgb(240,54,50)" fg:x="53970" fg:w="5914"/><text x="90.3742%" y="175.50">rust_qecp`rust..</text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (59 samples, 0.10%)</title><rect x="99.9015%" y="149" width="0.0985%" height="15" fill="rgb(233,84,52)" fg:x="59825" fg:w="59"/><text x="100.1515%" y="159.50"></text></g></svg></svg>