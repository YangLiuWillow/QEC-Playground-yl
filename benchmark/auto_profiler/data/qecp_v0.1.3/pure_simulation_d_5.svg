<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="59983"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (11 samples, 0.02%)</title><rect x="0.0133%" y="53" width="0.0183%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="11"/><text x="0.2633%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (11 samples, 0.02%)</title><rect x="0.0133%" y="37" width="0.0183%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="11"/><text x="0.2633%" y="47.50"></text></g><g><title>rust_qecp`alloc::fmt::format (8 samples, 0.01%)</title><rect x="0.0317%" y="53" width="0.0133%" height="15" fill="rgb(221,193,54)" fg:x="19" fg:w="8"/><text x="0.2817%" y="63.50"></text></g><g><title>rust_qecp`core::fmt::write (6 samples, 0.01%)</title><rect x="0.0350%" y="37" width="0.0100%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="6"/><text x="0.2850%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (28 samples, 0.05%)</title><rect x="0.0100%" y="69" width="0.0467%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="28"/><text x="0.2600%" y="79.50"></text></g><g><title>dyld`start (46 samples, 0.08%)</title><rect x="0.0000%" y="293" width="0.0767%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="46"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`main (46 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0767%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="46"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (46 samples, 0.08%)</title><rect x="0.0000%" y="261" width="0.0767%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="46"/><text x="0.2500%" y="271.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (46 samples, 0.08%)</title><rect x="0.0000%" y="245" width="0.0767%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="46"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 0.08%)</title><rect x="0.0000%" y="229" width="0.0767%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="46"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::main (46 samples, 0.08%)</title><rect x="0.0000%" y="213" width="0.0767%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="46"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::Runtime::block_on (46 samples, 0.08%)</title><rect x="0.0000%" y="197" width="0.0767%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="46"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (46 samples, 0.08%)</title><rect x="0.0000%" y="181" width="0.0767%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="46"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (46 samples, 0.08%)</title><rect x="0.0000%" y="165" width="0.0767%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="46"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 0.08%)</title><rect x="0.0000%" y="149" width="0.0767%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="46"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (46 samples, 0.08%)</title><rect x="0.0000%" y="133" width="0.0767%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="46"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 0.08%)</title><rect x="0.0000%" y="117" width="0.0767%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="46"/><text x="0.2500%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (46 samples, 0.08%)</title><rect x="0.0000%" y="101" width="0.0767%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="46"/><text x="0.2500%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (43 samples, 0.07%)</title><rect x="0.0050%" y="85" width="0.0717%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="43"/><text x="0.2550%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (11 samples, 0.02%)</title><rect x="0.0583%" y="69" width="0.0183%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="11"/><text x="0.3083%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (9 samples, 0.02%)</title><rect x="0.0617%" y="53" width="0.0150%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="9"/><text x="0.3117%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (49 samples, 0.08%)</title><rect x="0.0767%" y="229" width="0.0817%" height="15" fill="rgb(235,183,28)" fg:x="46" fg:w="49"/><text x="0.3267%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (89 samples, 0.15%)</title><rect x="0.1717%" y="213" width="0.1484%" height="15" fill="rgb(221,5,38)" fg:x="103" fg:w="89"/><text x="0.4217%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.04%)</title><rect x="0.4068%" y="197" width="0.0350%" height="15" fill="rgb(247,18,42)" fg:x="244" fg:w="21"/><text x="0.6568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="0.4285%" y="181" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="257" fg:w="8"/><text x="0.6785%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="0.4285%" y="165" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="257" fg:w="8"/><text x="0.6785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (39 samples, 0.07%)</title><rect x="0.4418%" y="197" width="0.0650%" height="15" fill="rgb(225,111,53)" fg:x="265" fg:w="39"/><text x="0.6918%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.05%)</title><rect x="0.4551%" y="181" width="0.0517%" height="15" fill="rgb(238,160,17)" fg:x="273" fg:w="31"/><text x="0.7051%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="0.4901%" y="165" width="0.0167%" height="15" fill="rgb(214,148,48)" fg:x="294" fg:w="10"/><text x="0.7401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.02%)</title><rect x="0.5068%" y="197" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="304" fg:w="9"/><text x="0.7568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.07%)</title><rect x="0.6318%" y="181" width="0.0717%" height="15" fill="rgb(209,103,24)" fg:x="379" fg:w="43"/><text x="0.8818%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="0.6669%" y="165" width="0.0367%" height="15" fill="rgb(229,88,8)" fg:x="400" fg:w="22"/><text x="0.9169%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (21 samples, 0.04%)</title><rect x="0.6685%" y="149" width="0.0350%" height="15" fill="rgb(213,181,19)" fg:x="401" fg:w="21"/><text x="0.9185%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.06%)</title><rect x="0.7736%" y="149" width="0.0550%" height="15" fill="rgb(254,191,54)" fg:x="464" fg:w="33"/><text x="1.0236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (92 samples, 0.15%)</title><rect x="0.7035%" y="181" width="0.1534%" height="15" fill="rgb(241,83,37)" fg:x="422" fg:w="92"/><text x="0.9535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (80 samples, 0.13%)</title><rect x="0.7235%" y="165" width="0.1334%" height="15" fill="rgb(233,36,39)" fg:x="434" fg:w="80"/><text x="0.9735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.03%)</title><rect x="0.8286%" y="149" width="0.0283%" height="15" fill="rgb(226,3,54)" fg:x="497" fg:w="17"/><text x="1.0786%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (318 samples, 0.53%)</title><rect x="0.3468%" y="213" width="0.5302%" height="15" fill="rgb(245,192,40)" fg:x="208" fg:w="318"/><text x="0.5968%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (201 samples, 0.34%)</title><rect x="0.5418%" y="197" width="0.3351%" height="15" fill="rgb(238,167,29)" fg:x="325" fg:w="201"/><text x="0.7918%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 0.03%)</title><rect x="0.8886%" y="213" width="0.0250%" height="15" fill="rgb(232,182,51)" fg:x="533" fg:w="15"/><text x="1.1386%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (25 samples, 0.04%)</title><rect x="0.9136%" y="213" width="0.0417%" height="15" fill="rgb(231,60,39)" fg:x="548" fg:w="25"/><text x="1.1636%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="38.9177%" y="197" width="0.0333%" height="15" fill="rgb(208,69,12)" fg:x="23344" fg:w="20"/><text x="39.1677%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="38.9310%" y="181" width="0.0200%" height="15" fill="rgb(235,93,37)" fg:x="23352" fg:w="12"/><text x="39.1810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (6 samples, 0.01%)</title><rect x="38.9410%" y="165" width="0.0100%" height="15" fill="rgb(213,116,39)" fg:x="23358" fg:w="6"/><text x="39.1910%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.05%)</title><rect x="38.9510%" y="197" width="0.0450%" height="15" fill="rgb(222,207,29)" fg:x="23364" fg:w="27"/><text x="39.2010%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (24 samples, 0.04%)</title><rect x="38.9960%" y="197" width="0.0400%" height="15" fill="rgb(206,96,30)" fg:x="23391" fg:w="24"/><text x="39.2460%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.01%)</title><rect x="39.0427%" y="197" width="0.0117%" height="15" fill="rgb(218,138,4)" fg:x="23419" fg:w="7"/><text x="39.2927%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (1,404 samples, 2.34%)</title><rect x="39.0561%" y="197" width="2.3407%" height="15" fill="rgb(250,191,14)" fg:x="23427" fg:w="1404"/><text x="39.3061%" y="207.50">r..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (55,065 samples, 91.80%)</title><rect x="0.9553%" y="213" width="91.8010%" height="15" fill="rgb(239,60,40)" fg:x="573" fg:w="55065"/><text x="1.2053%" y="223.50">rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (30,807 samples, 51.36%)</title><rect x="41.3967%" y="197" width="51.3596%" height="15" fill="rgb(206,27,48)" fg:x="24831" fg:w="30807"/><text x="41.6467%" y="207.50">rust_qecp`rust_qecp::simulator::Simulator::propagate_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (23,873 samples, 39.80%)</title><rect x="52.9567%" y="181" width="39.7996%" height="15" fill="rgb(225,35,8)" fg:x="31765" fg:w="23873"/><text x="53.2067%" y="191.50">rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.06%)</title><rect x="99.2948%" y="181" width="0.0567%" height="15" fill="rgb(250,213,24)" fg:x="59560" fg:w="34"/><text x="99.5448%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="99.3198%" y="165" width="0.0317%" height="15" fill="rgb(247,123,22)" fg:x="59575" fg:w="19"/><text x="99.5698%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="99.3248%" y="149" width="0.0267%" height="15" fill="rgb(231,138,38)" fg:x="59578" fg:w="16"/><text x="99.5748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.4482%" y="149" width="0.0183%" height="15" fill="rgb(231,145,46)" fg:x="59652" fg:w="11"/><text x="99.6982%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="99.4532%" y="133" width="0.0133%" height="15" fill="rgb(251,118,11)" fg:x="59655" fg:w="8"/><text x="99.7032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="99.4415%" y="165" width="0.0283%" height="15" fill="rgb(217,147,25)" fg:x="59648" fg:w="17"/><text x="99.6915%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="99.4698%" y="165" width="0.0183%" height="15" fill="rgb(247,81,37)" fg:x="59665" fg:w="11"/><text x="99.7198%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="99.7449%" y="101" width="0.0267%" height="15" fill="rgb(209,12,38)" fg:x="59830" fg:w="16"/><text x="99.9949%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (71 samples, 0.12%)</title><rect x="99.6899%" y="133" width="0.1184%" height="15" fill="rgb(227,1,9)" fg:x="59797" fg:w="71"/><text x="99.9399%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.11%)</title><rect x="99.7032%" y="117" width="0.1050%" height="15" fill="rgb(248,47,43)" fg:x="59805" fg:w="63"/><text x="99.9532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.04%)</title><rect x="99.7716%" y="101" width="0.0367%" height="15" fill="rgb(221,10,30)" fg:x="59846" fg:w="22"/><text x="100.0216%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (94 samples, 0.16%)</title><rect x="99.6582%" y="149" width="0.1567%" height="15" fill="rgb(210,229,1)" fg:x="59778" fg:w="94"/><text x="99.9082%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (202 samples, 0.34%)</title><rect x="99.4965%" y="165" width="0.3368%" height="15" fill="rgb(222,148,37)" fg:x="59681" fg:w="202"/><text x="99.7465%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (292 samples, 0.49%)</title><rect x="99.3582%" y="181" width="0.4868%" height="15" fill="rgb(234,67,33)" fg:x="59598" fg:w="292"/><text x="99.6082%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::splitpoint (7 samples, 0.01%)</title><rect x="99.8333%" y="165" width="0.0117%" height="15" fill="rgb(247,98,35)" fg:x="59883" fg:w="7"/><text x="100.0833%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,627 samples, 2.71%)</title><rect x="97.2075%" y="197" width="2.7124%" height="15" fill="rgb(247,138,52)" fg:x="58308" fg:w="1627"/><text x="97.4575%" y="207.50">ru..</text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (45 samples, 0.08%)</title><rect x="99.8450%" y="181" width="0.0750%" height="15" fill="rgb(213,79,30)" fg:x="59890" fg:w="45"/><text x="100.0950%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (4,336 samples, 7.23%)</title><rect x="92.7563%" y="213" width="7.2287%" height="15" fill="rgb(246,177,23)" fg:x="55638" fg:w="4336"/><text x="93.0063%" y="223.50">rust_qecp`..</text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (39 samples, 0.07%)</title><rect x="99.9200%" y="197" width="0.0650%" height="15" fill="rgb(230,62,27)" fg:x="59935" fg:w="39"/><text x="100.1700%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::validate_correction (6 samples, 0.01%)</title><rect x="99.9850%" y="213" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="59974" fg:w="6"/><text x="100.2350%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::code_builder_validate_correction (6 samples, 0.01%)</title><rect x="99.9850%" y="197" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="59974" fg:w="6"/><text x="100.2350%" y="207.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,882 samples, 99.83%)</title><rect x="0.1667%" y="229" width="99.8316%" height="15" fill="rgb(251,115,12)" fg:x="100" fg:w="59882"/><text x="0.4167%" y="239.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (59,983 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="59983"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,937 samples, 99.92%)</title><rect x="0.0767%" y="293" width="99.9233%" height="15" fill="rgb(233,84,52)" fg:x="46" fg:w="59937"/><text x="0.3267%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,937 samples, 99.92%)</title><rect x="0.0767%" y="277" width="99.9233%" height="15" fill="rgb(207,117,47)" fg:x="46" fg:w="59937"/><text x="0.3267%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,937 samples, 99.92%)</title><rect x="0.0767%" y="261" width="99.9233%" height="15" fill="rgb(249,43,39)" fg:x="46" fg:w="59937"/><text x="0.3267%" y="271.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,937 samples, 99.92%)</title><rect x="0.0767%" y="245" width="99.9233%" height="15" fill="rgb(209,38,44)" fg:x="46" fg:w="59937"/><text x="0.3267%" y="255.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>