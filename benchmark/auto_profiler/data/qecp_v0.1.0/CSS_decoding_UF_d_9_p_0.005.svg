<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="61056"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0164%" y="101" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="11"/><text x="0.2664%" y="111.50"></text></g><g><title>rust_qecp`alloc::fmt::format (8 samples, 0.01%)</title><rect x="0.0377%" y="101" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="8"/><text x="0.2877%" y="111.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.02%)</title><rect x="0.0508%" y="101" width="0.0229%" height="15" fill="rgb(221,193,54)" fg:x="31" fg:w="14"/><text x="0.3008%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (14 samples, 0.02%)</title><rect x="0.0508%" y="85" width="0.0229%" height="15" fill="rgb(248,212,6)" fg:x="31" fg:w="14"/><text x="0.3008%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0508%" y="69" width="0.0229%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="14"/><text x="0.3008%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0508%" y="53" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="14"/><text x="0.3008%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (12 samples, 0.02%)</title><rect x="0.0540%" y="37" width="0.0197%" height="15" fill="rgb(207,160,47)" fg:x="33" fg:w="12"/><text x="0.3040%" y="47.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (53 samples, 0.09%)</title><rect x="0.0852%" y="101" width="0.0868%" height="15" fill="rgb(228,23,34)" fg:x="52" fg:w="53"/><text x="0.3352%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (36 samples, 0.06%)</title><rect x="0.1720%" y="101" width="0.0590%" height="15" fill="rgb(218,30,26)" fg:x="105" fg:w="36"/><text x="0.4220%" y="111.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (13 samples, 0.02%)</title><rect x="0.2309%" y="101" width="0.0213%" height="15" fill="rgb(220,122,19)" fg:x="141" fg:w="13"/><text x="0.4809%" y="111.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (10 samples, 0.02%)</title><rect x="0.2358%" y="85" width="0.0164%" height="15" fill="rgb(250,228,42)" fg:x="144" fg:w="10"/><text x="0.4858%" y="95.50"></text></g><g><title>libsystem_c.dylib`isatty (10 samples, 0.02%)</title><rect x="0.2358%" y="69" width="0.0164%" height="15" fill="rgb(240,193,28)" fg:x="144" fg:w="10"/><text x="0.4858%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (10 samples, 0.02%)</title><rect x="0.2358%" y="53" width="0.0164%" height="15" fill="rgb(216,20,37)" fg:x="144" fg:w="10"/><text x="0.4858%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="0.8795%" y="85" width="0.0131%" height="15" fill="rgb(206,188,39)" fg:x="537" fg:w="8"/><text x="1.1295%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="0.8926%" y="85" width="0.0180%" height="15" fill="rgb(217,207,13)" fg:x="545" fg:w="11"/><text x="1.1426%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (49 samples, 0.08%)</title><rect x="0.9156%" y="85" width="0.0803%" height="15" fill="rgb(231,73,38)" fg:x="559" fg:w="49"/><text x="1.1656%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.02%)</title><rect x="1.1088%" y="53" width="0.0164%" height="15" fill="rgb(225,20,46)" fg:x="677" fg:w="10"/><text x="1.3588%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.02%)</title><rect x="1.1088%" y="37" width="0.0164%" height="15" fill="rgb(210,31,41)" fg:x="677" fg:w="10"/><text x="1.3588%" y="47.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (87 samples, 0.14%)</title><rect x="1.0024%" y="85" width="0.1425%" height="15" fill="rgb(221,200,47)" fg:x="612" fg:w="87"/><text x="1.2524%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="1.1055%" y="69" width="0.0393%" height="15" fill="rgb(226,26,5)" fg:x="675" fg:w="24"/><text x="1.3555%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="1.1252%" y="53" width="0.0197%" height="15" fill="rgb(249,33,26)" fg:x="687" fg:w="12"/><text x="1.3752%" y="63.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="1.4266%" y="69" width="0.0262%" height="15" fill="rgb(235,183,28)" fg:x="871" fg:w="16"/><text x="1.6766%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (40 samples, 0.07%)</title><rect x="1.4528%" y="69" width="0.0655%" height="15" fill="rgb(221,5,38)" fg:x="887" fg:w="40"/><text x="1.7028%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (784 samples, 1.28%)</title><rect x="0.2539%" y="101" width="1.2841%" height="15" fill="rgb(247,18,42)" fg:x="155" fg:w="784"/><text x="0.5039%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (240 samples, 0.39%)</title><rect x="1.1449%" y="85" width="0.3931%" height="15" fill="rgb(241,131,45)" fg:x="699" fg:w="240"/><text x="1.3949%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="1.5183%" y="69" width="0.0197%" height="15" fill="rgb(249,31,29)" fg:x="927" fg:w="12"/><text x="1.7683%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="1.5265%" y="53" width="0.0115%" height="15" fill="rgb(225,111,53)" fg:x="932" fg:w="7"/><text x="1.7765%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="1.5510%" y="85" width="0.0426%" height="15" fill="rgb(238,160,17)" fg:x="947" fg:w="26"/><text x="1.8010%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (117 samples, 0.19%)</title><rect x="1.6034%" y="85" width="0.1916%" height="15" fill="rgb(214,148,48)" fg:x="979" fg:w="117"/><text x="1.8534%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (59 samples, 0.10%)</title><rect x="1.6984%" y="69" width="0.0966%" height="15" fill="rgb(232,36,49)" fg:x="1037" fg:w="59"/><text x="1.9484%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (159 samples, 0.26%)</title><rect x="1.5379%" y="101" width="0.2604%" height="15" fill="rgb(209,103,24)" fg:x="939" fg:w="159"/><text x="1.7879%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.8000%" y="101" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="1099" fg:w="7"/><text x="2.0500%" y="111.50"></text></g><g><title>dyld`start (1,114 samples, 1.82%)</title><rect x="0.0000%" y="341" width="1.8246%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1114"/><text x="0.2500%" y="351.50">d..</text></g><g><title>rust_qecp`main (1,110 samples, 1.82%)</title><rect x="0.0066%" y="325" width="1.8180%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1110"/><text x="0.2566%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,110 samples, 1.82%)</title><rect x="0.0066%" y="309" width="1.8180%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1110"/><text x="0.2566%" y="319.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,110 samples, 1.82%)</title><rect x="0.0066%" y="293" width="1.8180%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1110"/><text x="0.2566%" y="303.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,110 samples, 1.82%)</title><rect x="0.0066%" y="277" width="1.8180%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1110"/><text x="0.2566%" y="287.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,110 samples, 1.82%)</title><rect x="0.0066%" y="261" width="1.8180%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1110"/><text x="0.2566%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,109 samples, 1.82%)</title><rect x="0.0082%" y="245" width="1.8164%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,109 samples, 1.82%)</title><rect x="0.0082%" y="229" width="1.8164%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="239.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,109 samples, 1.82%)</title><rect x="0.0082%" y="213" width="1.8164%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,109 samples, 1.82%)</title><rect x="0.0082%" y="197" width="1.8164%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,109 samples, 1.82%)</title><rect x="0.0082%" y="181" width="1.8164%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="191.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,109 samples, 1.82%)</title><rect x="0.0082%" y="165" width="1.8164%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="175.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,109 samples, 1.82%)</title><rect x="0.0082%" y="149" width="1.8164%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="159.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,109 samples, 1.82%)</title><rect x="0.0082%" y="133" width="1.8164%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1109"/><text x="0.2582%" y="143.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,108 samples, 1.81%)</title><rect x="0.0098%" y="117" width="1.8147%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1108"/><text x="0.2598%" y="127.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="1.8606%" y="261" width="0.0246%" height="15" fill="rgb(250,191,14)" fg:x="1136" fg:w="15"/><text x="2.1106%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (45 samples, 0.07%)</title><rect x="1.9376%" y="245" width="0.0737%" height="15" fill="rgb(239,60,40)" fg:x="1183" fg:w="45"/><text x="2.1876%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="2.0113%" y="245" width="0.0115%" height="15" fill="rgb(206,27,48)" fg:x="1228" fg:w="7"/><text x="2.2613%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="2.0227%" y="245" width="0.0508%" height="15" fill="rgb(225,35,8)" fg:x="1235" fg:w="31"/><text x="2.2727%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="2.0424%" y="229" width="0.0311%" height="15" fill="rgb(250,213,24)" fg:x="1247" fg:w="19"/><text x="2.2924%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="2.0440%" y="213" width="0.0295%" height="15" fill="rgb(247,123,22)" fg:x="1248" fg:w="18"/><text x="2.2940%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="2.0522%" y="197" width="0.0213%" height="15" fill="rgb(231,138,38)" fg:x="1253" fg:w="13"/><text x="2.3022%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="2.1112%" y="229" width="0.0197%" height="15" fill="rgb(231,145,46)" fg:x="1289" fg:w="12"/><text x="2.3612%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.05%)</title><rect x="2.0817%" y="245" width="0.0508%" height="15" fill="rgb(251,118,11)" fg:x="1271" fg:w="31"/><text x="2.3317%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="2.1407%" y="245" width="0.0213%" height="15" fill="rgb(217,147,25)" fg:x="1307" fg:w="13"/><text x="2.3907%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (115 samples, 0.19%)</title><rect x="2.1669%" y="245" width="0.1884%" height="15" fill="rgb(247,81,37)" fg:x="1323" fg:w="115"/><text x="2.4169%" y="255.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (24 samples, 0.04%)</title><rect x="2.3552%" y="245" width="0.0393%" height="15" fill="rgb(209,12,38)" fg:x="1438" fg:w="24"/><text x="2.6052%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="2.4125%" y="197" width="0.0197%" height="15" fill="rgb(227,1,9)" fg:x="1473" fg:w="12"/><text x="2.6625%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.01%)</title><rect x="2.4191%" y="181" width="0.0131%" height="15" fill="rgb(248,47,43)" fg:x="1477" fg:w="8"/><text x="2.6691%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="2.4076%" y="245" width="0.0344%" height="15" fill="rgb(221,10,30)" fg:x="1470" fg:w="21"/><text x="2.6576%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="2.4093%" y="229" width="0.0328%" height="15" fill="rgb(210,229,1)" fg:x="1471" fg:w="20"/><text x="2.6593%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="2.4109%" y="213" width="0.0311%" height="15" fill="rgb(222,148,37)" fg:x="1472" fg:w="19"/><text x="2.6609%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="2.4650%" y="245" width="0.0393%" height="15" fill="rgb(234,67,33)" fg:x="1505" fg:w="24"/><text x="2.7150%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (10 samples, 0.02%)</title><rect x="2.5043%" y="245" width="0.0164%" height="15" fill="rgb(247,98,35)" fg:x="1529" fg:w="10"/><text x="2.7543%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (66 samples, 0.11%)</title><rect x="3.8244%" y="229" width="0.1081%" height="15" fill="rgb(247,138,52)" fg:x="2335" fg:w="66"/><text x="4.0744%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.10%)</title><rect x="3.8358%" y="213" width="0.0966%" height="15" fill="rgb(213,79,30)" fg:x="2342" fg:w="59"/><text x="4.0858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (53 samples, 0.09%)</title><rect x="3.8456%" y="197" width="0.0868%" height="15" fill="rgb(246,177,23)" fg:x="2348" fg:w="53"/><text x="4.0956%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 0.08%)</title><rect x="3.8538%" y="181" width="0.0786%" height="15" fill="rgb(230,62,27)" fg:x="2353" fg:w="48"/><text x="4.1038%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="3.9341%" y="229" width="0.0180%" height="15" fill="rgb(216,154,8)" fg:x="2402" fg:w="11"/><text x="4.1841%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="3.9406%" y="213" width="0.0115%" height="15" fill="rgb(244,35,45)" fg:x="2406" fg:w="7"/><text x="4.1906%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="4.0160%" y="149" width="0.0147%" height="15" fill="rgb(251,115,12)" fg:x="2452" fg:w="9"/><text x="4.2660%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="4.0111%" y="165" width="0.0262%" height="15" fill="rgb(240,54,50)" fg:x="2449" fg:w="16"/><text x="4.2611%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.04%)</title><rect x="3.9963%" y="181" width="0.0442%" height="15" fill="rgb(233,84,52)" fg:x="2440" fg:w="27"/><text x="4.2463%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (38 samples, 0.06%)</title><rect x="3.9931%" y="197" width="0.0622%" height="15" fill="rgb(207,117,47)" fg:x="2438" fg:w="38"/><text x="4.2431%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="4.0406%" y="181" width="0.0147%" height="15" fill="rgb(249,43,39)" fg:x="2467" fg:w="9"/><text x="4.2906%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (940 samples, 1.54%)</title><rect x="2.5239%" y="245" width="1.5396%" height="15" fill="rgb(209,38,44)" fg:x="1541" fg:w="940"/><text x="2.7739%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (61 samples, 0.10%)</title><rect x="3.9636%" y="229" width="0.0999%" height="15" fill="rgb(236,212,23)" fg:x="2420" fg:w="61"/><text x="4.2136%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.09%)</title><rect x="3.9783%" y="213" width="0.0852%" height="15" fill="rgb(242,79,21)" fg:x="2429" fg:w="52"/><text x="4.2283%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.04%)</title><rect x="14.1657%" y="229" width="0.0442%" height="15" fill="rgb(211,96,35)" fg:x="8649" fg:w="27"/><text x="14.4157%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (72 samples, 0.12%)</title><rect x="14.2099%" y="229" width="0.1179%" height="15" fill="rgb(253,215,40)" fg:x="8676" fg:w="72"/><text x="14.4599%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (77 samples, 0.13%)</title><rect x="14.3344%" y="229" width="0.1261%" height="15" fill="rgb(211,81,21)" fg:x="8752" fg:w="77"/><text x="14.5844%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (95 samples, 0.16%)</title><rect x="14.4605%" y="229" width="0.1556%" height="15" fill="rgb(208,190,38)" fg:x="8829" fg:w="95"/><text x="14.7105%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,322 samples, 2.17%)</title><rect x="14.6308%" y="213" width="2.1652%" height="15" fill="rgb(235,213,38)" fg:x="8933" fg:w="1322"/><text x="14.8808%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_medium (1,332 samples, 2.18%)</title><rect x="14.6161%" y="229" width="2.1816%" height="15" fill="rgb(237,122,38)" fg:x="8924" fg:w="1332"/><text x="14.8661%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="16.7977%" y="229" width="0.0197%" height="15" fill="rgb(244,218,35)" fg:x="10256" fg:w="12"/><text x="17.0477%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="16.8173%" y="229" width="0.0180%" height="15" fill="rgb(240,68,47)" fg:x="10268" fg:w="11"/><text x="17.0673%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (80 samples, 0.13%)</title><rect x="16.8354%" y="229" width="0.1310%" height="15" fill="rgb(210,16,53)" fg:x="10279" fg:w="80"/><text x="17.0854%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (44 samples, 0.07%)</title><rect x="16.9664%" y="229" width="0.0721%" height="15" fill="rgb(235,124,12)" fg:x="10359" fg:w="44"/><text x="17.2164%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (17 samples, 0.03%)</title><rect x="17.0417%" y="229" width="0.0278%" height="15" fill="rgb(224,169,11)" fg:x="10405" fg:w="17"/><text x="17.2917%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (43 samples, 0.07%)</title><rect x="17.0794%" y="229" width="0.0704%" height="15" fill="rgb(250,166,2)" fg:x="10428" fg:w="43"/><text x="17.3294%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (57 samples, 0.09%)</title><rect x="17.1498%" y="229" width="0.0934%" height="15" fill="rgb(242,216,29)" fg:x="10471" fg:w="57"/><text x="17.3998%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (47 samples, 0.08%)</title><rect x="17.2448%" y="229" width="0.0770%" height="15" fill="rgb(230,116,27)" fg:x="10529" fg:w="47"/><text x="17.4948%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="17.3234%" y="229" width="0.0360%" height="15" fill="rgb(228,99,48)" fg:x="10577" fg:w="22"/><text x="17.5734%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (27 samples, 0.04%)</title><rect x="17.3627%" y="229" width="0.0442%" height="15" fill="rgb(253,11,6)" fg:x="10601" fg:w="27"/><text x="17.6127%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="17.6576%" y="197" width="0.0147%" height="15" fill="rgb(247,143,39)" fg:x="10781" fg:w="9"/><text x="17.9076%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="17.6592%" y="181" width="0.0131%" height="15" fill="rgb(236,97,10)" fg:x="10782" fg:w="8"/><text x="17.9092%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="17.7100%" y="165" width="0.0164%" height="15" fill="rgb(233,208,19)" fg:x="10813" fg:w="10"/><text x="17.9600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.02%)</title><rect x="17.7395%" y="149" width="0.0213%" height="15" fill="rgb(216,164,2)" fg:x="10831" fg:w="13"/><text x="17.9895%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="17.7607%" y="149" width="0.0180%" height="15" fill="rgb(220,129,5)" fg:x="10844" fg:w="11"/><text x="18.0107%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="17.7657%" y="133" width="0.0131%" height="15" fill="rgb(242,17,10)" fg:x="10847" fg:w="8"/><text x="18.0157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (11 samples, 0.02%)</title><rect x="17.7837%" y="149" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="10858" fg:w="11"/><text x="18.0337%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="17.8132%" y="133" width="0.0229%" height="15" fill="rgb(251,28,31)" fg:x="10876" fg:w="14"/><text x="18.0632%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="17.8148%" y="117" width="0.0213%" height="15" fill="rgb(233,223,10)" fg:x="10877" fg:w="13"/><text x="18.0648%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="17.8066%" y="149" width="0.0311%" height="15" fill="rgb(215,21,27)" fg:x="10872" fg:w="19"/><text x="18.0566%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (67 samples, 0.11%)</title><rect x="17.7329%" y="165" width="0.1097%" height="15" fill="rgb(232,23,21)" fg:x="10827" fg:w="67"/><text x="17.9829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (166 samples, 0.27%)</title><rect x="17.6952%" y="181" width="0.2719%" height="15" fill="rgb(244,5,23)" fg:x="10804" fg:w="166"/><text x="17.9452%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 0.12%)</title><rect x="17.8426%" y="165" width="0.1245%" height="15" fill="rgb(226,81,46)" fg:x="10894" fg:w="76"/><text x="18.0926%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (348 samples, 0.57%)</title><rect x="17.4233%" y="229" width="0.5700%" height="15" fill="rgb(247,70,30)" fg:x="10638" fg:w="348"/><text x="17.6733%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (207 samples, 0.34%)</title><rect x="17.6543%" y="213" width="0.3390%" height="15" fill="rgb(212,68,19)" fg:x="10779" fg:w="207"/><text x="17.9043%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (192 samples, 0.31%)</title><rect x="17.6789%" y="197" width="0.3145%" height="15" fill="rgb(240,187,13)" fg:x="10794" fg:w="192"/><text x="17.9289%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="17.9802%" y="181" width="0.0131%" height="15" fill="rgb(223,113,26)" fg:x="10978" fg:w="8"/><text x="18.2302%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="17.9819%" y="165" width="0.0115%" height="15" fill="rgb(206,192,2)" fg:x="10979" fg:w="7"/><text x="18.2319%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (15 samples, 0.02%)</title><rect x="18.1129%" y="213" width="0.0246%" height="15" fill="rgb(241,108,4)" fg:x="11059" fg:w="15"/><text x="18.3629%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (112 samples, 0.18%)</title><rect x="18.6157%" y="197" width="0.1834%" height="15" fill="rgb(247,173,49)" fg:x="11366" fg:w="112"/><text x="18.8657%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="18.7991%" y="197" width="0.0278%" height="15" fill="rgb(224,114,35)" fg:x="11478" fg:w="17"/><text x="19.0491%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (27 samples, 0.04%)</title><rect x="18.8270%" y="197" width="0.0442%" height="15" fill="rgb(245,159,27)" fg:x="11495" fg:w="27"/><text x="19.0770%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (88 samples, 0.14%)</title><rect x="18.8712%" y="197" width="0.1441%" height="15" fill="rgb(245,172,44)" fg:x="11522" fg:w="88"/><text x="19.1212%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (62 samples, 0.10%)</title><rect x="18.9138%" y="181" width="0.1015%" height="15" fill="rgb(236,23,11)" fg:x="11548" fg:w="62"/><text x="19.1638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (537 samples, 0.88%)</title><rect x="18.1374%" y="213" width="0.8795%" height="15" fill="rgb(205,117,38)" fg:x="11074" fg:w="537"/><text x="18.3874%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (71 samples, 0.12%)</title><rect x="19.0186%" y="197" width="0.1163%" height="15" fill="rgb(237,72,25)" fg:x="11612" fg:w="71"/><text x="19.2686%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (74 samples, 0.12%)</title><rect x="19.0170%" y="213" width="0.1212%" height="15" fill="rgb(244,70,9)" fg:x="11611" fg:w="74"/><text x="19.2670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (77 samples, 0.13%)</title><rect x="19.4068%" y="197" width="0.1261%" height="15" fill="rgb(217,125,39)" fg:x="11849" fg:w="77"/><text x="19.6568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (31 samples, 0.05%)</title><rect x="19.5329%" y="197" width="0.0508%" height="15" fill="rgb(235,36,10)" fg:x="11926" fg:w="31"/><text x="19.7829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (30 samples, 0.05%)</title><rect x="19.5837%" y="197" width="0.0491%" height="15" fill="rgb(251,123,47)" fg:x="11957" fg:w="30"/><text x="19.8337%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (517 samples, 0.85%)</title><rect x="19.1382%" y="213" width="0.8468%" height="15" fill="rgb(221,13,13)" fg:x="11685" fg:w="517"/><text x="19.3882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (215 samples, 0.35%)</title><rect x="19.6328%" y="197" width="0.3521%" height="15" fill="rgb(238,131,9)" fg:x="11987" fg:w="215"/><text x="19.8828%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (69 samples, 0.11%)</title><rect x="20.2863%" y="181" width="0.1130%" height="15" fill="rgb(211,50,8)" fg:x="12386" fg:w="69"/><text x="20.5363%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (336 samples, 0.55%)</title><rect x="19.9849%" y="213" width="0.5503%" height="15" fill="rgb(245,182,24)" fg:x="12202" fg:w="336"/><text x="20.2349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (274 samples, 0.45%)</title><rect x="20.0865%" y="197" width="0.4488%" height="15" fill="rgb(242,14,37)" fg:x="12264" fg:w="274"/><text x="20.3365%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (83 samples, 0.14%)</title><rect x="20.3993%" y="181" width="0.1359%" height="15" fill="rgb(246,228,12)" fg:x="12455" fg:w="83"/><text x="20.6493%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (30 samples, 0.05%)</title><rect x="20.5352%" y="213" width="0.0491%" height="15" fill="rgb(213,55,15)" fg:x="12538" fg:w="30"/><text x="20.7852%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (216 samples, 0.35%)</title><rect x="20.5844%" y="213" width="0.3538%" height="15" fill="rgb(209,9,3)" fg:x="12568" fg:w="216"/><text x="20.8344%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (114 samples, 0.19%)</title><rect x="20.7514%" y="197" width="0.1867%" height="15" fill="rgb(230,59,30)" fg:x="12670" fg:w="114"/><text x="21.0014%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (114 samples, 0.19%)</title><rect x="20.7514%" y="181" width="0.1867%" height="15" fill="rgb(209,121,21)" fg:x="12670" fg:w="114"/><text x="21.0014%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (44 samples, 0.07%)</title><rect x="20.9382%" y="213" width="0.0721%" height="15" fill="rgb(220,109,13)" fg:x="12784" fg:w="44"/><text x="21.1882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="21.0151%" y="213" width="0.0147%" height="15" fill="rgb(232,18,1)" fg:x="12831" fg:w="9"/><text x="21.2651%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (59 samples, 0.10%)</title><rect x="21.0299%" y="213" width="0.0966%" height="15" fill="rgb(215,41,42)" fg:x="12840" fg:w="59"/><text x="21.2799%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="21.1265%" y="213" width="0.0262%" height="15" fill="rgb(224,123,36)" fg:x="12899" fg:w="16"/><text x="21.3765%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.03%)</title><rect x="21.1527%" y="213" width="0.0328%" height="15" fill="rgb(240,125,3)" fg:x="12915" fg:w="20"/><text x="21.4027%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="21.1855%" y="213" width="0.0115%" height="15" fill="rgb(205,98,50)" fg:x="12935" fg:w="7"/><text x="21.4355%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (52 samples, 0.09%)</title><rect x="21.3591%" y="181" width="0.0852%" height="15" fill="rgb(205,185,37)" fg:x="13041" fg:w="52"/><text x="21.6091%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (137 samples, 0.22%)</title><rect x="21.2248%" y="197" width="0.2244%" height="15" fill="rgb(238,207,15)" fg:x="12959" fg:w="137"/><text x="21.4748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="21.4508%" y="197" width="0.0147%" height="15" fill="rgb(213,199,42)" fg:x="13097" fg:w="9"/><text x="21.7008%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (95 samples, 0.16%)</title><rect x="21.4655%" y="197" width="0.1556%" height="15" fill="rgb(235,201,11)" fg:x="13106" fg:w="95"/><text x="21.7155%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (11 samples, 0.02%)</title><rect x="21.6031%" y="181" width="0.0180%" height="15" fill="rgb(207,46,11)" fg:x="13190" fg:w="11"/><text x="21.8531%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="21.6031%" y="165" width="0.0180%" height="15" fill="rgb(241,35,35)" fg:x="13190" fg:w="11"/><text x="21.8531%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,218 samples, 3.63%)</title><rect x="17.9999%" y="229" width="3.6327%" height="15" fill="rgb(243,32,47)" fg:x="10990" fg:w="2218"/><text x="18.2499%" y="239.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (264 samples, 0.43%)</title><rect x="21.2002%" y="213" width="0.4324%" height="15" fill="rgb(247,202,23)" fg:x="12944" fg:w="264"/><text x="21.4502%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="21.6211%" y="197" width="0.0115%" height="15" fill="rgb(219,102,11)" fg:x="13201" fg:w="7"/><text x="21.8711%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (252 samples, 0.41%)</title><rect x="21.6326%" y="229" width="0.4127%" height="15" fill="rgb(243,110,44)" fg:x="13208" fg:w="252"/><text x="21.8826%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (209 samples, 0.34%)</title><rect x="21.7030%" y="213" width="0.3423%" height="15" fill="rgb(222,74,54)" fg:x="13251" fg:w="209"/><text x="21.9530%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (132 samples, 0.22%)</title><rect x="21.8291%" y="197" width="0.2162%" height="15" fill="rgb(216,99,12)" fg:x="13328" fg:w="132"/><text x="22.0791%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (75 samples, 0.12%)</title><rect x="21.9225%" y="181" width="0.1228%" height="15" fill="rgb(226,22,26)" fg:x="13385" fg:w="75"/><text x="22.1725%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (12 samples, 0.02%)</title><rect x="22.0257%" y="165" width="0.0197%" height="15" fill="rgb(217,163,10)" fg:x="13448" fg:w="12"/><text x="22.2757%" y="175.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (32 samples, 0.05%)</title><rect x="22.5891%" y="213" width="0.0524%" height="15" fill="rgb(213,25,53)" fg:x="13792" fg:w="32"/><text x="22.8391%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (77 samples, 0.13%)</title><rect x="22.6448%" y="213" width="0.1261%" height="15" fill="rgb(252,105,26)" fg:x="13826" fg:w="77"/><text x="22.8948%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="22.9855%" y="181" width="0.0131%" height="15" fill="rgb(220,39,43)" fg:x="14034" fg:w="8"/><text x="23.2355%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (47 samples, 0.08%)</title><rect x="22.9986%" y="181" width="0.0770%" height="15" fill="rgb(229,68,48)" fg:x="14042" fg:w="47"/><text x="23.2486%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (336 samples, 0.55%)</title><rect x="22.7709%" y="213" width="0.5503%" height="15" fill="rgb(252,8,32)" fg:x="13903" fg:w="336"/><text x="23.0209%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (291 samples, 0.48%)</title><rect x="22.8446%" y="197" width="0.4766%" height="15" fill="rgb(223,20,43)" fg:x="13948" fg:w="291"/><text x="23.0946%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (150 samples, 0.25%)</title><rect x="23.0755%" y="181" width="0.2457%" height="15" fill="rgb(229,81,49)" fg:x="14089" fg:w="150"/><text x="23.3255%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (780 samples, 1.28%)</title><rect x="22.0470%" y="229" width="1.2775%" height="15" fill="rgb(236,28,36)" fg:x="13461" fg:w="780"/><text x="22.2970%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,512 samples, 2.48%)</title><rect x="23.3245%" y="229" width="2.4764%" height="15" fill="rgb(249,185,26)" fg:x="14241" fg:w="1512"/><text x="23.5745%" y="239.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (38 samples, 0.06%)</title><rect x="25.8009%" y="229" width="0.0622%" height="15" fill="rgb(249,174,33)" fg:x="15753" fg:w="38"/><text x="26.0509%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (119 samples, 0.19%)</title><rect x="26.0220%" y="213" width="0.1949%" height="15" fill="rgb(233,201,37)" fg:x="15888" fg:w="119"/><text x="26.2720%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="26.3922%" y="197" width="0.0147%" height="15" fill="rgb(221,78,26)" fg:x="16114" fg:w="9"/><text x="26.6422%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="26.3938%" y="181" width="0.0131%" height="15" fill="rgb(250,127,30)" fg:x="16115" fg:w="8"/><text x="26.6438%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (196 samples, 0.32%)</title><rect x="26.4085%" y="197" width="0.3210%" height="15" fill="rgb(230,49,44)" fg:x="16124" fg:w="196"/><text x="26.6585%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (723 samples, 1.18%)</title><rect x="25.8631%" y="229" width="1.1842%" height="15" fill="rgb(229,67,23)" fg:x="15791" fg:w="723"/><text x="26.1131%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (507 samples, 0.83%)</title><rect x="26.2169%" y="213" width="0.8304%" height="15" fill="rgb(249,83,47)" fg:x="16007" fg:w="507"/><text x="26.4669%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (194 samples, 0.32%)</title><rect x="26.7296%" y="197" width="0.3177%" height="15" fill="rgb(215,43,3)" fg:x="16320" fg:w="194"/><text x="26.9796%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (60 samples, 0.10%)</title><rect x="27.0473%" y="229" width="0.0983%" height="15" fill="rgb(238,154,13)" fg:x="16514" fg:w="60"/><text x="27.2973%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="27.1472%" y="229" width="0.0311%" height="15" fill="rgb(219,56,2)" fg:x="16575" fg:w="19"/><text x="27.3972%" y="239.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (161 samples, 0.26%)</title><rect x="27.1783%" y="229" width="0.2637%" height="15" fill="rgb(233,0,4)" fg:x="16594" fg:w="161"/><text x="27.4283%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,989 samples, 6.53%)</title><rect x="31.8494%" y="213" width="6.5333%" height="15" fill="rgb(235,30,7)" fg:x="19446" fg:w="3989"/><text x="32.0994%" y="223.50">rust_qecp..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.04%)</title><rect x="38.3893%" y="165" width="0.0393%" height="15" fill="rgb(250,79,13)" fg:x="23439" fg:w="24"/><text x="38.6393%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="38.4025%" y="149" width="0.0262%" height="15" fill="rgb(211,146,34)" fg:x="23447" fg:w="16"/><text x="38.6525%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.05%)</title><rect x="38.3828%" y="213" width="0.0475%" height="15" fill="rgb(228,22,38)" fg:x="23435" fg:w="29"/><text x="38.6328%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (27 samples, 0.04%)</title><rect x="38.3861%" y="197" width="0.0442%" height="15" fill="rgb(235,168,5)" fg:x="23437" fg:w="27"/><text x="38.6361%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.04%)</title><rect x="38.3893%" y="181" width="0.0409%" height="15" fill="rgb(221,155,16)" fg:x="23439" fg:w="25"/><text x="38.6393%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,673 samples, 4.38%)</title><rect x="38.4303%" y="213" width="4.3779%" height="15" fill="rgb(215,215,53)" fg:x="23464" fg:w="2673"/><text x="38.6803%" y="223.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (595 samples, 0.97%)</title><rect x="42.8082%" y="213" width="0.9745%" height="15" fill="rgb(223,4,10)" fg:x="26137" fg:w="595"/><text x="43.0582%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (46 samples, 0.08%)</title><rect x="43.8499%" y="197" width="0.0753%" height="15" fill="rgb(234,103,6)" fg:x="26773" fg:w="46"/><text x="44.0999%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (44 samples, 0.07%)</title><rect x="43.8532%" y="181" width="0.0721%" height="15" fill="rgb(227,97,0)" fg:x="26775" fg:w="44"/><text x="44.1032%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="43.9367%" y="197" width="0.0115%" height="15" fill="rgb(234,150,53)" fg:x="26826" fg:w="7"/><text x="44.1867%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (149 samples, 0.24%)</title><rect x="43.9498%" y="197" width="0.2440%" height="15" fill="rgb(228,201,54)" fg:x="26834" fg:w="149"/><text x="44.1998%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="44.3675%" y="181" width="0.0164%" height="15" fill="rgb(222,22,37)" fg:x="27089" fg:w="10"/><text x="44.6175%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="44.3691%" y="165" width="0.0147%" height="15" fill="rgb(237,53,32)" fg:x="27090" fg:w="9"/><text x="44.6191%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (234 samples, 0.38%)</title><rect x="44.3838%" y="181" width="0.3833%" height="15" fill="rgb(233,25,53)" fg:x="27099" fg:w="234"/><text x="44.6338%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (766 samples, 1.25%)</title><rect x="43.7828%" y="213" width="1.2546%" height="15" fill="rgb(210,40,34)" fg:x="26732" fg:w="766"/><text x="44.0328%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (515 samples, 0.84%)</title><rect x="44.1939%" y="197" width="0.8435%" height="15" fill="rgb(241,220,44)" fg:x="26983" fg:w="515"/><text x="44.4439%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (165 samples, 0.27%)</title><rect x="44.7671%" y="181" width="0.2702%" height="15" fill="rgb(235,28,35)" fg:x="27333" fg:w="165"/><text x="45.0171%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.01%)</title><rect x="49.5365%" y="133" width="0.0131%" height="15" fill="rgb(210,56,17)" fg:x="30245" fg:w="8"/><text x="49.7865%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="49.5332%" y="149" width="0.0360%" height="15" fill="rgb(224,130,29)" fg:x="30243" fg:w="22"/><text x="49.7832%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="49.5496%" y="133" width="0.0197%" height="15" fill="rgb(235,212,8)" fg:x="30253" fg:w="12"/><text x="49.7996%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,516 samples, 22.14%)</title><rect x="27.4420%" y="229" width="22.1371%" height="15" fill="rgb(223,33,50)" fg:x="16755" fg:w="13516"/><text x="27.6920%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarC..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,772 samples, 4.54%)</title><rect x="45.0390%" y="213" width="4.5401%" height="15" fill="rgb(219,149,13)" fg:x="27499" fg:w="2772"/><text x="45.2890%" y="223.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (33 samples, 0.05%)</title><rect x="49.5250%" y="197" width="0.0540%" height="15" fill="rgb(250,156,29)" fg:x="30238" fg:w="33"/><text x="49.7750%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="49.5267%" y="181" width="0.0524%" height="15" fill="rgb(216,193,19)" fg:x="30239" fg:w="32"/><text x="49.7767%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="49.5299%" y="165" width="0.0491%" height="15" fill="rgb(216,135,14)" fg:x="30241" fg:w="30"/><text x="49.7799%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (10 samples, 0.02%)</title><rect x="49.5791%" y="229" width="0.0164%" height="15" fill="rgb(241,47,5)" fg:x="30271" fg:w="10"/><text x="49.8291%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="51.7296%" y="149" width="0.0147%" height="15" fill="rgb(233,42,35)" fg:x="31584" fg:w="9"/><text x="51.9796%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 0.07%)</title><rect x="51.6821%" y="213" width="0.0672%" height="15" fill="rgb(231,13,6)" fg:x="31555" fg:w="41"/><text x="51.9321%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.02%)</title><rect x="51.7279%" y="197" width="0.0213%" height="15" fill="rgb(207,181,40)" fg:x="31583" fg:w="13"/><text x="51.9779%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="51.7296%" y="181" width="0.0197%" height="15" fill="rgb(254,173,49)" fg:x="31584" fg:w="12"/><text x="51.9796%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="51.7296%" y="165" width="0.0197%" height="15" fill="rgb(221,1,38)" fg:x="31584" fg:w="12"/><text x="51.9796%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.05%)</title><rect x="51.7525%" y="197" width="0.0475%" height="15" fill="rgb(206,124,46)" fg:x="31598" fg:w="29"/><text x="52.0025%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="51.8000%" y="197" width="0.0246%" height="15" fill="rgb(249,21,11)" fg:x="31627" fg:w="15"/><text x="52.0500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (20 samples, 0.03%)</title><rect x="51.8246%" y="197" width="0.0328%" height="15" fill="rgb(222,201,40)" fg:x="31642" fg:w="20"/><text x="52.0746%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="51.8573%" y="197" width="0.0328%" height="15" fill="rgb(235,61,29)" fg:x="31662" fg:w="20"/><text x="52.1073%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.03%)</title><rect x="51.8901%" y="197" width="0.0295%" height="15" fill="rgb(219,207,3)" fg:x="31682" fg:w="18"/><text x="52.1401%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="51.9195%" y="197" width="0.0213%" height="15" fill="rgb(222,56,46)" fg:x="31700" fg:w="13"/><text x="52.1695%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="52.2013%" y="165" width="0.0213%" height="15" fill="rgb(239,76,54)" fg:x="31872" fg:w="13"/><text x="52.4513%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (64 samples, 0.10%)</title><rect x="52.5337%" y="133" width="0.1048%" height="15" fill="rgb(231,124,27)" fg:x="32075" fg:w="64"/><text x="52.7837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (210 samples, 0.34%)</title><rect x="52.2995%" y="149" width="0.3439%" height="15" fill="rgb(249,195,6)" fg:x="31932" fg:w="210"/><text x="52.5495%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (413 samples, 0.68%)</title><rect x="51.9998%" y="181" width="0.6764%" height="15" fill="rgb(237,174,47)" fg:x="31749" fg:w="413"/><text x="52.2498%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (277 samples, 0.45%)</title><rect x="52.2225%" y="165" width="0.4537%" height="15" fill="rgb(206,201,31)" fg:x="31885" fg:w="277"/><text x="52.4725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="52.6435%" y="149" width="0.0328%" height="15" fill="rgb(231,57,52)" fg:x="32142" fg:w="20"/><text x="52.8935%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.05%)</title><rect x="52.6762%" y="181" width="0.0540%" height="15" fill="rgb(248,177,22)" fg:x="32162" fg:w="33"/><text x="52.9262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (161 samples, 0.26%)</title><rect x="52.7303%" y="181" width="0.2637%" height="15" fill="rgb(215,211,37)" fg:x="32195" fg:w="161"/><text x="52.9803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (70 samples, 0.11%)</title><rect x="52.8793%" y="165" width="0.1146%" height="15" fill="rgb(241,128,51)" fg:x="32286" fg:w="70"/><text x="53.1293%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.03%)</title><rect x="52.9940%" y="181" width="0.0278%" height="15" fill="rgb(227,165,31)" fg:x="32356" fg:w="17"/><text x="53.2440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (51 samples, 0.08%)</title><rect x="53.0218%" y="181" width="0.0835%" height="15" fill="rgb(228,167,24)" fg:x="32373" fg:w="51"/><text x="53.2718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="53.1053%" y="181" width="0.0131%" height="15" fill="rgb(228,143,12)" fg:x="32424" fg:w="8"/><text x="53.3553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="53.1184%" y="181" width="0.0278%" height="15" fill="rgb(249,149,8)" fg:x="32432" fg:w="17"/><text x="53.3684%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (391 samples, 0.64%)</title><rect x="53.1938%" y="165" width="0.6404%" height="15" fill="rgb(243,35,44)" fg:x="32478" fg:w="391"/><text x="53.4438%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="53.8342%" y="165" width="0.0246%" height="15" fill="rgb(246,89,9)" fg:x="32869" fg:w="15"/><text x="54.0842%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="53.8588%" y="165" width="0.0131%" height="15" fill="rgb(233,213,13)" fg:x="32884" fg:w="8"/><text x="54.1088%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (52 samples, 0.09%)</title><rect x="53.9210%" y="149" width="0.0852%" height="15" fill="rgb(233,141,41)" fg:x="32922" fg:w="52"/><text x="54.1710%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (89 samples, 0.15%)</title><rect x="54.0062%" y="149" width="0.1458%" height="15" fill="rgb(239,167,4)" fg:x="32974" fg:w="89"/><text x="54.2562%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (186 samples, 0.30%)</title><rect x="53.8784%" y="165" width="0.3046%" height="15" fill="rgb(209,217,16)" fg:x="32896" fg:w="186"/><text x="54.1284%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="54.1519%" y="149" width="0.0311%" height="15" fill="rgb(219,88,35)" fg:x="33063" fg:w="19"/><text x="54.4019%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="54.1847%" y="165" width="0.0246%" height="15" fill="rgb(220,193,23)" fg:x="33083" fg:w="15"/><text x="54.4347%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.06%)</title><rect x="54.6531%" y="101" width="0.0606%" height="15" fill="rgb(230,90,52)" fg:x="33369" fg:w="37"/><text x="54.9031%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (161 samples, 0.26%)</title><rect x="54.4762%" y="117" width="0.2637%" height="15" fill="rgb(252,106,19)" fg:x="33261" fg:w="161"/><text x="54.7262%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.03%)</title><rect x="54.7137%" y="101" width="0.0262%" height="15" fill="rgb(206,74,20)" fg:x="33406" fg:w="16"/><text x="54.9637%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (253 samples, 0.41%)</title><rect x="54.3337%" y="149" width="0.4144%" height="15" fill="rgb(230,138,44)" fg:x="33174" fg:w="253"/><text x="54.5837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (186 samples, 0.30%)</title><rect x="54.4435%" y="133" width="0.3046%" height="15" fill="rgb(235,182,43)" fg:x="33241" fg:w="186"/><text x="54.6935%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="54.7481%" y="149" width="0.0360%" height="15" fill="rgb(242,16,51)" fg:x="33427" fg:w="22"/><text x="54.9981%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,005 samples, 1.65%)</title><rect x="53.1463%" y="181" width="1.6460%" height="15" fill="rgb(248,9,4)" fg:x="32449" fg:w="1005"/><text x="53.3963%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (356 samples, 0.58%)</title><rect x="54.2093%" y="165" width="0.5831%" height="15" fill="rgb(210,31,22)" fg:x="33098" fg:w="356"/><text x="54.4593%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.06%)</title><rect x="54.9627%" y="165" width="0.0639%" height="15" fill="rgb(239,54,39)" fg:x="33558" fg:w="39"/><text x="55.2127%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (86 samples, 0.14%)</title><rect x="55.0265%" y="165" width="0.1409%" height="15" fill="rgb(230,99,41)" fg:x="33597" fg:w="86"/><text x="55.2765%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (288 samples, 0.47%)</title><rect x="54.7923%" y="181" width="0.4717%" height="15" fill="rgb(253,106,12)" fg:x="33454" fg:w="288"/><text x="55.0423%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (59 samples, 0.10%)</title><rect x="55.1674%" y="165" width="0.0966%" height="15" fill="rgb(213,46,41)" fg:x="33683" fg:w="59"/><text x="55.4174%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="55.2640%" y="181" width="0.0229%" height="15" fill="rgb(215,133,35)" fg:x="33742" fg:w="14"/><text x="55.5140%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,056 samples, 3.37%)</title><rect x="51.9474%" y="197" width="3.3674%" height="15" fill="rgb(213,28,5)" fg:x="31717" fg:w="2056"/><text x="52.1974%" y="207.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="55.2869%" y="181" width="0.0278%" height="15" fill="rgb(215,77,49)" fg:x="33756" fg:w="17"/><text x="55.5369%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.02%)</title><rect x="55.3148%" y="197" width="0.0180%" height="15" fill="rgb(248,100,22)" fg:x="33773" fg:w="11"/><text x="55.5648%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (12 samples, 0.02%)</title><rect x="55.3328%" y="197" width="0.0197%" height="15" fill="rgb(208,67,9)" fg:x="33784" fg:w="12"/><text x="55.5828%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (25 samples, 0.04%)</title><rect x="55.3525%" y="197" width="0.0409%" height="15" fill="rgb(219,133,21)" fg:x="33796" fg:w="25"/><text x="55.6025%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="55.3934%" y="197" width="0.0278%" height="15" fill="rgb(246,46,29)" fg:x="33821" fg:w="17"/><text x="55.6434%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.02%)</title><rect x="55.4213%" y="197" width="0.0180%" height="15" fill="rgb(246,185,52)" fg:x="33838" fg:w="11"/><text x="55.6713%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,257 samples, 3.70%)</title><rect x="51.7525%" y="213" width="3.6966%" height="15" fill="rgb(252,136,11)" fg:x="31598" fg:w="2257"/><text x="52.0025%" y="223.50">rust..</text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.05%)</title><rect x="55.6702%" y="197" width="0.0459%" height="15" fill="rgb(219,138,53)" fg:x="33990" fg:w="28"/><text x="55.9202%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="55.7161%" y="197" width="0.0213%" height="15" fill="rgb(211,51,23)" fg:x="34018" fg:w="13"/><text x="55.9661%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (30 samples, 0.05%)</title><rect x="55.7374%" y="197" width="0.0491%" height="15" fill="rgb(247,221,28)" fg:x="34031" fg:w="30"/><text x="55.9874%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="55.7865%" y="197" width="0.0147%" height="15" fill="rgb(251,222,45)" fg:x="34061" fg:w="9"/><text x="56.0365%" y="207.50"></text></g><g><title>rust_qecp`__rdl_realloc (14 samples, 0.02%)</title><rect x="55.8012%" y="197" width="0.0229%" height="15" fill="rgb(217,162,53)" fg:x="34070" fg:w="14"/><text x="56.0512%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (103 samples, 0.17%)</title><rect x="56.0698%" y="149" width="0.1687%" height="15" fill="rgb(229,93,14)" fg:x="34234" fg:w="103"/><text x="56.3198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (26 samples, 0.04%)</title><rect x="56.1960%" y="133" width="0.0426%" height="15" fill="rgb(209,67,49)" fg:x="34311" fg:w="26"/><text x="56.4460%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (220 samples, 0.36%)</title><rect x="55.8979%" y="181" width="0.3603%" height="15" fill="rgb(213,87,29)" fg:x="34129" fg:w="220"/><text x="56.1479%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (151 samples, 0.25%)</title><rect x="56.0109%" y="165" width="0.2473%" height="15" fill="rgb(205,151,52)" fg:x="34198" fg:w="151"/><text x="56.2609%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="56.2385%" y="149" width="0.0197%" height="15" fill="rgb(253,215,39)" fg:x="34337" fg:w="12"/><text x="56.4885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.02%)</title><rect x="56.2582%" y="181" width="0.0229%" height="15" fill="rgb(221,220,41)" fg:x="34349" fg:w="14"/><text x="56.5082%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="56.2811%" y="181" width="0.0262%" height="15" fill="rgb(218,133,21)" fg:x="34363" fg:w="16"/><text x="56.5311%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="56.3122%" y="181" width="0.0262%" height="15" fill="rgb(221,193,43)" fg:x="34382" fg:w="16"/><text x="56.5622%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (38 samples, 0.06%)</title><rect x="56.5612%" y="165" width="0.0622%" height="15" fill="rgb(240,128,52)" fg:x="34534" fg:w="38"/><text x="56.8112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (13 samples, 0.02%)</title><rect x="56.7610%" y="149" width="0.0213%" height="15" fill="rgb(253,114,12)" fg:x="34656" fg:w="13"/><text x="57.0110%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (22 samples, 0.04%)</title><rect x="56.7823%" y="149" width="0.0360%" height="15" fill="rgb(215,223,47)" fg:x="34669" fg:w="22"/><text x="57.0323%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.05%)</title><rect x="56.8183%" y="149" width="0.0491%" height="15" fill="rgb(248,225,23)" fg:x="34691" fg:w="30"/><text x="57.0683%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (284 samples, 0.47%)</title><rect x="56.8675%" y="149" width="0.4651%" height="15" fill="rgb(250,108,0)" fg:x="34721" fg:w="284"/><text x="57.1175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="57.5095%" y="133" width="0.0131%" height="15" fill="rgb(228,208,7)" fg:x="35113" fg:w="8"/><text x="57.7595%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (30 samples, 0.05%)</title><rect x="57.5226%" y="133" width="0.0491%" height="15" fill="rgb(244,45,10)" fg:x="35121" fg:w="30"/><text x="57.7726%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (120 samples, 0.20%)</title><rect x="57.5717%" y="133" width="0.1965%" height="15" fill="rgb(207,125,25)" fg:x="35151" fg:w="120"/><text x="57.8217%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (51 samples, 0.08%)</title><rect x="58.0156%" y="101" width="0.0835%" height="15" fill="rgb(210,195,18)" fg:x="35422" fg:w="51"/><text x="58.2656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (184 samples, 0.30%)</title><rect x="57.8240%" y="117" width="0.3014%" height="15" fill="rgb(249,80,12)" fg:x="35305" fg:w="184"/><text x="58.0740%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.03%)</title><rect x="58.0991%" y="101" width="0.0262%" height="15" fill="rgb(221,65,9)" fg:x="35473" fg:w="16"/><text x="58.3491%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (230 samples, 0.38%)</title><rect x="57.7683%" y="133" width="0.3767%" height="15" fill="rgb(235,49,36)" fg:x="35271" fg:w="230"/><text x="58.0183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="58.1253%" y="117" width="0.0197%" height="15" fill="rgb(225,32,20)" fg:x="35489" fg:w="12"/><text x="58.3753%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (105 samples, 0.17%)</title><rect x="58.1450%" y="133" width="0.1720%" height="15" fill="rgb(215,141,46)" fg:x="35501" fg:w="105"/><text x="58.3950%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 0.07%)</title><rect x="58.4463%" y="101" width="0.0672%" height="15" fill="rgb(250,160,47)" fg:x="35685" fg:w="41"/><text x="58.6963%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (215 samples, 0.35%)</title><rect x="58.3170%" y="133" width="0.3521%" height="15" fill="rgb(216,222,40)" fg:x="35606" fg:w="215"/><text x="58.5670%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (200 samples, 0.33%)</title><rect x="58.3415%" y="117" width="0.3276%" height="15" fill="rgb(234,217,39)" fg:x="35621" fg:w="200"/><text x="58.5915%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (95 samples, 0.16%)</title><rect x="58.5135%" y="101" width="0.1556%" height="15" fill="rgb(207,178,40)" fg:x="35726" fg:w="95"/><text x="58.7635%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (826 samples, 1.35%)</title><rect x="57.3326%" y="149" width="1.3529%" height="15" fill="rgb(221,136,13)" fg:x="35005" fg:w="826"/><text x="57.5826%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="58.6691%" y="133" width="0.0164%" height="15" fill="rgb(249,199,10)" fg:x="35821" fg:w="10"/><text x="58.9191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,335 samples, 2.19%)</title><rect x="56.6234%" y="165" width="2.1865%" height="15" fill="rgb(249,222,13)" fg:x="34572" fg:w="1335"/><text x="56.8734%" y="175.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.11%)</title><rect x="58.6953%" y="149" width="0.1146%" height="15" fill="rgb(244,185,38)" fg:x="35837" fg:w="70"/><text x="58.9453%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (135 samples, 0.22%)</title><rect x="58.8099%" y="165" width="0.2211%" height="15" fill="rgb(236,202,9)" fg:x="35907" fg:w="135"/><text x="59.0599%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.05%)</title><rect x="59.0311%" y="165" width="0.0540%" height="15" fill="rgb(250,229,37)" fg:x="36042" fg:w="33"/><text x="59.2811%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,694 samples, 2.77%)</title><rect x="56.3384%" y="181" width="2.7745%" height="15" fill="rgb(206,174,23)" fg:x="34398" fg:w="1694"/><text x="56.5884%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="59.0851%" y="165" width="0.0278%" height="15" fill="rgb(211,33,43)" fg:x="36075" fg:w="17"/><text x="59.3351%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,241 samples, 3.67%)</title><rect x="55.4573%" y="213" width="3.6704%" height="15" fill="rgb(245,58,50)" fg:x="33860" fg:w="2241"/><text x="55.7073%" y="223.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,015 samples, 3.30%)</title><rect x="55.8274%" y="197" width="3.3002%" height="15" fill="rgb(244,68,36)" fg:x="34086" fg:w="2015"/><text x="56.0774%" y="207.50">rus..</text></g><g><title>rust_qecp`__rdl_realloc (9 samples, 0.01%)</title><rect x="59.1129%" y="181" width="0.0147%" height="15" fill="rgb(232,229,15)" fg:x="36092" fg:w="9"/><text x="59.3629%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (65 samples, 0.11%)</title><rect x="59.1277%" y="213" width="0.1065%" height="15" fill="rgb(254,30,23)" fg:x="36101" fg:w="65"/><text x="59.3777%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (211 samples, 0.35%)</title><rect x="59.2341%" y="197" width="0.3456%" height="15" fill="rgb(235,160,14)" fg:x="36166" fg:w="211"/><text x="59.4841%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="59.5846%" y="197" width="0.0295%" height="15" fill="rgb(212,155,44)" fg:x="36380" fg:w="18"/><text x="59.8346%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.03%)</title><rect x="59.5879%" y="181" width="0.0262%" height="15" fill="rgb(226,2,50)" fg:x="36382" fg:w="16"/><text x="59.8379%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.03%)</title><rect x="60.0514%" y="181" width="0.0295%" height="15" fill="rgb(234,177,6)" fg:x="36665" fg:w="18"/><text x="60.3014%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="60.0809%" y="181" width="0.0197%" height="15" fill="rgb(217,24,9)" fg:x="36683" fg:w="12"/><text x="60.3309%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="60.5117%" y="149" width="0.0213%" height="15" fill="rgb(220,13,46)" fg:x="36946" fg:w="13"/><text x="60.7617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.04%)</title><rect x="60.5330%" y="149" width="0.0360%" height="15" fill="rgb(239,221,27)" fg:x="36959" fg:w="22"/><text x="60.7830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="60.6148%" y="133" width="0.0147%" height="15" fill="rgb(222,198,25)" fg:x="37009" fg:w="9"/><text x="60.8648%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (124 samples, 0.20%)</title><rect x="60.8229%" y="117" width="0.2031%" height="15" fill="rgb(211,99,13)" fg:x="37136" fg:w="124"/><text x="61.0729%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (532 samples, 0.87%)</title><rect x="61.1602%" y="101" width="0.8713%" height="15" fill="rgb(232,111,31)" fg:x="37342" fg:w="532"/><text x="61.4102%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (41 samples, 0.07%)</title><rect x="62.0316%" y="101" width="0.0672%" height="15" fill="rgb(245,82,37)" fg:x="37874" fg:w="41"/><text x="62.2816%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,295 samples, 2.12%)</title><rect x="60.2562%" y="165" width="2.1210%" height="15" fill="rgb(227,149,46)" fg:x="36790" fg:w="1295"/><text x="60.5062%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,104 samples, 1.81%)</title><rect x="60.5690%" y="149" width="1.8082%" height="15" fill="rgb(218,36,50)" fg:x="36981" fg:w="1104"/><text x="60.8190%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,067 samples, 1.75%)</title><rect x="60.6296%" y="133" width="1.7476%" height="15" fill="rgb(226,80,48)" fg:x="37018" fg:w="1067"/><text x="60.8796%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (824 samples, 1.35%)</title><rect x="61.0276%" y="117" width="1.3496%" height="15" fill="rgb(238,224,15)" fg:x="37261" fg:w="824"/><text x="61.2776%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (170 samples, 0.28%)</title><rect x="62.0987%" y="101" width="0.2784%" height="15" fill="rgb(241,136,10)" fg:x="37915" fg:w="170"/><text x="62.3487%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (121 samples, 0.20%)</title><rect x="62.3772%" y="165" width="0.1982%" height="15" fill="rgb(208,32,45)" fg:x="38085" fg:w="121"/><text x="62.6272%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (270 samples, 0.44%)</title><rect x="62.5753%" y="165" width="0.4422%" height="15" fill="rgb(207,135,9)" fg:x="38206" fg:w="270"/><text x="62.8253%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,094 samples, 3.43%)</title><rect x="59.6158%" y="197" width="3.4296%" height="15" fill="rgb(206,86,44)" fg:x="36399" fg:w="2094"/><text x="59.8658%" y="207.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,793 samples, 2.94%)</title><rect x="60.1088%" y="181" width="2.9366%" height="15" fill="rgb(245,177,15)" fg:x="36700" fg:w="1793"/><text x="60.3588%" y="191.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="63.0176%" y="165" width="0.0278%" height="15" fill="rgb(206,64,50)" fg:x="38476" fg:w="17"/><text x="63.2676%" y="175.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,355 samples, 3.86%)</title><rect x="59.2341%" y="213" width="3.8571%" height="15" fill="rgb(234,36,40)" fg:x="36166" fg:w="2355"/><text x="59.4841%" y="223.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (28 samples, 0.05%)</title><rect x="63.0454%" y="197" width="0.0459%" height="15" fill="rgb(213,64,8)" fg:x="38493" fg:w="28"/><text x="63.2954%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="63.4827%" y="197" width="0.0147%" height="15" fill="rgb(210,75,36)" fg:x="38760" fg:w="9"/><text x="63.7327%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (52 samples, 0.09%)</title><rect x="64.0412%" y="181" width="0.0852%" height="15" fill="rgb(229,88,21)" fg:x="39101" fg:w="52"/><text x="64.2912%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (35 samples, 0.06%)</title><rect x="64.7029%" y="165" width="0.0573%" height="15" fill="rgb(252,204,47)" fg:x="39505" fg:w="35"/><text x="64.9529%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (40 samples, 0.07%)</title><rect x="65.2761%" y="149" width="0.0655%" height="15" fill="rgb(208,77,27)" fg:x="39855" fg:w="40"/><text x="65.5261%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (25 samples, 0.04%)</title><rect x="65.7331%" y="133" width="0.0409%" height="15" fill="rgb(221,76,26)" fg:x="40134" fg:w="25"/><text x="65.9831%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (19 samples, 0.03%)</title><rect x="65.9820%" y="117" width="0.0311%" height="15" fill="rgb(225,139,18)" fg:x="40286" fg:w="19"/><text x="66.2320%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (7 samples, 0.01%)</title><rect x="66.0918%" y="101" width="0.0115%" height="15" fill="rgb(230,137,11)" fg:x="40353" fg:w="7"/><text x="66.3418%" y="111.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,854 samples, 3.04%)</title><rect x="63.0913%" y="213" width="3.0366%" height="15" fill="rgb(212,28,1)" fg:x="38521" fg:w="1854"/><text x="63.3413%" y="223.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,606 samples, 2.63%)</title><rect x="63.4974%" y="197" width="2.6304%" height="15" fill="rgb(248,164,17)" fg:x="38769" fg:w="1606"/><text x="63.7474%" y="207.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,222 samples, 2.00%)</title><rect x="64.1264%" y="181" width="2.0014%" height="15" fill="rgb(222,171,42)" fg:x="39153" fg:w="1222"/><text x="64.3764%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (835 samples, 1.37%)</title><rect x="64.7602%" y="165" width="1.3676%" height="15" fill="rgb(243,84,45)" fg:x="39540" fg:w="835"/><text x="65.0102%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (480 samples, 0.79%)</title><rect x="65.3417%" y="149" width="0.7862%" height="15" fill="rgb(252,49,23)" fg:x="39895" fg:w="480"/><text x="65.5917%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (216 samples, 0.35%)</title><rect x="65.7740%" y="133" width="0.3538%" height="15" fill="rgb(215,19,7)" fg:x="40159" fg:w="216"/><text x="66.0240%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (70 samples, 0.11%)</title><rect x="66.0132%" y="117" width="0.1146%" height="15" fill="rgb(238,81,41)" fg:x="40305" fg:w="70"/><text x="66.2632%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="66.1032%" y="101" width="0.0246%" height="15" fill="rgb(210,199,37)" fg:x="40360" fg:w="15"/><text x="66.3532%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (520 samples, 0.85%)</title><rect x="67.4921%" y="197" width="0.8517%" height="15" fill="rgb(244,192,49)" fg:x="41208" fg:w="520"/><text x="67.7421%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,127 samples, 1.85%)</title><rect x="68.3438%" y="197" width="1.8458%" height="15" fill="rgb(226,211,11)" fg:x="41728" fg:w="1127"/><text x="68.5938%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,408 samples, 5.58%)</title><rect x="66.1278%" y="213" width="5.5818%" height="15" fill="rgb(236,162,54)" fg:x="40375" fg:w="3408"/><text x="66.3778%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (928 samples, 1.52%)</title><rect x="70.1897%" y="197" width="1.5199%" height="15" fill="rgb(220,229,9)" fg:x="42855" fg:w="928"/><text x="70.4397%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (75 samples, 0.12%)</title><rect x="71.7096%" y="213" width="0.1228%" height="15" fill="rgb(250,87,22)" fg:x="43783" fg:w="75"/><text x="71.9596%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (407 samples, 0.67%)</title><rect x="71.8324%" y="213" width="0.6666%" height="15" fill="rgb(239,43,17)" fg:x="43858" fg:w="407"/><text x="72.0824%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (13,984 samples, 22.90%)</title><rect x="49.5987%" y="229" width="22.9036%" height="15" fill="rgb(231,177,25)" fg:x="30283" fg:w="13984"/><text x="49.8487%" y="239.50">rust_qecp`rust_qecp::union_find_deco..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (76 samples, 0.12%)</title><rect x="80.1870%" y="213" width="0.1245%" height="15" fill="rgb(219,179,1)" fg:x="48959" fg:w="76"/><text x="80.4370%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="80.4573%" y="197" width="0.0213%" height="15" fill="rgb(238,219,53)" fg:x="49124" fg:w="13"/><text x="80.7073%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.07%)</title><rect x="80.6276%" y="165" width="0.0721%" height="15" fill="rgb(232,167,36)" fg:x="49228" fg:w="44"/><text x="80.8776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (99 samples, 0.16%)</title><rect x="80.5441%" y="181" width="0.1621%" height="15" fill="rgb(244,19,51)" fg:x="49177" fg:w="99"/><text x="80.7941%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (148 samples, 0.24%)</title><rect x="80.4786%" y="197" width="0.2424%" height="15" fill="rgb(224,6,22)" fg:x="49137" fg:w="148"/><text x="80.7286%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="80.7062%" y="181" width="0.0147%" height="15" fill="rgb(224,145,5)" fg:x="49276" fg:w="9"/><text x="80.9562%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (261 samples, 0.43%)</title><rect x="80.3115%" y="213" width="0.4275%" height="15" fill="rgb(234,130,49)" fg:x="49035" fg:w="261"/><text x="80.5615%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="80.7210%" y="197" width="0.0180%" height="15" fill="rgb(254,6,2)" fg:x="49285" fg:w="11"/><text x="80.9710%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="80.7275%" y="181" width="0.0115%" height="15" fill="rgb(208,96,46)" fg:x="49289" fg:w="7"/><text x="80.9775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.05%)</title><rect x="80.7390%" y="213" width="0.0459%" height="15" fill="rgb(239,3,39)" fg:x="49296" fg:w="28"/><text x="80.9890%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (146 samples, 0.24%)</title><rect x="81.1141%" y="197" width="0.2391%" height="15" fill="rgb(233,210,1)" fg:x="49525" fg:w="146"/><text x="81.3641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (381 samples, 0.62%)</title><rect x="80.7849%" y="213" width="0.6240%" height="15" fill="rgb(244,137,37)" fg:x="49324" fg:w="381"/><text x="81.0349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.04%)</title><rect x="81.3646%" y="197" width="0.0442%" height="15" fill="rgb(240,136,2)" fg:x="49678" fg:w="27"/><text x="81.6146%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.04%)</title><rect x="81.3696%" y="181" width="0.0393%" height="15" fill="rgb(239,18,37)" fg:x="49681" fg:w="24"/><text x="81.6196%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (77 samples, 0.13%)</title><rect x="81.4138%" y="197" width="0.1261%" height="15" fill="rgb(218,185,22)" fg:x="49708" fg:w="77"/><text x="81.6638%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (81 samples, 0.13%)</title><rect x="81.4089%" y="213" width="0.1327%" height="15" fill="rgb(225,218,4)" fg:x="49705" fg:w="81"/><text x="81.6589%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.02%)</title><rect x="81.5415%" y="213" width="0.0246%" height="15" fill="rgb(230,182,32)" fg:x="49786" fg:w="15"/><text x="81.7915%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="81.6169%" y="181" width="0.0229%" height="15" fill="rgb(242,56,43)" fg:x="49832" fg:w="14"/><text x="81.8669%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.08%)</title><rect x="81.5661%" y="213" width="0.0786%" height="15" fill="rgb(233,99,24)" fg:x="49801" fg:w="48"/><text x="81.8161%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.07%)</title><rect x="81.5759%" y="197" width="0.0688%" height="15" fill="rgb(234,209,42)" fg:x="49807" fg:w="42"/><text x="81.8259%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="81.6447%" y="213" width="0.0262%" height="15" fill="rgb(227,7,12)" fg:x="49849" fg:w="16"/><text x="81.8947%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (103 samples, 0.17%)</title><rect x="81.6709%" y="213" width="0.1687%" height="15" fill="rgb(245,203,43)" fg:x="49865" fg:w="103"/><text x="81.9209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.06%)</title><rect x="81.8445%" y="213" width="0.0557%" height="15" fill="rgb(238,205,33)" fg:x="49971" fg:w="34"/><text x="82.0945%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (59 samples, 0.10%)</title><rect x="81.9133%" y="213" width="0.0966%" height="15" fill="rgb(231,56,7)" fg:x="50013" fg:w="59"/><text x="82.1633%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (80 samples, 0.13%)</title><rect x="82.0100%" y="213" width="0.1310%" height="15" fill="rgb(244,186,29)" fg:x="50072" fg:w="80"/><text x="82.2600%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (13 samples, 0.02%)</title><rect x="82.1492%" y="213" width="0.0213%" height="15" fill="rgb(234,111,31)" fg:x="50157" fg:w="13"/><text x="82.3992%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="82.2212%" y="149" width="0.0131%" height="15" fill="rgb(241,149,10)" fg:x="50201" fg:w="8"/><text x="82.4712%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="82.2622%" y="117" width="0.0164%" height="15" fill="rgb(249,206,44)" fg:x="50226" fg:w="10"/><text x="82.5122%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="82.2671%" y="101" width="0.0115%" height="15" fill="rgb(251,153,30)" fg:x="50229" fg:w="7"/><text x="82.5171%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="82.2589%" y="133" width="0.0246%" height="15" fill="rgb(239,152,38)" fg:x="50224" fg:w="15"/><text x="82.5089%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.06%)</title><rect x="82.2343%" y="149" width="0.0573%" height="15" fill="rgb(249,139,47)" fg:x="50209" fg:w="35"/><text x="82.4843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (63 samples, 0.10%)</title><rect x="82.2016%" y="165" width="0.1032%" height="15" fill="rgb(244,64,35)" fg:x="50189" fg:w="63"/><text x="82.4516%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (83 samples, 0.14%)</title><rect x="82.1754%" y="213" width="0.1359%" height="15" fill="rgb(216,46,15)" fg:x="50173" fg:w="83"/><text x="82.4254%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (76 samples, 0.12%)</title><rect x="82.1868%" y="197" width="0.1245%" height="15" fill="rgb(250,74,19)" fg:x="50180" fg:w="76"/><text x="82.4368%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (74 samples, 0.12%)</title><rect x="82.1901%" y="181" width="0.1212%" height="15" fill="rgb(249,42,33)" fg:x="50182" fg:w="74"/><text x="82.4401%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (117 samples, 0.19%)</title><rect x="82.4882%" y="197" width="0.1916%" height="15" fill="rgb(242,149,17)" fg:x="50364" fg:w="117"/><text x="82.7382%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (204 samples, 0.33%)</title><rect x="82.6798%" y="197" width="0.3341%" height="15" fill="rgb(244,29,21)" fg:x="50481" fg:w="204"/><text x="82.9298%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (524 samples, 0.86%)</title><rect x="82.3113%" y="213" width="0.8582%" height="15" fill="rgb(220,130,37)" fg:x="50256" fg:w="524"/><text x="82.5613%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (95 samples, 0.16%)</title><rect x="83.0140%" y="197" width="0.1556%" height="15" fill="rgb(211,67,2)" fg:x="50685" fg:w="95"/><text x="83.2640%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (225 samples, 0.37%)</title><rect x="83.1695%" y="213" width="0.3685%" height="15" fill="rgb(235,68,52)" fg:x="50780" fg:w="225"/><text x="83.4195%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (14 samples, 0.02%)</title><rect x="83.5381%" y="213" width="0.0229%" height="15" fill="rgb(246,142,3)" fg:x="51005" fg:w="14"/><text x="83.7881%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (60 samples, 0.10%)</title><rect x="83.5610%" y="213" width="0.0983%" height="15" fill="rgb(241,25,7)" fg:x="51019" fg:w="60"/><text x="83.8110%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="83.8329%" y="181" width="0.0115%" height="15" fill="rgb(242,119,39)" fg:x="51185" fg:w="7"/><text x="84.0829%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (109 samples, 0.18%)</title><rect x="83.9967%" y="165" width="0.1785%" height="15" fill="rgb(241,98,45)" fg:x="51285" fg:w="109"/><text x="84.2467%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (53 samples, 0.09%)</title><rect x="84.0884%" y="149" width="0.0868%" height="15" fill="rgb(254,28,30)" fg:x="51341" fg:w="53"/><text x="84.3384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (211 samples, 0.35%)</title><rect x="83.8443%" y="181" width="0.3456%" height="15" fill="rgb(241,142,54)" fg:x="51192" fg:w="211"/><text x="84.0943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="84.1752%" y="165" width="0.0147%" height="15" fill="rgb(222,85,15)" fg:x="51394" fg:w="9"/><text x="84.4252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.03%)</title><rect x="84.2014%" y="165" width="0.0262%" height="15" fill="rgb(210,85,47)" fg:x="51410" fg:w="16"/><text x="84.4514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="84.2096%" y="149" width="0.0180%" height="15" fill="rgb(224,206,25)" fg:x="51415" fg:w="11"/><text x="84.4596%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="84.2374%" y="149" width="0.0213%" height="15" fill="rgb(243,201,19)" fg:x="51432" fg:w="13"/><text x="84.4874%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (109 samples, 0.18%)</title><rect x="84.1916%" y="181" width="0.1785%" height="15" fill="rgb(236,59,4)" fg:x="51404" fg:w="109"/><text x="84.4416%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (85 samples, 0.14%)</title><rect x="84.2309%" y="165" width="0.1392%" height="15" fill="rgb(254,179,45)" fg:x="51428" fg:w="85"/><text x="84.4809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (68 samples, 0.11%)</title><rect x="84.2587%" y="149" width="0.1114%" height="15" fill="rgb(226,14,10)" fg:x="51445" fg:w="68"/><text x="84.5087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="84.3504%" y="133" width="0.0197%" height="15" fill="rgb(244,27,41)" fg:x="51501" fg:w="12"/><text x="84.6004%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (388 samples, 0.64%)</title><rect x="83.7379%" y="197" width="0.6355%" height="15" fill="rgb(235,35,32)" fg:x="51127" fg:w="388"/><text x="83.9879%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="84.3734%" y="197" width="0.0115%" height="15" fill="rgb(218,68,31)" fg:x="51515" fg:w="7"/><text x="84.6234%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (452 samples, 0.74%)</title><rect x="83.6593%" y="213" width="0.7403%" height="15" fill="rgb(207,120,37)" fg:x="51079" fg:w="452"/><text x="83.9093%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="84.3848%" y="197" width="0.0147%" height="15" fill="rgb(227,98,0)" fg:x="51522" fg:w="9"/><text x="84.6348%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (30 samples, 0.05%)</title><rect x="84.3996%" y="213" width="0.0491%" height="15" fill="rgb(207,7,3)" fg:x="51531" fg:w="30"/><text x="84.6496%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,301 samples, 11.96%)</title><rect x="72.5023%" y="229" width="11.9579%" height="15" fill="rgb(206,98,19)" fg:x="44267" fg:w="7301"/><text x="72.7523%" y="239.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (7 samples, 0.01%)</title><rect x="84.4487%" y="213" width="0.0115%" height="15" fill="rgb(217,5,26)" fg:x="51561" fg:w="7"/><text x="84.6987%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,092 samples, 80.40%)</title><rect x="4.0635%" y="245" width="80.4049%" height="15" fill="rgb(235,190,38)" fg:x="2481" fg:w="49092"/><text x="4.3135%" y="255.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,413 samples, 82.57%)</title><rect x="1.9032%" y="261" width="82.5685%" height="15" fill="rgb(247,86,24)" fg:x="1162" fg:w="50413"/><text x="2.1532%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (848 samples, 1.39%)</title><rect x="84.4716%" y="261" width="1.3889%" height="15" fill="rgb(205,101,16)" fg:x="51575" fg:w="848"/><text x="84.7216%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (221 samples, 0.36%)</title><rect x="85.8605%" y="261" width="0.3620%" height="15" fill="rgb(246,168,33)" fg:x="52423" fg:w="221"/><text x="86.1105%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (89 samples, 0.15%)</title><rect x="86.0767%" y="245" width="0.1458%" height="15" fill="rgb(231,114,1)" fg:x="52555" fg:w="89"/><text x="86.3267%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,539 samples, 7.43%)</title><rect x="86.2225%" y="261" width="7.4342%" height="15" fill="rgb(207,184,53)" fg:x="52644" fg:w="4539"/><text x="86.4725%" y="271.50">rust_qecp`..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (113 samples, 0.19%)</title><rect x="93.6599%" y="245" width="0.1851%" height="15" fill="rgb(224,95,51)" fg:x="57185" fg:w="113"/><text x="93.9099%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (430 samples, 0.70%)</title><rect x="93.6566%" y="261" width="0.7043%" height="15" fill="rgb(212,188,45)" fg:x="57183" fg:w="430"/><text x="93.9066%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (315 samples, 0.52%)</title><rect x="93.8450%" y="245" width="0.5159%" height="15" fill="rgb(223,154,38)" fg:x="57298" fg:w="315"/><text x="94.0950%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (50 samples, 0.08%)</title><rect x="94.3609%" y="261" width="0.0819%" height="15" fill="rgb(251,22,52)" fg:x="57613" fg:w="50"/><text x="94.6109%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,386 samples, 5.55%)</title><rect x="94.4461%" y="261" width="5.5457%" height="15" fill="rgb(229,209,22)" fg:x="57665" fg:w="3386"/><text x="94.6961%" y="271.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,601 samples, 4.26%)</title><rect x="95.7318%" y="245" width="4.2600%" height="15" fill="rgb(234,138,34)" fg:x="58450" fg:w="2601"/><text x="95.9818%" y="255.50">rust_..</text></g><g><title>all (61,056 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="61056"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,941 samples, 98.17%)</title><rect x="1.8262%" y="341" width="98.1738%" height="15" fill="rgb(240,179,47)" fg:x="1115" fg:w="59941"/><text x="2.0762%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,941 samples, 98.17%)</title><rect x="1.8262%" y="325" width="98.1738%" height="15" fill="rgb(240,163,11)" fg:x="1115" fg:w="59941"/><text x="2.0762%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,941 samples, 98.17%)</title><rect x="1.8262%" y="309" width="98.1738%" height="15" fill="rgb(236,37,12)" fg:x="1115" fg:w="59941"/><text x="2.0762%" y="319.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,941 samples, 98.17%)</title><rect x="1.8262%" y="293" width="98.1738%" height="15" fill="rgb(232,164,16)" fg:x="1115" fg:w="59941"/><text x="2.0762%" y="303.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,936 samples, 98.17%)</title><rect x="1.8344%" y="277" width="98.1656%" height="15" fill="rgb(244,205,15)" fg:x="1120" fg:w="59936"/><text x="2.0844%" y="287.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>