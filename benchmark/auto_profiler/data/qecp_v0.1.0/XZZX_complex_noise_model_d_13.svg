<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="70476"><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="0.0440%" y="133" width="0.0184%" height="15" fill="rgb(227,0,7)" fg:x="31" fg:w="13"/><text x="0.2940%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="0.0624%" y="133" width="0.0170%" height="15" fill="rgb(217,0,24)" fg:x="44" fg:w="12"/><text x="0.3124%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.06%)</title><rect x="0.0213%" y="149" width="0.0624%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="44"/><text x="0.2713%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.06%)</title><rect x="0.0951%" y="53" width="0.0596%" height="15" fill="rgb(248,212,6)" fg:x="67" fg:w="42"/><text x="0.3451%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (11 samples, 0.02%)</title><rect x="0.1547%" y="53" width="0.0156%" height="15" fill="rgb(208,68,35)" fg:x="109" fg:w="11"/><text x="0.4047%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="0.1561%" y="37" width="0.0142%" height="15" fill="rgb(232,128,0)" fg:x="110" fg:w="10"/><text x="0.4061%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (59 samples, 0.08%)</title><rect x="0.0951%" y="69" width="0.0837%" height="15" fill="rgb(207,160,47)" fg:x="67" fg:w="59"/><text x="0.3451%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.02%)</title><rect x="0.1788%" y="69" width="0.0156%" height="15" fill="rgb(228,23,34)" fg:x="126" fg:w="11"/><text x="0.4288%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.02%)</title><rect x="0.1788%" y="53" width="0.0156%" height="15" fill="rgb(218,30,26)" fg:x="126" fg:w="11"/><text x="0.4288%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.09%)</title><rect x="0.1958%" y="69" width="0.0922%" height="15" fill="rgb(220,122,19)" fg:x="138" fg:w="65"/><text x="0.4458%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (141 samples, 0.20%)</title><rect x="0.0936%" y="149" width="0.2001%" height="15" fill="rgb(250,228,42)" fg:x="66" fg:w="141"/><text x="0.3436%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (141 samples, 0.20%)</title><rect x="0.0936%" y="133" width="0.2001%" height="15" fill="rgb(240,193,28)" fg:x="66" fg:w="141"/><text x="0.3436%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.20%)</title><rect x="0.0936%" y="117" width="0.2001%" height="15" fill="rgb(216,20,37)" fg:x="66" fg:w="141"/><text x="0.3436%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (141 samples, 0.20%)</title><rect x="0.0936%" y="101" width="0.2001%" height="15" fill="rgb(206,188,39)" fg:x="66" fg:w="141"/><text x="0.3436%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (141 samples, 0.20%)</title><rect x="0.0936%" y="85" width="0.2001%" height="15" fill="rgb(217,207,13)" fg:x="66" fg:w="141"/><text x="0.3436%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.2966%" y="69" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="209" fg:w="8"/><text x="0.5466%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="0.2966%" y="85" width="0.0184%" height="15" fill="rgb(225,20,46)" fg:x="209" fg:w="13"/><text x="0.5466%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (35 samples, 0.05%)</title><rect x="0.2937%" y="149" width="0.0497%" height="15" fill="rgb(210,31,41)" fg:x="207" fg:w="35"/><text x="0.5437%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.05%)</title><rect x="0.2937%" y="133" width="0.0497%" height="15" fill="rgb(221,200,47)" fg:x="207" fg:w="35"/><text x="0.5437%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.05%)</title><rect x="0.2937%" y="117" width="0.0497%" height="15" fill="rgb(226,26,5)" fg:x="207" fg:w="35"/><text x="0.5437%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (34 samples, 0.05%)</title><rect x="0.2951%" y="101" width="0.0482%" height="15" fill="rgb(249,33,26)" fg:x="208" fg:w="34"/><text x="0.5451%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (14 samples, 0.02%)</title><rect x="0.3235%" y="85" width="0.0199%" height="15" fill="rgb(235,183,28)" fg:x="228" fg:w="14"/><text x="0.5735%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (491 samples, 0.70%)</title><rect x="0.3448%" y="149" width="0.6967%" height="15" fill="rgb(221,5,38)" fg:x="243" fg:w="491"/><text x="0.5948%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (166 samples, 0.24%)</title><rect x="1.0415%" y="149" width="0.2355%" height="15" fill="rgb(247,18,42)" fg:x="734" fg:w="166"/><text x="1.2915%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.02%)</title><rect x="1.2770%" y="149" width="0.0156%" height="15" fill="rgb(241,131,45)" fg:x="900" fg:w="11"/><text x="1.5270%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (51 samples, 0.07%)</title><rect x="5.7211%" y="133" width="0.0724%" height="15" fill="rgb(249,31,29)" fg:x="4032" fg:w="51"/><text x="5.9711%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (50 samples, 0.07%)</title><rect x="5.7225%" y="117" width="0.0709%" height="15" fill="rgb(225,111,53)" fg:x="4033" fg:w="50"/><text x="5.9725%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (89 samples, 0.13%)</title><rect x="5.7935%" y="133" width="0.1263%" height="15" fill="rgb(238,160,17)" fg:x="4083" fg:w="89"/><text x="6.0435%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.10%)</title><rect x="5.9197%" y="133" width="0.0979%" height="15" fill="rgb(214,148,48)" fg:x="4172" fg:w="69"/><text x="6.1697%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (72 samples, 0.10%)</title><rect x="6.0177%" y="133" width="0.1022%" height="15" fill="rgb(232,36,49)" fg:x="4241" fg:w="72"/><text x="6.2677%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (479 samples, 0.68%)</title><rect x="6.1198%" y="133" width="0.6797%" height="15" fill="rgb(209,103,24)" fg:x="4313" fg:w="479"/><text x="6.3698%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="6.7995%" y="85" width="0.0114%" height="15" fill="rgb(229,88,8)" fg:x="4792" fg:w="8"/><text x="7.0495%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="6.7995%" y="133" width="0.0156%" height="15" fill="rgb(213,181,19)" fg:x="4792" fg:w="11"/><text x="7.0495%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="6.7995%" y="117" width="0.0156%" height="15" fill="rgb(254,191,54)" fg:x="4792" fg:w="11"/><text x="7.0495%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="6.7995%" y="101" width="0.0156%" height="15" fill="rgb(241,83,37)" fg:x="4792" fg:w="11"/><text x="7.0495%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (91 samples, 0.13%)</title><rect x="7.3713%" y="117" width="0.1291%" height="15" fill="rgb(233,36,39)" fg:x="5195" fg:w="91"/><text x="7.6213%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.02%)</title><rect x="7.5387%" y="85" width="0.0199%" height="15" fill="rgb(226,3,54)" fg:x="5313" fg:w="14"/><text x="7.7887%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.03%)</title><rect x="7.5387%" y="101" width="0.0312%" height="15" fill="rgb(245,192,40)" fg:x="5313" fg:w="22"/><text x="7.7887%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (709 samples, 1.01%)</title><rect x="6.8151%" y="133" width="1.0060%" height="15" fill="rgb(238,167,29)" fg:x="4803" fg:w="709"/><text x="7.0651%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (224 samples, 0.32%)</title><rect x="7.5033%" y="117" width="0.3178%" height="15" fill="rgb(232,182,51)" fg:x="5288" fg:w="224"/><text x="7.7533%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (172 samples, 0.24%)</title><rect x="7.5770%" y="101" width="0.2441%" height="15" fill="rgb(231,60,39)" fg:x="5340" fg:w="172"/><text x="7.8270%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (13 samples, 0.02%)</title><rect x="7.8325%" y="133" width="0.0184%" height="15" fill="rgb(208,69,12)" fg:x="5520" fg:w="13"/><text x="8.0825%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (191 samples, 0.27%)</title><rect x="10.3950%" y="117" width="0.2710%" height="15" fill="rgb(235,93,37)" fg:x="7326" fg:w="191"/><text x="10.6450%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (449 samples, 0.64%)</title><rect x="10.6731%" y="117" width="0.6371%" height="15" fill="rgb(213,116,39)" fg:x="7522" fg:w="449"/><text x="10.9231%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (33 samples, 0.05%)</title><rect x="11.3642%" y="101" width="0.0468%" height="15" fill="rgb(222,207,29)" fg:x="8009" fg:w="33"/><text x="11.6142%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,586 samples, 3.67%)</title><rect x="7.8509%" y="133" width="3.6693%" height="15" fill="rgb(206,96,30)" fg:x="5533" fg:w="2586"/><text x="8.1009%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (148 samples, 0.21%)</title><rect x="11.3102%" y="117" width="0.2100%" height="15" fill="rgb(218,138,4)" fg:x="7971" fg:w="148"/><text x="11.5602%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (77 samples, 0.11%)</title><rect x="11.4110%" y="101" width="0.1093%" height="15" fill="rgb(250,191,14)" fg:x="8042" fg:w="77"/><text x="11.6610%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,203 samples, 10.22%)</title><rect x="1.3012%" y="149" width="10.2205%" height="15" fill="rgb(239,60,40)" fg:x="917" fg:w="7203"/><text x="1.5512%" y="159.50">rust_qecp`rust_..</text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="11.5614%" y="133" width="0.0270%" height="15" fill="rgb(206,27,48)" fg:x="8148" fg:w="19"/><text x="11.8114%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (356 samples, 0.51%)</title><rect x="11.6025%" y="133" width="0.5051%" height="15" fill="rgb(225,35,8)" fg:x="8177" fg:w="356"/><text x="11.8525%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.03%)</title><rect x="12.1077%" y="133" width="0.0312%" height="15" fill="rgb(250,213,24)" fg:x="8533" fg:w="22"/><text x="12.3577%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="12.1417%" y="133" width="0.0156%" height="15" fill="rgb(247,123,22)" fg:x="8557" fg:w="11"/><text x="12.3917%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (15 samples, 0.02%)</title><rect x="12.1616%" y="133" width="0.0213%" height="15" fill="rgb(231,138,38)" fg:x="8571" fg:w="15"/><text x="12.4116%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.08%)</title><rect x="13.0186%" y="117" width="0.0837%" height="15" fill="rgb(231,145,46)" fg:x="9175" fg:w="59"/><text x="13.2686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.04%)</title><rect x="13.0626%" y="101" width="0.0397%" height="15" fill="rgb(251,118,11)" fg:x="9206" fg:w="28"/><text x="13.3126%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="13.1137%" y="117" width="0.0184%" height="15" fill="rgb(217,147,25)" fg:x="9242" fg:w="13"/><text x="13.3637%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.06%)</title><rect x="13.1378%" y="117" width="0.0624%" height="15" fill="rgb(247,81,37)" fg:x="9259" fg:w="44"/><text x="13.3878%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="13.3095%" y="37" width="0.0170%" height="15" fill="rgb(209,12,38)" fg:x="9380" fg:w="12"/><text x="13.5595%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (45 samples, 0.06%)</title><rect x="13.2683%" y="53" width="0.0639%" height="15" fill="rgb(227,1,9)" fg:x="9351" fg:w="45"/><text x="13.5183%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (76 samples, 0.11%)</title><rect x="13.2300%" y="85" width="0.1078%" height="15" fill="rgb(248,47,43)" fg:x="9324" fg:w="76"/><text x="13.4800%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.08%)</title><rect x="13.2584%" y="69" width="0.0795%" height="15" fill="rgb(221,10,30)" fg:x="9344" fg:w="56"/><text x="13.5084%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (106 samples, 0.15%)</title><rect x="13.2002%" y="117" width="0.1504%" height="15" fill="rgb(210,229,1)" fg:x="9303" fg:w="106"/><text x="13.4502%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (87 samples, 0.12%)</title><rect x="13.2272%" y="101" width="0.1234%" height="15" fill="rgb(222,148,37)" fg:x="9322" fg:w="87"/><text x="13.4772%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="13.3379%" y="85" width="0.0128%" height="15" fill="rgb(234,67,33)" fg:x="9400" fg:w="9"/><text x="13.5879%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (24 samples, 0.03%)</title><rect x="13.3563%" y="117" width="0.0341%" height="15" fill="rgb(247,98,35)" fg:x="9413" fg:w="24"/><text x="13.6063%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="13.4202%" y="85" width="0.0170%" height="15" fill="rgb(247,138,52)" fg:x="9458" fg:w="12"/><text x="13.6702%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (35 samples, 0.05%)</title><rect x="13.3904%" y="117" width="0.0497%" height="15" fill="rgb(213,79,30)" fg:x="9437" fg:w="35"/><text x="13.6404%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="13.4145%" y="101" width="0.0255%" height="15" fill="rgb(246,177,23)" fg:x="9454" fg:w="18"/><text x="13.6645%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (38 samples, 0.05%)</title><rect x="13.4400%" y="117" width="0.0539%" height="15" fill="rgb(230,62,27)" fg:x="9472" fg:w="38"/><text x="13.6900%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (1,732 samples, 2.46%)</title><rect x="12.1829%" y="133" width="2.4576%" height="15" fill="rgb(216,154,8)" fg:x="8586" fg:w="1732"/><text x="12.4329%" y="143.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (808 samples, 1.15%)</title><rect x="13.4940%" y="117" width="1.1465%" height="15" fill="rgb(244,35,45)" fg:x="9510" fg:w="808"/><text x="13.7440%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (2,209 samples, 3.13%)</title><rect x="11.5217%" y="149" width="3.1344%" height="15" fill="rgb(251,115,12)" fg:x="8120" fg:w="2209"/><text x="11.7717%" y="159.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_XZZX_code_rectangle (9 samples, 0.01%)</title><rect x="14.6561%" y="149" width="0.0128%" height="15" fill="rgb(240,54,50)" fg:x="10329" fg:w="9"/><text x="14.9061%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (9 samples, 0.01%)</title><rect x="14.6561%" y="133" width="0.0128%" height="15" fill="rgb(233,84,52)" fg:x="10329" fg:w="9"/><text x="14.9061%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="14.6575%" y="117" width="0.0114%" height="15" fill="rgb(207,117,47)" fg:x="10330" fg:w="8"/><text x="14.9075%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.01%)</title><rect x="14.7100%" y="101" width="0.0142%" height="15" fill="rgb(249,43,39)" fg:x="10367" fg:w="10"/><text x="14.9600%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (46 samples, 0.07%)</title><rect x="14.6688%" y="149" width="0.0653%" height="15" fill="rgb(209,38,44)" fg:x="10338" fg:w="46"/><text x="14.9188%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (36 samples, 0.05%)</title><rect x="14.6830%" y="133" width="0.0511%" height="15" fill="rgb(236,212,23)" fg:x="10348" fg:w="36"/><text x="14.9330%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (24 samples, 0.03%)</title><rect x="14.7000%" y="117" width="0.0341%" height="15" fill="rgb(242,79,21)" fg:x="10360" fg:w="24"/><text x="14.9500%" y="127.50"></text></g><g><title>dyld`start (10,391 samples, 14.74%)</title><rect x="0.0000%" y="389" width="14.7440%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="10391"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (10,387 samples, 14.74%)</title><rect x="0.0057%" y="373" width="14.7384%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (10,387 samples, 14.74%)</title><rect x="0.0057%" y="357" width="14.7384%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="367.50">rust_qecp`std::rt::lan..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (10,387 samples, 14.74%)</title><rect x="0.0057%" y="341" width="14.7384%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="351.50">rust_qecp`std::rt::lan..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (10,387 samples, 14.74%)</title><rect x="0.0057%" y="325" width="14.7384%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="335.50">rust_qecp`std::sys_com..</text></g><g><title>rust_qecp`rust_qecp::main (10,387 samples, 14.74%)</title><rect x="0.0057%" y="309" width="14.7384%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="319.50">rust_qecp`rust_qecp::m..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (10,387 samples, 14.74%)</title><rect x="0.0057%" y="293" width="14.7384%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="303.50">rust_qecp`tokio::runti..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (10,387 samples, 14.74%)</title><rect x="0.0057%" y="277" width="14.7384%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="287.50">rust_qecp`tokio::runti..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (10,387 samples, 14.74%)</title><rect x="0.0057%" y="261" width="14.7384%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="271.50">rust_qecp`tokio::runti..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,387 samples, 14.74%)</title><rect x="0.0057%" y="245" width="14.7384%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="255.50">rust_qecp`tokio::macro..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,387 samples, 14.74%)</title><rect x="0.0057%" y="229" width="14.7384%" height="15" fill="rgb(224,169,11)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="239.50">rust_qecp`&lt;core::futur..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,387 samples, 14.74%)</title><rect x="0.0057%" y="213" width="14.7384%" height="15" fill="rgb(250,166,2)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="223.50">rust_qecp`tokio::macro..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,387 samples, 14.74%)</title><rect x="0.0057%" y="197" width="14.7384%" height="15" fill="rgb(242,216,29)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="207.50">rust_qecp`&lt;core::futur..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (10,387 samples, 14.74%)</title><rect x="0.0057%" y="181" width="14.7384%" height="15" fill="rgb(230,116,27)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="191.50">rust_qecp`rust_qecp::t..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (10,387 samples, 14.74%)</title><rect x="0.0057%" y="165" width="14.7384%" height="15" fill="rgb(228,99,48)" fg:x="4" fg:w="10387"/><text x="0.2557%" y="175.50">rust_qecp`rust_qecp::t..</text></g><g><title>libsystem_kernel.dylib`__exit (10 samples, 0.01%)</title><rect x="14.7440%" y="389" width="0.0142%" height="15" fill="rgb(253,11,6)" fg:x="10391" fg:w="10"/><text x="14.9940%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="14.7696%" y="309" width="0.0227%" height="15" fill="rgb(247,143,39)" fg:x="10409" fg:w="16"/><text x="15.0196%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (19 samples, 0.03%)</title><rect x="14.7923%" y="309" width="0.0270%" height="15" fill="rgb(236,97,10)" fg:x="10425" fg:w="19"/><text x="15.0423%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.03%)</title><rect x="14.7923%" y="293" width="0.0270%" height="15" fill="rgb(233,208,19)" fg:x="10425" fg:w="19"/><text x="15.0423%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.01%)</title><rect x="14.8192%" y="309" width="0.0142%" height="15" fill="rgb(216,164,2)" fg:x="10444" fg:w="10"/><text x="15.0692%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (10 samples, 0.01%)</title><rect x="14.8192%" y="293" width="0.0142%" height="15" fill="rgb(220,129,5)" fg:x="10444" fg:w="10"/><text x="15.0692%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="14.8192%" y="277" width="0.0142%" height="15" fill="rgb(242,17,10)" fg:x="10444" fg:w="10"/><text x="15.0692%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.01%)</title><rect x="14.8334%" y="309" width="0.0142%" height="15" fill="rgb(242,107,0)" fg:x="10454" fg:w="10"/><text x="15.0834%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.03%)</title><rect x="14.8561%" y="309" width="0.0326%" height="15" fill="rgb(251,28,31)" fg:x="10470" fg:w="23"/><text x="15.1061%" y="319.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.07%)</title><rect x="14.8888%" y="309" width="0.0695%" height="15" fill="rgb(233,223,10)" fg:x="10493" fg:w="49"/><text x="15.1388%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.10%)</title><rect x="14.9810%" y="293" width="0.1036%" height="15" fill="rgb(215,21,27)" fg:x="10558" fg:w="73"/><text x="15.2310%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="15.0576%" y="277" width="0.0270%" height="15" fill="rgb(232,23,21)" fg:x="10612" fg:w="19"/><text x="15.3076%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (83 samples, 0.12%)</title><rect x="15.0988%" y="293" width="0.1178%" height="15" fill="rgb(244,5,23)" fg:x="10641" fg:w="83"/><text x="15.3488%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (64 samples, 0.09%)</title><rect x="15.1257%" y="277" width="0.0908%" height="15" fill="rgb(226,81,46)" fg:x="10660" fg:w="64"/><text x="15.3757%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.09%)</title><rect x="15.1257%" y="261" width="0.0908%" height="15" fill="rgb(247,70,30)" fg:x="10660" fg:w="64"/><text x="15.3757%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.26%)</title><rect x="14.9583%" y="309" width="0.2597%" height="15" fill="rgb(212,68,19)" fg:x="10542" fg:w="183"/><text x="15.2083%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (13 samples, 0.02%)</title><rect x="15.2321%" y="309" width="0.0184%" height="15" fill="rgb(240,187,13)" fg:x="10735" fg:w="13"/><text x="15.4821%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (13 samples, 0.02%)</title><rect x="15.2321%" y="293" width="0.0184%" height="15" fill="rgb(223,113,26)" fg:x="10735" fg:w="13"/><text x="15.4821%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.2321%" y="277" width="0.0184%" height="15" fill="rgb(206,192,2)" fg:x="10735" fg:w="13"/><text x="15.4821%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.2321%" y="261" width="0.0184%" height="15" fill="rgb(241,108,4)" fg:x="10735" fg:w="13"/><text x="15.4821%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (12 samples, 0.02%)</title><rect x="15.2336%" y="245" width="0.0170%" height="15" fill="rgb(247,173,49)" fg:x="10736" fg:w="12"/><text x="15.4836%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="15.2520%" y="309" width="0.0270%" height="15" fill="rgb(224,114,35)" fg:x="10749" fg:w="19"/><text x="15.5020%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (24 samples, 0.03%)</title><rect x="15.3130%" y="293" width="0.0341%" height="15" fill="rgb(245,159,27)" fg:x="10792" fg:w="24"/><text x="15.5630%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.06%)</title><rect x="15.3485%" y="293" width="0.0568%" height="15" fill="rgb(245,172,44)" fg:x="10817" fg:w="40"/><text x="15.5985%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="15.3754%" y="277" width="0.0298%" height="15" fill="rgb(236,23,11)" fg:x="10836" fg:w="21"/><text x="15.6254%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="15.3797%" y="261" width="0.0255%" height="15" fill="rgb(205,117,38)" fg:x="10839" fg:w="18"/><text x="15.6297%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="15.3939%" y="245" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="10849" fg:w="8"/><text x="15.6439%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.06%)</title><rect x="15.4166%" y="293" width="0.0639%" height="15" fill="rgb(244,70,9)" fg:x="10865" fg:w="45"/><text x="15.6666%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="15.4663%" y="277" width="0.0142%" height="15" fill="rgb(217,125,39)" fg:x="10900" fg:w="10"/><text x="15.7163%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="15.4861%" y="293" width="0.0114%" height="15" fill="rgb(235,36,10)" fg:x="10914" fg:w="8"/><text x="15.7361%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.02%)</title><rect x="15.4975%" y="293" width="0.0241%" height="15" fill="rgb(251,123,47)" fg:x="10922" fg:w="17"/><text x="15.7475%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (33 samples, 0.05%)</title><rect x="15.5216%" y="293" width="0.0468%" height="15" fill="rgb(221,13,13)" fg:x="10939" fg:w="33"/><text x="15.7716%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (182 samples, 0.26%)</title><rect x="15.5769%" y="293" width="0.2582%" height="15" fill="rgb(238,131,9)" fg:x="10978" fg:w="182"/><text x="15.8269%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (19 samples, 0.03%)</title><rect x="15.8352%" y="293" width="0.0270%" height="15" fill="rgb(211,50,8)" fg:x="11160" fg:w="19"/><text x="16.0852%" y="303.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.04%)</title><rect x="15.8621%" y="293" width="0.0411%" height="15" fill="rgb(245,182,24)" fg:x="11179" fg:w="29"/><text x="16.1121%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.01%)</title><rect x="15.9033%" y="293" width="0.0142%" height="15" fill="rgb(242,14,37)" fg:x="11208" fg:w="10"/><text x="16.1533%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (10 samples, 0.01%)</title><rect x="15.9232%" y="293" width="0.0142%" height="15" fill="rgb(246,228,12)" fg:x="11222" fg:w="10"/><text x="16.1732%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.07%)</title><rect x="15.9515%" y="293" width="0.0709%" height="15" fill="rgb(213,55,15)" fg:x="11242" fg:w="50"/><text x="16.2015%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (19 samples, 0.03%)</title><rect x="16.0225%" y="293" width="0.0270%" height="15" fill="rgb(209,9,3)" fg:x="11292" fg:w="19"/><text x="16.2725%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (8 samples, 0.01%)</title><rect x="16.0764%" y="293" width="0.0114%" height="15" fill="rgb(230,59,30)" fg:x="11330" fg:w="8"/><text x="16.3264%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.04%)</title><rect x="17.7053%" y="277" width="0.0397%" height="15" fill="rgb(209,121,21)" fg:x="12478" fg:w="28"/><text x="17.9553%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.03%)</title><rect x="17.7138%" y="261" width="0.0312%" height="15" fill="rgb(220,109,13)" fg:x="12484" fg:w="22"/><text x="17.9638%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.02%)</title><rect x="17.7223%" y="245" width="0.0227%" height="15" fill="rgb(232,18,1)" fg:x="12490" fg:w="16"/><text x="17.9723%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="17.7337%" y="229" width="0.0114%" height="15" fill="rgb(215,41,42)" fg:x="12498" fg:w="8"/><text x="17.9837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="17.7465%" y="277" width="0.0170%" height="15" fill="rgb(224,123,36)" fg:x="12507" fg:w="12"/><text x="17.9965%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="17.7521%" y="261" width="0.0114%" height="15" fill="rgb(240,125,3)" fg:x="12511" fg:w="8"/><text x="18.0021%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="17.8146%" y="245" width="0.0114%" height="15" fill="rgb(205,98,50)" fg:x="12555" fg:w="8"/><text x="18.0646%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.03%)</title><rect x="17.8373%" y="197" width="0.0341%" height="15" fill="rgb(205,185,37)" fg:x="12571" fg:w="24"/><text x="18.0873%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (26 samples, 0.04%)</title><rect x="17.8359%" y="213" width="0.0369%" height="15" fill="rgb(238,207,15)" fg:x="12570" fg:w="26"/><text x="18.0859%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.04%)</title><rect x="17.8330%" y="229" width="0.0411%" height="15" fill="rgb(213,199,42)" fg:x="12568" fg:w="29"/><text x="18.0830%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (43 samples, 0.06%)</title><rect x="17.8273%" y="245" width="0.0610%" height="15" fill="rgb(235,201,11)" fg:x="12564" fg:w="43"/><text x="18.0773%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="17.8742%" y="229" width="0.0142%" height="15" fill="rgb(207,46,11)" fg:x="12597" fg:w="10"/><text x="18.1242%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (87 samples, 0.12%)</title><rect x="17.7720%" y="277" width="0.1234%" height="15" fill="rgb(241,35,35)" fg:x="12525" fg:w="87"/><text x="18.0220%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (71 samples, 0.10%)</title><rect x="17.7947%" y="261" width="0.1007%" height="15" fill="rgb(243,32,47)" fg:x="12541" fg:w="71"/><text x="18.0447%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,277 samples, 1.81%)</title><rect x="16.0877%" y="293" width="1.8120%" height="15" fill="rgb(247,202,23)" fg:x="11338" fg:w="1277"/><text x="16.3377%" y="303.50">r..</text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.04%)</title><rect x="28.0762%" y="277" width="0.0355%" height="15" fill="rgb(219,102,11)" fg:x="19787" fg:w="25"/><text x="28.3262%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.02%)</title><rect x="28.1117%" y="277" width="0.0170%" height="15" fill="rgb(243,110,44)" fg:x="19812" fg:w="12"/><text x="28.3617%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (49 samples, 0.07%)</title><rect x="28.1344%" y="277" width="0.0695%" height="15" fill="rgb(222,74,54)" fg:x="19828" fg:w="49"/><text x="28.3844%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.04%)</title><rect x="28.3728%" y="261" width="0.0355%" height="15" fill="rgb(216,99,12)" fg:x="19996" fg:w="25"/><text x="28.6228%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (190 samples, 0.27%)</title><rect x="28.2039%" y="277" width="0.2696%" height="15" fill="rgb(226,22,26)" fg:x="19877" fg:w="190"/><text x="28.4539%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.06%)</title><rect x="28.4097%" y="261" width="0.0639%" height="15" fill="rgb(217,163,10)" fg:x="20022" fg:w="45"/><text x="28.6597%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 0.06%)</title><rect x="28.4182%" y="245" width="0.0553%" height="15" fill="rgb(213,25,53)" fg:x="20028" fg:w="39"/><text x="28.6682%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="28.4778%" y="277" width="0.0128%" height="15" fill="rgb(252,105,26)" fg:x="20070" fg:w="9"/><text x="28.7278%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (28 samples, 0.04%)</title><rect x="28.6963%" y="245" width="0.0397%" height="15" fill="rgb(220,39,43)" fg:x="20224" fg:w="28"/><text x="28.9463%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (203 samples, 0.29%)</title><rect x="28.4905%" y="277" width="0.2880%" height="15" fill="rgb(229,68,48)" fg:x="20079" fg:w="203"/><text x="28.7405%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (171 samples, 0.24%)</title><rect x="28.5360%" y="261" width="0.2426%" height="15" fill="rgb(252,8,32)" fg:x="20111" fg:w="171"/><text x="28.7860%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.04%)</title><rect x="28.7360%" y="245" width="0.0426%" height="15" fill="rgb(223,20,43)" fg:x="20252" fg:w="30"/><text x="28.9860%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (44 samples, 0.06%)</title><rect x="28.7786%" y="277" width="0.0624%" height="15" fill="rgb(229,81,49)" fg:x="20282" fg:w="44"/><text x="29.0286%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.03%)</title><rect x="28.8410%" y="277" width="0.0326%" height="15" fill="rgb(236,28,36)" fg:x="20326" fg:w="23"/><text x="29.0910%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="28.8737%" y="277" width="0.0255%" height="15" fill="rgb(249,185,26)" fg:x="20349" fg:w="18"/><text x="29.1237%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.03%)</title><rect x="28.8992%" y="277" width="0.0255%" height="15" fill="rgb(249,174,33)" fg:x="20367" fg:w="18"/><text x="29.1492%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="28.9247%" y="277" width="0.0213%" height="15" fill="rgb(233,201,37)" fg:x="20385" fg:w="15"/><text x="29.1747%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="28.9460%" y="277" width="0.0128%" height="15" fill="rgb(221,78,26)" fg:x="20400" fg:w="9"/><text x="29.1960%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="28.9588%" y="277" width="0.0128%" height="15" fill="rgb(250,127,30)" fg:x="20409" fg:w="9"/><text x="29.2088%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (105 samples, 0.15%)</title><rect x="28.9914%" y="261" width="0.1490%" height="15" fill="rgb(230,49,44)" fg:x="20432" fg:w="105"/><text x="29.2414%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.03%)</title><rect x="29.1064%" y="245" width="0.0341%" height="15" fill="rgb(229,67,23)" fg:x="20513" fg:w="24"/><text x="29.3564%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="29.1404%" y="261" width="0.0156%" height="15" fill="rgb(249,83,47)" fg:x="20537" fg:w="11"/><text x="29.3904%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (131 samples, 0.19%)</title><rect x="28.9716%" y="277" width="0.1859%" height="15" fill="rgb(215,43,3)" fg:x="20418" fg:w="131"/><text x="29.2216%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (29 samples, 0.04%)</title><rect x="29.1574%" y="277" width="0.0411%" height="15" fill="rgb(238,154,13)" fg:x="20549" fg:w="29"/><text x="29.4074%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (291 samples, 0.41%)</title><rect x="29.1986%" y="277" width="0.4129%" height="15" fill="rgb(219,56,2)" fg:x="20578" fg:w="291"/><text x="29.4486%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (34 samples, 0.05%)</title><rect x="29.6115%" y="277" width="0.0482%" height="15" fill="rgb(233,0,4)" fg:x="20869" fg:w="34"/><text x="29.8615%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.01%)</title><rect x="29.6597%" y="277" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="20903" fg:w="10"/><text x="29.9097%" y="287.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="29.6768%" y="277" width="0.0184%" height="15" fill="rgb(250,79,13)" fg:x="20915" fg:w="13"/><text x="29.9268%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="29.7931%" y="245" width="0.0128%" height="15" fill="rgb(211,146,34)" fg:x="20997" fg:w="9"/><text x="30.0431%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (20 samples, 0.03%)</title><rect x="29.8215%" y="213" width="0.0284%" height="15" fill="rgb(228,22,38)" fg:x="21017" fg:w="20"/><text x="30.0715%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="29.8357%" y="197" width="0.0142%" height="15" fill="rgb(235,168,5)" fg:x="21027" fg:w="10"/><text x="30.0857%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (102 samples, 0.14%)</title><rect x="29.8073%" y="229" width="0.1447%" height="15" fill="rgb(221,155,16)" fg:x="21007" fg:w="102"/><text x="30.0573%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.10%)</title><rect x="29.8499%" y="213" width="0.1022%" height="15" fill="rgb(215,215,53)" fg:x="21037" fg:w="72"/><text x="30.0999%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 samples, 0.26%)</title><rect x="29.7009%" y="277" width="0.2597%" height="15" fill="rgb(223,4,10)" fg:x="20932" fg:w="183"/><text x="29.9509%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (118 samples, 0.17%)</title><rect x="29.7931%" y="261" width="0.1674%" height="15" fill="rgb(234,103,6)" fg:x="20997" fg:w="118"/><text x="30.0431%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (109 samples, 0.15%)</title><rect x="29.8059%" y="245" width="0.1547%" height="15" fill="rgb(227,97,0)" fg:x="21006" fg:w="109"/><text x="30.0559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (36 samples, 0.05%)</title><rect x="30.2543%" y="245" width="0.0511%" height="15" fill="rgb(234,150,53)" fg:x="21322" fg:w="36"/><text x="30.5043%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (44 samples, 0.06%)</title><rect x="30.3153%" y="245" width="0.0624%" height="15" fill="rgb(228,201,54)" fg:x="21365" fg:w="44"/><text x="30.5653%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (327 samples, 0.46%)</title><rect x="30.0272%" y="261" width="0.4640%" height="15" fill="rgb(222,22,37)" fg:x="21162" fg:w="327"/><text x="30.2772%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.11%)</title><rect x="30.3777%" y="245" width="0.1135%" height="15" fill="rgb(237,53,32)" fg:x="21409" fg:w="80"/><text x="30.6277%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (66 samples, 0.09%)</title><rect x="30.3976%" y="229" width="0.0936%" height="15" fill="rgb(233,25,53)" fg:x="21423" fg:w="66"/><text x="30.6476%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (59 samples, 0.08%)</title><rect x="30.6303%" y="245" width="0.0837%" height="15" fill="rgb(210,40,34)" fg:x="21587" fg:w="59"/><text x="30.8803%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (18 samples, 0.03%)</title><rect x="30.7140%" y="245" width="0.0255%" height="15" fill="rgb(241,220,44)" fg:x="21646" fg:w="18"/><text x="30.9640%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (24 samples, 0.03%)</title><rect x="30.7395%" y="245" width="0.0341%" height="15" fill="rgb(235,28,35)" fg:x="21664" fg:w="24"/><text x="30.9895%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (134 samples, 0.19%)</title><rect x="30.7736%" y="245" width="0.1901%" height="15" fill="rgb(210,56,17)" fg:x="21688" fg:w="134"/><text x="31.0236%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (239 samples, 0.34%)</title><rect x="30.9652%" y="245" width="0.3391%" height="15" fill="rgb(224,130,29)" fg:x="21823" fg:w="239"/><text x="31.2152%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (236 samples, 0.33%)</title><rect x="30.9694%" y="229" width="0.3349%" height="15" fill="rgb(235,212,8)" fg:x="21826" fg:w="236"/><text x="31.2194%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (635 samples, 0.90%)</title><rect x="30.4955%" y="261" width="0.9010%" height="15" fill="rgb(223,33,50)" fg:x="21492" fg:w="635"/><text x="30.7455%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (65 samples, 0.09%)</title><rect x="31.3043%" y="245" width="0.0922%" height="15" fill="rgb(219,149,13)" fg:x="22062" fg:w="65"/><text x="31.5543%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.09%)</title><rect x="31.3057%" y="229" width="0.0908%" height="15" fill="rgb(250,156,29)" fg:x="22063" fg:w="64"/><text x="31.5557%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (26 samples, 0.04%)</title><rect x="31.5952%" y="229" width="0.0369%" height="15" fill="rgb(216,193,19)" fg:x="22267" fg:w="26"/><text x="31.8452%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (78 samples, 0.11%)</title><rect x="31.6320%" y="229" width="0.1107%" height="15" fill="rgb(216,135,14)" fg:x="22293" fg:w="78"/><text x="31.8820%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (67 samples, 0.10%)</title><rect x="31.7427%" y="229" width="0.0951%" height="15" fill="rgb(241,47,5)" fg:x="22371" fg:w="67"/><text x="31.9927%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (28 samples, 0.04%)</title><rect x="31.8378%" y="229" width="0.0397%" height="15" fill="rgb(233,42,35)" fg:x="22438" fg:w="28"/><text x="32.0878%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (78 samples, 0.11%)</title><rect x="31.8775%" y="229" width="0.1107%" height="15" fill="rgb(231,13,6)" fg:x="22466" fg:w="78"/><text x="32.1275%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (50 samples, 0.07%)</title><rect x="31.9172%" y="213" width="0.0709%" height="15" fill="rgb(207,181,40)" fg:x="22494" fg:w="50"/><text x="32.1672%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (69 samples, 0.10%)</title><rect x="31.9953%" y="213" width="0.0979%" height="15" fill="rgb(254,173,49)" fg:x="22549" fg:w="69"/><text x="32.2453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (448 samples, 0.64%)</title><rect x="31.4589%" y="245" width="0.6357%" height="15" fill="rgb(221,1,38)" fg:x="22171" fg:w="448"/><text x="31.7089%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (75 samples, 0.11%)</title><rect x="31.9882%" y="229" width="0.1064%" height="15" fill="rgb(206,124,46)" fg:x="22544" fg:w="75"/><text x="32.2382%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (495 samples, 0.70%)</title><rect x="31.3965%" y="261" width="0.7024%" height="15" fill="rgb(249,21,11)" fg:x="22127" fg:w="495"/><text x="31.6465%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="32.0989%" y="261" width="0.0270%" height="15" fill="rgb(222,201,40)" fg:x="22622" fg:w="19"/><text x="32.3489%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (127 samples, 0.18%)</title><rect x="32.1258%" y="261" width="0.1802%" height="15" fill="rgb(235,61,29)" fg:x="22641" fg:w="127"/><text x="32.3758%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (89 samples, 0.13%)</title><rect x="32.1797%" y="245" width="0.1263%" height="15" fill="rgb(219,207,3)" fg:x="22679" fg:w="89"/><text x="32.4297%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.13%)</title><rect x="32.1797%" y="229" width="0.1263%" height="15" fill="rgb(222,56,46)" fg:x="22679" fg:w="89"/><text x="32.4297%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.03%)</title><rect x="32.3060%" y="261" width="0.0312%" height="15" fill="rgb(239,76,54)" fg:x="22768" fg:w="22"/><text x="32.5560%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (22 samples, 0.03%)</title><rect x="32.3429%" y="261" width="0.0312%" height="15" fill="rgb(231,124,27)" fg:x="22794" fg:w="22"/><text x="32.5929%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="32.3741%" y="261" width="0.0213%" height="15" fill="rgb(249,195,6)" fg:x="22816" fg:w="15"/><text x="32.6241%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="32.3954%" y="261" width="0.0184%" height="15" fill="rgb(237,174,47)" fg:x="22831" fg:w="13"/><text x="32.6454%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.08%)</title><rect x="32.4309%" y="245" width="0.0752%" height="15" fill="rgb(206,201,31)" fg:x="22856" fg:w="53"/><text x="32.6809%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="32.4806%" y="229" width="0.0255%" height="15" fill="rgb(231,57,52)" fg:x="22891" fg:w="18"/><text x="32.7306%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (45 samples, 0.06%)</title><rect x="32.5089%" y="245" width="0.0639%" height="15" fill="rgb(248,177,22)" fg:x="22911" fg:w="45"/><text x="32.7589%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (9 samples, 0.01%)</title><rect x="32.5600%" y="229" width="0.0128%" height="15" fill="rgb(215,211,37)" fg:x="22947" fg:w="9"/><text x="32.8100%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="32.5600%" y="213" width="0.0128%" height="15" fill="rgb(241,128,51)" fg:x="22947" fg:w="9"/><text x="32.8100%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,845 samples, 2.62%)</title><rect x="29.9606%" y="277" width="2.6179%" height="15" fill="rgb(227,165,31)" fg:x="21115" fg:w="1845"/><text x="30.2106%" y="287.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (113 samples, 0.16%)</title><rect x="32.4181%" y="261" width="0.1603%" height="15" fill="rgb(228,167,24)" fg:x="22847" fg:w="113"/><text x="32.6681%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (213 samples, 0.30%)</title><rect x="32.5785%" y="277" width="0.3022%" height="15" fill="rgb(228,143,12)" fg:x="22960" fg:w="213"/><text x="32.8285%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (191 samples, 0.27%)</title><rect x="32.6097%" y="261" width="0.2710%" height="15" fill="rgb(249,149,8)" fg:x="22982" fg:w="191"/><text x="32.8597%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (151 samples, 0.21%)</title><rect x="32.6664%" y="245" width="0.2143%" height="15" fill="rgb(243,35,44)" fg:x="23022" fg:w="151"/><text x="32.9164%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (80 samples, 0.11%)</title><rect x="32.7672%" y="229" width="0.1135%" height="15" fill="rgb(246,89,9)" fg:x="23093" fg:w="80"/><text x="33.0172%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (26 samples, 0.04%)</title><rect x="32.8438%" y="213" width="0.0369%" height="15" fill="rgb(233,213,13)" fg:x="23147" fg:w="26"/><text x="33.0938%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (58 samples, 0.08%)</title><rect x="32.8850%" y="277" width="0.0823%" height="15" fill="rgb(233,141,41)" fg:x="23176" fg:w="58"/><text x="33.1350%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="33.9960%" y="261" width="0.0227%" height="15" fill="rgb(239,167,4)" fg:x="23959" fg:w="16"/><text x="34.2460%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="34.0229%" y="261" width="0.0114%" height="15" fill="rgb(209,217,16)" fg:x="23978" fg:w="8"/><text x="34.2729%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (20 samples, 0.03%)</title><rect x="34.0343%" y="261" width="0.0284%" height="15" fill="rgb(219,88,35)" fg:x="23986" fg:w="20"/><text x="34.2843%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (43 samples, 0.06%)</title><rect x="34.0783%" y="261" width="0.0610%" height="15" fill="rgb(220,193,23)" fg:x="24017" fg:w="43"/><text x="34.3283%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (70 samples, 0.10%)</title><rect x="34.5735%" y="229" width="0.0993%" height="15" fill="rgb(230,90,52)" fg:x="24366" fg:w="70"/><text x="34.8235%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (120 samples, 0.17%)</title><rect x="34.5039%" y="245" width="0.1703%" height="15" fill="rgb(252,106,19)" fg:x="24317" fg:w="120"/><text x="34.7539%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="34.6827%" y="245" width="0.0298%" height="15" fill="rgb(206,74,20)" fg:x="24443" fg:w="21"/><text x="34.9327%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (30 samples, 0.04%)</title><rect x="34.7225%" y="245" width="0.0426%" height="15" fill="rgb(230,138,44)" fg:x="24471" fg:w="30"/><text x="34.9725%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="34.7650%" y="245" width="0.0170%" height="15" fill="rgb(235,182,43)" fg:x="24501" fg:w="12"/><text x="35.0150%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="34.7821%" y="245" width="0.0156%" height="15" fill="rgb(242,16,51)" fg:x="24513" fg:w="11"/><text x="35.0321%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="34.7977%" y="245" width="0.0128%" height="15" fill="rgb(248,9,4)" fg:x="24524" fg:w="9"/><text x="35.0477%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (54 samples, 0.08%)</title><rect x="35.3198%" y="197" width="0.0766%" height="15" fill="rgb(210,31,22)" fg:x="24892" fg:w="54"/><text x="35.5698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="35.3766%" y="181" width="0.0199%" height="15" fill="rgb(239,54,39)" fg:x="24932" fg:w="14"/><text x="35.6266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (91 samples, 0.13%)</title><rect x="35.2773%" y="213" width="0.1291%" height="15" fill="rgb(230,99,41)" fg:x="24862" fg:w="91"/><text x="35.5273%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (38 samples, 0.05%)</title><rect x="35.4972%" y="181" width="0.0539%" height="15" fill="rgb(253,106,12)" fg:x="25017" fg:w="38"/><text x="35.7472%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (229 samples, 0.32%)</title><rect x="35.4064%" y="213" width="0.3249%" height="15" fill="rgb(213,46,41)" fg:x="24953" fg:w="229"/><text x="35.6564%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (205 samples, 0.29%)</title><rect x="35.4404%" y="197" width="0.2909%" height="15" fill="rgb(215,133,35)" fg:x="24977" fg:w="205"/><text x="35.6904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (127 samples, 0.18%)</title><rect x="35.5511%" y="181" width="0.1802%" height="15" fill="rgb(213,28,5)" fg:x="25055" fg:w="127"/><text x="35.8011%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (61 samples, 0.09%)</title><rect x="35.6448%" y="165" width="0.0866%" height="15" fill="rgb(215,77,49)" fg:x="25121" fg:w="61"/><text x="35.8948%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (407 samples, 0.58%)</title><rect x="35.1637%" y="229" width="0.5775%" height="15" fill="rgb(248,100,22)" fg:x="24782" fg:w="407"/><text x="35.4137%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.04%)</title><rect x="35.7412%" y="229" width="0.0411%" height="15" fill="rgb(208,67,9)" fg:x="25189" fg:w="29"/><text x="35.9912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="35.7824%" y="229" width="0.0227%" height="15" fill="rgb(219,133,21)" fg:x="25218" fg:w="16"/><text x="36.0324%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (42 samples, 0.06%)</title><rect x="35.8150%" y="229" width="0.0596%" height="15" fill="rgb(246,46,29)" fg:x="25241" fg:w="42"/><text x="36.0650%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (96 samples, 0.14%)</title><rect x="35.8746%" y="229" width="0.1362%" height="15" fill="rgb(246,185,52)" fg:x="25283" fg:w="96"/><text x="36.1246%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,615 samples, 2.29%)</title><rect x="34.1393%" y="261" width="2.2916%" height="15" fill="rgb(252,136,11)" fg:x="24060" fg:w="1615"/><text x="34.3893%" y="271.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,137 samples, 1.61%)</title><rect x="34.8175%" y="245" width="1.6133%" height="15" fill="rgb(219,138,53)" fg:x="24538" fg:w="1137"/><text x="35.0675%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (296 samples, 0.42%)</title><rect x="36.0108%" y="229" width="0.4200%" height="15" fill="rgb(211,51,23)" fg:x="25379" fg:w="296"/><text x="36.2608%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,447 samples, 3.47%)</title><rect x="32.9673%" y="277" width="3.4721%" height="15" fill="rgb(247,221,28)" fg:x="23234" fg:w="2447"/><text x="33.2173%" y="287.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (888 samples, 1.26%)</title><rect x="36.4394%" y="277" width="1.2600%" height="15" fill="rgb(251,222,45)" fg:x="25681" fg:w="888"/><text x="36.6894%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (15 samples, 0.02%)</title><rect x="37.6994%" y="277" width="0.0213%" height="15" fill="rgb(217,162,53)" fg:x="26569" fg:w="15"/><text x="37.9494%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (79 samples, 0.11%)</title><rect x="37.8668%" y="261" width="0.1121%" height="15" fill="rgb(229,93,14)" fg:x="26687" fg:w="79"/><text x="38.1168%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (178 samples, 0.25%)</title><rect x="38.0896%" y="245" width="0.2526%" height="15" fill="rgb(209,67,49)" fg:x="26844" fg:w="178"/><text x="38.3396%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (572 samples, 0.81%)</title><rect x="37.7206%" y="277" width="0.8116%" height="15" fill="rgb(213,87,29)" fg:x="26584" fg:w="572"/><text x="37.9706%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (390 samples, 0.55%)</title><rect x="37.9789%" y="261" width="0.5534%" height="15" fill="rgb(205,151,52)" fg:x="26766" fg:w="390"/><text x="38.2289%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (134 samples, 0.19%)</title><rect x="38.3421%" y="245" width="0.1901%" height="15" fill="rgb(253,215,39)" fg:x="27022" fg:w="134"/><text x="38.5921%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (56 samples, 0.08%)</title><rect x="38.5323%" y="277" width="0.0795%" height="15" fill="rgb(221,220,41)" fg:x="27156" fg:w="56"/><text x="38.7823%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (344 samples, 0.49%)</title><rect x="38.6217%" y="277" width="0.4881%" height="15" fill="rgb(218,133,21)" fg:x="27219" fg:w="344"/><text x="38.8717%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (359 samples, 0.51%)</title><rect x="40.7898%" y="245" width="0.5094%" height="15" fill="rgb(221,193,43)" fg:x="28747" fg:w="359"/><text x="41.0398%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,713 samples, 2.43%)</title><rect x="39.4432%" y="261" width="2.4306%" height="15" fill="rgb(240,128,52)" fg:x="27798" fg:w="1713"/><text x="39.6932%" y="271.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (405 samples, 0.57%)</title><rect x="41.2992%" y="245" width="0.5747%" height="15" fill="rgb(253,114,12)" fg:x="29106" fg:w="405"/><text x="41.5492%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,032 samples, 2.88%)</title><rect x="39.1098%" y="277" width="2.8833%" height="15" fill="rgb(215,223,47)" fg:x="27563" fg:w="2032"/><text x="39.3598%" y="287.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (84 samples, 0.12%)</title><rect x="41.8738%" y="261" width="0.1192%" height="15" fill="rgb(248,225,23)" fg:x="29511" fg:w="84"/><text x="42.1238%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,605 samples, 3.70%)</title><rect x="43.8163%" y="261" width="3.6963%" height="15" fill="rgb(250,108,0)" fg:x="30880" fg:w="2605"/><text x="44.0663%" y="271.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.03%)</title><rect x="47.5126%" y="261" width="0.0326%" height="15" fill="rgb(228,208,7)" fg:x="33485" fg:w="23"/><text x="47.7626%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="47.5140%" y="245" width="0.0312%" height="15" fill="rgb(244,45,10)" fg:x="33486" fg:w="22"/><text x="47.7640%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.03%)</title><rect x="47.5155%" y="229" width="0.0298%" height="15" fill="rgb(207,125,25)" fg:x="33487" fg:w="21"/><text x="47.7655%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="47.5155%" y="213" width="0.0298%" height="15" fill="rgb(210,195,18)" fg:x="33487" fg:w="21"/><text x="47.7655%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.02%)</title><rect x="47.5211%" y="197" width="0.0241%" height="15" fill="rgb(249,80,12)" fg:x="33491" fg:w="17"/><text x="47.7711%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,357 samples, 3.34%)</title><rect x="47.5453%" y="261" width="3.3444%" height="15" fill="rgb(221,65,9)" fg:x="33508" fg:w="2357"/><text x="47.7953%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (422 samples, 0.60%)</title><rect x="50.8897%" y="261" width="0.5988%" height="15" fill="rgb(235,49,36)" fg:x="35865" fg:w="422"/><text x="51.1397%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (78 samples, 0.11%)</title><rect x="51.5253%" y="245" width="0.1107%" height="15" fill="rgb(225,32,20)" fg:x="36313" fg:w="78"/><text x="51.7753%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 0.24%)</title><rect x="51.7566%" y="229" width="0.2426%" height="15" fill="rgb(215,141,46)" fg:x="36476" fg:w="171"/><text x="52.0066%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (508 samples, 0.72%)</title><rect x="51.4884%" y="261" width="0.7208%" height="15" fill="rgb(250,160,47)" fg:x="36287" fg:w="508"/><text x="51.7384%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (404 samples, 0.57%)</title><rect x="51.6360%" y="245" width="0.5732%" height="15" fill="rgb(216,222,40)" fg:x="36391" fg:w="404"/><text x="51.8860%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (148 samples, 0.21%)</title><rect x="51.9993%" y="229" width="0.2100%" height="15" fill="rgb(234,217,39)" fg:x="36647" fg:w="148"/><text x="52.2493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.04%)</title><rect x="53.7885%" y="197" width="0.0426%" height="15" fill="rgb(207,178,40)" fg:x="37908" fg:w="30"/><text x="54.0385%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.04%)</title><rect x="53.7899%" y="181" width="0.0411%" height="15" fill="rgb(221,136,13)" fg:x="37909" fg:w="29"/><text x="54.0399%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (8,344 samples, 11.84%)</title><rect x="41.9930%" y="277" width="11.8395%" height="15" fill="rgb(249,199,10)" fg:x="29595" fg:w="8344"/><text x="42.2430%" y="287.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,144 samples, 1.62%)</title><rect x="52.2093%" y="261" width="1.6232%" height="15" fill="rgb(249,222,13)" fg:x="36795" fg:w="1144"/><text x="52.4593%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.05%)</title><rect x="53.7871%" y="245" width="0.0454%" height="15" fill="rgb(244,185,38)" fg:x="37907" fg:w="32"/><text x="54.0371%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="53.7871%" y="229" width="0.0454%" height="15" fill="rgb(236,202,9)" fg:x="37907" fg:w="32"/><text x="54.0371%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.04%)</title><rect x="53.7885%" y="213" width="0.0440%" height="15" fill="rgb(250,229,37)" fg:x="37908" fg:w="31"/><text x="54.0385%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (11 samples, 0.02%)</title><rect x="53.8325%" y="277" width="0.0156%" height="15" fill="rgb(206,174,23)" fg:x="37939" fg:w="11"/><text x="54.0825%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (8 samples, 0.01%)</title><rect x="53.8481%" y="277" width="0.0114%" height="15" fill="rgb(211,33,43)" fg:x="37950" fg:w="8"/><text x="54.0981%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.04%)</title><rect x="54.9166%" y="261" width="0.0355%" height="15" fill="rgb(245,58,50)" fg:x="38703" fg:w="25"/><text x="55.1666%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (29 samples, 0.04%)</title><rect x="54.9520%" y="245" width="0.0411%" height="15" fill="rgb(244,68,36)" fg:x="38728" fg:w="29"/><text x="55.2020%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="55.0003%" y="245" width="0.0170%" height="15" fill="rgb(232,229,15)" fg:x="38762" fg:w="12"/><text x="55.2503%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="55.0173%" y="245" width="0.0184%" height="15" fill="rgb(254,30,23)" fg:x="38774" fg:w="13"/><text x="55.2673%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="55.0358%" y="245" width="0.0184%" height="15" fill="rgb(235,160,14)" fg:x="38787" fg:w="13"/><text x="55.2858%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.04%)</title><rect x="55.3763%" y="181" width="0.0426%" height="15" fill="rgb(212,155,44)" fg:x="39027" fg:w="30"/><text x="55.6263%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (112 samples, 0.16%)</title><rect x="55.2656%" y="197" width="0.1589%" height="15" fill="rgb(226,2,50)" fg:x="38949" fg:w="112"/><text x="55.5156%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (245 samples, 0.35%)</title><rect x="55.1010%" y="229" width="0.3476%" height="15" fill="rgb(234,177,6)" fg:x="38833" fg:w="245"/><text x="55.3510%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (163 samples, 0.23%)</title><rect x="55.2174%" y="213" width="0.2313%" height="15" fill="rgb(217,24,9)" fg:x="38915" fg:w="163"/><text x="55.4674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.02%)</title><rect x="55.4245%" y="197" width="0.0241%" height="15" fill="rgb(220,13,46)" fg:x="39061" fg:w="17"/><text x="55.6745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.02%)</title><rect x="55.4487%" y="229" width="0.0241%" height="15" fill="rgb(239,221,27)" fg:x="39078" fg:w="17"/><text x="55.6987%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (104 samples, 0.15%)</title><rect x="55.4728%" y="229" width="0.1476%" height="15" fill="rgb(222,198,25)" fg:x="39095" fg:w="104"/><text x="55.7228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (41 samples, 0.06%)</title><rect x="55.5622%" y="213" width="0.0582%" height="15" fill="rgb(211,99,13)" fg:x="39158" fg:w="41"/><text x="55.8122%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="55.6204%" y="229" width="0.0170%" height="15" fill="rgb(232,111,31)" fg:x="39199" fg:w="12"/><text x="55.8704%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (24 samples, 0.03%)</title><rect x="55.6374%" y="229" width="0.0341%" height="15" fill="rgb(245,82,37)" fg:x="39211" fg:w="24"/><text x="55.8874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="55.6799%" y="229" width="0.0170%" height="15" fill="rgb(227,149,46)" fg:x="39241" fg:w="12"/><text x="55.9299%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (414 samples, 0.59%)</title><rect x="55.7310%" y="213" width="0.5874%" height="15" fill="rgb(218,36,50)" fg:x="39277" fg:w="414"/><text x="55.9810%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.05%)</title><rect x="56.3511%" y="197" width="0.0497%" height="15" fill="rgb(226,80,48)" fg:x="39714" fg:w="35"/><text x="56.6011%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (47 samples, 0.07%)</title><rect x="56.4008%" y="197" width="0.0667%" height="15" fill="rgb(238,224,15)" fg:x="39749" fg:w="47"/><text x="56.6508%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (105 samples, 0.15%)</title><rect x="56.3312%" y="213" width="0.1490%" height="15" fill="rgb(241,136,10)" fg:x="39700" fg:w="105"/><text x="56.5812%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="56.4674%" y="197" width="0.0128%" height="15" fill="rgb(208,32,45)" fg:x="39796" fg:w="9"/><text x="56.7174%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="56.4802%" y="213" width="0.0128%" height="15" fill="rgb(207,135,9)" fg:x="39805" fg:w="9"/><text x="56.7302%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="56.7214%" y="149" width="0.0199%" height="15" fill="rgb(206,86,44)" fg:x="39975" fg:w="14"/><text x="56.9714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (107 samples, 0.15%)</title><rect x="56.6377%" y="165" width="0.1518%" height="15" fill="rgb(245,177,15)" fg:x="39916" fg:w="107"/><text x="56.8877%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (34 samples, 0.05%)</title><rect x="56.7413%" y="149" width="0.0482%" height="15" fill="rgb(206,64,50)" fg:x="39989" fg:w="34"/><text x="56.9913%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (154 samples, 0.22%)</title><rect x="56.5739%" y="197" width="0.2185%" height="15" fill="rgb(234,36,40)" fg:x="39871" fg:w="154"/><text x="56.8239%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (123 samples, 0.17%)</title><rect x="56.6179%" y="181" width="0.1745%" height="15" fill="rgb(213,64,8)" fg:x="39902" fg:w="123"/><text x="56.8679%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (781 samples, 1.11%)</title><rect x="55.6970%" y="229" width="1.1082%" height="15" fill="rgb(210,75,36)" fg:x="39253" fg:w="781"/><text x="55.9470%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (220 samples, 0.31%)</title><rect x="56.4930%" y="213" width="0.3122%" height="15" fill="rgb(229,88,21)" fg:x="39814" fg:w="220"/><text x="56.7430%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="56.8761%" y="213" width="0.0369%" height="15" fill="rgb(252,204,47)" fg:x="40084" fg:w="26"/><text x="57.1261%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (40 samples, 0.06%)</title><rect x="56.9130%" y="213" width="0.0568%" height="15" fill="rgb(208,77,27)" fg:x="40110" fg:w="40"/><text x="57.1630%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (154 samples, 0.22%)</title><rect x="56.8052%" y="229" width="0.2185%" height="15" fill="rgb(221,76,26)" fg:x="40034" fg:w="154"/><text x="57.0552%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (38 samples, 0.05%)</title><rect x="56.9697%" y="213" width="0.0539%" height="15" fill="rgb(225,139,18)" fg:x="40150" fg:w="38"/><text x="57.2197%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,398 samples, 1.98%)</title><rect x="55.0656%" y="245" width="1.9837%" height="15" fill="rgb(230,137,11)" fg:x="38808" fg:w="1398"/><text x="55.3156%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="57.0336%" y="229" width="0.0156%" height="15" fill="rgb(212,28,1)" fg:x="40195" fg:w="11"/><text x="57.2836%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="57.0776%" y="245" width="0.0114%" height="15" fill="rgb(248,164,17)" fg:x="40226" fg:w="8"/><text x="57.3276%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.02%)</title><rect x="57.0889%" y="245" width="0.0199%" height="15" fill="rgb(222,171,42)" fg:x="40234" fg:w="14"/><text x="57.3389%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,521 samples, 2.16%)</title><rect x="54.9520%" y="261" width="2.1582%" height="15" fill="rgb(243,84,45)" fg:x="38728" fg:w="1521"/><text x="55.2020%" y="271.50">r..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="57.2322%" y="245" width="0.0128%" height="15" fill="rgb(252,49,23)" fg:x="40335" fg:w="9"/><text x="57.4822%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="57.2450%" y="245" width="0.0270%" height="15" fill="rgb(215,19,7)" fg:x="40344" fg:w="19"/><text x="57.4950%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (14 samples, 0.02%)</title><rect x="57.2805%" y="245" width="0.0199%" height="15" fill="rgb(238,81,41)" fg:x="40369" fg:w="14"/><text x="57.5305%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (8 samples, 0.01%)</title><rect x="57.3046%" y="245" width="0.0114%" height="15" fill="rgb(210,199,37)" fg:x="40386" fg:w="8"/><text x="57.5546%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="57.5189%" y="181" width="0.0227%" height="15" fill="rgb(244,192,49)" fg:x="40537" fg:w="16"/><text x="57.7689%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (77 samples, 0.11%)</title><rect x="57.4394%" y="197" width="0.1093%" height="15" fill="rgb(226,211,11)" fg:x="40481" fg:w="77"/><text x="57.6894%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (147 samples, 0.21%)</title><rect x="57.3486%" y="229" width="0.2086%" height="15" fill="rgb(236,162,54)" fg:x="40417" fg:w="147"/><text x="57.5986%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (98 samples, 0.14%)</title><rect x="57.4181%" y="213" width="0.1391%" height="15" fill="rgb(220,229,9)" fg:x="40466" fg:w="98"/><text x="57.6681%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="57.5572%" y="229" width="0.0142%" height="15" fill="rgb(250,87,22)" fg:x="40564" fg:w="10"/><text x="57.8072%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.01%)</title><rect x="57.5714%" y="229" width="0.0142%" height="15" fill="rgb(239,43,17)" fg:x="40574" fg:w="10"/><text x="57.8214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="57.5884%" y="229" width="0.0270%" height="15" fill="rgb(231,177,25)" fg:x="40586" fg:w="19"/><text x="57.8384%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (19 samples, 0.03%)</title><rect x="57.7104%" y="213" width="0.0270%" height="15" fill="rgb(219,179,1)" fg:x="40672" fg:w="19"/><text x="57.9604%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (8 samples, 0.01%)</title><rect x="57.7984%" y="197" width="0.0114%" height="15" fill="rgb(238,219,53)" fg:x="40734" fg:w="8"/><text x="58.0484%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (12 samples, 0.02%)</title><rect x="57.8098%" y="197" width="0.0170%" height="15" fill="rgb(232,167,36)" fg:x="40742" fg:w="12"/><text x="58.0598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="57.8268%" y="197" width="0.0184%" height="15" fill="rgb(244,19,51)" fg:x="40754" fg:w="13"/><text x="58.0768%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (194 samples, 0.28%)</title><rect x="57.8466%" y="197" width="0.2753%" height="15" fill="rgb(224,6,22)" fg:x="40768" fg:w="194"/><text x="58.0966%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (15 samples, 0.02%)</title><rect x="58.1957%" y="181" width="0.0213%" height="15" fill="rgb(224,145,5)" fg:x="41014" fg:w="15"/><text x="58.4457%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (100 samples, 0.14%)</title><rect x="58.2170%" y="181" width="0.1419%" height="15" fill="rgb(234,130,49)" fg:x="41029" fg:w="100"/><text x="58.4670%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="58.4710%" y="149" width="0.0284%" height="15" fill="rgb(254,6,2)" fg:x="41208" fg:w="20"/><text x="58.7210%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (87 samples, 0.12%)</title><rect x="58.3787%" y="165" width="0.1234%" height="15" fill="rgb(208,96,46)" fg:x="41143" fg:w="87"/><text x="58.6287%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (107 samples, 0.15%)</title><rect x="58.3589%" y="181" width="0.1518%" height="15" fill="rgb(239,3,39)" fg:x="41129" fg:w="107"/><text x="58.6089%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (70 samples, 0.10%)</title><rect x="58.5107%" y="181" width="0.0993%" height="15" fill="rgb(233,210,1)" fg:x="41236" fg:w="70"/><text x="58.7607%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (8 samples, 0.01%)</title><rect x="58.6966%" y="149" width="0.0114%" height="15" fill="rgb(244,137,37)" fg:x="41367" fg:w="8"/><text x="58.9466%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (8 samples, 0.01%)</title><rect x="58.6966%" y="133" width="0.0114%" height="15" fill="rgb(240,136,2)" fg:x="41367" fg:w="8"/><text x="58.9466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (30 samples, 0.04%)</title><rect x="58.7079%" y="149" width="0.0426%" height="15" fill="rgb(239,18,37)" fg:x="41375" fg:w="30"/><text x="58.9579%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (277 samples, 0.39%)</title><rect x="58.6100%" y="181" width="0.3930%" height="15" fill="rgb(218,185,22)" fg:x="41306" fg:w="277"/><text x="58.8600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (268 samples, 0.38%)</title><rect x="58.6228%" y="165" width="0.3803%" height="15" fill="rgb(225,218,4)" fg:x="41315" fg:w="268"/><text x="58.8728%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (173 samples, 0.25%)</title><rect x="58.7576%" y="149" width="0.2455%" height="15" fill="rgb(230,182,32)" fg:x="41410" fg:w="173"/><text x="59.0076%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (626 samples, 0.89%)</title><rect x="58.1219%" y="197" width="0.8882%" height="15" fill="rgb(242,56,43)" fg:x="40962" fg:w="626"/><text x="58.3719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (962 samples, 1.37%)</title><rect x="57.7374%" y="213" width="1.3650%" height="15" fill="rgb(233,99,24)" fg:x="40691" fg:w="962"/><text x="57.9874%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.08%)</title><rect x="59.0187%" y="197" width="0.0837%" height="15" fill="rgb(234,209,42)" fg:x="41594" fg:w="59"/><text x="59.2687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (71 samples, 0.10%)</title><rect x="59.1024%" y="213" width="0.1007%" height="15" fill="rgb(227,7,12)" fg:x="41653" fg:w="71"/><text x="59.3524%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="59.2031%" y="213" width="0.0284%" height="15" fill="rgb(245,203,43)" fg:x="41724" fg:w="20"/><text x="59.4531%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,143 samples, 1.62%)</title><rect x="57.6154%" y="229" width="1.6218%" height="15" fill="rgb(238,205,33)" fg:x="40605" fg:w="1143"/><text x="57.8654%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,494 samples, 2.12%)</title><rect x="57.1202%" y="261" width="2.1199%" height="15" fill="rgb(231,56,7)" fg:x="40256" fg:w="1494"/><text x="57.3702%" y="271.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,356 samples, 1.92%)</title><rect x="57.3160%" y="245" width="1.9241%" height="15" fill="rgb(244,186,29)" fg:x="40394" fg:w="1356"/><text x="57.5660%" y="255.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (38 samples, 0.05%)</title><rect x="59.2400%" y="261" width="0.0539%" height="15" fill="rgb(234,111,31)" fg:x="41750" fg:w="38"/><text x="59.4900%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (122 samples, 0.17%)</title><rect x="59.2939%" y="245" width="0.1731%" height="15" fill="rgb(241,149,10)" fg:x="41788" fg:w="122"/><text x="59.5439%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.02%)</title><rect x="59.6600%" y="229" width="0.0227%" height="15" fill="rgb(249,206,44)" fg:x="42046" fg:w="16"/><text x="59.9100%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="59.6827%" y="229" width="0.0128%" height="15" fill="rgb(251,153,30)" fg:x="42062" fg:w="9"/><text x="59.9327%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="59.6955%" y="229" width="0.0114%" height="15" fill="rgb(239,152,38)" fg:x="42071" fg:w="8"/><text x="59.9455%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="59.9495%" y="197" width="0.0170%" height="15" fill="rgb(249,139,47)" fg:x="42250" fg:w="12"/><text x="60.1995%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.03%)</title><rect x="59.9665%" y="197" width="0.0255%" height="15" fill="rgb(244,64,35)" fg:x="42262" fg:w="18"/><text x="60.2165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (45 samples, 0.06%)</title><rect x="60.1240%" y="165" width="0.0639%" height="15" fill="rgb(216,46,15)" fg:x="42373" fg:w="45"/><text x="60.3740%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,181 samples, 1.68%)</title><rect x="60.2546%" y="149" width="1.6757%" height="15" fill="rgb(250,74,19)" fg:x="42465" fg:w="1181"/><text x="60.5046%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (28 samples, 0.04%)</title><rect x="61.9303%" y="149" width="0.0397%" height="15" fill="rgb(249,42,33)" fg:x="43646" fg:w="28"/><text x="62.1803%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,614 samples, 2.29%)</title><rect x="59.7906%" y="213" width="2.2901%" height="15" fill="rgb(242,149,17)" fg:x="42138" fg:w="1614"/><text x="60.0406%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,472 samples, 2.09%)</title><rect x="59.9921%" y="197" width="2.0887%" height="15" fill="rgb(244,29,21)" fg:x="42280" fg:w="1472"/><text x="60.2421%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,444 samples, 2.05%)</title><rect x="60.0318%" y="181" width="2.0489%" height="15" fill="rgb(220,130,37)" fg:x="42308" fg:w="1444"/><text x="60.2818%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,330 samples, 1.89%)</title><rect x="60.1935%" y="165" width="1.8872%" height="15" fill="rgb(211,67,2)" fg:x="42422" fg:w="1330"/><text x="60.4435%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (78 samples, 0.11%)</title><rect x="61.9700%" y="149" width="0.1107%" height="15" fill="rgb(235,68,52)" fg:x="43674" fg:w="78"/><text x="62.2200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (136 samples, 0.19%)</title><rect x="62.0807%" y="213" width="0.1930%" height="15" fill="rgb(246,142,3)" fg:x="43752" fg:w="136"/><text x="62.3307%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (268 samples, 0.38%)</title><rect x="62.2737%" y="213" width="0.3803%" height="15" fill="rgb(241,25,7)" fg:x="43888" fg:w="268"/><text x="62.5237%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,251 samples, 3.19%)</title><rect x="59.4699%" y="245" width="3.1940%" height="15" fill="rgb(242,119,39)" fg:x="41912" fg:w="2251"/><text x="59.7199%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,080 samples, 2.95%)</title><rect x="59.7125%" y="229" width="2.9514%" height="15" fill="rgb(241,98,45)" fg:x="42083" fg:w="2080"/><text x="59.9625%" y="239.50">rus..</text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,388 samples, 3.39%)</title><rect x="59.2939%" y="261" width="3.3884%" height="15" fill="rgb(254,28,30)" fg:x="41788" fg:w="2388"/><text x="59.5439%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="62.6639%" y="245" width="0.0184%" height="15" fill="rgb(241,142,54)" fg:x="44163" fg:w="13"/><text x="62.9139%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.03%)</title><rect x="63.1364%" y="229" width="0.0326%" height="15" fill="rgb(222,85,15)" fg:x="44496" fg:w="23"/><text x="63.3864%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (11 samples, 0.02%)</title><rect x="63.4656%" y="213" width="0.0156%" height="15" fill="rgb(210,85,47)" fg:x="44728" fg:w="11"/><text x="63.7156%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="63.7891%" y="197" width="0.0213%" height="15" fill="rgb(224,206,25)" fg:x="44956" fg:w="15"/><text x="64.0391%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.02%)</title><rect x="64.1296%" y="181" width="0.0241%" height="15" fill="rgb(243,201,19)" fg:x="45196" fg:w="17"/><text x="64.3796%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (16 samples, 0.02%)</title><rect x="64.3865%" y="165" width="0.0227%" height="15" fill="rgb(236,59,4)" fg:x="45377" fg:w="16"/><text x="64.6365%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,389 samples, 1.97%)</title><rect x="62.6823%" y="261" width="1.9709%" height="15" fill="rgb(254,179,45)" fg:x="44176" fg:w="1389"/><text x="62.9323%" y="271.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,239 samples, 1.76%)</title><rect x="62.8952%" y="245" width="1.7580%" height="15" fill="rgb(226,14,10)" fg:x="44326" fg:w="1239"/><text x="63.1452%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,046 samples, 1.48%)</title><rect x="63.1690%" y="229" width="1.4842%" height="15" fill="rgb(244,27,41)" fg:x="44519" fg:w="1046"/><text x="63.4190%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (826 samples, 1.17%)</title><rect x="63.4812%" y="213" width="1.1720%" height="15" fill="rgb(235,35,32)" fg:x="44739" fg:w="826"/><text x="63.7312%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (594 samples, 0.84%)</title><rect x="63.8104%" y="197" width="0.8428%" height="15" fill="rgb(218,68,31)" fg:x="44971" fg:w="594"/><text x="64.0604%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (352 samples, 0.50%)</title><rect x="64.1538%" y="181" width="0.4995%" height="15" fill="rgb(207,120,37)" fg:x="45213" fg:w="352"/><text x="64.4038%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (172 samples, 0.24%)</title><rect x="64.4092%" y="165" width="0.2441%" height="15" fill="rgb(227,98,0)" fg:x="45393" fg:w="172"/><text x="64.6592%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (67 samples, 0.10%)</title><rect x="64.5581%" y="149" width="0.0951%" height="15" fill="rgb(207,7,3)" fg:x="45498" fg:w="67"/><text x="64.8081%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="64.6319%" y="133" width="0.0213%" height="15" fill="rgb(206,98,19)" fg:x="45550" fg:w="15"/><text x="64.8819%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (342 samples, 0.49%)</title><rect x="65.4549%" y="245" width="0.4853%" height="15" fill="rgb(217,5,26)" fg:x="46130" fg:w="342"/><text x="65.7049%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (693 samples, 0.98%)</title><rect x="65.9402%" y="245" width="0.9833%" height="15" fill="rgb(235,190,38)" fg:x="46472" fg:w="693"/><text x="66.1902%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,331 samples, 3.31%)</title><rect x="64.6532%" y="261" width="3.3075%" height="15" fill="rgb(247,86,24)" fg:x="45565" fg:w="2331"/><text x="64.9032%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (731 samples, 1.04%)</title><rect x="66.9235%" y="245" width="1.0372%" height="15" fill="rgb(205,101,16)" fg:x="47165" fg:w="731"/><text x="67.1735%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (51 samples, 0.07%)</title><rect x="67.9607%" y="261" width="0.0724%" height="15" fill="rgb(246,168,33)" fg:x="47896" fg:w="51"/><text x="68.2107%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (335 samples, 0.48%)</title><rect x="68.0331%" y="261" width="0.4753%" height="15" fill="rgb(231,114,1)" fg:x="47947" fg:w="335"/><text x="68.2831%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (10,326 samples, 14.65%)</title><rect x="53.8595%" y="277" width="14.6518%" height="15" fill="rgb(207,184,53)" fg:x="37958" fg:w="10326"/><text x="54.1095%" y="287.50">rust_qecp`rust_qecp::u..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (13 samples, 0.02%)</title><rect x="75.9649%" y="261" width="0.0184%" height="15" fill="rgb(224,95,51)" fg:x="53537" fg:w="13"/><text x="76.2149%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="76.0642%" y="245" width="0.0114%" height="15" fill="rgb(212,188,45)" fg:x="53607" fg:w="8"/><text x="76.3142%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (95 samples, 0.13%)</title><rect x="76.1167%" y="229" width="0.1348%" height="15" fill="rgb(223,154,38)" fg:x="53644" fg:w="95"/><text x="76.3667%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.06%)</title><rect x="76.1962%" y="213" width="0.0553%" height="15" fill="rgb(251,22,52)" fg:x="53700" fg:w="39"/><text x="76.4462%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (129 samples, 0.18%)</title><rect x="76.0755%" y="245" width="0.1830%" height="15" fill="rgb(229,209,22)" fg:x="53615" fg:w="129"/><text x="76.3255%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (204 samples, 0.29%)</title><rect x="75.9833%" y="261" width="0.2895%" height="15" fill="rgb(234,138,34)" fg:x="53550" fg:w="204"/><text x="76.2333%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="76.2586%" y="245" width="0.0142%" height="15" fill="rgb(212,95,11)" fg:x="53744" fg:w="10"/><text x="76.5086%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="76.2728%" y="261" width="0.0270%" height="15" fill="rgb(240,179,47)" fg:x="53754" fg:w="19"/><text x="76.5228%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (142 samples, 0.20%)</title><rect x="76.5395%" y="245" width="0.2015%" height="15" fill="rgb(240,163,11)" fg:x="53942" fg:w="142"/><text x="76.7895%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="76.7410%" y="245" width="0.0114%" height="15" fill="rgb(236,37,12)" fg:x="54084" fg:w="8"/><text x="76.9910%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (371 samples, 0.53%)</title><rect x="76.2997%" y="261" width="0.5264%" height="15" fill="rgb(232,164,16)" fg:x="53773" fg:w="371"/><text x="76.5497%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (46 samples, 0.07%)</title><rect x="76.7609%" y="245" width="0.0653%" height="15" fill="rgb(244,205,15)" fg:x="54098" fg:w="46"/><text x="77.0109%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (42 samples, 0.06%)</title><rect x="76.7666%" y="229" width="0.0596%" height="15" fill="rgb(223,117,47)" fg:x="54102" fg:w="42"/><text x="77.0166%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (27 samples, 0.04%)</title><rect x="76.8290%" y="261" width="0.0383%" height="15" fill="rgb(244,107,35)" fg:x="54146" fg:w="27"/><text x="77.0790%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.04%)</title><rect x="76.8673%" y="261" width="0.0426%" height="15" fill="rgb(205,140,8)" fg:x="54173" fg:w="30"/><text x="77.1173%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.03%)</title><rect x="76.8758%" y="245" width="0.0341%" height="15" fill="rgb(228,84,46)" fg:x="54179" fg:w="24"/><text x="77.1258%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.02%)</title><rect x="76.9099%" y="261" width="0.0241%" height="15" fill="rgb(254,188,9)" fg:x="54203" fg:w="17"/><text x="77.1599%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (162 samples, 0.23%)</title><rect x="76.9340%" y="261" width="0.2299%" height="15" fill="rgb(206,112,54)" fg:x="54220" fg:w="162"/><text x="77.1840%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (27 samples, 0.04%)</title><rect x="77.1255%" y="245" width="0.0383%" height="15" fill="rgb(216,84,49)" fg:x="54355" fg:w="27"/><text x="77.3755%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (27 samples, 0.04%)</title><rect x="77.1255%" y="229" width="0.0383%" height="15" fill="rgb(214,194,35)" fg:x="54355" fg:w="27"/><text x="77.3755%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (31 samples, 0.04%)</title><rect x="77.1653%" y="261" width="0.0440%" height="15" fill="rgb(249,28,3)" fg:x="54383" fg:w="31"/><text x="77.4153%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (51 samples, 0.07%)</title><rect x="77.2220%" y="261" width="0.0724%" height="15" fill="rgb(222,56,52)" fg:x="54423" fg:w="51"/><text x="77.4720%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.04%)</title><rect x="77.2944%" y="261" width="0.0426%" height="15" fill="rgb(245,217,50)" fg:x="54474" fg:w="30"/><text x="77.5444%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (82 samples, 0.12%)</title><rect x="77.3370%" y="261" width="0.1164%" height="15" fill="rgb(213,201,24)" fg:x="54504" fg:w="82"/><text x="77.5870%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="77.5356%" y="197" width="0.0128%" height="15" fill="rgb(248,116,28)" fg:x="54644" fg:w="9"/><text x="77.7856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="77.5569%" y="181" width="0.0128%" height="15" fill="rgb(219,72,43)" fg:x="54659" fg:w="9"/><text x="77.8069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="77.5697%" y="181" width="0.0298%" height="15" fill="rgb(209,138,14)" fg:x="54668" fg:w="21"/><text x="77.8197%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.02%)</title><rect x="77.5753%" y="165" width="0.0241%" height="15" fill="rgb(222,18,33)" fg:x="54672" fg:w="17"/><text x="77.8253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (43 samples, 0.06%)</title><rect x="77.5484%" y="197" width="0.0610%" height="15" fill="rgb(213,199,7)" fg:x="54653" fg:w="43"/><text x="77.7984%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (73 samples, 0.10%)</title><rect x="77.5214%" y="213" width="0.1036%" height="15" fill="rgb(250,110,10)" fg:x="54634" fg:w="73"/><text x="77.7714%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.01%)</title><rect x="77.6108%" y="197" width="0.0142%" height="15" fill="rgb(248,123,6)" fg:x="54697" fg:w="10"/><text x="77.8608%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="77.6250%" y="213" width="0.0128%" height="15" fill="rgb(206,91,31)" fg:x="54707" fg:w="9"/><text x="77.8750%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (121 samples, 0.17%)</title><rect x="77.4703%" y="261" width="0.1717%" height="15" fill="rgb(211,154,13)" fg:x="54598" fg:w="121"/><text x="77.7203%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (105 samples, 0.15%)</title><rect x="77.4930%" y="245" width="0.1490%" height="15" fill="rgb(225,148,7)" fg:x="54614" fg:w="105"/><text x="77.7430%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (101 samples, 0.14%)</title><rect x="77.4987%" y="229" width="0.1433%" height="15" fill="rgb(220,160,43)" fg:x="54618" fg:w="101"/><text x="77.7487%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (144 samples, 0.20%)</title><rect x="77.8066%" y="245" width="0.2043%" height="15" fill="rgb(213,52,39)" fg:x="54835" fg:w="144"/><text x="78.0566%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (196 samples, 0.28%)</title><rect x="78.0124%" y="245" width="0.2781%" height="15" fill="rgb(243,137,7)" fg:x="54980" fg:w="196"/><text x="78.2624%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (524 samples, 0.74%)</title><rect x="77.6463%" y="261" width="0.7435%" height="15" fill="rgb(230,79,13)" fg:x="54722" fg:w="524"/><text x="77.8963%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (70 samples, 0.10%)</title><rect x="78.2905%" y="245" width="0.0993%" height="15" fill="rgb(247,105,23)" fg:x="55176" fg:w="70"/><text x="78.5405%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="78.3714%" y="229" width="0.0184%" height="15" fill="rgb(223,179,41)" fg:x="55233" fg:w="13"/><text x="78.6214%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (144 samples, 0.20%)</title><rect x="78.3898%" y="261" width="0.2043%" height="15" fill="rgb(218,9,34)" fg:x="55246" fg:w="144"/><text x="78.6398%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (11 samples, 0.02%)</title><rect x="78.5941%" y="261" width="0.0156%" height="15" fill="rgb(222,106,8)" fg:x="55390" fg:w="11"/><text x="78.8441%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.04%)</title><rect x="78.6097%" y="261" width="0.0440%" height="15" fill="rgb(211,220,0)" fg:x="55401" fg:w="31"/><text x="78.8597%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (43 samples, 0.06%)</title><rect x="78.6537%" y="261" width="0.0610%" height="15" fill="rgb(229,52,16)" fg:x="55432" fg:w="43"/><text x="78.9037%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (14 samples, 0.02%)</title><rect x="78.6949%" y="245" width="0.0199%" height="15" fill="rgb(212,155,18)" fg:x="55461" fg:w="14"/><text x="78.9449%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="79.2965%" y="197" width="0.0284%" height="15" fill="rgb(242,21,14)" fg:x="55885" fg:w="20"/><text x="79.5465%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (100 samples, 0.14%)</title><rect x="79.1943%" y="213" width="0.1419%" height="15" fill="rgb(222,19,48)" fg:x="55813" fg:w="100"/><text x="79.4443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="79.3249%" y="197" width="0.0114%" height="15" fill="rgb(232,45,27)" fg:x="55905" fg:w="8"/><text x="79.5749%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (361 samples, 0.51%)</title><rect x="78.8311%" y="229" width="0.5122%" height="15" fill="rgb(249,103,42)" fg:x="55557" fg:w="361"/><text x="79.0811%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.03%)</title><rect x="79.4554%" y="181" width="0.0284%" height="15" fill="rgb(246,81,33)" fg:x="55997" fg:w="20"/><text x="79.7054%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (68 samples, 0.10%)</title><rect x="79.3972%" y="213" width="0.0965%" height="15" fill="rgb(252,33,42)" fg:x="55956" fg:w="68"/><text x="79.6472%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (46 samples, 0.07%)</title><rect x="79.4285%" y="197" width="0.0653%" height="15" fill="rgb(209,212,41)" fg:x="55978" fg:w="46"/><text x="79.6785%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.03%)</title><rect x="79.5093%" y="197" width="0.0270%" height="15" fill="rgb(207,154,6)" fg:x="56035" fg:w="19"/><text x="79.7593%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (8 samples, 0.01%)</title><rect x="79.5363%" y="197" width="0.0114%" height="15" fill="rgb(223,64,47)" fg:x="56054" fg:w="8"/><text x="79.7863%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (15 samples, 0.02%)</title><rect x="79.5476%" y="197" width="0.0213%" height="15" fill="rgb(211,161,38)" fg:x="56062" fg:w="15"/><text x="79.7976%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (218 samples, 0.31%)</title><rect x="79.3490%" y="229" width="0.3093%" height="15" fill="rgb(219,138,40)" fg:x="55922" fg:w="218"/><text x="79.5990%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (114 samples, 0.16%)</title><rect x="79.4966%" y="213" width="0.1618%" height="15" fill="rgb(241,228,46)" fg:x="56026" fg:w="114"/><text x="79.7466%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.09%)</title><rect x="79.5689%" y="197" width="0.0894%" height="15" fill="rgb(223,209,38)" fg:x="56077" fg:w="63"/><text x="79.8189%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (640 samples, 0.91%)</title><rect x="78.7531%" y="245" width="0.9081%" height="15" fill="rgb(236,164,45)" fg:x="55502" fg:w="640"/><text x="79.0031%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="79.6612%" y="245" width="0.0170%" height="15" fill="rgb(231,15,5)" fg:x="56142" fg:w="12"/><text x="79.9112%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (690 samples, 0.98%)</title><rect x="78.7147%" y="261" width="0.9791%" height="15" fill="rgb(252,35,15)" fg:x="55475" fg:w="690"/><text x="78.9647%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (53 samples, 0.08%)</title><rect x="79.6938%" y="261" width="0.0752%" height="15" fill="rgb(248,181,18)" fg:x="56165" fg:w="53"/><text x="79.9438%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (45,470 samples, 64.52%)</title><rect x="15.2875%" y="309" width="64.5184%" height="15" fill="rgb(233,39,42)" fg:x="10774" fg:w="45470"/><text x="15.5375%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,628 samples, 61.90%)</title><rect x="17.9011%" y="293" width="61.9048%" height="15" fill="rgb(238,110,33)" fg:x="12616" fg:w="43628"/><text x="18.1511%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,960 samples, 11.29%)</title><rect x="68.5113%" y="277" width="11.2946%" height="15" fill="rgb(233,195,10)" fg:x="48284" fg:w="7960"/><text x="68.7613%" y="287.50">rust_qecp`rust_qe..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (26 samples, 0.04%)</title><rect x="79.7690%" y="261" width="0.0369%" height="15" fill="rgb(254,105,3)" fg:x="56218" fg:w="26"/><text x="80.0190%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.05%)</title><rect x="83.4454%" y="293" width="0.0468%" height="15" fill="rgb(221,225,9)" fg:x="58809" fg:w="33"/><text x="83.6954%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (32 samples, 0.05%)</title><rect x="83.5958%" y="261" width="0.0454%" height="15" fill="rgb(224,227,45)" fg:x="58915" fg:w="32"/><text x="83.8458%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 0.06%)</title><rect x="83.6952%" y="245" width="0.0582%" height="15" fill="rgb(229,198,43)" fg:x="58985" fg:w="41"/><text x="83.9452%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (206 samples, 0.29%)</title><rect x="83.4951%" y="293" width="0.2923%" height="15" fill="rgb(206,209,35)" fg:x="58844" fg:w="206"/><text x="83.7451%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (140 samples, 0.20%)</title><rect x="83.5887%" y="277" width="0.1986%" height="15" fill="rgb(245,195,53)" fg:x="58910" fg:w="140"/><text x="83.8387%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (103 samples, 0.15%)</title><rect x="83.6412%" y="261" width="0.1461%" height="15" fill="rgb(240,92,26)" fg:x="58947" fg:w="103"/><text x="83.8912%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (24 samples, 0.03%)</title><rect x="83.7533%" y="245" width="0.0341%" height="15" fill="rgb(207,40,23)" fg:x="59026" fg:w="24"/><text x="84.0033%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.01%)</title><rect x="83.8711%" y="277" width="0.0142%" height="15" fill="rgb(223,111,35)" fg:x="59109" fg:w="10"/><text x="84.1211%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="84.1308%" y="213" width="0.0170%" height="15" fill="rgb(229,147,28)" fg:x="59292" fg:w="12"/><text x="84.3808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (80 samples, 0.11%)</title><rect x="84.0570%" y="229" width="0.1135%" height="15" fill="rgb(211,29,28)" fg:x="59240" fg:w="80"/><text x="84.3070%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.02%)</title><rect x="84.1478%" y="213" width="0.0227%" height="15" fill="rgb(228,72,33)" fg:x="59304" fg:w="16"/><text x="84.3978%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (89 samples, 0.13%)</title><rect x="84.0471%" y="245" width="0.1263%" height="15" fill="rgb(205,214,31)" fg:x="59233" fg:w="89"/><text x="84.2971%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (109 samples, 0.15%)</title><rect x="84.0243%" y="261" width="0.1547%" height="15" fill="rgb(224,111,15)" fg:x="59217" fg:w="109"/><text x="84.2743%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (277 samples, 0.39%)</title><rect x="83.7874%" y="293" width="0.3930%" height="15" fill="rgb(253,21,26)" fg:x="59050" fg:w="277"/><text x="84.0374%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (203 samples, 0.29%)</title><rect x="83.8924%" y="277" width="0.2880%" height="15" fill="rgb(245,139,43)" fg:x="59124" fg:w="203"/><text x="84.1424%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (3,084 samples, 4.38%)</title><rect x="79.8059%" y="309" width="4.3760%" height="15" fill="rgb(252,170,7)" fg:x="56244" fg:w="3084"/><text x="80.0559%" y="319.50">rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (189 samples, 0.27%)</title><rect x="84.1818%" y="309" width="0.2682%" height="15" fill="rgb(231,118,14)" fg:x="59328" fg:w="189"/><text x="84.4318%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (47 samples, 0.07%)</title><rect x="84.3833%" y="293" width="0.0667%" height="15" fill="rgb(238,83,0)" fg:x="59470" fg:w="47"/><text x="84.6333%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,587 samples, 9.35%)</title><rect x="84.4500%" y="309" width="9.3464%" height="15" fill="rgb(221,39,39)" fg:x="59517" fg:w="6587"/><text x="84.7000%" y="319.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (71 samples, 0.10%)</title><rect x="93.7965%" y="293" width="0.1007%" height="15" fill="rgb(222,119,46)" fg:x="66104" fg:w="71"/><text x="94.0465%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (345 samples, 0.49%)</title><rect x="93.7965%" y="309" width="0.4895%" height="15" fill="rgb(222,165,49)" fg:x="66104" fg:w="345"/><text x="94.0465%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (274 samples, 0.39%)</title><rect x="93.8972%" y="293" width="0.3888%" height="15" fill="rgb(219,113,52)" fg:x="66175" fg:w="274"/><text x="94.1472%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (84 samples, 0.12%)</title><rect x="94.2860%" y="309" width="0.1192%" height="15" fill="rgb(214,7,15)" fg:x="66449" fg:w="84"/><text x="94.5360%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,918 samples, 5.56%)</title><rect x="94.4052%" y="309" width="5.5593%" height="15" fill="rgb(235,32,4)" fg:x="66533" fg:w="3918"/><text x="94.6552%" y="319.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,849 samples, 4.04%)</title><rect x="95.9220%" y="293" width="4.0425%" height="15" fill="rgb(238,90,54)" fg:x="67602" fg:w="2849"/><text x="96.1720%" y="303.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (24 samples, 0.03%)</title><rect x="99.9645%" y="309" width="0.0341%" height="15" fill="rgb(213,208,19)" fg:x="70451" fg:w="24"/><text x="100.2145%" y="319.50"></text></g><g><title>all (70,476 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="70476"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,075 samples, 85.24%)</title><rect x="14.7582%" y="389" width="85.2418%" height="15" fill="rgb(207,194,5)" fg:x="10401" fg:w="60075"/><text x="15.0082%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,075 samples, 85.24%)</title><rect x="14.7582%" y="373" width="85.2418%" height="15" fill="rgb(206,111,30)" fg:x="10401" fg:w="60075"/><text x="15.0082%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,075 samples, 85.24%)</title><rect x="14.7582%" y="357" width="85.2418%" height="15" fill="rgb(243,70,54)" fg:x="10401" fg:w="60075"/><text x="15.0082%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,074 samples, 85.24%)</title><rect x="14.7596%" y="341" width="85.2404%" height="15" fill="rgb(242,28,8)" fg:x="10402" fg:w="60074"/><text x="15.0096%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,074 samples, 85.24%)</title><rect x="14.7596%" y="325" width="85.2404%" height="15" fill="rgb(219,106,18)" fg:x="10402" fg:w="60074"/><text x="15.0096%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>