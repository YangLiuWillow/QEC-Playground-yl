<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="69036"><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="0.0362%" y="133" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="9"/><text x="0.2862%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.04%)</title><rect x="0.0130%" y="149" width="0.0449%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="31"/><text x="0.2630%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.04%)</title><rect x="0.0666%" y="53" width="0.0449%" height="15" fill="rgb(221,193,54)" fg:x="46" fg:w="31"/><text x="0.3166%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (7 samples, 0.01%)</title><rect x="0.1115%" y="53" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="77" fg:w="7"/><text x="0.3615%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.1115%" y="37" width="0.0101%" height="15" fill="rgb(208,68,35)" fg:x="77" fg:w="7"/><text x="0.3615%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (48 samples, 0.07%)</title><rect x="0.0666%" y="69" width="0.0695%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="48"/><text x="0.3166%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (10 samples, 0.01%)</title><rect x="0.1217%" y="53" width="0.0145%" height="15" fill="rgb(207,160,47)" fg:x="84" fg:w="10"/><text x="0.3717%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="0.1217%" y="37" width="0.0145%" height="15" fill="rgb(228,23,34)" fg:x="84" fg:w="10"/><text x="0.3717%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.01%)</title><rect x="0.1362%" y="69" width="0.0116%" height="15" fill="rgb(218,30,26)" fg:x="94" fg:w="8"/><text x="0.3862%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.01%)</title><rect x="0.1362%" y="53" width="0.0116%" height="15" fill="rgb(220,122,19)" fg:x="94" fg:w="8"/><text x="0.3862%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.08%)</title><rect x="0.1477%" y="69" width="0.0840%" height="15" fill="rgb(250,228,42)" fg:x="102" fg:w="58"/><text x="0.3977%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (117 samples, 0.17%)</title><rect x="0.0652%" y="149" width="0.1695%" height="15" fill="rgb(240,193,28)" fg:x="45" fg:w="117"/><text x="0.3152%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (117 samples, 0.17%)</title><rect x="0.0652%" y="133" width="0.1695%" height="15" fill="rgb(216,20,37)" fg:x="45" fg:w="117"/><text x="0.3152%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.17%)</title><rect x="0.0652%" y="117" width="0.1695%" height="15" fill="rgb(206,188,39)" fg:x="45" fg:w="117"/><text x="0.3152%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.17%)</title><rect x="0.0652%" y="101" width="0.1695%" height="15" fill="rgb(217,207,13)" fg:x="45" fg:w="117"/><text x="0.3152%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (117 samples, 0.17%)</title><rect x="0.0652%" y="85" width="0.1695%" height="15" fill="rgb(231,73,38)" fg:x="45" fg:w="117"/><text x="0.3152%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.2419%" y="85" width="0.0116%" height="15" fill="rgb(225,20,46)" fg:x="167" fg:w="8"/><text x="0.4919%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (21 samples, 0.03%)</title><rect x="0.2347%" y="149" width="0.0304%" height="15" fill="rgb(210,31,41)" fg:x="162" fg:w="21"/><text x="0.4847%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.03%)</title><rect x="0.2347%" y="133" width="0.0304%" height="15" fill="rgb(221,200,47)" fg:x="162" fg:w="21"/><text x="0.4847%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.03%)</title><rect x="0.2347%" y="117" width="0.0304%" height="15" fill="rgb(226,26,5)" fg:x="162" fg:w="21"/><text x="0.4847%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (19 samples, 0.03%)</title><rect x="0.2376%" y="101" width="0.0275%" height="15" fill="rgb(249,33,26)" fg:x="164" fg:w="19"/><text x="0.4876%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (487 samples, 0.71%)</title><rect x="0.2651%" y="149" width="0.7054%" height="15" fill="rgb(235,183,28)" fg:x="183" fg:w="487"/><text x="0.5151%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (210 samples, 0.30%)</title><rect x="0.9705%" y="149" width="0.3042%" height="15" fill="rgb(221,5,38)" fg:x="670" fg:w="210"/><text x="1.2205%" y="159.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (7 samples, 0.01%)</title><rect x="1.2834%" y="149" width="0.0101%" height="15" fill="rgb(247,18,42)" fg:x="886" fg:w="7"/><text x="1.5334%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (66 samples, 0.10%)</title><rect x="5.7912%" y="133" width="0.0956%" height="15" fill="rgb(241,131,45)" fg:x="3998" fg:w="66"/><text x="6.0412%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (65 samples, 0.09%)</title><rect x="5.7926%" y="117" width="0.0942%" height="15" fill="rgb(249,31,29)" fg:x="3999" fg:w="65"/><text x="6.0426%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 0.11%)</title><rect x="5.8882%" y="133" width="0.1115%" height="15" fill="rgb(225,111,53)" fg:x="4065" fg:w="77"/><text x="6.1382%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.10%)</title><rect x="5.9998%" y="133" width="0.1043%" height="15" fill="rgb(238,160,17)" fg:x="4142" fg:w="72"/><text x="6.2498%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (44 samples, 0.06%)</title><rect x="6.1041%" y="133" width="0.0637%" height="15" fill="rgb(214,148,48)" fg:x="4214" fg:w="44"/><text x="6.3541%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (480 samples, 0.70%)</title><rect x="6.1678%" y="133" width="0.6953%" height="15" fill="rgb(232,36,49)" fg:x="4258" fg:w="480"/><text x="6.4178%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="6.8645%" y="53" width="0.0130%" height="15" fill="rgb(209,103,24)" fg:x="4739" fg:w="9"/><text x="7.1145%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="6.8645%" y="37" width="0.0130%" height="15" fill="rgb(229,88,8)" fg:x="4739" fg:w="9"/><text x="7.1145%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.02%)</title><rect x="6.8645%" y="69" width="0.0188%" height="15" fill="rgb(213,181,19)" fg:x="4739" fg:w="13"/><text x="7.1145%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.04%)</title><rect x="6.8645%" y="85" width="0.0391%" height="15" fill="rgb(254,191,54)" fg:x="4739" fg:w="27"/><text x="7.1145%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="6.8834%" y="69" width="0.0203%" height="15" fill="rgb(241,83,37)" fg:x="4752" fg:w="14"/><text x="7.1334%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.05%)</title><rect x="6.8631%" y="133" width="0.0464%" height="15" fill="rgb(233,36,39)" fg:x="4738" fg:w="32"/><text x="7.1131%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (31 samples, 0.04%)</title><rect x="6.8645%" y="117" width="0.0449%" height="15" fill="rgb(226,3,54)" fg:x="4739" fg:w="31"/><text x="7.1145%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.04%)</title><rect x="6.8645%" y="101" width="0.0449%" height="15" fill="rgb(245,192,40)" fg:x="4739" fg:w="31"/><text x="7.1145%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (75 samples, 0.11%)</title><rect x="7.5106%" y="117" width="0.1086%" height="15" fill="rgb(238,167,29)" fg:x="5185" fg:w="75"/><text x="7.7606%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="7.6612%" y="85" width="0.0130%" height="15" fill="rgb(232,182,51)" fg:x="5289" fg:w="9"/><text x="7.9112%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.02%)</title><rect x="7.6612%" y="101" width="0.0217%" height="15" fill="rgb(231,60,39)" fg:x="5289" fg:w="15"/><text x="7.9112%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (714 samples, 1.03%)</title><rect x="6.9094%" y="133" width="1.0342%" height="15" fill="rgb(208,69,12)" fg:x="4770" fg:w="714"/><text x="7.1594%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (220 samples, 0.32%)</title><rect x="7.6250%" y="117" width="0.3187%" height="15" fill="rgb(235,93,37)" fg:x="5264" fg:w="220"/><text x="7.8750%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (177 samples, 0.26%)</title><rect x="7.6873%" y="101" width="0.2564%" height="15" fill="rgb(213,116,39)" fg:x="5307" fg:w="177"/><text x="7.9373%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="7.9451%" y="133" width="0.0145%" height="15" fill="rgb(222,207,29)" fg:x="5485" fg:w="10"/><text x="8.1951%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (12 samples, 0.02%)</title><rect x="7.9596%" y="133" width="0.0174%" height="15" fill="rgb(206,96,30)" fg:x="5495" fg:w="12"/><text x="8.2096%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (173 samples, 0.25%)</title><rect x="10.6104%" y="117" width="0.2506%" height="15" fill="rgb(218,138,4)" fg:x="7325" fg:w="173"/><text x="10.8604%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (475 samples, 0.69%)</title><rect x="10.8740%" y="117" width="0.6880%" height="15" fill="rgb(250,191,14)" fg:x="7507" fg:w="475"/><text x="11.1240%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (23 samples, 0.03%)</title><rect x="11.6099%" y="101" width="0.0333%" height="15" fill="rgb(239,60,40)" fg:x="8015" fg:w="23"/><text x="11.8599%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,214 samples, 10.45%)</title><rect x="1.2935%" y="149" width="10.4496%" height="15" fill="rgb(206,27,48)" fg:x="893" fg:w="7214"/><text x="1.5435%" y="159.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,600 samples, 3.77%)</title><rect x="7.9770%" y="133" width="3.7662%" height="15" fill="rgb(225,35,8)" fg:x="5507" fg:w="2600"/><text x="8.2270%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (125 samples, 0.18%)</title><rect x="11.5621%" y="117" width="0.1811%" height="15" fill="rgb(250,213,24)" fg:x="7982" fg:w="125"/><text x="11.8121%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (69 samples, 0.10%)</title><rect x="11.6432%" y="101" width="0.0999%" height="15" fill="rgb(247,123,22)" fg:x="8038" fg:w="69"/><text x="11.8932%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 0.18%)</title><rect x="11.7765%" y="133" width="0.1811%" height="15" fill="rgb(231,138,38)" fg:x="8130" fg:w="125"/><text x="12.0265%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="11.9575%" y="133" width="0.0130%" height="15" fill="rgb(231,145,46)" fg:x="8255" fg:w="9"/><text x="12.2075%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="12.2907%" y="117" width="0.0174%" height="15" fill="rgb(251,118,11)" fg:x="8485" fg:w="12"/><text x="12.5407%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="12.3168%" y="117" width="0.0275%" height="15" fill="rgb(217,147,25)" fg:x="8503" fg:w="19"/><text x="12.5668%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.02%)</title><rect x="12.3544%" y="85" width="0.0246%" height="15" fill="rgb(247,81,37)" fg:x="8529" fg:w="17"/><text x="12.6044%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="12.3631%" y="69" width="0.0159%" height="15" fill="rgb(209,12,38)" fg:x="8535" fg:w="11"/><text x="12.6131%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="12.3660%" y="53" width="0.0130%" height="15" fill="rgb(227,1,9)" fg:x="8537" fg:w="9"/><text x="12.6160%" y="63.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (26 samples, 0.04%)</title><rect x="12.3443%" y="117" width="0.0377%" height="15" fill="rgb(248,47,43)" fg:x="8522" fg:w="26"/><text x="12.5943%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="12.3530%" y="101" width="0.0290%" height="15" fill="rgb(221,10,30)" fg:x="8528" fg:w="20"/><text x="12.6030%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (13 samples, 0.02%)</title><rect x="12.3863%" y="117" width="0.0188%" height="15" fill="rgb(210,229,1)" fg:x="8551" fg:w="13"/><text x="12.6363%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="12.4051%" y="117" width="0.0145%" height="15" fill="rgb(222,148,37)" fg:x="8564" fg:w="10"/><text x="12.6551%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (25 samples, 0.04%)</title><rect x="12.4196%" y="117" width="0.0362%" height="15" fill="rgb(234,67,33)" fg:x="8574" fg:w="25"/><text x="12.6696%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (542 samples, 0.79%)</title><rect x="11.9836%" y="133" width="0.7851%" height="15" fill="rgb(247,98,35)" fg:x="8273" fg:w="542"/><text x="12.2336%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (216 samples, 0.31%)</title><rect x="12.4558%" y="117" width="0.3129%" height="15" fill="rgb(247,138,52)" fg:x="8599" fg:w="216"/><text x="12.7058%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (719 samples, 1.04%)</title><rect x="11.7431%" y="149" width="1.0415%" height="15" fill="rgb(213,79,30)" fg:x="8107" fg:w="719"/><text x="11.9931%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (9 samples, 0.01%)</title><rect x="12.7846%" y="149" width="0.0130%" height="15" fill="rgb(246,177,23)" fg:x="8826" fg:w="9"/><text x="13.0346%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (9 samples, 0.01%)</title><rect x="12.7846%" y="133" width="0.0130%" height="15" fill="rgb(230,62,27)" fg:x="8826" fg:w="9"/><text x="13.0346%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (24 samples, 0.03%)</title><rect x="12.7977%" y="149" width="0.0348%" height="15" fill="rgb(216,154,8)" fg:x="8835" fg:w="24"/><text x="13.0477%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (21 samples, 0.03%)</title><rect x="12.8020%" y="133" width="0.0304%" height="15" fill="rgb(244,35,45)" fg:x="8838" fg:w="21"/><text x="13.0520%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.01%)</title><rect x="12.8180%" y="117" width="0.0145%" height="15" fill="rgb(251,115,12)" fg:x="8849" fg:w="10"/><text x="13.0680%" y="127.50"></text></g><g><title>dyld`start (8,862 samples, 12.84%)</title><rect x="0.0000%" y="389" width="12.8368%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="8862"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (8,859 samples, 12.83%)</title><rect x="0.0043%" y="373" width="12.8324%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,859 samples, 12.83%)</title><rect x="0.0043%" y="357" width="12.8324%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="367.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,859 samples, 12.83%)</title><rect x="0.0043%" y="341" width="12.8324%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="351.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,859 samples, 12.83%)</title><rect x="0.0043%" y="325" width="12.8324%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="335.50">rust_qecp`std::sys_..</text></g><g><title>rust_qecp`rust_qecp::main (8,859 samples, 12.83%)</title><rect x="0.0043%" y="309" width="12.8324%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="319.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (8,859 samples, 12.83%)</title><rect x="0.0043%" y="293" width="12.8324%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="303.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (8,859 samples, 12.83%)</title><rect x="0.0043%" y="277" width="12.8324%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="287.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (8,859 samples, 12.83%)</title><rect x="0.0043%" y="261" width="12.8324%" height="15" fill="rgb(253,215,40)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="271.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,859 samples, 12.83%)</title><rect x="0.0043%" y="245" width="12.8324%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="255.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,859 samples, 12.83%)</title><rect x="0.0043%" y="229" width="12.8324%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="239.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,859 samples, 12.83%)</title><rect x="0.0043%" y="213" width="12.8324%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="223.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,859 samples, 12.83%)</title><rect x="0.0043%" y="197" width="12.8324%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="207.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,859 samples, 12.83%)</title><rect x="0.0043%" y="181" width="12.8324%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="191.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,859 samples, 12.83%)</title><rect x="0.0043%" y="165" width="12.8324%" height="15" fill="rgb(240,68,47)" fg:x="3" fg:w="8859"/><text x="0.2543%" y="175.50">rust_qecp`rust_qecp..</text></g><g><title>libsystem_kernel.dylib`__exit (7 samples, 0.01%)</title><rect x="12.8368%" y="389" width="0.0101%" height="15" fill="rgb(210,16,53)" fg:x="8862" fg:w="7"/><text x="13.0868%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="12.8513%" y="229" width="0.0101%" height="15" fill="rgb(235,124,12)" fg:x="8872" fg:w="7"/><text x="13.1013%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (10 samples, 0.01%)</title><rect x="12.8513%" y="309" width="0.0145%" height="15" fill="rgb(224,169,11)" fg:x="8872" fg:w="10"/><text x="13.1013%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (10 samples, 0.01%)</title><rect x="12.8513%" y="293" width="0.0145%" height="15" fill="rgb(250,166,2)" fg:x="8872" fg:w="10"/><text x="13.1013%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="12.8513%" y="277" width="0.0145%" height="15" fill="rgb(242,216,29)" fg:x="8872" fg:w="10"/><text x="13.1013%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="12.8513%" y="261" width="0.0145%" height="15" fill="rgb(230,116,27)" fg:x="8872" fg:w="10"/><text x="13.1013%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (10 samples, 0.01%)</title><rect x="12.8513%" y="245" width="0.0145%" height="15" fill="rgb(228,99,48)" fg:x="8872" fg:w="10"/><text x="13.1013%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="20.1779%" y="277" width="0.0232%" height="15" fill="rgb(253,11,6)" fg:x="13930" fg:w="16"/><text x="20.4279%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (89 samples, 0.13%)</title><rect x="20.2068%" y="197" width="0.1289%" height="15" fill="rgb(247,143,39)" fg:x="13950" fg:w="89"/><text x="20.4568%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.13%)</title><rect x="20.2068%" y="181" width="0.1289%" height="15" fill="rgb(236,97,10)" fg:x="13950" fg:w="89"/><text x="20.4568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (92 samples, 0.13%)</title><rect x="20.2068%" y="213" width="0.1333%" height="15" fill="rgb(233,208,19)" fg:x="13950" fg:w="92"/><text x="20.4568%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (103 samples, 0.15%)</title><rect x="20.2068%" y="229" width="0.1492%" height="15" fill="rgb(216,164,2)" fg:x="13950" fg:w="103"/><text x="20.4568%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="20.3401%" y="213" width="0.0159%" height="15" fill="rgb(220,129,5)" fg:x="14042" fg:w="11"/><text x="20.5901%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (105 samples, 0.15%)</title><rect x="20.2054%" y="277" width="0.1521%" height="15" fill="rgb(242,17,10)" fg:x="13949" fg:w="105"/><text x="20.4554%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (105 samples, 0.15%)</title><rect x="20.2054%" y="261" width="0.1521%" height="15" fill="rgb(242,107,0)" fg:x="13949" fg:w="105"/><text x="20.4554%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (105 samples, 0.15%)</title><rect x="20.2054%" y="245" width="0.1521%" height="15" fill="rgb(251,28,31)" fg:x="13949" fg:w="105"/><text x="20.4554%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (121 samples, 0.18%)</title><rect x="21.2425%" y="261" width="0.1753%" height="15" fill="rgb(233,223,10)" fg:x="14665" fg:w="121"/><text x="21.4925%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (121 samples, 0.18%)</title><rect x="21.2425%" y="245" width="0.1753%" height="15" fill="rgb(215,21,27)" fg:x="14665" fg:w="121"/><text x="21.4925%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (222 samples, 0.32%)</title><rect x="21.4178%" y="261" width="0.3216%" height="15" fill="rgb(232,23,21)" fg:x="14786" fg:w="222"/><text x="21.6678%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (679 samples, 0.98%)</title><rect x="21.8306%" y="245" width="0.9835%" height="15" fill="rgb(244,5,23)" fg:x="15071" fg:w="679"/><text x="22.0806%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (11 samples, 0.02%)</title><rect x="22.8142%" y="245" width="0.0159%" height="15" fill="rgb(226,81,46)" fg:x="15750" fg:w="11"/><text x="23.0642%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (310 samples, 0.45%)</title><rect x="22.8330%" y="245" width="0.4490%" height="15" fill="rgb(247,70,30)" fg:x="15763" fg:w="310"/><text x="23.0830%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (198 samples, 0.29%)</title><rect x="23.4515%" y="229" width="0.2868%" height="15" fill="rgb(212,68,19)" fg:x="16190" fg:w="198"/><text x="23.7015%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (216 samples, 0.31%)</title><rect x="23.7398%" y="229" width="0.3129%" height="15" fill="rgb(240,187,13)" fg:x="16389" fg:w="216"/><text x="23.9898%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (216 samples, 0.31%)</title><rect x="23.7398%" y="213" width="0.3129%" height="15" fill="rgb(223,113,26)" fg:x="16389" fg:w="216"/><text x="23.9898%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (20 samples, 0.03%)</title><rect x="64.5562%" y="197" width="0.0290%" height="15" fill="rgb(206,192,2)" fg:x="44567" fg:w="20"/><text x="64.8062%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (27,981 samples, 40.53%)</title><rect x="24.0570%" y="229" width="40.5310%" height="15" fill="rgb(241,108,4)" fg:x="16608" fg:w="27981"/><text x="24.3070%" y="239.50">rust_qecp`PerfectMatching::Expand</text></g><g><title>rust_qecp`PerfectMatching::Augment (22 samples, 0.03%)</title><rect x="64.5562%" y="213" width="0.0319%" height="15" fill="rgb(247,173,49)" fg:x="44567" fg:w="22"/><text x="64.8062%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (213 samples, 0.31%)</title><rect x="67.6444%" y="181" width="0.3085%" height="15" fill="rgb(224,114,35)" fg:x="46699" fg:w="213"/><text x="67.8944%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,116 samples, 1.62%)</title><rect x="66.3770%" y="213" width="1.6165%" height="15" fill="rgb(245,159,27)" fg:x="45824" fg:w="1116"/><text x="66.6270%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (241 samples, 0.35%)</title><rect x="67.6444%" y="197" width="0.3491%" height="15" fill="rgb(245,172,44)" fg:x="46699" fg:w="241"/><text x="67.8944%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (28 samples, 0.04%)</title><rect x="67.9530%" y="181" width="0.0406%" height="15" fill="rgb(236,23,11)" fg:x="46912" fg:w="28"/><text x="68.2030%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,647 samples, 3.83%)</title><rect x="64.5895%" y="229" width="3.8342%" height="15" fill="rgb(205,117,38)" fg:x="44590" fg:w="2647"/><text x="64.8395%" y="239.50">rust..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (297 samples, 0.43%)</title><rect x="67.9935%" y="213" width="0.4302%" height="15" fill="rgb(237,72,25)" fg:x="46940" fg:w="297"/><text x="68.2435%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (1,832 samples, 2.65%)</title><rect x="68.4237%" y="229" width="2.6537%" height="15" fill="rgb(244,70,9)" fg:x="47237" fg:w="1832"/><text x="68.6737%" y="239.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,659 samples, 2.40%)</title><rect x="68.6743%" y="213" width="2.4031%" height="15" fill="rgb(217,125,39)" fg:x="47410" fg:w="1659"/><text x="68.9243%" y="223.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (10,931 samples, 15.83%)</title><rect x="71.0774%" y="229" width="15.8338%" height="15" fill="rgb(235,36,10)" fg:x="49069" fg:w="10931"/><text x="71.3274%" y="239.50">rust_qecp`PerfectMatchin..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (108 samples, 0.16%)</title><rect x="92.5387%" y="197" width="0.1564%" height="15" fill="rgb(251,123,47)" fg:x="63885" fg:w="108"/><text x="92.7887%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (139 samples, 0.20%)</title><rect x="92.5387%" y="213" width="0.2013%" height="15" fill="rgb(221,13,13)" fg:x="63885" fg:w="139"/><text x="92.7887%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (31 samples, 0.04%)</title><rect x="92.6951%" y="197" width="0.0449%" height="15" fill="rgb(238,131,9)" fg:x="63993" fg:w="31"/><text x="92.9451%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (4,032 samples, 5.84%)</title><rect x="86.9112%" y="229" width="5.8404%" height="15" fill="rgb(211,50,8)" fg:x="60000" fg:w="4032"/><text x="87.1612%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (8 samples, 0.01%)</title><rect x="92.7400%" y="213" width="0.0116%" height="15" fill="rgb(245,182,24)" fg:x="64024" fg:w="8"/><text x="92.9900%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (48,326 samples, 70.00%)</title><rect x="23.2835%" y="245" width="70.0012%" height="15" fill="rgb(242,14,37)" fg:x="16074" fg:w="48326"/><text x="23.5335%" y="255.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (368 samples, 0.53%)</title><rect x="92.7516%" y="229" width="0.5331%" height="15" fill="rgb(246,228,12)" fg:x="64032" fg:w="368"/><text x="93.0016%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (38 samples, 0.06%)</title><rect x="93.2847%" y="229" width="0.0550%" height="15" fill="rgb(213,55,15)" fg:x="64400" fg:w="38"/><text x="93.5347%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (47 samples, 0.07%)</title><rect x="93.2847%" y="245" width="0.0681%" height="15" fill="rgb(209,9,3)" fg:x="64400" fg:w="47"/><text x="93.5347%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="93.3426%" y="229" width="0.0101%" height="15" fill="rgb(230,59,30)" fg:x="64440" fg:w="7"/><text x="93.5926%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="93.3426%" y="213" width="0.0101%" height="15" fill="rgb(209,121,21)" fg:x="64440" fg:w="7"/><text x="93.5926%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (50,552 samples, 73.23%)</title><rect x="20.3575%" y="277" width="73.2256%" height="15" fill="rgb(220,109,13)" fg:x="14054" fg:w="50552"/><text x="20.6075%" y="287.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (49,598 samples, 71.84%)</title><rect x="21.7394%" y="261" width="71.8437%" height="15" fill="rgb(232,18,1)" fg:x="15008" fg:w="49598"/><text x="21.9894%" y="271.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (159 samples, 0.23%)</title><rect x="93.3527%" y="245" width="0.2303%" height="15" fill="rgb(215,41,42)" fg:x="64447" fg:w="159"/><text x="93.6027%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (55,863 samples, 80.92%)</title><rect x="12.8846%" y="293" width="80.9187%" height="15" fill="rgb(224,123,36)" fg:x="8895" fg:w="55863"/><text x="13.1346%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (152 samples, 0.22%)</title><rect x="93.5831%" y="277" width="0.2202%" height="15" fill="rgb(240,125,3)" fg:x="64606" fg:w="152"/><text x="93.8331%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (55,902 samples, 80.98%)</title><rect x="12.8658%" y="309" width="80.9751%" height="15" fill="rgb(205,98,50)" fg:x="8882" fg:w="55902"/><text x="13.1158%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (26 samples, 0.04%)</title><rect x="93.8032%" y="293" width="0.0377%" height="15" fill="rgb(205,185,37)" fg:x="64758" fg:w="26"/><text x="94.0532%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (510 samples, 0.74%)</title><rect x="93.8409%" y="309" width="0.7387%" height="15" fill="rgb(238,207,15)" fg:x="64784" fg:w="510"/><text x="94.0909%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (58 samples, 0.08%)</title><rect x="94.5796%" y="309" width="0.0840%" height="15" fill="rgb(213,199,42)" fg:x="65294" fg:w="58"/><text x="94.8296%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (21 samples, 0.03%)</title><rect x="94.6332%" y="293" width="0.0304%" height="15" fill="rgb(235,201,11)" fg:x="65331" fg:w="21"/><text x="94.8832%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,015 samples, 2.92%)</title><rect x="94.6637%" y="309" width="2.9188%" height="15" fill="rgb(207,46,11)" fg:x="65352" fg:w="2015"/><text x="94.9137%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (29 samples, 0.04%)</title><rect x="97.5824%" y="293" width="0.0420%" height="15" fill="rgb(241,35,35)" fg:x="67367" fg:w="29"/><text x="97.8324%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (166 samples, 0.24%)</title><rect x="97.5824%" y="309" width="0.2405%" height="15" fill="rgb(243,32,47)" fg:x="67367" fg:w="166"/><text x="97.8324%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (137 samples, 0.20%)</title><rect x="97.6244%" y="293" width="0.1984%" height="15" fill="rgb(247,202,23)" fg:x="67396" fg:w="137"/><text x="97.8744%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (1,497 samples, 2.17%)</title><rect x="97.8258%" y="309" width="2.1684%" height="15" fill="rgb(219,102,11)" fg:x="67535" fg:w="1497"/><text x="98.0758%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (1,063 samples, 1.54%)</title><rect x="98.4544%" y="293" width="1.5398%" height="15" fill="rgb(243,110,44)" fg:x="67969" fg:w="1063"/><text x="98.7044%" y="303.50"></text></g><g><title>all (69,036 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="69036"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,167 samples, 87.15%)</title><rect x="12.8469%" y="389" width="87.1531%" height="15" fill="rgb(216,99,12)" fg:x="8869" fg:w="60167"/><text x="13.0969%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,167 samples, 87.15%)</title><rect x="12.8469%" y="373" width="87.1531%" height="15" fill="rgb(226,22,26)" fg:x="8869" fg:w="60167"/><text x="13.0969%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,167 samples, 87.15%)</title><rect x="12.8469%" y="357" width="87.1531%" height="15" fill="rgb(217,163,10)" fg:x="8869" fg:w="60167"/><text x="13.0969%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,167 samples, 87.15%)</title><rect x="12.8469%" y="341" width="87.1531%" height="15" fill="rgb(213,25,53)" fg:x="8869" fg:w="60167"/><text x="13.0969%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,167 samples, 87.15%)</title><rect x="12.8469%" y="325" width="87.1531%" height="15" fill="rgb(252,105,26)" fg:x="8869" fg:w="60167"/><text x="13.0969%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>