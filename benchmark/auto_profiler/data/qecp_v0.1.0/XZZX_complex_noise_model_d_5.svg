<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60403"><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (13 samples, 0.02%)</title><rect x="0.0116%" y="69" width="0.0215%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="13"/><text x="0.2616%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.0364%" y="53" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="7"/><text x="0.2864%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (39 samples, 0.06%)</title><rect x="0.0497%" y="53" width="0.0646%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="39"/><text x="0.2997%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (20 samples, 0.03%)</title><rect x="0.0811%" y="37" width="0.0331%" height="15" fill="rgb(248,212,6)" fg:x="49" fg:w="20"/><text x="0.3311%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (51 samples, 0.08%)</title><rect x="0.0331%" y="69" width="0.0844%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="51"/><text x="0.2831%" y="79.50"></text></g><g><title>dyld`start (75 samples, 0.12%)</title><rect x="0.0000%" y="309" width="0.1242%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="75"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (75 samples, 0.12%)</title><rect x="0.0000%" y="293" width="0.1242%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="75"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (75 samples, 0.12%)</title><rect x="0.0000%" y="277" width="0.1242%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="75"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (74 samples, 0.12%)</title><rect x="0.0017%" y="261" width="0.1225%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="74"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (74 samples, 0.12%)</title><rect x="0.0017%" y="245" width="0.1225%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="74"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (74 samples, 0.12%)</title><rect x="0.0017%" y="229" width="0.1225%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="74"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (74 samples, 0.12%)</title><rect x="0.0017%" y="213" width="0.1225%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="74"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (74 samples, 0.12%)</title><rect x="0.0017%" y="197" width="0.1225%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="74"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (74 samples, 0.12%)</title><rect x="0.0017%" y="181" width="0.1225%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="74"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (74 samples, 0.12%)</title><rect x="0.0017%" y="165" width="0.1225%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="74"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="149" width="0.1225%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="74"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (74 samples, 0.12%)</title><rect x="0.0017%" y="133" width="0.1225%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="74"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="117" width="0.1225%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="74"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (74 samples, 0.12%)</title><rect x="0.0017%" y="101" width="0.1225%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="74"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (74 samples, 0.12%)</title><rect x="0.0017%" y="85" width="0.1225%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="74"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="0.1424%" y="229" width="0.0232%" height="15" fill="rgb(249,33,26)" fg:x="86" fg:w="14"/><text x="0.3924%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="0.1656%" y="229" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="100" fg:w="20"/><text x="0.4156%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="0.1987%" y="229" width="0.0199%" height="15" fill="rgb(221,5,38)" fg:x="120" fg:w="12"/><text x="0.4487%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="0.2185%" y="229" width="0.0281%" height="15" fill="rgb(247,18,42)" fg:x="132" fg:w="17"/><text x="0.4685%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="0.2285%" y="213" width="0.0182%" height="15" fill="rgb(241,131,45)" fg:x="138" fg:w="11"/><text x="0.4785%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="0.2467%" y="229" width="0.0215%" height="15" fill="rgb(249,31,29)" fg:x="149" fg:w="13"/><text x="0.4967%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="0.2682%" y="229" width="0.0132%" height="15" fill="rgb(225,111,53)" fg:x="162" fg:w="8"/><text x="0.5182%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="0.2814%" y="229" width="0.0182%" height="15" fill="rgb(238,160,17)" fg:x="170" fg:w="11"/><text x="0.5314%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="0.2997%" y="229" width="0.0149%" height="15" fill="rgb(214,148,48)" fg:x="181" fg:w="9"/><text x="0.5497%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.11%)</title><rect x="0.3146%" y="229" width="0.1142%" height="15" fill="rgb(232,36,49)" fg:x="190" fg:w="69"/><text x="0.5646%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.10%)</title><rect x="0.4669%" y="213" width="0.1026%" height="15" fill="rgb(209,103,24)" fg:x="282" fg:w="62"/><text x="0.7169%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.04%)</title><rect x="0.5248%" y="197" width="0.0447%" height="15" fill="rgb(229,88,8)" fg:x="317" fg:w="27"/><text x="0.7748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (28 samples, 0.05%)</title><rect x="0.5745%" y="213" width="0.0464%" height="15" fill="rgb(213,181,19)" fg:x="347" fg:w="28"/><text x="0.8245%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (14 samples, 0.02%)</title><rect x="0.5977%" y="197" width="0.0232%" height="15" fill="rgb(254,191,54)" fg:x="361" fg:w="14"/><text x="0.8477%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.02%)</title><rect x="0.5977%" y="181" width="0.0232%" height="15" fill="rgb(241,83,37)" fg:x="361" fg:w="14"/><text x="0.8477%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.20%)</title><rect x="0.4288%" y="229" width="0.1987%" height="15" fill="rgb(233,36,39)" fg:x="259" fg:w="120"/><text x="0.6788%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="0.6556%" y="229" width="0.0182%" height="15" fill="rgb(226,3,54)" fg:x="396" fg:w="11"/><text x="0.9056%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (38 samples, 0.06%)</title><rect x="0.7384%" y="213" width="0.0629%" height="15" fill="rgb(245,192,40)" fg:x="446" fg:w="38"/><text x="0.9884%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (14 samples, 0.02%)</title><rect x="0.8013%" y="213" width="0.0232%" height="15" fill="rgb(238,167,29)" fg:x="484" fg:w="14"/><text x="1.0513%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="0.8394%" y="181" width="0.0281%" height="15" fill="rgb(232,182,51)" fg:x="507" fg:w="17"/><text x="1.0894%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="0.8245%" y="213" width="0.0447%" height="15" fill="rgb(231,60,39)" fg:x="498" fg:w="27"/><text x="1.0745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="0.8394%" y="197" width="0.0298%" height="15" fill="rgb(208,69,12)" fg:x="507" fg:w="18"/><text x="1.0894%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="0.8692%" y="213" width="0.0232%" height="15" fill="rgb(235,93,37)" fg:x="525" fg:w="14"/><text x="1.1192%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="0.9735%" y="197" width="0.0199%" height="15" fill="rgb(213,116,39)" fg:x="588" fg:w="12"/><text x="1.2235%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 0.10%)</title><rect x="0.8940%" y="213" width="0.1010%" height="15" fill="rgb(222,207,29)" fg:x="540" fg:w="61"/><text x="1.1440%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="1.0016%" y="213" width="0.0132%" height="15" fill="rgb(206,96,30)" fg:x="605" fg:w="8"/><text x="1.2516%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (25 samples, 0.04%)</title><rect x="1.0149%" y="213" width="0.0414%" height="15" fill="rgb(218,138,4)" fg:x="613" fg:w="25"/><text x="1.2649%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (26 samples, 0.04%)</title><rect x="1.0562%" y="213" width="0.0430%" height="15" fill="rgb(250,191,14)" fg:x="638" fg:w="26"/><text x="1.3062%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="1.1125%" y="213" width="0.0414%" height="15" fill="rgb(239,60,40)" fg:x="672" fg:w="25"/><text x="1.3625%" y="223.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (31 samples, 0.05%)</title><rect x="1.1556%" y="213" width="0.0513%" height="15" fill="rgb(206,27,48)" fg:x="698" fg:w="31"/><text x="1.4056%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="1.1936%" y="197" width="0.0132%" height="15" fill="rgb(225,35,8)" fg:x="721" fg:w="8"/><text x="1.4436%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="1.2069%" y="213" width="0.0364%" height="15" fill="rgb(250,213,24)" fg:x="729" fg:w="22"/><text x="1.4569%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (21 samples, 0.03%)</title><rect x="1.2433%" y="213" width="0.0348%" height="15" fill="rgb(247,123,22)" fg:x="751" fg:w="21"/><text x="1.4933%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.02%)</title><rect x="1.3128%" y="149" width="0.0199%" height="15" fill="rgb(231,138,38)" fg:x="793" fg:w="12"/><text x="1.5628%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (23 samples, 0.04%)</title><rect x="1.3046%" y="165" width="0.0381%" height="15" fill="rgb(231,145,46)" fg:x="788" fg:w="23"/><text x="1.5546%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 0.06%)</title><rect x="1.2880%" y="213" width="0.0629%" height="15" fill="rgb(251,118,11)" fg:x="778" fg:w="38"/><text x="1.5380%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (34 samples, 0.06%)</title><rect x="1.2946%" y="197" width="0.0563%" height="15" fill="rgb(217,147,25)" fg:x="782" fg:w="34"/><text x="1.5446%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="1.3029%" y="181" width="0.0480%" height="15" fill="rgb(247,81,37)" fg:x="787" fg:w="29"/><text x="1.5529%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (66 samples, 0.11%)</title><rect x="1.3609%" y="213" width="0.1093%" height="15" fill="rgb(209,12,38)" fg:x="822" fg:w="66"/><text x="1.6109%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (32 samples, 0.05%)</title><rect x="1.4701%" y="213" width="0.0530%" height="15" fill="rgb(227,1,9)" fg:x="888" fg:w="32"/><text x="1.7201%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="1.5231%" y="213" width="0.0232%" height="15" fill="rgb(248,47,43)" fg:x="920" fg:w="14"/><text x="1.7731%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (8 samples, 0.01%)</title><rect x="1.5463%" y="213" width="0.0132%" height="15" fill="rgb(221,10,30)" fg:x="934" fg:w="8"/><text x="1.7963%" y="223.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (10 samples, 0.02%)</title><rect x="1.5595%" y="213" width="0.0166%" height="15" fill="rgb(210,229,1)" fg:x="942" fg:w="10"/><text x="1.8095%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.04%)</title><rect x="2.0794%" y="165" width="0.0430%" height="15" fill="rgb(222,148,37)" fg:x="1256" fg:w="26"/><text x="2.3294%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="2.0893%" y="149" width="0.0331%" height="15" fill="rgb(234,67,33)" fg:x="1262" fg:w="20"/><text x="2.3393%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.07%)</title><rect x="2.0595%" y="197" width="0.0662%" height="15" fill="rgb(247,98,35)" fg:x="1244" fg:w="40"/><text x="2.3095%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.05%)</title><rect x="2.0727%" y="181" width="0.0530%" height="15" fill="rgb(247,138,52)" fg:x="1252" fg:w="32"/><text x="2.3227%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="2.1621%" y="149" width="0.0132%" height="15" fill="rgb(213,79,30)" fg:x="1306" fg:w="8"/><text x="2.4121%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="2.1423%" y="197" width="0.0348%" height="15" fill="rgb(246,177,23)" fg:x="1294" fg:w="21"/><text x="2.3923%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="2.1472%" y="181" width="0.0298%" height="15" fill="rgb(230,62,27)" fg:x="1297" fg:w="18"/><text x="2.3972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="2.1605%" y="165" width="0.0166%" height="15" fill="rgb(216,154,8)" fg:x="1305" fg:w="10"/><text x="2.4105%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (359 samples, 0.59%)</title><rect x="1.5844%" y="213" width="0.5943%" height="15" fill="rgb(244,35,45)" fg:x="957" fg:w="359"/><text x="1.8344%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (36 samples, 0.06%)</title><rect x="14.4066%" y="197" width="0.0596%" height="15" fill="rgb(251,115,12)" fg:x="8702" fg:w="36"/><text x="14.6566%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (127 samples, 0.21%)</title><rect x="14.4662%" y="197" width="0.2103%" height="15" fill="rgb(240,54,50)" fg:x="8738" fg:w="127"/><text x="14.7162%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="14.6764%" y="197" width="0.0166%" height="15" fill="rgb(233,84,52)" fg:x="8865" fg:w="10"/><text x="14.9264%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (83 samples, 0.14%)</title><rect x="14.6930%" y="197" width="0.1374%" height="15" fill="rgb(207,117,47)" fg:x="8875" fg:w="83"/><text x="14.9430%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (69 samples, 0.11%)</title><rect x="15.3006%" y="181" width="0.1142%" height="15" fill="rgb(249,43,39)" fg:x="9242" fg:w="69"/><text x="15.5506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (412 samples, 0.68%)</title><rect x="14.8304%" y="197" width="0.6821%" height="15" fill="rgb(209,38,44)" fg:x="8958" fg:w="412"/><text x="15.0804%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.08%)</title><rect x="15.4280%" y="181" width="0.0844%" height="15" fill="rgb(236,212,23)" fg:x="9319" fg:w="51"/><text x="15.6780%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (44 samples, 0.07%)</title><rect x="15.4396%" y="165" width="0.0728%" height="15" fill="rgb(242,79,21)" fg:x="9326" fg:w="44"/><text x="15.6896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (17 samples, 0.03%)</title><rect x="15.5506%" y="181" width="0.0281%" height="15" fill="rgb(211,96,35)" fg:x="9393" fg:w="17"/><text x="15.8006%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (57 samples, 0.09%)</title><rect x="15.5125%" y="197" width="0.0944%" height="15" fill="rgb(253,215,40)" fg:x="9370" fg:w="57"/><text x="15.7625%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.02%)</title><rect x="15.5853%" y="181" width="0.0215%" height="15" fill="rgb(211,81,21)" fg:x="9414" fg:w="13"/><text x="15.8353%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (79 samples, 0.13%)</title><rect x="15.8486%" y="165" width="0.1308%" height="15" fill="rgb(208,190,38)" fg:x="9573" fg:w="79"/><text x="16.0986%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (276 samples, 0.46%)</title><rect x="15.6068%" y="197" width="0.4569%" height="15" fill="rgb(235,213,38)" fg:x="9427" fg:w="276"/><text x="15.8568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (220 samples, 0.36%)</title><rect x="15.6996%" y="181" width="0.3642%" height="15" fill="rgb(237,122,38)" fg:x="9483" fg:w="220"/><text x="15.9496%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (51 samples, 0.08%)</title><rect x="15.9793%" y="165" width="0.0844%" height="15" fill="rgb(244,218,35)" fg:x="9652" fg:w="51"/><text x="16.2293%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (125 samples, 0.21%)</title><rect x="16.0638%" y="197" width="0.2069%" height="15" fill="rgb(240,68,47)" fg:x="9703" fg:w="125"/><text x="16.3138%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (79 samples, 0.13%)</title><rect x="16.2707%" y="197" width="0.1308%" height="15" fill="rgb(210,16,53)" fg:x="9828" fg:w="79"/><text x="16.5207%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="16.4015%" y="197" width="0.0364%" height="15" fill="rgb(235,124,12)" fg:x="9907" fg:w="22"/><text x="16.6515%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (38 samples, 0.06%)</title><rect x="16.4396%" y="197" width="0.0629%" height="15" fill="rgb(224,169,11)" fg:x="9930" fg:w="38"/><text x="16.6896%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="16.5025%" y="197" width="0.0166%" height="15" fill="rgb(250,166,2)" fg:x="9968" fg:w="10"/><text x="16.7525%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="16.5306%" y="197" width="0.0166%" height="15" fill="rgb(242,216,29)" fg:x="9985" fg:w="10"/><text x="16.7806%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (127 samples, 0.21%)</title><rect x="16.5886%" y="181" width="0.2103%" height="15" fill="rgb(230,116,27)" fg:x="10020" fg:w="127"/><text x="16.8386%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (39 samples, 0.06%)</title><rect x="16.7343%" y="165" width="0.0646%" height="15" fill="rgb(228,99,48)" fg:x="10108" fg:w="39"/><text x="16.9843%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="16.7988%" y="181" width="0.0397%" height="15" fill="rgb(253,11,6)" fg:x="10147" fg:w="24"/><text x="17.0488%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (182 samples, 0.30%)</title><rect x="16.5488%" y="197" width="0.3013%" height="15" fill="rgb(247,143,39)" fg:x="9996" fg:w="182"/><text x="16.7988%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="16.8386%" y="181" width="0.0116%" height="15" fill="rgb(236,97,10)" fg:x="10171" fg:w="7"/><text x="17.0886%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (33 samples, 0.05%)</title><rect x="16.8502%" y="197" width="0.0546%" height="15" fill="rgb(233,208,19)" fg:x="10178" fg:w="33"/><text x="17.1002%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (437 samples, 0.72%)</title><rect x="16.9048%" y="197" width="0.7235%" height="15" fill="rgb(216,164,2)" fg:x="10211" fg:w="437"/><text x="17.1548%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (100 samples, 0.17%)</title><rect x="17.6283%" y="197" width="0.1656%" height="15" fill="rgb(220,129,5)" fg:x="10648" fg:w="100"/><text x="17.8783%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="17.8004%" y="197" width="0.0182%" height="15" fill="rgb(242,17,10)" fg:x="10752" fg:w="11"/><text x="18.0504%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (16 samples, 0.03%)</title><rect x="17.8220%" y="197" width="0.0265%" height="15" fill="rgb(242,107,0)" fg:x="10765" fg:w="16"/><text x="18.0720%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="17.8485%" y="197" width="0.0116%" height="15" fill="rgb(251,28,31)" fg:x="10781" fg:w="7"/><text x="18.0985%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.02%)</title><rect x="17.8749%" y="133" width="0.0199%" height="15" fill="rgb(233,223,10)" fg:x="10797" fg:w="12"/><text x="18.1249%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="17.8617%" y="197" width="0.0348%" height="15" fill="rgb(215,21,27)" fg:x="10789" fg:w="21"/><text x="18.1117%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="17.8667%" y="181" width="0.0298%" height="15" fill="rgb(232,23,21)" fg:x="10792" fg:w="18"/><text x="18.1167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.02%)</title><rect x="17.8733%" y="165" width="0.0232%" height="15" fill="rgb(244,5,23)" fg:x="10796" fg:w="14"/><text x="18.1233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="17.8733%" y="149" width="0.0232%" height="15" fill="rgb(226,81,46)" fg:x="10796" fg:w="14"/><text x="18.1233%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.03%)</title><rect x="18.0703%" y="133" width="0.0348%" height="15" fill="rgb(247,70,30)" fg:x="10915" fg:w="21"/><text x="18.3203%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="18.0852%" y="117" width="0.0199%" height="15" fill="rgb(212,68,19)" fg:x="10924" fg:w="12"/><text x="18.3352%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.05%)</title><rect x="18.0604%" y="149" width="0.0464%" height="15" fill="rgb(240,187,13)" fg:x="10909" fg:w="28"/><text x="18.3104%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.08%)</title><rect x="18.0339%" y="165" width="0.0795%" height="15" fill="rgb(223,113,26)" fg:x="10893" fg:w="48"/><text x="18.2839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="18.1862%" y="133" width="0.0116%" height="15" fill="rgb(206,192,2)" fg:x="10985" fg:w="7"/><text x="18.4362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="18.2209%" y="117" width="0.0149%" height="15" fill="rgb(241,108,4)" fg:x="11006" fg:w="9"/><text x="18.4709%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="18.2358%" y="117" width="0.0331%" height="15" fill="rgb(247,173,49)" fg:x="11015" fg:w="20"/><text x="18.4858%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="18.2408%" y="101" width="0.0281%" height="15" fill="rgb(224,114,35)" fg:x="11018" fg:w="17"/><text x="18.4908%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="18.2491%" y="85" width="0.0199%" height="15" fill="rgb(245,159,27)" fg:x="11023" fg:w="12"/><text x="18.4991%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (74 samples, 0.12%)</title><rect x="18.1978%" y="133" width="0.1225%" height="15" fill="rgb(245,172,44)" fg:x="10992" fg:w="74"/><text x="18.4478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.04%)</title><rect x="18.2772%" y="117" width="0.0430%" height="15" fill="rgb(236,23,11)" fg:x="11040" fg:w="26"/><text x="18.5272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.04%)</title><rect x="18.2805%" y="101" width="0.0397%" height="15" fill="rgb(205,117,38)" fg:x="11042" fg:w="24"/><text x="18.5305%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.02%)</title><rect x="18.2954%" y="85" width="0.0248%" height="15" fill="rgb(237,72,25)" fg:x="11051" fg:w="15"/><text x="18.5454%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.06%)</title><rect x="18.3501%" y="117" width="0.0596%" height="15" fill="rgb(244,70,9)" fg:x="11084" fg:w="36"/><text x="18.6001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.04%)</title><rect x="18.4097%" y="117" width="0.0381%" height="15" fill="rgb(217,125,39)" fg:x="11120" fg:w="23"/><text x="18.6597%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.03%)</title><rect x="18.4163%" y="101" width="0.0315%" height="15" fill="rgb(235,36,10)" fg:x="11124" fg:w="19"/><text x="18.6663%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (12 samples, 0.02%)</title><rect x="18.4511%" y="117" width="0.0199%" height="15" fill="rgb(251,123,47)" fg:x="11145" fg:w="12"/><text x="18.7011%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (8 samples, 0.01%)</title><rect x="18.4709%" y="117" width="0.0132%" height="15" fill="rgb(221,13,13)" fg:x="11157" fg:w="8"/><text x="18.7209%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (43 samples, 0.07%)</title><rect x="18.4908%" y="101" width="0.0712%" height="15" fill="rgb(238,131,9)" fg:x="11169" fg:w="43"/><text x="18.7408%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (34 samples, 0.06%)</title><rect x="18.5057%" y="85" width="0.0563%" height="15" fill="rgb(211,50,8)" fg:x="11178" fg:w="34"/><text x="18.7557%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.01%)</title><rect x="18.5487%" y="69" width="0.0132%" height="15" fill="rgb(245,182,24)" fg:x="11204" fg:w="8"/><text x="18.7987%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (55 samples, 0.09%)</title><rect x="18.4842%" y="117" width="0.0911%" height="15" fill="rgb(242,14,37)" fg:x="11165" fg:w="55"/><text x="18.7342%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="18.5620%" y="101" width="0.0132%" height="15" fill="rgb(246,228,12)" fg:x="11212" fg:w="8"/><text x="18.8120%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="18.5636%" y="85" width="0.0116%" height="15" fill="rgb(213,55,15)" fg:x="11213" fg:w="7"/><text x="18.8136%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (153 samples, 0.25%)</title><rect x="18.3368%" y="133" width="0.2533%" height="15" fill="rgb(209,9,3)" fg:x="11076" fg:w="153"/><text x="18.5868%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (315 samples, 0.52%)</title><rect x="18.1647%" y="149" width="0.5215%" height="15" fill="rgb(230,59,30)" fg:x="10972" fg:w="315"/><text x="18.4147%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.09%)</title><rect x="18.5918%" y="133" width="0.0944%" height="15" fill="rgb(209,121,21)" fg:x="11230" fg:w="57"/><text x="18.8418%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="18.6862%" y="149" width="0.0199%" height="15" fill="rgb(220,109,13)" fg:x="11287" fg:w="12"/><text x="18.9362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (374 samples, 0.62%)</title><rect x="18.1365%" y="165" width="0.6192%" height="15" fill="rgb(232,18,1)" fg:x="10955" fg:w="374"/><text x="18.3865%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="18.7242%" y="149" width="0.0315%" height="15" fill="rgb(215,41,42)" fg:x="11310" fg:w="19"/><text x="18.9742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="18.7309%" y="133" width="0.0248%" height="15" fill="rgb(224,123,36)" fg:x="11314" fg:w="15"/><text x="18.9809%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (524 samples, 0.87%)</title><rect x="17.8965%" y="197" width="0.8675%" height="15" fill="rgb(240,125,3)" fg:x="10810" fg:w="524"/><text x="18.1465%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (444 samples, 0.74%)</title><rect x="18.0289%" y="181" width="0.7351%" height="15" fill="rgb(205,98,50)" fg:x="10890" fg:w="444"/><text x="18.2789%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="18.9080%" y="181" width="0.0149%" height="15" fill="rgb(205,185,37)" fg:x="11421" fg:w="9"/><text x="19.1580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (146 samples, 0.24%)</title><rect x="19.3401%" y="165" width="0.2417%" height="15" fill="rgb(238,207,15)" fg:x="11682" fg:w="146"/><text x="19.5901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (29 samples, 0.05%)</title><rect x="19.5818%" y="165" width="0.0480%" height="15" fill="rgb(213,199,42)" fg:x="11828" fg:w="29"/><text x="19.8318%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (35 samples, 0.06%)</title><rect x="19.6298%" y="165" width="0.0579%" height="15" fill="rgb(235,201,11)" fg:x="11857" fg:w="35"/><text x="19.8798%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (103 samples, 0.17%)</title><rect x="19.6878%" y="165" width="0.1705%" height="15" fill="rgb(207,46,11)" fg:x="11892" fg:w="103"/><text x="19.9378%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (67 samples, 0.11%)</title><rect x="19.7474%" y="149" width="0.1109%" height="15" fill="rgb(241,35,35)" fg:x="11928" fg:w="67"/><text x="19.9974%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (567 samples, 0.94%)</title><rect x="18.9229%" y="181" width="0.9387%" height="15" fill="rgb(243,32,47)" fg:x="11430" fg:w="567"/><text x="19.1729%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (128 samples, 0.21%)</title><rect x="20.1397%" y="165" width="0.2119%" height="15" fill="rgb(247,202,23)" fg:x="12165" fg:w="128"/><text x="20.3897%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (42 samples, 0.07%)</title><rect x="20.3516%" y="165" width="0.0695%" height="15" fill="rgb(219,102,11)" fg:x="12293" fg:w="42"/><text x="20.6016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (31 samples, 0.05%)</title><rect x="20.4212%" y="165" width="0.0513%" height="15" fill="rgb(243,110,44)" fg:x="12335" fg:w="31"/><text x="20.6712%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (559 samples, 0.93%)</title><rect x="19.8616%" y="181" width="0.9255%" height="15" fill="rgb(222,74,54)" fg:x="11997" fg:w="559"/><text x="20.1116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (190 samples, 0.31%)</title><rect x="20.4725%" y="165" width="0.3146%" height="15" fill="rgb(216,99,12)" fg:x="12366" fg:w="190"/><text x="20.7225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (67 samples, 0.11%)</title><rect x="21.0486%" y="149" width="0.1109%" height="15" fill="rgb(226,22,26)" fg:x="12714" fg:w="67"/><text x="21.2986%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (296 samples, 0.49%)</title><rect x="20.7870%" y="181" width="0.4900%" height="15" fill="rgb(217,163,10)" fg:x="12556" fg:w="296"/><text x="21.0370%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (243 samples, 0.40%)</title><rect x="20.8748%" y="165" width="0.4023%" height="15" fill="rgb(213,25,53)" fg:x="12609" fg:w="243"/><text x="21.1248%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (71 samples, 0.12%)</title><rect x="21.1595%" y="149" width="0.1175%" height="15" fill="rgb(252,105,26)" fg:x="12781" fg:w="71"/><text x="21.4095%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (34 samples, 0.06%)</title><rect x="21.2771%" y="181" width="0.0563%" height="15" fill="rgb(220,39,43)" fg:x="12852" fg:w="34"/><text x="21.5271%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (264 samples, 0.44%)</title><rect x="21.3334%" y="181" width="0.4371%" height="15" fill="rgb(229,68,48)" fg:x="12886" fg:w="264"/><text x="21.5834%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (155 samples, 0.26%)</title><rect x="21.5138%" y="165" width="0.2566%" height="15" fill="rgb(252,8,32)" fg:x="12995" fg:w="155"/><text x="21.7638%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (155 samples, 0.26%)</title><rect x="21.5138%" y="149" width="0.2566%" height="15" fill="rgb(223,20,43)" fg:x="12995" fg:w="155"/><text x="21.7638%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (37 samples, 0.06%)</title><rect x="21.7704%" y="181" width="0.0613%" height="15" fill="rgb(229,81,49)" fg:x="13150" fg:w="37"/><text x="22.0204%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (10 samples, 0.02%)</title><rect x="21.8317%" y="181" width="0.0166%" height="15" fill="rgb(236,28,36)" fg:x="13187" fg:w="10"/><text x="22.0817%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="21.8483%" y="181" width="0.0166%" height="15" fill="rgb(249,185,26)" fg:x="13197" fg:w="10"/><text x="22.0983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (52 samples, 0.09%)</title><rect x="21.8665%" y="181" width="0.0861%" height="15" fill="rgb(249,174,33)" fg:x="13208" fg:w="52"/><text x="22.1165%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="21.9526%" y="181" width="0.0348%" height="15" fill="rgb(233,201,37)" fg:x="13260" fg:w="21"/><text x="22.2026%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.03%)</title><rect x="21.9873%" y="181" width="0.0265%" height="15" fill="rgb(221,78,26)" fg:x="13281" fg:w="16"/><text x="22.2373%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (52 samples, 0.09%)</title><rect x="22.1595%" y="149" width="0.0861%" height="15" fill="rgb(250,127,30)" fg:x="13385" fg:w="52"/><text x="22.4095%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (122 samples, 0.20%)</title><rect x="22.0453%" y="165" width="0.2020%" height="15" fill="rgb(230,49,44)" fg:x="13316" fg:w="122"/><text x="22.2953%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.05%)</title><rect x="22.2522%" y="165" width="0.0497%" height="15" fill="rgb(229,67,23)" fg:x="13441" fg:w="30"/><text x="22.5022%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,137 samples, 3.54%)</title><rect x="18.7739%" y="197" width="3.5379%" height="15" fill="rgb(249,83,47)" fg:x="11340" fg:w="2137"/><text x="19.0239%" y="207.50">rus..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (174 samples, 0.29%)</title><rect x="22.0237%" y="181" width="0.2881%" height="15" fill="rgb(215,43,3)" fg:x="13303" fg:w="174"/><text x="22.2737%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (119 samples, 0.20%)</title><rect x="22.3118%" y="197" width="0.1970%" height="15" fill="rgb(238,154,13)" fg:x="13477" fg:w="119"/><text x="22.5618%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (58 samples, 0.10%)</title><rect x="22.4128%" y="181" width="0.0960%" height="15" fill="rgb(219,56,2)" fg:x="13538" fg:w="58"/><text x="22.6628%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="22.4840%" y="165" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="13581" fg:w="15"/><text x="22.7340%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (77 samples, 0.13%)</title><rect x="22.5138%" y="197" width="0.1275%" height="15" fill="rgb(235,30,7)" fg:x="13599" fg:w="77"/><text x="22.7638%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="24.0419%" y="181" width="0.0298%" height="15" fill="rgb(250,79,13)" fg:x="14522" fg:w="18"/><text x="24.2919%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="24.0717%" y="181" width="0.0315%" height="15" fill="rgb(211,146,34)" fg:x="14540" fg:w="19"/><text x="24.3217%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="24.1031%" y="181" width="0.0166%" height="15" fill="rgb(228,22,38)" fg:x="14559" fg:w="10"/><text x="24.3531%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="24.1197%" y="181" width="0.0215%" height="15" fill="rgb(235,168,5)" fg:x="14569" fg:w="13"/><text x="24.3697%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (24 samples, 0.04%)</title><rect x="24.1412%" y="181" width="0.0397%" height="15" fill="rgb(221,155,16)" fg:x="14582" fg:w="24"/><text x="24.3912%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="24.1842%" y="181" width="0.0132%" height="15" fill="rgb(215,215,53)" fg:x="14608" fg:w="8"/><text x="24.4342%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (82 samples, 0.14%)</title><rect x="24.2074%" y="181" width="0.1358%" height="15" fill="rgb(223,4,10)" fg:x="14622" fg:w="82"/><text x="24.4574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.13%)</title><rect x="25.1627%" y="149" width="0.1341%" height="15" fill="rgb(234,103,6)" fg:x="15199" fg:w="81"/><text x="25.4127%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (155 samples, 0.26%)</title><rect x="25.0451%" y="165" width="0.2566%" height="15" fill="rgb(227,97,0)" fg:x="15128" fg:w="155"/><text x="25.2951%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="25.3017%" y="165" width="0.0116%" height="15" fill="rgb(234,150,53)" fg:x="15283" fg:w="7"/><text x="25.5517%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="25.3232%" y="165" width="0.0480%" height="15" fill="rgb(228,201,54)" fg:x="15296" fg:w="29"/><text x="25.5732%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="25.3713%" y="165" width="0.0265%" height="15" fill="rgb(222,22,37)" fg:x="15325" fg:w="16"/><text x="25.6213%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (66 samples, 0.11%)</title><rect x="25.3994%" y="165" width="0.1093%" height="15" fill="rgb(237,53,32)" fg:x="15342" fg:w="66"/><text x="25.6494%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (26 samples, 0.04%)</title><rect x="25.5087%" y="165" width="0.0430%" height="15" fill="rgb(233,25,53)" fg:x="15408" fg:w="26"/><text x="25.7587%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (13 samples, 0.02%)</title><rect x="25.5517%" y="165" width="0.0215%" height="15" fill="rgb(210,40,34)" fg:x="15434" fg:w="13"/><text x="25.8017%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="25.5732%" y="165" width="0.0199%" height="15" fill="rgb(241,220,44)" fg:x="15447" fg:w="12"/><text x="25.8232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="26.4225%" y="133" width="0.0166%" height="15" fill="rgb(235,28,35)" fg:x="15960" fg:w="10"/><text x="26.6725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (113 samples, 0.19%)</title><rect x="26.5020%" y="117" width="0.1871%" height="15" fill="rgb(210,56,17)" fg:x="16008" fg:w="113"/><text x="26.7520%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="26.6361%" y="101" width="0.0530%" height="15" fill="rgb(224,130,29)" fg:x="16089" fg:w="32"/><text x="26.8861%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (165 samples, 0.27%)</title><rect x="26.4391%" y="133" width="0.2732%" height="15" fill="rgb(235,212,8)" fg:x="15970" fg:w="165"/><text x="26.6891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="26.6891%" y="117" width="0.0232%" height="15" fill="rgb(223,33,50)" fg:x="16121" fg:w="14"/><text x="26.9391%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="26.7536%" y="117" width="0.0116%" height="15" fill="rgb(219,149,13)" fg:x="16160" fg:w="7"/><text x="27.0036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.05%)</title><rect x="26.8596%" y="101" width="0.0464%" height="15" fill="rgb(250,156,29)" fg:x="16224" fg:w="28"/><text x="27.1096%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (331 samples, 0.55%)</title><rect x="26.7122%" y="133" width="0.5480%" height="15" fill="rgb(216,193,19)" fg:x="16135" fg:w="331"/><text x="26.9622%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (299 samples, 0.50%)</title><rect x="26.7652%" y="117" width="0.4950%" height="15" fill="rgb(216,135,14)" fg:x="16167" fg:w="299"/><text x="27.0152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (214 samples, 0.35%)</title><rect x="26.9059%" y="101" width="0.3543%" height="15" fill="rgb(241,47,5)" fg:x="16252" fg:w="214"/><text x="27.1559%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (119 samples, 0.20%)</title><rect x="27.0632%" y="85" width="0.1970%" height="15" fill="rgb(233,42,35)" fg:x="16347" fg:w="119"/><text x="27.3132%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (657 samples, 1.09%)</title><rect x="26.1874%" y="149" width="1.0877%" height="15" fill="rgb(231,13,6)" fg:x="15818" fg:w="657"/><text x="26.4374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="27.2602%" y="133" width="0.0149%" height="15" fill="rgb(207,181,40)" fg:x="16466" fg:w="9"/><text x="27.5102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (37 samples, 0.06%)</title><rect x="27.2751%" y="149" width="0.0613%" height="15" fill="rgb(254,173,49)" fg:x="16475" fg:w="37"/><text x="27.5251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="27.3364%" y="149" width="0.0232%" height="15" fill="rgb(221,1,38)" fg:x="16512" fg:w="14"/><text x="27.5864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="27.3596%" y="149" width="0.0149%" height="15" fill="rgb(206,124,46)" fg:x="16526" fg:w="9"/><text x="27.6096%" y="159.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (68 samples, 0.11%)</title><rect x="27.3745%" y="149" width="0.1126%" height="15" fill="rgb(249,21,11)" fg:x="16535" fg:w="68"/><text x="27.6245%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (108 samples, 0.18%)</title><rect x="27.4870%" y="149" width="0.1788%" height="15" fill="rgb(222,201,40)" fg:x="16603" fg:w="108"/><text x="27.7370%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,504 samples, 4.15%)</title><rect x="24.3432%" y="181" width="4.1455%" height="15" fill="rgb(235,61,29)" fg:x="14704" fg:w="2504"/><text x="24.5932%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,742 samples, 2.88%)</title><rect x="25.6047%" y="165" width="2.8840%" height="15" fill="rgb(219,207,3)" fg:x="15466" fg:w="1742"/><text x="25.8547%" y="175.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (497 samples, 0.82%)</title><rect x="27.6658%" y="149" width="0.8228%" height="15" fill="rgb(222,56,46)" fg:x="16711" fg:w="497"/><text x="27.9158%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,549 samples, 5.88%)</title><rect x="22.6413%" y="197" width="5.8755%" height="15" fill="rgb(239,76,54)" fg:x="13676" fg:w="3549"/><text x="22.8913%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="28.4887%" y="181" width="0.0281%" height="15" fill="rgb(231,124,27)" fg:x="17208" fg:w="17"/><text x="28.7387%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,127 samples, 1.87%)</title><rect x="28.5168%" y="197" width="1.8658%" height="15" fill="rgb(249,195,6)" fg:x="17225" fg:w="1127"/><text x="28.7668%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (45 samples, 0.07%)</title><rect x="30.3826%" y="197" width="0.0745%" height="15" fill="rgb(237,174,47)" fg:x="18352" fg:w="45"/><text x="30.6326%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="30.7303%" y="181" width="0.0232%" height="15" fill="rgb(206,201,31)" fg:x="18562" fg:w="14"/><text x="30.9803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="30.7419%" y="165" width="0.0116%" height="15" fill="rgb(231,57,52)" fg:x="18569" fg:w="7"/><text x="30.9919%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="30.7419%" y="149" width="0.0116%" height="15" fill="rgb(248,177,22)" fg:x="18569" fg:w="7"/><text x="30.9919%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="30.7534%" y="181" width="0.0166%" height="15" fill="rgb(215,211,37)" fg:x="18576" fg:w="10"/><text x="31.0034%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="30.7700%" y="181" width="0.0248%" height="15" fill="rgb(241,128,51)" fg:x="18586" fg:w="15"/><text x="31.0200%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="30.7733%" y="165" width="0.0215%" height="15" fill="rgb(227,165,31)" fg:x="18588" fg:w="13"/><text x="31.0233%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (95 samples, 0.16%)</title><rect x="30.8097%" y="181" width="0.1573%" height="15" fill="rgb(228,167,24)" fg:x="18610" fg:w="95"/><text x="31.0597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="31.2220%" y="133" width="0.0397%" height="15" fill="rgb(228,143,12)" fg:x="18859" fg:w="24"/><text x="31.4720%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.03%)</title><rect x="31.2352%" y="117" width="0.0265%" height="15" fill="rgb(249,149,8)" fg:x="18867" fg:w="16"/><text x="31.4852%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.07%)</title><rect x="31.2104%" y="165" width="0.0662%" height="15" fill="rgb(243,35,44)" fg:x="18852" fg:w="40"/><text x="31.4604%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.06%)</title><rect x="31.2203%" y="149" width="0.0563%" height="15" fill="rgb(246,89,9)" fg:x="18858" fg:w="34"/><text x="31.4703%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="31.2617%" y="133" width="0.0149%" height="15" fill="rgb(233,213,13)" fg:x="18883" fg:w="9"/><text x="31.5117%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="31.2633%" y="117" width="0.0132%" height="15" fill="rgb(233,141,41)" fg:x="18884" fg:w="8"/><text x="31.5133%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (294 samples, 0.49%)</title><rect x="31.2816%" y="165" width="0.4867%" height="15" fill="rgb(239,167,4)" fg:x="18895" fg:w="294"/><text x="31.5316%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,086 samples, 1.80%)</title><rect x="30.4571%" y="197" width="1.7979%" height="15" fill="rgb(209,217,16)" fg:x="18397" fg:w="1086"/><text x="30.7071%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (778 samples, 1.29%)</title><rect x="30.9670%" y="181" width="1.2880%" height="15" fill="rgb(219,88,35)" fg:x="18705" fg:w="778"/><text x="31.2170%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (294 samples, 0.49%)</title><rect x="31.7683%" y="165" width="0.4867%" height="15" fill="rgb(220,193,23)" fg:x="19189" fg:w="294"/><text x="32.0183%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (49 samples, 0.08%)</title><rect x="32.2550%" y="197" width="0.0811%" height="15" fill="rgb(230,90,52)" fg:x="19483" fg:w="49"/><text x="32.5050%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.03%)</title><rect x="32.3361%" y="197" width="0.0331%" height="15" fill="rgb(252,106,19)" fg:x="19532" fg:w="20"/><text x="32.5861%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (424 samples, 0.70%)</title><rect x="32.3693%" y="197" width="0.7020%" height="15" fill="rgb(206,74,20)" fg:x="19552" fg:w="424"/><text x="32.6193%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (479 samples, 0.79%)</title><rect x="35.2168%" y="165" width="0.7930%" height="15" fill="rgb(230,138,44)" fg:x="21272" fg:w="479"/><text x="35.4668%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,794 samples, 2.97%)</title><rect x="33.8245%" y="181" width="2.9701%" height="15" fill="rgb(235,182,43)" fg:x="20431" fg:w="1794"/><text x="34.0745%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (474 samples, 0.78%)</title><rect x="36.0098%" y="165" width="0.7847%" height="15" fill="rgb(242,16,51)" fg:x="21751" fg:w="474"/><text x="36.2598%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,396 samples, 3.97%)</title><rect x="33.0712%" y="197" width="3.9667%" height="15" fill="rgb(248,9,4)" fg:x="19976" fg:w="2396"/><text x="33.3212%" y="207.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (147 samples, 0.24%)</title><rect x="36.7945%" y="181" width="0.2434%" height="15" fill="rgb(210,31,22)" fg:x="22225" fg:w="147"/><text x="37.0445%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,370 samples, 5.58%)</title><rect x="40.2745%" y="181" width="5.5792%" height="15" fill="rgb(239,54,39)" fg:x="24327" fg:w="3370"/><text x="40.5245%" y="191.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="45.9017%" y="101" width="0.0232%" height="15" fill="rgb(230,99,41)" fg:x="27726" fg:w="14"/><text x="46.1517%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="45.9017%" y="85" width="0.0232%" height="15" fill="rgb(253,106,12)" fg:x="27726" fg:w="14"/><text x="46.1517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="45.9050%" y="69" width="0.0199%" height="15" fill="rgb(213,46,41)" fg:x="27728" fg:w="12"/><text x="46.1550%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (31 samples, 0.05%)</title><rect x="45.8769%" y="117" width="0.0513%" height="15" fill="rgb(215,133,35)" fg:x="27711" fg:w="31"/><text x="46.1269%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.08%)</title><rect x="45.8636%" y="133" width="0.0762%" height="15" fill="rgb(213,28,5)" fg:x="27703" fg:w="46"/><text x="46.1136%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="45.9282%" y="117" width="0.0116%" height="15" fill="rgb(215,77,49)" fg:x="27742" fg:w="7"/><text x="46.1782%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (57 samples, 0.09%)</title><rect x="45.8537%" y="181" width="0.0944%" height="15" fill="rgb(248,100,22)" fg:x="27697" fg:w="57"/><text x="46.1037%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (56 samples, 0.09%)</title><rect x="45.8553%" y="165" width="0.0927%" height="15" fill="rgb(208,67,9)" fg:x="27698" fg:w="56"/><text x="46.1053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (54 samples, 0.09%)</title><rect x="45.8586%" y="149" width="0.0894%" height="15" fill="rgb(219,133,21)" fg:x="27700" fg:w="54"/><text x="46.1086%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,869 samples, 3.09%)</title><rect x="45.9480%" y="181" width="3.0942%" height="15" fill="rgb(246,46,29)" fg:x="27754" fg:w="1869"/><text x="46.1980%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (79 samples, 0.13%)</title><rect x="49.0423%" y="181" width="0.1308%" height="15" fill="rgb(246,185,52)" fg:x="29623" fg:w="79"/><text x="49.2923%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.02%)</title><rect x="49.2409%" y="165" width="0.0166%" height="15" fill="rgb(252,136,11)" fg:x="29743" fg:w="10"/><text x="49.4909%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="49.2575%" y="165" width="0.0182%" height="15" fill="rgb(219,138,53)" fg:x="29753" fg:w="11"/><text x="49.5075%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (68 samples, 0.11%)</title><rect x="49.3005%" y="165" width="0.1126%" height="15" fill="rgb(211,51,23)" fg:x="29779" fg:w="68"/><text x="49.5505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="49.6482%" y="117" width="0.0149%" height="15" fill="rgb(247,221,28)" fg:x="29989" fg:w="9"/><text x="49.8982%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="49.6499%" y="101" width="0.0132%" height="15" fill="rgb(251,222,45)" fg:x="29990" fg:w="8"/><text x="49.8999%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="49.6416%" y="149" width="0.0315%" height="15" fill="rgb(217,162,53)" fg:x="29985" fg:w="19"/><text x="49.8916%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="49.6449%" y="133" width="0.0281%" height="15" fill="rgb(229,93,14)" fg:x="29987" fg:w="17"/><text x="49.8949%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (285 samples, 0.47%)</title><rect x="49.6730%" y="149" width="0.4718%" height="15" fill="rgb(209,67,49)" fg:x="30004" fg:w="285"/><text x="49.9230%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (838 samples, 1.39%)</title><rect x="49.1731%" y="181" width="1.3873%" height="15" fill="rgb(213,87,29)" fg:x="29702" fg:w="838"/><text x="49.4231%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (693 samples, 1.15%)</title><rect x="49.4131%" y="165" width="1.1473%" height="15" fill="rgb(205,151,52)" fg:x="29847" fg:w="693"/><text x="49.6631%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (251 samples, 0.42%)</title><rect x="50.1449%" y="149" width="0.4155%" height="15" fill="rgb(253,215,39)" fg:x="30289" fg:w="251"/><text x="50.3949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="53.8400%" y="101" width="0.0116%" height="15" fill="rgb(221,220,41)" fg:x="32521" fg:w="7"/><text x="54.0900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.02%)</title><rect x="53.8533%" y="101" width="0.0232%" height="15" fill="rgb(218,133,21)" fg:x="32529" fg:w="14"/><text x="54.1033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (38 samples, 0.06%)</title><rect x="53.8367%" y="117" width="0.0629%" height="15" fill="rgb(221,193,43)" fg:x="32519" fg:w="38"/><text x="54.0867%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="53.8765%" y="101" width="0.0232%" height="15" fill="rgb(240,128,52)" fg:x="32543" fg:w="14"/><text x="54.1265%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (49 samples, 0.08%)</title><rect x="53.8285%" y="165" width="0.0811%" height="15" fill="rgb(253,114,12)" fg:x="32514" fg:w="49"/><text x="54.0785%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (46 samples, 0.08%)</title><rect x="53.8334%" y="149" width="0.0762%" height="15" fill="rgb(215,223,47)" fg:x="32517" fg:w="46"/><text x="54.0834%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (44 samples, 0.07%)</title><rect x="53.8367%" y="133" width="0.0728%" height="15" fill="rgb(248,225,23)" fg:x="32519" fg:w="44"/><text x="54.0867%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (10,192 samples, 16.87%)</title><rect x="37.0379%" y="197" width="16.8733%" height="15" fill="rgb(250,108,0)" fg:x="22372" fg:w="10192"/><text x="37.2879%" y="207.50">rust_qecp`rust_qecp::ftqec..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,024 samples, 3.35%)</title><rect x="50.5604%" y="181" width="3.3508%" height="15" fill="rgb(228,208,7)" fg:x="30540" fg:w="2024"/><text x="50.8104%" y="191.50">rus..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (13 samples, 0.02%)</title><rect x="53.9112%" y="197" width="0.0215%" height="15" fill="rgb(244,45,10)" fg:x="32564" fg:w="13"/><text x="54.1612%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (7 samples, 0.01%)</title><rect x="53.9328%" y="197" width="0.0116%" height="15" fill="rgb(207,125,25)" fg:x="32577" fg:w="7"/><text x="54.1828%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="55.8035%" y="69" width="0.0182%" height="15" fill="rgb(210,195,18)" fg:x="33707" fg:w="11"/><text x="56.0535%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="55.8085%" y="53" width="0.0132%" height="15" fill="rgb(249,80,12)" fg:x="33710" fg:w="8"/><text x="56.0585%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="55.8019%" y="85" width="0.0215%" height="15" fill="rgb(221,65,9)" fg:x="33706" fg:w="13"/><text x="56.0519%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (24 samples, 0.04%)</title><rect x="55.7870%" y="101" width="0.0397%" height="15" fill="rgb(235,49,36)" fg:x="33697" fg:w="24"/><text x="56.0370%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 0.05%)</title><rect x="55.7787%" y="117" width="0.0513%" height="15" fill="rgb(225,32,20)" fg:x="33692" fg:w="31"/><text x="56.0287%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.06%)</title><rect x="55.7688%" y="165" width="0.0646%" height="15" fill="rgb(215,141,46)" fg:x="33686" fg:w="39"/><text x="56.0188%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (36 samples, 0.06%)</title><rect x="55.7737%" y="149" width="0.0596%" height="15" fill="rgb(250,160,47)" fg:x="33689" fg:w="36"/><text x="56.0237%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.06%)</title><rect x="55.7737%" y="133" width="0.0596%" height="15" fill="rgb(216,222,40)" fg:x="33689" fg:w="36"/><text x="56.0237%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 0.13%)</title><rect x="55.7092%" y="181" width="0.1258%" height="15" fill="rgb(234,217,39)" fg:x="33650" fg:w="76"/><text x="55.9592%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.06%)</title><rect x="55.8350%" y="165" width="0.0579%" height="15" fill="rgb(207,178,40)" fg:x="33726" fg:w="35"/><text x="56.0850%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="55.8929%" y="165" width="0.0232%" height="15" fill="rgb(221,136,13)" fg:x="33761" fg:w="14"/><text x="56.1429%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="55.9161%" y="165" width="0.0298%" height="15" fill="rgb(249,199,10)" fg:x="33775" fg:w="18"/><text x="56.1661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="55.9459%" y="165" width="0.0414%" height="15" fill="rgb(249,222,13)" fg:x="33793" fg:w="25"/><text x="56.1959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="55.9873%" y="165" width="0.0248%" height="15" fill="rgb(244,185,38)" fg:x="33818" fg:w="15"/><text x="56.2373%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="56.0121%" y="165" width="0.0248%" height="15" fill="rgb(236,202,9)" fg:x="33833" fg:w="15"/><text x="56.2621%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="56.2687%" y="133" width="0.0215%" height="15" fill="rgb(250,229,37)" fg:x="33988" fg:w="13"/><text x="56.5187%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (214 samples, 0.35%)</title><rect x="56.3979%" y="117" width="0.3543%" height="15" fill="rgb(206,174,23)" fg:x="34066" fg:w="214"/><text x="56.6479%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (68 samples, 0.11%)</title><rect x="56.6396%" y="101" width="0.1126%" height="15" fill="rgb(211,33,43)" fg:x="34212" fg:w="68"/><text x="56.8896%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (425 samples, 0.70%)</title><rect x="56.0966%" y="149" width="0.7036%" height="15" fill="rgb(245,58,50)" fg:x="33884" fg:w="425"/><text x="56.3466%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (308 samples, 0.51%)</title><rect x="56.2903%" y="133" width="0.5099%" height="15" fill="rgb(244,68,36)" fg:x="34001" fg:w="308"/><text x="56.5403%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="56.7521%" y="117" width="0.0480%" height="15" fill="rgb(232,229,15)" fg:x="34280" fg:w="29"/><text x="57.0021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (35 samples, 0.06%)</title><rect x="56.8002%" y="149" width="0.0579%" height="15" fill="rgb(254,30,23)" fg:x="34309" fg:w="35"/><text x="57.0502%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (66 samples, 0.11%)</title><rect x="57.0154%" y="133" width="0.1093%" height="15" fill="rgb(235,160,14)" fg:x="34439" fg:w="66"/><text x="57.2654%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (162 samples, 0.27%)</title><rect x="56.8581%" y="149" width="0.2682%" height="15" fill="rgb(212,155,44)" fg:x="34344" fg:w="162"/><text x="57.1081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.06%)</title><rect x="57.1362%" y="149" width="0.0629%" height="15" fill="rgb(226,2,50)" fg:x="34512" fg:w="38"/><text x="57.3862%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="57.2058%" y="149" width="0.0265%" height="15" fill="rgb(234,177,6)" fg:x="34554" fg:w="16"/><text x="57.4558%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (107 samples, 0.18%)</title><rect x="57.3001%" y="133" width="0.1771%" height="15" fill="rgb(217,24,9)" fg:x="34611" fg:w="107"/><text x="57.5501%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="57.4773%" y="133" width="0.0132%" height="15" fill="rgb(220,13,46)" fg:x="34718" fg:w="8"/><text x="57.7273%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="57.4905%" y="133" width="0.0132%" height="15" fill="rgb(239,221,27)" fg:x="34726" fg:w="8"/><text x="57.7405%" y="143.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="57.5038%" y="133" width="0.0132%" height="15" fill="rgb(222,198,25)" fg:x="34734" fg:w="8"/><text x="57.7538%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (58 samples, 0.10%)</title><rect x="57.5634%" y="117" width="0.0960%" height="15" fill="rgb(211,99,13)" fg:x="34770" fg:w="58"/><text x="57.8134%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (99 samples, 0.16%)</title><rect x="57.6594%" y="117" width="0.1639%" height="15" fill="rgb(232,111,31)" fg:x="34828" fg:w="99"/><text x="57.9094%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (207 samples, 0.34%)</title><rect x="57.5170%" y="133" width="0.3427%" height="15" fill="rgb(245,82,37)" fg:x="34742" fg:w="207"/><text x="57.7670%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (22 samples, 0.04%)</title><rect x="57.8233%" y="117" width="0.0364%" height="15" fill="rgb(227,149,46)" fg:x="34927" fg:w="22"/><text x="58.0733%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="57.8647%" y="133" width="0.0397%" height="15" fill="rgb(218,36,50)" fg:x="34952" fg:w="24"/><text x="58.1147%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="58.1180%" y="101" width="0.0149%" height="15" fill="rgb(226,80,48)" fg:x="35105" fg:w="9"/><text x="58.3680%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.12%)</title><rect x="58.1776%" y="85" width="0.1242%" height="15" fill="rgb(238,224,15)" fg:x="35141" fg:w="75"/><text x="58.4276%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="58.2570%" y="69" width="0.0447%" height="15" fill="rgb(241,136,10)" fg:x="35189" fg:w="27"/><text x="58.5070%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (177 samples, 0.29%)</title><rect x="58.0286%" y="117" width="0.2930%" height="15" fill="rgb(208,32,45)" fg:x="35051" fg:w="177"/><text x="58.2786%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (114 samples, 0.19%)</title><rect x="58.1329%" y="101" width="0.1887%" height="15" fill="rgb(207,135,9)" fg:x="35114" fg:w="114"/><text x="58.3829%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="58.3017%" y="85" width="0.0199%" height="15" fill="rgb(206,86,44)" fg:x="35216" fg:w="12"/><text x="58.5517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="58.3216%" y="117" width="0.0281%" height="15" fill="rgb(245,177,15)" fg:x="35228" fg:w="17"/><text x="58.5716%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (677 samples, 1.12%)</title><rect x="57.2323%" y="149" width="1.1208%" height="15" fill="rgb(206,64,50)" fg:x="34570" fg:w="677"/><text x="57.4823%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (271 samples, 0.45%)</title><rect x="57.9044%" y="133" width="0.4487%" height="15" fill="rgb(234,36,40)" fg:x="34976" fg:w="271"/><text x="58.1544%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.07%)</title><rect x="58.4507%" y="133" width="0.0695%" height="15" fill="rgb(213,64,8)" fg:x="35306" fg:w="42"/><text x="58.7007%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (86 samples, 0.14%)</title><rect x="58.5203%" y="133" width="0.1424%" height="15" fill="rgb(210,75,36)" fg:x="35348" fg:w="86"/><text x="58.7703%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (210 samples, 0.35%)</title><rect x="58.3531%" y="149" width="0.3477%" height="15" fill="rgb(229,88,21)" fg:x="35247" fg:w="210"/><text x="58.6031%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="58.6626%" y="133" width="0.0381%" height="15" fill="rgb(252,204,47)" fg:x="35434" fg:w="23"/><text x="58.9126%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="58.7007%" y="149" width="0.0199%" height="15" fill="rgb(208,77,27)" fg:x="35457" fg:w="12"/><text x="58.9507%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,639 samples, 2.71%)</title><rect x="56.0370%" y="165" width="2.7134%" height="15" fill="rgb(221,76,26)" fg:x="33848" fg:w="1639"/><text x="56.2870%" y="175.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="58.7206%" y="149" width="0.0298%" height="15" fill="rgb(225,139,18)" fg:x="35469" fg:w="18"/><text x="58.9706%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (22 samples, 0.04%)</title><rect x="58.7537%" y="165" width="0.0364%" height="15" fill="rgb(230,137,11)" fg:x="35489" fg:w="22"/><text x="59.0037%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (26 samples, 0.04%)</title><rect x="58.7901%" y="165" width="0.0430%" height="15" fill="rgb(212,28,1)" fg:x="35511" fg:w="26"/><text x="59.0401%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="58.8332%" y="165" width="0.0281%" height="15" fill="rgb(248,164,17)" fg:x="35537" fg:w="17"/><text x="59.0832%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21 samples, 0.03%)</title><rect x="58.8613%" y="165" width="0.0348%" height="15" fill="rgb(222,171,42)" fg:x="35554" fg:w="21"/><text x="59.1113%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="58.8961%" y="165" width="0.0149%" height="15" fill="rgb(243,84,45)" fg:x="35575" fg:w="9"/><text x="59.1461%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="58.8961%" y="149" width="0.0149%" height="15" fill="rgb(252,49,23)" fg:x="35575" fg:w="9"/><text x="59.1461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="58.8961%" y="133" width="0.0149%" height="15" fill="rgb(215,19,7)" fg:x="35575" fg:w="9"/><text x="59.1461%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="58.8961%" y="117" width="0.0149%" height="15" fill="rgb(238,81,41)" fg:x="35575" fg:w="9"/><text x="59.1461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="58.8994%" y="101" width="0.0116%" height="15" fill="rgb(210,199,37)" fg:x="35577" fg:w="7"/><text x="59.1494%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,861 samples, 3.08%)</title><rect x="55.8350%" y="181" width="3.0810%" height="15" fill="rgb(244,192,49)" fg:x="33726" fg:w="1861"/><text x="56.0850%" y="191.50">rus..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="58.9292%" y="133" width="0.0199%" height="15" fill="rgb(226,211,11)" fg:x="35595" fg:w="12"/><text x="59.1792%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="58.9242%" y="149" width="0.0265%" height="15" fill="rgb(236,162,54)" fg:x="35592" fg:w="16"/><text x="59.1742%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.04%)</title><rect x="58.9176%" y="181" width="0.0364%" height="15" fill="rgb(220,229,9)" fg:x="35588" fg:w="22"/><text x="59.1676%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="58.9226%" y="165" width="0.0315%" height="15" fill="rgb(250,87,22)" fg:x="35591" fg:w="19"/><text x="59.1726%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="59.1444%" y="165" width="0.0149%" height="15" fill="rgb(239,43,17)" fg:x="35725" fg:w="9"/><text x="59.3944%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.04%)</title><rect x="59.1593%" y="165" width="0.0430%" height="15" fill="rgb(231,177,25)" fg:x="35734" fg:w="26"/><text x="59.4093%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="59.2024%" y="165" width="0.0182%" height="15" fill="rgb(219,179,1)" fg:x="35760" fg:w="11"/><text x="59.4524%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (14 samples, 0.02%)</title><rect x="59.2206%" y="165" width="0.0232%" height="15" fill="rgb(238,219,53)" fg:x="35771" fg:w="14"/><text x="59.4706%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="59.2437%" y="165" width="0.0149%" height="15" fill="rgb(232,167,36)" fg:x="35785" fg:w="9"/><text x="59.4937%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (22 samples, 0.04%)</title><rect x="59.2586%" y="165" width="0.0364%" height="15" fill="rgb(244,19,51)" fg:x="35794" fg:w="22"/><text x="59.5086%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (105 samples, 0.17%)</title><rect x="59.5119%" y="117" width="0.1738%" height="15" fill="rgb(224,6,22)" fg:x="35947" fg:w="105"/><text x="59.7619%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="59.6311%" y="101" width="0.0546%" height="15" fill="rgb(224,145,5)" fg:x="36019" fg:w="33"/><text x="59.8811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (224 samples, 0.37%)</title><rect x="59.3431%" y="149" width="0.3708%" height="15" fill="rgb(234,130,49)" fg:x="35845" fg:w="224"/><text x="59.5931%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (155 samples, 0.26%)</title><rect x="59.4573%" y="133" width="0.2566%" height="15" fill="rgb(254,6,2)" fg:x="35914" fg:w="155"/><text x="59.7073%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="59.6858%" y="117" width="0.0281%" height="15" fill="rgb(208,96,46)" fg:x="36052" fg:w="17"/><text x="59.9358%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="59.7139%" y="149" width="0.0348%" height="15" fill="rgb(239,3,39)" fg:x="36069" fg:w="21"/><text x="59.9639%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="59.7487%" y="149" width="0.0116%" height="15" fill="rgb(233,210,1)" fg:x="36090" fg:w="7"/><text x="59.9987%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.04%)</title><rect x="59.7619%" y="149" width="0.0381%" height="15" fill="rgb(244,137,37)" fg:x="36098" fg:w="23"/><text x="60.0119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (24 samples, 0.04%)</title><rect x="59.9672%" y="133" width="0.0397%" height="15" fill="rgb(240,136,2)" fg:x="36222" fg:w="24"/><text x="60.2172%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.02%)</title><rect x="60.1295%" y="117" width="0.0182%" height="15" fill="rgb(239,18,37)" fg:x="36320" fg:w="11"/><text x="60.3795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (22 samples, 0.04%)</title><rect x="60.1477%" y="117" width="0.0364%" height="15" fill="rgb(218,185,22)" fg:x="36331" fg:w="22"/><text x="60.3977%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="60.1841%" y="117" width="0.0331%" height="15" fill="rgb(225,218,4)" fg:x="36353" fg:w="20"/><text x="60.4341%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (100 samples, 0.17%)</title><rect x="60.2222%" y="117" width="0.1656%" height="15" fill="rgb(230,182,32)" fg:x="36376" fg:w="100"/><text x="60.4722%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (25 samples, 0.04%)</title><rect x="60.5384%" y="101" width="0.0414%" height="15" fill="rgb(242,56,43)" fg:x="36567" fg:w="25"/><text x="60.7884%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (69 samples, 0.11%)</title><rect x="60.5798%" y="101" width="0.1142%" height="15" fill="rgb(233,99,24)" fg:x="36592" fg:w="69"/><text x="60.8298%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (93 samples, 0.15%)</title><rect x="60.9589%" y="69" width="0.1540%" height="15" fill="rgb(234,209,42)" fg:x="36821" fg:w="93"/><text x="61.2089%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (235 samples, 0.39%)</title><rect x="60.7453%" y="85" width="0.3891%" height="15" fill="rgb(227,7,12)" fg:x="36692" fg:w="235"/><text x="60.9953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="61.1129%" y="69" width="0.0215%" height="15" fill="rgb(245,203,43)" fg:x="36914" fg:w="13"/><text x="61.3629%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (279 samples, 0.46%)</title><rect x="60.6940%" y="101" width="0.4619%" height="15" fill="rgb(238,205,33)" fg:x="36661" fg:w="279"/><text x="60.9440%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="61.1344%" y="85" width="0.0215%" height="15" fill="rgb(231,56,7)" fg:x="36927" fg:w="13"/><text x="61.3844%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (95 samples, 0.16%)</title><rect x="61.1559%" y="101" width="0.1573%" height="15" fill="rgb(244,186,29)" fg:x="36940" fg:w="95"/><text x="61.4059%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="61.4489%" y="69" width="0.0397%" height="15" fill="rgb(234,111,31)" fg:x="37117" fg:w="24"/><text x="61.6989%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (167 samples, 0.28%)</title><rect x="61.3132%" y="101" width="0.2765%" height="15" fill="rgb(241,149,10)" fg:x="37035" fg:w="167"/><text x="61.5632%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (143 samples, 0.24%)</title><rect x="61.3529%" y="85" width="0.2367%" height="15" fill="rgb(249,206,44)" fg:x="37059" fg:w="143"/><text x="61.6029%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (61 samples, 0.10%)</title><rect x="61.4887%" y="69" width="0.1010%" height="15" fill="rgb(251,153,30)" fg:x="37141" fg:w="61"/><text x="61.7387%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (731 samples, 1.21%)</title><rect x="60.3877%" y="117" width="1.2102%" height="15" fill="rgb(239,152,38)" fg:x="36476" fg:w="731"/><text x="60.6377%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,038 samples, 1.72%)</title><rect x="60.0070%" y="133" width="1.7185%" height="15" fill="rgb(249,139,47)" fg:x="36246" fg:w="1038"/><text x="60.2570%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (73 samples, 0.12%)</title><rect x="61.6046%" y="117" width="0.1209%" height="15" fill="rgb(244,64,35)" fg:x="37211" fg:w="73"/><text x="61.8546%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (86 samples, 0.14%)</title><rect x="61.7254%" y="133" width="0.1424%" height="15" fill="rgb(216,46,15)" fg:x="37284" fg:w="86"/><text x="61.9754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.03%)</title><rect x="61.8678%" y="133" width="0.0298%" height="15" fill="rgb(250,74,19)" fg:x="37370" fg:w="18"/><text x="62.1178%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,784 samples, 2.95%)</title><rect x="58.9540%" y="181" width="2.9535%" height="15" fill="rgb(249,42,33)" fg:x="35610" fg:w="1784"/><text x="59.2040%" y="191.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,578 samples, 2.61%)</title><rect x="59.2951%" y="165" width="2.6125%" height="15" fill="rgb(242,149,17)" fg:x="35816" fg:w="1578"/><text x="59.5451%" y="175.50">ru..</text></g><g><title>libsystem_malloc.dylib`realloc (1,273 samples, 2.11%)</title><rect x="59.8000%" y="149" width="2.1075%" height="15" fill="rgb(244,29,21)" fg:x="36121" fg:w="1273"/><text x="60.0500%" y="159.50">l..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (59 samples, 0.10%)</title><rect x="61.9075%" y="181" width="0.0977%" height="15" fill="rgb(220,130,37)" fg:x="37394" fg:w="59"/><text x="62.1575%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (55 samples, 0.09%)</title><rect x="62.0069%" y="165" width="0.0911%" height="15" fill="rgb(211,67,2)" fg:x="37454" fg:w="55"/><text x="62.2569%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="62.0979%" y="165" width="0.0116%" height="15" fill="rgb(235,68,52)" fg:x="37509" fg:w="7"/><text x="62.3479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="62.0979%" y="149" width="0.0116%" height="15" fill="rgb(246,142,3)" fg:x="37509" fg:w="7"/><text x="62.3479%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.02%)</title><rect x="62.1956%" y="149" width="0.0166%" height="15" fill="rgb(241,25,7)" fg:x="37568" fg:w="10"/><text x="62.4456%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="62.2121%" y="149" width="0.0166%" height="15" fill="rgb(242,119,39)" fg:x="37578" fg:w="10"/><text x="62.4621%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="62.2287%" y="149" width="0.0116%" height="15" fill="rgb(241,98,45)" fg:x="37588" fg:w="7"/><text x="62.4787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="62.4241%" y="117" width="0.0315%" height="15" fill="rgb(254,28,30)" fg:x="37706" fg:w="19"/><text x="62.6741%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="62.4555%" y="117" width="0.0232%" height="15" fill="rgb(241,142,54)" fg:x="37725" fg:w="14"/><text x="62.7055%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="62.5267%" y="101" width="0.0215%" height="15" fill="rgb(222,85,15)" fg:x="37768" fg:w="13"/><text x="62.7767%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (231 samples, 0.38%)</title><rect x="62.8446%" y="69" width="0.3824%" height="15" fill="rgb(210,85,47)" fg:x="37960" fg:w="231"/><text x="63.0946%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (38 samples, 0.06%)</title><rect x="63.2270%" y="69" width="0.0629%" height="15" fill="rgb(224,206,25)" fg:x="38191" fg:w="38"/><text x="63.4770%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (687 samples, 1.14%)</title><rect x="62.3214%" y="133" width="1.1374%" height="15" fill="rgb(243,201,19)" fg:x="37644" fg:w="687"/><text x="62.5714%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (592 samples, 0.98%)</title><rect x="62.4787%" y="117" width="0.9801%" height="15" fill="rgb(236,59,4)" fg:x="37739" fg:w="592"/><text x="62.7287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (550 samples, 0.91%)</title><rect x="62.5482%" y="101" width="0.9106%" height="15" fill="rgb(254,179,45)" fg:x="37781" fg:w="550"/><text x="62.7982%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (450 samples, 0.74%)</title><rect x="62.7138%" y="85" width="0.7450%" height="15" fill="rgb(226,14,10)" fg:x="37881" fg:w="450"/><text x="62.9638%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (102 samples, 0.17%)</title><rect x="63.2899%" y="69" width="0.1689%" height="15" fill="rgb(244,27,41)" fg:x="38229" fg:w="102"/><text x="63.5399%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="63.4588%" y="133" width="0.0331%" height="15" fill="rgb(235,35,32)" fg:x="38331" fg:w="20"/><text x="63.7088%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="63.4919%" y="133" width="0.0414%" height="15" fill="rgb(218,68,31)" fg:x="38351" fg:w="25"/><text x="63.7419%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (857 samples, 1.42%)</title><rect x="62.1261%" y="165" width="1.4188%" height="15" fill="rgb(207,120,37)" fg:x="37526" fg:w="857"/><text x="62.3761%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (782 samples, 1.29%)</title><rect x="62.2502%" y="149" width="1.2946%" height="15" fill="rgb(227,98,0)" fg:x="37601" fg:w="782"/><text x="62.5002%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="63.5333%" y="133" width="0.0116%" height="15" fill="rgb(207,7,3)" fg:x="38376" fg:w="7"/><text x="63.7833%" y="143.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (954 samples, 1.58%)</title><rect x="62.0052%" y="181" width="1.5794%" height="15" fill="rgb(206,98,19)" fg:x="37453" fg:w="954"/><text x="62.2552%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.04%)</title><rect x="63.5449%" y="165" width="0.0397%" height="15" fill="rgb(217,5,26)" fg:x="38383" fg:w="24"/><text x="63.7949%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (8 samples, 0.01%)</title><rect x="64.0283%" y="165" width="0.0132%" height="15" fill="rgb(235,190,38)" fg:x="38675" fg:w="8"/><text x="64.2783%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (26 samples, 0.04%)</title><rect x="64.5100%" y="149" width="0.0430%" height="15" fill="rgb(247,86,24)" fg:x="38966" fg:w="26"/><text x="64.7600%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (20 samples, 0.03%)</title><rect x="64.9719%" y="133" width="0.0331%" height="15" fill="rgb(205,101,16)" fg:x="39245" fg:w="20"/><text x="65.2219%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,038 samples, 1.72%)</title><rect x="63.5846%" y="181" width="1.7185%" height="15" fill="rgb(246,168,33)" fg:x="38407" fg:w="1038"/><text x="63.8346%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (762 samples, 1.26%)</title><rect x="64.0415%" y="165" width="1.2615%" height="15" fill="rgb(231,114,1)" fg:x="38683" fg:w="762"/><text x="64.2915%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (453 samples, 0.75%)</title><rect x="64.5531%" y="149" width="0.7500%" height="15" fill="rgb(207,184,53)" fg:x="38992" fg:w="453"/><text x="64.8031%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (180 samples, 0.30%)</title><rect x="65.0050%" y="133" width="0.2980%" height="15" fill="rgb(224,95,51)" fg:x="39265" fg:w="180"/><text x="65.2550%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (57 samples, 0.09%)</title><rect x="65.2087%" y="117" width="0.0944%" height="15" fill="rgb(212,188,45)" fg:x="39388" fg:w="57"/><text x="65.4587%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="65.2915%" y="101" width="0.0116%" height="15" fill="rgb(223,154,38)" fg:x="39438" fg:w="7"/><text x="65.5415%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (490 samples, 0.81%)</title><rect x="65.8659%" y="165" width="0.8112%" height="15" fill="rgb(251,22,52)" fg:x="39785" fg:w="490"/><text x="66.1159%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (815 samples, 1.35%)</title><rect x="66.6772%" y="165" width="1.3493%" height="15" fill="rgb(229,209,22)" fg:x="40275" fg:w="815"/><text x="66.9272%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,937 samples, 3.21%)</title><rect x="65.3030%" y="181" width="3.2068%" height="15" fill="rgb(234,138,34)" fg:x="39445" fg:w="1937"/><text x="65.5530%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (292 samples, 0.48%)</title><rect x="68.0264%" y="165" width="0.4834%" height="15" fill="rgb(212,95,11)" fg:x="41090" fg:w="292"/><text x="68.2764%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (27 samples, 0.04%)</title><rect x="68.5098%" y="181" width="0.0447%" height="15" fill="rgb(240,179,47)" fg:x="41382" fg:w="27"/><text x="68.7598%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (184 samples, 0.30%)</title><rect x="68.5545%" y="181" width="0.3046%" height="15" fill="rgb(240,163,11)" fg:x="41409" fg:w="184"/><text x="68.8045%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="68.8625%" y="165" width="0.0132%" height="15" fill="rgb(236,37,12)" fg:x="41595" fg:w="8"/><text x="69.1125%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="68.8641%" y="149" width="0.0116%" height="15" fill="rgb(232,164,16)" fg:x="41596" fg:w="7"/><text x="69.1141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="68.8641%" y="133" width="0.0116%" height="15" fill="rgb(244,205,15)" fg:x="41596" fg:w="7"/><text x="69.1141%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (9,020 samples, 14.93%)</title><rect x="53.9443%" y="197" width="14.9330%" height="15" fill="rgb(223,117,47)" fg:x="32584" fg:w="9020"/><text x="54.1943%" y="207.50">rust_qecp`rust_qecp::un..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="68.8592%" y="181" width="0.0182%" height="15" fill="rgb(244,107,35)" fg:x="41593" fg:w="11"/><text x="69.1092%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (61 samples, 0.10%)</title><rect x="77.6518%" y="181" width="0.1010%" height="15" fill="rgb(205,140,8)" fg:x="46904" fg:w="61"/><text x="77.9018%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="77.9133%" y="165" width="0.0315%" height="15" fill="rgb(228,84,46)" fg:x="47062" fg:w="19"/><text x="78.1633%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (133 samples, 0.22%)</title><rect x="77.9862%" y="149" width="0.2202%" height="15" fill="rgb(254,188,9)" fg:x="47106" fg:w="133"/><text x="78.2362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (54 samples, 0.09%)</title><rect x="78.1170%" y="133" width="0.0894%" height="15" fill="rgb(206,112,54)" fg:x="47185" fg:w="54"/><text x="78.3670%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (180 samples, 0.30%)</title><rect x="77.9448%" y="165" width="0.2980%" height="15" fill="rgb(216,84,49)" fg:x="47081" fg:w="180"/><text x="78.1948%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.04%)</title><rect x="78.2064%" y="149" width="0.0364%" height="15" fill="rgb(214,194,35)" fg:x="47239" fg:w="22"/><text x="78.4564%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="78.2445%" y="149" width="0.0166%" height="15" fill="rgb(249,28,3)" fg:x="47262" fg:w="10"/><text x="78.4945%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="78.2461%" y="133" width="0.0149%" height="15" fill="rgb(222,56,52)" fg:x="47263" fg:w="9"/><text x="78.4961%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (313 samples, 0.52%)</title><rect x="77.7528%" y="181" width="0.5182%" height="15" fill="rgb(245,217,50)" fg:x="46965" fg:w="313"/><text x="78.0028%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="78.2428%" y="165" width="0.0281%" height="15" fill="rgb(213,201,24)" fg:x="47261" fg:w="17"/><text x="78.4928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="78.2709%" y="181" width="0.0364%" height="15" fill="rgb(248,116,28)" fg:x="47278" fg:w="22"/><text x="78.5209%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (229 samples, 0.38%)</title><rect x="78.8984%" y="165" width="0.3791%" height="15" fill="rgb(219,72,43)" fg:x="47657" fg:w="229"/><text x="79.1484%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="79.2775%" y="165" width="0.0132%" height="15" fill="rgb(209,138,14)" fg:x="47886" fg:w="8"/><text x="79.5275%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (11 samples, 0.02%)</title><rect x="79.2908%" y="165" width="0.0182%" height="15" fill="rgb(222,18,33)" fg:x="47894" fg:w="11"/><text x="79.5408%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (656 samples, 1.09%)</title><rect x="78.3074%" y="181" width="1.0860%" height="15" fill="rgb(213,199,7)" fg:x="47300" fg:w="656"/><text x="78.5574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.08%)</title><rect x="79.3090%" y="165" width="0.0844%" height="15" fill="rgb(250,110,10)" fg:x="47905" fg:w="51"/><text x="79.5590%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (50 samples, 0.08%)</title><rect x="79.3106%" y="149" width="0.0828%" height="15" fill="rgb(248,123,6)" fg:x="47906" fg:w="50"/><text x="79.5606%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (27 samples, 0.04%)</title><rect x="79.3934%" y="181" width="0.0447%" height="15" fill="rgb(206,91,31)" fg:x="47956" fg:w="27"/><text x="79.6434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.04%)</title><rect x="79.5292%" y="149" width="0.0447%" height="15" fill="rgb(211,154,13)" fg:x="48038" fg:w="27"/><text x="79.7792%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (90 samples, 0.15%)</title><rect x="79.4381%" y="181" width="0.1490%" height="15" fill="rgb(225,148,7)" fg:x="47983" fg:w="90"/><text x="79.6881%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (71 samples, 0.12%)</title><rect x="79.4696%" y="165" width="0.1175%" height="15" fill="rgb(220,160,43)" fg:x="48002" fg:w="71"/><text x="79.7196%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="79.5739%" y="149" width="0.0132%" height="15" fill="rgb(213,52,39)" fg:x="48065" fg:w="8"/><text x="79.8239%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (25 samples, 0.04%)</title><rect x="79.5871%" y="181" width="0.0414%" height="15" fill="rgb(243,137,7)" fg:x="48073" fg:w="25"/><text x="79.8371%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (156 samples, 0.26%)</title><rect x="79.6285%" y="181" width="0.2583%" height="15" fill="rgb(230,79,13)" fg:x="48098" fg:w="156"/><text x="79.8785%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="79.8868%" y="181" width="0.0116%" height="15" fill="rgb(247,105,23)" fg:x="48254" fg:w="7"/><text x="80.1368%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (69 samples, 0.11%)</title><rect x="79.8983%" y="181" width="0.1142%" height="15" fill="rgb(223,179,41)" fg:x="48261" fg:w="69"/><text x="80.1483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="80.0126%" y="181" width="0.0182%" height="15" fill="rgb(218,9,34)" fg:x="48330" fg:w="11"/><text x="80.2626%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (51 samples, 0.08%)</title><rect x="80.0424%" y="181" width="0.0844%" height="15" fill="rgb(222,106,8)" fg:x="48348" fg:w="51"/><text x="80.2924%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (62 samples, 0.10%)</title><rect x="80.1268%" y="181" width="0.1026%" height="15" fill="rgb(211,220,0)" fg:x="48399" fg:w="62"/><text x="80.3768%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (130 samples, 0.22%)</title><rect x="80.2295%" y="181" width="0.2152%" height="15" fill="rgb(229,52,16)" fg:x="48461" fg:w="130"/><text x="80.4795%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="80.4463%" y="181" width="0.0166%" height="15" fill="rgb(212,155,18)" fg:x="48592" fg:w="10"/><text x="80.6963%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="80.4629%" y="181" width="0.0199%" height="15" fill="rgb(242,21,14)" fg:x="48602" fg:w="12"/><text x="80.7129%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="80.4828%" y="181" width="0.0166%" height="15" fill="rgb(222,19,48)" fg:x="48614" fg:w="10"/><text x="80.7328%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="80.5755%" y="117" width="0.0315%" height="15" fill="rgb(232,45,27)" fg:x="48670" fg:w="19"/><text x="80.8255%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="80.6301%" y="101" width="0.0232%" height="15" fill="rgb(249,103,42)" fg:x="48703" fg:w="14"/><text x="80.8801%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.05%)</title><rect x="80.6682%" y="85" width="0.0480%" height="15" fill="rgb(246,81,33)" fg:x="48726" fg:w="29"/><text x="80.9182%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="80.6897%" y="69" width="0.0265%" height="15" fill="rgb(252,33,42)" fg:x="48739" fg:w="16"/><text x="80.9397%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.06%)</title><rect x="80.6533%" y="101" width="0.0646%" height="15" fill="rgb(209,212,41)" fg:x="48717" fg:w="39"/><text x="80.9033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (77 samples, 0.13%)</title><rect x="80.6069%" y="117" width="0.1275%" height="15" fill="rgb(207,154,6)" fg:x="48689" fg:w="77"/><text x="80.8569%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="80.7178%" y="101" width="0.0166%" height="15" fill="rgb(223,64,47)" fg:x="48756" fg:w="10"/><text x="80.9678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (124 samples, 0.21%)</title><rect x="80.5506%" y="133" width="0.2053%" height="15" fill="rgb(211,161,38)" fg:x="48655" fg:w="124"/><text x="80.8006%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="80.7344%" y="117" width="0.0215%" height="15" fill="rgb(219,138,40)" fg:x="48766" fg:w="13"/><text x="80.9844%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="80.7559%" y="133" width="0.0182%" height="15" fill="rgb(241,228,46)" fg:x="48779" fg:w="11"/><text x="81.0059%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (153 samples, 0.25%)</title><rect x="80.5241%" y="149" width="0.2533%" height="15" fill="rgb(223,209,38)" fg:x="48639" fg:w="153"/><text x="80.7741%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (170 samples, 0.28%)</title><rect x="80.4993%" y="181" width="0.2814%" height="15" fill="rgb(236,164,45)" fg:x="48624" fg:w="170"/><text x="80.7493%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (162 samples, 0.27%)</title><rect x="80.5126%" y="165" width="0.2682%" height="15" fill="rgb(231,15,5)" fg:x="48632" fg:w="162"/><text x="80.7626%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (142 samples, 0.24%)</title><rect x="80.9480%" y="165" width="0.2351%" height="15" fill="rgb(252,35,15)" fg:x="48895" fg:w="142"/><text x="81.1980%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (253 samples, 0.42%)</title><rect x="81.1831%" y="165" width="0.4189%" height="15" fill="rgb(248,181,18)" fg:x="49037" fg:w="253"/><text x="81.4331%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (555 samples, 0.92%)</title><rect x="80.7907%" y="181" width="0.9188%" height="15" fill="rgb(233,39,42)" fg:x="48800" fg:w="555"/><text x="81.0407%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (65 samples, 0.11%)</title><rect x="81.6019%" y="165" width="0.1076%" height="15" fill="rgb(238,110,33)" fg:x="49290" fg:w="65"/><text x="81.8519%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (254 samples, 0.42%)</title><rect x="81.7095%" y="181" width="0.4205%" height="15" fill="rgb(233,195,10)" fg:x="49355" fg:w="254"/><text x="81.9595%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (15 samples, 0.02%)</title><rect x="82.1300%" y="181" width="0.0248%" height="15" fill="rgb(254,105,3)" fg:x="49609" fg:w="15"/><text x="82.3800%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (41 samples, 0.07%)</title><rect x="82.1549%" y="181" width="0.0679%" height="15" fill="rgb(221,225,9)" fg:x="49624" fg:w="41"/><text x="82.4049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="82.2409%" y="165" width="0.0166%" height="15" fill="rgb(224,227,45)" fg:x="49676" fg:w="10"/><text x="82.4909%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="82.2443%" y="149" width="0.0132%" height="15" fill="rgb(229,198,43)" fg:x="49678" fg:w="8"/><text x="82.4943%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (35 samples, 0.06%)</title><rect x="82.2227%" y="181" width="0.0579%" height="15" fill="rgb(206,209,35)" fg:x="49665" fg:w="35"/><text x="82.4727%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="82.2674%" y="165" width="0.0132%" height="15" fill="rgb(245,195,53)" fg:x="49692" fg:w="8"/><text x="82.5174%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="82.4711%" y="149" width="0.0232%" height="15" fill="rgb(240,92,26)" fg:x="49815" fg:w="14"/><text x="82.7211%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (71 samples, 0.12%)</title><rect x="83.1565%" y="117" width="0.1175%" height="15" fill="rgb(207,40,23)" fg:x="50229" fg:w="71"/><text x="83.4065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (199 samples, 0.33%)</title><rect x="82.9561%" y="133" width="0.3295%" height="15" fill="rgb(223,111,35)" fg:x="50108" fg:w="199"/><text x="83.2061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="83.2740%" y="117" width="0.0116%" height="15" fill="rgb(229,147,28)" fg:x="50300" fg:w="7"/><text x="83.5240%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (493 samples, 0.82%)</title><rect x="82.4942%" y="149" width="0.8162%" height="15" fill="rgb(211,29,28)" fg:x="49829" fg:w="493"/><text x="82.7442%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="83.2856%" y="133" width="0.0248%" height="15" fill="rgb(228,72,33)" fg:x="50307" fg:w="15"/><text x="83.5356%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.04%)</title><rect x="83.3104%" y="149" width="0.0364%" height="15" fill="rgb(205,214,31)" fg:x="50322" fg:w="22"/><text x="83.5604%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="83.4363%" y="101" width="0.0132%" height="15" fill="rgb(224,111,15)" fg:x="50398" fg:w="8"/><text x="83.6863%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (40 samples, 0.07%)</title><rect x="83.3882%" y="133" width="0.0662%" height="15" fill="rgb(253,21,26)" fg:x="50369" fg:w="40"/><text x="83.6382%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.03%)</title><rect x="83.4263%" y="117" width="0.0281%" height="15" fill="rgb(245,139,43)" fg:x="50392" fg:w="17"/><text x="83.6763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (29 samples, 0.05%)</title><rect x="83.5074%" y="117" width="0.0480%" height="15" fill="rgb(252,170,7)" fg:x="50441" fg:w="29"/><text x="83.7574%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (209 samples, 0.35%)</title><rect x="83.3469%" y="149" width="0.3460%" height="15" fill="rgb(231,118,14)" fg:x="50344" fg:w="209"/><text x="83.5969%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (140 samples, 0.23%)</title><rect x="83.4611%" y="133" width="0.2318%" height="15" fill="rgb(238,83,0)" fg:x="50413" fg:w="140"/><text x="83.7111%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (83 samples, 0.14%)</title><rect x="83.5555%" y="117" width="0.1374%" height="15" fill="rgb(221,39,39)" fg:x="50470" fg:w="83"/><text x="83.8055%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="83.6747%" y="101" width="0.0182%" height="15" fill="rgb(222,119,46)" fg:x="50542" fg:w="11"/><text x="83.9247%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (785 samples, 1.30%)</title><rect x="82.3966%" y="165" width="1.2996%" height="15" fill="rgb(222,165,49)" fg:x="49770" fg:w="785"/><text x="82.6466%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="83.6962%" y="165" width="0.0248%" height="15" fill="rgb(219,113,52)" fg:x="50555" fg:w="15"/><text x="83.9462%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="83.7210%" y="165" width="0.0182%" height="15" fill="rgb(214,7,15)" fg:x="50570" fg:w="11"/><text x="83.9710%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (887 samples, 1.47%)</title><rect x="82.2807%" y="181" width="1.4685%" height="15" fill="rgb(235,32,4)" fg:x="49700" fg:w="887"/><text x="82.5307%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (72 samples, 0.12%)</title><rect x="83.7492%" y="181" width="0.1192%" height="15" fill="rgb(238,90,54)" fg:x="50587" fg:w="72"/><text x="83.9992%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (32 samples, 0.05%)</title><rect x="83.8684%" y="181" width="0.0530%" height="15" fill="rgb(213,208,19)" fg:x="50659" fg:w="32"/><text x="84.1184%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,282 samples, 83.24%)</title><rect x="0.6804%" y="229" width="83.2442%" height="15" fill="rgb(233,156,4)" fg:x="411" fg:w="50282"/><text x="0.9304%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,374 samples, 81.74%)</title><rect x="2.1837%" y="213" width="81.7410%" height="15" fill="rgb(207,194,5)" fg:x="1319" fg:w="49374"/><text x="2.4337%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (9,089 samples, 15.05%)</title><rect x="68.8774%" y="197" width="15.0473%" height="15" fill="rgb(206,111,30)" fg:x="41604" fg:w="9089"/><text x="69.1274%" y="207.50">rust_qecp`rust_qecp::un..</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="87.0569%" y="213" width="0.0579%" height="15" fill="rgb(243,70,54)" fg:x="52585" fg:w="35"/><text x="87.3069%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="87.1381%" y="149" width="0.0182%" height="15" fill="rgb(242,28,8)" fg:x="52634" fg:w="11"/><text x="87.3881%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.02%)</title><rect x="87.1563%" y="149" width="0.0182%" height="15" fill="rgb(219,106,18)" fg:x="52645" fg:w="11"/><text x="87.4063%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="87.1298%" y="181" width="0.0497%" height="15" fill="rgb(244,222,10)" fg:x="52629" fg:w="30"/><text x="87.3798%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.04%)</title><rect x="87.1364%" y="165" width="0.0430%" height="15" fill="rgb(236,179,52)" fg:x="52633" fg:w="26"/><text x="87.3864%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.07%)</title><rect x="87.1165%" y="213" width="0.0662%" height="15" fill="rgb(213,23,39)" fg:x="52621" fg:w="40"/><text x="87.3665%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (35 samples, 0.06%)</title><rect x="87.1248%" y="197" width="0.0579%" height="15" fill="rgb(238,48,10)" fg:x="52626" fg:w="35"/><text x="87.3748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="87.3301%" y="181" width="0.0132%" height="15" fill="rgb(251,196,23)" fg:x="52750" fg:w="8"/><text x="87.5801%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="87.3433%" y="181" width="0.0199%" height="15" fill="rgb(250,152,24)" fg:x="52758" fg:w="12"/><text x="87.5933%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (15 samples, 0.02%)</title><rect x="87.3814%" y="181" width="0.0248%" height="15" fill="rgb(209,150,17)" fg:x="52781" fg:w="15"/><text x="87.6314%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="87.4857%" y="133" width="0.0132%" height="15" fill="rgb(234,202,34)" fg:x="52844" fg:w="8"/><text x="87.7357%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="87.4824%" y="165" width="0.0265%" height="15" fill="rgb(253,148,53)" fg:x="52842" fg:w="16"/><text x="87.7324%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="87.4857%" y="149" width="0.0232%" height="15" fill="rgb(218,129,16)" fg:x="52844" fg:w="14"/><text x="87.7357%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.08%)</title><rect x="87.5089%" y="165" width="0.0795%" height="15" fill="rgb(216,85,19)" fg:x="52858" fg:w="48"/><text x="87.7589%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 samples, 0.46%)</title><rect x="87.1861%" y="213" width="0.4553%" height="15" fill="rgb(235,228,7)" fg:x="52663" fg:w="275"/><text x="87.4361%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (202 samples, 0.33%)</title><rect x="87.3069%" y="197" width="0.3344%" height="15" fill="rgb(245,175,0)" fg:x="52736" fg:w="202"/><text x="87.5569%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (142 samples, 0.24%)</title><rect x="87.4063%" y="181" width="0.2351%" height="15" fill="rgb(208,168,36)" fg:x="52796" fg:w="142"/><text x="87.6563%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (32 samples, 0.05%)</title><rect x="87.5884%" y="165" width="0.0530%" height="15" fill="rgb(246,171,24)" fg:x="52906" fg:w="32"/><text x="87.8384%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="87.7258%" y="197" width="0.0215%" height="15" fill="rgb(215,142,24)" fg:x="52989" fg:w="13"/><text x="87.9758%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="87.7473%" y="197" width="0.0149%" height="15" fill="rgb(250,187,7)" fg:x="53002" fg:w="9"/><text x="87.9973%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="87.7622%" y="197" width="0.0215%" height="15" fill="rgb(228,66,33)" fg:x="53011" fg:w="13"/><text x="88.0122%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="87.7672%" y="181" width="0.0166%" height="15" fill="rgb(234,215,21)" fg:x="53014" fg:w="10"/><text x="88.0172%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.03%)</title><rect x="87.7887%" y="197" width="0.0315%" height="15" fill="rgb(222,191,20)" fg:x="53027" fg:w="19"/><text x="88.0387%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="88.0983%" y="133" width="0.0315%" height="15" fill="rgb(245,79,54)" fg:x="53214" fg:w="19"/><text x="88.3483%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (57 samples, 0.09%)</title><rect x="88.0436%" y="149" width="0.0944%" height="15" fill="rgb(240,10,37)" fg:x="53181" fg:w="57"/><text x="88.2936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (69 samples, 0.11%)</title><rect x="88.0271%" y="165" width="0.1142%" height="15" fill="rgb(214,192,32)" fg:x="53171" fg:w="69"/><text x="88.2771%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="88.1430%" y="149" width="0.0132%" height="15" fill="rgb(209,36,54)" fg:x="53241" fg:w="8"/><text x="88.3930%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.03%)</title><rect x="88.1413%" y="165" width="0.0331%" height="15" fill="rgb(220,10,11)" fg:x="53240" fg:w="20"/><text x="88.3913%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="88.1562%" y="149" width="0.0182%" height="15" fill="rgb(221,106,17)" fg:x="53249" fg:w="11"/><text x="88.4062%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.20%)</title><rect x="87.9807%" y="181" width="0.1954%" height="15" fill="rgb(251,142,44)" fg:x="53143" fg:w="118"/><text x="88.2307%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (330 samples, 0.55%)</title><rect x="87.6413%" y="213" width="0.5463%" height="15" fill="rgb(238,13,15)" fg:x="52938" fg:w="330"/><text x="87.8913%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (208 samples, 0.34%)</title><rect x="87.8433%" y="197" width="0.3444%" height="15" fill="rgb(208,107,27)" fg:x="53060" fg:w="208"/><text x="88.0933%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,576 samples, 4.26%)</title><rect x="83.9246%" y="229" width="4.2647%" height="15" fill="rgb(205,136,37)" fg:x="50693" fg:w="2576"/><text x="84.1746%" y="239.50">rust_..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (9 samples, 0.01%)</title><rect x="88.4575%" y="213" width="0.0149%" height="15" fill="rgb(250,205,27)" fg:x="53431" fg:w="9"/><text x="88.7075%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="88.4592%" y="197" width="0.0132%" height="15" fill="rgb(210,80,43)" fg:x="53432" fg:w="8"/><text x="88.7092%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="88.4592%" y="181" width="0.0132%" height="15" fill="rgb(247,160,36)" fg:x="53432" fg:w="8"/><text x="88.7092%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (232 samples, 0.38%)</title><rect x="88.1893%" y="229" width="0.3841%" height="15" fill="rgb(234,13,49)" fg:x="53269" fg:w="232"/><text x="88.4393%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (61 samples, 0.10%)</title><rect x="88.4724%" y="213" width="0.1010%" height="15" fill="rgb(234,122,0)" fg:x="53440" fg:w="61"/><text x="88.7224%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="93.4060%" y="149" width="0.0116%" height="15" fill="rgb(207,146,38)" fg:x="56420" fg:w="7"/><text x="93.6560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="93.4209%" y="149" width="0.0116%" height="15" fill="rgb(207,177,25)" fg:x="56429" fg:w="7"/><text x="93.6709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.03%)</title><rect x="93.4060%" y="165" width="0.0281%" height="15" fill="rgb(211,178,42)" fg:x="56420" fg:w="17"/><text x="93.6560%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,938 samples, 4.86%)</title><rect x="88.5734%" y="229" width="4.8640%" height="15" fill="rgb(230,69,54)" fg:x="53501" fg:w="2938"/><text x="88.8234%" y="239.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.04%)</title><rect x="93.3927%" y="213" width="0.0447%" height="15" fill="rgb(214,135,41)" fg:x="56412" fg:w="27"/><text x="93.6427%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="93.3960%" y="197" width="0.0414%" height="15" fill="rgb(237,67,25)" fg:x="56414" fg:w="25"/><text x="93.6460%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.03%)</title><rect x="93.4043%" y="181" width="0.0331%" height="15" fill="rgb(222,189,50)" fg:x="56419" fg:w="20"/><text x="93.6543%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (121 samples, 0.20%)</title><rect x="93.4473%" y="213" width="0.2003%" height="15" fill="rgb(245,148,34)" fg:x="56445" fg:w="121"/><text x="93.6973%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (324 samples, 0.54%)</title><rect x="93.4374%" y="229" width="0.5364%" height="15" fill="rgb(222,29,6)" fg:x="56439" fg:w="324"/><text x="93.6874%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (197 samples, 0.33%)</title><rect x="93.6477%" y="213" width="0.3261%" height="15" fill="rgb(221,189,43)" fg:x="56566" fg:w="197"/><text x="93.8977%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="93.9606%" y="197" width="0.0132%" height="15" fill="rgb(207,36,27)" fg:x="56755" fg:w="8"/><text x="94.2106%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (49 samples, 0.08%)</title><rect x="93.9738%" y="229" width="0.0811%" height="15" fill="rgb(217,90,24)" fg:x="56763" fg:w="49"/><text x="94.2238%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,589 samples, 5.94%)</title><rect x="94.0549%" y="229" width="5.9418%" height="15" fill="rgb(224,66,35)" fg:x="56812" fg:w="3589"/><text x="94.3049%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,680 samples, 4.44%)</title><rect x="95.5598%" y="213" width="4.4369%" height="15" fill="rgb(221,13,50)" fg:x="57721" fg:w="2680"/><text x="95.8098%" y="223.50">rust_..</text></g><g><title>all (60,403 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(236,68,49)" fg:x="0" fg:w="60403"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,327 samples, 99.87%)</title><rect x="0.1258%" y="309" width="99.8742%" height="15" fill="rgb(229,146,28)" fg:x="76" fg:w="60327"/><text x="0.3758%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,327 samples, 99.87%)</title><rect x="0.1258%" y="293" width="99.8742%" height="15" fill="rgb(225,31,38)" fg:x="76" fg:w="60327"/><text x="0.3758%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,326 samples, 99.87%)</title><rect x="0.1275%" y="277" width="99.8725%" height="15" fill="rgb(250,208,3)" fg:x="77" fg:w="60326"/><text x="0.3775%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,326 samples, 99.87%)</title><rect x="0.1275%" y="261" width="99.8725%" height="15" fill="rgb(246,54,23)" fg:x="77" fg:w="60326"/><text x="0.3775%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,321 samples, 99.86%)</title><rect x="0.1358%" y="245" width="99.8642%" height="15" fill="rgb(243,76,11)" fg:x="82" fg:w="60321"/><text x="0.3858%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>