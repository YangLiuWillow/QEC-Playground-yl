<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="60316"><g><title>libsystem_c.dylib`isatty (15 samples, 0.02%)</title><rect x="0.0348%" y="53" width="0.0249%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="15"/><text x="0.2848%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (13 samples, 0.02%)</title><rect x="0.0381%" y="37" width="0.0216%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="13"/><text x="0.2881%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (26 samples, 0.04%)</title><rect x="0.0182%" y="85" width="0.0431%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="26"/><text x="0.2682%" y="95.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (16 samples, 0.03%)</title><rect x="0.0348%" y="69" width="0.0265%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="16"/><text x="0.2848%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (15 samples, 0.02%)</title><rect x="0.0630%" y="85" width="0.0249%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="15"/><text x="0.3130%" y="95.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (7 samples, 0.01%)</title><rect x="0.0763%" y="69" width="0.0116%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="7"/><text x="0.3263%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (11 samples, 0.02%)</title><rect x="0.0945%" y="69" width="0.0182%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="11"/><text x="0.3445%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0879%" y="85" width="0.0282%" height="15" fill="rgb(228,23,34)" fg:x="53" fg:w="17"/><text x="0.3379%" y="95.50"></text></g><g><title>dyld`start (74 samples, 0.12%)</title><rect x="0.0000%" y="325" width="0.1227%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="74"/><text x="0.2500%" y="335.50"></text></g><g><title>rust_qecp`main (73 samples, 0.12%)</title><rect x="0.0017%" y="309" width="0.1210%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="73"/><text x="0.2517%" y="319.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (73 samples, 0.12%)</title><rect x="0.0017%" y="293" width="0.1210%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="73"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (73 samples, 0.12%)</title><rect x="0.0017%" y="277" width="0.1210%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="73"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (73 samples, 0.12%)</title><rect x="0.0017%" y="261" width="0.1210%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="73"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::main (73 samples, 0.12%)</title><rect x="0.0017%" y="245" width="0.1210%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="73"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (72 samples, 0.12%)</title><rect x="0.0033%" y="229" width="0.1194%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="72"/><text x="0.2533%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (72 samples, 0.12%)</title><rect x="0.0033%" y="213" width="0.1194%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="72"/><text x="0.2533%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (72 samples, 0.12%)</title><rect x="0.0033%" y="197" width="0.1194%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="72"/><text x="0.2533%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (72 samples, 0.12%)</title><rect x="0.0033%" y="181" width="0.1194%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="72"/><text x="0.2533%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.12%)</title><rect x="0.0033%" y="165" width="0.1194%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="72"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (72 samples, 0.12%)</title><rect x="0.0033%" y="149" width="0.1194%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="72"/><text x="0.2533%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.12%)</title><rect x="0.0033%" y="133" width="0.1194%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="72"/><text x="0.2533%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (72 samples, 0.12%)</title><rect x="0.0033%" y="117" width="0.1194%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="72"/><text x="0.2533%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (72 samples, 0.12%)</title><rect x="0.0033%" y="101" width="0.1194%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="72"/><text x="0.2533%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="0.1360%" y="245" width="0.0149%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="9"/><text x="0.3860%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="0.1558%" y="245" width="0.0149%" height="15" fill="rgb(241,131,45)" fg:x="94" fg:w="9"/><text x="0.4058%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="0.1873%" y="245" width="0.0182%" height="15" fill="rgb(249,31,29)" fg:x="113" fg:w="11"/><text x="0.4373%" y="255.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.2056%" y="245" width="0.0116%" height="15" fill="rgb(225,111,53)" fg:x="124" fg:w="7"/><text x="0.4556%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (69 samples, 0.11%)</title><rect x="0.2553%" y="229" width="0.1144%" height="15" fill="rgb(238,160,17)" fg:x="154" fg:w="69"/><text x="0.5053%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.04%)</title><rect x="0.3697%" y="229" width="0.0414%" height="15" fill="rgb(214,148,48)" fg:x="223" fg:w="25"/><text x="0.6197%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="0.4112%" y="229" width="0.0116%" height="15" fill="rgb(232,36,49)" fg:x="248" fg:w="7"/><text x="0.6612%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="0.4377%" y="213" width="0.0133%" height="15" fill="rgb(209,103,24)" fg:x="264" fg:w="8"/><text x="0.6877%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="0.4277%" y="229" width="0.0249%" height="15" fill="rgb(229,88,8)" fg:x="258" fg:w="15"/><text x="0.6777%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="0.4626%" y="229" width="0.0133%" height="15" fill="rgb(213,181,19)" fg:x="279" fg:w="8"/><text x="0.7126%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.07%)</title><rect x="0.4775%" y="229" width="0.0663%" height="15" fill="rgb(254,191,54)" fg:x="288" fg:w="40"/><text x="0.7275%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="0.5604%" y="197" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="338" fg:w="7"/><text x="0.8104%" y="207.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (18 samples, 0.03%)</title><rect x="0.5438%" y="229" width="0.0298%" height="15" fill="rgb(233,36,39)" fg:x="328" fg:w="18"/><text x="0.7938%" y="239.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="0.5604%" y="213" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="338" fg:w="8"/><text x="0.8104%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="0.5902%" y="165" width="0.0133%" height="15" fill="rgb(245,192,40)" fg:x="356" fg:w="8"/><text x="0.8402%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="0.5902%" y="149" width="0.0133%" height="15" fill="rgb(238,167,29)" fg:x="356" fg:w="8"/><text x="0.8402%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="0.5836%" y="197" width="0.0216%" height="15" fill="rgb(232,182,51)" fg:x="352" fg:w="13"/><text x="0.8336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="0.5886%" y="181" width="0.0166%" height="15" fill="rgb(231,60,39)" fg:x="355" fg:w="10"/><text x="0.8386%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="0.5786%" y="229" width="0.0315%" height="15" fill="rgb(208,69,12)" fg:x="349" fg:w="19"/><text x="0.8286%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="0.5819%" y="213" width="0.0282%" height="15" fill="rgb(235,93,37)" fg:x="351" fg:w="17"/><text x="0.8319%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="0.6101%" y="229" width="0.0182%" height="15" fill="rgb(213,116,39)" fg:x="368" fg:w="11"/><text x="0.8601%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="0.6300%" y="229" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="380" fg:w="7"/><text x="0.8800%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (33 samples, 0.05%)</title><rect x="0.6433%" y="229" width="0.0547%" height="15" fill="rgb(206,96,30)" fg:x="388" fg:w="33"/><text x="0.8933%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (14 samples, 0.02%)</title><rect x="0.6980%" y="229" width="0.0232%" height="15" fill="rgb(218,138,4)" fg:x="421" fg:w="14"/><text x="0.9480%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="0.9616%" y="181" width="0.0166%" height="15" fill="rgb(250,191,14)" fg:x="580" fg:w="10"/><text x="1.2116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="0.9649%" y="165" width="0.0133%" height="15" fill="rgb(239,60,40)" fg:x="582" fg:w="8"/><text x="1.2149%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="0.9616%" y="213" width="0.0199%" height="15" fill="rgb(206,27,48)" fg:x="580" fg:w="12"/><text x="1.2116%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="0.9616%" y="197" width="0.0199%" height="15" fill="rgb(225,35,8)" fg:x="580" fg:w="12"/><text x="1.2116%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (165 samples, 0.27%)</title><rect x="0.7212%" y="229" width="0.2736%" height="15" fill="rgb(250,213,24)" fg:x="435" fg:w="165"/><text x="0.9712%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="0.9815%" y="213" width="0.0133%" height="15" fill="rgb(247,123,22)" fg:x="592" fg:w="8"/><text x="1.2315%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.03%)</title><rect x="12.4362%" y="213" width="0.0265%" height="15" fill="rgb(231,138,38)" fg:x="7501" fg:w="16"/><text x="12.6862%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (395 samples, 0.65%)</title><rect x="12.4627%" y="213" width="0.6549%" height="15" fill="rgb(231,145,46)" fg:x="7517" fg:w="395"/><text x="12.7127%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="13.1176%" y="213" width="0.0216%" height="15" fill="rgb(251,118,11)" fg:x="7912" fg:w="13"/><text x="13.3676%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (87 samples, 0.14%)</title><rect x="13.1391%" y="213" width="0.1442%" height="15" fill="rgb(217,147,25)" fg:x="7925" fg:w="87"/><text x="13.3891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="13.4641%" y="197" width="0.0133%" height="15" fill="rgb(247,81,37)" fg:x="8121" fg:w="8"/><text x="13.7141%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (127 samples, 0.21%)</title><rect x="13.2834%" y="213" width="0.2106%" height="15" fill="rgb(209,12,38)" fg:x="8012" fg:w="127"/><text x="13.5334%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="13.4823%" y="197" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="8132" fg:w="7"/><text x="13.7323%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="13.5387%" y="197" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="8166" fg:w="7"/><text x="13.7887%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (48 samples, 0.08%)</title><rect x="13.4939%" y="213" width="0.0796%" height="15" fill="rgb(221,10,30)" fg:x="8139" fg:w="48"/><text x="13.7439%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="13.5586%" y="197" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="8178" fg:w="9"/><text x="13.8086%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.02%)</title><rect x="13.5735%" y="213" width="0.0232%" height="15" fill="rgb(222,148,37)" fg:x="8187" fg:w="14"/><text x="13.8235%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="13.5851%" y="197" width="0.0116%" height="15" fill="rgb(234,67,33)" fg:x="8194" fg:w="7"/><text x="13.8351%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (106 samples, 0.18%)</title><rect x="13.5967%" y="213" width="0.1757%" height="15" fill="rgb(247,98,35)" fg:x="8201" fg:w="106"/><text x="13.8467%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (46 samples, 0.08%)</title><rect x="13.7725%" y="213" width="0.0763%" height="15" fill="rgb(247,138,52)" fg:x="8307" fg:w="46"/><text x="14.0225%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.03%)</title><rect x="13.8554%" y="213" width="0.0298%" height="15" fill="rgb(213,79,30)" fg:x="8357" fg:w="18"/><text x="14.1054%" y="223.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (45 samples, 0.07%)</title><rect x="13.8918%" y="213" width="0.0746%" height="15" fill="rgb(246,177,23)" fg:x="8379" fg:w="45"/><text x="14.1418%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (84 samples, 0.14%)</title><rect x="13.9664%" y="213" width="0.1393%" height="15" fill="rgb(230,62,27)" fg:x="8424" fg:w="84"/><text x="14.2164%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (67 samples, 0.11%)</title><rect x="14.1057%" y="213" width="0.1111%" height="15" fill="rgb(216,154,8)" fg:x="8508" fg:w="67"/><text x="14.3557%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="14.2201%" y="213" width="0.0249%" height="15" fill="rgb(244,35,45)" fg:x="8577" fg:w="15"/><text x="14.4701%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="14.2483%" y="213" width="0.0133%" height="15" fill="rgb(251,115,12)" fg:x="8594" fg:w="8"/><text x="14.4983%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (17 samples, 0.03%)</title><rect x="14.2632%" y="213" width="0.0282%" height="15" fill="rgb(240,54,50)" fg:x="8603" fg:w="17"/><text x="14.5132%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="14.2931%" y="213" width="0.0116%" height="15" fill="rgb(233,84,52)" fg:x="8621" fg:w="7"/><text x="14.5431%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="14.4157%" y="197" width="0.0182%" height="15" fill="rgb(207,117,47)" fg:x="8695" fg:w="11"/><text x="14.6657%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (7 samples, 0.01%)</title><rect x="14.4340%" y="197" width="0.0116%" height="15" fill="rgb(249,43,39)" fg:x="8706" fg:w="7"/><text x="14.6840%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="14.4771%" y="149" width="0.0133%" height="15" fill="rgb(209,38,44)" fg:x="8732" fg:w="8"/><text x="14.7271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="14.4754%" y="165" width="0.0166%" height="15" fill="rgb(236,212,23)" fg:x="8731" fg:w="10"/><text x="14.7254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="14.4705%" y="181" width="0.0381%" height="15" fill="rgb(242,79,21)" fg:x="8728" fg:w="23"/><text x="14.7205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="14.4953%" y="165" width="0.0133%" height="15" fill="rgb(211,96,35)" fg:x="8743" fg:w="8"/><text x="14.7453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="14.4953%" y="149" width="0.0133%" height="15" fill="rgb(253,215,40)" fg:x="8743" fg:w="8"/><text x="14.7453%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="14.4970%" y="133" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="8744" fg:w="7"/><text x="14.7470%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="14.6147%" y="149" width="0.0133%" height="15" fill="rgb(208,190,38)" fg:x="8815" fg:w="8"/><text x="14.8647%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="14.6595%" y="133" width="0.0133%" height="15" fill="rgb(235,213,38)" fg:x="8842" fg:w="8"/><text x="14.9095%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.04%)</title><rect x="14.6777%" y="117" width="0.0431%" height="15" fill="rgb(237,122,38)" fg:x="8853" fg:w="26"/><text x="14.9277%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.05%)</title><rect x="14.6727%" y="133" width="0.0497%" height="15" fill="rgb(244,218,35)" fg:x="8850" fg:w="30"/><text x="14.9227%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="14.7225%" y="133" width="0.0265%" height="15" fill="rgb(240,68,47)" fg:x="8880" fg:w="16"/><text x="14.9725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="14.7490%" y="133" width="0.0315%" height="15" fill="rgb(210,16,53)" fg:x="8896" fg:w="19"/><text x="14.9990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="14.7523%" y="117" width="0.0282%" height="15" fill="rgb(235,124,12)" fg:x="8898" fg:w="17"/><text x="15.0023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="14.7689%" y="101" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="8908" fg:w="7"/><text x="15.0189%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (93 samples, 0.15%)</title><rect x="14.6280%" y="149" width="0.1542%" height="15" fill="rgb(250,166,2)" fg:x="8823" fg:w="93"/><text x="14.8780%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="14.8186%" y="117" width="0.0232%" height="15" fill="rgb(242,216,29)" fg:x="8938" fg:w="14"/><text x="15.0686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.05%)</title><rect x="14.8020%" y="133" width="0.0531%" height="15" fill="rgb(230,116,27)" fg:x="8928" fg:w="32"/><text x="15.0520%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.04%)</title><rect x="14.8551%" y="133" width="0.0431%" height="15" fill="rgb(228,99,48)" fg:x="8960" fg:w="26"/><text x="15.1051%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.03%)</title><rect x="14.8650%" y="117" width="0.0332%" height="15" fill="rgb(253,11,6)" fg:x="8966" fg:w="20"/><text x="15.1150%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (21 samples, 0.03%)</title><rect x="14.9065%" y="133" width="0.0348%" height="15" fill="rgb(247,143,39)" fg:x="8991" fg:w="21"/><text x="15.1565%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (11 samples, 0.02%)</title><rect x="14.9413%" y="133" width="0.0182%" height="15" fill="rgb(236,97,10)" fg:x="9012" fg:w="11"/><text x="15.1913%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (15 samples, 0.02%)</title><rect x="14.9977%" y="85" width="0.0249%" height="15" fill="rgb(233,208,19)" fg:x="9046" fg:w="15"/><text x="15.2477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (51 samples, 0.08%)</title><rect x="14.9595%" y="117" width="0.0846%" height="15" fill="rgb(216,164,2)" fg:x="9023" fg:w="51"/><text x="15.2095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (41 samples, 0.07%)</title><rect x="14.9761%" y="101" width="0.0680%" height="15" fill="rgb(220,129,5)" fg:x="9033" fg:w="41"/><text x="15.2261%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="15.0259%" y="85" width="0.0182%" height="15" fill="rgb(242,17,10)" fg:x="9063" fg:w="11"/><text x="15.2759%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.09%)</title><rect x="14.9595%" y="133" width="0.0879%" height="15" fill="rgb(242,107,0)" fg:x="9023" fg:w="53"/><text x="15.2095%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="15.0474%" y="133" width="0.0166%" height="15" fill="rgb(251,28,31)" fg:x="9076" fg:w="10"/><text x="15.2974%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (166 samples, 0.28%)</title><rect x="14.7921%" y="149" width="0.2752%" height="15" fill="rgb(233,223,10)" fg:x="8922" fg:w="166"/><text x="15.0421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (368 samples, 0.61%)</title><rect x="14.5799%" y="165" width="0.6101%" height="15" fill="rgb(215,21,27)" fg:x="8794" fg:w="368"/><text x="14.8299%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (73 samples, 0.12%)</title><rect x="15.0690%" y="149" width="0.1210%" height="15" fill="rgb(232,23,21)" fg:x="9089" fg:w="73"/><text x="15.3190%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="15.1900%" y="165" width="0.0298%" height="15" fill="rgb(244,5,23)" fg:x="9162" fg:w="18"/><text x="15.4400%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="15.2198%" y="165" width="0.0149%" height="15" fill="rgb(226,81,46)" fg:x="9180" fg:w="9"/><text x="15.4698%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (580 samples, 0.96%)</title><rect x="14.3047%" y="213" width="0.9616%" height="15" fill="rgb(247,70,30)" fg:x="8628" fg:w="580"/><text x="14.5547%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (492 samples, 0.82%)</title><rect x="14.4506%" y="197" width="0.8157%" height="15" fill="rgb(212,68,19)" fg:x="8716" fg:w="492"/><text x="14.7006%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (448 samples, 0.74%)</title><rect x="14.5235%" y="181" width="0.7428%" height="15" fill="rgb(240,187,13)" fg:x="8760" fg:w="448"/><text x="14.7735%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="15.2464%" y="165" width="0.0199%" height="15" fill="rgb(223,113,26)" fg:x="9196" fg:w="12"/><text x="15.4964%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="15.2530%" y="149" width="0.0133%" height="15" fill="rgb(206,192,2)" fg:x="9200" fg:w="8"/><text x="15.5030%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="15.2663%" y="213" width="0.0216%" height="15" fill="rgb(241,108,4)" fg:x="9208" fg:w="13"/><text x="15.5163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="15.4536%" y="197" width="0.0315%" height="15" fill="rgb(247,173,49)" fg:x="9321" fg:w="19"/><text x="15.7036%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (250 samples, 0.41%)</title><rect x="16.3041%" y="181" width="0.4145%" height="15" fill="rgb(224,114,35)" fg:x="9834" fg:w="250"/><text x="16.5541%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (43 samples, 0.07%)</title><rect x="16.7186%" y="181" width="0.0713%" height="15" fill="rgb(245,159,27)" fg:x="10084" fg:w="43"/><text x="16.9686%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (54 samples, 0.09%)</title><rect x="16.7899%" y="181" width="0.0895%" height="15" fill="rgb(245,172,44)" fg:x="10127" fg:w="54"/><text x="17.0399%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (143 samples, 0.24%)</title><rect x="16.8794%" y="181" width="0.2371%" height="15" fill="rgb(236,23,11)" fg:x="10181" fg:w="143"/><text x="17.1294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (87 samples, 0.14%)</title><rect x="16.9723%" y="165" width="0.1442%" height="15" fill="rgb(205,117,38)" fg:x="10237" fg:w="87"/><text x="17.2223%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (986 samples, 1.63%)</title><rect x="15.4851%" y="197" width="1.6347%" height="15" fill="rgb(237,72,25)" fg:x="9340" fg:w="986"/><text x="15.7351%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (188 samples, 0.31%)</title><rect x="17.5293%" y="181" width="0.3117%" height="15" fill="rgb(244,70,9)" fg:x="10573" fg:w="188"/><text x="17.7793%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (43 samples, 0.07%)</title><rect x="17.8410%" y="181" width="0.0713%" height="15" fill="rgb(217,125,39)" fg:x="10761" fg:w="43"/><text x="18.0910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (45 samples, 0.07%)</title><rect x="17.9123%" y="181" width="0.0746%" height="15" fill="rgb(235,36,10)" fg:x="10804" fg:w="45"/><text x="18.1623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (800 samples, 1.33%)</title><rect x="17.1198%" y="197" width="1.3263%" height="15" fill="rgb(251,123,47)" fg:x="10326" fg:w="800"/><text x="17.3698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (277 samples, 0.46%)</title><rect x="17.9869%" y="181" width="0.4592%" height="15" fill="rgb(221,13,13)" fg:x="10849" fg:w="277"/><text x="18.2369%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (92 samples, 0.15%)</title><rect x="18.7861%" y="165" width="0.1525%" height="15" fill="rgb(238,131,9)" fg:x="11331" fg:w="92"/><text x="19.0361%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (401 samples, 0.66%)</title><rect x="18.4462%" y="197" width="0.6648%" height="15" fill="rgb(211,50,8)" fg:x="11126" fg:w="401"/><text x="18.6962%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (332 samples, 0.55%)</title><rect x="18.5606%" y="181" width="0.5504%" height="15" fill="rgb(245,182,24)" fg:x="11195" fg:w="332"/><text x="18.8106%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (104 samples, 0.17%)</title><rect x="18.9386%" y="165" width="0.1724%" height="15" fill="rgb(242,14,37)" fg:x="11423" fg:w="104"/><text x="19.1886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (61 samples, 0.10%)</title><rect x="19.1110%" y="197" width="0.1011%" height="15" fill="rgb(246,228,12)" fg:x="11527" fg:w="61"/><text x="19.3610%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (111 samples, 0.18%)</title><rect x="19.5189%" y="165" width="0.1840%" height="15" fill="rgb(213,55,15)" fg:x="11773" fg:w="111"/><text x="19.7689%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (297 samples, 0.49%)</title><rect x="19.2121%" y="197" width="0.4924%" height="15" fill="rgb(209,9,3)" fg:x="11588" fg:w="297"/><text x="19.4621%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (112 samples, 0.19%)</title><rect x="19.5189%" y="181" width="0.1857%" height="15" fill="rgb(230,59,30)" fg:x="11773" fg:w="112"/><text x="19.7689%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (62 samples, 0.10%)</title><rect x="19.7046%" y="197" width="0.1028%" height="15" fill="rgb(209,121,21)" fg:x="11885" fg:w="62"/><text x="19.9546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="19.8190%" y="197" width="0.0216%" height="15" fill="rgb(220,109,13)" fg:x="11954" fg:w="13"/><text x="20.0690%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (66 samples, 0.11%)</title><rect x="19.8455%" y="197" width="0.1094%" height="15" fill="rgb(232,18,1)" fg:x="11970" fg:w="66"/><text x="20.0955%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.05%)</title><rect x="19.9549%" y="197" width="0.0481%" height="15" fill="rgb(215,41,42)" fg:x="12036" fg:w="29"/><text x="20.2049%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="20.0030%" y="197" width="0.0216%" height="15" fill="rgb(224,123,36)" fg:x="12065" fg:w="13"/><text x="20.2530%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="20.0245%" y="197" width="0.0249%" height="15" fill="rgb(240,125,3)" fg:x="12078" fg:w="15"/><text x="20.2745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (219 samples, 0.36%)</title><rect x="20.0925%" y="181" width="0.3631%" height="15" fill="rgb(205,98,50)" fg:x="12119" fg:w="219"/><text x="20.3425%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (92 samples, 0.15%)</title><rect x="20.3031%" y="165" width="0.1525%" height="15" fill="rgb(205,185,37)" fg:x="12246" fg:w="92"/><text x="20.5531%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="20.4556%" y="181" width="0.0315%" height="15" fill="rgb(238,207,15)" fg:x="12338" fg:w="19"/><text x="20.7056%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (67 samples, 0.11%)</title><rect x="20.4871%" y="181" width="0.1111%" height="15" fill="rgb(213,199,42)" fg:x="12357" fg:w="67"/><text x="20.7371%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (3,229 samples, 5.35%)</title><rect x="15.2878%" y="213" width="5.3535%" height="15" fill="rgb(235,201,11)" fg:x="9221" fg:w="3229"/><text x="15.5378%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (357 samples, 0.59%)</title><rect x="20.0494%" y="197" width="0.5919%" height="15" fill="rgb(207,46,11)" fg:x="12093" fg:w="357"/><text x="20.2994%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (26 samples, 0.04%)</title><rect x="20.5982%" y="181" width="0.0431%" height="15" fill="rgb(241,35,35)" fg:x="12424" fg:w="26"/><text x="20.8482%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (144 samples, 0.24%)</title><rect x="20.6413%" y="213" width="0.2387%" height="15" fill="rgb(243,32,47)" fg:x="12450" fg:w="144"/><text x="20.8913%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (92 samples, 0.15%)</title><rect x="20.7275%" y="197" width="0.1525%" height="15" fill="rgb(247,202,23)" fg:x="12502" fg:w="92"/><text x="20.9775%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (36 samples, 0.06%)</title><rect x="20.8203%" y="181" width="0.0597%" height="15" fill="rgb(219,102,11)" fg:x="12558" fg:w="36"/><text x="21.0703%" y="191.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (48 samples, 0.08%)</title><rect x="21.5465%" y="197" width="0.0796%" height="15" fill="rgb(243,110,44)" fg:x="12996" fg:w="48"/><text x="21.7965%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (131 samples, 0.22%)</title><rect x="21.6294%" y="197" width="0.2172%" height="15" fill="rgb(222,74,54)" fg:x="13046" fg:w="131"/><text x="21.8794%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.03%)</title><rect x="21.9146%" y="181" width="0.0265%" height="15" fill="rgb(216,99,12)" fg:x="13218" fg:w="16"/><text x="22.1646%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="21.9444%" y="181" width="0.0133%" height="15" fill="rgb(226,22,26)" fg:x="13236" fg:w="8"/><text x="22.1944%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="21.9444%" y="165" width="0.0133%" height="15" fill="rgb(217,163,10)" fg:x="13236" fg:w="8"/><text x="22.1944%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.02%)</title><rect x="21.9710%" y="181" width="0.0166%" height="15" fill="rgb(213,25,53)" fg:x="13252" fg:w="10"/><text x="22.2210%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="22.2362%" y="133" width="0.0116%" height="15" fill="rgb(252,105,26)" fg:x="13412" fg:w="7"/><text x="22.4862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="22.2346%" y="149" width="0.0149%" height="15" fill="rgb(220,39,43)" fg:x="13411" fg:w="9"/><text x="22.4846%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="22.2545%" y="133" width="0.0182%" height="15" fill="rgb(229,68,48)" fg:x="13423" fg:w="11"/><text x="22.5045%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="22.2545%" y="117" width="0.0182%" height="15" fill="rgb(252,8,32)" fg:x="13423" fg:w="11"/><text x="22.5045%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="22.2279%" y="165" width="0.0481%" height="15" fill="rgb(223,20,43)" fg:x="13407" fg:w="29"/><text x="22.4779%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="22.2495%" y="149" width="0.0265%" height="15" fill="rgb(229,81,49)" fg:x="13420" fg:w="16"/><text x="22.4995%" y="159.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (114 samples, 0.19%)</title><rect x="22.2777%" y="165" width="0.1890%" height="15" fill="rgb(236,28,36)" fg:x="13437" fg:w="114"/><text x="22.5277%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (731 samples, 1.21%)</title><rect x="21.8466%" y="197" width="1.2120%" height="15" fill="rgb(249,185,26)" fg:x="13177" fg:w="731"/><text x="22.0966%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (644 samples, 1.07%)</title><rect x="21.9908%" y="181" width="1.0677%" height="15" fill="rgb(249,174,33)" fg:x="13264" fg:w="644"/><text x="22.2408%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (357 samples, 0.59%)</title><rect x="22.4667%" y="165" width="0.5919%" height="15" fill="rgb(233,201,37)" fg:x="13551" fg:w="357"/><text x="22.7167%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,311 samples, 2.17%)</title><rect x="20.8867%" y="213" width="2.1736%" height="15" fill="rgb(221,78,26)" fg:x="12598" fg:w="1311"/><text x="21.1367%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,804 samples, 2.99%)</title><rect x="23.0602%" y="213" width="2.9909%" height="15" fill="rgb(250,127,30)" fg:x="13909" fg:w="1804"/><text x="23.3102%" y="223.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (97 samples, 0.16%)</title><rect x="26.0511%" y="213" width="0.1608%" height="15" fill="rgb(230,49,44)" fg:x="15713" fg:w="97"/><text x="26.3011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.04%)</title><rect x="26.4242%" y="197" width="0.0448%" height="15" fill="rgb(229,67,23)" fg:x="15938" fg:w="27"/><text x="26.6742%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="26.4474%" y="181" width="0.0216%" height="15" fill="rgb(249,83,47)" fg:x="15952" fg:w="13"/><text x="26.6974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="26.4540%" y="165" width="0.0149%" height="15" fill="rgb(215,43,3)" fg:x="15956" fg:w="9"/><text x="26.7040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="26.4855%" y="181" width="0.0166%" height="15" fill="rgb(238,154,13)" fg:x="15975" fg:w="10"/><text x="26.7355%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (26 samples, 0.04%)</title><rect x="26.4689%" y="197" width="0.0431%" height="15" fill="rgb(219,56,2)" fg:x="15965" fg:w="26"/><text x="26.7189%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="26.5120%" y="197" width="0.0149%" height="15" fill="rgb(233,0,4)" fg:x="15991" fg:w="9"/><text x="26.7620%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="26.5137%" y="181" width="0.0133%" height="15" fill="rgb(235,30,7)" fg:x="15992" fg:w="8"/><text x="26.7637%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="26.5386%" y="197" width="0.0116%" height="15" fill="rgb(250,79,13)" fg:x="16007" fg:w="7"/><text x="26.7886%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (216 samples, 0.36%)</title><rect x="26.5568%" y="197" width="0.3581%" height="15" fill="rgb(211,146,34)" fg:x="16018" fg:w="216"/><text x="26.8068%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="27.3427%" y="117" width="0.0199%" height="15" fill="rgb(228,22,38)" fg:x="16492" fg:w="12"/><text x="27.5927%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (38 samples, 0.06%)</title><rect x="27.3178%" y="149" width="0.0630%" height="15" fill="rgb(235,168,5)" fg:x="16477" fg:w="38"/><text x="27.5678%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (34 samples, 0.06%)</title><rect x="27.3244%" y="133" width="0.0564%" height="15" fill="rgb(221,155,16)" fg:x="16481" fg:w="34"/><text x="27.5744%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.01%)</title><rect x="27.3675%" y="117" width="0.0133%" height="15" fill="rgb(215,215,53)" fg:x="16507" fg:w="8"/><text x="27.6175%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.08%)</title><rect x="27.3095%" y="165" width="0.0812%" height="15" fill="rgb(223,4,10)" fg:x="16472" fg:w="49"/><text x="27.5595%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.09%)</title><rect x="27.2996%" y="181" width="0.0928%" height="15" fill="rgb(234,103,6)" fg:x="16466" fg:w="56"/><text x="27.5496%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (455 samples, 0.75%)</title><rect x="27.3990%" y="181" width="0.7544%" height="15" fill="rgb(227,97,0)" fg:x="16526" fg:w="455"/><text x="27.6490%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,533 samples, 2.54%)</title><rect x="26.2120%" y="213" width="2.5416%" height="15" fill="rgb(234,150,53)" fg:x="15810" fg:w="1533"/><text x="26.4620%" y="223.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,109 samples, 1.84%)</title><rect x="26.9149%" y="197" width="1.8386%" height="15" fill="rgb(228,201,54)" fg:x="16234" fg:w="1109"/><text x="27.1649%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (362 samples, 0.60%)</title><rect x="28.1534%" y="181" width="0.6002%" height="15" fill="rgb(222,22,37)" fg:x="16981" fg:w="362"/><text x="28.4034%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (10 samples, 0.02%)</title><rect x="28.7536%" y="213" width="0.0166%" height="15" fill="rgb(237,53,32)" fg:x="17343" fg:w="10"/><text x="29.0036%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.02%)</title><rect x="28.7701%" y="213" width="0.0199%" height="15" fill="rgb(233,25,53)" fg:x="17353" fg:w="12"/><text x="29.0201%" y="223.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (227 samples, 0.38%)</title><rect x="28.7900%" y="213" width="0.3764%" height="15" fill="rgb(210,40,34)" fg:x="17365" fg:w="227"/><text x="29.0400%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5,166 samples, 8.56%)</title><rect x="33.7904%" y="197" width="8.5649%" height="15" fill="rgb(241,220,44)" fg:x="20381" fg:w="5166"/><text x="34.0404%" y="207.50">rust_qecp`&lt;s..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="42.3851%" y="133" width="0.0133%" height="15" fill="rgb(235,28,35)" fg:x="25565" fg:w="8"/><text x="42.6351%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="42.4000%" y="117" width="0.0133%" height="15" fill="rgb(210,56,17)" fg:x="25574" fg:w="8"/><text x="42.6500%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="42.4332%" y="117" width="0.0298%" height="15" fill="rgb(224,130,29)" fg:x="25594" fg:w="18"/><text x="42.6832%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.03%)</title><rect x="42.4365%" y="101" width="0.0265%" height="15" fill="rgb(235,212,8)" fg:x="25596" fg:w="16"/><text x="42.6865%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.03%)</title><rect x="42.4365%" y="85" width="0.0265%" height="15" fill="rgb(223,33,50)" fg:x="25596" fg:w="16"/><text x="42.6865%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (42 samples, 0.07%)</title><rect x="42.3984%" y="133" width="0.0696%" height="15" fill="rgb(219,149,13)" fg:x="25573" fg:w="42"/><text x="42.6484%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (72 samples, 0.12%)</title><rect x="42.3735%" y="149" width="0.1194%" height="15" fill="rgb(250,156,29)" fg:x="25558" fg:w="72"/><text x="42.6235%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="42.4680%" y="133" width="0.0249%" height="15" fill="rgb(216,193,19)" fg:x="25615" fg:w="15"/><text x="42.7180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (81 samples, 0.13%)</title><rect x="42.3702%" y="165" width="0.1343%" height="15" fill="rgb(216,135,14)" fg:x="25556" fg:w="81"/><text x="42.6202%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (90 samples, 0.15%)</title><rect x="42.3569%" y="197" width="0.1492%" height="15" fill="rgb(241,47,5)" fg:x="25548" fg:w="90"/><text x="42.6069%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.14%)</title><rect x="42.3636%" y="181" width="0.1426%" height="15" fill="rgb(233,42,35)" fg:x="25552" fg:w="86"/><text x="42.6136%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,720 samples, 4.51%)</title><rect x="42.5095%" y="197" width="4.5096%" height="15" fill="rgb(231,13,6)" fg:x="25640" fg:w="2720"/><text x="42.7595%" y="207.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (119 samples, 0.20%)</title><rect x="47.0190%" y="197" width="0.1973%" height="15" fill="rgb(207,181,40)" fg:x="28360" fg:w="119"/><text x="47.2690%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="47.3473%" y="181" width="0.0133%" height="15" fill="rgb(254,173,49)" fg:x="28558" fg:w="8"/><text x="47.5973%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="47.3606%" y="181" width="0.0133%" height="15" fill="rgb(221,1,38)" fg:x="28566" fg:w="8"/><text x="47.6106%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (135 samples, 0.22%)</title><rect x="47.3838%" y="181" width="0.2238%" height="15" fill="rgb(206,124,46)" fg:x="28580" fg:w="135"/><text x="47.6338%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (25 samples, 0.04%)</title><rect x="47.9425%" y="133" width="0.0414%" height="15" fill="rgb(249,21,11)" fg:x="28917" fg:w="25"/><text x="48.1925%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (21 samples, 0.03%)</title><rect x="47.9491%" y="117" width="0.0348%" height="15" fill="rgb(222,201,40)" fg:x="28921" fg:w="21"/><text x="48.1991%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.05%)</title><rect x="47.9375%" y="149" width="0.0547%" height="15" fill="rgb(235,61,29)" fg:x="28914" fg:w="33"/><text x="48.1875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.07%)</title><rect x="47.9276%" y="165" width="0.0663%" height="15" fill="rgb(219,207,3)" fg:x="28908" fg:w="40"/><text x="48.1776%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (462 samples, 0.77%)</title><rect x="47.9939%" y="165" width="0.7660%" height="15" fill="rgb(222,56,46)" fg:x="28948" fg:w="462"/><text x="48.2439%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,329 samples, 2.20%)</title><rect x="47.2163%" y="197" width="2.2034%" height="15" fill="rgb(239,76,54)" fg:x="28479" fg:w="1329"/><text x="47.4663%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,093 samples, 1.81%)</title><rect x="47.6076%" y="181" width="1.8121%" height="15" fill="rgb(231,124,27)" fg:x="28715" fg:w="1093"/><text x="47.8576%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (398 samples, 0.66%)</title><rect x="48.7599%" y="165" width="0.6599%" height="15" fill="rgb(249,195,6)" fg:x="29410" fg:w="398"/><text x="49.0099%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="54.9821%" y="117" width="0.0216%" height="15" fill="rgb(237,174,47)" fg:x="33163" fg:w="13"/><text x="55.2321%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="55.0070%" y="101" width="0.0133%" height="15" fill="rgb(206,201,31)" fg:x="33178" fg:w="8"/><text x="55.2570%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (7 samples, 0.01%)</title><rect x="55.0318%" y="101" width="0.0116%" height="15" fill="rgb(231,57,52)" fg:x="33193" fg:w="7"/><text x="55.2818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="55.0451%" y="101" width="0.0216%" height="15" fill="rgb(248,177,22)" fg:x="33201" fg:w="13"/><text x="55.2951%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="55.0468%" y="85" width="0.0199%" height="15" fill="rgb(215,211,37)" fg:x="33202" fg:w="12"/><text x="55.2968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="55.0517%" y="69" width="0.0149%" height="15" fill="rgb(241,128,51)" fg:x="33205" fg:w="9"/><text x="55.3017%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (38 samples, 0.06%)</title><rect x="55.0070%" y="117" width="0.0630%" height="15" fill="rgb(227,165,31)" fg:x="33178" fg:w="38"/><text x="55.2570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (89 samples, 0.15%)</title><rect x="54.9721%" y="133" width="0.1476%" height="15" fill="rgb(228,167,24)" fg:x="33157" fg:w="89"/><text x="55.2221%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.05%)</title><rect x="55.0716%" y="117" width="0.0481%" height="15" fill="rgb(228,143,12)" fg:x="33217" fg:w="29"/><text x="55.3216%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (108 samples, 0.18%)</title><rect x="54.9506%" y="181" width="0.1791%" height="15" fill="rgb(249,149,8)" fg:x="33144" fg:w="108"/><text x="55.2006%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (105 samples, 0.17%)</title><rect x="54.9556%" y="165" width="0.1741%" height="15" fill="rgb(243,35,44)" fg:x="33147" fg:w="105"/><text x="55.2056%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (103 samples, 0.17%)</title><rect x="54.9589%" y="149" width="0.1708%" height="15" fill="rgb(246,89,9)" fg:x="33149" fg:w="103"/><text x="55.2089%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (15,661 samples, 25.96%)</title><rect x="29.1664%" y="213" width="25.9649%" height="15" fill="rgb(233,213,13)" fg:x="17592" fg:w="15661"/><text x="29.4164%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMode..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,445 samples, 5.71%)</title><rect x="49.4197%" y="197" width="5.7116%" height="15" fill="rgb(233,141,41)" fg:x="29808" fg:w="3445"/><text x="49.6697%" y="207.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="57.6696%" y="133" width="0.0133%" height="15" fill="rgb(239,167,4)" fg:x="34784" fg:w="8"/><text x="57.9196%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.09%)</title><rect x="57.6016%" y="197" width="0.0862%" height="15" fill="rgb(209,217,16)" fg:x="34743" fg:w="52"/><text x="57.8516%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.03%)</title><rect x="57.6580%" y="181" width="0.0298%" height="15" fill="rgb(219,88,35)" fg:x="34777" fg:w="18"/><text x="57.9080%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="57.6630%" y="165" width="0.0249%" height="15" fill="rgb(220,193,23)" fg:x="34780" fg:w="15"/><text x="57.9130%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="57.6663%" y="149" width="0.0216%" height="15" fill="rgb(230,90,52)" fg:x="34782" fg:w="13"/><text x="57.9163%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (64 samples, 0.11%)</title><rect x="57.6912%" y="181" width="0.1061%" height="15" fill="rgb(252,106,19)" fg:x="34797" fg:w="64"/><text x="57.9412%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="57.7973%" y="181" width="0.0332%" height="15" fill="rgb(206,74,20)" fg:x="34861" fg:w="20"/><text x="58.0473%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="57.8304%" y="181" width="0.0315%" height="15" fill="rgb(230,138,44)" fg:x="34881" fg:w="19"/><text x="58.0804%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.04%)</title><rect x="57.8619%" y="181" width="0.0431%" height="15" fill="rgb(235,182,43)" fg:x="34900" fg:w="26"/><text x="58.1119%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.03%)</title><rect x="57.9050%" y="181" width="0.0298%" height="15" fill="rgb(242,16,51)" fg:x="34926" fg:w="18"/><text x="58.1550%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.04%)</title><rect x="57.9349%" y="181" width="0.0381%" height="15" fill="rgb(248,9,4)" fg:x="34944" fg:w="23"/><text x="58.1849%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="58.4140%" y="149" width="0.0249%" height="15" fill="rgb(210,31,22)" fg:x="35233" fg:w="15"/><text x="58.6640%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (310 samples, 0.51%)</title><rect x="58.5848%" y="133" width="0.5140%" height="15" fill="rgb(239,54,39)" fg:x="35336" fg:w="310"/><text x="58.8348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (77 samples, 0.13%)</title><rect x="58.9711%" y="117" width="0.1277%" height="15" fill="rgb(230,99,41)" fg:x="35569" fg:w="77"/><text x="59.2211%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (651 samples, 1.08%)</title><rect x="58.0924%" y="165" width="1.0793%" height="15" fill="rgb(253,106,12)" fg:x="35039" fg:w="651"/><text x="58.3424%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (442 samples, 0.73%)</title><rect x="58.4389%" y="149" width="0.7328%" height="15" fill="rgb(213,46,41)" fg:x="35248" fg:w="442"/><text x="58.6889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.07%)</title><rect x="59.0987%" y="133" width="0.0729%" height="15" fill="rgb(215,133,35)" fg:x="35646" fg:w="44"/><text x="59.3487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (48 samples, 0.08%)</title><rect x="59.1717%" y="165" width="0.0796%" height="15" fill="rgb(213,28,5)" fg:x="35690" fg:w="48"/><text x="59.4217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (243 samples, 0.40%)</title><rect x="59.2513%" y="165" width="0.4029%" height="15" fill="rgb(215,77,49)" fg:x="35738" fg:w="243"/><text x="59.5013%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (99 samples, 0.16%)</title><rect x="59.4900%" y="149" width="0.1641%" height="15" fill="rgb(248,100,22)" fg:x="35882" fg:w="99"/><text x="59.7400%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="59.6542%" y="165" width="0.0348%" height="15" fill="rgb(208,67,9)" fg:x="35981" fg:w="21"/><text x="59.9042%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (73 samples, 0.12%)</title><rect x="59.6890%" y="165" width="0.1210%" height="15" fill="rgb(219,133,21)" fg:x="36002" fg:w="73"/><text x="59.9390%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="59.8100%" y="165" width="0.0133%" height="15" fill="rgb(246,46,29)" fg:x="36075" fg:w="8"/><text x="60.0600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="59.8233%" y="165" width="0.0249%" height="15" fill="rgb(246,185,52)" fg:x="36083" fg:w="15"/><text x="60.0733%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="59.9377%" y="149" width="0.0116%" height="15" fill="rgb(252,136,11)" fg:x="36152" fg:w="7"/><text x="60.1877%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (196 samples, 0.32%)</title><rect x="59.9493%" y="149" width="0.3250%" height="15" fill="rgb(219,138,53)" fg:x="36159" fg:w="196"/><text x="60.1993%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="60.2742%" y="149" width="0.0249%" height="15" fill="rgb(211,51,23)" fg:x="36355" fg:w="15"/><text x="60.5242%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="60.2991%" y="149" width="0.0149%" height="15" fill="rgb(247,221,28)" fg:x="36370" fg:w="9"/><text x="60.5491%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (82 samples, 0.14%)</title><rect x="60.3886%" y="133" width="0.1360%" height="15" fill="rgb(251,222,45)" fg:x="36424" fg:w="82"/><text x="60.6386%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (114 samples, 0.19%)</title><rect x="60.5246%" y="133" width="0.1890%" height="15" fill="rgb(217,162,53)" fg:x="36506" fg:w="114"/><text x="60.7746%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (266 samples, 0.44%)</title><rect x="60.3240%" y="149" width="0.4410%" height="15" fill="rgb(229,93,14)" fg:x="36385" fg:w="266"/><text x="60.5740%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.05%)</title><rect x="60.7136%" y="133" width="0.0514%" height="15" fill="rgb(209,67,49)" fg:x="36620" fg:w="31"/><text x="60.9636%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="60.7650%" y="149" width="0.0315%" height="15" fill="rgb(213,87,29)" fg:x="36651" fg:w="19"/><text x="61.0150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (145 samples, 0.24%)</title><rect x="61.2673%" y="101" width="0.2404%" height="15" fill="rgb(205,151,52)" fg:x="36954" fg:w="145"/><text x="61.5173%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.07%)</title><rect x="61.4348%" y="85" width="0.0729%" height="15" fill="rgb(253,215,39)" fg:x="37055" fg:w="44"/><text x="61.6848%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (297 samples, 0.49%)</title><rect x="61.0568%" y="133" width="0.4924%" height="15" fill="rgb(221,220,41)" fg:x="36827" fg:w="297"/><text x="61.3068%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (211 samples, 0.35%)</title><rect x="61.1994%" y="117" width="0.3498%" height="15" fill="rgb(218,133,21)" fg:x="36913" fg:w="211"/><text x="61.4494%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="61.5077%" y="101" width="0.0414%" height="15" fill="rgb(221,193,43)" fg:x="37099" fg:w="25"/><text x="61.7577%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="61.5492%" y="133" width="0.0348%" height="15" fill="rgb(240,128,52)" fg:x="37124" fg:w="21"/><text x="61.7992%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,051 samples, 1.74%)</title><rect x="59.8481%" y="165" width="1.7425%" height="15" fill="rgb(253,114,12)" fg:x="36098" fg:w="1051"/><text x="60.0981%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (479 samples, 0.79%)</title><rect x="60.7965%" y="149" width="0.7942%" height="15" fill="rgb(215,223,47)" fg:x="36670" fg:w="479"/><text x="61.0465%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (65 samples, 0.11%)</title><rect x="61.7614%" y="149" width="0.1078%" height="15" fill="rgb(248,225,23)" fg:x="37252" fg:w="65"/><text x="62.0114%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (110 samples, 0.18%)</title><rect x="61.8692%" y="149" width="0.1824%" height="15" fill="rgb(250,108,0)" fg:x="37317" fg:w="110"/><text x="62.1192%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (324 samples, 0.54%)</title><rect x="61.5906%" y="165" width="0.5372%" height="15" fill="rgb(228,208,7)" fg:x="37149" fg:w="324"/><text x="61.8406%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (46 samples, 0.08%)</title><rect x="62.0515%" y="149" width="0.0763%" height="15" fill="rgb(244,45,10)" fg:x="37427" fg:w="46"/><text x="62.3015%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="62.1278%" y="165" width="0.0315%" height="15" fill="rgb(207,125,25)" fg:x="37473" fg:w="19"/><text x="62.3778%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,547 samples, 4.22%)</title><rect x="57.9747%" y="181" width="4.2228%" height="15" fill="rgb(210,195,18)" fg:x="34968" fg:w="2547"/><text x="58.2247%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.04%)</title><rect x="62.1593%" y="165" width="0.0381%" height="15" fill="rgb(249,80,12)" fg:x="37492" fg:w="23"/><text x="62.4093%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (8 samples, 0.01%)</title><rect x="62.1974%" y="181" width="0.0133%" height="15" fill="rgb(221,65,9)" fg:x="37515" fg:w="8"/><text x="62.4474%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (18 samples, 0.03%)</title><rect x="62.2107%" y="181" width="0.0298%" height="15" fill="rgb(235,49,36)" fg:x="37523" fg:w="18"/><text x="62.4607%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (37 samples, 0.06%)</title><rect x="62.2405%" y="181" width="0.0613%" height="15" fill="rgb(225,32,20)" fg:x="37541" fg:w="37"/><text x="62.4905%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (31 samples, 0.05%)</title><rect x="62.3035%" y="181" width="0.0514%" height="15" fill="rgb(215,141,46)" fg:x="37579" fg:w="31"/><text x="62.5535%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30 samples, 0.05%)</title><rect x="62.3549%" y="181" width="0.0497%" height="15" fill="rgb(250,160,47)" fg:x="37610" fg:w="30"/><text x="62.6049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="62.4146%" y="165" width="0.0282%" height="15" fill="rgb(216,222,40)" fg:x="37646" fg:w="17"/><text x="62.6646%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="62.4196%" y="149" width="0.0232%" height="15" fill="rgb(234,217,39)" fg:x="37649" fg:w="14"/><text x="62.6696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="62.4196%" y="133" width="0.0232%" height="15" fill="rgb(207,178,40)" fg:x="37649" fg:w="14"/><text x="62.6696%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="62.4246%" y="117" width="0.0182%" height="15" fill="rgb(221,136,13)" fg:x="37652" fg:w="11"/><text x="62.6746%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.04%)</title><rect x="62.4047%" y="181" width="0.0398%" height="15" fill="rgb(249,199,10)" fg:x="37640" fg:w="24"/><text x="62.6547%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,875 samples, 4.77%)</title><rect x="57.6895%" y="197" width="4.7666%" height="15" fill="rgb(249,222,13)" fg:x="34796" fg:w="2875"/><text x="57.9395%" y="207.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (7 samples, 0.01%)</title><rect x="62.4445%" y="181" width="0.0116%" height="15" fill="rgb(244,185,38)" fg:x="37664" fg:w="7"/><text x="62.6945%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="62.4842%" y="133" width="0.0166%" height="15" fill="rgb(236,202,9)" fg:x="37688" fg:w="10"/><text x="62.7342%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="62.4842%" y="117" width="0.0166%" height="15" fill="rgb(250,229,37)" fg:x="37688" fg:w="10"/><text x="62.7342%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.04%)</title><rect x="62.4826%" y="149" width="0.0398%" height="15" fill="rgb(206,174,23)" fg:x="37687" fg:w="24"/><text x="62.7326%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="62.5025%" y="133" width="0.0199%" height="15" fill="rgb(211,33,43)" fg:x="37699" fg:w="12"/><text x="62.7525%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="62.4760%" y="165" width="0.0481%" height="15" fill="rgb(245,58,50)" fg:x="37683" fg:w="29"/><text x="62.7260%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 0.06%)</title><rect x="62.4610%" y="197" width="0.0647%" height="15" fill="rgb(244,68,36)" fg:x="37674" fg:w="39"/><text x="62.7110%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="62.4726%" y="181" width="0.0531%" height="15" fill="rgb(232,229,15)" fg:x="37681" fg:w="32"/><text x="62.7226%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="62.8473%" y="181" width="0.0166%" height="15" fill="rgb(254,30,23)" fg:x="37907" fg:w="10"/><text x="63.0973%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (38 samples, 0.06%)</title><rect x="62.8656%" y="181" width="0.0630%" height="15" fill="rgb(235,160,14)" fg:x="37918" fg:w="38"/><text x="63.1156%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="62.9286%" y="181" width="0.0365%" height="15" fill="rgb(212,155,44)" fg:x="37956" fg:w="22"/><text x="63.1786%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (41 samples, 0.07%)</title><rect x="62.9651%" y="181" width="0.0680%" height="15" fill="rgb(226,2,50)" fg:x="37978" fg:w="41"/><text x="63.2151%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="63.0330%" y="181" width="0.0282%" height="15" fill="rgb(234,177,6)" fg:x="38019" fg:w="17"/><text x="63.2830%" y="191.50"></text></g><g><title>rust_qecp`__rdl_realloc (28 samples, 0.05%)</title><rect x="63.0612%" y="181" width="0.0464%" height="15" fill="rgb(217,24,9)" fg:x="38036" fg:w="28"/><text x="63.3112%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (151 samples, 0.25%)</title><rect x="63.4624%" y="133" width="0.2503%" height="15" fill="rgb(220,13,46)" fg:x="38278" fg:w="151"/><text x="63.7124%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.07%)</title><rect x="63.6382%" y="117" width="0.0746%" height="15" fill="rgb(239,221,27)" fg:x="38384" fg:w="45"/><text x="63.8882%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (327 samples, 0.54%)</title><rect x="63.1938%" y="165" width="0.5421%" height="15" fill="rgb(222,198,25)" fg:x="38116" fg:w="327"/><text x="63.4438%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (205 samples, 0.34%)</title><rect x="63.3961%" y="149" width="0.3399%" height="15" fill="rgb(211,99,13)" fg:x="38238" fg:w="205"/><text x="63.6461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="63.7128%" y="133" width="0.0232%" height="15" fill="rgb(232,111,31)" fg:x="38429" fg:w="14"/><text x="63.9628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.05%)</title><rect x="63.7360%" y="165" width="0.0481%" height="15" fill="rgb(245,82,37)" fg:x="38443" fg:w="29"/><text x="63.9860%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.03%)</title><rect x="63.7841%" y="165" width="0.0282%" height="15" fill="rgb(227,149,46)" fg:x="38472" fg:w="17"/><text x="64.0341%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (32 samples, 0.05%)</title><rect x="63.8139%" y="165" width="0.0531%" height="15" fill="rgb(218,36,50)" fg:x="38490" fg:w="32"/><text x="64.0639%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (25 samples, 0.04%)</title><rect x="64.1571%" y="149" width="0.0414%" height="15" fill="rgb(226,80,48)" fg:x="38697" fg:w="25"/><text x="64.4071%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (17 samples, 0.03%)</title><rect x="64.3445%" y="133" width="0.0282%" height="15" fill="rgb(238,224,15)" fg:x="38810" fg:w="17"/><text x="64.5945%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (30 samples, 0.05%)</title><rect x="64.3726%" y="133" width="0.0497%" height="15" fill="rgb(241,136,10)" fg:x="38827" fg:w="30"/><text x="64.6226%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.08%)</title><rect x="64.4224%" y="133" width="0.0779%" height="15" fill="rgb(208,32,45)" fg:x="38857" fg:w="47"/><text x="64.6724%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="64.5003%" y="133" width="0.0133%" height="15" fill="rgb(207,135,9)" fg:x="38904" fg:w="8"/><text x="64.7503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (175 samples, 0.29%)</title><rect x="64.5136%" y="133" width="0.2901%" height="15" fill="rgb(206,86,44)" fg:x="38912" fg:w="175"/><text x="64.7636%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="65.0723%" y="117" width="0.0216%" height="15" fill="rgb(245,177,15)" fg:x="39249" fg:w="13"/><text x="65.3223%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (44 samples, 0.07%)</title><rect x="65.0938%" y="117" width="0.0729%" height="15" fill="rgb(206,64,50)" fg:x="39262" fg:w="44"/><text x="65.3438%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (140 samples, 0.23%)</title><rect x="65.1668%" y="117" width="0.2321%" height="15" fill="rgb(234,36,40)" fg:x="39306" fg:w="140"/><text x="65.4168%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (99 samples, 0.16%)</title><rect x="65.7040%" y="85" width="0.1641%" height="15" fill="rgb(213,64,8)" fg:x="39630" fg:w="99"/><text x="65.9540%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (250 samples, 0.41%)</title><rect x="65.4718%" y="101" width="0.4145%" height="15" fill="rgb(210,75,36)" fg:x="39490" fg:w="250"/><text x="65.7218%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.02%)</title><rect x="65.8681%" y="85" width="0.0182%" height="15" fill="rgb(229,88,21)" fg:x="39729" fg:w="11"/><text x="66.1181%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (304 samples, 0.50%)</title><rect x="65.3989%" y="117" width="0.5040%" height="15" fill="rgb(252,204,47)" fg:x="39446" fg:w="304"/><text x="65.6489%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="65.8863%" y="101" width="0.0166%" height="15" fill="rgb(208,77,27)" fg:x="39740" fg:w="10"/><text x="66.1363%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (150 samples, 0.25%)</title><rect x="65.9029%" y="117" width="0.2487%" height="15" fill="rgb(221,76,26)" fg:x="39750" fg:w="150"/><text x="66.1529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (61 samples, 0.10%)</title><rect x="66.3025%" y="85" width="0.1011%" height="15" fill="rgb(225,139,18)" fg:x="39991" fg:w="61"/><text x="66.5525%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (240 samples, 0.40%)</title><rect x="66.1516%" y="117" width="0.3979%" height="15" fill="rgb(230,137,11)" fg:x="39900" fg:w="240"/><text x="66.4016%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (215 samples, 0.36%)</title><rect x="66.1930%" y="101" width="0.3565%" height="15" fill="rgb(212,28,1)" fg:x="39925" fg:w="215"/><text x="66.4430%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (88 samples, 0.15%)</title><rect x="66.4036%" y="85" width="0.1459%" height="15" fill="rgb(248,164,17)" fg:x="40052" fg:w="88"/><text x="66.6536%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,068 samples, 1.77%)</title><rect x="64.8037%" y="133" width="1.7707%" height="15" fill="rgb(222,171,42)" fg:x="39087" fg:w="1068"/><text x="65.0537%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="66.5495%" y="117" width="0.0249%" height="15" fill="rgb(243,84,45)" fg:x="40140" fg:w="15"/><text x="66.7995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,528 samples, 2.53%)</title><rect x="64.1986%" y="149" width="2.5333%" height="15" fill="rgb(252,49,23)" fg:x="38722" fg:w="1528"/><text x="64.4486%" y="159.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.15%)</title><rect x="66.5827%" y="133" width="0.1492%" height="15" fill="rgb(215,19,7)" fg:x="40160" fg:w="90"/><text x="66.8327%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (163 samples, 0.27%)</title><rect x="66.7319%" y="149" width="0.2702%" height="15" fill="rgb(238,81,41)" fg:x="40250" fg:w="163"/><text x="66.9819%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (51 samples, 0.08%)</title><rect x="67.0021%" y="149" width="0.0846%" height="15" fill="rgb(210,199,37)" fg:x="40413" fg:w="51"/><text x="67.2521%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,952 samples, 3.24%)</title><rect x="63.8670%" y="165" width="3.2363%" height="15" fill="rgb(244,192,49)" fg:x="38522" fg:w="1952"/><text x="64.1170%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="67.0867%" y="149" width="0.0166%" height="15" fill="rgb(226,211,11)" fg:x="40464" fg:w="10"/><text x="67.3367%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,766 samples, 4.59%)</title><rect x="62.5257%" y="197" width="4.5858%" height="15" fill="rgb(236,162,54)" fg:x="37713" fg:w="2766"/><text x="62.7757%" y="207.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,415 samples, 4.00%)</title><rect x="63.1076%" y="181" width="4.0039%" height="15" fill="rgb(220,229,9)" fg:x="38064" fg:w="2415"/><text x="63.3576%" y="191.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.14%)</title><rect x="67.1115%" y="197" width="0.1426%" height="15" fill="rgb(250,87,22)" fg:x="40479" fg:w="86"/><text x="67.3615%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (78 samples, 0.13%)</title><rect x="67.2541%" y="181" width="0.1293%" height="15" fill="rgb(239,43,17)" fg:x="40565" fg:w="78"/><text x="67.5041%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="67.3834%" y="181" width="0.0116%" height="15" fill="rgb(231,177,25)" fg:x="40643" fg:w="7"/><text x="67.6334%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="67.3834%" y="165" width="0.0116%" height="15" fill="rgb(219,179,1)" fg:x="40643" fg:w="7"/><text x="67.6334%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="67.3834%" y="149" width="0.0116%" height="15" fill="rgb(238,219,53)" fg:x="40643" fg:w="7"/><text x="67.6334%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="67.4000%" y="181" width="0.0133%" height="15" fill="rgb(232,167,36)" fg:x="40653" fg:w="8"/><text x="67.6500%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.04%)</title><rect x="67.5559%" y="165" width="0.0365%" height="15" fill="rgb(244,19,51)" fg:x="40747" fg:w="22"/><text x="67.8059%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="67.5923%" y="165" width="0.0265%" height="15" fill="rgb(224,6,22)" fg:x="40769" fg:w="16"/><text x="67.8423%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="67.6255%" y="165" width="0.0182%" height="15" fill="rgb(224,145,5)" fg:x="40789" fg:w="11"/><text x="67.8755%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.05%)</title><rect x="67.9405%" y="133" width="0.0497%" height="15" fill="rgb(234,130,49)" fg:x="40979" fg:w="30"/><text x="68.1905%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.03%)</title><rect x="67.9903%" y="133" width="0.0332%" height="15" fill="rgb(254,6,2)" fg:x="41009" fg:w="20"/><text x="68.2403%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.03%)</title><rect x="68.0748%" y="117" width="0.0265%" height="15" fill="rgb(208,96,46)" fg:x="41060" fg:w="16"/><text x="68.3248%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.02%)</title><rect x="68.3301%" y="101" width="0.0216%" height="15" fill="rgb(239,3,39)" fg:x="41214" fg:w="13"/><text x="68.5801%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="68.3517%" y="101" width="0.0116%" height="15" fill="rgb(233,210,1)" fg:x="41227" fg:w="7"/><text x="68.6017%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (353 samples, 0.59%)</title><rect x="68.5291%" y="85" width="0.5853%" height="15" fill="rgb(244,137,37)" fg:x="41334" fg:w="353"/><text x="68.7791%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (54 samples, 0.09%)</title><rect x="69.1143%" y="85" width="0.0895%" height="15" fill="rgb(240,136,2)" fg:x="41687" fg:w="54"/><text x="69.3643%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,113 samples, 1.85%)</title><rect x="67.7664%" y="149" width="1.8453%" height="15" fill="rgb(239,18,37)" fg:x="40874" fg:w="1113"/><text x="68.0164%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (958 samples, 1.59%)</title><rect x="68.0234%" y="133" width="1.5883%" height="15" fill="rgb(218,185,22)" fg:x="41029" fg:w="958"/><text x="68.2734%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (911 samples, 1.51%)</title><rect x="68.1013%" y="117" width="1.5104%" height="15" fill="rgb(225,218,4)" fg:x="41076" fg:w="911"/><text x="68.3513%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (752 samples, 1.25%)</title><rect x="68.3649%" y="101" width="1.2468%" height="15" fill="rgb(230,182,32)" fg:x="41235" fg:w="752"/><text x="68.6149%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (246 samples, 0.41%)</title><rect x="69.2039%" y="85" width="0.4079%" height="15" fill="rgb(242,56,43)" fg:x="41741" fg:w="246"/><text x="69.4539%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.04%)</title><rect x="69.6117%" y="149" width="0.0448%" height="15" fill="rgb(233,99,24)" fg:x="41987" fg:w="27"/><text x="69.8617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.09%)</title><rect x="69.6565%" y="149" width="0.0895%" height="15" fill="rgb(234,209,42)" fg:x="42014" fg:w="54"/><text x="69.9065%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,416 samples, 2.35%)</title><rect x="67.4149%" y="181" width="2.3476%" height="15" fill="rgb(227,7,12)" fg:x="40662" fg:w="1416"/><text x="67.6649%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,278 samples, 2.12%)</title><rect x="67.6437%" y="165" width="2.1188%" height="15" fill="rgb(245,203,43)" fg:x="40800" fg:w="1278"/><text x="67.8937%" y="175.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="69.7460%" y="149" width="0.0166%" height="15" fill="rgb(238,205,33)" fg:x="42068" fg:w="10"/><text x="69.9960%" y="159.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,543 samples, 2.56%)</title><rect x="67.2541%" y="197" width="2.5582%" height="15" fill="rgb(231,56,7)" fg:x="40565" fg:w="1543"/><text x="67.5041%" y="207.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (30 samples, 0.05%)</title><rect x="69.7626%" y="181" width="0.0497%" height="15" fill="rgb(244,186,29)" fg:x="42078" fg:w="30"/><text x="70.0126%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (21 samples, 0.03%)</title><rect x="71.1785%" y="165" width="0.0348%" height="15" fill="rgb(234,111,31)" fg:x="42932" fg:w="21"/><text x="71.4285%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.04%)</title><rect x="71.7869%" y="149" width="0.0381%" height="15" fill="rgb(241,149,10)" fg:x="43299" fg:w="23"/><text x="72.0369%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.04%)</title><rect x="72.0771%" y="133" width="0.0365%" height="15" fill="rgb(249,206,44)" fg:x="43474" fg:w="22"/><text x="72.3271%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,454 samples, 2.41%)</title><rect x="69.8140%" y="197" width="2.4106%" height="15" fill="rgb(251,153,30)" fg:x="42109" fg:w="1454"/><text x="70.0640%" y="207.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,072 samples, 1.78%)</title><rect x="70.4473%" y="181" width="1.7773%" height="15" fill="rgb(239,152,38)" fg:x="42491" fg:w="1072"/><text x="70.6973%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (610 samples, 1.01%)</title><rect x="71.2133%" y="165" width="1.0113%" height="15" fill="rgb(249,139,47)" fg:x="42953" fg:w="610"/><text x="71.4633%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (241 samples, 0.40%)</title><rect x="71.8251%" y="149" width="0.3996%" height="15" fill="rgb(244,64,35)" fg:x="43322" fg:w="241"/><text x="72.0751%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (67 samples, 0.11%)</title><rect x="72.1135%" y="133" width="0.1111%" height="15" fill="rgb(216,46,15)" fg:x="43496" fg:w="67"/><text x="72.3635%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (8 samples, 0.01%)</title><rect x="72.2114%" y="117" width="0.0133%" height="15" fill="rgb(250,74,19)" fg:x="43555" fg:w="8"/><text x="72.4614%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (720 samples, 1.19%)</title><rect x="73.2144%" y="181" width="1.1937%" height="15" fill="rgb(249,42,33)" fg:x="44160" fg:w="720"/><text x="73.4644%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,193 samples, 1.98%)</title><rect x="74.4081%" y="181" width="1.9779%" height="15" fill="rgb(242,149,17)" fg:x="44880" fg:w="1193"/><text x="74.6581%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,071 samples, 5.09%)</title><rect x="72.2246%" y="197" width="5.0915%" height="15" fill="rgb(244,29,21)" fg:x="43563" fg:w="3071"/><text x="72.4746%" y="207.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (561 samples, 0.93%)</title><rect x="76.3860%" y="181" width="0.9301%" height="15" fill="rgb(220,130,37)" fg:x="46073" fg:w="561"/><text x="76.6360%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (55 samples, 0.09%)</title><rect x="77.3161%" y="197" width="0.0912%" height="15" fill="rgb(211,67,2)" fg:x="46634" fg:w="55"/><text x="77.5661%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (334 samples, 0.55%)</title><rect x="77.4073%" y="197" width="0.5538%" height="15" fill="rgb(235,68,52)" fg:x="46689" fg:w="334"/><text x="77.6573%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (13,774 samples, 22.84%)</title><rect x="55.1346%" y="213" width="22.8364%" height="15" fill="rgb(246,142,3)" fg:x="33255" fg:w="13774"/><text x="55.3846%" y="223.50">rust_qecp`rust_qecp::union_find_deco..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (232 samples, 0.38%)</title><rect x="80.9420%" y="197" width="0.3846%" height="15" fill="rgb(241,25,7)" fg:x="48821" fg:w="232"/><text x="81.1920%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (67 samples, 0.11%)</title><rect x="81.4411%" y="165" width="0.1111%" height="15" fill="rgb(242,119,39)" fg:x="49122" fg:w="67"/><text x="81.6911%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="81.5207%" y="149" width="0.0315%" height="15" fill="rgb(241,98,45)" fg:x="49170" fg:w="19"/><text x="81.7707%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (99 samples, 0.16%)</title><rect x="81.4112%" y="181" width="0.1641%" height="15" fill="rgb(254,28,30)" fg:x="49104" fg:w="99"/><text x="81.6612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="81.5522%" y="165" width="0.0232%" height="15" fill="rgb(241,142,54)" fg:x="49189" fg:w="14"/><text x="81.8022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (158 samples, 0.26%)</title><rect x="81.3267%" y="197" width="0.2620%" height="15" fill="rgb(222,85,15)" fg:x="49053" fg:w="158"/><text x="81.5767%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="81.5770%" y="181" width="0.0116%" height="15" fill="rgb(210,85,47)" fg:x="49204" fg:w="7"/><text x="81.8270%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="81.5886%" y="197" width="0.0133%" height="15" fill="rgb(224,206,25)" fg:x="49211" fg:w="8"/><text x="81.8386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (83 samples, 0.14%)</title><rect x="81.8307%" y="181" width="0.1376%" height="15" fill="rgb(243,201,19)" fg:x="49357" fg:w="83"/><text x="82.0807%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (248 samples, 0.41%)</title><rect x="81.6019%" y="197" width="0.4112%" height="15" fill="rgb(236,59,4)" fg:x="49219" fg:w="248"/><text x="81.8519%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="81.9782%" y="181" width="0.0348%" height="15" fill="rgb(254,179,45)" fg:x="49446" fg:w="21"/><text x="82.2282%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.03%)</title><rect x="81.9816%" y="165" width="0.0315%" height="15" fill="rgb(226,14,10)" fg:x="49448" fg:w="19"/><text x="82.2316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.04%)</title><rect x="82.0131%" y="197" width="0.0398%" height="15" fill="rgb(244,27,41)" fg:x="49467" fg:w="24"/><text x="82.2631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="82.0412%" y="181" width="0.0116%" height="15" fill="rgb(235,35,32)" fg:x="49484" fg:w="7"/><text x="82.2912%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="82.1076%" y="165" width="0.0182%" height="15" fill="rgb(218,68,31)" fg:x="49524" fg:w="11"/><text x="82.3576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.08%)</title><rect x="82.0529%" y="197" width="0.0796%" height="15" fill="rgb(207,120,37)" fg:x="49491" fg:w="48"/><text x="82.3029%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 0.07%)</title><rect x="82.0645%" y="181" width="0.0680%" height="15" fill="rgb(227,98,0)" fg:x="49498" fg:w="41"/><text x="82.3145%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="82.1324%" y="197" width="0.0265%" height="15" fill="rgb(207,7,3)" fg:x="49539" fg:w="16"/><text x="82.3824%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (60 samples, 0.10%)</title><rect x="82.1590%" y="197" width="0.0995%" height="15" fill="rgb(206,98,19)" fg:x="49555" fg:w="60"/><text x="82.4090%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.03%)</title><rect x="82.2618%" y="197" width="0.0332%" height="15" fill="rgb(217,5,26)" fg:x="49617" fg:w="20"/><text x="82.5118%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (31 samples, 0.05%)</title><rect x="82.3049%" y="197" width="0.0514%" height="15" fill="rgb(235,190,38)" fg:x="49643" fg:w="31"/><text x="82.5549%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (40 samples, 0.07%)</title><rect x="82.3563%" y="197" width="0.0663%" height="15" fill="rgb(247,86,24)" fg:x="49674" fg:w="40"/><text x="82.6063%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$mach_absolute_time (8 samples, 0.01%)</title><rect x="82.4226%" y="197" width="0.0133%" height="15" fill="rgb(205,101,16)" fg:x="49714" fg:w="8"/><text x="82.6726%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="82.4358%" y="197" width="0.0116%" height="15" fill="rgb(246,168,33)" fg:x="49722" fg:w="7"/><text x="82.6858%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (13 samples, 0.02%)</title><rect x="82.4474%" y="197" width="0.0216%" height="15" fill="rgb(231,114,1)" fg:x="49729" fg:w="13"/><text x="82.6974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="82.4955%" y="133" width="0.0216%" height="15" fill="rgb(207,184,53)" fg:x="49758" fg:w="13"/><text x="82.7455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 0.03%)</title><rect x="82.4872%" y="149" width="0.0332%" height="15" fill="rgb(224,95,51)" fg:x="49753" fg:w="20"/><text x="82.7372%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (30 samples, 0.05%)</title><rect x="82.4756%" y="197" width="0.0497%" height="15" fill="rgb(212,188,45)" fg:x="49746" fg:w="30"/><text x="82.7256%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (29 samples, 0.05%)</title><rect x="82.4773%" y="181" width="0.0481%" height="15" fill="rgb(223,154,38)" fg:x="49747" fg:w="29"/><text x="82.7273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="82.4773%" y="165" width="0.0481%" height="15" fill="rgb(251,22,52)" fg:x="49747" fg:w="29"/><text x="82.7273%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (60 samples, 0.10%)</title><rect x="82.6049%" y="181" width="0.0995%" height="15" fill="rgb(229,209,22)" fg:x="49824" fg:w="60"/><text x="82.8549%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (88 samples, 0.15%)</title><rect x="82.7044%" y="181" width="0.1459%" height="15" fill="rgb(234,138,34)" fg:x="49884" fg:w="88"/><text x="82.9544%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (223 samples, 0.37%)</title><rect x="82.5254%" y="197" width="0.3697%" height="15" fill="rgb(212,95,11)" fg:x="49776" fg:w="223"/><text x="82.7754%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.04%)</title><rect x="82.8503%" y="181" width="0.0448%" height="15" fill="rgb(240,179,47)" fg:x="49972" fg:w="27"/><text x="83.1003%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (79 samples, 0.13%)</title><rect x="82.8951%" y="197" width="0.1310%" height="15" fill="rgb(240,163,11)" fg:x="49999" fg:w="79"/><text x="83.1451%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (22 samples, 0.04%)</title><rect x="83.0310%" y="197" width="0.0365%" height="15" fill="rgb(236,37,12)" fg:x="50081" fg:w="22"/><text x="83.2810%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (98 samples, 0.16%)</title><rect x="83.2565%" y="149" width="0.1625%" height="15" fill="rgb(232,164,16)" fg:x="50217" fg:w="98"/><text x="83.5065%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (54 samples, 0.09%)</title><rect x="83.3295%" y="133" width="0.0895%" height="15" fill="rgb(244,205,15)" fg:x="50261" fg:w="54"/><text x="83.5795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (165 samples, 0.27%)</title><rect x="83.1554%" y="165" width="0.2736%" height="15" fill="rgb(223,117,47)" fg:x="50156" fg:w="165"/><text x="83.4054%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="83.4588%" y="133" width="0.0265%" height="15" fill="rgb(244,107,35)" fg:x="50339" fg:w="16"/><text x="83.7088%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.12%)</title><rect x="83.4306%" y="165" width="0.1161%" height="15" fill="rgb(205,140,8)" fg:x="50322" fg:w="70"/><text x="83.6806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.10%)</title><rect x="83.4422%" y="149" width="0.1044%" height="15" fill="rgb(228,84,46)" fg:x="50329" fg:w="63"/><text x="83.6922%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.06%)</title><rect x="83.4853%" y="133" width="0.0613%" height="15" fill="rgb(254,188,9)" fg:x="50355" fg:w="37"/><text x="83.7353%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (265 samples, 0.44%)</title><rect x="83.1090%" y="181" width="0.4394%" height="15" fill="rgb(206,112,54)" fg:x="50128" fg:w="265"/><text x="83.3590%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="83.5483%" y="181" width="0.0133%" height="15" fill="rgb(216,84,49)" fg:x="50393" fg:w="8"/><text x="83.7983%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (305 samples, 0.51%)</title><rect x="83.0675%" y="197" width="0.5057%" height="15" fill="rgb(214,194,35)" fg:x="50103" fg:w="305"/><text x="83.3175%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,388 samples, 5.62%)</title><rect x="77.9710%" y="213" width="5.6171%" height="15" fill="rgb(249,28,3)" fg:x="47029" fg:w="3388"/><text x="78.2210%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,288 samples, 83.37%)</title><rect x="0.2271%" y="245" width="83.3742%" height="15" fill="rgb(222,56,52)" fg:x="137" fg:w="50288"/><text x="0.4771%" y="255.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,821 samples, 82.60%)</title><rect x="1.0014%" y="229" width="82.6000%" height="15" fill="rgb(245,217,50)" fg:x="604" fg:w="49821"/><text x="1.2514%" y="239.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,253 samples, 2.08%)</title><rect x="83.6014%" y="245" width="2.0774%" height="15" fill="rgb(213,201,24)" fg:x="50425" fg:w="1253"/><text x="83.8514%" y="255.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (277 samples, 0.46%)</title><rect x="85.6788%" y="245" width="0.4592%" height="15" fill="rgb(248,116,28)" fg:x="51678" fg:w="277"/><text x="85.9288%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (125 samples, 0.21%)</title><rect x="85.9308%" y="229" width="0.2072%" height="15" fill="rgb(219,72,43)" fg:x="51830" fg:w="125"/><text x="86.1808%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,921 samples, 6.50%)</title><rect x="86.1380%" y="245" width="6.5008%" height="15" fill="rgb(209,138,14)" fg:x="51955" fg:w="3921"/><text x="86.3880%" y="255.50">rust_qecp..</text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="92.6487%" y="229" width="0.0133%" height="15" fill="rgb(222,18,33)" fg:x="55882" fg:w="8"/><text x="92.8987%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (196 samples, 0.32%)</title><rect x="92.6636%" y="229" width="0.3250%" height="15" fill="rgb(213,199,7)" fg:x="55891" fg:w="196"/><text x="92.9136%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (407 samples, 0.67%)</title><rect x="92.6388%" y="245" width="0.6748%" height="15" fill="rgb(250,110,10)" fg:x="55876" fg:w="407"/><text x="92.8888%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (196 samples, 0.32%)</title><rect x="92.9886%" y="229" width="0.3250%" height="15" fill="rgb(248,123,6)" fg:x="56087" fg:w="196"/><text x="93.2386%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (39 samples, 0.06%)</title><rect x="93.3135%" y="245" width="0.0647%" height="15" fill="rgb(206,91,31)" fg:x="56283" fg:w="39"/><text x="93.5635%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,987 samples, 6.61%)</title><rect x="93.3799%" y="245" width="6.6102%" height="15" fill="rgb(211,154,13)" fg:x="56323" fg:w="3987"/><text x="93.6299%" y="255.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,778 samples, 4.61%)</title><rect x="95.3843%" y="229" width="4.6057%" height="15" fill="rgb(225,148,7)" fg:x="57532" fg:w="2778"/><text x="95.6343%" y="239.50">rust_..</text></g><g><title>libsystem_pthread.dylib`thread_start (60,241 samples, 99.88%)</title><rect x="0.1227%" y="325" width="99.8757%" height="15" fill="rgb(220,160,43)" fg:x="74" fg:w="60241"/><text x="0.3727%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,241 samples, 99.88%)</title><rect x="0.1227%" y="309" width="99.8757%" height="15" fill="rgb(213,52,39)" fg:x="74" fg:w="60241"/><text x="0.3727%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,241 samples, 99.88%)</title><rect x="0.1227%" y="293" width="99.8757%" height="15" fill="rgb(243,137,7)" fg:x="74" fg:w="60241"/><text x="0.3727%" y="303.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,241 samples, 99.88%)</title><rect x="0.1227%" y="277" width="99.8757%" height="15" fill="rgb(230,79,13)" fg:x="74" fg:w="60241"/><text x="0.3727%" y="287.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,236 samples, 99.87%)</title><rect x="0.1310%" y="261" width="99.8674%" height="15" fill="rgb(247,105,23)" fg:x="79" fg:w="60236"/><text x="0.3810%" y="271.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (60,316 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="60316"/><text x="0.2500%" y="351.50"></text></g></svg></svg>