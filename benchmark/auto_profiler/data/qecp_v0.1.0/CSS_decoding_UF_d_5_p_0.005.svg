<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60328"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (12 samples, 0.02%)</title><rect x="0.0166%" y="53" width="0.0199%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="12"/><text x="0.2666%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 0.02%)</title><rect x="0.0166%" y="37" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="12"/><text x="0.2666%" y="47.50"></text></g><g><title>rust_qecp`alloc::fmt::format (8 samples, 0.01%)</title><rect x="0.0365%" y="53" width="0.0133%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="8"/><text x="0.2865%" y="63.50"></text></g><g><title>rust_qecp`core::fmt::write (8 samples, 0.01%)</title><rect x="0.0365%" y="37" width="0.0133%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="8"/><text x="0.2865%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (28 samples, 0.05%)</title><rect x="0.0116%" y="69" width="0.0464%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="28"/><text x="0.2616%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (14 samples, 0.02%)</title><rect x="0.0597%" y="69" width="0.0232%" height="15" fill="rgb(232,128,0)" fg:x="36" fg:w="14"/><text x="0.3097%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (9 samples, 0.01%)</title><rect x="0.0945%" y="53" width="0.0149%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="9"/><text x="0.3445%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0829%" y="69" width="0.0282%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="17"/><text x="0.3329%" y="79.50"></text></g><g><title>dyld`start (75 samples, 0.12%)</title><rect x="0.0000%" y="309" width="0.1243%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="75"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (74 samples, 0.12%)</title><rect x="0.0017%" y="293" width="0.1227%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="74"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (74 samples, 0.12%)</title><rect x="0.0017%" y="277" width="0.1227%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="74"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (74 samples, 0.12%)</title><rect x="0.0017%" y="261" width="0.1227%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="74"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (74 samples, 0.12%)</title><rect x="0.0017%" y="245" width="0.1227%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="74"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (74 samples, 0.12%)</title><rect x="0.0017%" y="229" width="0.1227%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="74"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (74 samples, 0.12%)</title><rect x="0.0017%" y="213" width="0.1227%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="74"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (74 samples, 0.12%)</title><rect x="0.0017%" y="197" width="0.1227%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="74"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (74 samples, 0.12%)</title><rect x="0.0017%" y="181" width="0.1227%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="74"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (74 samples, 0.12%)</title><rect x="0.0017%" y="165" width="0.1227%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="74"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="149" width="0.1227%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="74"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (74 samples, 0.12%)</title><rect x="0.0017%" y="133" width="0.1227%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="74"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="117" width="0.1227%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="74"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (74 samples, 0.12%)</title><rect x="0.0017%" y="101" width="0.1227%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="74"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (74 samples, 0.12%)</title><rect x="0.0017%" y="85" width="0.1227%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="74"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (11 samples, 0.02%)</title><rect x="0.1392%" y="229" width="0.0182%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="11"/><text x="0.3892%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="0.1658%" y="229" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="100" fg:w="8"/><text x="0.4158%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="0.1790%" y="229" width="0.0116%" height="15" fill="rgb(249,31,29)" fg:x="108" fg:w="7"/><text x="0.4290%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="0.1790%" y="213" width="0.0116%" height="15" fill="rgb(225,111,53)" fg:x="108" fg:w="7"/><text x="0.4290%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="0.2006%" y="229" width="0.0282%" height="15" fill="rgb(238,160,17)" fg:x="121" fg:w="17"/><text x="0.4506%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (61 samples, 0.10%)</title><rect x="0.2984%" y="213" width="0.1011%" height="15" fill="rgb(214,148,48)" fg:x="180" fg:w="61"/><text x="0.5484%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.04%)</title><rect x="0.3995%" y="213" width="0.0398%" height="15" fill="rgb(232,36,49)" fg:x="241" fg:w="24"/><text x="0.6495%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="0.4393%" y="213" width="0.0249%" height="15" fill="rgb(209,103,24)" fg:x="265" fg:w="15"/><text x="0.6893%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="0.4509%" y="197" width="0.0133%" height="15" fill="rgb(229,88,8)" fg:x="272" fg:w="8"/><text x="0.7009%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="0.4525%" y="181" width="0.0116%" height="15" fill="rgb(213,181,19)" fg:x="273" fg:w="7"/><text x="0.7025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="0.4940%" y="197" width="0.0166%" height="15" fill="rgb(254,191,54)" fg:x="298" fg:w="10"/><text x="0.7440%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.04%)</title><rect x="0.4674%" y="213" width="0.0448%" height="15" fill="rgb(241,83,37)" fg:x="282" fg:w="27"/><text x="0.7174%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="0.5238%" y="213" width="0.0166%" height="15" fill="rgb(233,36,39)" fg:x="316" fg:w="10"/><text x="0.7738%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.08%)</title><rect x="0.5536%" y="213" width="0.0762%" height="15" fill="rgb(226,3,54)" fg:x="334" fg:w="46"/><text x="0.8036%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="0.6680%" y="181" width="0.0133%" height="15" fill="rgb(245,192,40)" fg:x="403" fg:w="8"/><text x="0.9180%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="0.6680%" y="165" width="0.0133%" height="15" fill="rgb(238,167,29)" fg:x="403" fg:w="8"/><text x="0.9180%" y="175.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (32 samples, 0.05%)</title><rect x="0.6299%" y="213" width="0.0530%" height="15" fill="rgb(232,182,51)" fg:x="380" fg:w="32"/><text x="0.8799%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (13 samples, 0.02%)</title><rect x="0.6614%" y="197" width="0.0215%" height="15" fill="rgb(231,60,39)" fg:x="399" fg:w="13"/><text x="0.9114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="0.7061%" y="149" width="0.0166%" height="15" fill="rgb(208,69,12)" fg:x="426" fg:w="10"/><text x="0.9561%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="0.7061%" y="165" width="0.0182%" height="15" fill="rgb(235,93,37)" fg:x="426" fg:w="11"/><text x="0.9561%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.04%)</title><rect x="0.6896%" y="213" width="0.0381%" height="15" fill="rgb(213,116,39)" fg:x="416" fg:w="23"/><text x="0.9396%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="0.6979%" y="197" width="0.0298%" height="15" fill="rgb(222,207,29)" fg:x="421" fg:w="18"/><text x="0.9479%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="0.7061%" y="181" width="0.0215%" height="15" fill="rgb(206,96,30)" fg:x="426" fg:w="13"/><text x="0.9561%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="0.7277%" y="213" width="0.0182%" height="15" fill="rgb(218,138,4)" fg:x="439" fg:w="11"/><text x="0.9777%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.02%)</title><rect x="0.7492%" y="213" width="0.0215%" height="15" fill="rgb(250,191,14)" fg:x="452" fg:w="13"/><text x="0.9992%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="0.7708%" y="213" width="0.0348%" height="15" fill="rgb(239,60,40)" fg:x="465" fg:w="21"/><text x="1.0208%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (18 samples, 0.03%)</title><rect x="0.8056%" y="213" width="0.0298%" height="15" fill="rgb(206,27,48)" fg:x="486" fg:w="18"/><text x="1.0556%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (33 samples, 0.05%)</title><rect x="1.3079%" y="165" width="0.0547%" height="15" fill="rgb(225,35,8)" fg:x="789" fg:w="33"/><text x="1.5579%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.05%)</title><rect x="1.3161%" y="149" width="0.0464%" height="15" fill="rgb(250,213,24)" fg:x="794" fg:w="28"/><text x="1.5661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.07%)</title><rect x="1.2913%" y="197" width="0.0729%" height="15" fill="rgb(247,123,22)" fg:x="779" fg:w="44"/><text x="1.5413%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.06%)</title><rect x="1.3045%" y="181" width="0.0597%" height="15" fill="rgb(231,138,38)" fg:x="787" fg:w="36"/><text x="1.5545%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="1.3990%" y="117" width="0.0166%" height="15" fill="rgb(231,145,46)" fg:x="844" fg:w="10"/><text x="1.6490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 0.03%)</title><rect x="1.3907%" y="149" width="0.0332%" height="15" fill="rgb(251,118,11)" fg:x="839" fg:w="20"/><text x="1.6407%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="1.3974%" y="133" width="0.0265%" height="15" fill="rgb(217,147,25)" fg:x="843" fg:w="16"/><text x="1.6474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.04%)</title><rect x="1.3891%" y="165" width="0.0448%" height="15" fill="rgb(247,81,37)" fg:x="838" fg:w="27"/><text x="1.6391%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.07%)</title><rect x="1.3758%" y="197" width="0.0680%" height="15" fill="rgb(209,12,38)" fg:x="830" fg:w="41"/><text x="1.6258%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (38 samples, 0.06%)</title><rect x="1.3808%" y="181" width="0.0630%" height="15" fill="rgb(227,1,9)" fg:x="833" fg:w="38"/><text x="1.6308%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (368 samples, 0.61%)</title><rect x="0.8354%" y="213" width="0.6100%" height="15" fill="rgb(248,47,43)" fg:x="504" fg:w="368"/><text x="1.0854%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.06%)</title><rect x="12.0989%" y="197" width="0.0564%" height="15" fill="rgb(221,10,30)" fg:x="7299" fg:w="34"/><text x="12.3489%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (485 samples, 0.80%)</title><rect x="12.1552%" y="197" width="0.8039%" height="15" fill="rgb(210,229,1)" fg:x="7333" fg:w="485"/><text x="12.4052%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="12.9608%" y="197" width="0.0315%" height="15" fill="rgb(222,148,37)" fg:x="7819" fg:w="19"/><text x="13.2108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (104 samples, 0.17%)</title><rect x="12.9923%" y="197" width="0.1724%" height="15" fill="rgb(234,67,33)" fg:x="7838" fg:w="104"/><text x="13.2423%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (136 samples, 0.23%)</title><rect x="13.1647%" y="197" width="0.2254%" height="15" fill="rgb(247,98,35)" fg:x="7942" fg:w="136"/><text x="13.4147%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="13.4249%" y="181" width="0.0133%" height="15" fill="rgb(247,138,52)" fg:x="8099" fg:w="8"/><text x="13.6749%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (44 samples, 0.07%)</title><rect x="13.3901%" y="197" width="0.0729%" height="15" fill="rgb(213,79,30)" fg:x="8078" fg:w="44"/><text x="13.6401%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="13.4515%" y="181" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="8115" fg:w="7"/><text x="13.7015%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.04%)</title><rect x="13.4631%" y="197" width="0.0414%" height="15" fill="rgb(230,62,27)" fg:x="8122" fg:w="25"/><text x="13.7131%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="13.4879%" y="181" width="0.0166%" height="15" fill="rgb(216,154,8)" fg:x="8137" fg:w="10"/><text x="13.7379%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (102 samples, 0.17%)</title><rect x="13.5045%" y="197" width="0.1691%" height="15" fill="rgb(244,35,45)" fg:x="8147" fg:w="102"/><text x="13.7545%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (57 samples, 0.09%)</title><rect x="13.6736%" y="197" width="0.0945%" height="15" fill="rgb(251,115,12)" fg:x="8249" fg:w="57"/><text x="13.9236%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="13.7697%" y="197" width="0.0116%" height="15" fill="rgb(240,54,50)" fg:x="8307" fg:w="7"/><text x="14.0197%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (21 samples, 0.03%)</title><rect x="13.7830%" y="197" width="0.0348%" height="15" fill="rgb(233,84,52)" fg:x="8315" fg:w="21"/><text x="14.0330%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="13.8211%" y="197" width="0.0149%" height="15" fill="rgb(207,117,47)" fg:x="8338" fg:w="9"/><text x="14.0711%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (43 samples, 0.07%)</title><rect x="13.8360%" y="197" width="0.0713%" height="15" fill="rgb(249,43,39)" fg:x="8347" fg:w="43"/><text x="14.0860%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (58 samples, 0.10%)</title><rect x="13.9073%" y="197" width="0.0961%" height="15" fill="rgb(209,38,44)" fg:x="8390" fg:w="58"/><text x="14.1573%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (78 samples, 0.13%)</title><rect x="14.0051%" y="197" width="0.1293%" height="15" fill="rgb(236,212,23)" fg:x="8449" fg:w="78"/><text x="14.2551%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (19 samples, 0.03%)</title><rect x="14.1394%" y="197" width="0.0315%" height="15" fill="rgb(242,79,21)" fg:x="8530" fg:w="19"/><text x="14.3894%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (40 samples, 0.07%)</title><rect x="14.1725%" y="197" width="0.0663%" height="15" fill="rgb(211,96,35)" fg:x="8550" fg:w="40"/><text x="14.4225%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="14.2388%" y="197" width="0.0116%" height="15" fill="rgb(253,215,40)" fg:x="8590" fg:w="7"/><text x="14.4888%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="14.2587%" y="165" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="8602" fg:w="7"/><text x="14.5087%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.03%)</title><rect x="14.2504%" y="197" width="0.0298%" height="15" fill="rgb(208,190,38)" fg:x="8597" fg:w="18"/><text x="14.5004%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="14.2571%" y="181" width="0.0232%" height="15" fill="rgb(235,213,38)" fg:x="8601" fg:w="14"/><text x="14.5071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="14.4593%" y="133" width="0.0166%" height="15" fill="rgb(237,122,38)" fg:x="8723" fg:w="10"/><text x="14.7093%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="14.4527%" y="149" width="0.0249%" height="15" fill="rgb(244,218,35)" fg:x="8719" fg:w="15"/><text x="14.7027%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.06%)</title><rect x="14.4261%" y="165" width="0.0613%" height="15" fill="rgb(240,68,47)" fg:x="8703" fg:w="37"/><text x="14.6761%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (7 samples, 0.01%)</title><rect x="14.5339%" y="149" width="0.0116%" height="15" fill="rgb(210,16,53)" fg:x="8768" fg:w="7"/><text x="14.7839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="14.5786%" y="133" width="0.0182%" height="15" fill="rgb(235,124,12)" fg:x="8795" fg:w="11"/><text x="14.8286%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="14.6184%" y="117" width="0.0298%" height="15" fill="rgb(224,169,11)" fg:x="8819" fg:w="18"/><text x="14.8684%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="14.6483%" y="117" width="0.0381%" height="15" fill="rgb(250,166,2)" fg:x="8837" fg:w="23"/><text x="14.8983%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="14.6549%" y="101" width="0.0315%" height="15" fill="rgb(242,216,29)" fg:x="8841" fg:w="19"/><text x="14.9049%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="14.6681%" y="85" width="0.0182%" height="15" fill="rgb(230,116,27)" fg:x="8849" fg:w="11"/><text x="14.9181%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="14.6864%" y="117" width="0.0332%" height="15" fill="rgb(228,99,48)" fg:x="8860" fg:w="20"/><text x="14.9364%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="14.7195%" y="117" width="0.0265%" height="15" fill="rgb(253,11,6)" fg:x="8880" fg:w="16"/><text x="14.9695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="14.7195%" y="101" width="0.0265%" height="15" fill="rgb(247,143,39)" fg:x="8880" fg:w="16"/><text x="14.9695%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="14.7328%" y="85" width="0.0133%" height="15" fill="rgb(236,97,10)" fg:x="8888" fg:w="8"/><text x="14.9828%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (92 samples, 0.15%)</title><rect x="14.5969%" y="133" width="0.1525%" height="15" fill="rgb(233,208,19)" fg:x="8806" fg:w="92"/><text x="14.8469%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="14.8107%" y="101" width="0.0116%" height="15" fill="rgb(216,164,2)" fg:x="8935" fg:w="7"/><text x="15.0607%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (41 samples, 0.07%)</title><rect x="14.7792%" y="117" width="0.0680%" height="15" fill="rgb(220,129,5)" fg:x="8916" fg:w="41"/><text x="15.0292%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="14.8306%" y="101" width="0.0166%" height="15" fill="rgb(242,17,10)" fg:x="8947" fg:w="10"/><text x="15.0806%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="14.8472%" y="117" width="0.0282%" height="15" fill="rgb(242,107,0)" fg:x="8957" fg:w="17"/><text x="15.0972%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="14.8505%" y="101" width="0.0249%" height="15" fill="rgb(251,28,31)" fg:x="8959" fg:w="15"/><text x="15.1005%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (16 samples, 0.03%)</title><rect x="14.8853%" y="117" width="0.0265%" height="15" fill="rgb(233,223,10)" fg:x="8980" fg:w="16"/><text x="15.1353%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="14.9516%" y="69" width="0.0199%" height="15" fill="rgb(215,21,27)" fg:x="9020" fg:w="12"/><text x="15.2016%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (35 samples, 0.06%)</title><rect x="14.9267%" y="101" width="0.0580%" height="15" fill="rgb(232,23,21)" fg:x="9005" fg:w="35"/><text x="15.1767%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (26 samples, 0.04%)</title><rect x="14.9417%" y="85" width="0.0431%" height="15" fill="rgb(244,5,23)" fg:x="9014" fg:w="26"/><text x="15.1917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="14.9731%" y="69" width="0.0116%" height="15" fill="rgb(226,81,46)" fg:x="9033" fg:w="7"/><text x="15.2231%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (40 samples, 0.07%)</title><rect x="14.9218%" y="117" width="0.0663%" height="15" fill="rgb(247,70,30)" fg:x="9002" fg:w="40"/><text x="15.1718%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="14.9881%" y="117" width="0.0116%" height="15" fill="rgb(212,68,19)" fg:x="9042" fg:w="7"/><text x="15.2381%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (147 samples, 0.24%)</title><rect x="14.7610%" y="133" width="0.2437%" height="15" fill="rgb(240,187,13)" fg:x="8905" fg:w="147"/><text x="15.0110%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (351 samples, 0.58%)</title><rect x="14.5455%" y="149" width="0.5818%" height="15" fill="rgb(223,113,26)" fg:x="8775" fg:w="351"/><text x="14.7955%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.12%)</title><rect x="15.0080%" y="133" width="0.1193%" height="15" fill="rgb(206,192,2)" fg:x="9054" fg:w="72"/><text x="15.2580%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="15.1273%" y="149" width="0.0265%" height="15" fill="rgb(241,108,4)" fg:x="9126" fg:w="16"/><text x="15.3773%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (425 samples, 0.70%)</title><rect x="14.4958%" y="165" width="0.7045%" height="15" fill="rgb(247,173,49)" fg:x="8745" fg:w="425"/><text x="14.7458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="15.1754%" y="149" width="0.0249%" height="15" fill="rgb(224,114,35)" fg:x="9155" fg:w="15"/><text x="15.4254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.02%)</title><rect x="15.1787%" y="133" width="0.0215%" height="15" fill="rgb(245,159,27)" fg:x="9157" fg:w="13"/><text x="15.4287%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (559 samples, 0.93%)</title><rect x="14.2803%" y="197" width="0.9266%" height="15" fill="rgb(245,172,44)" fg:x="8615" fg:w="559"/><text x="14.5303%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (480 samples, 0.80%)</title><rect x="14.4112%" y="181" width="0.7957%" height="15" fill="rgb(236,23,11)" fg:x="8694" fg:w="480"/><text x="14.6612%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="15.2069%" y="197" width="0.0149%" height="15" fill="rgb(205,117,38)" fg:x="9174" fg:w="9"/><text x="15.4569%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (22 samples, 0.04%)</title><rect x="15.3743%" y="181" width="0.0365%" height="15" fill="rgb(237,72,25)" fg:x="9275" fg:w="22"/><text x="15.6243%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (215 samples, 0.36%)</title><rect x="16.0224%" y="165" width="0.3564%" height="15" fill="rgb(244,70,9)" fg:x="9666" fg:w="215"/><text x="16.2724%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (29 samples, 0.05%)</title><rect x="16.3788%" y="165" width="0.0481%" height="15" fill="rgb(217,125,39)" fg:x="9881" fg:w="29"/><text x="16.6288%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (49 samples, 0.08%)</title><rect x="16.4269%" y="165" width="0.0812%" height="15" fill="rgb(235,36,10)" fg:x="9910" fg:w="49"/><text x="16.6769%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (134 samples, 0.22%)</title><rect x="16.5081%" y="165" width="0.2221%" height="15" fill="rgb(251,123,47)" fg:x="9959" fg:w="134"/><text x="16.7581%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (96 samples, 0.16%)</title><rect x="16.5711%" y="149" width="0.1591%" height="15" fill="rgb(221,13,13)" fg:x="9997" fg:w="96"/><text x="16.8211%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (797 samples, 1.32%)</title><rect x="15.4108%" y="181" width="1.3211%" height="15" fill="rgb(238,131,9)" fg:x="9297" fg:w="797"/><text x="15.6608%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (154 samples, 0.26%)</title><rect x="17.0816%" y="165" width="0.2553%" height="15" fill="rgb(211,50,8)" fg:x="10305" fg:w="154"/><text x="17.3316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (37 samples, 0.06%)</title><rect x="17.3369%" y="165" width="0.0613%" height="15" fill="rgb(245,182,24)" fg:x="10459" fg:w="37"/><text x="17.5869%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (32 samples, 0.05%)</title><rect x="17.3982%" y="165" width="0.0530%" height="15" fill="rgb(242,14,37)" fg:x="10496" fg:w="32"/><text x="17.6482%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (753 samples, 1.25%)</title><rect x="16.7319%" y="181" width="1.2482%" height="15" fill="rgb(246,228,12)" fg:x="10094" fg:w="753"/><text x="16.9819%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (319 samples, 0.53%)</title><rect x="17.4513%" y="165" width="0.5288%" height="15" fill="rgb(213,55,15)" fg:x="10528" fg:w="319"/><text x="17.7013%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (94 samples, 0.16%)</title><rect x="18.2602%" y="149" width="0.1558%" height="15" fill="rgb(209,9,3)" fg:x="11016" fg:w="94"/><text x="18.5102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (368 samples, 0.61%)</title><rect x="17.9800%" y="181" width="0.6100%" height="15" fill="rgb(230,59,30)" fg:x="10847" fg:w="368"/><text x="18.2300%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (310 samples, 0.51%)</title><rect x="18.0762%" y="165" width="0.5139%" height="15" fill="rgb(209,121,21)" fg:x="10905" fg:w="310"/><text x="18.3262%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (105 samples, 0.17%)</title><rect x="18.4160%" y="149" width="0.1740%" height="15" fill="rgb(220,109,13)" fg:x="11110" fg:w="105"/><text x="18.6660%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (51 samples, 0.08%)</title><rect x="18.5900%" y="181" width="0.0845%" height="15" fill="rgb(232,18,1)" fg:x="11215" fg:w="51"/><text x="18.8400%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (274 samples, 0.45%)</title><rect x="18.6746%" y="181" width="0.4542%" height="15" fill="rgb(215,41,42)" fg:x="11266" fg:w="274"/><text x="18.9246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (110 samples, 0.18%)</title><rect x="18.9464%" y="165" width="0.1823%" height="15" fill="rgb(224,123,36)" fg:x="11430" fg:w="110"/><text x="19.1964%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (110 samples, 0.18%)</title><rect x="18.9464%" y="149" width="0.1823%" height="15" fill="rgb(240,125,3)" fg:x="11430" fg:w="110"/><text x="19.1964%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (49 samples, 0.08%)</title><rect x="19.1288%" y="181" width="0.0812%" height="15" fill="rgb(205,98,50)" fg:x="11540" fg:w="49"/><text x="19.3788%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (14 samples, 0.02%)</title><rect x="19.2150%" y="181" width="0.0232%" height="15" fill="rgb(205,185,37)" fg:x="11592" fg:w="14"/><text x="19.4650%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (52 samples, 0.09%)</title><rect x="19.2382%" y="181" width="0.0862%" height="15" fill="rgb(238,207,15)" fg:x="11606" fg:w="52"/><text x="19.4882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="19.3244%" y="181" width="0.0365%" height="15" fill="rgb(213,199,42)" fg:x="11658" fg:w="22"/><text x="19.5744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.04%)</title><rect x="19.3608%" y="181" width="0.0398%" height="15" fill="rgb(235,201,11)" fg:x="11680" fg:w="24"/><text x="19.6108%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (14 samples, 0.02%)</title><rect x="19.4006%" y="181" width="0.0232%" height="15" fill="rgb(207,46,11)" fg:x="11704" fg:w="14"/><text x="19.6506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (161 samples, 0.27%)</title><rect x="19.4636%" y="165" width="0.2669%" height="15" fill="rgb(241,35,35)" fg:x="11742" fg:w="161"/><text x="19.7136%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (61 samples, 0.10%)</title><rect x="19.6294%" y="149" width="0.1011%" height="15" fill="rgb(243,32,47)" fg:x="11842" fg:w="61"/><text x="19.8794%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="19.7305%" y="165" width="0.0265%" height="15" fill="rgb(247,202,23)" fg:x="11903" fg:w="16"/><text x="19.9805%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (60 samples, 0.10%)</title><rect x="19.7570%" y="165" width="0.0995%" height="15" fill="rgb(219,102,11)" fg:x="11919" fg:w="60"/><text x="20.0070%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,808 samples, 4.65%)</title><rect x="15.2218%" y="197" width="4.6546%" height="15" fill="rgb(243,110,44)" fg:x="9183" fg:w="2808"/><text x="15.4718%" y="207.50">rust_..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (273 samples, 0.45%)</title><rect x="19.4238%" y="181" width="0.4525%" height="15" fill="rgb(222,74,54)" fg:x="11718" fg:w="273"/><text x="19.6738%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="19.8565%" y="165" width="0.0199%" height="15" fill="rgb(216,99,12)" fg:x="11979" fg:w="12"/><text x="20.1065%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (161 samples, 0.27%)</title><rect x="19.8763%" y="197" width="0.2669%" height="15" fill="rgb(226,22,26)" fg:x="11991" fg:w="161"/><text x="20.1263%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (100 samples, 0.17%)</title><rect x="19.9775%" y="181" width="0.1658%" height="15" fill="rgb(217,163,10)" fg:x="12052" fg:w="100"/><text x="20.2275%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (29 samples, 0.05%)</title><rect x="20.0951%" y="165" width="0.0481%" height="15" fill="rgb(213,25,53)" fg:x="12123" fg:w="29"/><text x="20.3451%" y="175.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (52 samples, 0.09%)</title><rect x="20.7665%" y="181" width="0.0862%" height="15" fill="rgb(252,105,26)" fg:x="12528" fg:w="52"/><text x="21.0165%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (116 samples, 0.19%)</title><rect x="20.8610%" y="181" width="0.1923%" height="15" fill="rgb(220,39,43)" fg:x="12585" fg:w="116"/><text x="21.1110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="21.1311%" y="165" width="0.0315%" height="15" fill="rgb(229,68,48)" fg:x="12748" fg:w="19"/><text x="21.3811%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="21.1626%" y="165" width="0.0149%" height="15" fill="rgb(252,8,32)" fg:x="12767" fg:w="9"/><text x="21.4126%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="21.1660%" y="149" width="0.0116%" height="15" fill="rgb(223,20,43)" fg:x="12769" fg:w="7"/><text x="21.4160%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="21.4478%" y="133" width="0.0116%" height="15" fill="rgb(229,81,49)" fg:x="12939" fg:w="7"/><text x="21.6978%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="21.4411%" y="149" width="0.0464%" height="15" fill="rgb(236,28,36)" fg:x="12935" fg:w="28"/><text x="21.6911%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="21.4610%" y="133" width="0.0265%" height="15" fill="rgb(249,185,26)" fg:x="12947" fg:w="16"/><text x="21.7110%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="21.4726%" y="117" width="0.0149%" height="15" fill="rgb(249,174,33)" fg:x="12954" fg:w="9"/><text x="21.7226%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (96 samples, 0.16%)</title><rect x="21.4892%" y="149" width="0.1591%" height="15" fill="rgb(233,201,37)" fg:x="12964" fg:w="96"/><text x="21.7392%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,198 samples, 1.99%)</title><rect x="20.1432%" y="197" width="1.9858%" height="15" fill="rgb(221,78,26)" fg:x="12152" fg:w="1198"/><text x="20.3932%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (649 samples, 1.08%)</title><rect x="21.0532%" y="181" width="1.0758%" height="15" fill="rgb(250,127,30)" fg:x="12701" fg:w="649"/><text x="21.3032%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (559 samples, 0.93%)</title><rect x="21.2024%" y="165" width="0.9266%" height="15" fill="rgb(230,49,44)" fg:x="12791" fg:w="559"/><text x="21.4524%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (289 samples, 0.48%)</title><rect x="21.6500%" y="149" width="0.4790%" height="15" fill="rgb(229,67,23)" fg:x="13061" fg:w="289"/><text x="21.9000%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,603 samples, 2.66%)</title><rect x="22.1290%" y="197" width="2.6571%" height="15" fill="rgb(249,83,47)" fg:x="13350" fg:w="1603"/><text x="22.3790%" y="207.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (79 samples, 0.13%)</title><rect x="24.7862%" y="197" width="0.1310%" height="15" fill="rgb(215,43,3)" fg:x="14953" fg:w="79"/><text x="25.0362%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.04%)</title><rect x="25.0564%" y="181" width="0.0381%" height="15" fill="rgb(238,154,13)" fg:x="15116" fg:w="23"/><text x="25.3064%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="25.0680%" y="165" width="0.0265%" height="15" fill="rgb(219,56,2)" fg:x="15123" fg:w="16"/><text x="25.3180%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (14 samples, 0.02%)</title><rect x="25.0713%" y="149" width="0.0232%" height="15" fill="rgb(233,0,4)" fg:x="15125" fg:w="14"/><text x="25.3213%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.05%)</title><rect x="25.0945%" y="181" width="0.0464%" height="15" fill="rgb(235,30,7)" fg:x="15139" fg:w="28"/><text x="25.3445%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="25.1409%" y="181" width="0.0265%" height="15" fill="rgb(250,79,13)" fg:x="15167" fg:w="16"/><text x="25.3909%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="25.1492%" y="165" width="0.0182%" height="15" fill="rgb(211,146,34)" fg:x="15172" fg:w="11"/><text x="25.3992%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="25.1757%" y="181" width="0.0215%" height="15" fill="rgb(228,22,38)" fg:x="15188" fg:w="13"/><text x="25.4257%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (204 samples, 0.34%)</title><rect x="25.2055%" y="181" width="0.3382%" height="15" fill="rgb(235,168,5)" fg:x="15206" fg:w="204"/><text x="25.4555%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="25.8968%" y="101" width="0.0166%" height="15" fill="rgb(221,155,16)" fg:x="15623" fg:w="10"/><text x="26.1468%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (36 samples, 0.06%)</title><rect x="25.8686%" y="133" width="0.0597%" height="15" fill="rgb(215,215,53)" fg:x="15606" fg:w="36"/><text x="26.1186%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (29 samples, 0.05%)</title><rect x="25.8802%" y="117" width="0.0481%" height="15" fill="rgb(223,4,10)" fg:x="15613" fg:w="29"/><text x="26.1302%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 0.10%)</title><rect x="25.8454%" y="165" width="0.0961%" height="15" fill="rgb(234,103,6)" fg:x="15592" fg:w="58"/><text x="26.0954%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="25.8586%" y="149" width="0.0829%" height="15" fill="rgb(227,97,0)" fg:x="15600" fg:w="50"/><text x="26.1086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="25.9283%" y="133" width="0.0133%" height="15" fill="rgb(234,150,53)" fg:x="15642" fg:w="8"/><text x="26.1783%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (389 samples, 0.64%)</title><rect x="25.9448%" y="165" width="0.6448%" height="15" fill="rgb(228,201,54)" fg:x="15652" fg:w="389"/><text x="26.1948%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,341 samples, 2.22%)</title><rect x="24.9171%" y="197" width="2.2228%" height="15" fill="rgb(222,22,37)" fg:x="15032" fg:w="1341"/><text x="25.1671%" y="207.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (963 samples, 1.60%)</title><rect x="25.5437%" y="181" width="1.5963%" height="15" fill="rgb(237,53,32)" fg:x="15410" fg:w="963"/><text x="25.7937%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (332 samples, 0.55%)</title><rect x="26.5896%" y="165" width="0.5503%" height="15" fill="rgb(233,25,53)" fg:x="16041" fg:w="332"/><text x="26.8396%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (20 samples, 0.03%)</title><rect x="27.1400%" y="197" width="0.0332%" height="15" fill="rgb(210,40,34)" fg:x="16373" fg:w="20"/><text x="27.3900%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (27 samples, 0.04%)</title><rect x="27.1748%" y="197" width="0.0448%" height="15" fill="rgb(241,220,44)" fg:x="16394" fg:w="27"/><text x="27.4248%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (214 samples, 0.35%)</title><rect x="27.2195%" y="197" width="0.3547%" height="15" fill="rgb(235,28,35)" fg:x="16421" fg:w="214"/><text x="27.4695%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,599 samples, 7.62%)</title><rect x="31.8990%" y="181" width="7.6233%" height="15" fill="rgb(210,56,17)" fg:x="19244" fg:w="4599"/><text x="32.1490%" y="191.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="39.5637%" y="101" width="0.0133%" height="15" fill="rgb(224,130,29)" fg:x="23868" fg:w="8"/><text x="39.8137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="39.5902%" y="101" width="0.0166%" height="15" fill="rgb(235,212,8)" fg:x="23884" fg:w="10"/><text x="39.8402%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="39.5919%" y="85" width="0.0149%" height="15" fill="rgb(223,33,50)" fg:x="23885" fg:w="9"/><text x="39.8419%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="39.5936%" y="69" width="0.0133%" height="15" fill="rgb(219,149,13)" fg:x="23886" fg:w="8"/><text x="39.8436%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (31 samples, 0.05%)</title><rect x="39.5587%" y="117" width="0.0514%" height="15" fill="rgb(250,156,29)" fg:x="23865" fg:w="31"/><text x="39.8087%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (58 samples, 0.10%)</title><rect x="39.5438%" y="133" width="0.0961%" height="15" fill="rgb(216,193,19)" fg:x="23856" fg:w="58"/><text x="39.7938%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="39.6118%" y="117" width="0.0282%" height="15" fill="rgb(216,135,14)" fg:x="23897" fg:w="17"/><text x="39.8618%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (75 samples, 0.12%)</title><rect x="39.5239%" y="181" width="0.1243%" height="15" fill="rgb(241,47,5)" fg:x="23844" fg:w="75"/><text x="39.7739%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (71 samples, 0.12%)</title><rect x="39.5306%" y="165" width="0.1177%" height="15" fill="rgb(233,42,35)" fg:x="23848" fg:w="71"/><text x="39.7806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (70 samples, 0.12%)</title><rect x="39.5322%" y="149" width="0.1160%" height="15" fill="rgb(231,13,6)" fg:x="23849" fg:w="70"/><text x="39.7822%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,470 samples, 4.09%)</title><rect x="39.6516%" y="181" width="4.0943%" height="15" fill="rgb(207,181,40)" fg:x="23921" fg:w="2470"/><text x="39.9016%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (114 samples, 0.19%)</title><rect x="43.7459%" y="181" width="0.1890%" height="15" fill="rgb(254,173,49)" fg:x="26391" fg:w="114"/><text x="43.9959%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="44.0426%" y="165" width="0.0249%" height="15" fill="rgb(221,1,38)" fg:x="26570" fg:w="15"/><text x="44.2926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="44.0509%" y="149" width="0.0166%" height="15" fill="rgb(206,124,46)" fg:x="26575" fg:w="10"/><text x="44.3009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="44.0525%" y="133" width="0.0149%" height="15" fill="rgb(249,21,11)" fg:x="26576" fg:w="9"/><text x="44.3025%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="44.0674%" y="165" width="0.0199%" height="15" fill="rgb(222,201,40)" fg:x="26585" fg:w="12"/><text x="44.3174%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (126 samples, 0.21%)</title><rect x="44.1172%" y="165" width="0.2089%" height="15" fill="rgb(235,61,29)" fg:x="26615" fg:w="126"/><text x="44.3672%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.04%)</title><rect x="44.6493%" y="117" width="0.0365%" height="15" fill="rgb(219,207,3)" fg:x="26936" fg:w="22"/><text x="44.8993%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.03%)</title><rect x="44.6575%" y="101" width="0.0282%" height="15" fill="rgb(222,56,46)" fg:x="26941" fg:w="17"/><text x="44.9075%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="44.6443%" y="149" width="0.0448%" height="15" fill="rgb(239,76,54)" fg:x="26933" fg:w="27"/><text x="44.8943%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.04%)</title><rect x="44.6476%" y="133" width="0.0414%" height="15" fill="rgb(231,124,27)" fg:x="26935" fg:w="25"/><text x="44.8976%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (347 samples, 0.58%)</title><rect x="44.6907%" y="149" width="0.5752%" height="15" fill="rgb(249,195,6)" fg:x="26961" fg:w="347"/><text x="44.9407%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,146 samples, 1.90%)</title><rect x="43.9348%" y="181" width="1.8996%" height="15" fill="rgb(237,174,47)" fg:x="26505" fg:w="1146"/><text x="44.1848%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (910 samples, 1.51%)</title><rect x="44.3260%" y="165" width="1.5084%" height="15" fill="rgb(206,201,31)" fg:x="26741" fg:w="910"/><text x="44.5760%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (343 samples, 0.57%)</title><rect x="45.2659%" y="149" width="0.5686%" height="15" fill="rgb(231,57,52)" fg:x="27308" fg:w="343"/><text x="45.5159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="51.0244%" y="85" width="0.0116%" height="15" fill="rgb(248,177,22)" fg:x="30782" fg:w="7"/><text x="51.2744%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="51.0244%" y="69" width="0.0116%" height="15" fill="rgb(215,211,37)" fg:x="30782" fg:w="7"/><text x="51.2744%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.03%)</title><rect x="51.0211%" y="101" width="0.0282%" height="15" fill="rgb(241,128,51)" fg:x="30780" fg:w="17"/><text x="51.2711%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.04%)</title><rect x="51.0576%" y="101" width="0.0381%" height="15" fill="rgb(227,165,31)" fg:x="30802" fg:w="23"/><text x="51.3076%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="51.0841%" y="85" width="0.0116%" height="15" fill="rgb(228,167,24)" fg:x="30818" fg:w="7"/><text x="51.3341%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="51.0841%" y="69" width="0.0116%" height="15" fill="rgb(228,143,12)" fg:x="30818" fg:w="7"/><text x="51.3341%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (79 samples, 0.13%)</title><rect x="51.0062%" y="117" width="0.1310%" height="15" fill="rgb(249,149,8)" fg:x="30771" fg:w="79"/><text x="51.2562%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="51.0973%" y="101" width="0.0398%" height="15" fill="rgb(243,35,44)" fg:x="30826" fg:w="24"/><text x="51.3473%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (97 samples, 0.16%)</title><rect x="50.9979%" y="133" width="0.1608%" height="15" fill="rgb(246,89,9)" fg:x="30766" fg:w="97"/><text x="51.2479%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (104 samples, 0.17%)</title><rect x="50.9896%" y="165" width="0.1724%" height="15" fill="rgb(233,213,13)" fg:x="30761" fg:w="104"/><text x="51.2396%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (103 samples, 0.17%)</title><rect x="50.9912%" y="149" width="0.1707%" height="15" fill="rgb(233,141,41)" fg:x="30762" fg:w="103"/><text x="51.2412%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (14,231 samples, 23.59%)</title><rect x="27.5743%" y="197" width="23.5894%" height="15" fill="rgb(239,167,4)" fg:x="16635" fg:w="14231"/><text x="27.8243%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarCod..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,214 samples, 5.33%)</title><rect x="45.8361%" y="181" width="5.3275%" height="15" fill="rgb(209,217,16)" fg:x="27652" fg:w="3214"/><text x="46.0861%" y="191.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (7 samples, 0.01%)</title><rect x="51.1636%" y="197" width="0.0116%" height="15" fill="rgb(219,88,35)" fg:x="30866" fg:w="7"/><text x="51.4136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.03%)</title><rect x="53.4760%" y="101" width="0.0298%" height="15" fill="rgb(220,193,23)" fg:x="32261" fg:w="18"/><text x="53.7260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="53.4893%" y="85" width="0.0166%" height="15" fill="rgb(230,90,52)" fg:x="32269" fg:w="10"/><text x="53.7393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="53.4926%" y="69" width="0.0133%" height="15" fill="rgb(252,106,19)" fg:x="32271" fg:w="8"/><text x="53.7426%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.04%)</title><rect x="53.4710%" y="117" width="0.0431%" height="15" fill="rgb(206,74,20)" fg:x="32258" fg:w="26"/><text x="53.7210%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 0.12%)</title><rect x="53.4014%" y="181" width="0.1160%" height="15" fill="rgb(230,138,44)" fg:x="32216" fg:w="70"/><text x="53.6514%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.06%)</title><rect x="53.4561%" y="165" width="0.0613%" height="15" fill="rgb(235,182,43)" fg:x="32249" fg:w="37"/><text x="53.7061%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="53.4627%" y="149" width="0.0547%" height="15" fill="rgb(242,16,51)" fg:x="32253" fg:w="33"/><text x="53.7127%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.05%)</title><rect x="53.4627%" y="133" width="0.0547%" height="15" fill="rgb(248,9,4)" fg:x="32253" fg:w="33"/><text x="53.7127%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (50 samples, 0.08%)</title><rect x="53.5174%" y="165" width="0.0829%" height="15" fill="rgb(210,31,22)" fg:x="32286" fg:w="50"/><text x="53.7674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="53.6003%" y="165" width="0.0249%" height="15" fill="rgb(239,54,39)" fg:x="32336" fg:w="15"/><text x="53.8503%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (21 samples, 0.03%)</title><rect x="53.6252%" y="165" width="0.0348%" height="15" fill="rgb(230,99,41)" fg:x="32351" fg:w="21"/><text x="53.8752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.06%)</title><rect x="53.6600%" y="165" width="0.0613%" height="15" fill="rgb(253,106,12)" fg:x="32372" fg:w="37"/><text x="53.9100%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="53.7213%" y="165" width="0.0348%" height="15" fill="rgb(213,46,41)" fg:x="32409" fg:w="21"/><text x="53.9713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="53.7561%" y="165" width="0.0282%" height="15" fill="rgb(215,133,35)" fg:x="32430" fg:w="17"/><text x="54.0061%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.04%)</title><rect x="54.1805%" y="133" width="0.0365%" height="15" fill="rgb(213,28,5)" fg:x="32686" fg:w="22"/><text x="54.4305%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (282 samples, 0.47%)</title><rect x="54.3346%" y="117" width="0.4674%" height="15" fill="rgb(215,77,49)" fg:x="32779" fg:w="282"/><text x="54.5846%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (88 samples, 0.15%)</title><rect x="54.6562%" y="101" width="0.1459%" height="15" fill="rgb(248,100,22)" fg:x="32973" fg:w="88"/><text x="54.9062%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (572 samples, 0.95%)</title><rect x="53.9053%" y="149" width="0.9482%" height="15" fill="rgb(208,67,9)" fg:x="32520" fg:w="572"/><text x="54.1553%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (384 samples, 0.64%)</title><rect x="54.2169%" y="133" width="0.6365%" height="15" fill="rgb(219,133,21)" fg:x="32708" fg:w="384"/><text x="54.4669%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.05%)</title><rect x="54.8021%" y="117" width="0.0514%" height="15" fill="rgb(246,46,29)" fg:x="33061" fg:w="31"/><text x="55.0521%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (40 samples, 0.07%)</title><rect x="54.8535%" y="149" width="0.0663%" height="15" fill="rgb(246,185,52)" fg:x="33092" fg:w="40"/><text x="55.1035%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (217 samples, 0.36%)</title><rect x="54.9198%" y="149" width="0.3597%" height="15" fill="rgb(252,136,11)" fg:x="33132" fg:w="217"/><text x="55.1698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (80 samples, 0.13%)</title><rect x="55.1469%" y="133" width="0.1326%" height="15" fill="rgb(219,138,53)" fg:x="33269" fg:w="80"/><text x="55.3969%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="55.2795%" y="149" width="0.0232%" height="15" fill="rgb(211,51,23)" fg:x="33349" fg:w="14"/><text x="55.5295%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (59 samples, 0.10%)</title><rect x="55.3027%" y="149" width="0.0978%" height="15" fill="rgb(247,221,28)" fg:x="33363" fg:w="59"/><text x="55.5527%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="55.4005%" y="149" width="0.0149%" height="15" fill="rgb(251,222,45)" fg:x="33422" fg:w="9"/><text x="55.6505%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (24 samples, 0.04%)</title><rect x="55.4154%" y="149" width="0.0398%" height="15" fill="rgb(217,162,53)" fg:x="33431" fg:w="24"/><text x="55.6654%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (162 samples, 0.27%)</title><rect x="55.5265%" y="133" width="0.2685%" height="15" fill="rgb(229,93,14)" fg:x="33498" fg:w="162"/><text x="55.7765%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="55.7950%" y="133" width="0.0199%" height="15" fill="rgb(209,67,49)" fg:x="33660" fg:w="12"/><text x="56.0450%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="55.8149%" y="133" width="0.0133%" height="15" fill="rgb(213,87,29)" fg:x="33672" fg:w="8"/><text x="56.0649%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (74 samples, 0.12%)</title><rect x="55.8911%" y="117" width="0.1227%" height="15" fill="rgb(205,151,52)" fg:x="33718" fg:w="74"/><text x="56.1411%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (103 samples, 0.17%)</title><rect x="56.0138%" y="117" width="0.1707%" height="15" fill="rgb(253,215,39)" fg:x="33792" fg:w="103"/><text x="56.2638%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (243 samples, 0.40%)</title><rect x="55.8298%" y="133" width="0.4028%" height="15" fill="rgb(221,220,41)" fg:x="33681" fg:w="243"/><text x="56.0798%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.05%)</title><rect x="56.1845%" y="117" width="0.0481%" height="15" fill="rgb(218,133,21)" fg:x="33895" fg:w="29"/><text x="56.4345%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="56.2326%" y="133" width="0.0398%" height="15" fill="rgb(221,193,43)" fg:x="33924" fg:w="24"/><text x="56.4826%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="56.5575%" y="101" width="0.0182%" height="15" fill="rgb(240,128,52)" fg:x="34120" fg:w="11"/><text x="56.8075%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (141 samples, 0.23%)</title><rect x="56.6221%" y="85" width="0.2337%" height="15" fill="rgb(253,114,12)" fg:x="34159" fg:w="141"/><text x="56.8721%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="56.7995%" y="69" width="0.0564%" height="15" fill="rgb(215,223,47)" fg:x="34266" fg:w="34"/><text x="57.0495%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (256 samples, 0.42%)</title><rect x="56.4564%" y="117" width="0.4243%" height="15" fill="rgb(248,225,23)" fg:x="34059" fg:w="256"/><text x="56.7064%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (184 samples, 0.30%)</title><rect x="56.5757%" y="101" width="0.3050%" height="15" fill="rgb(250,108,0)" fg:x="34131" fg:w="184"/><text x="56.8257%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="56.8559%" y="85" width="0.0249%" height="15" fill="rgb(228,208,7)" fg:x="34300" fg:w="15"/><text x="57.1059%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="56.8807%" y="117" width="0.0414%" height="15" fill="rgb(244,45,10)" fg:x="34315" fg:w="25"/><text x="57.1307%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (896 samples, 1.49%)</title><rect x="55.4552%" y="149" width="1.4852%" height="15" fill="rgb(207,125,25)" fg:x="33455" fg:w="896"/><text x="55.7052%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (403 samples, 0.67%)</title><rect x="56.2724%" y="133" width="0.6680%" height="15" fill="rgb(210,195,18)" fg:x="33948" fg:w="403"/><text x="56.5224%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="56.9222%" y="117" width="0.0182%" height="15" fill="rgb(249,80,12)" fg:x="34340" fg:w="11"/><text x="57.1722%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (56 samples, 0.09%)</title><rect x="57.1111%" y="133" width="0.0928%" height="15" fill="rgb(221,65,9)" fg:x="34454" fg:w="56"/><text x="57.3611%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (103 samples, 0.17%)</title><rect x="57.2040%" y="133" width="0.1707%" height="15" fill="rgb(235,49,36)" fg:x="34510" fg:w="103"/><text x="57.4540%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (304 samples, 0.50%)</title><rect x="56.9404%" y="149" width="0.5039%" height="15" fill="rgb(225,32,20)" fg:x="34351" fg:w="304"/><text x="57.1904%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.07%)</title><rect x="57.3747%" y="133" width="0.0696%" height="15" fill="rgb(215,141,46)" fg:x="34613" fg:w="42"/><text x="57.6247%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="57.4443%" y="149" width="0.0381%" height="15" fill="rgb(250,160,47)" fg:x="34655" fg:w="23"/><text x="57.6943%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,252 samples, 3.73%)</title><rect x="53.7860%" y="165" width="3.7329%" height="15" fill="rgb(216,222,40)" fg:x="32448" fg:w="2252"/><text x="54.0360%" y="175.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.04%)</title><rect x="57.4824%" y="149" width="0.0365%" height="15" fill="rgb(234,217,39)" fg:x="34678" fg:w="22"/><text x="57.7324%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 0.02%)</title><rect x="57.5189%" y="165" width="0.0215%" height="15" fill="rgb(207,178,40)" fg:x="34700" fg:w="13"/><text x="57.7689%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="57.5404%" y="165" width="0.0249%" height="15" fill="rgb(221,136,13)" fg:x="34713" fg:w="15"/><text x="57.7904%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="57.5653%" y="165" width="0.0365%" height="15" fill="rgb(249,199,10)" fg:x="34728" fg:w="22"/><text x="57.8153%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (20 samples, 0.03%)</title><rect x="57.6018%" y="165" width="0.0332%" height="15" fill="rgb(249,222,13)" fg:x="34750" fg:w="20"/><text x="57.8518%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28 samples, 0.05%)</title><rect x="57.6349%" y="165" width="0.0464%" height="15" fill="rgb(244,185,38)" fg:x="34770" fg:w="28"/><text x="57.8849%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="57.6813%" y="165" width="0.0182%" height="15" fill="rgb(236,202,9)" fg:x="34798" fg:w="11"/><text x="57.9313%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,530 samples, 4.19%)</title><rect x="53.5174%" y="181" width="4.1937%" height="15" fill="rgb(250,229,37)" fg:x="32286" fg:w="2530"/><text x="53.7674%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (7 samples, 0.01%)</title><rect x="57.6996%" y="165" width="0.0116%" height="15" fill="rgb(206,174,23)" fg:x="34809" fg:w="7"/><text x="57.9496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.7311%" y="117" width="0.0116%" height="15" fill="rgb(211,33,43)" fg:x="34828" fg:w="7"/><text x="57.9811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="57.7261%" y="149" width="0.0282%" height="15" fill="rgb(245,58,50)" fg:x="34825" fg:w="17"/><text x="57.9761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="57.7311%" y="133" width="0.0232%" height="15" fill="rgb(244,68,36)" fg:x="34828" fg:w="14"/><text x="57.9811%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.7427%" y="117" width="0.0116%" height="15" fill="rgb(232,229,15)" fg:x="34835" fg:w="7"/><text x="57.9927%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.04%)</title><rect x="57.7145%" y="181" width="0.0414%" height="15" fill="rgb(254,30,23)" fg:x="34818" fg:w="25"/><text x="57.9645%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.04%)</title><rect x="57.7195%" y="165" width="0.0365%" height="15" fill="rgb(235,160,14)" fg:x="34821" fg:w="22"/><text x="57.9695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="58.0394%" y="165" width="0.0166%" height="15" fill="rgb(212,155,44)" fg:x="35014" fg:w="10"/><text x="58.2894%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="58.0576%" y="165" width="0.0497%" height="15" fill="rgb(226,2,50)" fg:x="35025" fg:w="30"/><text x="58.3076%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="58.1073%" y="165" width="0.0265%" height="15" fill="rgb(234,177,6)" fg:x="35055" fg:w="16"/><text x="58.3573%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (39 samples, 0.06%)</title><rect x="58.1339%" y="165" width="0.0646%" height="15" fill="rgb(217,24,9)" fg:x="35071" fg:w="39"/><text x="58.3839%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="58.1985%" y="165" width="0.0182%" height="15" fill="rgb(220,13,46)" fg:x="35110" fg:w="11"/><text x="58.4485%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (17 samples, 0.03%)</title><rect x="58.2167%" y="165" width="0.0282%" height="15" fill="rgb(239,221,27)" fg:x="35121" fg:w="17"/><text x="58.4667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (153 samples, 0.25%)</title><rect x="58.5599%" y="117" width="0.2536%" height="15" fill="rgb(222,198,25)" fg:x="35328" fg:w="153"/><text x="58.8099%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (52 samples, 0.09%)</title><rect x="58.7273%" y="101" width="0.0862%" height="15" fill="rgb(211,99,13)" fg:x="35429" fg:w="52"/><text x="58.9773%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (297 samples, 0.49%)</title><rect x="58.3361%" y="149" width="0.4923%" height="15" fill="rgb(232,111,31)" fg:x="35193" fg:w="297"/><text x="58.5861%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (206 samples, 0.34%)</title><rect x="58.4869%" y="133" width="0.3415%" height="15" fill="rgb(245,82,37)" fg:x="35284" fg:w="206"/><text x="58.7369%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="58.8135%" y="117" width="0.0149%" height="15" fill="rgb(227,149,46)" fg:x="35481" fg:w="9"/><text x="59.0635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="58.8284%" y="149" width="0.0365%" height="15" fill="rgb(218,36,50)" fg:x="35490" fg:w="22"/><text x="59.0784%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="58.8649%" y="149" width="0.0348%" height="15" fill="rgb(226,80,48)" fg:x="35512" fg:w="21"/><text x="59.1149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (25 samples, 0.04%)</title><rect x="58.9063%" y="149" width="0.0414%" height="15" fill="rgb(238,224,15)" fg:x="35537" fg:w="25"/><text x="59.1563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (38 samples, 0.06%)</title><rect x="59.1765%" y="133" width="0.0630%" height="15" fill="rgb(241,136,10)" fg:x="35700" fg:w="38"/><text x="59.4265%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (17 samples, 0.03%)</title><rect x="59.3986%" y="117" width="0.0282%" height="15" fill="rgb(208,32,45)" fg:x="35834" fg:w="17"/><text x="59.6486%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (28 samples, 0.05%)</title><rect x="59.4268%" y="117" width="0.0464%" height="15" fill="rgb(207,135,9)" fg:x="35851" fg:w="28"/><text x="59.6768%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.05%)</title><rect x="59.4732%" y="117" width="0.0514%" height="15" fill="rgb(206,86,44)" fg:x="35879" fg:w="31"/><text x="59.7232%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (153 samples, 0.25%)</title><rect x="59.5263%" y="117" width="0.2536%" height="15" fill="rgb(245,177,15)" fg:x="35911" fg:w="153"/><text x="59.7763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="60.0302%" y="101" width="0.0282%" height="15" fill="rgb(206,64,50)" fg:x="36215" fg:w="17"/><text x="60.2802%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (31 samples, 0.05%)</title><rect x="60.0583%" y="101" width="0.0514%" height="15" fill="rgb(234,36,40)" fg:x="36232" fg:w="31"/><text x="60.3083%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (118 samples, 0.20%)</title><rect x="60.1097%" y="101" width="0.1956%" height="15" fill="rgb(213,64,8)" fg:x="36263" fg:w="118"/><text x="60.3597%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (96 samples, 0.16%)</title><rect x="60.6269%" y="69" width="0.1591%" height="15" fill="rgb(210,75,36)" fg:x="36575" fg:w="96"/><text x="60.8769%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (270 samples, 0.45%)</title><rect x="60.3551%" y="85" width="0.4476%" height="15" fill="rgb(229,88,21)" fg:x="36411" fg:w="270"/><text x="60.6051%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 0.02%)</title><rect x="60.7860%" y="69" width="0.0166%" height="15" fill="rgb(252,204,47)" fg:x="36671" fg:w="10"/><text x="61.0360%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (316 samples, 0.52%)</title><rect x="60.3053%" y="101" width="0.5238%" height="15" fill="rgb(208,77,27)" fg:x="36381" fg:w="316"/><text x="60.5553%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="60.8026%" y="85" width="0.0265%" height="15" fill="rgb(221,76,26)" fg:x="36681" fg:w="16"/><text x="61.0526%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (138 samples, 0.23%)</title><rect x="60.8291%" y="101" width="0.2287%" height="15" fill="rgb(225,139,18)" fg:x="36697" fg:w="138"/><text x="61.0791%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 0.07%)</title><rect x="61.2336%" y="69" width="0.0680%" height="15" fill="rgb(230,137,11)" fg:x="36941" fg:w="41"/><text x="61.4836%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (222 samples, 0.37%)</title><rect x="61.0579%" y="101" width="0.3680%" height="15" fill="rgb(212,28,1)" fg:x="36835" fg:w="222"/><text x="61.3079%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (197 samples, 0.33%)</title><rect x="61.0993%" y="85" width="0.3265%" height="15" fill="rgb(248,164,17)" fg:x="36860" fg:w="197"/><text x="61.3493%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (75 samples, 0.12%)</title><rect x="61.3016%" y="69" width="0.1243%" height="15" fill="rgb(222,171,42)" fg:x="36982" fg:w="75"/><text x="61.5516%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,004 samples, 1.66%)</title><rect x="59.7799%" y="117" width="1.6642%" height="15" fill="rgb(243,84,45)" fg:x="36064" fg:w="1004"/><text x="60.0299%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="61.4259%" y="101" width="0.0182%" height="15" fill="rgb(252,49,23)" fg:x="37057" fg:w="11"/><text x="61.6759%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="61.4441%" y="117" width="0.0116%" height="15" fill="rgb(215,19,7)" fg:x="37068" fg:w="7"/><text x="61.6941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,414 samples, 2.34%)</title><rect x="59.2395%" y="133" width="2.3439%" height="15" fill="rgb(238,81,41)" fg:x="35738" fg:w="1414"/><text x="59.4895%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (77 samples, 0.13%)</title><rect x="61.4557%" y="117" width="0.1276%" height="15" fill="rgb(210,199,37)" fg:x="37075" fg:w="77"/><text x="61.7057%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (143 samples, 0.24%)</title><rect x="61.5833%" y="133" width="0.2370%" height="15" fill="rgb(244,192,49)" fg:x="37152" fg:w="143"/><text x="61.8333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (49 samples, 0.08%)</title><rect x="61.8204%" y="133" width="0.0812%" height="15" fill="rgb(226,211,11)" fg:x="37295" fg:w="49"/><text x="62.0704%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,797 samples, 2.98%)</title><rect x="58.9478%" y="149" width="2.9787%" height="15" fill="rgb(236,162,54)" fg:x="35562" fg:w="1797"/><text x="59.1978%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="61.9016%" y="133" width="0.0249%" height="15" fill="rgb(220,229,9)" fg:x="37344" fg:w="15"/><text x="62.1516%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,520 samples, 4.18%)</title><rect x="57.7559%" y="181" width="4.1772%" height="15" fill="rgb(250,87,22)" fg:x="34843" fg:w="2520"/><text x="58.0059%" y="191.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,225 samples, 3.69%)</title><rect x="58.2449%" y="165" width="3.6882%" height="15" fill="rgb(239,43,17)" fg:x="35138" fg:w="2225"/><text x="58.4949%" y="175.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (73 samples, 0.12%)</title><rect x="61.9331%" y="181" width="0.1210%" height="15" fill="rgb(231,177,25)" fg:x="37363" fg:w="73"/><text x="62.1831%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (52 samples, 0.09%)</title><rect x="62.0541%" y="165" width="0.0862%" height="15" fill="rgb(219,179,1)" fg:x="37436" fg:w="52"/><text x="62.3041%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="62.1453%" y="101" width="0.0116%" height="15" fill="rgb(238,219,53)" fg:x="37491" fg:w="7"/><text x="62.3953%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="62.1403%" y="165" width="0.0215%" height="15" fill="rgb(232,167,36)" fg:x="37488" fg:w="13"/><text x="62.3903%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="62.1420%" y="149" width="0.0199%" height="15" fill="rgb(244,19,51)" fg:x="37489" fg:w="12"/><text x="62.3920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="62.1420%" y="133" width="0.0199%" height="15" fill="rgb(224,6,22)" fg:x="37489" fg:w="12"/><text x="62.3920%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="62.1436%" y="117" width="0.0182%" height="15" fill="rgb(224,145,5)" fg:x="37490" fg:w="11"/><text x="62.3936%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (32 samples, 0.05%)</title><rect x="62.2779%" y="149" width="0.0530%" height="15" fill="rgb(234,130,49)" fg:x="37571" fg:w="32"/><text x="62.5279%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (19 samples, 0.03%)</title><rect x="62.3309%" y="149" width="0.0315%" height="15" fill="rgb(254,6,2)" fg:x="37603" fg:w="19"/><text x="62.5809%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (13 samples, 0.02%)</title><rect x="62.3624%" y="149" width="0.0215%" height="15" fill="rgb(208,96,46)" fg:x="37622" fg:w="13"/><text x="62.6124%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="62.3840%" y="149" width="0.0133%" height="15" fill="rgb(239,3,39)" fg:x="37635" fg:w="8"/><text x="62.6340%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="62.6575%" y="117" width="0.0199%" height="15" fill="rgb(233,210,1)" fg:x="37800" fg:w="12"/><text x="62.9075%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.03%)</title><rect x="62.6774%" y="117" width="0.0298%" height="15" fill="rgb(244,137,37)" fg:x="37812" fg:w="18"/><text x="62.9274%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.03%)</title><rect x="62.7586%" y="101" width="0.0282%" height="15" fill="rgb(240,136,2)" fg:x="37861" fg:w="17"/><text x="63.0086%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (319 samples, 0.53%)</title><rect x="63.1630%" y="69" width="0.5288%" height="15" fill="rgb(239,18,37)" fg:x="38105" fg:w="319"/><text x="63.4130%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (44 samples, 0.07%)</title><rect x="63.6918%" y="69" width="0.0729%" height="15" fill="rgb(218,185,22)" fg:x="38424" fg:w="44"/><text x="63.9418%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (907 samples, 1.50%)</title><rect x="62.5066%" y="133" width="1.5034%" height="15" fill="rgb(225,218,4)" fg:x="37709" fg:w="907"/><text x="62.7566%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (786 samples, 1.30%)</title><rect x="62.7072%" y="117" width="1.3029%" height="15" fill="rgb(230,182,32)" fg:x="37830" fg:w="786"/><text x="62.9572%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (738 samples, 1.22%)</title><rect x="62.7868%" y="101" width="1.2233%" height="15" fill="rgb(242,56,43)" fg:x="37878" fg:w="738"/><text x="63.0368%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (608 samples, 1.01%)</title><rect x="63.0023%" y="85" width="1.0078%" height="15" fill="rgb(233,99,24)" fg:x="38008" fg:w="608"/><text x="63.2523%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (148 samples, 0.25%)</title><rect x="63.7648%" y="69" width="0.2453%" height="15" fill="rgb(234,209,42)" fg:x="38468" fg:w="148"/><text x="64.0148%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (40 samples, 0.07%)</title><rect x="64.0101%" y="133" width="0.0663%" height="15" fill="rgb(227,7,12)" fg:x="38616" fg:w="40"/><text x="64.2601%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (61 samples, 0.10%)</title><rect x="64.0764%" y="133" width="0.1011%" height="15" fill="rgb(245,203,43)" fg:x="38656" fg:w="61"/><text x="64.3264%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,217 samples, 2.02%)</title><rect x="62.1751%" y="165" width="2.0173%" height="15" fill="rgb(238,205,33)" fg:x="37509" fg:w="1217"/><text x="62.4251%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,083 samples, 1.80%)</title><rect x="62.3972%" y="149" width="1.7952%" height="15" fill="rgb(231,56,7)" fg:x="37643" fg:w="1083"/><text x="62.6472%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="64.1775%" y="133" width="0.0149%" height="15" fill="rgb(244,186,29)" fg:x="38717" fg:w="9"/><text x="64.4275%" y="143.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,307 samples, 2.17%)</title><rect x="62.0541%" y="181" width="2.1665%" height="15" fill="rgb(234,111,31)" fg:x="37436" fg:w="1307"/><text x="62.3041%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.03%)</title><rect x="64.1924%" y="165" width="0.0282%" height="15" fill="rgb(241,149,10)" fg:x="38726" fg:w="17"/><text x="64.4424%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.04%)</title><rect x="65.4903%" y="149" width="0.0365%" height="15" fill="rgb(249,206,44)" fg:x="39509" fg:w="22"/><text x="65.7403%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (30 samples, 0.05%)</title><rect x="66.0125%" y="133" width="0.0497%" height="15" fill="rgb(251,153,30)" fg:x="39824" fg:w="30"/><text x="66.2625%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (24 samples, 0.04%)</title><rect x="66.2578%" y="117" width="0.0398%" height="15" fill="rgb(239,152,38)" fg:x="39972" fg:w="24"/><text x="66.5078%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,319 samples, 2.19%)</title><rect x="64.2206%" y="181" width="2.1864%" height="15" fill="rgb(249,139,47)" fg:x="38743" fg:w="1319"/><text x="64.4706%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (966 samples, 1.60%)</title><rect x="64.8057%" y="165" width="1.6012%" height="15" fill="rgb(244,64,35)" fg:x="39096" fg:w="966"/><text x="65.0557%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (531 samples, 0.88%)</title><rect x="65.5268%" y="149" width="0.8802%" height="15" fill="rgb(216,46,15)" fg:x="39531" fg:w="531"/><text x="65.7768%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (208 samples, 0.34%)</title><rect x="66.0622%" y="133" width="0.3448%" height="15" fill="rgb(250,74,19)" fg:x="39854" fg:w="208"/><text x="66.3122%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (66 samples, 0.11%)</title><rect x="66.2976%" y="117" width="0.1094%" height="15" fill="rgb(249,42,33)" fg:x="39996" fg:w="66"/><text x="66.5476%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (8 samples, 0.01%)</title><rect x="66.3937%" y="101" width="0.0133%" height="15" fill="rgb(242,149,17)" fg:x="40054" fg:w="8"/><text x="66.6437%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (696 samples, 1.15%)</title><rect x="67.2772%" y="165" width="1.1537%" height="15" fill="rgb(244,29,21)" fg:x="40587" fg:w="696"/><text x="67.5272%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,176 samples, 1.95%)</title><rect x="68.4309%" y="165" width="1.9493%" height="15" fill="rgb(220,130,37)" fg:x="41283" fg:w="1176"/><text x="68.6809%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,874 samples, 4.76%)</title><rect x="66.4070%" y="181" width="4.7640%" height="15" fill="rgb(211,67,2)" fg:x="40062" fg:w="2874"/><text x="66.6570%" y="191.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (477 samples, 0.79%)</title><rect x="70.3803%" y="165" width="0.7907%" height="15" fill="rgb(235,68,52)" fg:x="42459" fg:w="477"/><text x="70.6303%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (31 samples, 0.05%)</title><rect x="71.1709%" y="181" width="0.0514%" height="15" fill="rgb(246,142,3)" fg:x="42936" fg:w="31"/><text x="71.4209%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (288 samples, 0.48%)</title><rect x="71.2223%" y="181" width="0.4774%" height="15" fill="rgb(241,25,7)" fg:x="42967" fg:w="288"/><text x="71.4723%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (12,386 samples, 20.53%)</title><rect x="51.1769%" y="197" width="20.5311%" height="15" fill="rgb(242,119,39)" fg:x="30874" fg:w="12386"/><text x="51.4269%" y="207.50">rust_qecp`rust_qecp::union_find_..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (296 samples, 0.49%)</title><rect x="78.9202%" y="181" width="0.4907%" height="15" fill="rgb(241,98,45)" fg:x="47611" fg:w="296"/><text x="79.1702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="79.5634%" y="165" width="0.0232%" height="15" fill="rgb(254,28,30)" fg:x="47999" fg:w="14"/><text x="79.8134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (137 samples, 0.23%)</title><rect x="79.6479%" y="149" width="0.2271%" height="15" fill="rgb(241,142,54)" fg:x="48050" fg:w="137"/><text x="79.8979%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.06%)</title><rect x="79.8104%" y="133" width="0.0646%" height="15" fill="rgb(222,85,15)" fg:x="48148" fg:w="39"/><text x="80.0604%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (197 samples, 0.33%)</title><rect x="79.5866%" y="165" width="0.3265%" height="15" fill="rgb(210,85,47)" fg:x="48013" fg:w="197"/><text x="79.8366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.04%)</title><rect x="79.8750%" y="149" width="0.0381%" height="15" fill="rgb(224,206,25)" fg:x="48187" fg:w="23"/><text x="80.1250%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (311 samples, 0.52%)</title><rect x="79.4109%" y="181" width="0.5155%" height="15" fill="rgb(243,201,19)" fg:x="47907" fg:w="311"/><text x="79.6609%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.04%)</title><rect x="79.9264%" y="181" width="0.0398%" height="15" fill="rgb(236,59,4)" fg:x="48218" fg:w="24"/><text x="80.1764%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (170 samples, 0.28%)</title><rect x="80.4121%" y="165" width="0.2818%" height="15" fill="rgb(254,179,45)" fg:x="48511" fg:w="170"/><text x="80.6621%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.01%)</title><rect x="80.6988%" y="165" width="0.0149%" height="15" fill="rgb(226,14,10)" fg:x="48684" fg:w="9"/><text x="80.9488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (481 samples, 0.80%)</title><rect x="79.9662%" y="181" width="0.7973%" height="15" fill="rgb(244,27,41)" fg:x="48242" fg:w="481"/><text x="80.2162%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.05%)</title><rect x="80.7138%" y="165" width="0.0497%" height="15" fill="rgb(235,35,32)" fg:x="48693" fg:w="30"/><text x="80.9638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.04%)</title><rect x="80.7204%" y="149" width="0.0431%" height="15" fill="rgb(218,68,31)" fg:x="48697" fg:w="26"/><text x="80.9704%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.03%)</title><rect x="80.8066%" y="165" width="0.0315%" height="15" fill="rgb(207,120,37)" fg:x="48749" fg:w="19"/><text x="81.0566%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (56 samples, 0.09%)</title><rect x="80.7635%" y="181" width="0.0928%" height="15" fill="rgb(227,98,0)" fg:x="48723" fg:w="56"/><text x="81.0135%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="80.8397%" y="165" width="0.0166%" height="15" fill="rgb(207,7,3)" fg:x="48769" fg:w="10"/><text x="81.0897%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.04%)</title><rect x="80.9475%" y="149" width="0.0381%" height="15" fill="rgb(206,98,19)" fg:x="48834" fg:w="23"/><text x="81.1975%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (83 samples, 0.14%)</title><rect x="80.8563%" y="181" width="0.1376%" height="15" fill="rgb(217,5,26)" fg:x="48779" fg:w="83"/><text x="81.1063%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (72 samples, 0.12%)</title><rect x="80.8746%" y="165" width="0.1193%" height="15" fill="rgb(235,190,38)" fg:x="48790" fg:w="72"/><text x="81.1246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (23 samples, 0.04%)</title><rect x="80.9939%" y="181" width="0.0381%" height="15" fill="rgb(247,86,24)" fg:x="48862" fg:w="23"/><text x="81.2439%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (118 samples, 0.20%)</title><rect x="81.0320%" y="181" width="0.1956%" height="15" fill="rgb(205,101,16)" fg:x="48885" fg:w="118"/><text x="81.2820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (46 samples, 0.08%)</title><rect x="81.2376%" y="181" width="0.0762%" height="15" fill="rgb(246,168,33)" fg:x="49009" fg:w="46"/><text x="81.4876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.02%)</title><rect x="81.3155%" y="181" width="0.0166%" height="15" fill="rgb(231,114,1)" fg:x="49056" fg:w="10"/><text x="81.5655%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="81.3321%" y="181" width="0.0149%" height="15" fill="rgb(207,184,53)" fg:x="49066" fg:w="9"/><text x="81.5821%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (69 samples, 0.11%)</title><rect x="81.3486%" y="181" width="0.1144%" height="15" fill="rgb(224,95,51)" fg:x="49076" fg:w="69"/><text x="81.5986%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (119 samples, 0.20%)</title><rect x="81.4630%" y="181" width="0.1973%" height="15" fill="rgb(212,188,45)" fg:x="49145" fg:w="119"/><text x="81.7130%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="81.6702%" y="181" width="0.0182%" height="15" fill="rgb(223,154,38)" fg:x="49270" fg:w="11"/><text x="81.9202%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (22 samples, 0.04%)</title><rect x="81.6884%" y="181" width="0.0365%" height="15" fill="rgb(251,22,52)" fg:x="49281" fg:w="22"/><text x="81.9384%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="81.7249%" y="181" width="0.0182%" height="15" fill="rgb(229,209,22)" fg:x="49303" fg:w="11"/><text x="81.9749%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="81.7862%" y="117" width="0.0116%" height="15" fill="rgb(234,138,34)" fg:x="49340" fg:w="7"/><text x="82.0362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="81.8094%" y="101" width="0.0116%" height="15" fill="rgb(212,95,11)" fg:x="49354" fg:w="7"/><text x="82.0594%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="81.8244%" y="85" width="0.0332%" height="15" fill="rgb(240,179,47)" fg:x="49363" fg:w="20"/><text x="82.0744%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="81.8443%" y="69" width="0.0133%" height="15" fill="rgb(240,163,11)" fg:x="49375" fg:w="8"/><text x="82.0943%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="81.8210%" y="101" width="0.0381%" height="15" fill="rgb(236,37,12)" fg:x="49361" fg:w="23"/><text x="82.0710%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (40 samples, 0.07%)</title><rect x="81.7978%" y="117" width="0.0663%" height="15" fill="rgb(232,164,16)" fg:x="49347" fg:w="40"/><text x="82.0478%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (60 samples, 0.10%)</title><rect x="81.7763%" y="133" width="0.0995%" height="15" fill="rgb(244,205,15)" fg:x="49334" fg:w="60"/><text x="82.0263%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="81.8641%" y="117" width="0.0116%" height="15" fill="rgb(223,117,47)" fg:x="49387" fg:w="7"/><text x="82.1141%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="81.8757%" y="133" width="0.0133%" height="15" fill="rgb(244,107,35)" fg:x="49394" fg:w="8"/><text x="82.1257%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (77 samples, 0.13%)</title><rect x="81.7663%" y="149" width="0.1276%" height="15" fill="rgb(205,140,8)" fg:x="49328" fg:w="77"/><text x="82.0163%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (93 samples, 0.15%)</title><rect x="81.7431%" y="181" width="0.1542%" height="15" fill="rgb(228,84,46)" fg:x="49314" fg:w="93"/><text x="81.9931%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (84 samples, 0.14%)</title><rect x="81.7581%" y="165" width="0.1392%" height="15" fill="rgb(254,188,9)" fg:x="49323" fg:w="84"/><text x="82.0081%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (129 samples, 0.21%)</title><rect x="82.0929%" y="165" width="0.2138%" height="15" fill="rgb(206,112,54)" fg:x="49525" fg:w="129"/><text x="82.3429%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (192 samples, 0.32%)</title><rect x="82.3067%" y="165" width="0.3183%" height="15" fill="rgb(216,84,49)" fg:x="49654" fg:w="192"/><text x="82.5567%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (523 samples, 0.87%)</title><rect x="81.9023%" y="181" width="0.8669%" height="15" fill="rgb(214,194,35)" fg:x="49410" fg:w="523"/><text x="82.1523%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (87 samples, 0.14%)</title><rect x="82.6250%" y="165" width="0.1442%" height="15" fill="rgb(249,28,3)" fg:x="49846" fg:w="87"/><text x="82.8750%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (210 samples, 0.35%)</title><rect x="82.7692%" y="181" width="0.3481%" height="15" fill="rgb(222,56,52)" fg:x="49933" fg:w="210"/><text x="83.0192%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="83.1173%" y="181" width="0.0149%" height="15" fill="rgb(245,217,50)" fg:x="50143" fg:w="9"/><text x="83.3673%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (65 samples, 0.11%)</title><rect x="83.1322%" y="181" width="0.1077%" height="15" fill="rgb(213,201,24)" fg:x="50152" fg:w="65"/><text x="83.3822%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (153 samples, 0.25%)</title><rect x="83.6245%" y="133" width="0.2536%" height="15" fill="rgb(248,116,28)" fg:x="50449" fg:w="153"/><text x="83.8745%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (97 samples, 0.16%)</title><rect x="83.7173%" y="117" width="0.1608%" height="15" fill="rgb(219,72,43)" fg:x="50505" fg:w="97"/><text x="83.9673%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (279 samples, 0.46%)</title><rect x="83.4405%" y="149" width="0.4625%" height="15" fill="rgb(209,138,14)" fg:x="50338" fg:w="279"/><text x="83.6905%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="83.8781%" y="133" width="0.0249%" height="15" fill="rgb(222,18,33)" fg:x="50602" fg:w="15"/><text x="84.1281%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.03%)</title><rect x="83.9229%" y="133" width="0.0332%" height="15" fill="rgb(213,199,7)" fg:x="50629" fg:w="20"/><text x="84.1729%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="83.9378%" y="117" width="0.0182%" height="15" fill="rgb(250,110,10)" fg:x="50638" fg:w="11"/><text x="84.1878%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.05%)</title><rect x="83.9892%" y="117" width="0.0464%" height="15" fill="rgb(248,123,6)" fg:x="50669" fg:w="28"/><text x="84.2392%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (133 samples, 0.22%)</title><rect x="83.9063%" y="149" width="0.2205%" height="15" fill="rgb(206,91,31)" fg:x="50619" fg:w="133"/><text x="84.1563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.17%)</title><rect x="83.9594%" y="133" width="0.1674%" height="15" fill="rgb(211,154,13)" fg:x="50651" fg:w="101"/><text x="84.2094%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 0.09%)</title><rect x="84.0356%" y="117" width="0.0912%" height="15" fill="rgb(225,148,7)" fg:x="50697" fg:w="55"/><text x="84.2856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (498 samples, 0.83%)</title><rect x="83.3063%" y="165" width="0.8255%" height="15" fill="rgb(220,160,43)" fg:x="50257" fg:w="498"/><text x="83.5563%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="84.1317%" y="165" width="0.0365%" height="15" fill="rgb(213,52,39)" fg:x="50755" fg:w="22"/><text x="84.3817%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="84.1682%" y="165" width="0.0116%" height="15" fill="rgb(243,137,7)" fg:x="50777" fg:w="7"/><text x="84.4182%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (571 samples, 0.95%)</title><rect x="83.2400%" y="181" width="0.9465%" height="15" fill="rgb(230,79,13)" fg:x="50217" fg:w="571"/><text x="83.4900%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (15 samples, 0.02%)</title><rect x="84.1864%" y="181" width="0.0249%" height="15" fill="rgb(247,105,23)" fg:x="50788" fg:w="15"/><text x="84.4364%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (9 samples, 0.01%)</title><rect x="84.2113%" y="181" width="0.0149%" height="15" fill="rgb(223,179,41)" fg:x="50803" fg:w="9"/><text x="84.4613%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,560 samples, 12.53%)</title><rect x="71.7080%" y="197" width="12.5315%" height="15" fill="rgb(218,9,34)" fg:x="43260" fg:w="7560"/><text x="71.9580%" y="207.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`std::time::Instant::elapsed (8 samples, 0.01%)</title><rect x="84.2262%" y="181" width="0.0133%" height="15" fill="rgb(222,106,8)" fg:x="50812" fg:w="8"/><text x="84.4762%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,671 samples, 83.99%)</title><rect x="0.2536%" y="229" width="83.9925%" height="15" fill="rgb(211,220,0)" fg:x="153" fg:w="50671"/><text x="0.5036%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,951 samples, 82.80%)</title><rect x="1.4471%" y="213" width="82.7990%" height="15" fill="rgb(229,52,16)" fg:x="873" fg:w="49951"/><text x="1.6971%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,167 samples, 1.93%)</title><rect x="84.2461%" y="229" width="1.9344%" height="15" fill="rgb(212,155,18)" fg:x="50824" fg:w="1167"/><text x="84.4961%" y="239.50">r..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.02%)</title><rect x="86.4756%" y="197" width="0.0166%" height="15" fill="rgb(242,21,14)" fg:x="52169" fg:w="10"/><text x="86.7256%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="86.4756%" y="181" width="0.0166%" height="15" fill="rgb(222,19,48)" fg:x="52169" fg:w="10"/><text x="86.7256%" y="191.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="86.4756%" y="213" width="0.0182%" height="15" fill="rgb(232,45,27)" fg:x="52169" fg:w="11"/><text x="86.7256%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (301 samples, 0.50%)</title><rect x="86.1805%" y="229" width="0.4989%" height="15" fill="rgb(249,103,42)" fg:x="51991" fg:w="301"/><text x="86.4305%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (112 samples, 0.19%)</title><rect x="86.4938%" y="213" width="0.1857%" height="15" fill="rgb(246,81,33)" fg:x="52180" fg:w="112"/><text x="86.7438%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,643 samples, 6.04%)</title><rect x="86.6795%" y="229" width="6.0387%" height="15" fill="rgb(252,33,42)" fg:x="52292" fg:w="3643"/><text x="86.9295%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (169 samples, 0.28%)</title><rect x="92.7314%" y="213" width="0.2801%" height="15" fill="rgb(209,212,41)" fg:x="55943" fg:w="169"/><text x="92.9814%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (385 samples, 0.64%)</title><rect x="92.7181%" y="229" width="0.6382%" height="15" fill="rgb(207,154,6)" fg:x="55935" fg:w="385"/><text x="92.9681%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (208 samples, 0.34%)</title><rect x="93.0115%" y="213" width="0.3448%" height="15" fill="rgb(223,64,47)" fg:x="56112" fg:w="208"/><text x="93.2615%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (10 samples, 0.02%)</title><rect x="93.3397%" y="197" width="0.0166%" height="15" fill="rgb(211,161,38)" fg:x="56310" fg:w="10"/><text x="93.5897%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (60 samples, 0.10%)</title><rect x="93.3563%" y="229" width="0.0995%" height="15" fill="rgb(219,138,40)" fg:x="56320" fg:w="60"/><text x="93.6063%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,945 samples, 6.54%)</title><rect x="93.4591%" y="229" width="6.5393%" height="15" fill="rgb(241,228,46)" fg:x="56382" fg:w="3945"/><text x="93.7091%" y="239.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,825 samples, 4.68%)</title><rect x="95.3156%" y="213" width="4.6827%" height="15" fill="rgb(223,209,38)" fg:x="57502" fg:w="2825"/><text x="95.5656%" y="223.50">rust_..</text></g><g><title>all (60,328 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(236,164,45)" fg:x="0" fg:w="60328"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,253 samples, 99.88%)</title><rect x="0.1243%" y="309" width="99.8757%" height="15" fill="rgb(231,15,5)" fg:x="75" fg:w="60253"/><text x="0.3743%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,253 samples, 99.88%)</title><rect x="0.1243%" y="293" width="99.8757%" height="15" fill="rgb(252,35,15)" fg:x="75" fg:w="60253"/><text x="0.3743%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,253 samples, 99.88%)</title><rect x="0.1243%" y="277" width="99.8757%" height="15" fill="rgb(248,181,18)" fg:x="75" fg:w="60253"/><text x="0.3743%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,253 samples, 99.88%)</title><rect x="0.1243%" y="261" width="99.8757%" height="15" fill="rgb(233,39,42)" fg:x="75" fg:w="60253"/><text x="0.3743%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,248 samples, 99.87%)</title><rect x="0.1326%" y="245" width="99.8674%" height="15" fill="rgb(238,110,33)" fg:x="80" fg:w="60248"/><text x="0.3826%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>