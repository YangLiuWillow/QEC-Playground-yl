<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="24815"><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_snapshot_mut (3 samples, 0.01%)</title><rect x="0.0040%" y="165" width="0.0121%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2540%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (43 samples, 0.17%)</title><rect x="0.0161%" y="149" width="0.1733%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="43"/><text x="0.2661%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (92 samples, 0.37%)</title><rect x="0.3304%" y="133" width="0.3707%" height="15" fill="rgb(221,193,54)" fg:x="82" fg:w="92"/><text x="0.5804%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.10%)</title><rect x="0.7012%" y="133" width="0.0967%" height="15" fill="rgb(248,212,6)" fg:x="174" fg:w="24"/><text x="0.9512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.04%)</title><rect x="0.7616%" y="117" width="0.0363%" height="15" fill="rgb(208,68,35)" fg:x="189" fg:w="9"/><text x="1.0116%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="0.7657%" y="101" width="0.0322%" height="15" fill="rgb(232,128,0)" fg:x="190" fg:w="8"/><text x="1.0157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.03%)</title><rect x="0.7697%" y="85" width="0.0282%" height="15" fill="rgb(207,160,47)" fg:x="191" fg:w="7"/><text x="1.0197%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (152 samples, 0.61%)</title><rect x="0.1894%" y="149" width="0.6125%" height="15" fill="rgb(228,23,34)" fg:x="47" fg:w="152"/><text x="0.4394%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (114 samples, 0.46%)</title><rect x="0.8181%" y="69" width="0.4594%" height="15" fill="rgb(218,30,26)" fg:x="203" fg:w="114"/><text x="1.0681%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (118 samples, 0.48%)</title><rect x="0.8181%" y="85" width="0.4755%" height="15" fill="rgb(220,122,19)" fg:x="203" fg:w="118"/><text x="1.0681%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (3 samples, 0.01%)</title><rect x="1.2815%" y="69" width="0.0121%" height="15" fill="rgb(250,228,42)" fg:x="318" fg:w="3"/><text x="1.5315%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="1.2815%" y="53" width="0.0121%" height="15" fill="rgb(240,193,28)" fg:x="318" fg:w="3"/><text x="1.5315%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (29 samples, 0.12%)</title><rect x="1.2936%" y="85" width="0.1169%" height="15" fill="rgb(216,20,37)" fg:x="321" fg:w="29"/><text x="1.5436%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (29 samples, 0.12%)</title><rect x="1.2936%" y="69" width="0.1169%" height="15" fill="rgb(206,188,39)" fg:x="321" fg:w="29"/><text x="1.5436%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (723 samples, 2.91%)</title><rect x="1.5152%" y="53" width="2.9136%" height="15" fill="rgb(217,207,13)" fg:x="376" fg:w="723"/><text x="1.7652%" y="63.50">li..</text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (27 samples, 0.11%)</title><rect x="4.4328%" y="53" width="0.1088%" height="15" fill="rgb(231,73,38)" fg:x="1100" fg:w="27"/><text x="4.6828%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.10%)</title><rect x="4.4368%" y="37" width="0.1048%" height="15" fill="rgb(225,20,46)" fg:x="1101" fg:w="26"/><text x="4.6868%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (783 samples, 3.16%)</title><rect x="1.4910%" y="69" width="3.1553%" height="15" fill="rgb(210,31,41)" fg:x="370" fg:w="783"/><text x="1.7410%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (26 samples, 0.10%)</title><rect x="4.5416%" y="53" width="0.1048%" height="15" fill="rgb(221,200,47)" fg:x="1127" fg:w="26"/><text x="4.7916%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.10%)</title><rect x="4.5416%" y="37" width="0.1048%" height="15" fill="rgb(226,26,5)" fg:x="1127" fg:w="26"/><text x="4.7916%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (12 samples, 0.05%)</title><rect x="4.6464%" y="69" width="0.0484%" height="15" fill="rgb(249,33,26)" fg:x="1153" fg:w="12"/><text x="4.8964%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (12 samples, 0.05%)</title><rect x="4.6464%" y="53" width="0.0484%" height="15" fill="rgb(235,183,28)" fg:x="1153" fg:w="12"/><text x="4.8964%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (968 samples, 3.90%)</title><rect x="0.8181%" y="149" width="3.9009%" height="15" fill="rgb(221,5,38)" fg:x="203" fg:w="968"/><text x="1.0681%" y="159.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (968 samples, 3.90%)</title><rect x="0.8181%" y="133" width="3.9009%" height="15" fill="rgb(247,18,42)" fg:x="203" fg:w="968"/><text x="1.0681%" y="143.50">rust..</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (968 samples, 3.90%)</title><rect x="0.8181%" y="117" width="3.9009%" height="15" fill="rgb(241,131,45)" fg:x="203" fg:w="968"/><text x="1.0681%" y="127.50">rust..</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (968 samples, 3.90%)</title><rect x="0.8181%" y="101" width="3.9009%" height="15" fill="rgb(249,31,29)" fg:x="203" fg:w="968"/><text x="1.0681%" y="111.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (817 samples, 3.29%)</title><rect x="1.4266%" y="85" width="3.2924%" height="15" fill="rgb(225,111,53)" fg:x="354" fg:w="817"/><text x="1.6766%" y="95.50">rus..</text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="4.6947%" y="69" width="0.0242%" height="15" fill="rgb(238,160,17)" fg:x="1165" fg:w="6"/><text x="4.9447%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.12%)</title><rect x="4.7229%" y="85" width="0.1209%" height="15" fill="rgb(214,148,48)" fg:x="1172" fg:w="30"/><text x="4.9729%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (37 samples, 0.15%)</title><rect x="4.7229%" y="101" width="0.1491%" height="15" fill="rgb(232,36,49)" fg:x="1172" fg:w="37"/><text x="4.9729%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (5 samples, 0.02%)</title><rect x="4.8519%" y="85" width="0.0201%" height="15" fill="rgb(209,103,24)" fg:x="1204" fg:w="5"/><text x="5.1019%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="4.8519%" y="69" width="0.0201%" height="15" fill="rgb(229,88,8)" fg:x="1204" fg:w="5"/><text x="5.1019%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (29 samples, 0.12%)</title><rect x="4.8721%" y="101" width="0.1169%" height="15" fill="rgb(213,181,19)" fg:x="1209" fg:w="29"/><text x="5.1221%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (29 samples, 0.12%)</title><rect x="4.8721%" y="85" width="0.1169%" height="15" fill="rgb(254,191,54)" fg:x="1209" fg:w="29"/><text x="5.1221%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (208 samples, 0.84%)</title><rect x="5.0373%" y="69" width="0.8382%" height="15" fill="rgb(241,83,37)" fg:x="1250" fg:w="208"/><text x="5.2873%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (62 samples, 0.25%)</title><rect x="5.8755%" y="69" width="0.2498%" height="15" fill="rgb(233,36,39)" fg:x="1458" fg:w="62"/><text x="6.1255%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.24%)</title><rect x="5.8835%" y="53" width="0.2418%" height="15" fill="rgb(226,3,54)" fg:x="1460" fg:w="60"/><text x="6.1335%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (310 samples, 1.25%)</title><rect x="5.0212%" y="85" width="1.2492%" height="15" fill="rgb(245,192,40)" fg:x="1246" fg:w="310"/><text x="5.2712%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (36 samples, 0.15%)</title><rect x="6.1253%" y="69" width="0.1451%" height="15" fill="rgb(238,167,29)" fg:x="1520" fg:w="36"/><text x="6.3753%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.15%)</title><rect x="6.1253%" y="53" width="0.1451%" height="15" fill="rgb(232,182,51)" fg:x="1520" fg:w="36"/><text x="6.3753%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (23 samples, 0.09%)</title><rect x="6.2704%" y="85" width="0.0927%" height="15" fill="rgb(231,60,39)" fg:x="1556" fg:w="23"/><text x="6.5204%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (23 samples, 0.09%)</title><rect x="6.2704%" y="69" width="0.0927%" height="15" fill="rgb(208,69,12)" fg:x="1556" fg:w="23"/><text x="6.5204%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (409 samples, 1.65%)</title><rect x="4.7189%" y="117" width="1.6482%" height="15" fill="rgb(235,93,37)" fg:x="1171" fg:w="409"/><text x="4.9689%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (339 samples, 1.37%)</title><rect x="5.0010%" y="101" width="1.3661%" height="15" fill="rgb(213,116,39)" fg:x="1241" fg:w="339"/><text x="5.2510%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (410 samples, 1.65%)</title><rect x="4.7189%" y="149" width="1.6522%" height="15" fill="rgb(222,207,29)" fg:x="1171" fg:w="410"/><text x="4.9689%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (410 samples, 1.65%)</title><rect x="4.7189%" y="133" width="1.6522%" height="15" fill="rgb(206,96,30)" fg:x="1171" fg:w="410"/><text x="4.9689%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (89 samples, 0.36%)</title><rect x="6.4114%" y="117" width="0.3587%" height="15" fill="rgb(218,138,4)" fg:x="1591" fg:w="89"/><text x="6.6614%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (104 samples, 0.42%)</title><rect x="6.3711%" y="149" width="0.4191%" height="15" fill="rgb(250,191,14)" fg:x="1581" fg:w="104"/><text x="6.6211%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (102 samples, 0.41%)</title><rect x="6.3792%" y="133" width="0.4110%" height="15" fill="rgb(239,60,40)" fg:x="1583" fg:w="102"/><text x="6.6292%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (5 samples, 0.02%)</title><rect x="6.7701%" y="117" width="0.0201%" height="15" fill="rgb(206,27,48)" fg:x="1680" fg:w="5"/><text x="7.0201%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="6.7701%" y="101" width="0.0201%" height="15" fill="rgb(225,35,8)" fg:x="1680" fg:w="5"/><text x="7.0201%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="6.7701%" y="85" width="0.0201%" height="15" fill="rgb(250,213,24)" fg:x="1680" fg:w="5"/><text x="7.0201%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (5 samples, 0.02%)</title><rect x="6.7701%" y="69" width="0.0201%" height="15" fill="rgb(247,123,22)" fg:x="1680" fg:w="5"/><text x="7.0201%" y="79.50"></text></g><g><title>dyld`start (1,703 samples, 6.86%)</title><rect x="0.0000%" y="389" width="6.8628%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (1,703 samples, 6.86%)</title><rect x="0.0000%" y="373" width="6.8628%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="383.50">rust_qecp..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,703 samples, 6.86%)</title><rect x="0.0000%" y="357" width="6.8628%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="367.50">rust_qecp..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,703 samples, 6.86%)</title><rect x="0.0000%" y="341" width="6.8628%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="351.50">rust_qecp..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,703 samples, 6.86%)</title><rect x="0.0000%" y="325" width="6.8628%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="335.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::main (1,703 samples, 6.86%)</title><rect x="0.0000%" y="309" width="6.8628%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="319.50">rust_qecp..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,703 samples, 6.86%)</title><rect x="0.0000%" y="293" width="6.8628%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="303.50">rust_qecp..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,703 samples, 6.86%)</title><rect x="0.0000%" y="277" width="6.8628%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="287.50">rust_qecp..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,703 samples, 6.86%)</title><rect x="0.0000%" y="261" width="6.8628%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="271.50">rust_qecp..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,703 samples, 6.86%)</title><rect x="0.0000%" y="245" width="6.8628%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="255.50">rust_qecp..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,703 samples, 6.86%)</title><rect x="0.0000%" y="229" width="6.8628%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="239.50">rust_qecp..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,703 samples, 6.86%)</title><rect x="0.0000%" y="213" width="6.8628%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="223.50">rust_qecp..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,703 samples, 6.86%)</title><rect x="0.0000%" y="197" width="6.8628%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="207.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,702 samples, 6.86%)</title><rect x="0.0040%" y="181" width="6.8588%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="1702"/><text x="0.2540%" y="191.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,699 samples, 6.85%)</title><rect x="0.0161%" y="165" width="6.8467%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="1699"/><text x="0.2661%" y="175.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::set_individual_error_with_perfect_initialization_with_erasure (18 samples, 0.07%)</title><rect x="6.7902%" y="149" width="0.0725%" height="15" fill="rgb(246,177,23)" fg:x="1685" fg:w="18"/><text x="7.0402%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (449 samples, 1.81%)</title><rect x="6.8789%" y="245" width="1.8094%" height="15" fill="rgb(230,62,27)" fg:x="1707" fg:w="449"/><text x="7.1289%" y="255.50">l..</text></g><g><title>libsystem_kernel.dylib`madvise (447 samples, 1.80%)</title><rect x="6.8870%" y="229" width="1.8013%" height="15" fill="rgb(216,154,8)" fg:x="1709" fg:w="447"/><text x="7.1370%" y="239.50">l..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (8 samples, 0.03%)</title><rect x="8.6923%" y="245" width="0.0322%" height="15" fill="rgb(244,35,45)" fg:x="2157" fg:w="8"/><text x="8.9423%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,977 samples, 7.97%)</title><rect x="8.7608%" y="213" width="7.9670%" height="15" fill="rgb(251,115,12)" fg:x="2174" fg:w="1977"/><text x="9.0108%" y="223.50">libsystem_k..</text></g><g><title>libsystem_malloc.dylib`free_medium (1,989 samples, 8.02%)</title><rect x="8.7326%" y="229" width="8.0153%" height="15" fill="rgb(240,54,50)" fg:x="2167" fg:w="1989"/><text x="8.9826%" y="239.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (3 samples, 0.01%)</title><rect x="16.7358%" y="213" width="0.0121%" height="15" fill="rgb(233,84,52)" fg:x="4153" fg:w="3"/><text x="16.9858%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="16.7358%" y="197" width="0.0121%" height="15" fill="rgb(207,117,47)" fg:x="4153" fg:w="3"/><text x="16.9858%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (14 samples, 0.06%)</title><rect x="16.7479%" y="229" width="0.0564%" height="15" fill="rgb(249,43,39)" fg:x="4156" fg:w="14"/><text x="16.9979%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.06%)</title><rect x="16.7479%" y="213" width="0.0564%" height="15" fill="rgb(209,38,44)" fg:x="4156" fg:w="14"/><text x="16.9979%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (2,468 samples, 9.95%)</title><rect x="6.8668%" y="309" width="9.9456%" height="15" fill="rgb(236,212,23)" fg:x="1704" fg:w="2468"/><text x="7.1168%" y="319.50">rust_qecp`core..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (2,468 samples, 9.95%)</title><rect x="6.8668%" y="293" width="9.9456%" height="15" fill="rgb(242,79,21)" fg:x="1704" fg:w="2468"/><text x="7.1168%" y="303.50">rust_qecp`core..</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,468 samples, 9.95%)</title><rect x="6.8668%" y="277" width="9.9456%" height="15" fill="rgb(211,96,35)" fg:x="1704" fg:w="2468"/><text x="7.1168%" y="287.50">rust_qecp`&lt;all..</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,467 samples, 9.94%)</title><rect x="6.8708%" y="261" width="9.9416%" height="15" fill="rgb(253,215,40)" fg:x="1705" fg:w="2467"/><text x="7.1208%" y="271.50">rust_qecp`&lt;all..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (2,007 samples, 8.09%)</title><rect x="8.7246%" y="245" width="8.0879%" height="15" fill="rgb(211,81,21)" fg:x="2165" fg:w="2007"/><text x="8.9746%" y="255.50">rust_qecp`c..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (4 samples, 0.02%)</title><rect x="16.8124%" y="309" width="0.0161%" height="15" fill="rgb(208,190,38)" fg:x="4172" fg:w="4"/><text x="17.0624%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.02%)</title><rect x="16.8124%" y="293" width="0.0161%" height="15" fill="rgb(235,213,38)" fg:x="4172" fg:w="4"/><text x="17.0624%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="16.8124%" y="277" width="0.0161%" height="15" fill="rgb(237,122,38)" fg:x="4172" fg:w="4"/><text x="17.0624%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,315 samples, 9.33%)</title><rect x="16.8285%" y="309" width="9.3290%" height="15" fill="rgb(244,218,35)" fg:x="4176" fg:w="2315"/><text x="17.0785%" y="319.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (638 samples, 2.57%)</title><rect x="26.1576%" y="309" width="2.5710%" height="15" fill="rgb(240,68,47)" fg:x="6491" fg:w="638"/><text x="26.4076%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (129 samples, 0.52%)</title><rect x="28.2087%" y="293" width="0.5198%" height="15" fill="rgb(210,16,53)" fg:x="7000" fg:w="129"/><text x="28.4587%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,653 samples, 30.84%)</title><rect x="28.7286%" y="309" width="30.8402%" height="15" fill="rgb(235,124,12)" fg:x="7129" fg:w="7653"/><text x="28.9786%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::gener..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (93 samples, 0.37%)</title><rect x="59.5728%" y="293" width="0.3748%" height="15" fill="rgb(224,169,11)" fg:x="14783" fg:w="93"/><text x="59.8228%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (505 samples, 2.04%)</title><rect x="59.5688%" y="309" width="2.0351%" height="15" fill="rgb(250,166,2)" fg:x="14782" fg:w="505"/><text x="59.8188%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (411 samples, 1.66%)</title><rect x="59.9476%" y="293" width="1.6563%" height="15" fill="rgb(242,216,29)" fg:x="14876" fg:w="411"/><text x="60.1976%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (5 samples, 0.02%)</title><rect x="61.6039%" y="309" width="0.0201%" height="15" fill="rgb(230,116,27)" fg:x="15287" fg:w="5"/><text x="61.8539%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (9,009 samples, 36.30%)</title><rect x="61.6240%" y="309" width="36.3047%" height="15" fill="rgb(228,99,48)" fg:x="15292" fg:w="9009"/><text x="61.8740%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (6,211 samples, 25.03%)</title><rect x="72.8995%" y="293" width="25.0292%" height="15" fill="rgb(253,11,6)" fg:x="18090" fg:w="6211"/><text x="73.1495%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMo..</text></g><g><title>libsystem_pthread.dylib`thread_start (22,678 samples, 91.39%)</title><rect x="6.8668%" y="389" width="91.3883%" height="15" fill="rgb(247,143,39)" fg:x="1704" fg:w="22678"/><text x="7.1168%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (22,678 samples, 91.39%)</title><rect x="6.8668%" y="373" width="91.3883%" height="15" fill="rgb(236,97,10)" fg:x="1704" fg:w="22678"/><text x="7.1168%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (22,678 samples, 91.39%)</title><rect x="6.8668%" y="357" width="91.3883%" height="15" fill="rgb(233,208,19)" fg:x="1704" fg:w="22678"/><text x="7.1168%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (22,678 samples, 91.39%)</title><rect x="6.8668%" y="341" width="91.3883%" height="15" fill="rgb(216,164,2)" fg:x="1704" fg:w="22678"/><text x="7.1168%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (22,678 samples, 91.39%)</title><rect x="6.8668%" y="325" width="91.3883%" height="15" fill="rgb(220,129,5)" fg:x="1704" fg:w="22678"/><text x="7.1168%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (81 samples, 0.33%)</title><rect x="97.9287%" y="309" width="0.3264%" height="15" fill="rgb(242,17,10)" fg:x="24301" fg:w="81"/><text x="98.1787%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3 samples, 0.01%)</title><rect x="98.2551%" y="389" width="0.0121%" height="15" fill="rgb(242,107,0)" fg:x="24382" fg:w="3"/><text x="98.5051%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (274 samples, 1.10%)</title><rect x="98.6379%" y="341" width="1.1042%" height="15" fill="rgb(251,28,31)" fg:x="24477" fg:w="274"/><text x="98.8879%" y="351.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="99.7421%" y="341" width="0.0161%" height="15" fill="rgb(233,223,10)" fg:x="24751" fg:w="4"/><text x="99.9921%" y="351.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (57 samples, 0.23%)</title><rect x="99.7582%" y="341" width="0.2297%" height="15" fill="rgb(215,21,27)" fg:x="24755" fg:w="57"/><text x="100.0082%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.06%)</title><rect x="99.9275%" y="325" width="0.0604%" height="15" fill="rgb(232,23,21)" fg:x="24797" fg:w="15"/><text x="100.1775%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.06%)</title><rect x="99.9275%" y="309" width="0.0604%" height="15" fill="rgb(244,5,23)" fg:x="24797" fg:w="15"/><text x="100.1775%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (14 samples, 0.06%)</title><rect x="99.9315%" y="293" width="0.0564%" height="15" fill="rgb(226,81,46)" fg:x="24798" fg:w="14"/><text x="100.1815%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (3 samples, 0.01%)</title><rect x="99.9758%" y="277" width="0.0121%" height="15" fill="rgb(247,70,30)" fg:x="24809" fg:w="3"/><text x="100.2258%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 0.01%)</title><rect x="99.9758%" y="261" width="0.0121%" height="15" fill="rgb(212,68,19)" fg:x="24809" fg:w="3"/><text x="100.2258%" y="271.50"></text></g><g><title>all (24,815 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="24815"/><text x="0.2500%" y="415.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (430 samples, 1.73%)</title><rect x="98.2672%" y="389" width="1.7328%" height="15" fill="rgb(223,113,26)" fg:x="24385" fg:w="430"/><text x="98.5172%" y="399.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (430 samples, 1.73%)</title><rect x="98.2672%" y="373" width="1.7328%" height="15" fill="rgb(206,192,2)" fg:x="24385" fg:w="430"/><text x="98.5172%" y="383.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (430 samples, 1.73%)</title><rect x="98.2672%" y="357" width="1.7328%" height="15" fill="rgb(241,108,4)" fg:x="24385" fg:w="430"/><text x="98.5172%" y="367.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (3 samples, 0.01%)</title><rect x="99.9879%" y="341" width="0.0121%" height="15" fill="rgb(247,173,49)" fg:x="24812" fg:w="3"/><text x="100.2379%" y="351.50"></text></g></svg></svg>