<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="68842"><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="0.0291%" y="133" width="0.0174%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="12"/><text x="0.2791%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.05%)</title><rect x="0.0160%" y="149" width="0.0450%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="31"/><text x="0.2660%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (39 samples, 0.06%)</title><rect x="0.0784%" y="53" width="0.0567%" height="15" fill="rgb(221,193,54)" fg:x="54" fg:w="39"/><text x="0.3284%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (11 samples, 0.02%)</title><rect x="0.1351%" y="53" width="0.0160%" height="15" fill="rgb(248,212,6)" fg:x="93" fg:w="11"/><text x="0.3851%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="0.1351%" y="37" width="0.0160%" height="15" fill="rgb(208,68,35)" fg:x="93" fg:w="11"/><text x="0.3851%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (58 samples, 0.08%)</title><rect x="0.0784%" y="69" width="0.0843%" height="15" fill="rgb(232,128,0)" fg:x="54" fg:w="58"/><text x="0.3284%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="0.1511%" y="53" width="0.0116%" height="15" fill="rgb(207,160,47)" fg:x="104" fg:w="8"/><text x="0.4011%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.1511%" y="37" width="0.0116%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="8"/><text x="0.4011%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (13 samples, 0.02%)</title><rect x="0.1627%" y="69" width="0.0189%" height="15" fill="rgb(218,30,26)" fg:x="112" fg:w="13"/><text x="0.4127%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.02%)</title><rect x="0.1627%" y="53" width="0.0189%" height="15" fill="rgb(220,122,19)" fg:x="112" fg:w="13"/><text x="0.4127%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.08%)</title><rect x="0.1816%" y="69" width="0.0799%" height="15" fill="rgb(250,228,42)" fg:x="125" fg:w="55"/><text x="0.4316%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (133 samples, 0.19%)</title><rect x="0.0712%" y="149" width="0.1932%" height="15" fill="rgb(240,193,28)" fg:x="49" fg:w="133"/><text x="0.3212%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (133 samples, 0.19%)</title><rect x="0.0712%" y="133" width="0.1932%" height="15" fill="rgb(216,20,37)" fg:x="49" fg:w="133"/><text x="0.3212%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.19%)</title><rect x="0.0712%" y="117" width="0.1932%" height="15" fill="rgb(206,188,39)" fg:x="49" fg:w="133"/><text x="0.3212%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.19%)</title><rect x="0.0712%" y="101" width="0.1932%" height="15" fill="rgb(217,207,13)" fg:x="49" fg:w="133"/><text x="0.3212%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (129 samples, 0.19%)</title><rect x="0.0770%" y="85" width="0.1874%" height="15" fill="rgb(231,73,38)" fg:x="53" fg:w="129"/><text x="0.3270%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="0.2673%" y="69" width="0.0189%" height="15" fill="rgb(225,20,46)" fg:x="184" fg:w="13"/><text x="0.5173%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (17 samples, 0.02%)</title><rect x="0.2673%" y="85" width="0.0247%" height="15" fill="rgb(210,31,41)" fg:x="184" fg:w="17"/><text x="0.5173%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (32 samples, 0.05%)</title><rect x="0.2644%" y="149" width="0.0465%" height="15" fill="rgb(221,200,47)" fg:x="182" fg:w="32"/><text x="0.5144%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.2644%" y="133" width="0.0465%" height="15" fill="rgb(226,26,5)" fg:x="182" fg:w="32"/><text x="0.5144%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.2644%" y="117" width="0.0465%" height="15" fill="rgb(249,33,26)" fg:x="182" fg:w="32"/><text x="0.5144%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (31 samples, 0.05%)</title><rect x="0.2658%" y="101" width="0.0450%" height="15" fill="rgb(235,183,28)" fg:x="183" fg:w="31"/><text x="0.5158%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;[rust_qecp::ftqec::Edge]&gt; (8 samples, 0.01%)</title><rect x="0.2992%" y="85" width="0.0116%" height="15" fill="rgb(221,5,38)" fg:x="206" fg:w="8"/><text x="0.5492%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (478 samples, 0.69%)</title><rect x="0.3109%" y="149" width="0.6943%" height="15" fill="rgb(247,18,42)" fg:x="214" fg:w="478"/><text x="0.5609%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (206 samples, 0.30%)</title><rect x="1.0052%" y="149" width="0.2992%" height="15" fill="rgb(241,131,45)" fg:x="692" fg:w="206"/><text x="1.2552%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.01%)</title><rect x="1.3044%" y="149" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="898" fg:w="9"/><text x="1.5544%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (98 samples, 0.14%)</title><rect x="5.8801%" y="133" width="0.1424%" height="15" fill="rgb(225,111,53)" fg:x="4048" fg:w="98"/><text x="6.1301%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.10%)</title><rect x="6.0225%" y="133" width="0.1031%" height="15" fill="rgb(238,160,17)" fg:x="4146" fg:w="71"/><text x="6.2725%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (62 samples, 0.09%)</title><rect x="6.1256%" y="133" width="0.0901%" height="15" fill="rgb(214,148,48)" fg:x="4217" fg:w="62"/><text x="6.3756%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (438 samples, 0.64%)</title><rect x="6.2157%" y="133" width="0.6362%" height="15" fill="rgb(232,36,49)" fg:x="4279" fg:w="438"/><text x="6.4657%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="6.8519%" y="85" width="0.0102%" height="15" fill="rgb(209,103,24)" fg:x="4717" fg:w="7"/><text x="7.1019%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="6.8519%" y="133" width="0.0116%" height="15" fill="rgb(229,88,8)" fg:x="4717" fg:w="8"/><text x="7.1019%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="6.8519%" y="117" width="0.0116%" height="15" fill="rgb(213,181,19)" fg:x="4717" fg:w="8"/><text x="7.1019%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="6.8519%" y="101" width="0.0116%" height="15" fill="rgb(254,191,54)" fg:x="4717" fg:w="8"/><text x="7.1019%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (75 samples, 0.11%)</title><rect x="7.4489%" y="117" width="0.1089%" height="15" fill="rgb(241,83,37)" fg:x="5128" fg:w="75"/><text x="7.6989%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (649 samples, 0.94%)</title><rect x="6.8635%" y="133" width="0.9427%" height="15" fill="rgb(233,36,39)" fg:x="4725" fg:w="649"/><text x="7.1135%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (169 samples, 0.25%)</title><rect x="7.5608%" y="117" width="0.2455%" height="15" fill="rgb(226,3,54)" fg:x="5205" fg:w="169"/><text x="7.8108%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (145 samples, 0.21%)</title><rect x="7.5957%" y="101" width="0.2106%" height="15" fill="rgb(245,192,40)" fg:x="5229" fg:w="145"/><text x="7.8457%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="7.8092%" y="133" width="0.0131%" height="15" fill="rgb(238,167,29)" fg:x="5376" fg:w="9"/><text x="8.0592%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (16 samples, 0.02%)</title><rect x="7.8223%" y="133" width="0.0232%" height="15" fill="rgb(232,182,51)" fg:x="5385" fg:w="16"/><text x="8.0723%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (166 samples, 0.24%)</title><rect x="10.4936%" y="117" width="0.2411%" height="15" fill="rgb(231,60,39)" fg:x="7224" fg:w="166"/><text x="10.7436%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (468 samples, 0.68%)</title><rect x="10.7434%" y="117" width="0.6798%" height="15" fill="rgb(208,69,12)" fg:x="7396" fg:w="468"/><text x="10.9934%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (20 samples, 0.03%)</title><rect x="11.4741%" y="101" width="0.0291%" height="15" fill="rgb(235,93,37)" fg:x="7899" fg:w="20"/><text x="11.7241%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,573 samples, 3.74%)</title><rect x="7.8455%" y="133" width="3.7375%" height="15" fill="rgb(213,116,39)" fg:x="5401" fg:w="2573"/><text x="8.0955%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (110 samples, 0.16%)</title><rect x="11.4233%" y="117" width="0.1598%" height="15" fill="rgb(222,207,29)" fg:x="7864" fg:w="110"/><text x="11.6733%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (55 samples, 0.08%)</title><rect x="11.5032%" y="101" width="0.0799%" height="15" fill="rgb(206,96,30)" fg:x="7919" fg:w="55"/><text x="11.7532%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,064 samples, 10.26%)</title><rect x="1.3233%" y="149" width="10.2612%" height="15" fill="rgb(218,138,4)" fg:x="911" fg:w="7064"/><text x="1.5733%" y="159.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.20%)</title><rect x="11.6106%" y="133" width="0.1990%" height="15" fill="rgb(250,191,14)" fg:x="7993" fg:w="137"/><text x="11.8606%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="12.1612%" y="117" width="0.0102%" height="15" fill="rgb(239,60,40)" fg:x="8372" fg:w="7"/><text x="12.4112%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="12.1801%" y="117" width="0.0305%" height="15" fill="rgb(206,27,48)" fg:x="8385" fg:w="21"/><text x="12.4301%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="12.2367%" y="53" width="0.0276%" height="15" fill="rgb(225,35,8)" fg:x="8424" fg:w="19"/><text x="12.4867%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="12.2541%" y="37" width="0.0102%" height="15" fill="rgb(250,213,24)" fg:x="8436" fg:w="7"/><text x="12.5041%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="12.2265%" y="85" width="0.0392%" height="15" fill="rgb(247,123,22)" fg:x="8417" fg:w="27"/><text x="12.4765%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.03%)</title><rect x="12.2338%" y="69" width="0.0320%" height="15" fill="rgb(231,138,38)" fg:x="8422" fg:w="22"/><text x="12.4838%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (41 samples, 0.06%)</title><rect x="12.2106%" y="117" width="0.0596%" height="15" fill="rgb(231,145,46)" fg:x="8406" fg:w="41"/><text x="12.4606%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="12.2222%" y="101" width="0.0479%" height="15" fill="rgb(251,118,11)" fg:x="8414" fg:w="33"/><text x="12.4722%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="12.2832%" y="117" width="0.0160%" height="15" fill="rgb(217,147,25)" fg:x="8456" fg:w="11"/><text x="12.5332%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="12.2890%" y="101" width="0.0102%" height="15" fill="rgb(247,81,37)" fg:x="8460" fg:w="7"/><text x="12.5390%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (17 samples, 0.02%)</title><rect x="12.2992%" y="117" width="0.0247%" height="15" fill="rgb(209,12,38)" fg:x="8467" fg:w="17"/><text x="12.5492%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (542 samples, 0.79%)</title><rect x="11.8314%" y="133" width="0.7873%" height="15" fill="rgb(227,1,9)" fg:x="8145" fg:w="542"/><text x="12.0814%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (203 samples, 0.29%)</title><rect x="12.3239%" y="117" width="0.2949%" height="15" fill="rgb(248,47,43)" fg:x="8484" fg:w="203"/><text x="12.5739%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (723 samples, 1.05%)</title><rect x="11.5845%" y="149" width="1.0502%" height="15" fill="rgb(221,10,30)" fg:x="7975" fg:w="723"/><text x="11.8345%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="12.6434%" y="149" width="0.0334%" height="15" fill="rgb(210,229,1)" fg:x="8704" fg:w="23"/><text x="12.8934%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (16 samples, 0.02%)</title><rect x="12.6536%" y="133" width="0.0232%" height="15" fill="rgb(222,148,37)" fg:x="8711" fg:w="16"/><text x="12.9036%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="12.6667%" y="117" width="0.0102%" height="15" fill="rgb(234,67,33)" fg:x="8720" fg:w="7"/><text x="12.9167%" y="127.50"></text></g><g><title>dyld`start (8,728 samples, 12.68%)</title><rect x="0.0000%" y="389" width="12.6783%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="8728"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (8,726 samples, 12.68%)</title><rect x="0.0029%" y="373" width="12.6754%" height="15" fill="rgb(247,138,52)" fg:x="2" fg:w="8726"/><text x="0.2529%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,726 samples, 12.68%)</title><rect x="0.0029%" y="357" width="12.6754%" height="15" fill="rgb(213,79,30)" fg:x="2" fg:w="8726"/><text x="0.2529%" y="367.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,726 samples, 12.68%)</title><rect x="0.0029%" y="341" width="12.6754%" height="15" fill="rgb(246,177,23)" fg:x="2" fg:w="8726"/><text x="0.2529%" y="351.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,726 samples, 12.68%)</title><rect x="0.0029%" y="325" width="12.6754%" height="15" fill="rgb(230,62,27)" fg:x="2" fg:w="8726"/><text x="0.2529%" y="335.50">rust_qecp`std::sys_..</text></g><g><title>rust_qecp`rust_qecp::main (8,726 samples, 12.68%)</title><rect x="0.0029%" y="309" width="12.6754%" height="15" fill="rgb(216,154,8)" fg:x="2" fg:w="8726"/><text x="0.2529%" y="319.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (8,725 samples, 12.67%)</title><rect x="0.0044%" y="293" width="12.6739%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="303.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (8,725 samples, 12.67%)</title><rect x="0.0044%" y="277" width="12.6739%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="287.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (8,725 samples, 12.67%)</title><rect x="0.0044%" y="261" width="12.6739%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="271.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,725 samples, 12.67%)</title><rect x="0.0044%" y="245" width="12.6739%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="255.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,725 samples, 12.67%)</title><rect x="0.0044%" y="229" width="12.6739%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="239.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,725 samples, 12.67%)</title><rect x="0.0044%" y="213" width="12.6739%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="223.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,725 samples, 12.67%)</title><rect x="0.0044%" y="197" width="12.6739%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="207.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,725 samples, 12.67%)</title><rect x="0.0044%" y="181" width="12.6739%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="191.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,725 samples, 12.67%)</title><rect x="0.0044%" y="165" width="12.6739%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="8725"/><text x="0.2544%" y="175.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (9 samples, 0.01%)</title><rect x="12.6957%" y="309" width="0.0131%" height="15" fill="rgb(211,96,35)" fg:x="8740" fg:w="9"/><text x="12.9457%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (9 samples, 0.01%)</title><rect x="12.6957%" y="293" width="0.0131%" height="15" fill="rgb(253,215,40)" fg:x="8740" fg:w="9"/><text x="12.9457%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="12.6957%" y="277" width="0.0131%" height="15" fill="rgb(211,81,21)" fg:x="8740" fg:w="9"/><text x="12.9457%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="12.6957%" y="261" width="0.0131%" height="15" fill="rgb(208,190,38)" fg:x="8740" fg:w="9"/><text x="12.9457%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (8 samples, 0.01%)</title><rect x="12.6972%" y="245" width="0.0116%" height="15" fill="rgb(235,213,38)" fg:x="8741" fg:w="8"/><text x="12.9472%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="12.7262%" y="293" width="0.0174%" height="15" fill="rgb(237,122,38)" fg:x="8761" fg:w="12"/><text x="12.9762%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="12.7480%" y="293" width="0.0116%" height="15" fill="rgb(244,218,35)" fg:x="8776" fg:w="8"/><text x="12.9980%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (17 samples, 0.02%)</title><rect x="12.7597%" y="293" width="0.0247%" height="15" fill="rgb(240,68,47)" fg:x="8784" fg:w="17"/><text x="13.0097%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.01%)</title><rect x="28.2952%" y="277" width="0.0145%" height="15" fill="rgb(210,16,53)" fg:x="19479" fg:w="10"/><text x="28.5452%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="28.3098%" y="277" width="0.0102%" height="15" fill="rgb(235,124,12)" fg:x="19489" fg:w="7"/><text x="28.5598%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.05%)</title><rect x="28.3228%" y="277" width="0.0537%" height="15" fill="rgb(224,169,11)" fg:x="19498" fg:w="37"/><text x="28.5728%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="28.3606%" y="261" width="0.0160%" height="15" fill="rgb(250,166,2)" fg:x="19524" fg:w="11"/><text x="28.6106%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="28.3766%" y="277" width="0.0102%" height="15" fill="rgb(242,216,29)" fg:x="19535" fg:w="7"/><text x="28.6266%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.03%)</title><rect x="28.3882%" y="277" width="0.0334%" height="15" fill="rgb(230,116,27)" fg:x="19543" fg:w="23"/><text x="28.6382%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="28.4376%" y="229" width="0.0131%" height="15" fill="rgb(228,99,48)" fg:x="19577" fg:w="9"/><text x="28.6876%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="28.4318%" y="277" width="0.0276%" height="15" fill="rgb(253,11,6)" fg:x="19573" fg:w="19"/><text x="28.6818%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="28.4332%" y="261" width="0.0261%" height="15" fill="rgb(247,143,39)" fg:x="19574" fg:w="18"/><text x="28.6832%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.02%)</title><rect x="28.4361%" y="245" width="0.0232%" height="15" fill="rgb(236,97,10)" fg:x="19576" fg:w="16"/><text x="28.6861%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="28.4768%" y="197" width="0.0116%" height="15" fill="rgb(233,208,19)" fg:x="19604" fg:w="8"/><text x="28.7268%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="28.4783%" y="181" width="0.0102%" height="15" fill="rgb(216,164,2)" fg:x="19605" fg:w="7"/><text x="28.7283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="28.5044%" y="197" width="0.0116%" height="15" fill="rgb(220,129,5)" fg:x="19623" fg:w="8"/><text x="28.7544%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (28 samples, 0.04%)</title><rect x="28.4768%" y="213" width="0.0407%" height="15" fill="rgb(242,17,10)" fg:x="19604" fg:w="28"/><text x="28.7268%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (76 samples, 0.11%)</title><rect x="28.4681%" y="229" width="0.1104%" height="15" fill="rgb(242,107,0)" fg:x="19598" fg:w="76"/><text x="28.7181%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.06%)</title><rect x="28.5175%" y="213" width="0.0610%" height="15" fill="rgb(251,28,31)" fg:x="19632" fg:w="42"/><text x="28.7675%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (82 samples, 0.12%)</title><rect x="28.4666%" y="245" width="0.1191%" height="15" fill="rgb(233,223,10)" fg:x="19597" fg:w="82"/><text x="28.7166%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (88 samples, 0.13%)</title><rect x="28.4594%" y="277" width="0.1278%" height="15" fill="rgb(215,21,27)" fg:x="19592" fg:w="88"/><text x="28.7094%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.12%)</title><rect x="28.4623%" y="261" width="0.1249%" height="15" fill="rgb(232,23,21)" fg:x="19594" fg:w="86"/><text x="28.7123%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (264 samples, 0.38%)</title><rect x="30.1284%" y="245" width="0.3835%" height="15" fill="rgb(244,5,23)" fg:x="20741" fg:w="264"/><text x="30.3784%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (266 samples, 0.39%)</title><rect x="30.1270%" y="261" width="0.3864%" height="15" fill="rgb(226,81,46)" fg:x="20740" fg:w="266"/><text x="30.3770%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (431 samples, 0.63%)</title><rect x="30.5148%" y="261" width="0.6261%" height="15" fill="rgb(247,70,30)" fg:x="21007" fg:w="431"/><text x="30.7648%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (17 samples, 0.02%)</title><rect x="31.3065%" y="245" width="0.0247%" height="15" fill="rgb(212,68,19)" fg:x="21552" fg:w="17"/><text x="31.5565%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (1,289 samples, 1.87%)</title><rect x="31.3370%" y="245" width="1.8724%" height="15" fill="rgb(240,187,13)" fg:x="21573" fg:w="1289"/><text x="31.5870%" y="255.50">r..</text></g><g><title>rust_qecp`PerfectMatching::Finish (12 samples, 0.02%)</title><rect x="33.2094%" y="245" width="0.0174%" height="15" fill="rgb(223,113,26)" fg:x="22862" fg:w="12"/><text x="33.4594%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (186 samples, 0.27%)</title><rect x="33.2399%" y="245" width="0.2702%" height="15" fill="rgb(206,192,2)" fg:x="22883" fg:w="186"/><text x="33.4899%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (200 samples, 0.29%)</title><rect x="33.6379%" y="229" width="0.2905%" height="15" fill="rgb(241,108,4)" fg:x="23157" fg:w="200"/><text x="33.8879%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (59 samples, 0.09%)</title><rect x="33.9284%" y="229" width="0.0857%" height="15" fill="rgb(247,173,49)" fg:x="23357" fg:w="59"/><text x="34.1784%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (59 samples, 0.09%)</title><rect x="33.9284%" y="213" width="0.0857%" height="15" fill="rgb(224,114,35)" fg:x="23357" fg:w="59"/><text x="34.1784%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (503 samples, 0.73%)</title><rect x="34.0141%" y="229" width="0.7307%" height="15" fill="rgb(245,159,27)" fg:x="23416" fg:w="503"/><text x="34.2641%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (33 samples, 0.05%)</title><rect x="35.9069%" y="181" width="0.0479%" height="15" fill="rgb(245,172,44)" fg:x="24719" fg:w="33"/><text x="36.1569%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (336 samples, 0.49%)</title><rect x="35.4682%" y="213" width="0.4881%" height="15" fill="rgb(236,23,11)" fg:x="24417" fg:w="336"/><text x="35.7182%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (34 samples, 0.05%)</title><rect x="35.9069%" y="197" width="0.0494%" height="15" fill="rgb(205,117,38)" fg:x="24719" fg:w="34"/><text x="36.1569%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (903 samples, 1.31%)</title><rect x="34.7462%" y="229" width="1.3117%" height="15" fill="rgb(237,72,25)" fg:x="23920" fg:w="903"/><text x="34.9962%" y="239.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (70 samples, 0.10%)</title><rect x="35.9562%" y="213" width="0.1017%" height="15" fill="rgb(244,70,9)" fg:x="24753" fg:w="70"/><text x="36.2062%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,550 samples, 3.70%)</title><rect x="36.2163%" y="213" width="3.7041%" height="15" fill="rgb(217,125,39)" fg:x="24932" fg:w="2550"/><text x="36.4663%" y="223.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,661 samples, 3.87%)</title><rect x="36.0579%" y="229" width="3.8654%" height="15" fill="rgb(235,36,10)" fg:x="24823" fg:w="2661"/><text x="36.3079%" y="239.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (268 samples, 0.39%)</title><rect x="39.9248%" y="229" width="0.3893%" height="15" fill="rgb(251,123,47)" fg:x="27485" fg:w="268"/><text x="40.1748%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (12 samples, 0.02%)</title><rect x="42.7021%" y="197" width="0.0174%" height="15" fill="rgb(221,13,13)" fg:x="29397" fg:w="12"/><text x="42.9521%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (17 samples, 0.02%)</title><rect x="42.7021%" y="213" width="0.0247%" height="15" fill="rgb(238,131,9)" fg:x="29397" fg:w="17"/><text x="42.9521%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (1,671 samples, 2.43%)</title><rect x="40.3141%" y="229" width="2.4273%" height="15" fill="rgb(211,50,8)" fg:x="27753" fg:w="1671"/><text x="40.5641%" y="239.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (10 samples, 0.01%)</title><rect x="42.7268%" y="213" width="0.0145%" height="15" fill="rgb(245,182,24)" fg:x="29414" fg:w="10"/><text x="42.9768%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (6,407 samples, 9.31%)</title><rect x="33.5159%" y="245" width="9.3068%" height="15" fill="rgb(242,14,37)" fg:x="23073" fg:w="6407"/><text x="33.7659%" y="255.50">rust_qecp`Per..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (56 samples, 0.08%)</title><rect x="42.7413%" y="229" width="0.0813%" height="15" fill="rgb(246,228,12)" fg:x="29424" fg:w="56"/><text x="42.9913%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (68 samples, 0.10%)</title><rect x="42.8241%" y="213" width="0.0988%" height="15" fill="rgb(213,55,15)" fg:x="29481" fg:w="68"/><text x="43.0741%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (69 samples, 0.10%)</title><rect x="42.8241%" y="229" width="0.1002%" height="15" fill="rgb(209,9,3)" fg:x="29481" fg:w="69"/><text x="43.0741%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (75 samples, 0.11%)</title><rect x="42.8227%" y="245" width="0.1089%" height="15" fill="rgb(230,59,30)" fg:x="29480" fg:w="75"/><text x="43.0727%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (9,931 samples, 14.43%)</title><rect x="28.5887%" y="277" width="14.4258%" height="15" fill="rgb(209,121,21)" fg:x="19681" fg:w="9931"/><text x="28.8387%" y="287.50">rust_qecp`rust_qecp::b..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (8,174 samples, 11.87%)</title><rect x="31.1409%" y="261" width="11.8736%" height="15" fill="rgb(220,109,13)" fg:x="21438" fg:w="8174"/><text x="31.3909%" y="271.50">rust_qecp`minimum_..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (57 samples, 0.08%)</title><rect x="42.9316%" y="245" width="0.0828%" height="15" fill="rgb(232,18,1)" fg:x="29555" fg:w="57"/><text x="43.1816%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="43.5534%" y="261" width="0.0160%" height="15" fill="rgb(215,41,42)" fg:x="29983" fg:w="11"/><text x="43.8034%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="43.5592%" y="245" width="0.0102%" height="15" fill="rgb(224,123,36)" fg:x="29987" fg:w="7"/><text x="43.8092%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (21,193 samples, 30.78%)</title><rect x="12.7887%" y="293" width="30.7850%" height="15" fill="rgb(240,125,3)" fg:x="8804" fg:w="21193"/><text x="13.0387%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (385 samples, 0.56%)</title><rect x="43.0144%" y="277" width="0.5593%" height="15" fill="rgb(205,98,50)" fg:x="29612" fg:w="385"/><text x="43.2644%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (21,355 samples, 31.02%)</title><rect x="12.7103%" y="309" width="31.0203%" height="15" fill="rgb(205,185,37)" fg:x="8750" fg:w="21355"/><text x="12.9603%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (108 samples, 0.16%)</title><rect x="43.5737%" y="293" width="0.1569%" height="15" fill="rgb(238,207,15)" fg:x="29997" fg:w="108"/><text x="43.8237%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (5,105 samples, 7.42%)</title><rect x="43.7306%" y="309" width="7.4155%" height="15" fill="rgb(213,199,42)" fg:x="30105" fg:w="5105"/><text x="43.9806%" y="319.50">rust_qecp`..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (666 samples, 0.97%)</title><rect x="51.1461%" y="309" width="0.9674%" height="15" fill="rgb(235,201,11)" fg:x="35210" fg:w="666"/><text x="51.3961%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (288 samples, 0.42%)</title><rect x="51.6952%" y="293" width="0.4183%" height="15" fill="rgb(207,46,11)" fg:x="35588" fg:w="288"/><text x="51.9452%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (17,623 samples, 25.60%)</title><rect x="52.1135%" y="309" width="25.5992%" height="15" fill="rgb(241,35,35)" fg:x="35876" fg:w="17623"/><text x="52.3635%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (236 samples, 0.34%)</title><rect x="77.7185%" y="293" width="0.3428%" height="15" fill="rgb(243,32,47)" fg:x="53503" fg:w="236"/><text x="77.9685%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,009 samples, 1.47%)</title><rect x="77.7127%" y="309" width="1.4657%" height="15" fill="rgb(247,202,23)" fg:x="53499" fg:w="1009"/><text x="77.9627%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (769 samples, 1.12%)</title><rect x="78.0614%" y="293" width="1.1171%" height="15" fill="rgb(219,102,11)" fg:x="53739" fg:w="769"/><text x="78.3114%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (14,165 samples, 20.58%)</title><rect x="79.1842%" y="309" width="20.5761%" height="15" fill="rgb(243,110,44)" fg:x="54512" fg:w="14165"/><text x="79.4342%" y="319.50">rust_qecp`rust_qecp::ftqec::Plan..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (9,951 samples, 14.45%)</title><rect x="85.3055%" y="293" width="14.4548%" height="15" fill="rgb(222,74,54)" fg:x="58726" fg:w="9951"/><text x="85.5555%" y="303.50">rust_qecp`rust_qecp::f..</text></g><g><title>all (68,842 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="68842"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,109 samples, 87.31%)</title><rect x="12.6856%" y="389" width="87.3144%" height="15" fill="rgb(226,22,26)" fg:x="8733" fg:w="60109"/><text x="12.9356%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,109 samples, 87.31%)</title><rect x="12.6856%" y="373" width="87.3144%" height="15" fill="rgb(217,163,10)" fg:x="8733" fg:w="60109"/><text x="12.9356%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,109 samples, 87.31%)</title><rect x="12.6856%" y="357" width="87.3144%" height="15" fill="rgb(213,25,53)" fg:x="8733" fg:w="60109"/><text x="12.9356%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,109 samples, 87.31%)</title><rect x="12.6856%" y="341" width="87.3144%" height="15" fill="rgb(252,105,26)" fg:x="8733" fg:w="60109"/><text x="12.9356%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,109 samples, 87.31%)</title><rect x="12.6856%" y="325" width="87.3144%" height="15" fill="rgb(220,39,43)" fg:x="8733" fg:w="60109"/><text x="12.9356%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (165 samples, 0.24%)</title><rect x="99.7603%" y="309" width="0.2397%" height="15" fill="rgb(229,68,48)" fg:x="68677" fg:w="165"/><text x="100.0103%" y="319.50"></text></g></svg></svg>