<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61067"><g><title>rust_qecp`core::fmt::Formatter::write_formatted_parts (7 samples, 0.01%)</title><rect x="0.0311%" y="85" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="19" fg:w="7"/><text x="0.2811%" y="95.50"></text></g><g><title>rust_qecp`core::fmt::float::float_to_decimal_common_shortest (11 samples, 0.02%)</title><rect x="0.0295%" y="101" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="11"/><text x="0.2795%" y="111.50"></text></g><g><title>rust_qecp`alloc::fmt::format (16 samples, 0.03%)</title><rect x="0.0295%" y="133" width="0.0262%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="16"/><text x="0.2795%" y="143.50"></text></g><g><title>rust_qecp`core::fmt::write (16 samples, 0.03%)</title><rect x="0.0295%" y="117" width="0.0262%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="16"/><text x="0.2795%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.02%)</title><rect x="0.0590%" y="133" width="0.0229%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="14"/><text x="0.3090%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (14 samples, 0.02%)</title><rect x="0.0590%" y="117" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="36" fg:w="14"/><text x="0.3090%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0590%" y="101" width="0.0229%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="14"/><text x="0.3090%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0590%" y="85" width="0.0229%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="14"/><text x="0.3090%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (13 samples, 0.02%)</title><rect x="0.0606%" y="69" width="0.0213%" height="15" fill="rgb(218,30,26)" fg:x="37" fg:w="13"/><text x="0.3106%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0704%" y="53" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="43" fg:w="7"/><text x="0.3204%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (7 samples, 0.01%)</title><rect x="0.0819%" y="133" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="50" fg:w="7"/><text x="0.3319%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0819%" y="117" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="50" fg:w="7"/><text x="0.3319%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0819%" y="101" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="50" fg:w="7"/><text x="0.3319%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (7 samples, 0.01%)</title><rect x="0.0819%" y="85" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="50" fg:w="7"/><text x="0.3319%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (60 samples, 0.10%)</title><rect x="0.0933%" y="133" width="0.0983%" height="15" fill="rgb(217,207,13)" fg:x="57" fg:w="60"/><text x="0.3433%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (32 samples, 0.05%)</title><rect x="0.1916%" y="133" width="0.0524%" height="15" fill="rgb(231,73,38)" fg:x="117" fg:w="32"/><text x="0.4416%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="0.6943%" y="117" width="0.0246%" height="15" fill="rgb(225,20,46)" fg:x="424" fg:w="15"/><text x="0.9443%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (293 samples, 0.48%)</title><rect x="0.2505%" y="133" width="0.4798%" height="15" fill="rgb(210,31,41)" fg:x="153" fg:w="293"/><text x="0.5005%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="0.7320%" y="117" width="0.0213%" height="15" fill="rgb(221,200,47)" fg:x="447" fg:w="13"/><text x="0.9820%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="0.8122%" y="69" width="0.0131%" height="15" fill="rgb(226,26,5)" fg:x="496" fg:w="8"/><text x="1.0622%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="0.8122%" y="53" width="0.0131%" height="15" fill="rgb(249,33,26)" fg:x="496" fg:w="8"/><text x="1.0622%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="0.8139%" y="37" width="0.0115%" height="15" fill="rgb(235,183,28)" fg:x="497" fg:w="7"/><text x="1.0639%" y="47.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="0.8089%" y="101" width="0.0180%" height="15" fill="rgb(221,5,38)" fg:x="494" fg:w="11"/><text x="1.0589%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="0.8122%" y="85" width="0.0147%" height="15" fill="rgb(247,18,42)" fg:x="496" fg:w="9"/><text x="1.0622%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (90 samples, 0.15%)</title><rect x="0.7565%" y="117" width="0.1474%" height="15" fill="rgb(241,131,45)" fg:x="462" fg:w="90"/><text x="1.0065%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (39 samples, 0.06%)</title><rect x="0.8401%" y="101" width="0.0639%" height="15" fill="rgb(249,31,29)" fg:x="513" fg:w="39"/><text x="1.0901%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (107 samples, 0.18%)</title><rect x="0.7303%" y="133" width="0.1752%" height="15" fill="rgb(225,111,53)" fg:x="446" fg:w="107"/><text x="0.9803%" y="143.50"></text></g><g><title>dyld`start (558 samples, 0.91%)</title><rect x="0.0000%" y="373" width="0.9138%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="558"/><text x="0.2500%" y="383.50"></text></g><g><title>rust_qecp`main (554 samples, 0.91%)</title><rect x="0.0066%" y="357" width="0.9072%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="554"/><text x="0.2566%" y="367.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (554 samples, 0.91%)</title><rect x="0.0066%" y="341" width="0.9072%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="554"/><text x="0.2566%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (554 samples, 0.91%)</title><rect x="0.0066%" y="325" width="0.9072%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="554"/><text x="0.2566%" y="335.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (554 samples, 0.91%)</title><rect x="0.0066%" y="309" width="0.9072%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="554"/><text x="0.2566%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::main (554 samples, 0.91%)</title><rect x="0.0066%" y="293" width="0.9072%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="554"/><text x="0.2566%" y="303.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (554 samples, 0.91%)</title><rect x="0.0066%" y="277" width="0.9072%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="554"/><text x="0.2566%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (554 samples, 0.91%)</title><rect x="0.0066%" y="261" width="0.9072%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="554"/><text x="0.2566%" y="271.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (554 samples, 0.91%)</title><rect x="0.0066%" y="245" width="0.9072%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="554"/><text x="0.2566%" y="255.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (554 samples, 0.91%)</title><rect x="0.0066%" y="229" width="0.9072%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="554"/><text x="0.2566%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (554 samples, 0.91%)</title><rect x="0.0066%" y="213" width="0.9072%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="554"/><text x="0.2566%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (554 samples, 0.91%)</title><rect x="0.0066%" y="197" width="0.9072%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="554"/><text x="0.2566%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (554 samples, 0.91%)</title><rect x="0.0066%" y="181" width="0.9072%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="554"/><text x="0.2566%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (554 samples, 0.91%)</title><rect x="0.0066%" y="165" width="0.9072%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="554"/><text x="0.2566%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (551 samples, 0.90%)</title><rect x="0.0115%" y="149" width="0.9023%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="551"/><text x="0.2615%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="0.9416%" y="293" width="0.0131%" height="15" fill="rgb(235,93,37)" fg:x="575" fg:w="8"/><text x="1.1916%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (44 samples, 0.07%)</title><rect x="0.9956%" y="277" width="0.0721%" height="15" fill="rgb(213,116,39)" fg:x="608" fg:w="44"/><text x="1.2456%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="1.0759%" y="277" width="0.0131%" height="15" fill="rgb(222,207,29)" fg:x="657" fg:w="8"/><text x="1.3259%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="1.0922%" y="277" width="0.0229%" height="15" fill="rgb(206,96,30)" fg:x="667" fg:w="14"/><text x="1.3422%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="1.1315%" y="277" width="0.0671%" height="15" fill="rgb(218,138,4)" fg:x="691" fg:w="41"/><text x="1.3815%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (11 samples, 0.02%)</title><rect x="1.1987%" y="277" width="0.0180%" height="15" fill="rgb(250,191,14)" fg:x="732" fg:w="11"/><text x="1.4487%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="1.2478%" y="277" width="0.0295%" height="15" fill="rgb(239,60,40)" fg:x="762" fg:w="18"/><text x="1.4978%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (12 samples, 0.02%)</title><rect x="1.2773%" y="277" width="0.0197%" height="15" fill="rgb(206,27,48)" fg:x="780" fg:w="12"/><text x="1.5273%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="1.7653%" y="261" width="0.0246%" height="15" fill="rgb(225,35,8)" fg:x="1078" fg:w="15"/><text x="2.0153%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="1.7685%" y="245" width="0.0213%" height="15" fill="rgb(250,213,24)" fg:x="1080" fg:w="13"/><text x="2.0185%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="1.7718%" y="229" width="0.0180%" height="15" fill="rgb(247,123,22)" fg:x="1082" fg:w="11"/><text x="2.0218%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="1.7767%" y="213" width="0.0131%" height="15" fill="rgb(231,138,38)" fg:x="1085" fg:w="8"/><text x="2.0267%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="1.7980%" y="213" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="1098" fg:w="7"/><text x="2.0480%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (314 samples, 0.51%)</title><rect x="1.2969%" y="277" width="0.5142%" height="15" fill="rgb(251,118,11)" fg:x="792" fg:w="314"/><text x="1.5469%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.02%)</title><rect x="1.7915%" y="261" width="0.0197%" height="15" fill="rgb(217,147,25)" fg:x="1094" fg:w="12"/><text x="2.0415%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="1.7948%" y="245" width="0.0164%" height="15" fill="rgb(247,81,37)" fg:x="1096" fg:w="10"/><text x="2.0448%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.01%)</title><rect x="1.7964%" y="229" width="0.0147%" height="15" fill="rgb(209,12,38)" fg:x="1097" fg:w="9"/><text x="2.0464%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.02%)</title><rect x="13.0054%" y="261" width="0.0213%" height="15" fill="rgb(227,1,9)" fg:x="7942" fg:w="13"/><text x="13.2554%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (89 samples, 0.15%)</title><rect x="13.0267%" y="261" width="0.1457%" height="15" fill="rgb(248,47,43)" fg:x="7955" fg:w="89"/><text x="13.2767%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (69 samples, 0.11%)</title><rect x="13.1790%" y="261" width="0.1130%" height="15" fill="rgb(221,10,30)" fg:x="8048" fg:w="69"/><text x="13.4290%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="13.4328%" y="245" width="0.0131%" height="15" fill="rgb(210,229,1)" fg:x="8203" fg:w="8"/><text x="13.6828%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (99 samples, 0.16%)</title><rect x="13.2920%" y="261" width="0.1621%" height="15" fill="rgb(222,148,37)" fg:x="8117" fg:w="99"/><text x="13.5420%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (333 samples, 0.55%)</title><rect x="13.4606%" y="245" width="0.5453%" height="15" fill="rgb(234,67,33)" fg:x="8220" fg:w="333"/><text x="13.7106%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (339 samples, 0.56%)</title><rect x="13.4541%" y="261" width="0.5551%" height="15" fill="rgb(247,98,35)" fg:x="8216" fg:w="339"/><text x="13.7041%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="14.0092%" y="261" width="0.0115%" height="15" fill="rgb(247,138,52)" fg:x="8555" fg:w="7"/><text x="14.2592%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="14.0207%" y="261" width="0.0131%" height="15" fill="rgb(213,79,30)" fg:x="8562" fg:w="8"/><text x="14.2707%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (76 samples, 0.12%)</title><rect x="14.0354%" y="261" width="0.1245%" height="15" fill="rgb(246,177,23)" fg:x="8571" fg:w="76"/><text x="14.2854%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="14.1599%" y="261" width="0.0475%" height="15" fill="rgb(230,62,27)" fg:x="8647" fg:w="29"/><text x="14.4099%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (16 samples, 0.03%)</title><rect x="14.2073%" y="261" width="0.0262%" height="15" fill="rgb(216,154,8)" fg:x="8676" fg:w="16"/><text x="14.4573%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (58 samples, 0.09%)</title><rect x="14.2368%" y="261" width="0.0950%" height="15" fill="rgb(244,35,45)" fg:x="8694" fg:w="58"/><text x="14.4868%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (62 samples, 0.10%)</title><rect x="14.3318%" y="261" width="0.1015%" height="15" fill="rgb(251,115,12)" fg:x="8752" fg:w="62"/><text x="14.5818%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (59 samples, 0.10%)</title><rect x="14.4333%" y="261" width="0.0966%" height="15" fill="rgb(240,54,50)" fg:x="8814" fg:w="59"/><text x="14.6833%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="14.5299%" y="261" width="0.0115%" height="15" fill="rgb(233,84,52)" fg:x="8873" fg:w="7"/><text x="14.7799%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="14.5414%" y="261" width="0.0147%" height="15" fill="rgb(207,117,47)" fg:x="8880" fg:w="9"/><text x="14.7914%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="14.8444%" y="197" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="9065" fg:w="7"/><text x="15.0944%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="14.8394%" y="213" width="0.0180%" height="15" fill="rgb(209,38,44)" fg:x="9062" fg:w="11"/><text x="15.0894%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="14.8362%" y="229" width="0.0278%" height="15" fill="rgb(236,212,23)" fg:x="9060" fg:w="17"/><text x="15.0862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.04%)</title><rect x="14.8853%" y="197" width="0.0360%" height="15" fill="rgb(242,79,21)" fg:x="9090" fg:w="22"/><text x="15.1353%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.02%)</title><rect x="14.9393%" y="181" width="0.0229%" height="15" fill="rgb(211,96,35)" fg:x="9123" fg:w="14"/><text x="15.1893%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="14.9623%" y="181" width="0.0115%" height="15" fill="rgb(253,215,40)" fg:x="9137" fg:w="7"/><text x="15.2123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.01%)</title><rect x="14.9934%" y="165" width="0.0115%" height="15" fill="rgb(211,81,21)" fg:x="9156" fg:w="7"/><text x="15.2434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (7 samples, 0.01%)</title><rect x="14.9934%" y="149" width="0.0115%" height="15" fill="rgb(208,190,38)" fg:x="9156" fg:w="7"/><text x="15.2434%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.03%)</title><rect x="15.0048%" y="165" width="0.0262%" height="15" fill="rgb(235,213,38)" fg:x="9163" fg:w="16"/><text x="15.2548%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.02%)</title><rect x="15.0081%" y="149" width="0.0229%" height="15" fill="rgb(237,122,38)" fg:x="9165" fg:w="14"/><text x="15.2581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.04%)</title><rect x="14.9917%" y="181" width="0.0442%" height="15" fill="rgb(244,218,35)" fg:x="9155" fg:w="27"/><text x="15.2417%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (73 samples, 0.12%)</title><rect x="14.9279%" y="197" width="0.1195%" height="15" fill="rgb(240,68,47)" fg:x="9116" fg:w="73"/><text x="15.1779%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (187 samples, 0.31%)</title><rect x="14.8706%" y="213" width="0.3062%" height="15" fill="rgb(210,16,53)" fg:x="9081" fg:w="187"/><text x="15.1206%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (77 samples, 0.13%)</title><rect x="15.0507%" y="197" width="0.1261%" height="15" fill="rgb(235,124,12)" fg:x="9191" fg:w="77"/><text x="15.3007%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (385 samples, 0.63%)</title><rect x="14.5692%" y="261" width="0.6305%" height="15" fill="rgb(224,169,11)" fg:x="8897" fg:w="385"/><text x="14.8192%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (222 samples, 0.36%)</title><rect x="14.8362%" y="245" width="0.3635%" height="15" fill="rgb(250,166,2)" fg:x="9060" fg:w="222"/><text x="15.0862%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (204 samples, 0.33%)</title><rect x="14.8656%" y="229" width="0.3341%" height="15" fill="rgb(242,216,29)" fg:x="9078" fg:w="204"/><text x="15.1156%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="15.3291%" y="245" width="0.0311%" height="15" fill="rgb(230,116,27)" fg:x="9361" fg:w="19"/><text x="15.5791%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (120 samples, 0.20%)</title><rect x="15.8940%" y="229" width="0.1965%" height="15" fill="rgb(228,99,48)" fg:x="9706" fg:w="120"/><text x="16.1440%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="16.0905%" y="229" width="0.0262%" height="15" fill="rgb(253,11,6)" fg:x="9826" fg:w="16"/><text x="16.3405%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (40 samples, 0.07%)</title><rect x="16.1167%" y="229" width="0.0655%" height="15" fill="rgb(247,143,39)" fg:x="9842" fg:w="40"/><text x="16.3667%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (140 samples, 0.23%)</title><rect x="16.1822%" y="229" width="0.2293%" height="15" fill="rgb(236,97,10)" fg:x="9882" fg:w="140"/><text x="16.4322%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (92 samples, 0.15%)</title><rect x="16.2608%" y="213" width="0.1507%" height="15" fill="rgb(233,208,19)" fg:x="9930" fg:w="92"/><text x="16.5108%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (643 samples, 1.05%)</title><rect x="15.3602%" y="245" width="1.0529%" height="15" fill="rgb(216,164,2)" fg:x="9380" fg:w="643"/><text x="15.6102%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="16.4164%" y="229" width="0.0278%" height="15" fill="rgb(220,129,5)" fg:x="10025" fg:w="17"/><text x="16.6664%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (20 samples, 0.03%)</title><rect x="16.4131%" y="245" width="0.0328%" height="15" fill="rgb(242,17,10)" fg:x="10023" fg:w="20"/><text x="16.6631%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (136 samples, 0.22%)</title><rect x="16.7013%" y="229" width="0.2227%" height="15" fill="rgb(242,107,0)" fg:x="10199" fg:w="136"/><text x="16.9513%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (39 samples, 0.06%)</title><rect x="16.9240%" y="229" width="0.0639%" height="15" fill="rgb(251,28,31)" fg:x="10335" fg:w="39"/><text x="17.1740%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (41 samples, 0.07%)</title><rect x="16.9879%" y="229" width="0.0671%" height="15" fill="rgb(233,223,10)" fg:x="10374" fg:w="41"/><text x="17.2379%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (581 samples, 0.95%)</title><rect x="16.4459%" y="245" width="0.9514%" height="15" fill="rgb(215,21,27)" fg:x="10043" fg:w="581"/><text x="16.6959%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (209 samples, 0.34%)</title><rect x="17.0550%" y="229" width="0.3422%" height="15" fill="rgb(232,23,21)" fg:x="10415" fg:w="209"/><text x="17.3050%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (84 samples, 0.14%)</title><rect x="17.7215%" y="213" width="0.1376%" height="15" fill="rgb(244,5,23)" fg:x="10822" fg:w="84"/><text x="17.9715%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (105 samples, 0.17%)</title><rect x="17.8591%" y="213" width="0.1719%" height="15" fill="rgb(226,81,46)" fg:x="10906" fg:w="105"/><text x="18.1091%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (390 samples, 0.64%)</title><rect x="17.3973%" y="245" width="0.6386%" height="15" fill="rgb(247,70,30)" fg:x="10624" fg:w="390"/><text x="17.6473%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (319 samples, 0.52%)</title><rect x="17.5136%" y="229" width="0.5224%" height="15" fill="rgb(212,68,19)" fg:x="10695" fg:w="319"/><text x="17.7636%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (33 samples, 0.05%)</title><rect x="18.0359%" y="245" width="0.0540%" height="15" fill="rgb(240,187,13)" fg:x="11014" fg:w="33"/><text x="18.2859%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (281 samples, 0.46%)</title><rect x="18.0900%" y="245" width="0.4602%" height="15" fill="rgb(223,113,26)" fg:x="11047" fg:w="281"/><text x="18.3400%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (149 samples, 0.24%)</title><rect x="18.3061%" y="229" width="0.2440%" height="15" fill="rgb(206,192,2)" fg:x="11179" fg:w="149"/><text x="18.5561%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (149 samples, 0.24%)</title><rect x="18.3061%" y="213" width="0.2440%" height="15" fill="rgb(241,108,4)" fg:x="11179" fg:w="149"/><text x="18.5561%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (45 samples, 0.07%)</title><rect x="18.5501%" y="245" width="0.0737%" height="15" fill="rgb(247,173,49)" fg:x="11328" fg:w="45"/><text x="18.8001%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="18.6336%" y="245" width="0.0164%" height="15" fill="rgb(224,114,35)" fg:x="11379" fg:w="10"/><text x="18.8836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (52 samples, 0.09%)</title><rect x="18.6500%" y="245" width="0.0852%" height="15" fill="rgb(245,159,27)" fg:x="11389" fg:w="52"/><text x="18.9000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.05%)</title><rect x="18.7352%" y="245" width="0.0459%" height="15" fill="rgb(245,172,44)" fg:x="11441" fg:w="28"/><text x="18.9852%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.03%)</title><rect x="18.7810%" y="245" width="0.0311%" height="15" fill="rgb(236,23,11)" fg:x="11469" fg:w="19"/><text x="19.0310%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (9 samples, 0.01%)</title><rect x="18.8121%" y="245" width="0.0147%" height="15" fill="rgb(205,117,38)" fg:x="11488" fg:w="9"/><text x="19.0621%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (78 samples, 0.13%)</title><rect x="19.0234%" y="213" width="0.1277%" height="15" fill="rgb(237,72,25)" fg:x="11617" fg:w="78"/><text x="19.2734%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (175 samples, 0.29%)</title><rect x="18.8694%" y="229" width="0.2866%" height="15" fill="rgb(244,70,9)" fg:x="11523" fg:w="175"/><text x="19.1194%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="19.1560%" y="229" width="0.0115%" height="15" fill="rgb(217,125,39)" fg:x="11698" fg:w="7"/><text x="19.4060%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (117 samples, 0.19%)</title><rect x="19.1675%" y="229" width="0.1916%" height="15" fill="rgb(235,36,10)" fg:x="11705" fg:w="117"/><text x="19.4175%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (18 samples, 0.03%)</title><rect x="19.3296%" y="213" width="0.0295%" height="15" fill="rgb(251,123,47)" fg:x="11804" fg:w="18"/><text x="19.5796%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.03%)</title><rect x="19.3296%" y="197" width="0.0295%" height="15" fill="rgb(221,13,13)" fg:x="11804" fg:w="18"/><text x="19.5796%" y="207.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,550 samples, 4.18%)</title><rect x="15.2030%" y="261" width="4.1757%" height="15" fill="rgb(238,131,9)" fg:x="9284" fg:w="2550"/><text x="15.4530%" y="271.50">rust_..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (335 samples, 0.55%)</title><rect x="18.8301%" y="245" width="0.5486%" height="15" fill="rgb(211,50,8)" fg:x="11499" fg:w="335"/><text x="19.0801%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="19.3591%" y="229" width="0.0197%" height="15" fill="rgb(245,182,24)" fg:x="11822" fg:w="12"/><text x="19.6091%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (258 samples, 0.42%)</title><rect x="19.3804%" y="261" width="0.4225%" height="15" fill="rgb(242,14,37)" fg:x="11835" fg:w="258"/><text x="19.6304%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (203 samples, 0.33%)</title><rect x="19.4704%" y="245" width="0.3324%" height="15" fill="rgb(246,228,12)" fg:x="11890" fg:w="203"/><text x="19.7204%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (120 samples, 0.20%)</title><rect x="19.6063%" y="229" width="0.1965%" height="15" fill="rgb(213,55,15)" fg:x="11973" fg:w="120"/><text x="19.8563%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (60 samples, 0.10%)</title><rect x="19.7046%" y="213" width="0.0983%" height="15" fill="rgb(209,9,3)" fg:x="12033" fg:w="60"/><text x="19.9546%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (13 samples, 0.02%)</title><rect x="19.7816%" y="197" width="0.0213%" height="15" fill="rgb(230,59,30)" fg:x="12080" fg:w="13"/><text x="20.0316%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (30 samples, 0.05%)</title><rect x="20.3694%" y="245" width="0.0491%" height="15" fill="rgb(209,121,21)" fg:x="12439" fg:w="30"/><text x="20.6194%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (95 samples, 0.16%)</title><rect x="20.4218%" y="245" width="0.1556%" height="15" fill="rgb(220,109,13)" fg:x="12471" fg:w="95"/><text x="20.6718%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (43 samples, 0.07%)</title><rect x="20.7788%" y="213" width="0.0704%" height="15" fill="rgb(232,18,1)" fg:x="12689" fg:w="43"/><text x="21.0288%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (342 samples, 0.56%)</title><rect x="20.5774%" y="245" width="0.5600%" height="15" fill="rgb(215,41,42)" fg:x="12566" fg:w="342"/><text x="20.8274%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (296 samples, 0.48%)</title><rect x="20.6527%" y="229" width="0.4847%" height="15" fill="rgb(224,123,36)" fg:x="12612" fg:w="296"/><text x="20.9027%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (175 samples, 0.29%)</title><rect x="20.8509%" y="213" width="0.2866%" height="15" fill="rgb(240,125,3)" fg:x="12733" fg:w="175"/><text x="21.1009%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (816 samples, 1.34%)</title><rect x="19.8028%" y="261" width="1.3362%" height="15" fill="rgb(205,98,50)" fg:x="12093" fg:w="816"/><text x="20.0528%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,807 samples, 2.96%)</title><rect x="21.1391%" y="261" width="2.9590%" height="15" fill="rgb(205,185,37)" fg:x="12909" fg:w="1807"/><text x="21.3891%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (34 samples, 0.06%)</title><rect x="24.0981%" y="261" width="0.0557%" height="15" fill="rgb(238,207,15)" fg:x="14716" fg:w="34"/><text x="24.3481%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (107 samples, 0.18%)</title><rect x="24.3257%" y="245" width="0.1752%" height="15" fill="rgb(213,199,42)" fg:x="14855" fg:w="107"/><text x="24.5757%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="24.7171%" y="229" width="0.0197%" height="15" fill="rgb(235,201,11)" fg:x="15094" fg:w="12"/><text x="24.9671%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="24.7237%" y="213" width="0.0131%" height="15" fill="rgb(207,46,11)" fg:x="15098" fg:w="8"/><text x="24.9737%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (261 samples, 0.43%)</title><rect x="24.7384%" y="229" width="0.4274%" height="15" fill="rgb(241,35,35)" fg:x="15107" fg:w="261"/><text x="24.9884%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (840 samples, 1.38%)</title><rect x="24.1538%" y="261" width="1.3755%" height="15" fill="rgb(243,32,47)" fg:x="14750" fg:w="840"/><text x="24.4038%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (628 samples, 1.03%)</title><rect x="24.5010%" y="245" width="1.0284%" height="15" fill="rgb(247,202,23)" fg:x="14962" fg:w="628"/><text x="24.7510%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (222 samples, 0.36%)</title><rect x="25.1658%" y="229" width="0.3635%" height="15" fill="rgb(219,102,11)" fg:x="15368" fg:w="222"/><text x="25.4158%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (14 samples, 0.02%)</title><rect x="25.5293%" y="261" width="0.0229%" height="15" fill="rgb(243,110,44)" fg:x="15590" fg:w="14"/><text x="25.7793%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (8 samples, 0.01%)</title><rect x="25.5539%" y="261" width="0.0131%" height="15" fill="rgb(222,74,54)" fg:x="15605" fg:w="8"/><text x="25.8039%" y="271.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (217 samples, 0.36%)</title><rect x="25.5670%" y="261" width="0.3553%" height="15" fill="rgb(216,99,12)" fg:x="15613" fg:w="217"/><text x="25.8170%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,694 samples, 7.69%)</title><rect x="31.0053%" y="245" width="7.6866%" height="15" fill="rgb(226,22,26)" fg:x="18934" fg:w="4694"/><text x="31.2553%" y="255.50">rust_qecp`&lt;..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.02%)</title><rect x="38.7050%" y="181" width="0.0246%" height="15" fill="rgb(217,163,10)" fg:x="23636" fg:w="15"/><text x="38.9550%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="38.7181%" y="165" width="0.0115%" height="15" fill="rgb(213,25,53)" fg:x="23644" fg:w="7"/><text x="38.9681%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="38.7181%" y="149" width="0.0115%" height="15" fill="rgb(252,105,26)" fg:x="23644" fg:w="7"/><text x="38.9681%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (36 samples, 0.06%)</title><rect x="38.6936%" y="197" width="0.0590%" height="15" fill="rgb(220,39,43)" fg:x="23629" fg:w="36"/><text x="38.9436%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="38.7296%" y="181" width="0.0229%" height="15" fill="rgb(229,68,48)" fg:x="23651" fg:w="14"/><text x="38.9796%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.07%)</title><rect x="38.6919%" y="245" width="0.0655%" height="15" fill="rgb(252,8,32)" fg:x="23628" fg:w="40"/><text x="38.9419%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (40 samples, 0.07%)</title><rect x="38.6919%" y="229" width="0.0655%" height="15" fill="rgb(223,20,43)" fg:x="23628" fg:w="40"/><text x="38.9419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (39 samples, 0.06%)</title><rect x="38.6936%" y="213" width="0.0639%" height="15" fill="rgb(229,81,49)" fg:x="23629" fg:w="39"/><text x="38.9436%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,073 samples, 5.03%)</title><rect x="38.7574%" y="245" width="5.0322%" height="15" fill="rgb(236,28,36)" fg:x="23668" fg:w="3073"/><text x="39.0074%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (605 samples, 0.99%)</title><rect x="43.7896%" y="245" width="0.9907%" height="15" fill="rgb(249,185,26)" fg:x="26741" fg:w="605"/><text x="44.0396%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.03%)</title><rect x="44.8655%" y="213" width="0.0262%" height="15" fill="rgb(249,174,33)" fg:x="27398" fg:w="16"/><text x="45.1155%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="44.8638%" y="229" width="0.0295%" height="15" fill="rgb(233,201,37)" fg:x="27397" fg:w="18"/><text x="45.1138%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (101 samples, 0.17%)</title><rect x="44.8982%" y="229" width="0.1654%" height="15" fill="rgb(221,78,26)" fg:x="27418" fg:w="101"/><text x="45.1482%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="45.2699%" y="213" width="0.0147%" height="15" fill="rgb(250,127,30)" fg:x="27645" fg:w="9"/><text x="45.5199%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="45.2699%" y="197" width="0.0147%" height="15" fill="rgb(230,49,44)" fg:x="27645" fg:w="9"/><text x="45.5199%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (239 samples, 0.39%)</title><rect x="45.2847%" y="213" width="0.3914%" height="15" fill="rgb(229,67,23)" fg:x="27654" fg:w="239"/><text x="45.5347%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (775 samples, 1.27%)</title><rect x="44.7803%" y="245" width="1.2691%" height="15" fill="rgb(249,83,47)" fg:x="27346" fg:w="775"/><text x="45.0303%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (602 samples, 0.99%)</title><rect x="45.0636%" y="229" width="0.9858%" height="15" fill="rgb(215,43,3)" fg:x="27519" fg:w="602"/><text x="45.3136%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (228 samples, 0.37%)</title><rect x="45.6761%" y="213" width="0.3734%" height="15" fill="rgb(238,154,13)" fg:x="27893" fg:w="228"/><text x="45.9261%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (32 samples, 0.05%)</title><rect x="51.4484%" y="181" width="0.0524%" height="15" fill="rgb(219,56,2)" fg:x="31418" fg:w="32"/><text x="51.6984%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="51.4713%" y="165" width="0.0295%" height="15" fill="rgb(233,0,4)" fg:x="31432" fg:w="18"/><text x="51.7213%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (15,625 samples, 25.59%)</title><rect x="25.9223%" y="261" width="25.5867%" height="15" fill="rgb(235,30,7)" fg:x="15830" fg:w="15625"/><text x="26.1723%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMod..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,334 samples, 5.46%)</title><rect x="46.0494%" y="245" width="5.4596%" height="15" fill="rgb(250,79,13)" fg:x="28121" fg:w="3334"/><text x="46.2994%" y="255.50">rust_qe..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.07%)</title><rect x="51.4435%" y="229" width="0.0655%" height="15" fill="rgb(211,146,34)" fg:x="31415" fg:w="40"/><text x="51.6935%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (38 samples, 0.06%)</title><rect x="51.4468%" y="213" width="0.0622%" height="15" fill="rgb(228,22,38)" fg:x="31417" fg:w="38"/><text x="51.6968%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (38 samples, 0.06%)</title><rect x="51.4468%" y="197" width="0.0622%" height="15" fill="rgb(235,168,5)" fg:x="31417" fg:w="38"/><text x="51.6968%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 0.06%)</title><rect x="53.8523%" y="245" width="0.0573%" height="15" fill="rgb(221,155,16)" fg:x="32886" fg:w="35"/><text x="54.1023%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="53.8933%" y="229" width="0.0164%" height="15" fill="rgb(215,215,53)" fg:x="32911" fg:w="10"/><text x="54.1433%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="53.8933%" y="213" width="0.0164%" height="15" fill="rgb(223,4,10)" fg:x="32911" fg:w="10"/><text x="54.1433%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="53.8933%" y="197" width="0.0164%" height="15" fill="rgb(234,103,6)" fg:x="32911" fg:w="10"/><text x="54.1433%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.02%)</title><rect x="53.8933%" y="181" width="0.0164%" height="15" fill="rgb(227,97,0)" fg:x="32911" fg:w="10"/><text x="54.1433%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (43 samples, 0.07%)</title><rect x="53.9096%" y="229" width="0.0704%" height="15" fill="rgb(234,150,53)" fg:x="32921" fg:w="43"/><text x="54.1596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="53.9801%" y="229" width="0.0229%" height="15" fill="rgb(228,201,54)" fg:x="32964" fg:w="14"/><text x="54.2301%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (27 samples, 0.04%)</title><rect x="54.0030%" y="229" width="0.0442%" height="15" fill="rgb(222,22,37)" fg:x="32978" fg:w="27"/><text x="54.2530%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="54.0472%" y="229" width="0.0524%" height="15" fill="rgb(237,53,32)" fg:x="33005" fg:w="32"/><text x="54.2972%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="54.1012%" y="229" width="0.0344%" height="15" fill="rgb(233,25,53)" fg:x="33038" fg:w="21"/><text x="54.3512%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="54.1356%" y="229" width="0.0180%" height="15" fill="rgb(210,40,34)" fg:x="33059" fg:w="11"/><text x="54.3856%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="54.5352%" y="197" width="0.0229%" height="15" fill="rgb(241,220,44)" fg:x="33303" fg:w="14"/><text x="54.7852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (82 samples, 0.13%)</title><rect x="54.9249%" y="165" width="0.1343%" height="15" fill="rgb(235,28,35)" fg:x="33541" fg:w="82"/><text x="55.1749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (247 samples, 0.40%)</title><rect x="54.6580%" y="181" width="0.4045%" height="15" fill="rgb(210,56,17)" fg:x="33378" fg:w="247"/><text x="54.9080%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (511 samples, 0.84%)</title><rect x="54.2666%" y="213" width="0.8368%" height="15" fill="rgb(224,130,29)" fg:x="33139" fg:w="511"/><text x="54.5166%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (333 samples, 0.55%)</title><rect x="54.5581%" y="197" width="0.5453%" height="15" fill="rgb(235,212,8)" fg:x="33317" fg:w="333"/><text x="54.8081%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="55.0625%" y="181" width="0.0409%" height="15" fill="rgb(223,33,50)" fg:x="33625" fg:w="25"/><text x="55.3125%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (47 samples, 0.08%)</title><rect x="55.1034%" y="213" width="0.0770%" height="15" fill="rgb(219,149,13)" fg:x="33650" fg:w="47"/><text x="55.3534%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (200 samples, 0.33%)</title><rect x="55.1804%" y="213" width="0.3275%" height="15" fill="rgb(250,156,29)" fg:x="33697" fg:w="200"/><text x="55.4304%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.13%)</title><rect x="55.3752%" y="197" width="0.1326%" height="15" fill="rgb(216,193,19)" fg:x="33816" fg:w="81"/><text x="55.6252%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.03%)</title><rect x="55.5079%" y="213" width="0.0278%" height="15" fill="rgb(216,135,14)" fg:x="33897" fg:w="17"/><text x="55.7579%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (68 samples, 0.11%)</title><rect x="55.5357%" y="213" width="0.1114%" height="15" fill="rgb(241,47,5)" fg:x="33914" fg:w="68"/><text x="55.7857%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="55.6471%" y="213" width="0.0147%" height="15" fill="rgb(233,42,35)" fg:x="33982" fg:w="9"/><text x="55.8971%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.03%)</title><rect x="55.6618%" y="213" width="0.0295%" height="15" fill="rgb(231,13,6)" fg:x="33991" fg:w="18"/><text x="55.9118%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="55.7486%" y="197" width="0.0131%" height="15" fill="rgb(207,181,40)" fg:x="34044" fg:w="8"/><text x="55.9986%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (377 samples, 0.62%)</title><rect x="55.7617%" y="197" width="0.6174%" height="15" fill="rgb(254,173,49)" fg:x="34052" fg:w="377"/><text x="56.0117%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="56.3791%" y="197" width="0.0213%" height="15" fill="rgb(221,1,38)" fg:x="34429" fg:w="13"/><text x="56.6291%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="56.4003%" y="197" width="0.0131%" height="15" fill="rgb(206,124,46)" fg:x="34442" fg:w="8"/><text x="56.6503%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="56.4134%" y="197" width="0.0164%" height="15" fill="rgb(249,21,11)" fg:x="34450" fg:w="10"/><text x="56.6634%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 0.08%)</title><rect x="56.4855%" y="181" width="0.0802%" height="15" fill="rgb(222,201,40)" fg:x="34494" fg:w="49"/><text x="56.7355%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (109 samples, 0.18%)</title><rect x="56.5657%" y="181" width="0.1785%" height="15" fill="rgb(235,61,29)" fg:x="34543" fg:w="109"/><text x="56.8157%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (218 samples, 0.36%)</title><rect x="56.4298%" y="197" width="0.3570%" height="15" fill="rgb(219,207,3)" fg:x="34460" fg:w="218"/><text x="56.6798%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="56.7442%" y="181" width="0.0426%" height="15" fill="rgb(222,56,46)" fg:x="34652" fg:w="26"/><text x="56.9942%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="56.7884%" y="197" width="0.0246%" height="15" fill="rgb(239,76,54)" fg:x="34679" fg:w="15"/><text x="57.0384%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="57.0865%" y="165" width="0.0147%" height="15" fill="rgb(231,124,27)" fg:x="34861" fg:w="9"/><text x="57.3365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="57.3780%" y="133" width="0.0540%" height="15" fill="rgb(249,195,6)" fg:x="35039" fg:w="33"/><text x="57.6280%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (190 samples, 0.31%)</title><rect x="57.1438%" y="149" width="0.3111%" height="15" fill="rgb(237,174,47)" fg:x="34896" fg:w="190"/><text x="57.3938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (14 samples, 0.02%)</title><rect x="57.4320%" y="133" width="0.0229%" height="15" fill="rgb(206,201,31)" fg:x="35072" fg:w="14"/><text x="57.6820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (320 samples, 0.52%)</title><rect x="56.9653%" y="181" width="0.5240%" height="15" fill="rgb(231,57,52)" fg:x="34787" fg:w="320"/><text x="57.2153%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (237 samples, 0.39%)</title><rect x="57.1012%" y="165" width="0.3881%" height="15" fill="rgb(248,177,22)" fg:x="34870" fg:w="237"/><text x="57.3512%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.03%)</title><rect x="57.4549%" y="149" width="0.0344%" height="15" fill="rgb(215,211,37)" fg:x="35086" fg:w="21"/><text x="57.7049%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="57.4893%" y="181" width="0.0311%" height="15" fill="rgb(241,128,51)" fg:x="35107" fg:w="19"/><text x="57.7393%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,126 samples, 1.84%)</title><rect x="55.6913%" y="213" width="1.8439%" height="15" fill="rgb(227,165,31)" fg:x="34009" fg:w="1126"/><text x="55.9413%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (441 samples, 0.72%)</title><rect x="56.8130%" y="197" width="0.7222%" height="15" fill="rgb(228,167,24)" fg:x="34694" fg:w="441"/><text x="57.0630%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="57.5204%" y="181" width="0.0147%" height="15" fill="rgb(228,143,12)" fg:x="35126" fg:w="9"/><text x="57.7704%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 0.08%)</title><rect x="57.7464%" y="197" width="0.0802%" height="15" fill="rgb(249,149,8)" fg:x="35264" fg:w="49"/><text x="57.9964%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (114 samples, 0.19%)</title><rect x="57.8266%" y="197" width="0.1867%" height="15" fill="rgb(243,35,44)" fg:x="35313" fg:w="114"/><text x="58.0766%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (345 samples, 0.56%)</title><rect x="57.5352%" y="213" width="0.5650%" height="15" fill="rgb(246,89,9)" fg:x="35135" fg:w="345"/><text x="57.7852%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (53 samples, 0.09%)</title><rect x="58.0133%" y="197" width="0.0868%" height="15" fill="rgb(233,213,13)" fg:x="35427" fg:w="53"/><text x="58.2633%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="58.1001%" y="213" width="0.0197%" height="15" fill="rgb(233,141,41)" fg:x="35480" fg:w="12"/><text x="58.3501%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,441 samples, 4.00%)</title><rect x="54.1585%" y="229" width="3.9972%" height="15" fill="rgb(239,167,4)" fg:x="33073" fg:w="2441"/><text x="54.4085%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.04%)</title><rect x="58.1198%" y="213" width="0.0360%" height="15" fill="rgb(209,217,16)" fg:x="35492" fg:w="22"/><text x="58.3698%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="58.1623%" y="229" width="0.0213%" height="15" fill="rgb(219,88,35)" fg:x="35518" fg:w="13"/><text x="58.4123%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (28 samples, 0.05%)</title><rect x="58.1836%" y="229" width="0.0459%" height="15" fill="rgb(220,193,23)" fg:x="35531" fg:w="28"/><text x="58.4336%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (15 samples, 0.02%)</title><rect x="58.2295%" y="229" width="0.0246%" height="15" fill="rgb(230,90,52)" fg:x="35559" fg:w="15"/><text x="58.4795%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 0.04%)</title><rect x="58.2540%" y="229" width="0.0426%" height="15" fill="rgb(252,106,19)" fg:x="35574" fg:w="26"/><text x="58.5040%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,692 samples, 4.41%)</title><rect x="53.9096%" y="245" width="4.4083%" height="15" fill="rgb(206,74,20)" fg:x="32921" fg:w="2692"/><text x="54.1596%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (10 samples, 0.02%)</title><rect x="58.3015%" y="229" width="0.0164%" height="15" fill="rgb(230,138,44)" fg:x="35603" fg:w="10"/><text x="58.5515%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="58.3196%" y="245" width="0.0115%" height="15" fill="rgb(235,182,43)" fg:x="35614" fg:w="7"/><text x="58.5696%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="58.3196%" y="229" width="0.0115%" height="15" fill="rgb(242,16,51)" fg:x="35614" fg:w="7"/><text x="58.5696%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="58.3196%" y="213" width="0.0115%" height="15" fill="rgb(248,9,4)" fg:x="35614" fg:w="7"/><text x="58.5696%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="58.5783%" y="229" width="0.0229%" height="15" fill="rgb(210,31,22)" fg:x="35772" fg:w="14"/><text x="58.8283%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.06%)</title><rect x="58.6012%" y="229" width="0.0590%" height="15" fill="rgb(239,54,39)" fg:x="35786" fg:w="36"/><text x="58.8512%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="58.6602%" y="229" width="0.0229%" height="15" fill="rgb(230,99,41)" fg:x="35822" fg:w="14"/><text x="58.9102%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (37 samples, 0.06%)</title><rect x="58.6831%" y="229" width="0.0606%" height="15" fill="rgb(253,106,12)" fg:x="35836" fg:w="37"/><text x="58.9331%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="58.7437%" y="229" width="0.0164%" height="15" fill="rgb(213,46,41)" fg:x="35873" fg:w="10"/><text x="58.9937%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (19 samples, 0.03%)</title><rect x="58.7601%" y="229" width="0.0311%" height="15" fill="rgb(215,133,35)" fg:x="35883" fg:w="19"/><text x="59.0101%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.19%)</title><rect x="59.0908%" y="181" width="0.1883%" height="15" fill="rgb(213,28,5)" fg:x="36085" fg:w="115"/><text x="59.3408%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.05%)</title><rect x="59.2284%" y="165" width="0.0508%" height="15" fill="rgb(215,77,49)" fg:x="36169" fg:w="31"/><text x="59.4784%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (259 samples, 0.42%)</title><rect x="58.8796%" y="213" width="0.4241%" height="15" fill="rgb(248,100,22)" fg:x="35956" fg:w="259"/><text x="59.1296%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (167 samples, 0.27%)</title><rect x="59.0302%" y="197" width="0.2735%" height="15" fill="rgb(208,67,9)" fg:x="36048" fg:w="167"/><text x="59.2802%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="59.2792%" y="181" width="0.0246%" height="15" fill="rgb(219,133,21)" fg:x="36200" fg:w="15"/><text x="59.5292%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.04%)</title><rect x="59.3037%" y="213" width="0.0360%" height="15" fill="rgb(246,46,29)" fg:x="36215" fg:w="22"/><text x="59.5537%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="59.3397%" y="213" width="0.0344%" height="15" fill="rgb(246,185,52)" fg:x="36237" fg:w="21"/><text x="59.5897%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (36 samples, 0.06%)</title><rect x="59.3774%" y="213" width="0.0590%" height="15" fill="rgb(252,136,11)" fg:x="36260" fg:w="36"/><text x="59.6274%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (38 samples, 0.06%)</title><rect x="59.6623%" y="197" width="0.0622%" height="15" fill="rgb(219,138,53)" fg:x="36434" fg:w="38"/><text x="59.9123%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (24 samples, 0.04%)</title><rect x="59.8572%" y="181" width="0.0393%" height="15" fill="rgb(211,51,23)" fg:x="36553" fg:w="24"/><text x="60.1072%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (23 samples, 0.04%)</title><rect x="59.8965%" y="181" width="0.0377%" height="15" fill="rgb(247,221,28)" fg:x="36577" fg:w="23"/><text x="60.1465%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (37 samples, 0.06%)</title><rect x="59.9342%" y="181" width="0.0606%" height="15" fill="rgb(251,222,45)" fg:x="36600" fg:w="37"/><text x="60.1842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (261 samples, 0.43%)</title><rect x="60.0013%" y="181" width="0.4274%" height="15" fill="rgb(217,162,53)" fg:x="36641" fg:w="261"/><text x="60.2513%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (35 samples, 0.06%)</title><rect x="60.6236%" y="165" width="0.0573%" height="15" fill="rgb(229,93,14)" fg:x="37021" fg:w="35"/><text x="60.8736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (113 samples, 0.19%)</title><rect x="60.6809%" y="165" width="0.1850%" height="15" fill="rgb(209,67,49)" fg:x="37056" fg:w="113"/><text x="60.9309%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (50 samples, 0.08%)</title><rect x="61.1034%" y="133" width="0.0819%" height="15" fill="rgb(213,87,29)" fg:x="37314" fg:w="50"/><text x="61.3534%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (180 samples, 0.29%)</title><rect x="60.9118%" y="149" width="0.2948%" height="15" fill="rgb(205,151,52)" fg:x="37197" fg:w="180"/><text x="61.1618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="61.1853%" y="133" width="0.0213%" height="15" fill="rgb(253,215,39)" fg:x="37364" fg:w="13"/><text x="61.4353%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (219 samples, 0.36%)</title><rect x="60.8659%" y="165" width="0.3586%" height="15" fill="rgb(221,220,41)" fg:x="37169" fg:w="219"/><text x="61.1159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="61.2065%" y="149" width="0.0180%" height="15" fill="rgb(218,133,21)" fg:x="37377" fg:w="11"/><text x="61.4565%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (128 samples, 0.21%)</title><rect x="61.2246%" y="165" width="0.2096%" height="15" fill="rgb(221,193,43)" fg:x="37388" fg:w="128"/><text x="61.4746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (68 samples, 0.11%)</title><rect x="61.6012%" y="133" width="0.1114%" height="15" fill="rgb(240,128,52)" fg:x="37618" fg:w="68"/><text x="61.8512%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (273 samples, 0.45%)</title><rect x="61.4342%" y="165" width="0.4470%" height="15" fill="rgb(253,114,12)" fg:x="37516" fg:w="273"/><text x="61.6842%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (253 samples, 0.41%)</title><rect x="61.4669%" y="149" width="0.4143%" height="15" fill="rgb(215,223,47)" fg:x="37536" fg:w="253"/><text x="61.7169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (103 samples, 0.17%)</title><rect x="61.7125%" y="133" width="0.1687%" height="15" fill="rgb(248,225,23)" fg:x="37686" fg:w="103"/><text x="61.9625%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (900 samples, 1.47%)</title><rect x="60.4287%" y="181" width="1.4738%" height="15" fill="rgb(250,108,0)" fg:x="36902" fg:w="900"/><text x="60.6787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="61.8812%" y="165" width="0.0213%" height="15" fill="rgb(228,208,7)" fg:x="37789" fg:w="13"/><text x="62.1312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,426 samples, 2.34%)</title><rect x="59.7246%" y="197" width="2.3351%" height="15" fill="rgb(244,45,10)" fg:x="36472" fg:w="1426"/><text x="59.9746%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.15%)</title><rect x="61.9123%" y="181" width="0.1474%" height="15" fill="rgb(207,125,25)" fg:x="37808" fg:w="90"/><text x="62.1623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (152 samples, 0.25%)</title><rect x="62.0597%" y="197" width="0.2489%" height="15" fill="rgb(210,195,18)" fg:x="37898" fg:w="152"/><text x="62.3097%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (40 samples, 0.07%)</title><rect x="62.3086%" y="197" width="0.0655%" height="15" fill="rgb(249,80,12)" fg:x="38050" fg:w="40"/><text x="62.5586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,807 samples, 2.96%)</title><rect x="59.4364%" y="213" width="2.9590%" height="15" fill="rgb(221,65,9)" fg:x="36296" fg:w="1807"/><text x="59.6864%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="62.3741%" y="197" width="0.0213%" height="15" fill="rgb(235,49,36)" fg:x="38090" fg:w="13"/><text x="62.6241%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,490 samples, 4.08%)</title><rect x="58.3310%" y="245" width="4.0775%" height="15" fill="rgb(225,32,20)" fg:x="35621" fg:w="2490"/><text x="58.5810%" y="255.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,209 samples, 3.62%)</title><rect x="58.7912%" y="229" width="3.6173%" height="15" fill="rgb(215,141,46)" fg:x="35902" fg:w="2209"/><text x="59.0412%" y="239.50">rust..</text></g><g><title>rust_qecp`__rdl_realloc (8 samples, 0.01%)</title><rect x="62.3954%" y="213" width="0.0131%" height="15" fill="rgb(250,160,47)" fg:x="38103" fg:w="8"/><text x="62.6454%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (77 samples, 0.13%)</title><rect x="62.4085%" y="245" width="0.1261%" height="15" fill="rgb(216,222,40)" fg:x="38111" fg:w="77"/><text x="62.6585%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (212 samples, 0.35%)</title><rect x="62.5346%" y="229" width="0.3472%" height="15" fill="rgb(234,217,39)" fg:x="38188" fg:w="212"/><text x="62.7846%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.03%)</title><rect x="63.4418%" y="213" width="0.0295%" height="15" fill="rgb(207,178,40)" fg:x="38742" fg:w="18"/><text x="63.6918%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="63.4713%" y="213" width="0.0262%" height="15" fill="rgb(221,136,13)" fg:x="38760" fg:w="16"/><text x="63.7213%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="63.4975%" y="213" width="0.0197%" height="15" fill="rgb(249,199,10)" fg:x="38776" fg:w="12"/><text x="63.7475%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="63.8708%" y="181" width="0.0377%" height="15" fill="rgb(249,222,13)" fg:x="39004" fg:w="23"/><text x="64.1208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (26 samples, 0.04%)</title><rect x="63.9085%" y="181" width="0.0426%" height="15" fill="rgb(244,185,38)" fg:x="39027" fg:w="26"/><text x="64.1585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="63.9986%" y="165" width="0.0197%" height="15" fill="rgb(236,202,9)" fg:x="39082" fg:w="12"/><text x="64.2486%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (103 samples, 0.17%)</title><rect x="64.2475%" y="149" width="0.1687%" height="15" fill="rgb(250,229,37)" fg:x="39234" fg:w="103"/><text x="64.4975%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (523 samples, 0.86%)</title><rect x="64.5635%" y="133" width="0.8564%" height="15" fill="rgb(206,174,23)" fg:x="39427" fg:w="523"/><text x="64.8135%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (42 samples, 0.07%)</title><rect x="65.4199%" y="133" width="0.0688%" height="15" fill="rgb(211,33,43)" fg:x="39950" fg:w="42"/><text x="65.6699%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,299 samples, 2.13%)</title><rect x="63.6645%" y="197" width="2.1272%" height="15" fill="rgb(245,58,50)" fg:x="38878" fg:w="1299"/><text x="63.9145%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,124 samples, 1.84%)</title><rect x="63.9511%" y="181" width="1.8406%" height="15" fill="rgb(244,68,36)" fg:x="39053" fg:w="1124"/><text x="64.2011%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,083 samples, 1.77%)</title><rect x="64.0182%" y="165" width="1.7735%" height="15" fill="rgb(232,229,15)" fg:x="39094" fg:w="1083"/><text x="64.2682%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (836 samples, 1.37%)</title><rect x="64.4227%" y="149" width="1.3690%" height="15" fill="rgb(254,30,23)" fg:x="39341" fg:w="836"/><text x="64.6727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (185 samples, 0.30%)</title><rect x="65.4887%" y="133" width="0.3029%" height="15" fill="rgb(235,160,14)" fg:x="39992" fg:w="185"/><text x="65.7387%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (136 samples, 0.22%)</title><rect x="65.7917%" y="197" width="0.2227%" height="15" fill="rgb(212,155,44)" fg:x="40177" fg:w="136"/><text x="66.0417%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (268 samples, 0.44%)</title><rect x="66.0144%" y="197" width="0.4389%" height="15" fill="rgb(226,2,50)" fg:x="40313" fg:w="268"/><text x="66.2644%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,185 samples, 3.58%)</title><rect x="62.8949%" y="229" width="3.5780%" height="15" fill="rgb(234,177,6)" fg:x="38408" fg:w="2185"/><text x="63.1449%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,799 samples, 2.95%)</title><rect x="63.5269%" y="213" width="2.9459%" height="15" fill="rgb(217,24,9)" fg:x="38794" fg:w="1799"/><text x="63.7769%" y="223.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="66.4532%" y="197" width="0.0197%" height="15" fill="rgb(220,13,46)" fg:x="40581" fg:w="12"/><text x="66.7032%" y="207.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,424 samples, 3.97%)</title><rect x="62.5346%" y="245" width="3.9694%" height="15" fill="rgb(239,221,27)" fg:x="38188" fg:w="2424"/><text x="62.7846%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="66.4729%" y="229" width="0.0311%" height="15" fill="rgb(222,198,25)" fg:x="40593" fg:w="19"/><text x="66.7229%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (16 samples, 0.03%)</title><rect x="67.0018%" y="229" width="0.0262%" height="15" fill="rgb(211,99,13)" fg:x="40916" fg:w="16"/><text x="67.2518%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (53 samples, 0.09%)</title><rect x="67.6192%" y="213" width="0.0868%" height="15" fill="rgb(232,111,31)" fg:x="41293" fg:w="53"/><text x="67.8692%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.05%)</title><rect x="68.4068%" y="197" width="0.0475%" height="15" fill="rgb(245,82,37)" fg:x="41774" fg:w="29"/><text x="68.6568%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (59 samples, 0.10%)</title><rect x="69.1224%" y="181" width="0.0966%" height="15" fill="rgb(227,149,46)" fg:x="42211" fg:w="59"/><text x="69.3724%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.05%)</title><rect x="69.6530%" y="165" width="0.0475%" height="15" fill="rgb(218,36,50)" fg:x="42535" fg:w="29"/><text x="69.9030%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (28 samples, 0.05%)</title><rect x="69.9330%" y="149" width="0.0459%" height="15" fill="rgb(226,80,48)" fg:x="42706" fg:w="28"/><text x="70.1830%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="70.0477%" y="133" width="0.0147%" height="15" fill="rgb(238,224,15)" fg:x="42776" fg:w="9"/><text x="70.2977%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (2,185 samples, 3.58%)</title><rect x="66.5040%" y="245" width="3.5780%" height="15" fill="rgb(241,136,10)" fg:x="40612" fg:w="2185"/><text x="66.7540%" y="255.50">rust..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,865 samples, 3.05%)</title><rect x="67.0280%" y="229" width="3.0540%" height="15" fill="rgb(208,32,45)" fg:x="40932" fg:w="1865"/><text x="67.2780%" y="239.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,451 samples, 2.38%)</title><rect x="67.7060%" y="213" width="2.3761%" height="15" fill="rgb(207,135,9)" fg:x="41346" fg:w="1451"/><text x="67.9560%" y="223.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (994 samples, 1.63%)</title><rect x="68.4543%" y="197" width="1.6277%" height="15" fill="rgb(206,86,44)" fg:x="41803" fg:w="994"/><text x="68.7043%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (527 samples, 0.86%)</title><rect x="69.2191%" y="181" width="0.8630%" height="15" fill="rgb(245,177,15)" fg:x="42270" fg:w="527"/><text x="69.4691%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (233 samples, 0.38%)</title><rect x="69.7005%" y="165" width="0.3815%" height="15" fill="rgb(206,64,50)" fg:x="42564" fg:w="233"/><text x="69.9505%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (63 samples, 0.10%)</title><rect x="69.9789%" y="149" width="0.1032%" height="15" fill="rgb(234,36,40)" fg:x="42734" fg:w="63"/><text x="70.2289%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (12 samples, 0.02%)</title><rect x="70.0624%" y="133" width="0.0197%" height="15" fill="rgb(213,64,8)" fg:x="42785" fg:w="12"/><text x="70.3124%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (649 samples, 1.06%)</title><rect x="71.5853%" y="229" width="1.0628%" height="15" fill="rgb(210,75,36)" fg:x="43715" fg:w="649"/><text x="71.8353%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,220 samples, 2.00%)</title><rect x="72.6481%" y="229" width="1.9978%" height="15" fill="rgb(229,88,21)" fg:x="44364" fg:w="1220"/><text x="72.8981%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,741 samples, 6.13%)</title><rect x="70.0820%" y="245" width="6.1261%" height="15" fill="rgb(252,204,47)" fg:x="42797" fg:w="3741"/><text x="70.3320%" y="255.50">rust_qec..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (954 samples, 1.56%)</title><rect x="74.6459%" y="229" width="1.5622%" height="15" fill="rgb(208,77,27)" fg:x="45584" fg:w="954"/><text x="74.8959%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (71 samples, 0.12%)</title><rect x="76.2081%" y="245" width="0.1163%" height="15" fill="rgb(221,76,26)" fg:x="46538" fg:w="71"/><text x="76.4581%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (15,609 samples, 25.56%)</title><rect x="51.5172%" y="261" width="25.5604%" height="15" fill="rgb(225,139,18)" fg:x="31460" fg:w="15609"/><text x="51.7672%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (460 samples, 0.75%)</title><rect x="76.3244%" y="245" width="0.7533%" height="15" fill="rgb(230,137,11)" fg:x="46609" fg:w="460"/><text x="76.5744%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (76 samples, 0.12%)</title><rect x="80.4313%" y="245" width="0.1245%" height="15" fill="rgb(212,28,1)" fg:x="49117" fg:w="76"/><text x="80.6813%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.08%)</title><rect x="80.6639%" y="213" width="0.0753%" height="15" fill="rgb(248,164,17)" fg:x="49259" fg:w="46"/><text x="80.9139%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="80.7113%" y="197" width="0.0278%" height="15" fill="rgb(222,171,42)" fg:x="49288" fg:w="17"/><text x="80.9613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (61 samples, 0.10%)</title><rect x="80.6458%" y="229" width="0.0999%" height="15" fill="rgb(243,84,45)" fg:x="49248" fg:w="61"/><text x="80.8958%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (121 samples, 0.20%)</title><rect x="80.5558%" y="245" width="0.1981%" height="15" fill="rgb(252,49,23)" fg:x="49193" fg:w="121"/><text x="80.8058%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="80.7539%" y="245" width="0.0213%" height="15" fill="rgb(215,19,7)" fg:x="49314" fg:w="13"/><text x="81.0039%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (79 samples, 0.13%)</title><rect x="80.9128%" y="229" width="0.1294%" height="15" fill="rgb(238,81,41)" fg:x="49411" fg:w="79"/><text x="81.1628%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (174 samples, 0.28%)</title><rect x="80.7752%" y="245" width="0.2849%" height="15" fill="rgb(210,199,37)" fg:x="49327" fg:w="174"/><text x="81.0252%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="81.0470%" y="229" width="0.0131%" height="15" fill="rgb(244,192,49)" fg:x="49493" fg:w="8"/><text x="81.2970%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="81.0487%" y="213" width="0.0115%" height="15" fill="rgb(226,211,11)" fg:x="49494" fg:w="7"/><text x="81.2987%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="81.0667%" y="229" width="0.0213%" height="15" fill="rgb(236,162,54)" fg:x="49505" fg:w="13"/><text x="81.3167%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="81.0601%" y="245" width="0.0295%" height="15" fill="rgb(220,229,9)" fg:x="49501" fg:w="18"/><text x="81.3101%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="81.0896%" y="245" width="0.0147%" height="15" fill="rgb(250,87,22)" fg:x="49519" fg:w="9"/><text x="81.3396%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.04%)</title><rect x="81.1044%" y="245" width="0.0409%" height="15" fill="rgb(239,43,17)" fg:x="49528" fg:w="25"/><text x="81.3544%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.03%)</title><rect x="81.1109%" y="229" width="0.0344%" height="15" fill="rgb(231,177,25)" fg:x="49532" fg:w="21"/><text x="81.3609%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="81.1453%" y="245" width="0.0180%" height="15" fill="rgb(219,179,1)" fg:x="49553" fg:w="11"/><text x="81.3953%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (54 samples, 0.09%)</title><rect x="81.1633%" y="245" width="0.0884%" height="15" fill="rgb(238,219,53)" fg:x="49564" fg:w="54"/><text x="81.4133%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="81.2550%" y="245" width="0.0213%" height="15" fill="rgb(232,167,36)" fg:x="49620" fg:w="13"/><text x="81.5050%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.04%)</title><rect x="81.2845%" y="245" width="0.0409%" height="15" fill="rgb(244,19,51)" fg:x="49638" fg:w="25"/><text x="81.5345%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.06%)</title><rect x="81.3254%" y="245" width="0.0590%" height="15" fill="rgb(224,6,22)" fg:x="49663" fg:w="36"/><text x="81.5754%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="81.4417%" y="181" width="0.0180%" height="15" fill="rgb(224,145,5)" fg:x="49734" fg:w="11"/><text x="81.6917%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="81.4335%" y="197" width="0.0311%" height="15" fill="rgb(234,130,49)" fg:x="49729" fg:w="19"/><text x="81.6835%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 0.06%)</title><rect x="81.4089%" y="245" width="0.0622%" height="15" fill="rgb(254,6,2)" fg:x="49714" fg:w="38"/><text x="81.6589%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="81.4171%" y="229" width="0.0540%" height="15" fill="rgb(208,96,46)" fg:x="49719" fg:w="33"/><text x="81.6671%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.05%)</title><rect x="81.4204%" y="213" width="0.0508%" height="15" fill="rgb(239,3,39)" fg:x="49721" fg:w="31"/><text x="81.6704%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 0.08%)</title><rect x="81.5645%" y="229" width="0.0753%" height="15" fill="rgb(233,210,1)" fg:x="49809" fg:w="46"/><text x="81.8145%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (85 samples, 0.14%)</title><rect x="81.6398%" y="229" width="0.1392%" height="15" fill="rgb(244,137,37)" fg:x="49855" fg:w="85"/><text x="81.8898%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (233 samples, 0.38%)</title><rect x="81.4712%" y="245" width="0.3815%" height="15" fill="rgb(240,136,2)" fg:x="49752" fg:w="233"/><text x="81.7212%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (45 samples, 0.07%)</title><rect x="81.7790%" y="229" width="0.0737%" height="15" fill="rgb(239,18,37)" fg:x="49940" fg:w="45"/><text x="82.0290%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (105 samples, 0.17%)</title><rect x="81.8527%" y="245" width="0.1719%" height="15" fill="rgb(218,185,22)" fg:x="49985" fg:w="105"/><text x="82.1027%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.05%)</title><rect x="82.0296%" y="245" width="0.0508%" height="15" fill="rgb(225,218,4)" fg:x="50093" fg:w="31"/><text x="82.2796%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (74 samples, 0.12%)</title><rect x="82.2850%" y="197" width="0.1212%" height="15" fill="rgb(230,182,32)" fg:x="50249" fg:w="74"/><text x="82.5350%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="82.3505%" y="181" width="0.0557%" height="15" fill="rgb(242,56,43)" fg:x="50289" fg:w="34"/><text x="82.6005%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (145 samples, 0.24%)</title><rect x="82.1753%" y="213" width="0.2374%" height="15" fill="rgb(233,99,24)" fg:x="50182" fg:w="145"/><text x="82.4253%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="82.4308%" y="181" width="0.0131%" height="15" fill="rgb(234,209,42)" fg:x="50338" fg:w="8"/><text x="82.6808%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.06%)</title><rect x="82.4128%" y="213" width="0.0557%" height="15" fill="rgb(227,7,12)" fg:x="50327" fg:w="34"/><text x="82.6628%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.05%)</title><rect x="82.4209%" y="197" width="0.0475%" height="15" fill="rgb(245,203,43)" fg:x="50332" fg:w="29"/><text x="82.6709%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.02%)</title><rect x="82.4439%" y="181" width="0.0246%" height="15" fill="rgb(238,205,33)" fg:x="50346" fg:w="15"/><text x="82.6939%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (220 samples, 0.36%)</title><rect x="82.1131%" y="229" width="0.3603%" height="15" fill="rgb(231,56,7)" fg:x="50144" fg:w="220"/><text x="82.3631%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="82.4733%" y="229" width="0.0131%" height="15" fill="rgb(244,186,29)" fg:x="50364" fg:w="8"/><text x="82.7233%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (253 samples, 0.41%)</title><rect x="82.0803%" y="245" width="0.4143%" height="15" fill="rgb(234,111,31)" fg:x="50124" fg:w="253"/><text x="82.3303%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (13 samples, 0.02%)</title><rect x="82.4946%" y="245" width="0.0213%" height="15" fill="rgb(241,149,10)" fg:x="50377" fg:w="13"/><text x="82.7446%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,324 samples, 5.44%)</title><rect x="77.0776%" y="261" width="5.4432%" height="15" fill="rgb(249,206,44)" fg:x="47069" fg:w="3324"/><text x="77.3276%" y="271.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (49,800 samples, 81.55%)</title><rect x="0.9727%" y="293" width="81.5498%" height="15" fill="rgb(251,153,30)" fg:x="594" fg:w="49800"/><text x="1.2227%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,288 samples, 80.71%)</title><rect x="1.8111%" y="277" width="80.7113%" height="15" fill="rgb(239,152,38)" fg:x="1106" fg:w="49288"/><text x="2.0611%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (998 samples, 1.63%)</title><rect x="82.5225%" y="293" width="1.6343%" height="15" fill="rgb(249,139,47)" fg:x="50394" fg:w="998"/><text x="82.7725%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (200 samples, 0.33%)</title><rect x="84.1567%" y="293" width="0.3275%" height="15" fill="rgb(244,64,35)" fg:x="51392" fg:w="200"/><text x="84.4067%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (86 samples, 0.14%)</title><rect x="84.3434%" y="277" width="0.1408%" height="15" fill="rgb(216,46,15)" fg:x="51506" fg:w="86"/><text x="84.5934%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (5,049 samples, 8.27%)</title><rect x="84.4843%" y="293" width="8.2680%" height="15" fill="rgb(250,74,19)" fg:x="51592" fg:w="5049"/><text x="84.7343%" y="303.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (118 samples, 0.19%)</title><rect x="92.7588%" y="277" width="0.1932%" height="15" fill="rgb(249,42,33)" fg:x="56645" fg:w="118"/><text x="93.0088%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (412 samples, 0.67%)</title><rect x="92.7522%" y="293" width="0.6747%" height="15" fill="rgb(242,149,17)" fg:x="56641" fg:w="412"/><text x="93.0022%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (290 samples, 0.47%)</title><rect x="92.9520%" y="277" width="0.4749%" height="15" fill="rgb(244,29,21)" fg:x="56763" fg:w="290"/><text x="93.2020%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (27 samples, 0.04%)</title><rect x="93.4269%" y="293" width="0.0442%" height="15" fill="rgb(220,130,37)" fg:x="57053" fg:w="27"/><text x="93.6769%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,388 samples, 5.55%)</title><rect x="93.4744%" y="293" width="5.5480%" height="15" fill="rgb(211,67,2)" fg:x="57082" fg:w="3388"/><text x="93.7244%" y="303.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,471 samples, 4.05%)</title><rect x="94.9760%" y="277" width="4.0464%" height="15" fill="rgb(235,68,52)" fg:x="57999" fg:w="2471"/><text x="95.2260%" y="287.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (9 samples, 0.01%)</title><rect x="99.0224%" y="293" width="0.0147%" height="15" fill="rgb(246,142,3)" fg:x="60470" fg:w="9"/><text x="99.2724%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,922 samples, 98.13%)</title><rect x="0.9138%" y="373" width="98.1250%" height="15" fill="rgb(241,25,7)" fg:x="558" fg:w="59922"/><text x="1.1638%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,922 samples, 98.13%)</title><rect x="0.9138%" y="357" width="98.1250%" height="15" fill="rgb(242,119,39)" fg:x="558" fg:w="59922"/><text x="1.1638%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,922 samples, 98.13%)</title><rect x="0.9138%" y="341" width="98.1250%" height="15" fill="rgb(241,98,45)" fg:x="558" fg:w="59922"/><text x="1.1638%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,922 samples, 98.13%)</title><rect x="0.9138%" y="325" width="98.1250%" height="15" fill="rgb(254,28,30)" fg:x="558" fg:w="59922"/><text x="1.1638%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,919 samples, 98.12%)</title><rect x="0.9187%" y="309" width="98.1201%" height="15" fill="rgb(241,142,54)" fg:x="561" fg:w="59919"/><text x="1.1687%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="99.0388%" y="341" width="0.0115%" height="15" fill="rgb(222,85,15)" fg:x="60480" fg:w="7"/><text x="99.2888%" y="351.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (7 samples, 0.01%)</title><rect x="99.0502%" y="341" width="0.0115%" height="15" fill="rgb(210,85,47)" fg:x="60487" fg:w="7"/><text x="99.3002%" y="351.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (35 samples, 0.06%)</title><rect x="99.2729%" y="325" width="0.0573%" height="15" fill="rgb(224,206,25)" fg:x="60623" fg:w="35"/><text x="99.5229%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="99.4056%" y="309" width="0.0180%" height="15" fill="rgb(243,201,19)" fg:x="60704" fg:w="11"/><text x="99.6556%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84 samples, 0.14%)</title><rect x="99.3302%" y="325" width="0.1376%" height="15" fill="rgb(236,59,4)" fg:x="60658" fg:w="84"/><text x="99.5802%" y="335.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.04%)</title><rect x="99.4236%" y="309" width="0.0442%" height="15" fill="rgb(254,179,45)" fg:x="60715" fg:w="27"/><text x="99.6736%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="99.4432%" y="293" width="0.0246%" height="15" fill="rgb(226,14,10)" fg:x="60727" fg:w="15"/><text x="99.6932%" y="303.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (20 samples, 0.03%)</title><rect x="99.7658%" y="309" width="0.0328%" height="15" fill="rgb(244,27,41)" fg:x="60924" fg:w="20"/><text x="100.0158%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (37 samples, 0.06%)</title><rect x="99.8002%" y="309" width="0.0606%" height="15" fill="rgb(235,35,32)" fg:x="60945" fg:w="37"/><text x="100.0502%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (502 samples, 0.82%)</title><rect x="99.0633%" y="341" width="0.8220%" height="15" fill="rgb(218,68,31)" fg:x="60495" fg:w="502"/><text x="99.3133%" y="351.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (253 samples, 0.41%)</title><rect x="99.4711%" y="325" width="0.4143%" height="15" fill="rgb(207,120,37)" fg:x="60744" fg:w="253"/><text x="99.7211%" y="335.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="99.8608%" y="309" width="0.0246%" height="15" fill="rgb(227,98,0)" fg:x="60982" fg:w="15"/><text x="100.1108%" y="319.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="99.8870%" y="325" width="0.0262%" height="15" fill="rgb(207,7,3)" fg:x="60998" fg:w="16"/><text x="100.1370%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (43 samples, 0.07%)</title><rect x="99.9148%" y="325" width="0.0704%" height="15" fill="rgb(206,98,19)" fg:x="61015" fg:w="43"/><text x="100.1648%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (12 samples, 0.02%)</title><rect x="99.9656%" y="309" width="0.0197%" height="15" fill="rgb(217,5,26)" fg:x="61046" fg:w="12"/><text x="100.2156%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (63 samples, 0.10%)</title><rect x="99.8854%" y="341" width="0.1032%" height="15" fill="rgb(235,190,38)" fg:x="60997" fg:w="63"/><text x="100.1354%" y="351.50"></text></g><g><title>all (61,067 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(247,86,24)" fg:x="0" fg:w="61067"/><text x="0.2500%" y="399.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (587 samples, 0.96%)</title><rect x="99.0388%" y="373" width="0.9612%" height="15" fill="rgb(205,101,16)" fg:x="60480" fg:w="587"/><text x="99.2888%" y="383.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (587 samples, 0.96%)</title><rect x="99.0388%" y="357" width="0.9612%" height="15" fill="rgb(246,168,33)" fg:x="60480" fg:w="587"/><text x="99.2888%" y="367.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="99.9885%" y="341" width="0.0115%" height="15" fill="rgb(231,114,1)" fg:x="61060" fg:w="7"/><text x="100.2385%" y="351.50"></text></g></svg></svg>