<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61096"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="0.0098%" y="117" width="0.0164%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="10"/><text x="0.2598%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (13 samples, 0.02%)</title><rect x="0.0360%" y="117" width="0.0213%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="13"/><text x="0.2860%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (13 samples, 0.02%)</title><rect x="0.0360%" y="101" width="0.0213%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="13"/><text x="0.2860%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="0.0360%" y="85" width="0.0213%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="13"/><text x="0.2860%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="0.0360%" y="69" width="0.0213%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="13"/><text x="0.2860%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (11 samples, 0.02%)</title><rect x="0.0393%" y="53" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="24" fg:w="11"/><text x="0.2893%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0442%" y="37" width="0.0131%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="8"/><text x="0.2942%" y="47.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (62 samples, 0.10%)</title><rect x="0.0671%" y="117" width="0.1015%" height="15" fill="rgb(228,23,34)" fg:x="41" fg:w="62"/><text x="0.3171%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (24 samples, 0.04%)</title><rect x="0.1686%" y="117" width="0.0393%" height="15" fill="rgb(218,30,26)" fg:x="103" fg:w="24"/><text x="0.4186%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (8 samples, 0.01%)</title><rect x="0.8822%" y="101" width="0.0131%" height="15" fill="rgb(220,122,19)" fg:x="539" fg:w="8"/><text x="1.1322%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (51 samples, 0.08%)</title><rect x="0.8953%" y="101" width="0.0835%" height="15" fill="rgb(250,228,42)" fg:x="547" fg:w="51"/><text x="1.1453%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="1.0393%" y="85" width="0.0196%" height="15" fill="rgb(240,193,28)" fg:x="635" fg:w="12"/><text x="1.2893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="1.0655%" y="69" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="651" fg:w="7"/><text x="1.3155%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="1.0655%" y="53" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="651" fg:w="7"/><text x="1.3155%" y="63.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (76 samples, 0.12%)</title><rect x="0.9788%" y="101" width="0.1244%" height="15" fill="rgb(217,207,13)" fg:x="598" fg:w="76"/><text x="1.2288%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27 samples, 0.04%)</title><rect x="1.0590%" y="85" width="0.0442%" height="15" fill="rgb(231,73,38)" fg:x="647" fg:w="27"/><text x="1.3090%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="1.0786%" y="69" width="0.0246%" height="15" fill="rgb(225,20,46)" fg:x="659" fg:w="15"/><text x="1.3286%" y="79.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (12 samples, 0.02%)</title><rect x="1.4027%" y="85" width="0.0196%" height="15" fill="rgb(210,31,41)" fg:x="857" fg:w="12"/><text x="1.6527%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (44 samples, 0.07%)</title><rect x="1.4224%" y="85" width="0.0720%" height="15" fill="rgb(221,200,47)" fg:x="869" fg:w="44"/><text x="1.6724%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (798 samples, 1.31%)</title><rect x="0.2161%" y="117" width="1.3061%" height="15" fill="rgb(226,26,5)" fg:x="132" fg:w="798"/><text x="0.4661%" y="127.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (254 samples, 0.42%)</title><rect x="1.1065%" y="101" width="0.4157%" height="15" fill="rgb(249,33,26)" fg:x="676" fg:w="254"/><text x="1.3565%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.03%)</title><rect x="1.4944%" y="85" width="0.0278%" height="15" fill="rgb(235,183,28)" fg:x="913" fg:w="17"/><text x="1.7444%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="1.5058%" y="69" width="0.0164%" height="15" fill="rgb(221,5,38)" fg:x="920" fg:w="10"/><text x="1.7558%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.05%)</title><rect x="1.5337%" y="101" width="0.0524%" height="15" fill="rgb(247,18,42)" fg:x="937" fg:w="32"/><text x="1.7837%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.01%)</title><rect x="1.6679%" y="85" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="1019" fg:w="7"/><text x="1.9179%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="1.6679%" y="69" width="0.0115%" height="15" fill="rgb(249,31,29)" fg:x="1019" fg:w="7"/><text x="1.9179%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (109 samples, 0.18%)</title><rect x="1.5958%" y="101" width="0.1784%" height="15" fill="rgb(225,111,53)" fg:x="975" fg:w="109"/><text x="1.8458%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (55 samples, 0.09%)</title><rect x="1.6842%" y="85" width="0.0900%" height="15" fill="rgb(238,160,17)" fg:x="1029" fg:w="55"/><text x="1.9342%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (159 samples, 0.26%)</title><rect x="1.5222%" y="117" width="0.2602%" height="15" fill="rgb(214,148,48)" fg:x="930" fg:w="159"/><text x="1.7722%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7874%" y="117" width="0.0115%" height="15" fill="rgb(232,36,49)" fg:x="1092" fg:w="7"/><text x="2.0374%" y="127.50"></text></g><g><title>dyld`start (1,102 samples, 1.80%)</title><rect x="0.0000%" y="357" width="1.8037%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="1102"/><text x="0.2500%" y="367.50">d..</text></g><g><title>rust_qecp`main (1,098 samples, 1.80%)</title><rect x="0.0065%" y="341" width="1.7972%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,098 samples, 1.80%)</title><rect x="0.0065%" y="325" width="1.7972%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,098 samples, 1.80%)</title><rect x="0.0065%" y="309" width="1.7972%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="319.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,098 samples, 1.80%)</title><rect x="0.0065%" y="293" width="1.7972%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,098 samples, 1.80%)</title><rect x="0.0065%" y="277" width="1.7972%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,098 samples, 1.80%)</title><rect x="0.0065%" y="261" width="1.7972%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,098 samples, 1.80%)</title><rect x="0.0065%" y="245" width="1.7972%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,098 samples, 1.80%)</title><rect x="0.0065%" y="229" width="1.7972%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="239.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,098 samples, 1.80%)</title><rect x="0.0065%" y="213" width="1.7972%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="223.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,098 samples, 1.80%)</title><rect x="0.0065%" y="197" width="1.7972%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="207.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,098 samples, 1.80%)</title><rect x="0.0065%" y="181" width="1.7972%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="191.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,098 samples, 1.80%)</title><rect x="0.0065%" y="165" width="1.7972%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,098 samples, 1.80%)</title><rect x="0.0065%" y="149" width="1.7972%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="159.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,098 samples, 1.80%)</title><rect x="0.0065%" y="133" width="1.7972%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1098"/><text x="0.2565%" y="143.50">r..</text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="1.8184%" y="277" width="0.0180%" height="15" fill="rgb(206,96,30)" fg:x="1111" fg:w="11"/><text x="2.0684%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="1.8692%" y="261" width="0.0344%" height="15" fill="rgb(218,138,4)" fg:x="1142" fg:w="21"/><text x="2.1192%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="1.9117%" y="261" width="0.0213%" height="15" fill="rgb(250,191,14)" fg:x="1168" fg:w="13"/><text x="2.1617%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (28 samples, 0.05%)</title><rect x="1.9330%" y="261" width="0.0458%" height="15" fill="rgb(239,60,40)" fg:x="1181" fg:w="28"/><text x="2.1830%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (9 samples, 0.01%)</title><rect x="1.9641%" y="245" width="0.0147%" height="15" fill="rgb(206,27,48)" fg:x="1200" fg:w="9"/><text x="2.2141%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="1.9658%" y="229" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="1201" fg:w="8"/><text x="2.2158%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="1.9658%" y="213" width="0.0131%" height="15" fill="rgb(250,213,24)" fg:x="1201" fg:w="8"/><text x="2.2158%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="26.1932%" y="245" width="0.0147%" height="15" fill="rgb(247,123,22)" fg:x="16003" fg:w="9"/><text x="26.4432%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="26.2079%" y="245" width="0.0180%" height="15" fill="rgb(231,138,38)" fg:x="16012" fg:w="11"/><text x="26.4579%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="26.2259%" y="245" width="0.0524%" height="15" fill="rgb(231,145,46)" fg:x="16023" fg:w="32"/><text x="26.4759%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="26.2587%" y="229" width="0.0196%" height="15" fill="rgb(251,118,11)" fg:x="16043" fg:w="12"/><text x="26.5087%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="26.2881%" y="245" width="0.0180%" height="15" fill="rgb(217,147,25)" fg:x="16061" fg:w="11"/><text x="26.5381%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.04%)</title><rect x="26.3160%" y="245" width="0.0426%" height="15" fill="rgb(247,81,37)" fg:x="16078" fg:w="26"/><text x="26.5660%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="26.3667%" y="245" width="0.0115%" height="15" fill="rgb(209,12,38)" fg:x="16109" fg:w="7"/><text x="26.6167%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="26.3880%" y="181" width="0.0131%" height="15" fill="rgb(227,1,9)" fg:x="16122" fg:w="8"/><text x="26.6380%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.03%)</title><rect x="26.3831%" y="197" width="0.0278%" height="15" fill="rgb(248,47,43)" fg:x="16119" fg:w="17"/><text x="26.6331%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.03%)</title><rect x="26.3782%" y="245" width="0.0344%" height="15" fill="rgb(221,10,30)" fg:x="16116" fg:w="21"/><text x="26.6282%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="26.3814%" y="229" width="0.0311%" height="15" fill="rgb(210,229,1)" fg:x="16118" fg:w="19"/><text x="26.6314%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="26.3831%" y="213" width="0.0295%" height="15" fill="rgb(222,148,37)" fg:x="16119" fg:w="18"/><text x="26.6331%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="26.4322%" y="181" width="0.0147%" height="15" fill="rgb(234,67,33)" fg:x="16149" fg:w="9"/><text x="26.6822%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="26.4731%" y="165" width="0.0115%" height="15" fill="rgb(247,98,35)" fg:x="16174" fg:w="7"/><text x="26.7231%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (25 samples, 0.04%)</title><rect x="26.4485%" y="181" width="0.0409%" height="15" fill="rgb(247,138,52)" fg:x="16159" fg:w="25"/><text x="26.6985%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (56 samples, 0.09%)</title><rect x="26.4289%" y="197" width="0.0917%" height="15" fill="rgb(213,79,30)" fg:x="16147" fg:w="56"/><text x="26.6789%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.03%)</title><rect x="26.4895%" y="181" width="0.0311%" height="15" fill="rgb(246,177,23)" fg:x="16184" fg:w="19"/><text x="26.7395%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (70 samples, 0.11%)</title><rect x="26.4240%" y="213" width="0.1146%" height="15" fill="rgb(230,62,27)" fg:x="16144" fg:w="70"/><text x="26.6740%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (78 samples, 0.13%)</title><rect x="26.4125%" y="245" width="0.1277%" height="15" fill="rgb(216,154,8)" fg:x="16137" fg:w="78"/><text x="26.6625%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (73 samples, 0.12%)</title><rect x="26.4207%" y="229" width="0.1195%" height="15" fill="rgb(244,35,45)" fg:x="16142" fg:w="73"/><text x="26.6707%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (262 samples, 0.43%)</title><rect x="29.1328%" y="213" width="0.4288%" height="15" fill="rgb(251,115,12)" fg:x="17799" fg:w="262"/><text x="29.3828%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (267 samples, 0.44%)</title><rect x="29.1279%" y="229" width="0.4370%" height="15" fill="rgb(240,54,50)" fg:x="17796" fg:w="267"/><text x="29.3779%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (672 samples, 1.10%)</title><rect x="29.5682%" y="229" width="1.0999%" height="15" fill="rgb(233,84,52)" fg:x="18065" fg:w="672"/><text x="29.8182%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (36 samples, 0.06%)</title><rect x="30.9186%" y="213" width="0.0589%" height="15" fill="rgb(207,117,47)" fg:x="18890" fg:w="36"/><text x="31.1686%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="30.9775%" y="213" width="0.0213%" height="15" fill="rgb(249,43,39)" fg:x="18926" fg:w="13"/><text x="31.2275%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (1,511 samples, 2.47%)</title><rect x="30.9988%" y="213" width="2.4732%" height="15" fill="rgb(209,38,44)" fg:x="18939" fg:w="1511"/><text x="31.2488%" y="223.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::Finish (47 samples, 0.08%)</title><rect x="33.4719%" y="213" width="0.0769%" height="15" fill="rgb(236,212,23)" fg:x="20450" fg:w="47"/><text x="33.7219%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (7 samples, 0.01%)</title><rect x="33.5488%" y="213" width="0.0115%" height="15" fill="rgb(242,79,21)" fg:x="20497" fg:w="7"/><text x="33.7988%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (542 samples, 0.89%)</title><rect x="33.5668%" y="213" width="0.8871%" height="15" fill="rgb(211,96,35)" fg:x="20508" fg:w="542"/><text x="33.8168%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (885 samples, 1.45%)</title><rect x="34.8828%" y="197" width="1.4485%" height="15" fill="rgb(253,215,40)" fg:x="21312" fg:w="885"/><text x="35.1328%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (436 samples, 0.71%)</title><rect x="36.3363%" y="181" width="0.7136%" height="15" fill="rgb(211,81,21)" fg:x="22200" fg:w="436"/><text x="36.5863%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (440 samples, 0.72%)</title><rect x="36.3346%" y="197" width="0.7202%" height="15" fill="rgb(208,190,38)" fg:x="22199" fg:w="440"/><text x="36.5846%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (12 samples, 0.02%)</title><rect x="47.9933%" y="165" width="0.0196%" height="15" fill="rgb(235,213,38)" fg:x="29322" fg:w="12"/><text x="48.2433%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (6,689 samples, 10.95%)</title><rect x="37.0695%" y="197" width="10.9483%" height="15" fill="rgb(237,122,38)" fg:x="22648" fg:w="6689"/><text x="37.3195%" y="207.50">rust_qecp`Perfec..</text></g><g><title>rust_qecp`PerfectMatching::Augment (15 samples, 0.02%)</title><rect x="47.9933%" y="181" width="0.0246%" height="15" fill="rgb(244,218,35)" fg:x="29322" fg:w="15"/><text x="48.2433%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (146 samples, 0.24%)</title><rect x="52.4715%" y="149" width="0.2390%" height="15" fill="rgb(240,68,47)" fg:x="32058" fg:w="146"/><text x="52.7215%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,327 samples, 2.17%)</title><rect x="50.5581%" y="181" width="2.1720%" height="15" fill="rgb(210,16,53)" fg:x="30889" fg:w="1327"/><text x="50.8081%" y="191.50">r..</text></g><g><title>rust_qecp`PerfectMatching::Augment (158 samples, 0.26%)</title><rect x="52.4715%" y="165" width="0.2586%" height="15" fill="rgb(235,124,12)" fg:x="32058" fg:w="158"/><text x="52.7215%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (12 samples, 0.02%)</title><rect x="52.7105%" y="149" width="0.0196%" height="15" fill="rgb(224,169,11)" fg:x="32204" fg:w="12"/><text x="52.9605%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (3,288 samples, 5.38%)</title><rect x="48.0244%" y="197" width="5.3817%" height="15" fill="rgb(250,166,2)" fg:x="29341" fg:w="3288"/><text x="48.2744%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (413 samples, 0.68%)</title><rect x="52.7301%" y="181" width="0.6760%" height="15" fill="rgb(242,216,29)" fg:x="32216" fg:w="413"/><text x="52.9801%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (3,695 samples, 6.05%)</title><rect x="54.1607%" y="181" width="6.0479%" height="15" fill="rgb(230,116,27)" fg:x="33090" fg:w="3695"/><text x="54.4107%" y="191.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (4,162 samples, 6.81%)</title><rect x="53.4061%" y="197" width="6.8122%" height="15" fill="rgb(228,99,48)" fg:x="32629" fg:w="4162"/><text x="53.6561%" y="207.50">rust_qecp..</text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (2,898 samples, 4.74%)</title><rect x="60.2200%" y="197" width="4.7434%" height="15" fill="rgb(253,11,6)" fg:x="36792" fg:w="2898"/><text x="60.4700%" y="207.50">rust_q..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (65 samples, 0.11%)</title><rect x="70.2010%" y="165" width="0.1064%" height="15" fill="rgb(247,143,39)" fg:x="42890" fg:w="65"/><text x="70.4510%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (82 samples, 0.13%)</title><rect x="70.2010%" y="181" width="0.1342%" height="15" fill="rgb(236,97,10)" fg:x="42890" fg:w="82"/><text x="70.4510%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (17 samples, 0.03%)</title><rect x="70.3074%" y="165" width="0.0278%" height="15" fill="rgb(233,208,19)" fg:x="42955" fg:w="17"/><text x="70.5574%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,320 samples, 5.43%)</title><rect x="64.9633%" y="197" width="5.4341%" height="15" fill="rgb(216,164,2)" fg:x="39690" fg:w="3320"/><text x="65.2133%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (38 samples, 0.06%)</title><rect x="70.3352%" y="181" width="0.0622%" height="15" fill="rgb(220,129,5)" fg:x="42972" fg:w="38"/><text x="70.5852%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (22,460 samples, 36.76%)</title><rect x="34.4540%" y="213" width="36.7618%" height="15" fill="rgb(242,17,10)" fg:x="21050" fg:w="22460"/><text x="34.7040%" y="223.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (497 samples, 0.81%)</title><rect x="70.4023%" y="197" width="0.8135%" height="15" fill="rgb(242,107,0)" fg:x="43013" fg:w="497"/><text x="70.6523%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (8 samples, 0.01%)</title><rect x="71.2158%" y="213" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="43510" fg:w="8"/><text x="71.4658%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (27,554 samples, 45.10%)</title><rect x="26.5484%" y="245" width="45.0995%" height="15" fill="rgb(233,223,10)" fg:x="16220" fg:w="27554"/><text x="26.7984%" y="255.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (25,036 samples, 40.98%)</title><rect x="30.6698%" y="229" width="40.9781%" height="15" fill="rgb(215,21,27)" fg:x="18738" fg:w="25036"/><text x="30.9198%" y="239.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (256 samples, 0.42%)</title><rect x="71.2289%" y="213" width="0.4190%" height="15" fill="rgb(232,23,21)" fg:x="43518" fg:w="256"/><text x="71.4789%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="72.5465%" y="229" width="0.0196%" height="15" fill="rgb(244,5,23)" fg:x="44323" fg:w="12"/><text x="72.7965%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="72.5547%" y="213" width="0.0115%" height="15" fill="rgb(226,81,46)" fg:x="44328" fg:w="7"/><text x="72.8047%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="72.5759%" y="229" width="0.0229%" height="15" fill="rgb(247,70,30)" fg:x="44341" fg:w="14"/><text x="72.8259%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="72.5776%" y="213" width="0.0213%" height="15" fill="rgb(212,68,19)" fg:x="44342" fg:w="13"/><text x="72.8276%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="72.5809%" y="197" width="0.0180%" height="15" fill="rgb(240,187,13)" fg:x="44344" fg:w="11"/><text x="72.8309%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (43,134 samples, 70.60%)</title><rect x="2.0018%" y="261" width="70.6004%" height="15" fill="rgb(223,113,26)" fg:x="1223" fg:w="43134"/><text x="2.2518%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (583 samples, 0.95%)</title><rect x="71.6479%" y="245" width="0.9542%" height="15" fill="rgb(206,192,2)" fg:x="43774" fg:w="583"/><text x="71.8979%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (43,357 samples, 70.97%)</title><rect x="1.8446%" y="277" width="70.9654%" height="15" fill="rgb(241,108,4)" fg:x="1127" fg:w="43357"/><text x="2.0946%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (127 samples, 0.21%)</title><rect x="72.6021%" y="261" width="0.2079%" height="15" fill="rgb(247,173,49)" fg:x="44357" fg:w="127"/><text x="72.8521%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,536 samples, 2.51%)</title><rect x="72.8100%" y="277" width="2.5141%" height="15" fill="rgb(224,114,35)" fg:x="44484" fg:w="1536"/><text x="73.0600%" y="287.50">ru..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (10 samples, 0.02%)</title><rect x="75.6743%" y="261" width="0.0164%" height="15" fill="rgb(245,159,27)" fg:x="46234" fg:w="10"/><text x="75.9243%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.02%)</title><rect x="75.6743%" y="245" width="0.0164%" height="15" fill="rgb(245,172,44)" fg:x="46234" fg:w="10"/><text x="75.9243%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="75.6743%" y="229" width="0.0164%" height="15" fill="rgb(236,23,11)" fg:x="46234" fg:w="10"/><text x="75.9243%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="75.6793%" y="213" width="0.0115%" height="15" fill="rgb(205,117,38)" fg:x="46237" fg:w="7"/><text x="75.9293%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (388 samples, 0.64%)</title><rect x="75.3241%" y="277" width="0.6351%" height="15" fill="rgb(237,72,25)" fg:x="46020" fg:w="388"/><text x="75.5741%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (164 samples, 0.27%)</title><rect x="75.6907%" y="261" width="0.2684%" height="15" fill="rgb(244,70,9)" fg:x="46244" fg:w="164"/><text x="75.9407%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,648 samples, 12.52%)</title><rect x="75.9591%" y="277" width="12.5180%" height="15" fill="rgb(217,125,39)" fg:x="46408" fg:w="7648"/><text x="76.2091%" y="287.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (214 samples, 0.35%)</title><rect x="88.4804%" y="261" width="0.3503%" height="15" fill="rgb(235,36,10)" fg:x="54058" fg:w="214"/><text x="88.7304%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (696 samples, 1.14%)</title><rect x="88.4772%" y="277" width="1.1392%" height="15" fill="rgb(251,123,47)" fg:x="54056" fg:w="696"/><text x="88.7272%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (480 samples, 0.79%)</title><rect x="88.8307%" y="261" width="0.7856%" height="15" fill="rgb(221,13,13)" fg:x="54272" fg:w="480"/><text x="89.0807%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (6,337 samples, 10.37%)</title><rect x="89.6196%" y="277" width="10.3722%" height="15" fill="rgb(238,131,9)" fg:x="54754" fg:w="6337"/><text x="89.8696%" y="287.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (4,870 samples, 7.97%)</title><rect x="92.0208%" y="261" width="7.9711%" height="15" fill="rgb(211,50,8)" fg:x="56221" fg:w="4870"/><text x="92.2708%" y="271.50">rust_qecp`r..</text></g><g><title>all (61,096 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="61096"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,994 samples, 98.20%)</title><rect x="1.8037%" y="357" width="98.1963%" height="15" fill="rgb(242,14,37)" fg:x="1102" fg:w="59994"/><text x="2.0537%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,994 samples, 98.20%)</title><rect x="1.8037%" y="341" width="98.1963%" height="15" fill="rgb(246,228,12)" fg:x="1102" fg:w="59994"/><text x="2.0537%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,994 samples, 98.20%)</title><rect x="1.8037%" y="325" width="98.1963%" height="15" fill="rgb(213,55,15)" fg:x="1102" fg:w="59994"/><text x="2.0537%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,994 samples, 98.20%)</title><rect x="1.8037%" y="309" width="98.1963%" height="15" fill="rgb(209,9,3)" fg:x="1102" fg:w="59994"/><text x="2.0537%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,994 samples, 98.20%)</title><rect x="1.8037%" y="293" width="98.1963%" height="15" fill="rgb(230,59,30)" fg:x="1102" fg:w="59994"/><text x="2.0537%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>