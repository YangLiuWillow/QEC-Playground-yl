<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61613"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="0.0130%" y="117" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="7"/><text x="0.2630%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0454%" y="37" width="0.0162%" height="15" fill="rgb(217,0,24)" fg:x="28" fg:w="10"/><text x="0.2954%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (19 samples, 0.03%)</title><rect x="0.0325%" y="117" width="0.0308%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="19"/><text x="0.2825%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (19 samples, 0.03%)</title><rect x="0.0325%" y="101" width="0.0308%" height="15" fill="rgb(248,212,6)" fg:x="20" fg:w="19"/><text x="0.2825%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0325%" y="85" width="0.0308%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="19"/><text x="0.2825%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0325%" y="69" width="0.0308%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="19"/><text x="0.2825%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (17 samples, 0.03%)</title><rect x="0.0357%" y="53" width="0.0276%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="17"/><text x="0.2857%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (8 samples, 0.01%)</title><rect x="0.0633%" y="117" width="0.0130%" height="15" fill="rgb(228,23,34)" fg:x="39" fg:w="8"/><text x="0.3133%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0633%" y="101" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="39" fg:w="8"/><text x="0.3133%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0633%" y="85" width="0.0130%" height="15" fill="rgb(220,122,19)" fg:x="39" fg:w="8"/><text x="0.3133%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15 samples, 0.02%)</title><rect x="0.0763%" y="117" width="0.0243%" height="15" fill="rgb(250,228,42)" fg:x="47" fg:w="15"/><text x="0.3263%" y="127.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (24 samples, 0.04%)</title><rect x="0.1039%" y="117" width="0.0390%" height="15" fill="rgb(240,193,28)" fg:x="64" fg:w="24"/><text x="0.3539%" y="127.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (13 samples, 0.02%)</title><rect x="0.1217%" y="101" width="0.0211%" height="15" fill="rgb(216,20,37)" fg:x="75" fg:w="13"/><text x="0.3717%" y="111.50"></text></g><g><title>libsystem_c.dylib`isatty (13 samples, 0.02%)</title><rect x="0.1217%" y="85" width="0.0211%" height="15" fill="rgb(206,188,39)" fg:x="75" fg:w="13"/><text x="0.3717%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (11 samples, 0.02%)</title><rect x="0.1250%" y="69" width="0.0179%" height="15" fill="rgb(217,207,13)" fg:x="77" fg:w="11"/><text x="0.3750%" y="79.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (65 samples, 0.11%)</title><rect x="0.6606%" y="101" width="0.1055%" height="15" fill="rgb(231,73,38)" fg:x="407" fg:w="65"/><text x="0.9106%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60 samples, 0.10%)</title><rect x="0.7661%" y="101" width="0.0974%" height="15" fill="rgb(225,20,46)" fg:x="472" fg:w="60"/><text x="1.0161%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="0.8245%" y="85" width="0.0390%" height="15" fill="rgb(210,31,41)" fg:x="508" fg:w="24"/><text x="1.0745%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="0.8424%" y="69" width="0.0211%" height="15" fill="rgb(221,200,47)" fg:x="519" fg:w="13"/><text x="1.0924%" y="79.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (17 samples, 0.03%)</title><rect x="1.1426%" y="85" width="0.0276%" height="15" fill="rgb(226,26,5)" fg:x="704" fg:w="17"/><text x="1.3926%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (44 samples, 0.07%)</title><rect x="1.1702%" y="85" width="0.0714%" height="15" fill="rgb(249,33,26)" fg:x="721" fg:w="44"/><text x="1.4202%" y="95.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (240 samples, 0.39%)</title><rect x="0.8667%" y="101" width="0.3895%" height="15" fill="rgb(235,183,28)" fg:x="534" fg:w="240"/><text x="1.1167%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="1.2416%" y="85" width="0.0146%" height="15" fill="rgb(221,5,38)" fg:x="765" fg:w="9"/><text x="1.4916%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (687 samples, 1.12%)</title><rect x="0.1428%" y="117" width="1.1150%" height="15" fill="rgb(247,18,42)" fg:x="88" fg:w="687"/><text x="0.3928%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.12%)</title><rect x="1.2854%" y="101" width="0.1234%" height="15" fill="rgb(241,131,45)" fg:x="792" fg:w="76"/><text x="1.5354%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="1.4088%" y="101" width="0.0146%" height="15" fill="rgb(249,31,29)" fg:x="868" fg:w="9"/><text x="1.6588%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="1.6798%" y="85" width="0.0227%" height="15" fill="rgb(225,111,53)" fg:x="1035" fg:w="14"/><text x="1.9298%" y="95.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="1.7091%" y="85" width="0.0179%" height="15" fill="rgb(238,160,17)" fg:x="1053" fg:w="11"/><text x="1.9591%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="1.7318%" y="53" width="0.0227%" height="15" fill="rgb(214,148,48)" fg:x="1067" fg:w="14"/><text x="1.9818%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="1.7383%" y="37" width="0.0162%" height="15" fill="rgb(232,36,49)" fg:x="1071" fg:w="10"/><text x="1.9883%" y="47.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.03%)</title><rect x="1.7269%" y="85" width="0.0308%" height="15" fill="rgb(209,103,24)" fg:x="1064" fg:w="19"/><text x="1.9769%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (16 samples, 0.03%)</title><rect x="1.7318%" y="69" width="0.0260%" height="15" fill="rgb(229,88,8)" fg:x="1067" fg:w="16"/><text x="1.9818%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="1.7659%" y="85" width="0.0243%" height="15" fill="rgb(213,181,19)" fg:x="1088" fg:w="15"/><text x="2.0159%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (7 samples, 0.01%)</title><rect x="1.7902%" y="85" width="0.0114%" height="15" fill="rgb(254,191,54)" fg:x="1103" fg:w="7"/><text x="2.0402%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (405 samples, 0.66%)</title><rect x="1.4315%" y="101" width="0.6573%" height="15" fill="rgb(241,83,37)" fg:x="882" fg:w="405"/><text x="1.6815%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (177 samples, 0.29%)</title><rect x="1.8016%" y="85" width="0.2873%" height="15" fill="rgb(233,36,39)" fg:x="1110" fg:w="177"/><text x="2.0516%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (519 samples, 0.84%)</title><rect x="1.2579%" y="117" width="0.8424%" height="15" fill="rgb(226,3,54)" fg:x="775" fg:w="519"/><text x="1.5079%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (15 samples, 0.02%)</title><rect x="2.1035%" y="117" width="0.0243%" height="15" fill="rgb(245,192,40)" fg:x="1296" fg:w="15"/><text x="2.3535%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (14 samples, 0.02%)</title><rect x="2.1051%" y="101" width="0.0227%" height="15" fill="rgb(238,167,29)" fg:x="1297" fg:w="14"/><text x="2.3551%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (12 samples, 0.02%)</title><rect x="2.1083%" y="85" width="0.0195%" height="15" fill="rgb(232,182,51)" fg:x="1299" fg:w="12"/><text x="2.3583%" y="95.50"></text></g><g><title>dyld`start (1,317 samples, 2.14%)</title><rect x="0.0000%" y="357" width="2.1375%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="1317"/><text x="0.2500%" y="367.50">d..</text></g><g><title>rust_qecp`main (1,314 samples, 2.13%)</title><rect x="0.0049%" y="341" width="2.1327%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1314"/><text x="0.2549%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,314 samples, 2.13%)</title><rect x="0.0049%" y="325" width="2.1327%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1314"/><text x="0.2549%" y="335.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,314 samples, 2.13%)</title><rect x="0.0049%" y="309" width="2.1327%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1314"/><text x="0.2549%" y="319.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,314 samples, 2.13%)</title><rect x="0.0049%" y="293" width="2.1327%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1314"/><text x="0.2549%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,314 samples, 2.13%)</title><rect x="0.0049%" y="277" width="2.1327%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1314"/><text x="0.2549%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,313 samples, 2.13%)</title><rect x="0.0065%" y="261" width="2.1310%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,313 samples, 2.13%)</title><rect x="0.0065%" y="245" width="2.1310%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,313 samples, 2.13%)</title><rect x="0.0065%" y="229" width="2.1310%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="239.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,313 samples, 2.13%)</title><rect x="0.0065%" y="213" width="2.1310%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="223.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,313 samples, 2.13%)</title><rect x="0.0065%" y="197" width="2.1310%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="207.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,313 samples, 2.13%)</title><rect x="0.0065%" y="181" width="2.1310%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="191.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,313 samples, 2.13%)</title><rect x="0.0065%" y="165" width="2.1310%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,313 samples, 2.13%)</title><rect x="0.0065%" y="149" width="2.1310%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1313"/><text x="0.2565%" y="159.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,312 samples, 2.13%)</title><rect x="0.0081%" y="133" width="2.1294%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="1312"/><text x="0.2581%" y="143.50">r..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="2.1457%" y="277" width="0.0162%" height="15" fill="rgb(251,118,11)" fg:x="1322" fg:w="10"/><text x="2.3957%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="2.1619%" y="277" width="0.0211%" height="15" fill="rgb(217,147,25)" fg:x="1332" fg:w="13"/><text x="2.4119%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="2.1830%" y="277" width="0.0211%" height="15" fill="rgb(247,81,37)" fg:x="1345" fg:w="13"/><text x="2.4330%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="2.1830%" y="261" width="0.0211%" height="15" fill="rgb(209,12,38)" fg:x="1345" fg:w="13"/><text x="2.4330%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="2.2057%" y="277" width="0.0162%" height="15" fill="rgb(227,1,9)" fg:x="1359" fg:w="10"/><text x="2.4557%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="2.2317%" y="277" width="0.0406%" height="15" fill="rgb(248,47,43)" fg:x="1375" fg:w="25"/><text x="2.4817%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.08%)</title><rect x="2.2755%" y="277" width="0.0844%" height="15" fill="rgb(221,10,30)" fg:x="1402" fg:w="52"/><text x="2.5255%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.02%)</title><rect x="2.4540%" y="245" width="0.0227%" height="15" fill="rgb(210,229,1)" fg:x="1512" fg:w="14"/><text x="2.7040%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.10%)</title><rect x="2.3859%" y="261" width="0.0958%" height="15" fill="rgb(222,148,37)" fg:x="1470" fg:w="59"/><text x="2.6359%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="2.4816%" y="261" width="0.0130%" height="15" fill="rgb(234,67,33)" fg:x="1529" fg:w="8"/><text x="2.7316%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="2.4832%" y="245" width="0.0114%" height="15" fill="rgb(247,98,35)" fg:x="1530" fg:w="7"/><text x="2.7332%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (86 samples, 0.14%)</title><rect x="2.4946%" y="261" width="0.1396%" height="15" fill="rgb(247,138,52)" fg:x="1537" fg:w="86"/><text x="2.7446%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (56 samples, 0.09%)</title><rect x="2.5433%" y="245" width="0.0909%" height="15" fill="rgb(213,79,30)" fg:x="1567" fg:w="56"/><text x="2.7933%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (56 samples, 0.09%)</title><rect x="2.5433%" y="229" width="0.0909%" height="15" fill="rgb(246,177,23)" fg:x="1567" fg:w="56"/><text x="2.7933%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.28%)</title><rect x="2.3599%" y="277" width="0.2840%" height="15" fill="rgb(230,62,27)" fg:x="1454" fg:w="175"/><text x="2.6099%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="2.6715%" y="277" width="0.0308%" height="15" fill="rgb(216,154,8)" fg:x="1646" fg:w="19"/><text x="2.9215%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.05%)</title><rect x="2.7575%" y="261" width="0.0487%" height="15" fill="rgb(244,35,45)" fg:x="1699" fg:w="30"/><text x="3.0075%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="2.8322%" y="229" width="0.0162%" height="15" fill="rgb(251,115,12)" fg:x="1745" fg:w="10"/><text x="3.0822%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="2.8338%" y="213" width="0.0146%" height="15" fill="rgb(240,54,50)" fg:x="1746" fg:w="9"/><text x="3.0838%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="2.8127%" y="261" width="0.0373%" height="15" fill="rgb(233,84,52)" fg:x="1733" fg:w="23"/><text x="3.0627%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="2.8289%" y="245" width="0.0211%" height="15" fill="rgb(207,117,47)" fg:x="1743" fg:w="13"/><text x="3.0789%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.03%)</title><rect x="2.8500%" y="261" width="0.0260%" height="15" fill="rgb(249,43,39)" fg:x="1756" fg:w="16"/><text x="3.1000%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="2.9507%" y="245" width="0.0130%" height="15" fill="rgb(209,38,44)" fg:x="1818" fg:w="8"/><text x="3.2007%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.08%)</title><rect x="2.8809%" y="261" width="0.0844%" height="15" fill="rgb(236,212,23)" fg:x="1775" fg:w="52"/><text x="3.1309%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (23 samples, 0.04%)</title><rect x="2.9783%" y="261" width="0.0373%" height="15" fill="rgb(242,79,21)" fg:x="1835" fg:w="23"/><text x="3.2283%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (28 samples, 0.05%)</title><rect x="3.0156%" y="261" width="0.0454%" height="15" fill="rgb(211,96,35)" fg:x="1858" fg:w="28"/><text x="3.2656%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.01%)</title><rect x="3.0659%" y="261" width="0.0146%" height="15" fill="rgb(253,215,40)" fg:x="1889" fg:w="9"/><text x="3.3159%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (110 samples, 0.18%)</title><rect x="3.0805%" y="261" width="0.1785%" height="15" fill="rgb(211,81,21)" fg:x="1898" fg:w="110"/><text x="3.3305%" y="271.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (34 samples, 0.06%)</title><rect x="3.2591%" y="261" width="0.0552%" height="15" fill="rgb(208,190,38)" fg:x="2008" fg:w="34"/><text x="3.5091%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="3.3142%" y="261" width="0.0373%" height="15" fill="rgb(235,213,38)" fg:x="2042" fg:w="23"/><text x="3.5642%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="3.3516%" y="261" width="0.0243%" height="15" fill="rgb(237,122,38)" fg:x="2065" fg:w="15"/><text x="3.6016%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="3.3775%" y="261" width="0.0114%" height="15" fill="rgb(244,218,35)" fg:x="2081" fg:w="7"/><text x="3.6275%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="3.3905%" y="261" width="0.0114%" height="15" fill="rgb(240,68,47)" fg:x="2089" fg:w="7"/><text x="3.6405%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="3.3905%" y="245" width="0.0114%" height="15" fill="rgb(210,16,53)" fg:x="2089" fg:w="7"/><text x="3.6405%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84 samples, 0.14%)</title><rect x="3.4051%" y="261" width="0.1363%" height="15" fill="rgb(235,124,12)" fg:x="2098" fg:w="84"/><text x="3.6551%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (27 samples, 0.04%)</title><rect x="3.5415%" y="261" width="0.0438%" height="15" fill="rgb(224,169,11)" fg:x="2182" fg:w="27"/><text x="3.7915%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="3.5853%" y="261" width="0.0179%" height="15" fill="rgb(250,166,2)" fg:x="2209" fg:w="11"/><text x="3.8353%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (9 samples, 0.01%)</title><rect x="3.6161%" y="261" width="0.0146%" height="15" fill="rgb(242,216,29)" fg:x="2228" fg:w="9"/><text x="3.8661%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="5.3171%" y="245" width="0.0519%" height="15" fill="rgb(230,116,27)" fg:x="3276" fg:w="32"/><text x="5.5671%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="5.3284%" y="229" width="0.0406%" height="15" fill="rgb(228,99,48)" fg:x="3283" fg:w="25"/><text x="5.5784%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.04%)</title><rect x="5.3333%" y="213" width="0.0357%" height="15" fill="rgb(253,11,6)" fg:x="3286" fg:w="22"/><text x="5.5833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="5.3560%" y="197" width="0.0130%" height="15" fill="rgb(247,143,39)" fg:x="3300" fg:w="8"/><text x="5.6060%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="5.3804%" y="245" width="0.0114%" height="15" fill="rgb(236,97,10)" fg:x="3315" fg:w="7"/><text x="5.6304%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="5.4453%" y="165" width="0.0276%" height="15" fill="rgb(233,208,19)" fg:x="3355" fg:w="17"/><text x="5.6953%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="5.4404%" y="197" width="0.0357%" height="15" fill="rgb(216,164,2)" fg:x="3352" fg:w="22"/><text x="5.6904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="5.4437%" y="181" width="0.0325%" height="15" fill="rgb(220,129,5)" fg:x="3354" fg:w="20"/><text x="5.6937%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="5.4355%" y="213" width="0.0471%" height="15" fill="rgb(242,17,10)" fg:x="3349" fg:w="29"/><text x="5.6855%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (59 samples, 0.10%)</title><rect x="5.3950%" y="245" width="0.0958%" height="15" fill="rgb(242,107,0)" fg:x="3324" fg:w="59"/><text x="5.6450%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (44 samples, 0.07%)</title><rect x="5.4193%" y="229" width="0.0714%" height="15" fill="rgb(251,28,31)" fg:x="3339" fg:w="44"/><text x="5.6693%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,149 samples, 1.86%)</title><rect x="3.6307%" y="261" width="1.8649%" height="15" fill="rgb(233,223,10)" fg:x="2237" fg:w="1149"/><text x="3.8807%" y="271.50">r..</text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.06%)</title><rect x="17.0305%" y="245" width="0.0568%" height="15" fill="rgb(215,21,27)" fg:x="10493" fg:w="35"/><text x="17.2805%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (37 samples, 0.06%)</title><rect x="17.0873%" y="245" width="0.0601%" height="15" fill="rgb(232,23,21)" fg:x="10528" fg:w="37"/><text x="17.3373%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (85 samples, 0.14%)</title><rect x="17.1522%" y="245" width="0.1380%" height="15" fill="rgb(244,5,23)" fg:x="10568" fg:w="85"/><text x="17.4022%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.05%)</title><rect x="17.5466%" y="229" width="0.0471%" height="15" fill="rgb(226,81,46)" fg:x="10811" fg:w="29"/><text x="17.7966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (242 samples, 0.39%)</title><rect x="17.2902%" y="245" width="0.3928%" height="15" fill="rgb(247,70,30)" fg:x="10653" fg:w="242"/><text x="17.5402%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.08%)</title><rect x="17.6034%" y="229" width="0.0795%" height="15" fill="rgb(212,68,19)" fg:x="10846" fg:w="49"/><text x="17.8534%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (42 samples, 0.07%)</title><rect x="17.6148%" y="213" width="0.0682%" height="15" fill="rgb(240,187,13)" fg:x="10853" fg:w="42"/><text x="17.8648%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.04%)</title><rect x="17.6878%" y="229" width="0.0406%" height="15" fill="rgb(223,113,26)" fg:x="10898" fg:w="25"/><text x="17.9378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (29 samples, 0.05%)</title><rect x="17.6830%" y="245" width="0.0471%" height="15" fill="rgb(206,192,2)" fg:x="10895" fg:w="29"/><text x="17.9330%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="17.7300%" y="245" width="0.0179%" height="15" fill="rgb(241,108,4)" fg:x="10924" fg:w="11"/><text x="17.9800%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (36 samples, 0.06%)</title><rect x="18.0173%" y="213" width="0.0584%" height="15" fill="rgb(247,173,49)" fg:x="11101" fg:w="36"/><text x="18.2673%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (232 samples, 0.38%)</title><rect x="17.7479%" y="245" width="0.3765%" height="15" fill="rgb(224,114,35)" fg:x="10935" fg:w="232"/><text x="17.9979%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (171 samples, 0.28%)</title><rect x="17.8469%" y="229" width="0.2775%" height="15" fill="rgb(245,159,27)" fg:x="10996" fg:w="171"/><text x="18.0969%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.05%)</title><rect x="18.0757%" y="213" width="0.0487%" height="15" fill="rgb(245,172,44)" fg:x="11137" fg:w="30"/><text x="18.3257%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (66 samples, 0.11%)</title><rect x="18.1244%" y="245" width="0.1071%" height="15" fill="rgb(236,23,11)" fg:x="11167" fg:w="66"/><text x="18.3744%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (45 samples, 0.07%)</title><rect x="18.2315%" y="245" width="0.0730%" height="15" fill="rgb(205,117,38)" fg:x="11233" fg:w="45"/><text x="18.4815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="18.3046%" y="245" width="0.0260%" height="15" fill="rgb(237,72,25)" fg:x="11278" fg:w="16"/><text x="18.5546%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (29 samples, 0.05%)</title><rect x="18.3305%" y="245" width="0.0471%" height="15" fill="rgb(244,70,9)" fg:x="11294" fg:w="29"/><text x="18.5805%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.02%)</title><rect x="18.3776%" y="245" width="0.0243%" height="15" fill="rgb(217,125,39)" fg:x="11323" fg:w="15"/><text x="18.6276%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="18.4020%" y="245" width="0.0211%" height="15" fill="rgb(235,36,10)" fg:x="11338" fg:w="13"/><text x="18.6520%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="18.4231%" y="245" width="0.0195%" height="15" fill="rgb(251,123,47)" fg:x="11351" fg:w="12"/><text x="18.6731%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (140 samples, 0.23%)</title><rect x="18.4718%" y="229" width="0.2272%" height="15" fill="rgb(221,13,13)" fg:x="11381" fg:w="140"/><text x="18.7218%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="18.6600%" y="213" width="0.0390%" height="15" fill="rgb(238,131,9)" fg:x="11497" fg:w="24"/><text x="18.9100%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="18.6990%" y="229" width="0.0260%" height="15" fill="rgb(211,50,8)" fg:x="11521" fg:w="16"/><text x="18.9490%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (176 samples, 0.29%)</title><rect x="18.4425%" y="245" width="0.2857%" height="15" fill="rgb(245,182,24)" fg:x="11363" fg:w="176"/><text x="18.6925%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (29 samples, 0.05%)</title><rect x="18.7282%" y="245" width="0.0471%" height="15" fill="rgb(242,14,37)" fg:x="11539" fg:w="29"/><text x="18.9782%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (319 samples, 0.52%)</title><rect x="18.7753%" y="245" width="0.5177%" height="15" fill="rgb(246,228,12)" fg:x="11568" fg:w="319"/><text x="19.0253%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (48 samples, 0.08%)</title><rect x="19.2930%" y="245" width="0.0779%" height="15" fill="rgb(213,55,15)" fg:x="11887" fg:w="48"/><text x="19.5430%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="19.3709%" y="245" width="0.0211%" height="15" fill="rgb(209,9,3)" fg:x="11935" fg:w="13"/><text x="19.6209%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="19.3953%" y="245" width="0.0179%" height="15" fill="rgb(230,59,30)" fg:x="11950" fg:w="11"/><text x="19.6453%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="19.4164%" y="245" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="11963" fg:w="7"/><text x="19.6664%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="19.5657%" y="213" width="0.0357%" height="15" fill="rgb(220,109,13)" fg:x="12055" fg:w="22"/><text x="19.8157%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="19.5754%" y="197" width="0.0260%" height="15" fill="rgb(232,18,1)" fg:x="12061" fg:w="16"/><text x="19.8254%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="19.5787%" y="181" width="0.0227%" height="15" fill="rgb(215,41,42)" fg:x="12063" fg:w="14"/><text x="19.8287%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="19.6225%" y="165" width="0.0114%" height="15" fill="rgb(224,123,36)" fg:x="12090" fg:w="7"/><text x="19.8725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.03%)</title><rect x="19.6127%" y="181" width="0.0292%" height="15" fill="rgb(240,125,3)" fg:x="12084" fg:w="18"/><text x="19.8627%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.02%)</title><rect x="19.6501%" y="165" width="0.0243%" height="15" fill="rgb(205,98,50)" fg:x="12107" fg:w="15"/><text x="19.9001%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="19.6923%" y="149" width="0.0195%" height="15" fill="rgb(205,185,37)" fg:x="12133" fg:w="12"/><text x="19.9423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="19.6939%" y="133" width="0.0179%" height="15" fill="rgb(238,207,15)" fg:x="12134" fg:w="11"/><text x="19.9439%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="19.6874%" y="165" width="0.0292%" height="15" fill="rgb(213,199,42)" fg:x="12130" fg:w="18"/><text x="19.9374%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (47 samples, 0.08%)</title><rect x="19.6468%" y="181" width="0.0763%" height="15" fill="rgb(235,201,11)" fg:x="12105" fg:w="47"/><text x="19.8968%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (123 samples, 0.20%)</title><rect x="19.6030%" y="197" width="0.1996%" height="15" fill="rgb(207,46,11)" fg:x="12078" fg:w="123"/><text x="19.8530%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (48 samples, 0.08%)</title><rect x="19.7247%" y="181" width="0.0779%" height="15" fill="rgb(241,35,35)" fg:x="12153" fg:w="48"/><text x="19.9747%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="19.8026%" y="197" width="0.0114%" height="15" fill="rgb(243,32,47)" fg:x="12201" fg:w="7"/><text x="20.0526%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (245 samples, 0.40%)</title><rect x="19.4277%" y="245" width="0.3976%" height="15" fill="rgb(247,202,23)" fg:x="11970" fg:w="245"/><text x="19.6777%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (162 samples, 0.26%)</title><rect x="19.5624%" y="229" width="0.2629%" height="15" fill="rgb(219,102,11)" fg:x="12053" fg:w="162"/><text x="19.8124%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (137 samples, 0.22%)</title><rect x="19.6030%" y="213" width="0.2224%" height="15" fill="rgb(243,110,44)" fg:x="12078" fg:w="137"/><text x="19.8530%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (83 samples, 0.13%)</title><rect x="20.2279%" y="213" width="0.1347%" height="15" fill="rgb(222,74,54)" fg:x="12463" fg:w="83"/><text x="20.4779%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="20.3626%" y="213" width="0.0195%" height="15" fill="rgb(216,99,12)" fg:x="12546" fg:w="12"/><text x="20.6126%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (25 samples, 0.04%)</title><rect x="20.3821%" y="213" width="0.0406%" height="15" fill="rgb(226,22,26)" fg:x="12558" fg:w="25"/><text x="20.6321%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (382 samples, 0.62%)</title><rect x="19.9227%" y="229" width="0.6200%" height="15" fill="rgb(217,163,10)" fg:x="12275" fg:w="382"/><text x="20.1727%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (74 samples, 0.12%)</title><rect x="20.4226%" y="213" width="0.1201%" height="15" fill="rgb(213,25,53)" fg:x="12583" fg:w="74"/><text x="20.6726%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (54 samples, 0.09%)</title><rect x="20.4551%" y="197" width="0.0876%" height="15" fill="rgb(252,105,26)" fg:x="12603" fg:w="54"/><text x="20.7051%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (166 samples, 0.27%)</title><rect x="20.5427%" y="229" width="0.2694%" height="15" fill="rgb(220,39,43)" fg:x="12657" fg:w="166"/><text x="20.7927%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (164 samples, 0.27%)</title><rect x="20.5460%" y="213" width="0.2662%" height="15" fill="rgb(229,68,48)" fg:x="12659" fg:w="164"/><text x="20.7960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (67 samples, 0.11%)</title><rect x="21.0248%" y="213" width="0.1087%" height="15" fill="rgb(252,8,32)" fg:x="12954" fg:w="67"/><text x="21.2748%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (14 samples, 0.02%)</title><rect x="21.1335%" y="213" width="0.0227%" height="15" fill="rgb(223,20,43)" fg:x="13021" fg:w="14"/><text x="21.3835%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (28 samples, 0.05%)</title><rect x="21.1562%" y="213" width="0.0454%" height="15" fill="rgb(229,81,49)" fg:x="13035" fg:w="28"/><text x="21.4062%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (398 samples, 0.65%)</title><rect x="20.8122%" y="229" width="0.6460%" height="15" fill="rgb(236,28,36)" fg:x="12823" fg:w="398"/><text x="21.0622%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (158 samples, 0.26%)</title><rect x="21.2017%" y="213" width="0.2564%" height="15" fill="rgb(249,185,26)" fg:x="13063" fg:w="158"/><text x="21.4517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (76 samples, 0.12%)</title><rect x="21.6675%" y="197" width="0.1234%" height="15" fill="rgb(249,174,33)" fg:x="13350" fg:w="76"/><text x="21.9175%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (276 samples, 0.45%)</title><rect x="21.4581%" y="229" width="0.4480%" height="15" fill="rgb(233,201,37)" fg:x="13221" fg:w="276"/><text x="21.7081%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (231 samples, 0.37%)</title><rect x="21.5312%" y="213" width="0.3749%" height="15" fill="rgb(221,78,26)" fg:x="13266" fg:w="231"/><text x="21.7812%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (71 samples, 0.12%)</title><rect x="21.7909%" y="197" width="0.1152%" height="15" fill="rgb(250,127,30)" fg:x="13426" fg:w="71"/><text x="22.0409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.03%)</title><rect x="21.9061%" y="229" width="0.0276%" height="15" fill="rgb(230,49,44)" fg:x="13497" fg:w="17"/><text x="22.1561%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (111 samples, 0.18%)</title><rect x="22.0165%" y="197" width="0.1802%" height="15" fill="rgb(229,67,23)" fg:x="13565" fg:w="111"/><text x="22.2665%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (163 samples, 0.26%)</title><rect x="21.9337%" y="229" width="0.2646%" height="15" fill="rgb(249,83,47)" fg:x="13514" fg:w="163"/><text x="22.1837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (112 samples, 0.18%)</title><rect x="22.0165%" y="213" width="0.1818%" height="15" fill="rgb(215,43,3)" fg:x="13565" fg:w="112"/><text x="22.2665%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (38 samples, 0.06%)</title><rect x="22.1982%" y="229" width="0.0617%" height="15" fill="rgb(238,154,13)" fg:x="13677" fg:w="38"/><text x="22.4482%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (34 samples, 0.06%)</title><rect x="22.2680%" y="229" width="0.0552%" height="15" fill="rgb(219,56,2)" fg:x="13720" fg:w="34"/><text x="22.5180%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="22.3232%" y="229" width="0.0162%" height="15" fill="rgb(233,0,4)" fg:x="13754" fg:w="10"/><text x="22.5732%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="22.3394%" y="229" width="0.0211%" height="15" fill="rgb(235,30,7)" fg:x="13764" fg:w="13"/><text x="22.5894%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (38 samples, 0.06%)</title><rect x="22.4352%" y="197" width="0.0617%" height="15" fill="rgb(250,79,13)" fg:x="13823" fg:w="38"/><text x="22.6852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 0.12%)</title><rect x="22.3849%" y="213" width="0.1152%" height="15" fill="rgb(211,146,34)" fg:x="13792" fg:w="71"/><text x="22.6349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (50 samples, 0.08%)</title><rect x="22.5099%" y="213" width="0.0812%" height="15" fill="rgb(228,22,38)" fg:x="13869" fg:w="50"/><text x="22.7599%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (13 samples, 0.02%)</title><rect x="22.5699%" y="197" width="0.0211%" height="15" fill="rgb(235,168,5)" fg:x="13906" fg:w="13"/><text x="22.8199%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="22.5699%" y="181" width="0.0211%" height="15" fill="rgb(221,155,16)" fg:x="13906" fg:w="13"/><text x="22.8199%" y="191.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,707 samples, 2.77%)</title><rect x="19.8319%" y="245" width="2.7705%" height="15" fill="rgb(215,215,53)" fg:x="12219" fg:w="1707"/><text x="20.0819%" y="255.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (144 samples, 0.23%)</title><rect x="22.3687%" y="229" width="0.2337%" height="15" fill="rgb(223,4,10)" fg:x="13782" fg:w="144"/><text x="22.6187%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="22.5910%" y="213" width="0.0114%" height="15" fill="rgb(234,103,6)" fg:x="13919" fg:w="7"/><text x="22.8410%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (229 samples, 0.37%)</title><rect x="22.6024%" y="245" width="0.3717%" height="15" fill="rgb(227,97,0)" fg:x="13926" fg:w="229"/><text x="22.8524%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (197 samples, 0.32%)</title><rect x="22.6543%" y="229" width="0.3197%" height="15" fill="rgb(234,150,53)" fg:x="13958" fg:w="197"/><text x="22.9043%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (113 samples, 0.18%)</title><rect x="22.7906%" y="213" width="0.1834%" height="15" fill="rgb(228,201,54)" fg:x="14042" fg:w="113"/><text x="23.0406%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (37 samples, 0.06%)</title><rect x="22.9140%" y="197" width="0.0601%" height="15" fill="rgb(222,22,37)" fg:x="14118" fg:w="37"/><text x="23.1640%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (80 samples, 0.13%)</title><rect x="22.9757%" y="245" width="0.1298%" height="15" fill="rgb(237,53,32)" fg:x="14156" fg:w="80"/><text x="23.2257%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="24.3747%" y="229" width="0.0162%" height="15" fill="rgb(233,25,53)" fg:x="15018" fg:w="10"/><text x="24.6247%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.04%)</title><rect x="24.3910%" y="229" width="0.0357%" height="15" fill="rgb(210,40,34)" fg:x="15028" fg:w="22"/><text x="24.6410%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="24.4267%" y="229" width="0.0146%" height="15" fill="rgb(241,220,44)" fg:x="15050" fg:w="9"/><text x="24.6767%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (31 samples, 0.05%)</title><rect x="24.4510%" y="229" width="0.0503%" height="15" fill="rgb(235,28,35)" fg:x="15065" fg:w="31"/><text x="24.7010%" y="239.50"></text></g><g><title>rust_qecp`__rdl_dealloc (8 samples, 0.01%)</title><rect x="24.5143%" y="229" width="0.0130%" height="15" fill="rgb(210,56,17)" fg:x="15104" fg:w="8"/><text x="24.7643%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (72 samples, 0.12%)</title><rect x="24.5273%" y="229" width="0.1169%" height="15" fill="rgb(224,130,29)" fg:x="15112" fg:w="72"/><text x="24.7773%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="25.1522%" y="213" width="0.0195%" height="15" fill="rgb(235,212,8)" fg:x="15497" fg:w="12"/><text x="25.4022%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.13%)</title><rect x="25.3015%" y="197" width="0.1315%" height="15" fill="rgb(223,33,50)" fg:x="15589" fg:w="81"/><text x="25.5515%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (163 samples, 0.26%)</title><rect x="25.1716%" y="213" width="0.2646%" height="15" fill="rgb(219,149,13)" fg:x="15509" fg:w="163"/><text x="25.4216%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (25 samples, 0.04%)</title><rect x="25.4476%" y="213" width="0.0406%" height="15" fill="rgb(250,156,29)" fg:x="15679" fg:w="25"/><text x="25.6976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="25.4881%" y="213" width="0.0162%" height="15" fill="rgb(216,193,19)" fg:x="15704" fg:w="10"/><text x="25.7381%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (54 samples, 0.09%)</title><rect x="25.5044%" y="213" width="0.0876%" height="15" fill="rgb(216,135,14)" fg:x="15714" fg:w="54"/><text x="25.7544%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="25.5920%" y="213" width="0.0260%" height="15" fill="rgb(241,47,5)" fg:x="15768" fg:w="16"/><text x="25.8420%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (14 samples, 0.02%)</title><rect x="25.6180%" y="213" width="0.0227%" height="15" fill="rgb(233,42,35)" fg:x="15784" fg:w="14"/><text x="25.8680%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="25.6407%" y="213" width="0.0179%" height="15" fill="rgb(231,13,6)" fg:x="15798" fg:w="11"/><text x="25.8907%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (66 samples, 0.11%)</title><rect x="26.3240%" y="165" width="0.1071%" height="15" fill="rgb(207,181,40)" fg:x="16219" fg:w="66"/><text x="26.5740%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="26.4003%" y="149" width="0.0308%" height="15" fill="rgb(254,173,49)" fg:x="16266" fg:w="19"/><text x="26.6503%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 0.19%)</title><rect x="26.2623%" y="181" width="0.1915%" height="15" fill="rgb(221,1,38)" fg:x="16181" fg:w="118"/><text x="26.5123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="26.4311%" y="165" width="0.0227%" height="15" fill="rgb(206,124,46)" fg:x="16285" fg:w="14"/><text x="26.6811%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="26.4717%" y="165" width="0.0130%" height="15" fill="rgb(249,21,11)" fg:x="16310" fg:w="8"/><text x="26.7217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (51 samples, 0.08%)</title><rect x="26.5788%" y="149" width="0.0828%" height="15" fill="rgb(222,201,40)" fg:x="16376" fg:w="51"/><text x="26.8288%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (269 samples, 0.44%)</title><rect x="26.4538%" y="181" width="0.4366%" height="15" fill="rgb(235,61,29)" fg:x="16299" fg:w="269"/><text x="26.7038%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (250 samples, 0.41%)</title><rect x="26.4847%" y="165" width="0.4058%" height="15" fill="rgb(219,207,3)" fg:x="16318" fg:w="250"/><text x="26.7347%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (141 samples, 0.23%)</title><rect x="26.6616%" y="149" width="0.2288%" height="15" fill="rgb(222,56,46)" fg:x="16427" fg:w="141"/><text x="26.9116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (56 samples, 0.09%)</title><rect x="26.7995%" y="133" width="0.0909%" height="15" fill="rgb(239,76,54)" fg:x="16512" fg:w="56"/><text x="27.0495%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (492 samples, 0.80%)</title><rect x="26.0984%" y="197" width="0.7985%" height="15" fill="rgb(231,124,27)" fg:x="16080" fg:w="492"/><text x="26.3484%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.05%)</title><rect x="26.8969%" y="197" width="0.0536%" height="15" fill="rgb(249,195,6)" fg:x="16572" fg:w="33"/><text x="27.1469%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="26.9505%" y="197" width="0.0114%" height="15" fill="rgb(237,174,47)" fg:x="16605" fg:w="7"/><text x="27.2005%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="26.9618%" y="197" width="0.0146%" height="15" fill="rgb(206,201,31)" fg:x="16612" fg:w="9"/><text x="27.2118%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (32 samples, 0.05%)</title><rect x="26.9764%" y="197" width="0.0519%" height="15" fill="rgb(231,57,52)" fg:x="16621" fg:w="32"/><text x="27.2264%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (110 samples, 0.18%)</title><rect x="27.0284%" y="197" width="0.1785%" height="15" fill="rgb(248,177,22)" fg:x="16653" fg:w="110"/><text x="27.2784%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,949 samples, 3.16%)</title><rect x="24.6441%" y="229" width="3.1633%" height="15" fill="rgb(215,211,37)" fg:x="15184" fg:w="1949"/><text x="24.8941%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,322 samples, 2.15%)</title><rect x="25.6618%" y="213" width="2.1457%" height="15" fill="rgb(241,128,51)" fg:x="15811" fg:w="1322"/><text x="25.9118%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (370 samples, 0.60%)</title><rect x="27.2069%" y="197" width="0.6005%" height="15" fill="rgb(227,165,31)" fg:x="16763" fg:w="370"/><text x="27.4569%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,909 samples, 4.72%)</title><rect x="23.1055%" y="245" width="4.7214%" height="15" fill="rgb(228,167,24)" fg:x="14236" fg:w="2909"/><text x="23.3555%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="27.8074%" y="229" width="0.0195%" height="15" fill="rgb(228,143,12)" fg:x="17133" fg:w="12"/><text x="28.0574%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,151 samples, 1.87%)</title><rect x="27.8269%" y="245" width="1.8681%" height="15" fill="rgb(249,149,8)" fg:x="17145" fg:w="1151"/><text x="28.0769%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (32 samples, 0.05%)</title><rect x="29.6950%" y="245" width="0.0519%" height="15" fill="rgb(243,35,44)" fg:x="18296" fg:w="32"/><text x="29.9450%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (78 samples, 0.13%)</title><rect x="29.9466%" y="229" width="0.1266%" height="15" fill="rgb(246,89,9)" fg:x="18451" fg:w="78"/><text x="30.1966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="30.2030%" y="213" width="0.0195%" height="15" fill="rgb(233,213,13)" fg:x="18609" fg:w="12"/><text x="30.4530%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="30.2063%" y="197" width="0.0162%" height="15" fill="rgb(233,141,41)" fg:x="18611" fg:w="10"/><text x="30.4563%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (137 samples, 0.22%)</title><rect x="30.2241%" y="213" width="0.2224%" height="15" fill="rgb(239,167,4)" fg:x="18622" fg:w="137"/><text x="30.4741%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (553 samples, 0.90%)</title><rect x="29.7470%" y="245" width="0.8975%" height="15" fill="rgb(209,217,16)" fg:x="18328" fg:w="553"/><text x="29.9970%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (352 samples, 0.57%)</title><rect x="30.0732%" y="229" width="0.5713%" height="15" fill="rgb(219,88,35)" fg:x="18529" fg:w="352"/><text x="30.3232%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (122 samples, 0.20%)</title><rect x="30.4465%" y="213" width="0.1980%" height="15" fill="rgb(220,193,23)" fg:x="18759" fg:w="122"/><text x="30.6965%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (105 samples, 0.17%)</title><rect x="30.6445%" y="245" width="0.1704%" height="15" fill="rgb(230,90,52)" fg:x="18881" fg:w="105"/><text x="30.8945%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="30.8165%" y="245" width="0.0211%" height="15" fill="rgb(252,106,19)" fg:x="18987" fg:w="13"/><text x="31.0665%" y="255.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (365 samples, 0.59%)</title><rect x="30.8376%" y="245" width="0.5924%" height="15" fill="rgb(206,74,20)" fg:x="19000" fg:w="365"/><text x="31.0876%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (447 samples, 0.73%)</title><rect x="33.7867%" y="213" width="0.7255%" height="15" fill="rgb(230,138,44)" fg:x="20817" fg:w="447"/><text x="34.0367%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,998 samples, 3.24%)</title><rect x="31.9381%" y="229" width="3.2428%" height="15" fill="rgb(235,182,43)" fg:x="19678" fg:w="1998"/><text x="32.1881%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (412 samples, 0.67%)</title><rect x="34.5122%" y="213" width="0.6687%" height="15" fill="rgb(242,16,51)" fg:x="21264" fg:w="412"/><text x="34.7622%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,438 samples, 3.96%)</title><rect x="31.4301%" y="245" width="3.9570%" height="15" fill="rgb(248,9,4)" fg:x="19365" fg:w="2438"/><text x="31.6801%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (127 samples, 0.21%)</title><rect x="35.1809%" y="229" width="0.2061%" height="15" fill="rgb(210,31,22)" fg:x="21676" fg:w="127"/><text x="35.4309%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,109 samples, 5.05%)</title><rect x="38.8928%" y="229" width="5.0460%" height="15" fill="rgb(239,54,39)" fg:x="23963" fg:w="3109"/><text x="39.1428%" y="239.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.03%)</title><rect x="43.9388%" y="229" width="0.0308%" height="15" fill="rgb(230,99,41)" fg:x="27072" fg:w="19"/><text x="44.1888%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="43.9388%" y="213" width="0.0308%" height="15" fill="rgb(253,106,12)" fg:x="27072" fg:w="19"/><text x="44.1888%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="43.9404%" y="197" width="0.0292%" height="15" fill="rgb(213,46,41)" fg:x="27073" fg:w="18"/><text x="44.1904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.03%)</title><rect x="43.9404%" y="181" width="0.0292%" height="15" fill="rgb(215,133,35)" fg:x="27073" fg:w="18"/><text x="44.1904%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="43.9534%" y="165" width="0.0162%" height="15" fill="rgb(213,28,5)" fg:x="27081" fg:w="10"/><text x="44.2034%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,963 samples, 3.19%)</title><rect x="43.9696%" y="229" width="3.1860%" height="15" fill="rgb(215,77,49)" fg:x="27091" fg:w="1963"/><text x="44.2196%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (442 samples, 0.72%)</title><rect x="47.1556%" y="229" width="0.7174%" height="15" fill="rgb(248,100,22)" fg:x="29054" fg:w="442"/><text x="47.4056%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (69 samples, 0.11%)</title><rect x="47.9282%" y="213" width="0.1120%" height="15" fill="rgb(208,67,9)" fg:x="29530" fg:w="69"/><text x="48.1782%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (136 samples, 0.22%)</title><rect x="48.1392%" y="197" width="0.2207%" height="15" fill="rgb(219,133,21)" fg:x="29660" fg:w="136"/><text x="48.3892%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (425 samples, 0.69%)</title><rect x="47.8730%" y="229" width="0.6898%" height="15" fill="rgb(246,46,29)" fg:x="29496" fg:w="425"/><text x="48.1230%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (322 samples, 0.52%)</title><rect x="48.0402%" y="213" width="0.5226%" height="15" fill="rgb(246,185,52)" fg:x="29599" fg:w="322"/><text x="48.2902%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (125 samples, 0.20%)</title><rect x="48.3599%" y="197" width="0.2029%" height="15" fill="rgb(252,136,11)" fg:x="29796" fg:w="125"/><text x="48.6099%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (9,764 samples, 15.85%)</title><rect x="35.3870%" y="245" width="15.8473%" height="15" fill="rgb(219,138,53)" fg:x="21803" fg:w="9764"/><text x="35.6370%" y="255.50">rust_qecp`rust_qecp::ftq..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,646 samples, 2.67%)</title><rect x="48.5628%" y="229" width="2.6715%" height="15" fill="rgb(211,51,23)" fg:x="29921" fg:w="1646"/><text x="48.8128%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.05%)</title><rect x="51.1856%" y="213" width="0.0487%" height="15" fill="rgb(247,221,28)" fg:x="31537" fg:w="30"/><text x="51.4356%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (29 samples, 0.05%)</title><rect x="51.1872%" y="197" width="0.0471%" height="15" fill="rgb(251,222,45)" fg:x="31538" fg:w="29"/><text x="51.4372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.05%)</title><rect x="51.1889%" y="181" width="0.0454%" height="15" fill="rgb(217,162,53)" fg:x="31539" fg:w="28"/><text x="51.4389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.05%)</title><rect x="51.1889%" y="165" width="0.0454%" height="15" fill="rgb(229,93,14)" fg:x="31539" fg:w="28"/><text x="51.4389%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="51.2019%" y="149" width="0.0325%" height="15" fill="rgb(209,67,49)" fg:x="31547" fg:w="20"/><text x="51.4519%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (10 samples, 0.02%)</title><rect x="51.2343%" y="245" width="0.0162%" height="15" fill="rgb(213,87,29)" fg:x="31567" fg:w="10"/><text x="51.4843%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (8 samples, 0.01%)</title><rect x="51.2505%" y="245" width="0.0130%" height="15" fill="rgb(205,151,52)" fg:x="31577" fg:w="8"/><text x="51.5005%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="52.8330%" y="213" width="0.0130%" height="15" fill="rgb(253,215,39)" fg:x="32552" fg:w="8"/><text x="53.0830%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="52.8346%" y="197" width="0.0114%" height="15" fill="rgb(221,220,41)" fg:x="32553" fg:w="7"/><text x="53.0846%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="52.8346%" y="181" width="0.0114%" height="15" fill="rgb(218,133,21)" fg:x="32553" fg:w="7"/><text x="53.0846%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 0.06%)</title><rect x="52.7859%" y="229" width="0.0617%" height="15" fill="rgb(221,193,43)" fg:x="32523" fg:w="38"/><text x="53.0359%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.05%)</title><rect x="52.8476%" y="213" width="0.0454%" height="15" fill="rgb(240,128,52)" fg:x="32561" fg:w="28"/><text x="53.0976%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="52.8931%" y="213" width="0.0179%" height="15" fill="rgb(253,114,12)" fg:x="32589" fg:w="11"/><text x="53.1431%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (20 samples, 0.03%)</title><rect x="52.9109%" y="213" width="0.0325%" height="15" fill="rgb(215,223,47)" fg:x="32600" fg:w="20"/><text x="53.1609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.04%)</title><rect x="52.9434%" y="213" width="0.0438%" height="15" fill="rgb(248,225,23)" fg:x="32620" fg:w="27"/><text x="53.1934%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="52.9888%" y="213" width="0.0195%" height="15" fill="rgb(250,108,0)" fg:x="32648" fg:w="12"/><text x="53.2388%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="53.0083%" y="213" width="0.0162%" height="15" fill="rgb(228,208,7)" fg:x="32660" fg:w="10"/><text x="53.2583%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="53.2274%" y="181" width="0.0146%" height="15" fill="rgb(244,45,10)" fg:x="32795" fg:w="9"/><text x="53.4774%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (47 samples, 0.08%)</title><rect x="53.4725%" y="149" width="0.0763%" height="15" fill="rgb(207,125,25)" fg:x="32946" fg:w="47"/><text x="53.7225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (155 samples, 0.25%)</title><rect x="53.3004%" y="165" width="0.2516%" height="15" fill="rgb(210,195,18)" fg:x="32840" fg:w="155"/><text x="53.5504%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (311 samples, 0.50%)</title><rect x="53.0781%" y="197" width="0.5048%" height="15" fill="rgb(249,80,12)" fg:x="32703" fg:w="311"/><text x="53.3281%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (210 samples, 0.34%)</title><rect x="53.2420%" y="181" width="0.3408%" height="15" fill="rgb(221,65,9)" fg:x="32804" fg:w="210"/><text x="53.4920%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="53.5520%" y="165" width="0.0308%" height="15" fill="rgb(235,49,36)" fg:x="32995" fg:w="19"/><text x="53.8020%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="53.5828%" y="197" width="0.0276%" height="15" fill="rgb(225,32,20)" fg:x="33014" fg:w="17"/><text x="53.8328%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (40 samples, 0.06%)</title><rect x="53.7241%" y="181" width="0.0649%" height="15" fill="rgb(215,141,46)" fg:x="33101" fg:w="40"/><text x="53.9741%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (111 samples, 0.18%)</title><rect x="53.6104%" y="197" width="0.1802%" height="15" fill="rgb(250,160,47)" fg:x="33031" fg:w="111"/><text x="53.8604%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="53.7906%" y="197" width="0.0195%" height="15" fill="rgb(216,222,40)" fg:x="33142" fg:w="12"/><text x="54.0406%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.06%)</title><rect x="53.8101%" y="197" width="0.0568%" height="15" fill="rgb(234,217,39)" fg:x="33154" fg:w="35"/><text x="54.0601%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="53.8750%" y="197" width="0.0195%" height="15" fill="rgb(207,178,40)" fg:x="33194" fg:w="12"/><text x="54.1250%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (213 samples, 0.35%)</title><rect x="53.9659%" y="181" width="0.3457%" height="15" fill="rgb(221,136,13)" fg:x="33250" fg:w="213"/><text x="54.2159%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="54.3278%" y="181" width="0.0146%" height="15" fill="rgb(249,199,10)" fg:x="33473" fg:w="9"/><text x="54.5778%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.07%)</title><rect x="54.3846%" y="165" width="0.0698%" height="15" fill="rgb(249,222,13)" fg:x="33508" fg:w="43"/><text x="54.6346%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (70 samples, 0.11%)</title><rect x="54.4544%" y="165" width="0.1136%" height="15" fill="rgb(244,185,38)" fg:x="33551" fg:w="70"/><text x="54.7044%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (153 samples, 0.25%)</title><rect x="54.3424%" y="181" width="0.2483%" height="15" fill="rgb(236,202,9)" fg:x="33482" fg:w="153"/><text x="54.5924%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="54.5680%" y="165" width="0.0227%" height="15" fill="rgb(250,229,37)" fg:x="33621" fg:w="14"/><text x="54.8180%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="54.5924%" y="181" width="0.0211%" height="15" fill="rgb(206,174,23)" fg:x="33636" fg:w="13"/><text x="54.8424%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.04%)</title><rect x="54.9121%" y="117" width="0.0373%" height="15" fill="rgb(211,33,43)" fg:x="33833" fg:w="23"/><text x="55.1621%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (116 samples, 0.19%)</title><rect x="54.8034%" y="133" width="0.1883%" height="15" fill="rgb(245,58,50)" fg:x="33766" fg:w="116"/><text x="55.0534%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (26 samples, 0.04%)</title><rect x="54.9494%" y="117" width="0.0422%" height="15" fill="rgb(244,68,36)" fg:x="33856" fg:w="26"/><text x="55.1994%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (190 samples, 0.31%)</title><rect x="54.7044%" y="165" width="0.3084%" height="15" fill="rgb(232,229,15)" fg:x="33705" fg:w="190"/><text x="54.9544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (145 samples, 0.24%)</title><rect x="54.7774%" y="149" width="0.2353%" height="15" fill="rgb(254,30,23)" fg:x="33750" fg:w="145"/><text x="55.0274%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="54.9916%" y="133" width="0.0211%" height="15" fill="rgb(235,160,14)" fg:x="33882" fg:w="13"/><text x="55.2416%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="55.0127%" y="165" width="0.0211%" height="15" fill="rgb(212,155,44)" fg:x="33895" fg:w="13"/><text x="55.2627%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (705 samples, 1.14%)</title><rect x="53.8945%" y="197" width="1.1442%" height="15" fill="rgb(226,2,50)" fg:x="33206" fg:w="705"/><text x="54.1445%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (262 samples, 0.43%)</title><rect x="54.6135%" y="181" width="0.4252%" height="15" fill="rgb(234,177,6)" fg:x="33649" fg:w="262"/><text x="54.8635%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.05%)</title><rect x="55.1539%" y="181" width="0.0503%" height="15" fill="rgb(217,24,9)" fg:x="33982" fg:w="31"/><text x="55.4039%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (60 samples, 0.10%)</title><rect x="55.2043%" y="181" width="0.0974%" height="15" fill="rgb(220,13,46)" fg:x="34013" fg:w="60"/><text x="55.4543%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (184 samples, 0.30%)</title><rect x="55.0387%" y="197" width="0.2986%" height="15" fill="rgb(239,221,27)" fg:x="33911" fg:w="184"/><text x="55.2887%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (22 samples, 0.04%)</title><rect x="55.3016%" y="181" width="0.0357%" height="15" fill="rgb(222,198,25)" fg:x="34073" fg:w="22"/><text x="55.5516%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="55.3373%" y="197" width="0.0162%" height="15" fill="rgb(211,99,13)" fg:x="34095" fg:w="10"/><text x="55.5873%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,444 samples, 2.34%)</title><rect x="53.0278%" y="213" width="2.3437%" height="15" fill="rgb(232,111,31)" fg:x="32672" fg:w="1444"/><text x="53.2778%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="55.3536%" y="197" width="0.0179%" height="15" fill="rgb(245,82,37)" fg:x="34105" fg:w="11"/><text x="55.6036%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (11 samples, 0.02%)</title><rect x="55.3747%" y="213" width="0.0179%" height="15" fill="rgb(227,149,46)" fg:x="34118" fg:w="11"/><text x="55.6247%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="55.3925%" y="213" width="0.0227%" height="15" fill="rgb(218,36,50)" fg:x="34129" fg:w="14"/><text x="55.6425%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="55.4153%" y="213" width="0.0195%" height="15" fill="rgb(226,80,48)" fg:x="34143" fg:w="12"/><text x="55.6653%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18 samples, 0.03%)</title><rect x="55.4347%" y="213" width="0.0292%" height="15" fill="rgb(238,224,15)" fg:x="34155" fg:w="18"/><text x="55.6847%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,616 samples, 2.62%)</title><rect x="52.8476%" y="229" width="2.6228%" height="15" fill="rgb(241,136,10)" fg:x="32561" fg:w="1616"/><text x="53.0976%" y="239.50">ru..</text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.03%)</title><rect x="55.6214%" y="213" width="0.0276%" height="15" fill="rgb(208,32,45)" fg:x="34270" fg:w="17"/><text x="55.8714%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="55.6490%" y="213" width="0.0243%" height="15" fill="rgb(207,135,9)" fg:x="34287" fg:w="15"/><text x="55.8990%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (17 samples, 0.03%)</title><rect x="55.6733%" y="213" width="0.0276%" height="15" fill="rgb(206,86,44)" fg:x="34302" fg:w="17"/><text x="55.9233%" y="223.50"></text></g><g><title>rust_qecp`__rdl_realloc (12 samples, 0.02%)</title><rect x="55.7090%" y="213" width="0.0195%" height="15" fill="rgb(245,177,15)" fg:x="34324" fg:w="12"/><text x="55.9590%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (65 samples, 0.11%)</title><rect x="55.8924%" y="165" width="0.1055%" height="15" fill="rgb(206,64,50)" fg:x="34437" fg:w="65"/><text x="56.1424%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="55.9671%" y="149" width="0.0308%" height="15" fill="rgb(234,36,40)" fg:x="34483" fg:w="19"/><text x="56.2171%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (140 samples, 0.23%)</title><rect x="55.7950%" y="197" width="0.2272%" height="15" fill="rgb(213,64,8)" fg:x="34377" fg:w="140"/><text x="56.0450%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (101 samples, 0.16%)</title><rect x="55.8583%" y="181" width="0.1639%" height="15" fill="rgb(210,75,36)" fg:x="34416" fg:w="101"/><text x="56.1083%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="55.9979%" y="165" width="0.0243%" height="15" fill="rgb(229,88,21)" fg:x="34502" fg:w="15"/><text x="56.2479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="56.0223%" y="197" width="0.0308%" height="15" fill="rgb(252,204,47)" fg:x="34517" fg:w="19"/><text x="56.2723%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="56.0531%" y="197" width="0.0195%" height="15" fill="rgb(208,77,27)" fg:x="34536" fg:w="12"/><text x="56.3031%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="56.0726%" y="197" width="0.0211%" height="15" fill="rgb(221,76,26)" fg:x="34548" fg:w="13"/><text x="56.3226%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (30 samples, 0.05%)</title><rect x="56.2592%" y="181" width="0.0487%" height="15" fill="rgb(225,139,18)" fg:x="34663" fg:w="30"/><text x="56.5092%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.02%)</title><rect x="56.3988%" y="165" width="0.0195%" height="15" fill="rgb(230,137,11)" fg:x="34749" fg:w="12"/><text x="56.6488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (19 samples, 0.03%)</title><rect x="56.4183%" y="165" width="0.0308%" height="15" fill="rgb(212,28,1)" fg:x="34761" fg:w="19"/><text x="56.6683%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="56.4491%" y="165" width="0.0325%" height="15" fill="rgb(248,164,17)" fg:x="34780" fg:w="20"/><text x="56.6991%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (165 samples, 0.27%)</title><rect x="56.4832%" y="165" width="0.2678%" height="15" fill="rgb(222,171,42)" fg:x="34801" fg:w="165"/><text x="56.7332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (22 samples, 0.04%)</title><rect x="56.8581%" y="149" width="0.0357%" height="15" fill="rgb(243,84,45)" fg:x="35032" fg:w="22"/><text x="57.1081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (78 samples, 0.13%)</title><rect x="56.8938%" y="149" width="0.1266%" height="15" fill="rgb(252,49,23)" fg:x="35054" fg:w="78"/><text x="57.1438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (36 samples, 0.06%)</title><rect x="57.1860%" y="117" width="0.0584%" height="15" fill="rgb(215,19,7)" fg:x="35234" fg:w="36"/><text x="57.4360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (126 samples, 0.20%)</title><rect x="57.0545%" y="133" width="0.2045%" height="15" fill="rgb(238,81,41)" fg:x="35153" fg:w="126"/><text x="57.3045%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.01%)</title><rect x="57.2444%" y="117" width="0.0146%" height="15" fill="rgb(210,199,37)" fg:x="35270" fg:w="9"/><text x="57.4944%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (155 samples, 0.25%)</title><rect x="57.0204%" y="149" width="0.2516%" height="15" fill="rgb(244,192,49)" fg:x="35132" fg:w="155"/><text x="57.2704%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="57.2590%" y="133" width="0.0130%" height="15" fill="rgb(226,211,11)" fg:x="35279" fg:w="8"/><text x="57.5090%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (94 samples, 0.15%)</title><rect x="57.2720%" y="149" width="0.1526%" height="15" fill="rgb(236,162,54)" fg:x="35287" fg:w="94"/><text x="57.5220%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (45 samples, 0.07%)</title><rect x="57.5009%" y="117" width="0.0730%" height="15" fill="rgb(220,229,9)" fg:x="35428" fg:w="45"/><text x="57.7509%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (158 samples, 0.26%)</title><rect x="57.4246%" y="149" width="0.2564%" height="15" fill="rgb(250,87,22)" fg:x="35381" fg:w="158"/><text x="57.6746%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (145 samples, 0.24%)</title><rect x="57.4457%" y="133" width="0.2353%" height="15" fill="rgb(239,43,17)" fg:x="35394" fg:w="145"/><text x="57.6957%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (66 samples, 0.11%)</title><rect x="57.5739%" y="117" width="0.1071%" height="15" fill="rgb(231,177,25)" fg:x="35473" fg:w="66"/><text x="57.8239%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (579 samples, 0.94%)</title><rect x="56.7510%" y="165" width="0.9397%" height="15" fill="rgb(219,179,1)" fg:x="34966" fg:w="579"/><text x="57.0010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="57.6907%" y="165" width="0.0114%" height="15" fill="rgb(238,219,53)" fg:x="35545" fg:w="7"/><text x="57.9407%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (933 samples, 1.51%)</title><rect x="56.3079%" y="181" width="1.5143%" height="15" fill="rgb(232,167,36)" fg:x="34693" fg:w="933"/><text x="56.5579%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.12%)</title><rect x="57.7021%" y="165" width="0.1201%" height="15" fill="rgb(244,19,51)" fg:x="35552" fg:w="74"/><text x="57.9521%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (84 samples, 0.14%)</title><rect x="57.8222%" y="181" width="0.1363%" height="15" fill="rgb(224,6,22)" fg:x="35626" fg:w="84"/><text x="58.0722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.03%)</title><rect x="57.9585%" y="181" width="0.0276%" height="15" fill="rgb(224,145,5)" fg:x="35710" fg:w="17"/><text x="58.2085%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,170 samples, 1.90%)</title><rect x="56.0937%" y="197" width="1.8989%" height="15" fill="rgb(234,130,49)" fg:x="34561" fg:w="1170"/><text x="56.3437%" y="207.50">l..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,554 samples, 2.52%)</title><rect x="55.4753%" y="229" width="2.5222%" height="15" fill="rgb(254,6,2)" fg:x="34180" fg:w="1554"/><text x="55.7253%" y="239.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,398 samples, 2.27%)</title><rect x="55.7285%" y="213" width="2.2690%" height="15" fill="rgb(208,96,46)" fg:x="34336" fg:w="1398"/><text x="55.9785%" y="223.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (42 samples, 0.07%)</title><rect x="57.9975%" y="229" width="0.0682%" height="15" fill="rgb(239,3,39)" fg:x="35734" fg:w="42"/><text x="58.2475%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (147 samples, 0.24%)</title><rect x="58.0657%" y="213" width="0.2386%" height="15" fill="rgb(233,210,1)" fg:x="35776" fg:w="147"/><text x="58.3157%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="58.6987%" y="197" width="0.0179%" height="15" fill="rgb(244,137,37)" fg:x="36166" fg:w="11"/><text x="58.9487%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="58.7165%" y="197" width="0.0130%" height="15" fill="rgb(240,136,2)" fg:x="36177" fg:w="8"/><text x="58.9665%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="58.9794%" y="165" width="0.0195%" height="15" fill="rgb(239,18,37)" fg:x="36339" fg:w="12"/><text x="59.2294%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.03%)</title><rect x="58.9989%" y="165" width="0.0292%" height="15" fill="rgb(218,185,22)" fg:x="36351" fg:w="18"/><text x="59.2489%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (63 samples, 0.10%)</title><rect x="59.1710%" y="133" width="0.1023%" height="15" fill="rgb(225,218,4)" fg:x="36457" fg:w="63"/><text x="59.4210%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (245 samples, 0.40%)</title><rect x="59.3576%" y="117" width="0.3976%" height="15" fill="rgb(230,182,32)" fg:x="36572" fg:w="245"/><text x="59.6076%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (21 samples, 0.03%)</title><rect x="59.7552%" y="117" width="0.0341%" height="15" fill="rgb(242,56,43)" fg:x="36817" fg:w="21"/><text x="60.0052%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (735 samples, 1.19%)</title><rect x="58.8528%" y="181" width="1.1929%" height="15" fill="rgb(233,99,24)" fg:x="36261" fg:w="735"/><text x="59.1028%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (627 samples, 1.02%)</title><rect x="59.0281%" y="165" width="1.0176%" height="15" fill="rgb(234,209,42)" fg:x="36369" fg:w="627"/><text x="59.2781%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (604 samples, 0.98%)</title><rect x="59.0655%" y="149" width="0.9803%" height="15" fill="rgb(227,7,12)" fg:x="36392" fg:w="604"/><text x="59.3155%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (474 samples, 0.77%)</title><rect x="59.2765%" y="133" width="0.7693%" height="15" fill="rgb(245,203,43)" fg:x="36522" fg:w="474"/><text x="59.5265%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (158 samples, 0.26%)</title><rect x="59.7893%" y="117" width="0.2564%" height="15" fill="rgb(238,205,33)" fg:x="36838" fg:w="158"/><text x="60.0393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (72 samples, 0.12%)</title><rect x="60.0458%" y="181" width="0.1169%" height="15" fill="rgb(231,56,7)" fg:x="36996" fg:w="72"/><text x="60.2958%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (98 samples, 0.16%)</title><rect x="60.1626%" y="181" width="0.1591%" height="15" fill="rgb(244,186,29)" fg:x="37068" fg:w="98"/><text x="60.4126%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,246 samples, 2.02%)</title><rect x="58.3075%" y="213" width="2.0223%" height="15" fill="rgb(234,111,31)" fg:x="35925" fg:w="1246"/><text x="58.5575%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (977 samples, 1.59%)</title><rect x="58.7441%" y="197" width="1.5857%" height="15" fill="rgb(241,149,10)" fg:x="36194" fg:w="977"/><text x="58.9941%" y="207.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,412 samples, 2.29%)</title><rect x="58.0657%" y="229" width="2.2917%" height="15" fill="rgb(249,206,44)" fg:x="35776" fg:w="1412"/><text x="58.3157%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.03%)</title><rect x="60.3298%" y="213" width="0.0276%" height="15" fill="rgb(251,153,30)" fg:x="37171" fg:w="17"/><text x="60.5798%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.04%)</title><rect x="60.7080%" y="213" width="0.0373%" height="15" fill="rgb(239,152,38)" fg:x="37404" fg:w="23"/><text x="60.9580%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.03%)</title><rect x="61.1170%" y="197" width="0.0276%" height="15" fill="rgb(249,139,47)" fg:x="37656" fg:w="17"/><text x="61.3670%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="61.6006%" y="181" width="0.0243%" height="15" fill="rgb(244,64,35)" fg:x="37954" fg:w="15"/><text x="61.8506%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (32 samples, 0.05%)</title><rect x="62.0762%" y="165" width="0.0519%" height="15" fill="rgb(216,46,15)" fg:x="38247" fg:w="32"/><text x="62.3262%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (25 samples, 0.04%)</title><rect x="62.5128%" y="149" width="0.0406%" height="15" fill="rgb(250,74,19)" fg:x="38516" fg:w="25"/><text x="62.7628%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.04%)</title><rect x="62.7157%" y="133" width="0.0373%" height="15" fill="rgb(249,42,33)" fg:x="38641" fg:w="23"/><text x="62.9657%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,533 samples, 2.49%)</title><rect x="60.3574%" y="229" width="2.4881%" height="15" fill="rgb(242,149,17)" fg:x="37188" fg:w="1533"/><text x="60.6074%" y="239.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,294 samples, 2.10%)</title><rect x="60.7453%" y="213" width="2.1002%" height="15" fill="rgb(244,29,21)" fg:x="37427" fg:w="1294"/><text x="60.9953%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,048 samples, 1.70%)</title><rect x="61.1446%" y="197" width="1.7009%" height="15" fill="rgb(220,130,37)" fg:x="37673" fg:w="1048"/><text x="61.3946%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (752 samples, 1.22%)</title><rect x="61.6250%" y="181" width="1.2205%" height="15" fill="rgb(211,67,2)" fg:x="37969" fg:w="752"/><text x="61.8750%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (442 samples, 0.72%)</title><rect x="62.1281%" y="165" width="0.7174%" height="15" fill="rgb(235,68,52)" fg:x="38279" fg:w="442"/><text x="62.3781%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (180 samples, 0.29%)</title><rect x="62.5534%" y="149" width="0.2921%" height="15" fill="rgb(246,142,3)" fg:x="38541" fg:w="180"/><text x="62.8034%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (57 samples, 0.09%)</title><rect x="62.7530%" y="133" width="0.0925%" height="15" fill="rgb(241,25,7)" fg:x="38664" fg:w="57"/><text x="63.0030%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (446 samples, 0.72%)</title><rect x="63.7333%" y="213" width="0.7239%" height="15" fill="rgb(242,119,39)" fg:x="39268" fg:w="446"/><text x="63.9833%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (779 samples, 1.26%)</title><rect x="64.4572%" y="213" width="1.2643%" height="15" fill="rgb(241,98,45)" fg:x="39714" fg:w="779"/><text x="64.7072%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,268 samples, 3.68%)</title><rect x="62.8455%" y="229" width="3.6810%" height="15" fill="rgb(254,28,30)" fg:x="38721" fg:w="2268"/><text x="63.0955%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (496 samples, 0.81%)</title><rect x="65.7215%" y="213" width="0.8050%" height="15" fill="rgb(241,142,54)" fg:x="40493" fg:w="496"/><text x="65.9715%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (22 samples, 0.04%)</title><rect x="66.5265%" y="229" width="0.0357%" height="15" fill="rgb(222,85,15)" fg:x="40989" fg:w="22"/><text x="66.7765%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (273 samples, 0.44%)</title><rect x="66.5623%" y="229" width="0.4431%" height="15" fill="rgb(210,85,47)" fg:x="41011" fg:w="273"/><text x="66.8123%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (9,700 samples, 15.74%)</title><rect x="51.2635%" y="245" width="15.7434%" height="15" fill="rgb(224,206,25)" fg:x="31585" fg:w="9700"/><text x="51.5135%" y="255.50">rust_qecp`rust_qecp::uni..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (33 samples, 0.05%)</title><rect x="76.3232%" y="229" width="0.0536%" height="15" fill="rgb(243,201,19)" fg:x="47025" fg:w="33"/><text x="76.5732%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="76.4644%" y="213" width="0.0195%" height="15" fill="rgb(236,59,4)" fg:x="47112" fg:w="12"/><text x="76.7144%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (100 samples, 0.16%)</title><rect x="76.5374%" y="197" width="0.1623%" height="15" fill="rgb(254,179,45)" fg:x="47157" fg:w="100"/><text x="76.7874%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.06%)</title><rect x="76.6429%" y="181" width="0.0568%" height="15" fill="rgb(226,14,10)" fg:x="47222" fg:w="35"/><text x="76.8929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (143 samples, 0.23%)</title><rect x="76.4839%" y="213" width="0.2321%" height="15" fill="rgb(244,27,41)" fg:x="47124" fg:w="143"/><text x="76.7339%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="76.6997%" y="197" width="0.0162%" height="15" fill="rgb(235,35,32)" fg:x="47257" fg:w="10"/><text x="76.9497%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (216 samples, 0.35%)</title><rect x="76.3767%" y="229" width="0.3506%" height="15" fill="rgb(218,68,31)" fg:x="47058" fg:w="216"/><text x="76.6267%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="76.7160%" y="213" width="0.0114%" height="15" fill="rgb(207,120,37)" fg:x="47267" fg:w="7"/><text x="76.9660%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="76.7273%" y="229" width="0.0325%" height="15" fill="rgb(227,98,0)" fg:x="47274" fg:w="20"/><text x="76.9773%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (147 samples, 0.24%)</title><rect x="77.0990%" y="213" width="0.2386%" height="15" fill="rgb(207,7,3)" fg:x="47503" fg:w="147"/><text x="77.3490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (45 samples, 0.07%)</title><rect x="77.3506%" y="213" width="0.0730%" height="15" fill="rgb(206,98,19)" fg:x="47658" fg:w="45"/><text x="77.6006%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.06%)</title><rect x="77.3635%" y="197" width="0.0601%" height="15" fill="rgb(217,5,26)" fg:x="47666" fg:w="37"/><text x="77.6135%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (410 samples, 0.67%)</title><rect x="76.7598%" y="229" width="0.6654%" height="15" fill="rgb(235,190,38)" fg:x="47294" fg:w="410"/><text x="77.0098%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (776 samples, 1.26%)</title><rect x="77.4252%" y="213" width="1.2595%" height="15" fill="rgb(247,86,24)" fg:x="47704" fg:w="776"/><text x="77.6752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (778 samples, 1.26%)</title><rect x="77.4252%" y="229" width="1.2627%" height="15" fill="rgb(205,101,16)" fg:x="47704" fg:w="778"/><text x="77.6752%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="78.7366%" y="213" width="0.0130%" height="15" fill="rgb(246,168,33)" fg:x="48512" fg:w="8"/><text x="78.9866%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (45 samples, 0.07%)</title><rect x="78.6879%" y="229" width="0.0730%" height="15" fill="rgb(231,114,1)" fg:x="48482" fg:w="45"/><text x="78.9379%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="78.8291%" y="197" width="0.0341%" height="15" fill="rgb(207,184,53)" fg:x="48569" fg:w="21"/><text x="79.0791%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (70 samples, 0.11%)</title><rect x="78.7610%" y="229" width="0.1136%" height="15" fill="rgb(224,95,51)" fg:x="48527" fg:w="70"/><text x="79.0110%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (58 samples, 0.09%)</title><rect x="78.7805%" y="213" width="0.0941%" height="15" fill="rgb(212,188,45)" fg:x="48539" fg:w="58"/><text x="79.0305%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="78.8632%" y="197" width="0.0114%" height="15" fill="rgb(223,154,38)" fg:x="48590" fg:w="7"/><text x="79.1132%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="78.8746%" y="229" width="0.0341%" height="15" fill="rgb(251,22,52)" fg:x="48597" fg:w="21"/><text x="79.1246%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (185 samples, 0.30%)</title><rect x="78.9087%" y="229" width="0.3003%" height="15" fill="rgb(229,209,22)" fg:x="48618" fg:w="185"/><text x="79.1587%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (25 samples, 0.04%)</title><rect x="79.1684%" y="213" width="0.0406%" height="15" fill="rgb(234,138,34)" fg:x="48778" fg:w="25"/><text x="79.4184%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.04%)</title><rect x="79.1700%" y="197" width="0.0390%" height="15" fill="rgb(212,95,11)" fg:x="48779" fg:w="24"/><text x="79.4200%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (37 samples, 0.06%)</title><rect x="79.2122%" y="229" width="0.0601%" height="15" fill="rgb(240,179,47)" fg:x="48805" fg:w="37"/><text x="79.4622%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (57 samples, 0.09%)</title><rect x="79.2885%" y="229" width="0.0925%" height="15" fill="rgb(240,163,11)" fg:x="48852" fg:w="57"/><text x="79.5385%" y="239.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 0.05%)</title><rect x="79.3810%" y="229" width="0.0519%" height="15" fill="rgb(236,37,12)" fg:x="48909" fg:w="32"/><text x="79.6310%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (106 samples, 0.17%)</title><rect x="79.4329%" y="229" width="0.1720%" height="15" fill="rgb(232,164,16)" fg:x="48941" fg:w="106"/><text x="79.6829%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="79.6050%" y="229" width="0.0243%" height="15" fill="rgb(244,205,15)" fg:x="49047" fg:w="15"/><text x="79.8550%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="79.7072%" y="165" width="0.0179%" height="15" fill="rgb(223,117,47)" fg:x="49110" fg:w="11"/><text x="79.9572%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="79.7380%" y="149" width="0.0243%" height="15" fill="rgb(244,107,35)" fg:x="49129" fg:w="15"/><text x="79.9880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="79.7721%" y="133" width="0.0292%" height="15" fill="rgb(205,140,8)" fg:x="49150" fg:w="18"/><text x="80.0221%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="79.7900%" y="117" width="0.0114%" height="15" fill="rgb(228,84,46)" fg:x="49161" fg:w="7"/><text x="80.0400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.04%)</title><rect x="79.7624%" y="149" width="0.0422%" height="15" fill="rgb(254,188,9)" fg:x="49144" fg:w="26"/><text x="80.0124%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (52 samples, 0.08%)</title><rect x="79.7251%" y="165" width="0.0844%" height="15" fill="rgb(206,112,54)" fg:x="49121" fg:w="52"/><text x="79.9751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (83 samples, 0.13%)</title><rect x="79.6926%" y="181" width="0.1347%" height="15" fill="rgb(216,84,49)" fg:x="49101" fg:w="83"/><text x="79.9426%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="79.8095%" y="165" width="0.0179%" height="15" fill="rgb(214,194,35)" fg:x="49173" fg:w="11"/><text x="80.0595%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="79.8273%" y="181" width="0.0211%" height="15" fill="rgb(249,28,3)" fg:x="49184" fg:w="13"/><text x="80.0773%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (114 samples, 0.19%)</title><rect x="79.6666%" y="197" width="0.1850%" height="15" fill="rgb(222,56,52)" fg:x="49085" fg:w="114"/><text x="79.9166%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (126 samples, 0.20%)</title><rect x="79.6488%" y="229" width="0.2045%" height="15" fill="rgb(245,217,50)" fg:x="49074" fg:w="126"/><text x="79.8988%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (120 samples, 0.19%)</title><rect x="79.6585%" y="213" width="0.1948%" height="15" fill="rgb(213,201,24)" fg:x="49080" fg:w="120"/><text x="79.9085%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (143 samples, 0.23%)</title><rect x="80.0399%" y="213" width="0.2321%" height="15" fill="rgb(248,116,28)" fg:x="49315" fg:w="143"/><text x="80.2899%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (255 samples, 0.41%)</title><rect x="80.2720%" y="213" width="0.4139%" height="15" fill="rgb(219,72,43)" fg:x="49458" fg:w="255"/><text x="80.5220%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (605 samples, 0.98%)</title><rect x="79.8598%" y="229" width="0.9819%" height="15" fill="rgb(209,138,14)" fg:x="49204" fg:w="605"/><text x="80.1098%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (96 samples, 0.16%)</title><rect x="80.6859%" y="213" width="0.1558%" height="15" fill="rgb(222,18,33)" fg:x="49713" fg:w="96"/><text x="80.9359%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="80.8125%" y="197" width="0.0292%" height="15" fill="rgb(213,199,7)" fg:x="49791" fg:w="18"/><text x="81.0625%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="80.8287%" y="181" width="0.0130%" height="15" fill="rgb(250,110,10)" fg:x="49801" fg:w="8"/><text x="81.0787%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (176 samples, 0.29%)</title><rect x="80.8417%" y="229" width="0.2857%" height="15" fill="rgb(248,123,6)" fg:x="49809" fg:w="176"/><text x="81.0917%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (11 samples, 0.02%)</title><rect x="81.1274%" y="229" width="0.0179%" height="15" fill="rgb(206,91,31)" fg:x="49985" fg:w="11"/><text x="81.3774%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (46 samples, 0.07%)</title><rect x="81.1452%" y="229" width="0.0747%" height="15" fill="rgb(211,154,13)" fg:x="49996" fg:w="46"/><text x="81.3952%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="81.2540%" y="197" width="0.0146%" height="15" fill="rgb(225,148,7)" fg:x="50063" fg:w="9"/><text x="81.5040%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="81.2572%" y="181" width="0.0114%" height="15" fill="rgb(220,160,43)" fg:x="50065" fg:w="7"/><text x="81.5072%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="81.2507%" y="213" width="0.0195%" height="15" fill="rgb(213,52,39)" fg:x="50061" fg:w="12"/><text x="81.5007%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="81.2718%" y="213" width="0.0162%" height="15" fill="rgb(243,137,7)" fg:x="50074" fg:w="10"/><text x="81.5218%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (54 samples, 0.09%)</title><rect x="81.2199%" y="229" width="0.0876%" height="15" fill="rgb(230,79,13)" fg:x="50042" fg:w="54"/><text x="81.4699%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (12 samples, 0.02%)</title><rect x="81.2880%" y="213" width="0.0195%" height="15" fill="rgb(247,105,23)" fg:x="50084" fg:w="12"/><text x="81.5380%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (59 samples, 0.10%)</title><rect x="82.0217%" y="165" width="0.0958%" height="15" fill="rgb(223,179,41)" fg:x="50536" fg:w="59"/><text x="82.2717%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (166 samples, 0.27%)</title><rect x="81.8691%" y="181" width="0.2694%" height="15" fill="rgb(218,9,34)" fg:x="50442" fg:w="166"/><text x="82.1191%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="82.1174%" y="165" width="0.0211%" height="15" fill="rgb(222,106,8)" fg:x="50595" fg:w="13"/><text x="82.3674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (444 samples, 0.72%)</title><rect x="81.4309%" y="197" width="0.7206%" height="15" fill="rgb(211,220,0)" fg:x="50172" fg:w="444"/><text x="81.6809%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="82.1385%" y="181" width="0.0130%" height="15" fill="rgb(229,52,16)" fg:x="50608" fg:w="8"/><text x="82.3885%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="82.1515%" y="197" width="0.0195%" height="15" fill="rgb(212,155,18)" fg:x="50616" fg:w="12"/><text x="82.4015%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (54 samples, 0.09%)</title><rect x="82.2375%" y="181" width="0.0876%" height="15" fill="rgb(242,21,14)" fg:x="50669" fg:w="54"/><text x="82.4875%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (29 samples, 0.05%)</title><rect x="82.2781%" y="165" width="0.0471%" height="15" fill="rgb(222,19,48)" fg:x="50694" fg:w="29"/><text x="82.5281%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="82.3106%" y="149" width="0.0146%" height="15" fill="rgb(232,45,27)" fg:x="50714" fg:w="9"/><text x="82.5606%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="82.3609%" y="165" width="0.0195%" height="15" fill="rgb(249,103,42)" fg:x="50745" fg:w="12"/><text x="82.6109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (188 samples, 0.31%)</title><rect x="82.1710%" y="197" width="0.3051%" height="15" fill="rgb(246,81,33)" fg:x="50628" fg:w="188"/><text x="82.4210%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (90 samples, 0.15%)</title><rect x="82.3300%" y="181" width="0.1461%" height="15" fill="rgb(252,33,42)" fg:x="50726" fg:w="90"/><text x="82.5800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (59 samples, 0.10%)</title><rect x="82.3803%" y="165" width="0.0958%" height="15" fill="rgb(209,212,41)" fg:x="50757" fg:w="59"/><text x="82.6303%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (698 samples, 1.13%)</title><rect x="81.3513%" y="213" width="1.1329%" height="15" fill="rgb(207,154,6)" fg:x="50123" fg:w="698"/><text x="81.6013%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="82.4842%" y="213" width="0.0195%" height="15" fill="rgb(223,64,47)" fg:x="50821" fg:w="12"/><text x="82.7342%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="82.5037%" y="213" width="0.0162%" height="15" fill="rgb(211,161,38)" fg:x="50833" fg:w="10"/><text x="82.7537%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (752 samples, 1.22%)</title><rect x="81.3075%" y="229" width="1.2205%" height="15" fill="rgb(219,138,40)" fg:x="50096" fg:w="752"/><text x="81.5575%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (61 samples, 0.10%)</title><rect x="82.5280%" y="229" width="0.0990%" height="15" fill="rgb(241,228,46)" fg:x="50848" fg:w="61"/><text x="82.7780%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (9,661 samples, 15.68%)</title><rect x="67.0070%" y="245" width="15.6801%" height="15" fill="rgb(223,209,38)" fg:x="41285" fg:w="9661"/><text x="67.2570%" y="255.50">rust_qecp`rust_qecp::uni..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (37 samples, 0.06%)</title><rect x="82.6270%" y="229" width="0.0601%" height="15" fill="rgb(236,164,45)" fg:x="50909" fg:w="37"/><text x="82.8770%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (47,562 samples, 77.19%)</title><rect x="5.4956%" y="261" width="77.1947%" height="15" fill="rgb(231,15,5)" fg:x="3386" fg:w="47562"/><text x="5.7456%" y="271.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (49,283 samples, 79.99%)</title><rect x="2.7040%" y="277" width="79.9880%" height="15" fill="rgb(252,35,15)" fg:x="1666" fg:w="49283"/><text x="2.9540%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="85.6475%" y="261" width="0.0406%" height="15" fill="rgb(248,181,18)" fg:x="52770" fg:w="25"/><text x="85.8975%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (23 samples, 0.04%)</title><rect x="85.8488%" y="229" width="0.0373%" height="15" fill="rgb(233,39,42)" fg:x="52894" fg:w="23"/><text x="86.0988%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (53 samples, 0.09%)</title><rect x="85.9835%" y="213" width="0.0860%" height="15" fill="rgb(238,110,33)" fg:x="52977" fg:w="53"/><text x="86.2335%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (266 samples, 0.43%)</title><rect x="85.6930%" y="261" width="0.4317%" height="15" fill="rgb(233,195,10)" fg:x="52798" fg:w="266"/><text x="85.9430%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (183 samples, 0.30%)</title><rect x="85.8277%" y="245" width="0.2970%" height="15" fill="rgb(254,105,3)" fg:x="52881" fg:w="183"/><text x="86.0777%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (147 samples, 0.24%)</title><rect x="85.8861%" y="229" width="0.2386%" height="15" fill="rgb(221,225,9)" fg:x="52917" fg:w="147"/><text x="86.1361%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (34 samples, 0.06%)</title><rect x="86.0695%" y="213" width="0.0552%" height="15" fill="rgb(224,227,45)" fg:x="53030" fg:w="34"/><text x="86.3195%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="86.2058%" y="245" width="0.0130%" height="15" fill="rgb(229,198,43)" fg:x="53114" fg:w="8"/><text x="86.4558%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="86.2334%" y="245" width="0.0179%" height="15" fill="rgb(206,209,35)" fg:x="53131" fg:w="11"/><text x="86.4834%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="86.5256%" y="181" width="0.0276%" height="15" fill="rgb(245,195,53)" fg:x="53311" fg:w="17"/><text x="86.7756%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (104 samples, 0.17%)</title><rect x="86.4298%" y="197" width="0.1688%" height="15" fill="rgb(240,92,26)" fg:x="53252" fg:w="104"/><text x="86.6798%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (28 samples, 0.05%)</title><rect x="86.5532%" y="181" width="0.0454%" height="15" fill="rgb(207,40,23)" fg:x="53328" fg:w="28"/><text x="86.8032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (116 samples, 0.19%)</title><rect x="86.4233%" y="213" width="0.1883%" height="15" fill="rgb(223,111,35)" fg:x="53248" fg:w="116"/><text x="86.6733%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="86.5986%" y="197" width="0.0130%" height="15" fill="rgb(229,147,28)" fg:x="53356" fg:w="8"/><text x="86.8486%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="86.6116%" y="213" width="0.0162%" height="15" fill="rgb(211,29,28)" fg:x="53364" fg:w="10"/><text x="86.8616%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (145 samples, 0.24%)</title><rect x="86.3941%" y="229" width="0.2353%" height="15" fill="rgb(228,72,33)" fg:x="53230" fg:w="145"/><text x="86.6441%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="86.6294%" y="229" width="0.0130%" height="15" fill="rgb(205,214,31)" fg:x="53375" fg:w="8"/><text x="86.8794%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (325 samples, 0.53%)</title><rect x="86.1247%" y="261" width="0.5275%" height="15" fill="rgb(224,111,15)" fg:x="53064" fg:w="325"/><text x="86.3747%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (237 samples, 0.38%)</title><rect x="86.2675%" y="245" width="0.3847%" height="15" fill="rgb(253,21,26)" fg:x="53152" fg:w="237"/><text x="86.5175%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,442 samples, 3.96%)</title><rect x="82.6920%" y="277" width="3.9634%" height="15" fill="rgb(245,139,43)" fg:x="50949" fg:w="2442"/><text x="82.9420%" y="287.50">rust..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (7 samples, 0.01%)</title><rect x="86.8891%" y="261" width="0.0114%" height="15" fill="rgb(252,170,7)" fg:x="53535" fg:w="7"/><text x="87.1391%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="86.8891%" y="245" width="0.0114%" height="15" fill="rgb(231,118,14)" fg:x="53535" fg:w="7"/><text x="87.1391%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (203 samples, 0.33%)</title><rect x="86.6554%" y="277" width="0.3295%" height="15" fill="rgb(238,83,0)" fg:x="53391" fg:w="203"/><text x="86.9054%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (52 samples, 0.08%)</title><rect x="86.9005%" y="261" width="0.0844%" height="15" fill="rgb(221,39,39)" fg:x="53542" fg:w="52"/><text x="87.1505%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,277 samples, 6.94%)</title><rect x="86.9849%" y="277" width="6.9417%" height="15" fill="rgb(222,119,46)" fg:x="53594" fg:w="4277"/><text x="87.2349%" y="287.50">rust_qecp..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.01%)</title><rect x="93.9152%" y="261" width="0.0114%" height="15" fill="rgb(222,165,49)" fg:x="57864" fg:w="7"/><text x="94.1652%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (108 samples, 0.18%)</title><rect x="93.9331%" y="261" width="0.1753%" height="15" fill="rgb(219,113,52)" fg:x="57875" fg:w="108"/><text x="94.1831%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (376 samples, 0.61%)</title><rect x="93.9266%" y="277" width="0.6103%" height="15" fill="rgb(214,7,15)" fg:x="57871" fg:w="376"/><text x="94.1766%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (264 samples, 0.43%)</title><rect x="94.1084%" y="261" width="0.4285%" height="15" fill="rgb(235,32,4)" fg:x="57983" fg:w="264"/><text x="94.3584%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (59 samples, 0.10%)</title><rect x="94.5369%" y="277" width="0.0958%" height="15" fill="rgb(238,90,54)" fg:x="58247" fg:w="59"/><text x="94.7869%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,120 samples, 5.06%)</title><rect x="94.6359%" y="277" width="5.0639%" height="15" fill="rgb(213,208,19)" fg:x="58308" fg:w="3120"/><text x="94.8859%" y="287.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,581 samples, 4.19%)</title><rect x="95.5107%" y="261" width="4.1891%" height="15" fill="rgb(233,156,4)" fg:x="58847" fg:w="2581"/><text x="95.7607%" y="271.50">rust_..</text></g><g><title>libsystem_pthread.dylib`thread_start (60,112 samples, 97.56%)</title><rect x="2.1392%" y="357" width="97.5638%" height="15" fill="rgb(207,194,5)" fg:x="1318" fg:w="60112"/><text x="2.3892%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,112 samples, 97.56%)</title><rect x="2.1392%" y="341" width="97.5638%" height="15" fill="rgb(206,111,30)" fg:x="1318" fg:w="60112"/><text x="2.3892%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,112 samples, 97.56%)</title><rect x="2.1392%" y="325" width="97.5638%" height="15" fill="rgb(243,70,54)" fg:x="1318" fg:w="60112"/><text x="2.3892%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,112 samples, 97.56%)</title><rect x="2.1392%" y="309" width="97.5638%" height="15" fill="rgb(242,28,8)" fg:x="1318" fg:w="60112"/><text x="2.3892%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,112 samples, 97.56%)</title><rect x="2.1392%" y="293" width="97.5638%" height="15" fill="rgb(219,106,18)" fg:x="1318" fg:w="60112"/><text x="2.3892%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="99.7030%" y="309" width="0.0146%" height="15" fill="rgb(244,222,10)" fg:x="61430" fg:w="9"/><text x="99.9530%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (64 samples, 0.10%)</title><rect x="99.7208%" y="309" width="0.1039%" height="15" fill="rgb(236,179,52)" fg:x="61441" fg:w="64"/><text x="99.9708%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15 samples, 0.02%)</title><rect x="99.8247%" y="309" width="0.0243%" height="15" fill="rgb(213,23,39)" fg:x="61505" fg:w="15"/><text x="100.0747%" y="319.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="99.9740%" y="293" width="0.0114%" height="15" fill="rgb(238,48,10)" fg:x="61597" fg:w="7"/><text x="100.2240%" y="303.50"></text></g><g><title>all (61,613 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(251,196,23)" fg:x="0" fg:w="61613"/><text x="0.2500%" y="383.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (183 samples, 0.30%)</title><rect x="99.7030%" y="357" width="0.2970%" height="15" fill="rgb(250,152,24)" fg:x="61430" fg:w="183"/><text x="99.9530%" y="367.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (183 samples, 0.30%)</title><rect x="99.7030%" y="341" width="0.2970%" height="15" fill="rgb(209,150,17)" fg:x="61430" fg:w="183"/><text x="99.9530%" y="351.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (183 samples, 0.30%)</title><rect x="99.7030%" y="325" width="0.2970%" height="15" fill="rgb(234,202,34)" fg:x="61430" fg:w="183"/><text x="99.9530%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (93 samples, 0.15%)</title><rect x="99.8491%" y="309" width="0.1509%" height="15" fill="rgb(253,148,53)" fg:x="61520" fg:w="93"/><text x="100.0991%" y="319.50"></text></g></svg></svg>