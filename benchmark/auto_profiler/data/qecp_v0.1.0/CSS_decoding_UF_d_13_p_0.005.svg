<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="69306"><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.02%)</title><rect x="0.0289%" y="133" width="0.0245%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="17"/><text x="0.2789%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="0.0534%" y="133" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="8"/><text x="0.3034%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (37 samples, 0.05%)</title><rect x="0.0130%" y="149" width="0.0534%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="37"/><text x="0.2630%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (32 samples, 0.05%)</title><rect x="0.0866%" y="53" width="0.0462%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="32"/><text x="0.3366%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (14 samples, 0.02%)</title><rect x="0.1327%" y="53" width="0.0202%" height="15" fill="rgb(208,68,35)" fg:x="92" fg:w="14"/><text x="0.3827%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.02%)</title><rect x="0.1327%" y="37" width="0.0202%" height="15" fill="rgb(232,128,0)" fg:x="92" fg:w="14"/><text x="0.3827%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (53 samples, 0.08%)</title><rect x="0.0866%" y="69" width="0.0765%" height="15" fill="rgb(207,160,47)" fg:x="60" fg:w="53"/><text x="0.3366%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (7 samples, 0.01%)</title><rect x="0.1529%" y="53" width="0.0101%" height="15" fill="rgb(228,23,34)" fg:x="106" fg:w="7"/><text x="0.4029%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.01%)</title><rect x="0.1659%" y="69" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="115" fg:w="8"/><text x="0.4159%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.01%)</title><rect x="0.1659%" y="53" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="115" fg:w="8"/><text x="0.4159%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.09%)</title><rect x="0.1775%" y="69" width="0.0880%" height="15" fill="rgb(250,228,42)" fg:x="123" fg:w="61"/><text x="0.4275%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (128 samples, 0.18%)</title><rect x="0.0822%" y="149" width="0.1847%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="128"/><text x="0.3322%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (128 samples, 0.18%)</title><rect x="0.0822%" y="133" width="0.1847%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="128"/><text x="0.3322%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.18%)</title><rect x="0.0822%" y="117" width="0.1847%" height="15" fill="rgb(206,188,39)" fg:x="57" fg:w="128"/><text x="0.3322%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.18%)</title><rect x="0.0822%" y="101" width="0.1847%" height="15" fill="rgb(217,207,13)" fg:x="57" fg:w="128"/><text x="0.3322%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (127 samples, 0.18%)</title><rect x="0.0837%" y="85" width="0.1832%" height="15" fill="rgb(231,73,38)" fg:x="58" fg:w="127"/><text x="0.3337%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="0.2785%" y="69" width="0.0188%" height="15" fill="rgb(225,20,46)" fg:x="193" fg:w="13"/><text x="0.5285%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (14 samples, 0.02%)</title><rect x="0.2785%" y="85" width="0.0202%" height="15" fill="rgb(210,31,41)" fg:x="193" fg:w="14"/><text x="0.5285%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (28 samples, 0.04%)</title><rect x="0.2669%" y="149" width="0.0404%" height="15" fill="rgb(221,200,47)" fg:x="185" fg:w="28"/><text x="0.5169%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="0.2684%" y="133" width="0.0390%" height="15" fill="rgb(226,26,5)" fg:x="186" fg:w="27"/><text x="0.5184%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="0.2684%" y="117" width="0.0390%" height="15" fill="rgb(249,33,26)" fg:x="186" fg:w="27"/><text x="0.5184%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (21 samples, 0.03%)</title><rect x="0.2770%" y="101" width="0.0303%" height="15" fill="rgb(235,183,28)" fg:x="192" fg:w="21"/><text x="0.5270%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (502 samples, 0.72%)</title><rect x="0.3073%" y="149" width="0.7243%" height="15" fill="rgb(221,5,38)" fg:x="213" fg:w="502"/><text x="0.5573%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (188 samples, 0.27%)</title><rect x="1.0317%" y="149" width="0.2713%" height="15" fill="rgb(247,18,42)" fg:x="715" fg:w="188"/><text x="1.2817%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.01%)</title><rect x="1.3029%" y="149" width="0.0130%" height="15" fill="rgb(241,131,45)" fg:x="903" fg:w="9"/><text x="1.5529%" y="159.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (12 samples, 0.02%)</title><rect x="1.3159%" y="149" width="0.0173%" height="15" fill="rgb(249,31,29)" fg:x="912" fg:w="12"/><text x="1.5659%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (82 samples, 0.12%)</title><rect x="5.9836%" y="133" width="0.1183%" height="15" fill="rgb(225,111,53)" fg:x="4147" fg:w="82"/><text x="6.2336%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.09%)</title><rect x="6.1019%" y="133" width="0.0938%" height="15" fill="rgb(238,160,17)" fg:x="4229" fg:w="65"/><text x="6.3519%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (54 samples, 0.08%)</title><rect x="6.1957%" y="133" width="0.0779%" height="15" fill="rgb(214,148,48)" fg:x="4294" fg:w="54"/><text x="6.4457%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (514 samples, 0.74%)</title><rect x="6.2736%" y="133" width="0.7416%" height="15" fill="rgb(232,36,49)" fg:x="4348" fg:w="514"/><text x="6.5236%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="7.0167%" y="85" width="0.0159%" height="15" fill="rgb(209,103,24)" fg:x="4863" fg:w="11"/><text x="7.2667%" y="95.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.02%)</title><rect x="7.0153%" y="133" width="0.0188%" height="15" fill="rgb(229,88,8)" fg:x="4862" fg:w="13"/><text x="7.2653%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="7.0153%" y="117" width="0.0188%" height="15" fill="rgb(213,181,19)" fg:x="4862" fg:w="13"/><text x="7.2653%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.02%)</title><rect x="7.0153%" y="101" width="0.0188%" height="15" fill="rgb(254,191,54)" fg:x="4862" fg:w="13"/><text x="7.2653%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.10%)</title><rect x="7.6487%" y="117" width="0.1039%" height="15" fill="rgb(241,83,37)" fg:x="5301" fg:w="72"/><text x="7.8987%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="7.7915%" y="101" width="0.0130%" height="15" fill="rgb(233,36,39)" fg:x="5400" fg:w="9"/><text x="8.0415%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (709 samples, 1.02%)</title><rect x="7.0340%" y="133" width="1.0230%" height="15" fill="rgb(226,3,54)" fg:x="4875" fg:w="709"/><text x="7.2840%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (208 samples, 0.30%)</title><rect x="7.7569%" y="117" width="0.3001%" height="15" fill="rgb(245,192,40)" fg:x="5376" fg:w="208"/><text x="8.0069%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (172 samples, 0.25%)</title><rect x="7.8088%" y="101" width="0.2482%" height="15" fill="rgb(238,167,29)" fg:x="5412" fg:w="172"/><text x="8.0588%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (28 samples, 0.04%)</title><rect x="8.0657%" y="133" width="0.0404%" height="15" fill="rgb(232,182,51)" fg:x="5590" fg:w="28"/><text x="8.3157%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (196 samples, 0.28%)</title><rect x="10.7090%" y="117" width="0.2828%" height="15" fill="rgb(231,60,39)" fg:x="7422" fg:w="196"/><text x="10.9590%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (430 samples, 0.62%)</title><rect x="10.9990%" y="117" width="0.6204%" height="15" fill="rgb(208,69,12)" fg:x="7623" fg:w="430"/><text x="11.2490%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (32 samples, 0.05%)</title><rect x="11.6844%" y="101" width="0.0462%" height="15" fill="rgb(235,93,37)" fg:x="8098" fg:w="32"/><text x="11.9344%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,295 samples, 10.53%)</title><rect x="1.3347%" y="149" width="10.5258%" height="15" fill="rgb(213,116,39)" fg:x="925" fg:w="7295"/><text x="1.5847%" y="159.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,602 samples, 3.75%)</title><rect x="8.1061%" y="133" width="3.7544%" height="15" fill="rgb(222,207,29)" fg:x="5618" fg:w="2602"/><text x="8.3561%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (167 samples, 0.24%)</title><rect x="11.6195%" y="117" width="0.2410%" height="15" fill="rgb(206,96,30)" fg:x="8053" fg:w="167"/><text x="11.8695%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (90 samples, 0.13%)</title><rect x="11.7306%" y="101" width="0.1299%" height="15" fill="rgb(218,138,4)" fg:x="8130" fg:w="90"/><text x="11.9806%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.08%)</title><rect x="11.8778%" y="133" width="0.0837%" height="15" fill="rgb(250,191,14)" fg:x="8232" fg:w="58"/><text x="12.1278%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="12.1432%" y="117" width="0.0115%" height="15" fill="rgb(239,60,40)" fg:x="8416" fg:w="8"/><text x="12.3932%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (14 samples, 0.02%)</title><rect x="12.1649%" y="117" width="0.0202%" height="15" fill="rgb(206,27,48)" fg:x="8431" fg:w="14"/><text x="12.4149%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (241 samples, 0.35%)</title><rect x="11.9629%" y="133" width="0.3477%" height="15" fill="rgb(225,35,8)" fg:x="8291" fg:w="241"/><text x="12.2129%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (87 samples, 0.13%)</title><rect x="12.1851%" y="117" width="0.1255%" height="15" fill="rgb(250,213,24)" fg:x="8445" fg:w="87"/><text x="12.4351%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (319 samples, 0.46%)</title><rect x="11.8604%" y="149" width="0.4603%" height="15" fill="rgb(247,123,22)" fg:x="8220" fg:w="319"/><text x="12.1104%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="12.3207%" y="149" width="0.0332%" height="15" fill="rgb(231,138,38)" fg:x="8539" fg:w="23"/><text x="12.5707%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (21 samples, 0.03%)</title><rect x="12.3236%" y="133" width="0.0303%" height="15" fill="rgb(231,145,46)" fg:x="8541" fg:w="21"/><text x="12.5736%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="12.3438%" y="117" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="8555" fg:w="7"/><text x="12.5938%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,558 samples, 12.35%)</title><rect x="0.0101%" y="165" width="12.3481%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="8558"/><text x="0.2601%" y="175.50">rust_qecp`rust_qec..</text></g><g><title>dyld`start (8,566 samples, 12.36%)</title><rect x="0.0000%" y="389" width="12.3597%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="8566"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (8,560 samples, 12.35%)</title><rect x="0.0087%" y="373" width="12.3510%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,560 samples, 12.35%)</title><rect x="0.0087%" y="357" width="12.3510%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="367.50">rust_qecp`std::rt:..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,560 samples, 12.35%)</title><rect x="0.0087%" y="341" width="12.3510%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="351.50">rust_qecp`std::rt:..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,560 samples, 12.35%)</title><rect x="0.0087%" y="325" width="12.3510%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="335.50">rust_qecp`std::sys..</text></g><g><title>rust_qecp`rust_qecp::main (8,560 samples, 12.35%)</title><rect x="0.0087%" y="309" width="12.3510%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="319.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (8,560 samples, 12.35%)</title><rect x="0.0087%" y="293" width="12.3510%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="303.50">rust_qecp`tokio::r..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (8,560 samples, 12.35%)</title><rect x="0.0087%" y="277" width="12.3510%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="287.50">rust_qecp`tokio::r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (8,560 samples, 12.35%)</title><rect x="0.0087%" y="261" width="12.3510%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="271.50">rust_qecp`tokio::r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,560 samples, 12.35%)</title><rect x="0.0087%" y="245" width="12.3510%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="255.50">rust_qecp`tokio::m..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,560 samples, 12.35%)</title><rect x="0.0087%" y="229" width="12.3510%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="239.50">rust_qecp`&lt;core::f..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,560 samples, 12.35%)</title><rect x="0.0087%" y="213" width="12.3510%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="223.50">rust_qecp`tokio::m..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,560 samples, 12.35%)</title><rect x="0.0087%" y="197" width="12.3510%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="8560"/><text x="0.2587%" y="207.50">rust_qecp`&lt;core::f..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,559 samples, 12.35%)</title><rect x="0.0101%" y="181" width="12.3496%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="8559"/><text x="0.2601%" y="191.50">rust_qecp`rust_qec..</text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.02%)</title><rect x="12.3597%" y="389" width="0.0159%" height="15" fill="rgb(244,35,45)" fg:x="8566" fg:w="11"/><text x="12.6097%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="12.4001%" y="309" width="0.0188%" height="15" fill="rgb(251,115,12)" fg:x="8594" fg:w="13"/><text x="12.6501%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (9 samples, 0.01%)</title><rect x="12.4246%" y="309" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="8611" fg:w="9"/><text x="12.6746%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (9 samples, 0.01%)</title><rect x="12.4246%" y="293" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="8611" fg:w="9"/><text x="12.6746%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="12.4246%" y="277" width="0.0130%" height="15" fill="rgb(207,117,47)" fg:x="8611" fg:w="9"/><text x="12.6746%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="12.4261%" y="261" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="8612" fg:w="8"/><text x="12.6761%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.05%)</title><rect x="12.4549%" y="293" width="0.0462%" height="15" fill="rgb(209,38,44)" fg:x="8632" fg:w="32"/><text x="12.7049%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="12.5083%" y="277" width="0.0216%" height="15" fill="rgb(236,212,23)" fg:x="8669" fg:w="15"/><text x="12.7583%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="12.5112%" y="261" width="0.0188%" height="15" fill="rgb(242,79,21)" fg:x="8671" fg:w="13"/><text x="12.7612%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="12.5141%" y="245" width="0.0159%" height="15" fill="rgb(211,96,35)" fg:x="8673" fg:w="11"/><text x="12.7641%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="12.5040%" y="293" width="0.0274%" height="15" fill="rgb(253,215,40)" fg:x="8666" fg:w="19"/><text x="12.7540%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.04%)</title><rect x="12.5328%" y="293" width="0.0375%" height="15" fill="rgb(211,81,21)" fg:x="8686" fg:w="26"/><text x="12.7828%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="12.5602%" y="277" width="0.0101%" height="15" fill="rgb(208,190,38)" fg:x="8705" fg:w="7"/><text x="12.8102%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="12.5761%" y="293" width="0.0101%" height="15" fill="rgb(235,213,38)" fg:x="8716" fg:w="7"/><text x="12.8261%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (160 samples, 0.23%)</title><rect x="12.5862%" y="293" width="0.2309%" height="15" fill="rgb(237,122,38)" fg:x="8723" fg:w="160"/><text x="12.8362%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (29 samples, 0.04%)</title><rect x="12.8171%" y="293" width="0.0418%" height="15" fill="rgb(244,218,35)" fg:x="8883" fg:w="29"/><text x="13.0671%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (8 samples, 0.01%)</title><rect x="12.8632%" y="293" width="0.0115%" height="15" fill="rgb(240,68,47)" fg:x="8915" fg:w="8"/><text x="13.1132%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="12.8762%" y="245" width="0.0101%" height="15" fill="rgb(210,16,53)" fg:x="8924" fg:w="7"/><text x="13.1262%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.01%)</title><rect x="12.8748%" y="293" width="0.0144%" height="15" fill="rgb(235,124,12)" fg:x="8923" fg:w="10"/><text x="13.1248%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="12.8762%" y="277" width="0.0130%" height="15" fill="rgb(224,169,11)" fg:x="8924" fg:w="9"/><text x="13.1262%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.01%)</title><rect x="12.8762%" y="261" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="8924" fg:w="9"/><text x="13.1262%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="12.9022%" y="293" width="0.0188%" height="15" fill="rgb(242,216,29)" fg:x="8942" fg:w="13"/><text x="13.1522%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (89 samples, 0.13%)</title><rect x="14.0623%" y="245" width="0.1284%" height="15" fill="rgb(230,116,27)" fg:x="9746" fg:w="89"/><text x="14.3123%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (87 samples, 0.13%)</title><rect x="14.0652%" y="229" width="0.1255%" height="15" fill="rgb(228,99,48)" fg:x="9748" fg:w="87"/><text x="14.3152%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (102 samples, 0.15%)</title><rect x="14.0464%" y="277" width="0.1472%" height="15" fill="rgb(253,11,6)" fg:x="9735" fg:w="102"/><text x="14.2964%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (94 samples, 0.14%)</title><rect x="14.0579%" y="261" width="0.1356%" height="15" fill="rgb(247,143,39)" fg:x="9743" fg:w="94"/><text x="14.3079%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="14.1965%" y="277" width="0.0231%" height="15" fill="rgb(236,97,10)" fg:x="9839" fg:w="16"/><text x="14.4465%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.01%)</title><rect x="14.2051%" y="261" width="0.0144%" height="15" fill="rgb(233,208,19)" fg:x="9845" fg:w="10"/><text x="14.4551%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="14.2830%" y="197" width="0.0260%" height="15" fill="rgb(216,164,2)" fg:x="9899" fg:w="18"/><text x="14.5330%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (29 samples, 0.04%)</title><rect x="14.2787%" y="213" width="0.0418%" height="15" fill="rgb(220,129,5)" fg:x="9896" fg:w="29"/><text x="14.5287%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (36 samples, 0.05%)</title><rect x="14.2700%" y="229" width="0.0519%" height="15" fill="rgb(242,17,10)" fg:x="9890" fg:w="36"/><text x="14.5200%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.08%)</title><rect x="14.2599%" y="245" width="0.0837%" height="15" fill="rgb(242,107,0)" fg:x="9883" fg:w="58"/><text x="14.5099%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="14.3220%" y="229" width="0.0216%" height="15" fill="rgb(251,28,31)" fg:x="9926" fg:w="15"/><text x="14.5720%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (87 samples, 0.13%)</title><rect x="14.2253%" y="277" width="0.1255%" height="15" fill="rgb(233,223,10)" fg:x="9859" fg:w="87"/><text x="14.4753%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (73 samples, 0.11%)</title><rect x="14.2455%" y="261" width="0.1053%" height="15" fill="rgb(215,21,27)" fg:x="9873" fg:w="73"/><text x="14.4955%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (989 samples, 1.43%)</title><rect x="12.9325%" y="293" width="1.4270%" height="15" fill="rgb(232,23,21)" fg:x="8963" fg:w="989"/><text x="13.1825%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (27 samples, 0.04%)</title><rect x="22.5608%" y="277" width="0.0390%" height="15" fill="rgb(244,5,23)" fg:x="15636" fg:w="27"/><text x="22.8108%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.04%)</title><rect x="22.5998%" y="277" width="0.0361%" height="15" fill="rgb(226,81,46)" fg:x="15663" fg:w="25"/><text x="22.8498%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (44 samples, 0.06%)</title><rect x="22.6416%" y="277" width="0.0635%" height="15" fill="rgb(247,70,30)" fg:x="15692" fg:w="44"/><text x="22.8916%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.11%)</title><rect x="22.7051%" y="277" width="0.1053%" height="15" fill="rgb(212,68,19)" fg:x="15736" fg:w="73"/><text x="22.9551%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="22.8104%" y="277" width="0.0115%" height="15" fill="rgb(240,187,13)" fg:x="15809" fg:w="8"/><text x="23.0604%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (19 samples, 0.03%)</title><rect x="22.8220%" y="277" width="0.0274%" height="15" fill="rgb(223,113,26)" fg:x="15817" fg:w="19"/><text x="23.0720%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="22.8378%" y="261" width="0.0115%" height="15" fill="rgb(206,192,2)" fg:x="15828" fg:w="8"/><text x="23.0878%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="22.8378%" y="245" width="0.0115%" height="15" fill="rgb(241,108,4)" fg:x="15828" fg:w="8"/><text x="23.0878%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (63 samples, 0.09%)</title><rect x="22.8494%" y="277" width="0.0909%" height="15" fill="rgb(247,173,49)" fg:x="15836" fg:w="63"/><text x="23.0994%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.04%)</title><rect x="22.9403%" y="277" width="0.0447%" height="15" fill="rgb(224,114,35)" fg:x="15899" fg:w="31"/><text x="23.1903%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (14 samples, 0.02%)</title><rect x="22.9850%" y="277" width="0.0202%" height="15" fill="rgb(245,159,27)" fg:x="15930" fg:w="14"/><text x="23.2350%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.01%)</title><rect x="23.0052%" y="277" width="0.0144%" height="15" fill="rgb(245,172,44)" fg:x="15944" fg:w="10"/><text x="23.2552%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (28 samples, 0.04%)</title><rect x="23.0197%" y="277" width="0.0404%" height="15" fill="rgb(236,23,11)" fg:x="15954" fg:w="28"/><text x="23.2697%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 0.06%)</title><rect x="23.0601%" y="277" width="0.0592%" height="15" fill="rgb(205,117,38)" fg:x="15982" fg:w="41"/><text x="23.3101%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (41 samples, 0.06%)</title><rect x="23.1192%" y="277" width="0.0592%" height="15" fill="rgb(237,72,25)" fg:x="16023" fg:w="41"/><text x="23.3692%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.02%)</title><rect x="23.1784%" y="277" width="0.0231%" height="15" fill="rgb(244,70,9)" fg:x="16064" fg:w="16"/><text x="23.4284%" y="287.50"></text></g><g><title>rust_qecp`__rdl_alloc (26 samples, 0.04%)</title><rect x="23.2015%" y="277" width="0.0375%" height="15" fill="rgb(217,125,39)" fg:x="16080" fg:w="26"/><text x="23.4515%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="23.4063%" y="197" width="0.0173%" height="15" fill="rgb(235,36,10)" fg:x="16222" fg:w="12"/><text x="23.6563%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="23.4121%" y="181" width="0.0115%" height="15" fill="rgb(251,123,47)" fg:x="16226" fg:w="8"/><text x="23.6621%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="23.4136%" y="165" width="0.0101%" height="15" fill="rgb(221,13,13)" fg:x="16227" fg:w="7"/><text x="23.6636%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (33 samples, 0.05%)</title><rect x="23.3775%" y="213" width="0.0476%" height="15" fill="rgb(238,131,9)" fg:x="16202" fg:w="33"/><text x="23.6275%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (139 samples, 0.20%)</title><rect x="23.3717%" y="229" width="0.2006%" height="15" fill="rgb(211,50,8)" fg:x="16198" fg:w="139"/><text x="23.6217%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (102 samples, 0.15%)</title><rect x="23.4251%" y="213" width="0.1472%" height="15" fill="rgb(245,182,24)" fg:x="16235" fg:w="102"/><text x="23.6751%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (235 samples, 0.34%)</title><rect x="23.2462%" y="277" width="0.3391%" height="15" fill="rgb(242,14,37)" fg:x="16111" fg:w="235"/><text x="23.4962%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (158 samples, 0.23%)</title><rect x="23.3573%" y="261" width="0.2280%" height="15" fill="rgb(246,228,12)" fg:x="16188" fg:w="158"/><text x="23.6073%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (150 samples, 0.22%)</title><rect x="23.3688%" y="245" width="0.2164%" height="15" fill="rgb(213,55,15)" fg:x="16196" fg:w="150"/><text x="23.6188%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="23.6718%" y="261" width="0.0159%" height="15" fill="rgb(209,9,3)" fg:x="16406" fg:w="11"/><text x="23.9218%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (59 samples, 0.09%)</title><rect x="23.9287%" y="245" width="0.0851%" height="15" fill="rgb(230,59,30)" fg:x="16584" fg:w="59"/><text x="24.1787%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="24.0138%" y="245" width="0.0231%" height="15" fill="rgb(209,121,21)" fg:x="16643" fg:w="16"/><text x="24.2638%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (29 samples, 0.04%)</title><rect x="24.0369%" y="245" width="0.0418%" height="15" fill="rgb(220,109,13)" fg:x="16659" fg:w="29"/><text x="24.2869%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (363 samples, 0.52%)</title><rect x="23.6877%" y="261" width="0.5238%" height="15" fill="rgb(232,18,1)" fg:x="16417" fg:w="363"/><text x="23.9377%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (92 samples, 0.13%)</title><rect x="24.0787%" y="245" width="0.1327%" height="15" fill="rgb(215,41,42)" fg:x="16688" fg:w="92"/><text x="24.3287%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (71 samples, 0.10%)</title><rect x="24.1090%" y="229" width="0.1024%" height="15" fill="rgb(224,123,36)" fg:x="16709" fg:w="71"/><text x="24.3590%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (9 samples, 0.01%)</title><rect x="24.3327%" y="245" width="0.0130%" height="15" fill="rgb(240,125,3)" fg:x="16864" fg:w="9"/><text x="24.5827%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (69 samples, 0.10%)</title><rect x="24.3457%" y="245" width="0.0996%" height="15" fill="rgb(205,98,50)" fg:x="16873" fg:w="69"/><text x="24.5957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (23 samples, 0.03%)</title><rect x="24.4452%" y="245" width="0.0332%" height="15" fill="rgb(205,185,37)" fg:x="16942" fg:w="23"/><text x="24.6952%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (31 samples, 0.04%)</title><rect x="24.4784%" y="245" width="0.0447%" height="15" fill="rgb(238,207,15)" fg:x="16965" fg:w="31"/><text x="24.7284%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (197 samples, 0.28%)</title><rect x="24.5231%" y="245" width="0.2842%" height="15" fill="rgb(213,199,42)" fg:x="16996" fg:w="197"/><text x="24.7731%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (387 samples, 0.56%)</title><rect x="24.8146%" y="245" width="0.5584%" height="15" fill="rgb(235,201,11)" fg:x="17198" fg:w="387"/><text x="25.0646%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (382 samples, 0.55%)</title><rect x="24.8218%" y="229" width="0.5512%" height="15" fill="rgb(207,46,11)" fg:x="17203" fg:w="382"/><text x="25.0718%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (123 samples, 0.18%)</title><rect x="25.3759%" y="229" width="0.1775%" height="15" fill="rgb(241,35,35)" fg:x="17587" fg:w="123"/><text x="25.6259%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (926 samples, 1.34%)</title><rect x="24.2187%" y="261" width="1.3361%" height="15" fill="rgb(243,32,47)" fg:x="16785" fg:w="926"/><text x="24.4687%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (126 samples, 0.18%)</title><rect x="25.3730%" y="245" width="0.1818%" height="15" fill="rgb(247,202,23)" fg:x="17585" fg:w="126"/><text x="25.6230%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (37 samples, 0.05%)</title><rect x="25.7727%" y="229" width="0.0534%" height="15" fill="rgb(219,102,11)" fg:x="17862" fg:w="37"/><text x="26.0227%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (86 samples, 0.12%)</title><rect x="25.8260%" y="229" width="0.1241%" height="15" fill="rgb(243,110,44)" fg:x="17899" fg:w="86"/><text x="26.0760%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (85 samples, 0.12%)</title><rect x="25.9501%" y="229" width="0.1226%" height="15" fill="rgb(222,74,54)" fg:x="17985" fg:w="85"/><text x="26.2001%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (23 samples, 0.03%)</title><rect x="26.0728%" y="229" width="0.0332%" height="15" fill="rgb(216,99,12)" fg:x="18070" fg:w="23"/><text x="26.3228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (66 samples, 0.10%)</title><rect x="26.1060%" y="229" width="0.0952%" height="15" fill="rgb(226,22,26)" fg:x="18093" fg:w="66"/><text x="26.3560%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.06%)</title><rect x="26.1363%" y="213" width="0.0649%" height="15" fill="rgb(217,163,10)" fg:x="18114" fg:w="45"/><text x="26.3863%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.13%)</title><rect x="26.2113%" y="213" width="0.1284%" height="15" fill="rgb(213,25,53)" fg:x="18166" fg:w="89"/><text x="26.4613%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (545 samples, 0.79%)</title><rect x="25.5548%" y="261" width="0.7864%" height="15" fill="rgb(252,105,26)" fg:x="17711" fg:w="545"/><text x="25.8048%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (494 samples, 0.71%)</title><rect x="25.6284%" y="245" width="0.7128%" height="15" fill="rgb(220,39,43)" fg:x="17762" fg:w="494"/><text x="25.8784%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (97 samples, 0.14%)</title><rect x="26.2012%" y="229" width="0.1400%" height="15" fill="rgb(229,68,48)" fg:x="18159" fg:w="97"/><text x="26.4512%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (22 samples, 0.03%)</title><rect x="26.3412%" y="261" width="0.0317%" height="15" fill="rgb(252,8,32)" fg:x="18256" fg:w="22"/><text x="26.5912%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (71 samples, 0.10%)</title><rect x="26.4349%" y="229" width="0.1024%" height="15" fill="rgb(223,20,43)" fg:x="18321" fg:w="71"/><text x="26.6849%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (115 samples, 0.17%)</title><rect x="26.3729%" y="261" width="0.1659%" height="15" fill="rgb(229,81,49)" fg:x="18278" fg:w="115"/><text x="26.6229%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (72 samples, 0.10%)</title><rect x="26.4349%" y="245" width="0.1039%" height="15" fill="rgb(236,28,36)" fg:x="18321" fg:w="72"/><text x="26.6849%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (35 samples, 0.05%)</title><rect x="26.5403%" y="261" width="0.0505%" height="15" fill="rgb(249,185,26)" fg:x="18394" fg:w="35"/><text x="26.7903%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (33 samples, 0.05%)</title><rect x="26.6023%" y="261" width="0.0476%" height="15" fill="rgb(249,174,33)" fg:x="18437" fg:w="33"/><text x="26.8523%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="26.6499%" y="261" width="0.0159%" height="15" fill="rgb(233,201,37)" fg:x="18470" fg:w="11"/><text x="26.8999%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.02%)</title><rect x="26.6658%" y="261" width="0.0231%" height="15" fill="rgb(221,78,26)" fg:x="18481" fg:w="16"/><text x="26.9158%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.07%)</title><rect x="26.8202%" y="229" width="0.0707%" height="15" fill="rgb(250,127,30)" fg:x="18588" fg:w="49"/><text x="27.0702%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (118 samples, 0.17%)</title><rect x="26.7221%" y="245" width="0.1703%" height="15" fill="rgb(230,49,44)" fg:x="18520" fg:w="118"/><text x="26.9721%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (76 samples, 0.11%)</title><rect x="26.8995%" y="245" width="0.1097%" height="15" fill="rgb(229,67,23)" fg:x="18643" fg:w="76"/><text x="27.1495%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.01%)</title><rect x="26.9948%" y="229" width="0.0144%" height="15" fill="rgb(249,83,47)" fg:x="18709" fg:w="10"/><text x="27.2448%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="26.9948%" y="213" width="0.0144%" height="15" fill="rgb(215,43,3)" fg:x="18709" fg:w="10"/><text x="27.2448%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,375 samples, 3.43%)</title><rect x="23.5881%" y="277" width="3.4268%" height="15" fill="rgb(238,154,13)" fg:x="16348" fg:w="2375"/><text x="23.8381%" y="287.50">rus..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (220 samples, 0.32%)</title><rect x="26.6975%" y="261" width="0.3174%" height="15" fill="rgb(219,56,2)" fg:x="18503" fg:w="220"/><text x="26.9475%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (232 samples, 0.33%)</title><rect x="27.0150%" y="277" width="0.3347%" height="15" fill="rgb(233,0,4)" fg:x="18723" fg:w="232"/><text x="27.2650%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (215 samples, 0.31%)</title><rect x="27.0395%" y="261" width="0.3102%" height="15" fill="rgb(235,30,7)" fg:x="18740" fg:w="215"/><text x="27.2895%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (173 samples, 0.25%)</title><rect x="27.1001%" y="245" width="0.2496%" height="15" fill="rgb(250,79,13)" fg:x="18782" fg:w="173"/><text x="27.3501%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (117 samples, 0.17%)</title><rect x="27.1809%" y="229" width="0.1688%" height="15" fill="rgb(211,146,34)" fg:x="18838" fg:w="117"/><text x="27.4309%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (54 samples, 0.08%)</title><rect x="27.2718%" y="213" width="0.0779%" height="15" fill="rgb(228,22,38)" fg:x="18901" fg:w="54"/><text x="27.5218%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (10 samples, 0.01%)</title><rect x="27.3353%" y="197" width="0.0144%" height="15" fill="rgb(235,168,5)" fg:x="18945" fg:w="10"/><text x="27.5853%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (21 samples, 0.03%)</title><rect x="28.0784%" y="261" width="0.0303%" height="15" fill="rgb(221,155,16)" fg:x="19460" fg:w="21"/><text x="28.3284%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (44 samples, 0.06%)</title><rect x="28.1087%" y="261" width="0.0635%" height="15" fill="rgb(215,215,53)" fg:x="19481" fg:w="44"/><text x="28.3587%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (47 samples, 0.07%)</title><rect x="28.2905%" y="229" width="0.0678%" height="15" fill="rgb(223,4,10)" fg:x="19607" fg:w="47"/><text x="28.5405%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (849 samples, 1.23%)</title><rect x="27.3512%" y="277" width="1.2250%" height="15" fill="rgb(234,103,6)" fg:x="18956" fg:w="849"/><text x="27.6012%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (280 samples, 0.40%)</title><rect x="28.1722%" y="261" width="0.4040%" height="15" fill="rgb(227,97,0)" fg:x="19525" fg:w="280"/><text x="28.4222%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (260 samples, 0.38%)</title><rect x="28.2010%" y="245" width="0.3751%" height="15" fill="rgb(234,150,53)" fg:x="19545" fg:w="260"/><text x="28.4510%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (149 samples, 0.21%)</title><rect x="28.3612%" y="229" width="0.2150%" height="15" fill="rgb(228,201,54)" fg:x="19656" fg:w="149"/><text x="28.6112%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,277 samples, 1.84%)</title><rect x="28.5762%" y="277" width="1.8426%" height="15" fill="rgb(222,22,37)" fg:x="19805" fg:w="1277"/><text x="28.8262%" y="287.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (23 samples, 0.03%)</title><rect x="30.4187%" y="277" width="0.0332%" height="15" fill="rgb(237,53,32)" fg:x="21082" fg:w="23"/><text x="30.6687%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (116 samples, 0.17%)</title><rect x="30.5544%" y="261" width="0.1674%" height="15" fill="rgb(233,25,53)" fg:x="21176" fg:w="116"/><text x="30.8044%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="30.8602%" y="213" width="0.0101%" height="15" fill="rgb(210,40,34)" fg:x="21388" fg:w="7"/><text x="31.1102%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="30.8602%" y="197" width="0.0101%" height="15" fill="rgb(241,220,44)" fg:x="21388" fg:w="7"/><text x="31.1102%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="30.8530%" y="245" width="0.0202%" height="15" fill="rgb(235,28,35)" fg:x="21383" fg:w="14"/><text x="31.1030%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="30.8559%" y="229" width="0.0173%" height="15" fill="rgb(210,56,17)" fg:x="21385" fg:w="12"/><text x="31.1059%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (208 samples, 0.30%)</title><rect x="30.8732%" y="245" width="0.3001%" height="15" fill="rgb(224,130,29)" fg:x="21397" fg:w="208"/><text x="31.1232%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (657 samples, 0.95%)</title><rect x="30.4519%" y="277" width="0.9480%" height="15" fill="rgb(235,212,8)" fg:x="21105" fg:w="657"/><text x="30.7019%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (470 samples, 0.68%)</title><rect x="30.7217%" y="261" width="0.6782%" height="15" fill="rgb(223,33,50)" fg:x="21292" fg:w="470"/><text x="30.9717%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (157 samples, 0.23%)</title><rect x="31.1733%" y="245" width="0.2265%" height="15" fill="rgb(219,149,13)" fg:x="21605" fg:w="157"/><text x="31.4233%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (43 samples, 0.06%)</title><rect x="31.3999%" y="277" width="0.0620%" height="15" fill="rgb(250,156,29)" fg:x="21762" fg:w="43"/><text x="31.6499%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (8 samples, 0.01%)</title><rect x="31.4619%" y="277" width="0.0115%" height="15" fill="rgb(216,193,19)" fg:x="21805" fg:w="8"/><text x="31.7119%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (136 samples, 0.20%)</title><rect x="31.4735%" y="277" width="0.1962%" height="15" fill="rgb(216,135,14)" fg:x="21813" fg:w="136"/><text x="31.7235%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,428 samples, 4.95%)</title><rect x="33.9913%" y="261" width="4.9462%" height="15" fill="rgb(241,47,5)" fg:x="23558" fg:w="3428"/><text x="34.2413%" y="271.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.01%)</title><rect x="38.9432%" y="197" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="26990" fg:w="8"/><text x="39.1932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (38 samples, 0.05%)</title><rect x="38.9404%" y="213" width="0.0548%" height="15" fill="rgb(231,13,6)" fg:x="26988" fg:w="38"/><text x="39.1904%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.04%)</title><rect x="38.9548%" y="197" width="0.0404%" height="15" fill="rgb(207,181,40)" fg:x="26998" fg:w="28"/><text x="39.2048%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (44 samples, 0.06%)</title><rect x="38.9375%" y="261" width="0.0635%" height="15" fill="rgb(254,173,49)" fg:x="26986" fg:w="44"/><text x="39.1875%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (43 samples, 0.06%)</title><rect x="38.9389%" y="245" width="0.0620%" height="15" fill="rgb(221,1,38)" fg:x="26987" fg:w="43"/><text x="39.1889%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (42 samples, 0.06%)</title><rect x="38.9404%" y="229" width="0.0606%" height="15" fill="rgb(206,124,46)" fg:x="26988" fg:w="42"/><text x="39.1904%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,215 samples, 4.64%)</title><rect x="39.0024%" y="261" width="4.6388%" height="15" fill="rgb(249,21,11)" fg:x="27031" fg:w="3215"/><text x="39.2524%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (789 samples, 1.14%)</title><rect x="43.6412%" y="261" width="1.1384%" height="15" fill="rgb(222,201,40)" fg:x="30246" fg:w="789"/><text x="43.8912%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (70 samples, 0.10%)</title><rect x="44.8143%" y="229" width="0.1010%" height="15" fill="rgb(235,61,29)" fg:x="31059" fg:w="70"/><text x="45.0643%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (71 samples, 0.10%)</title><rect x="44.8143%" y="245" width="0.1024%" height="15" fill="rgb(219,207,3)" fg:x="31059" fg:w="71"/><text x="45.0643%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (138 samples, 0.20%)</title><rect x="44.9225%" y="245" width="0.1991%" height="15" fill="rgb(222,56,46)" fg:x="31134" fg:w="138"/><text x="45.1725%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (220 samples, 0.32%)</title><rect x="45.2876%" y="229" width="0.3174%" height="15" fill="rgb(239,76,54)" fg:x="31387" fg:w="220"/><text x="45.5376%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (752 samples, 1.09%)</title><rect x="44.7797%" y="261" width="1.0850%" height="15" fill="rgb(231,124,27)" fg:x="31035" fg:w="752"/><text x="45.0297%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (515 samples, 0.74%)</title><rect x="45.1216%" y="245" width="0.7431%" height="15" fill="rgb(249,195,6)" fg:x="31272" fg:w="515"/><text x="45.3716%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (180 samples, 0.26%)</title><rect x="45.6050%" y="229" width="0.2597%" height="15" fill="rgb(237,174,47)" fg:x="31607" fg:w="180"/><text x="45.8550%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (11,791 samples, 17.01%)</title><rect x="31.6697%" y="277" width="17.0130%" height="15" fill="rgb(206,201,31)" fg:x="21949" fg:w="11791"/><text x="31.9197%" y="287.50">rust_qecp`rust_qecp::ftqec..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,953 samples, 2.82%)</title><rect x="45.8647%" y="261" width="2.8179%" height="15" fill="rgb(231,57,52)" fg:x="31787" fg:w="1953"/><text x="46.1147%" y="271.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.04%)</title><rect x="48.6394%" y="245" width="0.0433%" height="15" fill="rgb(248,177,22)" fg:x="33710" fg:w="30"/><text x="48.8894%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (29 samples, 0.04%)</title><rect x="48.6408%" y="229" width="0.0418%" height="15" fill="rgb(215,211,37)" fg:x="33711" fg:w="29"/><text x="48.8908%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.04%)</title><rect x="48.6408%" y="213" width="0.0418%" height="15" fill="rgb(241,128,51)" fg:x="33711" fg:w="29"/><text x="48.8908%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.04%)</title><rect x="48.6408%" y="197" width="0.0418%" height="15" fill="rgb(227,165,31)" fg:x="33711" fg:w="29"/><text x="48.8908%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.04%)</title><rect x="48.6437%" y="181" width="0.0390%" height="15" fill="rgb(228,167,24)" fg:x="33713" fg:w="27"/><text x="48.8937%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (13 samples, 0.02%)</title><rect x="48.6827%" y="277" width="0.0188%" height="15" fill="rgb(228,143,12)" fg:x="33740" fg:w="13"/><text x="48.9327%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.04%)</title><rect x="50.2208%" y="261" width="0.0447%" height="15" fill="rgb(249,149,8)" fg:x="34806" fg:w="31"/><text x="50.4708%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (28 samples, 0.04%)</title><rect x="50.2655%" y="245" width="0.0404%" height="15" fill="rgb(243,35,44)" fg:x="34837" fg:w="28"/><text x="50.5155%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="50.3059%" y="245" width="0.0159%" height="15" fill="rgb(246,89,9)" fg:x="34865" fg:w="11"/><text x="50.5559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="50.3218%" y="245" width="0.0130%" height="15" fill="rgb(233,213,13)" fg:x="34876" fg:w="9"/><text x="50.5718%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="50.3347%" y="245" width="0.0361%" height="15" fill="rgb(233,141,41)" fg:x="34885" fg:w="25"/><text x="50.5847%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="50.3708%" y="245" width="0.0173%" height="15" fill="rgb(239,167,4)" fg:x="34910" fg:w="12"/><text x="50.6208%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="50.3881%" y="245" width="0.0159%" height="15" fill="rgb(209,217,16)" fg:x="34922" fg:w="11"/><text x="50.6381%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="50.6002%" y="213" width="0.0115%" height="15" fill="rgb(219,88,35)" fg:x="35069" fg:w="8"/><text x="50.8502%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 0.07%)</title><rect x="50.8210%" y="181" width="0.0693%" height="15" fill="rgb(220,193,23)" fg:x="35222" fg:w="48"/><text x="51.0710%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (164 samples, 0.24%)</title><rect x="50.6608%" y="197" width="0.2366%" height="15" fill="rgb(230,90,52)" fg:x="35111" fg:w="164"/><text x="50.9108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (313 samples, 0.45%)</title><rect x="50.4617%" y="229" width="0.4516%" height="15" fill="rgb(252,106,19)" fg:x="34973" fg:w="313"/><text x="50.7117%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (209 samples, 0.30%)</title><rect x="50.6118%" y="213" width="0.3016%" height="15" fill="rgb(206,74,20)" fg:x="35077" fg:w="209"/><text x="50.8618%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="50.8975%" y="197" width="0.0159%" height="15" fill="rgb(230,138,44)" fg:x="35275" fg:w="11"/><text x="51.1475%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="50.9133%" y="229" width="0.0361%" height="15" fill="rgb(235,182,43)" fg:x="35286" fg:w="25"/><text x="51.1633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (129 samples, 0.19%)</title><rect x="50.9494%" y="229" width="0.1861%" height="15" fill="rgb(242,16,51)" fg:x="35311" fg:w="129"/><text x="51.1994%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.07%)</title><rect x="51.0620%" y="213" width="0.0736%" height="15" fill="rgb(248,9,4)" fg:x="35389" fg:w="51"/><text x="51.3120%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="51.1355%" y="229" width="0.0173%" height="15" fill="rgb(210,31,22)" fg:x="35440" fg:w="12"/><text x="51.3855%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (37 samples, 0.05%)</title><rect x="51.1529%" y="229" width="0.0534%" height="15" fill="rgb(239,54,39)" fg:x="35452" fg:w="37"/><text x="51.4029%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="51.2135%" y="229" width="0.0101%" height="15" fill="rgb(230,99,41)" fg:x="35494" fg:w="7"/><text x="51.4635%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (764 samples, 1.10%)</title><rect x="51.2524%" y="213" width="1.1024%" height="15" fill="rgb(253,106,12)" fg:x="35521" fg:w="764"/><text x="51.5024%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="52.3548%" y="213" width="0.0115%" height="15" fill="rgb(213,46,41)" fg:x="36285" fg:w="8"/><text x="52.6048%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="52.3750%" y="213" width="0.0101%" height="15" fill="rgb(215,133,35)" fg:x="36299" fg:w="7"/><text x="52.6250%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.05%)</title><rect x="52.4110%" y="197" width="0.0519%" height="15" fill="rgb(213,28,5)" fg:x="36324" fg:w="36"/><text x="52.6610%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (66 samples, 0.10%)</title><rect x="52.4630%" y="197" width="0.0952%" height="15" fill="rgb(215,77,49)" fg:x="36360" fg:w="66"/><text x="52.7130%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (132 samples, 0.19%)</title><rect x="52.3851%" y="213" width="0.1905%" height="15" fill="rgb(248,100,22)" fg:x="36306" fg:w="132"/><text x="52.6351%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="52.5582%" y="197" width="0.0173%" height="15" fill="rgb(208,67,9)" fg:x="36426" fg:w="12"/><text x="52.8082%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="52.5755%" y="213" width="0.0159%" height="15" fill="rgb(219,133,21)" fg:x="36438" fg:w="11"/><text x="52.8255%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.03%)</title><rect x="52.9204%" y="149" width="0.0332%" height="15" fill="rgb(246,46,29)" fg:x="36677" fg:w="23"/><text x="53.1704%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (154 samples, 0.22%)</title><rect x="52.7732%" y="165" width="0.2222%" height="15" fill="rgb(246,185,52)" fg:x="36575" fg:w="154"/><text x="53.0232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.04%)</title><rect x="52.9536%" y="149" width="0.0418%" height="15" fill="rgb(252,136,11)" fg:x="36700" fg:w="29"/><text x="53.2036%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (219 samples, 0.32%)</title><rect x="52.6939%" y="197" width="0.3160%" height="15" fill="rgb(219,138,53)" fg:x="36520" fg:w="219"/><text x="52.9439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (178 samples, 0.26%)</title><rect x="52.7530%" y="181" width="0.2568%" height="15" fill="rgb(211,51,23)" fg:x="36561" fg:w="178"/><text x="53.0030%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="52.9954%" y="165" width="0.0144%" height="15" fill="rgb(247,221,28)" fg:x="36729" fg:w="10"/><text x="53.2454%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="53.0098%" y="197" width="0.0173%" height="15" fill="rgb(251,222,45)" fg:x="36739" fg:w="12"/><text x="53.2598%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,256 samples, 1.81%)</title><rect x="51.2236%" y="229" width="1.8123%" height="15" fill="rgb(217,162,53)" fg:x="35501" fg:w="1256"/><text x="51.4736%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (308 samples, 0.44%)</title><rect x="52.5914%" y="213" width="0.4444%" height="15" fill="rgb(229,93,14)" fg:x="36449" fg:w="308"/><text x="52.8414%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (34 samples, 0.05%)</title><rect x="53.1224%" y="213" width="0.0491%" height="15" fill="rgb(209,67,49)" fg:x="36817" fg:w="34"/><text x="53.3724%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (60 samples, 0.09%)</title><rect x="53.1714%" y="213" width="0.0866%" height="15" fill="rgb(213,87,29)" fg:x="36851" fg:w="60"/><text x="53.4214%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (206 samples, 0.30%)</title><rect x="53.0358%" y="229" width="0.2972%" height="15" fill="rgb(205,151,52)" fg:x="36757" fg:w="206"/><text x="53.2858%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (52 samples, 0.08%)</title><rect x="53.2580%" y="213" width="0.0750%" height="15" fill="rgb(253,215,39)" fg:x="36911" fg:w="52"/><text x="53.5080%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="53.3330%" y="229" width="0.0115%" height="15" fill="rgb(221,220,41)" fg:x="36963" fg:w="8"/><text x="53.5830%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,054 samples, 2.96%)</title><rect x="50.4098%" y="245" width="2.9637%" height="15" fill="rgb(218,133,21)" fg:x="34937" fg:w="2054"/><text x="50.6598%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.03%)</title><rect x="53.3446%" y="229" width="0.0289%" height="15" fill="rgb(221,193,43)" fg:x="36971" fg:w="20"/><text x="53.5946%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (20 samples, 0.03%)</title><rect x="53.3807%" y="245" width="0.0289%" height="15" fill="rgb(240,128,52)" fg:x="36996" fg:w="20"/><text x="53.6307%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="53.4095%" y="245" width="0.0188%" height="15" fill="rgb(253,114,12)" fg:x="37016" fg:w="13"/><text x="53.6595%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.01%)</title><rect x="53.4283%" y="245" width="0.0144%" height="15" fill="rgb(215,223,47)" fg:x="37029" fg:w="10"/><text x="53.6783%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (16 samples, 0.02%)</title><rect x="53.4427%" y="245" width="0.0231%" height="15" fill="rgb(248,225,23)" fg:x="37039" fg:w="16"/><text x="53.6927%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,224 samples, 3.21%)</title><rect x="50.2655%" y="261" width="3.2090%" height="15" fill="rgb(250,108,0)" fg:x="34837" fg:w="2224"/><text x="50.5155%" y="271.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="53.4744%" y="261" width="0.0130%" height="15" fill="rgb(228,208,7)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="53.4744%" y="245" width="0.0130%" height="15" fill="rgb(244,45,10)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="53.4744%" y="229" width="0.0130%" height="15" fill="rgb(207,125,25)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="53.4744%" y="213" width="0.0130%" height="15" fill="rgb(210,195,18)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="53.4744%" y="197" width="0.0130%" height="15" fill="rgb(249,80,12)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="53.4744%" y="181" width="0.0130%" height="15" fill="rgb(221,65,9)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="53.4744%" y="165" width="0.0130%" height="15" fill="rgb(235,49,36)" fg:x="37061" fg:w="9"/><text x="53.7244%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.04%)</title><rect x="53.6231%" y="245" width="0.0361%" height="15" fill="rgb(225,32,20)" fg:x="37164" fg:w="25"/><text x="53.8731%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="53.6591%" y="245" width="0.0188%" height="15" fill="rgb(215,141,46)" fg:x="37189" fg:w="13"/><text x="53.9091%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (21 samples, 0.03%)</title><rect x="53.6779%" y="245" width="0.0303%" height="15" fill="rgb(250,160,47)" fg:x="37202" fg:w="21"/><text x="53.9279%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="53.7082%" y="245" width="0.0130%" height="15" fill="rgb(216,222,40)" fg:x="37223" fg:w="9"/><text x="53.9582%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (11 samples, 0.02%)</title><rect x="53.7212%" y="245" width="0.0159%" height="15" fill="rgb(234,217,39)" fg:x="37232" fg:w="11"/><text x="53.9712%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="53.9867%" y="181" width="0.0390%" height="15" fill="rgb(207,178,40)" fg:x="37416" fg:w="27"/><text x="54.2367%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (96 samples, 0.14%)</title><rect x="53.8943%" y="197" width="0.1385%" height="15" fill="rgb(221,136,13)" fg:x="37352" fg:w="96"/><text x="54.1443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (181 samples, 0.26%)</title><rect x="53.7861%" y="229" width="0.2612%" height="15" fill="rgb(249,199,10)" fg:x="37277" fg:w="181"/><text x="54.0361%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (122 samples, 0.18%)</title><rect x="53.8712%" y="213" width="0.1760%" height="15" fill="rgb(249,222,13)" fg:x="37336" fg:w="122"/><text x="54.1212%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="54.0328%" y="197" width="0.0144%" height="15" fill="rgb(244,185,38)" fg:x="37448" fg:w="10"/><text x="54.2828%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="54.0473%" y="229" width="0.0274%" height="15" fill="rgb(236,202,9)" fg:x="37458" fg:w="19"/><text x="54.2973%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="54.0747%" y="229" width="0.0173%" height="15" fill="rgb(250,229,37)" fg:x="37477" fg:w="12"/><text x="54.3247%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.02%)</title><rect x="54.0949%" y="229" width="0.0245%" height="15" fill="rgb(206,174,23)" fg:x="37491" fg:w="17"/><text x="54.3449%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (25 samples, 0.04%)</title><rect x="54.2536%" y="213" width="0.0361%" height="15" fill="rgb(211,33,43)" fg:x="37601" fg:w="25"/><text x="54.5036%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (14 samples, 0.02%)</title><rect x="54.3806%" y="197" width="0.0202%" height="15" fill="rgb(245,58,50)" fg:x="37689" fg:w="14"/><text x="54.6306%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (21 samples, 0.03%)</title><rect x="54.4008%" y="197" width="0.0303%" height="15" fill="rgb(244,68,36)" fg:x="37703" fg:w="21"/><text x="54.6508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (25 samples, 0.04%)</title><rect x="54.4311%" y="197" width="0.0361%" height="15" fill="rgb(232,229,15)" fg:x="37724" fg:w="25"/><text x="54.6811%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (264 samples, 0.38%)</title><rect x="54.4671%" y="197" width="0.3809%" height="15" fill="rgb(254,30,23)" fg:x="37749" fg:w="264"/><text x="54.7171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="54.9548%" y="181" width="0.0390%" height="15" fill="rgb(235,160,14)" fg:x="38087" fg:w="27"/><text x="55.2048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (118 samples, 0.17%)</title><rect x="54.9938%" y="181" width="0.1703%" height="15" fill="rgb(212,155,44)" fg:x="38114" fg:w="118"/><text x="55.2438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.04%)</title><rect x="55.2896%" y="149" width="0.0433%" height="15" fill="rgb(226,2,50)" fg:x="38319" fg:w="30"/><text x="55.5396%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (110 samples, 0.16%)</title><rect x="55.1929%" y="165" width="0.1587%" height="15" fill="rgb(234,177,6)" fg:x="38252" fg:w="110"/><text x="55.4429%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13 samples, 0.02%)</title><rect x="55.3329%" y="149" width="0.0188%" height="15" fill="rgb(217,24,9)" fg:x="38349" fg:w="13"/><text x="55.5829%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (139 samples, 0.20%)</title><rect x="55.1641%" y="181" width="0.2006%" height="15" fill="rgb(220,13,46)" fg:x="38232" fg:w="139"/><text x="55.4141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="55.3516%" y="165" width="0.0130%" height="15" fill="rgb(239,221,27)" fg:x="38362" fg:w="9"/><text x="55.6016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (92 samples, 0.13%)</title><rect x="55.3646%" y="181" width="0.1327%" height="15" fill="rgb(222,198,25)" fg:x="38371" fg:w="92"/><text x="55.6146%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (37 samples, 0.05%)</title><rect x="55.6041%" y="149" width="0.0534%" height="15" fill="rgb(211,99,13)" fg:x="38537" fg:w="37"/><text x="55.8541%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (7 samples, 0.01%)</title><rect x="55.6575%" y="149" width="0.0101%" height="15" fill="rgb(232,111,31)" fg:x="38574" fg:w="7"/><text x="55.9075%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (318 samples, 0.46%)</title><rect x="55.4974%" y="181" width="0.4588%" height="15" fill="rgb(245,82,37)" fg:x="38463" fg:w="318"/><text x="55.7474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (299 samples, 0.43%)</title><rect x="55.5248%" y="165" width="0.4314%" height="15" fill="rgb(227,149,46)" fg:x="38482" fg:w="299"/><text x="55.7748%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (197 samples, 0.28%)</title><rect x="55.6719%" y="149" width="0.2842%" height="15" fill="rgb(218,36,50)" fg:x="38584" fg:w="197"/><text x="55.9219%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (774 samples, 1.12%)</title><rect x="54.8481%" y="197" width="1.1168%" height="15" fill="rgb(226,80,48)" fg:x="38013" fg:w="774"/><text x="55.0981%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,219 samples, 1.76%)</title><rect x="54.2897%" y="213" width="1.7589%" height="15" fill="rgb(238,224,15)" fg:x="37626" fg:w="1219"/><text x="54.5397%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.08%)</title><rect x="55.9692%" y="197" width="0.0794%" height="15" fill="rgb(241,136,10)" fg:x="38790" fg:w="55"/><text x="56.2192%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (106 samples, 0.15%)</title><rect x="56.0485%" y="213" width="0.1529%" height="15" fill="rgb(208,32,45)" fg:x="38845" fg:w="106"/><text x="56.2985%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="56.2015%" y="213" width="0.0303%" height="15" fill="rgb(207,135,9)" fg:x="38951" fg:w="21"/><text x="56.4515%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,473 samples, 2.13%)</title><rect x="54.1194%" y="229" width="2.1254%" height="15" fill="rgb(206,86,44)" fg:x="37508" fg:w="1473"/><text x="54.3694%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="56.2318%" y="213" width="0.0130%" height="15" fill="rgb(245,177,15)" fg:x="38972" fg:w="9"/><text x="56.4818%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,921 samples, 2.77%)</title><rect x="53.4874%" y="261" width="2.7718%" height="15" fill="rgb(206,64,50)" fg:x="37070" fg:w="1921"/><text x="53.7374%" y="271.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,748 samples, 2.52%)</title><rect x="53.7371%" y="245" width="2.5221%" height="15" fill="rgb(234,36,40)" fg:x="37243" fg:w="1748"/><text x="53.9871%" y="255.50">ru..</text></g><g><title>rust_qecp`__rdl_realloc (10 samples, 0.01%)</title><rect x="56.2448%" y="229" width="0.0144%" height="15" fill="rgb(213,64,8)" fg:x="38981" fg:w="10"/><text x="56.4948%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (43 samples, 0.06%)</title><rect x="56.2592%" y="261" width="0.0620%" height="15" fill="rgb(210,75,36)" fg:x="38991" fg:w="43"/><text x="56.5092%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (186 samples, 0.27%)</title><rect x="56.3212%" y="245" width="0.2684%" height="15" fill="rgb(229,88,21)" fg:x="39034" fg:w="186"/><text x="56.5712%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.02%)</title><rect x="56.9330%" y="229" width="0.0231%" height="15" fill="rgb(252,204,47)" fg:x="39458" fg:w="16"/><text x="57.1830%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="57.2216%" y="197" width="0.0173%" height="15" fill="rgb(208,77,27)" fg:x="39658" fg:w="12"/><text x="57.4716%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.02%)</title><rect x="57.2389%" y="197" width="0.0231%" height="15" fill="rgb(221,76,26)" fg:x="39670" fg:w="16"/><text x="57.4889%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="57.3038%" y="181" width="0.0101%" height="15" fill="rgb(225,139,18)" fg:x="39715" fg:w="7"/><text x="57.5538%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (89 samples, 0.13%)</title><rect x="57.4496%" y="165" width="0.1284%" height="15" fill="rgb(230,137,11)" fg:x="39816" fg:w="89"/><text x="57.6996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2,042 samples, 2.95%)</title><rect x="57.6660%" y="149" width="2.9464%" height="15" fill="rgb(212,28,1)" fg:x="39966" fg:w="2042"/><text x="57.9160%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (34 samples, 0.05%)</title><rect x="60.6124%" y="149" width="0.0491%" height="15" fill="rgb(248,164,17)" fg:x="42008" fg:w="34"/><text x="60.8624%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,599 samples, 3.75%)</title><rect x="57.0557%" y="213" width="3.7500%" height="15" fill="rgb(222,171,42)" fg:x="39543" fg:w="2599"/><text x="57.3057%" y="223.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,456 samples, 3.54%)</title><rect x="57.2620%" y="197" width="3.5437%" height="15" fill="rgb(243,84,45)" fg:x="39686" fg:w="2456"/><text x="57.5120%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2,420 samples, 3.49%)</title><rect x="57.3139%" y="181" width="3.4918%" height="15" fill="rgb(252,49,23)" fg:x="39722" fg:w="2420"/><text x="57.5639%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2,235 samples, 3.22%)</title><rect x="57.5809%" y="165" width="3.2248%" height="15" fill="rgb(215,19,7)" fg:x="39907" fg:w="2235"/><text x="57.8309%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (100 samples, 0.14%)</title><rect x="60.6614%" y="149" width="0.1443%" height="15" fill="rgb(238,81,41)" fg:x="42042" fg:w="100"/><text x="60.9114%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (229 samples, 0.33%)</title><rect x="60.8057%" y="213" width="0.3304%" height="15" fill="rgb(210,199,37)" fg:x="42142" fg:w="229"/><text x="61.0557%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (351 samples, 0.51%)</title><rect x="61.1361%" y="213" width="0.5064%" height="15" fill="rgb(244,192,49)" fg:x="42371" fg:w="351"/><text x="61.3861%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,510 samples, 5.06%)</title><rect x="56.5954%" y="245" width="5.0645%" height="15" fill="rgb(226,211,11)" fg:x="39224" fg:w="3510"/><text x="56.8454%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (3,246 samples, 4.68%)</title><rect x="56.9763%" y="229" width="4.6836%" height="15" fill="rgb(236,162,54)" fg:x="39488" fg:w="3246"/><text x="57.2263%" y="239.50">rust_..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="61.6426%" y="213" width="0.0173%" height="15" fill="rgb(220,229,9)" fg:x="42722" fg:w="12"/><text x="61.8926%" y="223.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,714 samples, 5.36%)</title><rect x="56.3212%" y="261" width="5.3588%" height="15" fill="rgb(250,87,22)" fg:x="39034" fg:w="3714"/><text x="56.5712%" y="271.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (14 samples, 0.02%)</title><rect x="61.6599%" y="245" width="0.0202%" height="15" fill="rgb(239,43,17)" fg:x="42734" fg:w="14"/><text x="61.9099%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="62.2818%" y="229" width="0.0130%" height="15" fill="rgb(231,177,25)" fg:x="43165" fg:w="9"/><text x="62.5318%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="62.6843%" y="213" width="0.0202%" height="15" fill="rgb(219,179,1)" fg:x="43444" fg:w="14"/><text x="62.9343%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (24 samples, 0.03%)</title><rect x="63.0840%" y="197" width="0.0346%" height="15" fill="rgb(238,219,53)" fg:x="43721" fg:w="24"/><text x="63.3340%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (27 samples, 0.04%)</title><rect x="63.4635%" y="181" width="0.0390%" height="15" fill="rgb(232,167,36)" fg:x="43984" fg:w="27"/><text x="63.7135%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (33 samples, 0.05%)</title><rect x="63.7521%" y="165" width="0.0476%" height="15" fill="rgb(244,19,51)" fg:x="44184" fg:w="33"/><text x="64.0021%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (8 samples, 0.01%)</title><rect x="63.9266%" y="149" width="0.0115%" height="15" fill="rgb(224,6,22)" fg:x="44305" fg:w="8"/><text x="64.1766%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,629 samples, 2.35%)</title><rect x="61.6801%" y="261" width="2.3504%" height="15" fill="rgb(224,145,5)" fg:x="42748" fg:w="1629"/><text x="61.9301%" y="271.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,433 samples, 2.07%)</title><rect x="61.9629%" y="245" width="2.0676%" height="15" fill="rgb(234,130,49)" fg:x="42944" fg:w="1433"/><text x="62.2129%" y="255.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,203 samples, 1.74%)</title><rect x="62.2948%" y="229" width="1.7358%" height="15" fill="rgb(254,6,2)" fg:x="43174" fg:w="1203"/><text x="62.5448%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (919 samples, 1.33%)</title><rect x="62.7045%" y="213" width="1.3260%" height="15" fill="rgb(208,96,46)" fg:x="43458" fg:w="919"/><text x="62.9545%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (632 samples, 0.91%)</title><rect x="63.1186%" y="197" width="0.9119%" height="15" fill="rgb(239,3,39)" fg:x="43745" fg:w="632"/><text x="63.3686%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (366 samples, 0.53%)</title><rect x="63.5024%" y="181" width="0.5281%" height="15" fill="rgb(233,210,1)" fg:x="44011" fg:w="366"/><text x="63.7524%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (160 samples, 0.23%)</title><rect x="63.7997%" y="165" width="0.2309%" height="15" fill="rgb(244,137,37)" fg:x="44217" fg:w="160"/><text x="64.0497%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (64 samples, 0.09%)</title><rect x="63.9382%" y="149" width="0.0923%" height="15" fill="rgb(240,136,2)" fg:x="44313" fg:w="64"/><text x="64.1882%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (22 samples, 0.03%)</title><rect x="63.9988%" y="133" width="0.0317%" height="15" fill="rgb(239,18,37)" fg:x="44355" fg:w="22"/><text x="64.2488%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (451 samples, 0.65%)</title><rect x="65.1473%" y="245" width="0.6507%" height="15" fill="rgb(218,185,22)" fg:x="45151" fg:w="451"/><text x="65.3973%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (924 samples, 1.33%)</title><rect x="65.7981%" y="245" width="1.3332%" height="15" fill="rgb(225,218,4)" fg:x="45602" fg:w="924"/><text x="66.0481%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,277 samples, 4.73%)</title><rect x="64.0305%" y="261" width="4.7283%" height="15" fill="rgb(230,182,32)" fg:x="44377" fg:w="3277"/><text x="64.2805%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,128 samples, 1.63%)</title><rect x="67.1313%" y="245" width="1.6276%" height="15" fill="rgb(242,56,43)" fg:x="46526" fg:w="1128"/><text x="67.3813%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (62 samples, 0.09%)</title><rect x="68.7588%" y="261" width="0.0895%" height="15" fill="rgb(233,99,24)" fg:x="47654" fg:w="62"/><text x="69.0088%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (454 samples, 0.66%)</title><rect x="68.8483%" y="261" width="0.6551%" height="15" fill="rgb(234,209,42)" fg:x="47716" fg:w="454"/><text x="69.0983%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (14,416 samples, 20.80%)</title><rect x="48.7043%" y="277" width="20.8005%" height="15" fill="rgb(227,7,12)" fg:x="33755" fg:w="14416"/><text x="48.9543%" y="287.50">rust_qecp`rust_qecp::union_find_d..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (26 samples, 0.04%)</title><rect x="75.8376%" y="261" width="0.0375%" height="15" fill="rgb(245,203,43)" fg:x="52560" fg:w="26"/><text x="76.0876%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="76.1031%" y="213" width="0.0289%" height="15" fill="rgb(238,205,33)" fg:x="52744" fg:w="20"/><text x="76.3531%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (79 samples, 0.11%)</title><rect x="76.0237%" y="229" width="0.1140%" height="15" fill="rgb(231,56,7)" fg:x="52689" fg:w="79"/><text x="76.2737%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (107 samples, 0.15%)</title><rect x="75.9891%" y="245" width="0.1544%" height="15" fill="rgb(244,186,29)" fg:x="52665" fg:w="107"/><text x="76.2391%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (191 samples, 0.28%)</title><rect x="75.8751%" y="261" width="0.2756%" height="15" fill="rgb(234,111,31)" fg:x="52586" fg:w="191"/><text x="76.1251%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="76.1507%" y="261" width="0.0188%" height="15" fill="rgb(241,149,10)" fg:x="52777" fg:w="13"/><text x="76.4007%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (115 samples, 0.17%)</title><rect x="76.3642%" y="245" width="0.1659%" height="15" fill="rgb(249,206,44)" fg:x="52925" fg:w="115"/><text x="76.6142%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (270 samples, 0.39%)</title><rect x="76.1695%" y="261" width="0.3896%" height="15" fill="rgb(251,153,30)" fg:x="52790" fg:w="270"/><text x="76.4195%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.03%)</title><rect x="76.5302%" y="245" width="0.0289%" height="15" fill="rgb(239,152,38)" fg:x="53040" fg:w="20"/><text x="76.7802%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.03%)</title><rect x="76.5331%" y="229" width="0.0260%" height="15" fill="rgb(249,139,47)" fg:x="53042" fg:w="18"/><text x="76.7831%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="76.5662%" y="261" width="0.0159%" height="15" fill="rgb(244,64,35)" fg:x="53065" fg:w="11"/><text x="76.8162%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.02%)</title><rect x="76.6139%" y="229" width="0.0188%" height="15" fill="rgb(216,46,15)" fg:x="53098" fg:w="13"/><text x="76.8639%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.06%)</title><rect x="76.5821%" y="261" width="0.0592%" height="15" fill="rgb(250,74,19)" fg:x="53076" fg:w="41"/><text x="76.8321%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.05%)</title><rect x="76.5879%" y="245" width="0.0534%" height="15" fill="rgb(249,42,33)" fg:x="53080" fg:w="37"/><text x="76.8379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="76.6413%" y="261" width="0.0202%" height="15" fill="rgb(242,149,17)" fg:x="53117" fg:w="14"/><text x="76.8913%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (130 samples, 0.19%)</title><rect x="76.6615%" y="261" width="0.1876%" height="15" fill="rgb(244,29,21)" fg:x="53131" fg:w="130"/><text x="76.9115%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (34 samples, 0.05%)</title><rect x="76.8000%" y="245" width="0.0491%" height="15" fill="rgb(220,130,37)" fg:x="53227" fg:w="34"/><text x="77.0500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (34 samples, 0.05%)</title><rect x="76.8000%" y="229" width="0.0491%" height="15" fill="rgb(211,67,2)" fg:x="53227" fg:w="34"/><text x="77.0500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.04%)</title><rect x="76.8534%" y="261" width="0.0390%" height="15" fill="rgb(235,68,52)" fg:x="53264" fg:w="27"/><text x="77.1034%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (65 samples, 0.09%)</title><rect x="76.9024%" y="261" width="0.0938%" height="15" fill="rgb(246,142,3)" fg:x="53298" fg:w="65"/><text x="77.1524%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (82 samples, 0.12%)</title><rect x="76.9962%" y="261" width="0.1183%" height="15" fill="rgb(241,25,7)" fg:x="53363" fg:w="82"/><text x="77.2462%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="77.1160%" y="261" width="0.0101%" height="15" fill="rgb(242,119,39)" fg:x="53446" fg:w="7"/><text x="77.3660%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="77.1261%" y="261" width="0.0159%" height="15" fill="rgb(241,98,45)" fg:x="53453" fg:w="11"/><text x="77.3761%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="77.1420%" y="261" width="0.0115%" height="15" fill="rgb(254,28,30)" fg:x="53464" fg:w="8"/><text x="77.3920%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="77.1910%" y="197" width="0.0101%" height="15" fill="rgb(241,142,54)" fg:x="53498" fg:w="7"/><text x="77.4410%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="77.2199%" y="165" width="0.0188%" height="15" fill="rgb(222,85,15)" fg:x="53518" fg:w="13"/><text x="77.4699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="77.2127%" y="181" width="0.0274%" height="15" fill="rgb(210,85,47)" fg:x="53513" fg:w="19"/><text x="77.4627%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (34 samples, 0.05%)</title><rect x="77.2011%" y="197" width="0.0491%" height="15" fill="rgb(224,206,25)" fg:x="53505" fg:w="34"/><text x="77.4511%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (61 samples, 0.09%)</title><rect x="77.1809%" y="213" width="0.0880%" height="15" fill="rgb(243,201,19)" fg:x="53491" fg:w="61"/><text x="77.4309%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="77.2531%" y="197" width="0.0159%" height="15" fill="rgb(236,59,4)" fg:x="53541" fg:w="11"/><text x="77.5031%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (91 samples, 0.13%)</title><rect x="77.1535%" y="261" width="0.1313%" height="15" fill="rgb(254,179,45)" fg:x="53472" fg:w="91"/><text x="77.4035%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.12%)</title><rect x="77.1607%" y="245" width="0.1241%" height="15" fill="rgb(226,14,10)" fg:x="53477" fg:w="86"/><text x="77.4107%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (78 samples, 0.11%)</title><rect x="77.1723%" y="229" width="0.1125%" height="15" fill="rgb(244,27,41)" fg:x="53485" fg:w="78"/><text x="77.4223%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (87 samples, 0.13%)</title><rect x="77.4450%" y="245" width="0.1255%" height="15" fill="rgb(235,35,32)" fg:x="53674" fg:w="87"/><text x="77.6950%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (176 samples, 0.25%)</title><rect x="77.5705%" y="245" width="0.2539%" height="15" fill="rgb(218,68,31)" fg:x="53761" fg:w="176"/><text x="77.8205%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (454 samples, 0.66%)</title><rect x="77.2877%" y="261" width="0.6551%" height="15" fill="rgb(207,120,37)" fg:x="53565" fg:w="454"/><text x="77.5377%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (82 samples, 0.12%)</title><rect x="77.8244%" y="245" width="0.1183%" height="15" fill="rgb(227,98,0)" fg:x="53937" fg:w="82"/><text x="78.0744%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (214 samples, 0.31%)</title><rect x="77.9427%" y="261" width="0.3088%" height="15" fill="rgb(207,7,3)" fg:x="54019" fg:w="214"/><text x="78.1927%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (8 samples, 0.01%)</title><rect x="78.2515%" y="261" width="0.0115%" height="15" fill="rgb(206,98,19)" fg:x="54233" fg:w="8"/><text x="78.5015%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (37 samples, 0.05%)</title><rect x="78.2631%" y="261" width="0.0534%" height="15" fill="rgb(217,5,26)" fg:x="54241" fg:w="37"/><text x="78.5131%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.05%)</title><rect x="78.6021%" y="197" width="0.0534%" height="15" fill="rgb(235,190,38)" fg:x="54476" fg:w="37"/><text x="78.8521%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (103 samples, 0.15%)</title><rect x="78.5170%" y="213" width="0.1486%" height="15" fill="rgb(247,86,24)" fg:x="54417" fg:w="103"/><text x="78.7670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="78.6555%" y="197" width="0.0101%" height="15" fill="rgb(205,101,16)" fg:x="54513" fg:w="7"/><text x="78.9055%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (186 samples, 0.27%)</title><rect x="78.4030%" y="229" width="0.2684%" height="15" fill="rgb(246,168,33)" fg:x="54338" fg:w="186"/><text x="78.6530%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (21 samples, 0.03%)</title><rect x="78.6815%" y="213" width="0.0303%" height="15" fill="rgb(231,114,1)" fg:x="54531" fg:w="21"/><text x="78.9315%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.02%)</title><rect x="78.6873%" y="197" width="0.0245%" height="15" fill="rgb(207,184,53)" fg:x="54535" fg:w="17"/><text x="78.9373%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.02%)</title><rect x="78.7248%" y="197" width="0.0202%" height="15" fill="rgb(224,95,51)" fg:x="54561" fg:w="14"/><text x="78.9748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (103 samples, 0.15%)</title><rect x="78.6728%" y="229" width="0.1486%" height="15" fill="rgb(212,188,45)" fg:x="54525" fg:w="103"/><text x="78.9228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (73 samples, 0.11%)</title><rect x="78.7161%" y="213" width="0.1053%" height="15" fill="rgb(223,154,38)" fg:x="54555" fg:w="73"/><text x="78.9661%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.08%)</title><rect x="78.7450%" y="197" width="0.0765%" height="15" fill="rgb(251,22,52)" fg:x="54575" fg:w="53"/><text x="78.9950%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="78.8085%" y="181" width="0.0130%" height="15" fill="rgb(229,209,22)" fg:x="54619" fg:w="9"/><text x="79.0585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (334 samples, 0.48%)</title><rect x="78.3410%" y="245" width="0.4819%" height="15" fill="rgb(234,138,34)" fg:x="54295" fg:w="334"/><text x="78.5910%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (361 samples, 0.52%)</title><rect x="78.3165%" y="261" width="0.5209%" height="15" fill="rgb(212,95,11)" fg:x="54278" fg:w="361"/><text x="78.5665%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (18 samples, 0.03%)</title><rect x="78.8373%" y="261" width="0.0260%" height="15" fill="rgb(240,179,47)" fg:x="54639" fg:w="18"/><text x="79.0873%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (46,046 samples, 66.44%)</title><rect x="12.4376%" y="309" width="66.4387%" height="15" fill="rgb(240,163,11)" fg:x="8620" fg:w="46046"/><text x="12.6876%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (44,714 samples, 64.52%)</title><rect x="14.3595%" y="293" width="64.5168%" height="15" fill="rgb(236,37,12)" fg:x="9952" fg:w="44714"/><text x="14.6095%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (6,495 samples, 9.37%)</title><rect x="69.5048%" y="277" width="9.3715%" height="15" fill="rgb(232,164,16)" fg:x="48171" fg:w="6495"/><text x="69.7548%" y="287.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (9 samples, 0.01%)</title><rect x="78.8633%" y="261" width="0.0130%" height="15" fill="rgb(244,205,15)" fg:x="54657" fg:w="9"/><text x="79.1133%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,745 samples, 2.52%)</title><rect x="78.8763%" y="309" width="2.5178%" height="15" fill="rgb(223,117,47)" fg:x="54666" fg:w="1745"/><text x="79.1263%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (243 samples, 0.35%)</title><rect x="81.3941%" y="309" width="0.3506%" height="15" fill="rgb(244,107,35)" fg:x="56411" fg:w="243"/><text x="81.6441%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (74 samples, 0.11%)</title><rect x="81.6380%" y="293" width="0.1068%" height="15" fill="rgb(205,140,8)" fg:x="56580" fg:w="74"/><text x="81.8880%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,720 samples, 9.70%)</title><rect x="81.7447%" y="309" width="9.6961%" height="15" fill="rgb(228,84,46)" fg:x="56654" fg:w="6720"/><text x="81.9947%" y="319.50">rust_qecp`rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (93 samples, 0.13%)</title><rect x="91.4437%" y="293" width="0.1342%" height="15" fill="rgb(254,188,9)" fg:x="63376" fg:w="93"/><text x="91.6937%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (487 samples, 0.70%)</title><rect x="91.4409%" y="309" width="0.7027%" height="15" fill="rgb(206,112,54)" fg:x="63374" fg:w="487"/><text x="91.6909%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (392 samples, 0.57%)</title><rect x="91.5779%" y="293" width="0.5656%" height="15" fill="rgb(216,84,49)" fg:x="63469" fg:w="392"/><text x="91.8279%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (39 samples, 0.06%)</title><rect x="92.1435%" y="309" width="0.0563%" height="15" fill="rgb(214,194,35)" fg:x="63861" fg:w="39"/><text x="92.3935%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (4,910 samples, 7.08%)</title><rect x="92.2056%" y="309" width="7.0845%" height="15" fill="rgb(249,28,3)" fg:x="63904" fg:w="4910"/><text x="92.4556%" y="319.50">rust_qecp`..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,510 samples, 5.06%)</title><rect x="94.2256%" y="293" width="5.0645%" height="15" fill="rgb(222,56,52)" fg:x="65304" fg:w="3510"/><text x="94.4756%" y="303.50">rust_q..</text></g><g><title>libsystem_pthread.dylib`thread_start (60,277 samples, 86.97%)</title><rect x="12.3756%" y="389" width="86.9723%" height="15" fill="rgb(245,217,50)" fg:x="8577" fg:w="60277"/><text x="12.6256%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,277 samples, 86.97%)</title><rect x="12.3756%" y="373" width="86.9723%" height="15" fill="rgb(213,201,24)" fg:x="8577" fg:w="60277"/><text x="12.6256%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,277 samples, 86.97%)</title><rect x="12.3756%" y="357" width="86.9723%" height="15" fill="rgb(248,116,28)" fg:x="8577" fg:w="60277"/><text x="12.6256%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,277 samples, 86.97%)</title><rect x="12.3756%" y="341" width="86.9723%" height="15" fill="rgb(219,72,43)" fg:x="8577" fg:w="60277"/><text x="12.6256%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,275 samples, 86.97%)</title><rect x="12.3784%" y="325" width="86.9694%" height="15" fill="rgb(209,138,14)" fg:x="8579" fg:w="60275"/><text x="12.6284%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (40 samples, 0.06%)</title><rect x="99.2901%" y="309" width="0.0577%" height="15" fill="rgb(222,18,33)" fg:x="68814" fg:w="40"/><text x="99.5401%" y="319.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.09%)</title><rect x="99.3796%" y="341" width="0.0851%" height="15" fill="rgb(213,199,7)" fg:x="68876" fg:w="59"/><text x="99.6296%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="99.6364%" y="325" width="0.0159%" height="15" fill="rgb(250,110,10)" fg:x="69054" fg:w="11"/><text x="99.8864%" y="335.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="99.6624%" y="325" width="0.0303%" height="15" fill="rgb(248,123,6)" fg:x="69072" fg:w="21"/><text x="99.9124%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="99.6970%" y="293" width="0.0274%" height="15" fill="rgb(206,91,31)" fg:x="69096" fg:w="19"/><text x="99.9470%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="99.7085%" y="277" width="0.0159%" height="15" fill="rgb(211,154,13)" fg:x="69104" fg:w="11"/><text x="99.9585%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="99.7129%" y="261" width="0.0115%" height="15" fill="rgb(225,148,7)" fg:x="69107" fg:w="8"/><text x="99.9629%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.04%)</title><rect x="99.6927%" y="325" width="0.0361%" height="15" fill="rgb(220,160,43)" fg:x="69093" fg:w="25"/><text x="99.9427%" y="335.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="99.6970%" y="309" width="0.0317%" height="15" fill="rgb(213,52,39)" fg:x="69096" fg:w="22"/><text x="99.9470%" y="319.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="99.7316%" y="325" width="0.0130%" height="15" fill="rgb(243,137,7)" fg:x="69120" fg:w="9"/><text x="99.9816%" y="335.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="99.7446%" y="325" width="0.0101%" height="15" fill="rgb(230,79,13)" fg:x="69129" fg:w="7"/><text x="99.9946%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (14 samples, 0.02%)</title><rect x="99.7547%" y="325" width="0.0202%" height="15" fill="rgb(247,105,23)" fg:x="69136" fg:w="14"/><text x="100.0047%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (136 samples, 0.20%)</title><rect x="99.7749%" y="325" width="0.1962%" height="15" fill="rgb(223,179,41)" fg:x="69150" fg:w="136"/><text x="100.0249%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (347 samples, 0.50%)</title><rect x="99.4719%" y="341" width="0.5007%" height="15" fill="rgb(218,9,34)" fg:x="68940" fg:w="347"/><text x="99.7219%" y="351.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (438 samples, 0.63%)</title><rect x="99.3565%" y="357" width="0.6320%" height="15" fill="rgb(222,106,8)" fg:x="68860" fg:w="438"/><text x="99.6065%" y="367.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (7 samples, 0.01%)</title><rect x="99.9885%" y="357" width="0.0101%" height="15" fill="rgb(211,220,0)" fg:x="69298" fg:w="7"/><text x="100.2385%" y="367.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (7 samples, 0.01%)</title><rect x="99.9885%" y="341" width="0.0101%" height="15" fill="rgb(229,52,16)" fg:x="69298" fg:w="7"/><text x="100.2385%" y="351.50"></text></g><g><title>all (69,306 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(212,155,18)" fg:x="0" fg:w="69306"/><text x="0.2500%" y="415.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (452 samples, 0.65%)</title><rect x="99.3478%" y="389" width="0.6522%" height="15" fill="rgb(242,21,14)" fg:x="68854" fg:w="452"/><text x="99.5978%" y="399.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (452 samples, 0.65%)</title><rect x="99.3478%" y="373" width="0.6522%" height="15" fill="rgb(222,19,48)" fg:x="68854" fg:w="452"/><text x="99.5978%" y="383.50"></text></g></svg></svg>