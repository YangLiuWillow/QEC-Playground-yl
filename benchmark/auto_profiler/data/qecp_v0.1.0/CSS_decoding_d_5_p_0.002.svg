<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60368"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (7 samples, 0.01%)</title><rect x="0.0149%" y="53" width="0.0116%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="7"/><text x="0.2649%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.01%)</title><rect x="0.0149%" y="37" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="7"/><text x="0.2649%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (15 samples, 0.02%)</title><rect x="0.0133%" y="69" width="0.0248%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="15"/><text x="0.2633%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (14 samples, 0.02%)</title><rect x="0.0398%" y="69" width="0.0232%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="14"/><text x="0.2898%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0629%" y="69" width="0.0282%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="17"/><text x="0.3129%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (15 samples, 0.02%)</title><rect x="0.0663%" y="53" width="0.0248%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="15"/><text x="0.3163%" y="63.50"></text></g><g><title>dyld`start (60 samples, 0.10%)</title><rect x="0.0000%" y="309" width="0.0994%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="60"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (59 samples, 0.10%)</title><rect x="0.0017%" y="293" width="0.0977%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="59"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (59 samples, 0.10%)</title><rect x="0.0017%" y="277" width="0.0977%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="59"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (59 samples, 0.10%)</title><rect x="0.0017%" y="261" width="0.0977%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="59"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59 samples, 0.10%)</title><rect x="0.0017%" y="245" width="0.0977%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="59"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (59 samples, 0.10%)</title><rect x="0.0017%" y="229" width="0.0977%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="59"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (59 samples, 0.10%)</title><rect x="0.0017%" y="213" width="0.0977%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="59"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (59 samples, 0.10%)</title><rect x="0.0017%" y="197" width="0.0977%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="59"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (59 samples, 0.10%)</title><rect x="0.0017%" y="181" width="0.0977%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="59"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (59 samples, 0.10%)</title><rect x="0.0017%" y="165" width="0.0977%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="59"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.10%)</title><rect x="0.0017%" y="149" width="0.0977%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="59"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (59 samples, 0.10%)</title><rect x="0.0017%" y="133" width="0.0977%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="59"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.10%)</title><rect x="0.0017%" y="117" width="0.0977%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="59"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (59 samples, 0.10%)</title><rect x="0.0017%" y="101" width="0.0977%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="59"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (59 samples, 0.10%)</title><rect x="0.0017%" y="85" width="0.0977%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="59"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.03%)</title><rect x="0.1425%" y="229" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="86" fg:w="20"/><text x="0.3925%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="0.1756%" y="229" width="0.0199%" height="15" fill="rgb(221,5,38)" fg:x="106" fg:w="12"/><text x="0.4256%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.06%)</title><rect x="0.1955%" y="229" width="0.0580%" height="15" fill="rgb(247,18,42)" fg:x="118" fg:w="35"/><text x="0.4455%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="0.2369%" y="213" width="0.0166%" height="15" fill="rgb(241,131,45)" fg:x="143" fg:w="10"/><text x="0.4869%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="0.2385%" y="197" width="0.0149%" height="15" fill="rgb(249,31,29)" fg:x="144" fg:w="9"/><text x="0.4885%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="0.2965%" y="197" width="0.0116%" height="15" fill="rgb(225,111,53)" fg:x="179" fg:w="7"/><text x="0.5465%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.06%)</title><rect x="0.2534%" y="229" width="0.0613%" height="15" fill="rgb(238,160,17)" fg:x="153" fg:w="37"/><text x="0.5034%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.05%)</title><rect x="0.2634%" y="213" width="0.0514%" height="15" fill="rgb(214,148,48)" fg:x="159" fg:w="31"/><text x="0.5134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="0.3197%" y="229" width="0.0149%" height="15" fill="rgb(232,36,49)" fg:x="193" fg:w="9"/><text x="0.5697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="0.3959%" y="197" width="0.0248%" height="15" fill="rgb(209,103,24)" fg:x="239" fg:w="15"/><text x="0.6459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.06%)</title><rect x="0.3677%" y="213" width="0.0580%" height="15" fill="rgb(229,88,8)" fg:x="222" fg:w="35"/><text x="0.6177%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="0.4257%" y="213" width="0.0282%" height="15" fill="rgb(213,181,19)" fg:x="257" fg:w="17"/><text x="0.6757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.03%)</title><rect x="0.4274%" y="197" width="0.0265%" height="15" fill="rgb(254,191,54)" fg:x="258" fg:w="16"/><text x="0.6774%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="0.4555%" y="213" width="0.0248%" height="15" fill="rgb(241,83,37)" fg:x="275" fg:w="15"/><text x="0.7055%" y="223.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.17%)</title><rect x="0.3479%" y="229" width="0.1690%" height="15" fill="rgb(233,36,39)" fg:x="210" fg:w="102"/><text x="0.5979%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (17 samples, 0.03%)</title><rect x="0.4887%" y="213" width="0.0282%" height="15" fill="rgb(226,3,54)" fg:x="295" fg:w="17"/><text x="0.7387%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (9 samples, 0.01%)</title><rect x="0.5218%" y="229" width="0.0149%" height="15" fill="rgb(245,192,40)" fg:x="315" fg:w="9"/><text x="0.7718%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (92 samples, 0.15%)</title><rect x="0.5549%" y="213" width="0.1524%" height="15" fill="rgb(238,167,29)" fg:x="335" fg:w="92"/><text x="0.8049%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="0.7123%" y="213" width="0.0116%" height="15" fill="rgb(232,182,51)" fg:x="430" fg:w="7"/><text x="0.9623%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.04%)</title><rect x="0.7239%" y="213" width="0.0381%" height="15" fill="rgb(231,60,39)" fg:x="437" fg:w="23"/><text x="0.9739%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="0.7620%" y="213" width="0.0182%" height="15" fill="rgb(208,69,12)" fg:x="460" fg:w="11"/><text x="1.0120%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="0.7653%" y="197" width="0.0149%" height="15" fill="rgb(235,93,37)" fg:x="462" fg:w="9"/><text x="1.0153%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.04%)</title><rect x="0.8034%" y="213" width="0.0364%" height="15" fill="rgb(213,116,39)" fg:x="485" fg:w="22"/><text x="1.0534%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.04%)</title><rect x="0.9194%" y="149" width="0.0381%" height="15" fill="rgb(222,207,29)" fg:x="555" fg:w="23"/><text x="1.1694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.02%)</title><rect x="0.9343%" y="133" width="0.0232%" height="15" fill="rgb(206,96,30)" fg:x="564" fg:w="14"/><text x="1.1843%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.04%)</title><rect x="0.9177%" y="165" width="0.0447%" height="15" fill="rgb(218,138,4)" fg:x="554" fg:w="27"/><text x="1.1677%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (35 samples, 0.06%)</title><rect x="0.9078%" y="181" width="0.0580%" height="15" fill="rgb(250,191,14)" fg:x="548" fg:w="35"/><text x="1.1578%" y="191.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (79 samples, 0.13%)</title><rect x="0.8398%" y="213" width="0.1309%" height="15" fill="rgb(239,60,40)" fg:x="507" fg:w="79"/><text x="1.0898%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (46 samples, 0.08%)</title><rect x="0.8945%" y="197" width="0.0762%" height="15" fill="rgb(206,27,48)" fg:x="540" fg:w="46"/><text x="1.1445%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (74 samples, 0.12%)</title><rect x="4.0253%" y="197" width="0.1226%" height="15" fill="rgb(225,35,8)" fg:x="2430" fg:w="74"/><text x="4.2753%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="4.2075%" y="165" width="0.0497%" height="15" fill="rgb(250,213,24)" fg:x="2540" fg:w="30"/><text x="4.4575%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.12%)</title><rect x="4.1479%" y="197" width="0.1160%" height="15" fill="rgb(247,123,22)" fg:x="2504" fg:w="70"/><text x="4.3979%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (43 samples, 0.07%)</title><rect x="4.1926%" y="181" width="0.0712%" height="15" fill="rgb(231,138,38)" fg:x="2531" fg:w="43"/><text x="4.4426%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.04%)</title><rect x="4.3102%" y="181" width="0.0364%" height="15" fill="rgb(231,145,46)" fg:x="2602" fg:w="22"/><text x="4.5602%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.08%)</title><rect x="4.2705%" y="197" width="0.0779%" height="15" fill="rgb(251,118,11)" fg:x="2578" fg:w="47"/><text x="4.5205%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="4.3483%" y="197" width="0.0116%" height="15" fill="rgb(217,147,25)" fg:x="2625" fg:w="7"/><text x="4.5983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="4.3599%" y="197" width="0.0149%" height="15" fill="rgb(247,81,37)" fg:x="2632" fg:w="9"/><text x="4.6099%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.03%)</title><rect x="4.3748%" y="197" width="0.0315%" height="15" fill="rgb(209,12,38)" fg:x="2641" fg:w="19"/><text x="4.6248%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.01%)</title><rect x="4.4212%" y="197" width="0.0133%" height="15" fill="rgb(227,1,9)" fg:x="2669" fg:w="8"/><text x="4.6712%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="4.4345%" y="197" width="0.0282%" height="15" fill="rgb(248,47,43)" fg:x="2677" fg:w="17"/><text x="4.6845%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="4.4991%" y="181" width="0.0149%" height="15" fill="rgb(221,10,30)" fg:x="2716" fg:w="9"/><text x="4.7491%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="4.5455%" y="165" width="0.0248%" height="15" fill="rgb(210,229,1)" fg:x="2744" fg:w="15"/><text x="4.7955%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (62 samples, 0.10%)</title><rect x="4.5140%" y="181" width="0.1027%" height="15" fill="rgb(222,148,37)" fg:x="2725" fg:w="62"/><text x="4.7640%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (25 samples, 0.04%)</title><rect x="4.5753%" y="165" width="0.0414%" height="15" fill="rgb(234,67,33)" fg:x="2762" fg:w="25"/><text x="4.8253%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (86 samples, 0.14%)</title><rect x="4.4858%" y="197" width="0.1425%" height="15" fill="rgb(247,98,35)" fg:x="2708" fg:w="86"/><text x="4.7358%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="4.6167%" y="181" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="2787" fg:w="7"/><text x="4.8667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="4.6548%" y="165" width="0.0199%" height="15" fill="rgb(213,79,30)" fg:x="2810" fg:w="12"/><text x="4.9048%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="4.6631%" y="149" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="2815" fg:w="7"/><text x="4.9131%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.05%)</title><rect x="4.6349%" y="197" width="0.0464%" height="15" fill="rgb(230,62,27)" fg:x="2798" fg:w="28"/><text x="4.8849%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="4.6482%" y="181" width="0.0331%" height="15" fill="rgb(216,154,8)" fg:x="2806" fg:w="20"/><text x="4.8982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="4.7459%" y="133" width="0.0215%" height="15" fill="rgb(244,35,45)" fg:x="2865" fg:w="13"/><text x="4.9959%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="4.7558%" y="117" width="0.0116%" height="15" fill="rgb(251,115,12)" fg:x="2871" fg:w="7"/><text x="5.0058%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="4.7343%" y="165" width="0.0364%" height="15" fill="rgb(240,54,50)" fg:x="2858" fg:w="22"/><text x="4.9843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="4.7459%" y="149" width="0.0248%" height="15" fill="rgb(233,84,52)" fg:x="2865" fg:w="15"/><text x="4.9959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.03%)</title><rect x="4.8652%" y="117" width="0.0265%" height="15" fill="rgb(207,117,47)" fg:x="2937" fg:w="16"/><text x="5.1152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="4.8933%" y="101" width="0.0116%" height="15" fill="rgb(249,43,39)" fg:x="2954" fg:w="7"/><text x="5.1433%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="4.8917%" y="117" width="0.0149%" height="15" fill="rgb(209,38,44)" fg:x="2953" fg:w="9"/><text x="5.1417%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="4.9066%" y="117" width="0.0116%" height="15" fill="rgb(236,212,23)" fg:x="2962" fg:w="7"/><text x="5.1566%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="4.9182%" y="117" width="0.0315%" height="15" fill="rgb(242,79,21)" fg:x="2969" fg:w="19"/><text x="5.1682%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="4.9215%" y="101" width="0.0282%" height="15" fill="rgb(211,96,35)" fg:x="2971" fg:w="17"/><text x="5.1715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (64 samples, 0.11%)</title><rect x="4.8486%" y="133" width="0.1060%" height="15" fill="rgb(253,215,40)" fg:x="2927" fg:w="64"/><text x="5.0986%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="4.9811%" y="117" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="3007" fg:w="7"/><text x="5.2311%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.04%)</title><rect x="5.0060%" y="117" width="0.0431%" height="15" fill="rgb(208,190,38)" fg:x="3022" fg:w="26"/><text x="5.2560%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="5.0093%" y="101" width="0.0398%" height="15" fill="rgb(235,213,38)" fg:x="3024" fg:w="24"/><text x="5.2593%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="5.0358%" y="85" width="0.0133%" height="15" fill="rgb(237,122,38)" fg:x="3040" fg:w="8"/><text x="5.2858%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (68 samples, 0.11%)</title><rect x="4.9596%" y="133" width="0.1126%" height="15" fill="rgb(244,218,35)" fg:x="2994" fg:w="68"/><text x="5.2096%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (12 samples, 0.02%)</title><rect x="5.0523%" y="117" width="0.0199%" height="15" fill="rgb(240,68,47)" fg:x="3050" fg:w="12"/><text x="5.3023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (171 samples, 0.28%)</title><rect x="4.8155%" y="149" width="0.2833%" height="15" fill="rgb(210,16,53)" fg:x="2907" fg:w="171"/><text x="5.0655%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="5.0755%" y="133" width="0.0232%" height="15" fill="rgb(235,124,12)" fg:x="3064" fg:w="14"/><text x="5.3255%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="5.0987%" y="149" width="0.0282%" height="15" fill="rgb(224,169,11)" fg:x="3078" fg:w="17"/><text x="5.3487%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="5.1269%" y="149" width="0.0149%" height="15" fill="rgb(250,166,2)" fg:x="3095" fg:w="9"/><text x="5.3769%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (229 samples, 0.38%)</title><rect x="4.7823%" y="165" width="0.3793%" height="15" fill="rgb(242,216,29)" fg:x="2887" fg:w="229"/><text x="5.0323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="5.1501%" y="149" width="0.0116%" height="15" fill="rgb(230,116,27)" fg:x="3109" fg:w="7"/><text x="5.4001%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="5.1501%" y="133" width="0.0116%" height="15" fill="rgb(228,99,48)" fg:x="3109" fg:w="7"/><text x="5.4001%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (292 samples, 0.48%)</title><rect x="4.6813%" y="197" width="0.4837%" height="15" fill="rgb(253,11,6)" fg:x="2826" fg:w="292"/><text x="4.9313%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (266 samples, 0.44%)</title><rect x="4.7244%" y="181" width="0.4406%" height="15" fill="rgb(247,143,39)" fg:x="2852" fg:w="266"/><text x="4.9744%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="5.1650%" y="197" width="0.0149%" height="15" fill="rgb(236,97,10)" fg:x="3118" fg:w="9"/><text x="5.4150%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="5.5642%" y="165" width="0.0166%" height="15" fill="rgb(233,208,19)" fg:x="3359" fg:w="10"/><text x="5.8142%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="5.5692%" y="149" width="0.0116%" height="15" fill="rgb(216,164,2)" fg:x="3362" fg:w="7"/><text x="5.8192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="5.5443%" y="181" width="0.0381%" height="15" fill="rgb(220,129,5)" fg:x="3347" fg:w="23"/><text x="5.7943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="5.6073%" y="165" width="0.0166%" height="15" fill="rgb(242,17,10)" fg:x="3385" fg:w="10"/><text x="5.8573%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="5.5841%" y="181" width="0.0563%" height="15" fill="rgb(242,107,0)" fg:x="3371" fg:w="34"/><text x="5.8341%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="5.6272%" y="165" width="0.0133%" height="15" fill="rgb(251,28,31)" fg:x="3397" fg:w="8"/><text x="5.8772%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="5.6404%" y="181" width="0.0199%" height="15" fill="rgb(233,223,10)" fg:x="3405" fg:w="12"/><text x="5.8904%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="5.6603%" y="181" width="0.0265%" height="15" fill="rgb(215,21,27)" fg:x="3417" fg:w="16"/><text x="5.9103%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="5.6702%" y="165" width="0.0166%" height="15" fill="rgb(232,23,21)" fg:x="3423" fg:w="10"/><text x="5.9202%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="5.6901%" y="181" width="0.0116%" height="15" fill="rgb(244,5,23)" fg:x="3435" fg:w="7"/><text x="5.9401%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (71 samples, 0.12%)</title><rect x="5.7149%" y="181" width="0.1176%" height="15" fill="rgb(226,81,46)" fg:x="3450" fg:w="71"/><text x="5.9649%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="5.9253%" y="149" width="0.0149%" height="15" fill="rgb(247,70,30)" fg:x="3577" fg:w="9"/><text x="6.1753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="5.9286%" y="133" width="0.0116%" height="15" fill="rgb(212,68,19)" fg:x="3579" fg:w="7"/><text x="6.1786%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (11 samples, 0.02%)</title><rect x="5.9253%" y="165" width="0.0182%" height="15" fill="rgb(240,187,13)" fg:x="3577" fg:w="11"/><text x="6.1753%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (263 samples, 0.44%)</title><rect x="5.9435%" y="165" width="0.4357%" height="15" fill="rgb(223,113,26)" fg:x="3588" fg:w="263"/><text x="6.1935%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="6.3842%" y="165" width="0.0149%" height="15" fill="rgb(206,192,2)" fg:x="3854" fg:w="9"/><text x="6.6342%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.02%)</title><rect x="6.4140%" y="165" width="0.0232%" height="15" fill="rgb(241,108,4)" fg:x="3872" fg:w="14"/><text x="6.6640%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (260 samples, 0.43%)</title><rect x="6.4471%" y="165" width="0.4307%" height="15" fill="rgb(247,173,49)" fg:x="3892" fg:w="260"/><text x="6.6971%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (15 samples, 0.02%)</title><rect x="6.8778%" y="165" width="0.0248%" height="15" fill="rgb(224,114,35)" fg:x="4152" fg:w="15"/><text x="7.1278%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (11 samples, 0.02%)</title><rect x="6.9027%" y="165" width="0.0182%" height="15" fill="rgb(245,159,27)" fg:x="4167" fg:w="11"/><text x="7.1527%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="6.9358%" y="101" width="0.0133%" height="15" fill="rgb(245,172,44)" fg:x="4187" fg:w="8"/><text x="7.1858%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="6.9275%" y="133" width="0.0248%" height="15" fill="rgb(236,23,11)" fg:x="4182" fg:w="15"/><text x="7.1775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="6.9325%" y="117" width="0.0199%" height="15" fill="rgb(205,117,38)" fg:x="4185" fg:w="12"/><text x="7.1825%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (17 samples, 0.03%)</title><rect x="6.9275%" y="149" width="0.0282%" height="15" fill="rgb(237,72,25)" fg:x="4182" fg:w="17"/><text x="7.1775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="7.0037%" y="85" width="0.0182%" height="15" fill="rgb(244,70,9)" fg:x="4228" fg:w="11"/><text x="7.2537%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (34 samples, 0.06%)</title><rect x="6.9755%" y="117" width="0.0563%" height="15" fill="rgb(217,125,39)" fg:x="4211" fg:w="34"/><text x="7.2255%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (27 samples, 0.04%)</title><rect x="6.9871%" y="101" width="0.0447%" height="15" fill="rgb(235,36,10)" fg:x="4218" fg:w="27"/><text x="7.2371%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (52 samples, 0.09%)</title><rect x="6.9557%" y="149" width="0.0861%" height="15" fill="rgb(251,123,47)" fg:x="4199" fg:w="52"/><text x="7.2057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.07%)</title><rect x="6.9706%" y="133" width="0.0712%" height="15" fill="rgb(221,13,13)" fg:x="4208" fg:w="43"/><text x="7.2206%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (75 samples, 0.12%)</title><rect x="6.9225%" y="165" width="0.1242%" height="15" fill="rgb(238,131,9)" fg:x="4179" fg:w="75"/><text x="7.1725%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (193 samples, 0.32%)</title><rect x="7.1014%" y="149" width="0.3197%" height="15" fill="rgb(211,50,8)" fg:x="4287" fg:w="193"/><text x="7.3514%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (26 samples, 0.04%)</title><rect x="7.4212%" y="149" width="0.0431%" height="15" fill="rgb(245,182,24)" fg:x="4480" fg:w="26"/><text x="7.6712%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (26 samples, 0.04%)</title><rect x="7.4212%" y="133" width="0.0431%" height="15" fill="rgb(242,14,37)" fg:x="4480" fg:w="26"/><text x="7.6712%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (31 samples, 0.05%)</title><rect x="7.5255%" y="133" width="0.0514%" height="15" fill="rgb(246,228,12)" fg:x="4543" fg:w="31"/><text x="7.7755%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (74 samples, 0.12%)</title><rect x="7.4708%" y="149" width="0.1226%" height="15" fill="rgb(213,55,15)" fg:x="4510" fg:w="74"/><text x="7.7208%" y="159.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (10 samples, 0.02%)</title><rect x="7.5769%" y="133" width="0.0166%" height="15" fill="rgb(209,9,3)" fg:x="4574" fg:w="10"/><text x="7.8269%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (596 samples, 0.99%)</title><rect x="7.7491%" y="133" width="0.9873%" height="15" fill="rgb(230,59,30)" fg:x="4678" fg:w="596"/><text x="7.9991%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (701 samples, 1.16%)</title><rect x="7.5934%" y="149" width="1.1612%" height="15" fill="rgb(209,121,21)" fg:x="4584" fg:w="701"/><text x="7.8434%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (11 samples, 0.02%)</title><rect x="8.7364%" y="133" width="0.0182%" height="15" fill="rgb(220,109,13)" fg:x="5274" fg:w="11"/><text x="8.9864%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (50 samples, 0.08%)</title><rect x="8.7580%" y="149" width="0.0828%" height="15" fill="rgb(232,18,1)" fg:x="5287" fg:w="50"/><text x="9.0080%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (1,091 samples, 1.81%)</title><rect x="7.0567%" y="165" width="1.8072%" height="15" fill="rgb(215,41,42)" fg:x="4260" fg:w="1091"/><text x="7.3067%" y="175.50">r..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (13 samples, 0.02%)</title><rect x="8.8424%" y="149" width="0.0215%" height="15" fill="rgb(224,123,36)" fg:x="5338" fg:w="13"/><text x="9.0924%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="8.8938%" y="133" width="0.0166%" height="15" fill="rgb(240,125,3)" fg:x="5369" fg:w="10"/><text x="9.1438%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="8.8689%" y="149" width="0.0530%" height="15" fill="rgb(205,98,50)" fg:x="5354" fg:w="32"/><text x="9.1189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.04%)</title><rect x="8.9219%" y="149" width="0.0364%" height="15" fill="rgb(205,185,37)" fg:x="5386" fg:w="22"/><text x="9.1719%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (76 samples, 0.13%)</title><rect x="8.8640%" y="165" width="0.1259%" height="15" fill="rgb(238,207,15)" fg:x="5351" fg:w="76"/><text x="9.1140%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (2,302 samples, 3.81%)</title><rect x="5.1816%" y="197" width="3.8133%" height="15" fill="rgb(213,199,42)" fg:x="3128" fg:w="2302"/><text x="5.4316%" y="207.50">rust..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (1,899 samples, 3.15%)</title><rect x="5.8491%" y="181" width="3.1457%" height="15" fill="rgb(235,201,11)" fg:x="3531" fg:w="1899"/><text x="6.0991%" y="191.50">rus..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="9.2947%" y="149" width="0.0149%" height="15" fill="rgb(207,46,11)" fg:x="5611" fg:w="9"/><text x="9.5447%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="9.2748%" y="181" width="0.0364%" height="15" fill="rgb(241,35,35)" fg:x="5599" fg:w="22"/><text x="9.5248%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="9.2897%" y="165" width="0.0215%" height="15" fill="rgb(243,32,47)" fg:x="5608" fg:w="13"/><text x="9.5397%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (5,001 samples, 8.28%)</title><rect x="1.0287%" y="213" width="8.2842%" height="15" fill="rgb(247,202,23)" fg:x="621" fg:w="5001"/><text x="1.2787%" y="223.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (192 samples, 0.32%)</title><rect x="8.9948%" y="197" width="0.3180%" height="15" fill="rgb(219,102,11)" fg:x="5430" fg:w="192"/><text x="9.2448%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (81 samples, 0.13%)</title><rect x="9.3129%" y="213" width="0.1342%" height="15" fill="rgb(243,110,44)" fg:x="5622" fg:w="81"/><text x="9.5629%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (5,374 samples, 8.90%)</title><rect x="0.5500%" y="229" width="8.9021%" height="15" fill="rgb(222,74,54)" fg:x="332" fg:w="5374"/><text x="0.8000%" y="239.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (7,466 samples, 12.37%)</title><rect x="9.4553%" y="229" width="12.3675%" height="15" fill="rgb(216,99,12)" fg:x="5708" fg:w="7466"/><text x="9.7053%" y="239.50">rust_qecp`rust_qec..</text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="21.8112%" y="213" width="0.0116%" height="15" fill="rgb(226,22,26)" fg:x="13167" fg:w="7"/><text x="22.0612%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="23.2043%" y="165" width="0.0248%" height="15" fill="rgb(217,163,10)" fg:x="14008" fg:w="15"/><text x="23.4543%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (43 samples, 0.07%)</title><rect x="23.1928%" y="197" width="0.0712%" height="15" fill="rgb(213,25,53)" fg:x="14001" fg:w="43"/><text x="23.4428%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.07%)</title><rect x="23.1961%" y="181" width="0.0679%" height="15" fill="rgb(252,105,26)" fg:x="14003" fg:w="41"/><text x="23.4461%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.03%)</title><rect x="23.2292%" y="165" width="0.0348%" height="15" fill="rgb(220,39,43)" fg:x="14023" fg:w="21"/><text x="23.4792%" y="175.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (46 samples, 0.08%)</title><rect x="23.1911%" y="213" width="0.0762%" height="15" fill="rgb(229,68,48)" fg:x="14000" fg:w="46"/><text x="23.4411%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,569 samples, 2.60%)</title><rect x="21.8228%" y="229" width="2.5991%" height="15" fill="rgb(252,8,32)" fg:x="13174" fg:w="1569"/><text x="22.0728%" y="239.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (697 samples, 1.15%)</title><rect x="23.2673%" y="213" width="1.1546%" height="15" fill="rgb(223,20,43)" fg:x="14046" fg:w="697"/><text x="23.5173%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (21,560 samples, 35.71%)</title><rect x="24.4219%" y="229" width="35.7143%" height="15" fill="rgb(229,81,49)" fg:x="14743" fg:w="21560"/><text x="24.6719%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_rand..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="60.1444%" y="213" width="0.0116%" height="15" fill="rgb(236,28,36)" fg:x="36308" fg:w="7"/><text x="60.3944%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.05%)</title><rect x="60.1560%" y="213" width="0.0497%" height="15" fill="rgb(249,185,26)" fg:x="36315" fg:w="30"/><text x="60.4060%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (24 samples, 0.04%)</title><rect x="60.1660%" y="197" width="0.0398%" height="15" fill="rgb(249,174,33)" fg:x="36321" fg:w="24"/><text x="60.4160%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (999 samples, 1.65%)</title><rect x="60.2091%" y="213" width="1.6549%" height="15" fill="rgb(233,201,37)" fg:x="36347" fg:w="999"/><text x="60.4591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.05%)</title><rect x="63.4426%" y="149" width="0.0480%" height="15" fill="rgb(221,78,26)" fg:x="38299" fg:w="29"/><text x="63.6926%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.03%)</title><rect x="63.4575%" y="133" width="0.0331%" height="15" fill="rgb(250,127,30)" fg:x="38308" fg:w="20"/><text x="63.7075%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="63.4773%" y="117" width="0.0133%" height="15" fill="rgb(230,49,44)" fg:x="38320" fg:w="8"/><text x="63.7273%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (42 samples, 0.07%)</title><rect x="63.4326%" y="165" width="0.0696%" height="15" fill="rgb(229,67,23)" fg:x="38293" fg:w="42"/><text x="63.6826%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="63.4906%" y="149" width="0.0116%" height="15" fill="rgb(249,83,47)" fg:x="38328" fg:w="7"/><text x="63.7406%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (46 samples, 0.08%)</title><rect x="63.4293%" y="181" width="0.0762%" height="15" fill="rgb(215,43,3)" fg:x="38291" fg:w="46"/><text x="63.6793%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (2,036 samples, 3.37%)</title><rect x="60.1362%" y="229" width="3.3726%" height="15" fill="rgb(238,154,13)" fg:x="36303" fg:w="2036"/><text x="60.3862%" y="239.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (993 samples, 1.64%)</title><rect x="61.8639%" y="213" width="1.6449%" height="15" fill="rgb(219,56,2)" fg:x="37346" fg:w="993"/><text x="62.1139%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (53 samples, 0.09%)</title><rect x="63.4210%" y="197" width="0.0878%" height="15" fill="rgb(233,0,4)" fg:x="38286" fg:w="53"/><text x="63.6710%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (22,002 samples, 36.45%)</title><rect x="63.5188%" y="229" width="36.4465%" height="15" fill="rgb(235,30,7)" fg:x="38345" fg:w="22002"/><text x="63.7688%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (15,209 samples, 25.19%)</title><rect x="74.7714%" y="213" width="25.1938%" height="15" fill="rgb(250,79,13)" fg:x="45138" fg:w="15209"/><text x="75.0214%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMo..</text></g><g><title>all (60,368 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="60368"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,308 samples, 99.90%)</title><rect x="0.0994%" y="309" width="99.9006%" height="15" fill="rgb(228,22,38)" fg:x="60" fg:w="60308"/><text x="0.3494%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,308 samples, 99.90%)</title><rect x="0.0994%" y="293" width="99.9006%" height="15" fill="rgb(235,168,5)" fg:x="60" fg:w="60308"/><text x="0.3494%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,308 samples, 99.90%)</title><rect x="0.0994%" y="277" width="99.9006%" height="15" fill="rgb(221,155,16)" fg:x="60" fg:w="60308"/><text x="0.3494%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,308 samples, 99.90%)</title><rect x="0.0994%" y="261" width="99.9006%" height="15" fill="rgb(215,215,53)" fg:x="60" fg:w="60308"/><text x="0.3494%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,291 samples, 99.87%)</title><rect x="0.1276%" y="245" width="99.8724%" height="15" fill="rgb(223,4,10)" fg:x="77" fg:w="60291"/><text x="0.3776%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (21 samples, 0.03%)</title><rect x="99.9652%" y="229" width="0.0348%" height="15" fill="rgb(234,103,6)" fg:x="60347" fg:w="21"/><text x="100.2152%" y="239.50"></text></g></svg></svg>