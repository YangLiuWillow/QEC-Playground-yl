<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="61452"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="0.0065%" y="117" width="0.0163%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="10"/><text x="0.2565%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="0.0260%" y="117" width="0.0244%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="15"/><text x="0.2760%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (15 samples, 0.02%)</title><rect x="0.0260%" y="101" width="0.0244%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="15"/><text x="0.2760%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0260%" y="85" width="0.0244%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="15"/><text x="0.2760%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0260%" y="69" width="0.0244%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="15"/><text x="0.2760%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (15 samples, 0.02%)</title><rect x="0.0260%" y="53" width="0.0244%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="15"/><text x="0.2760%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0374%" y="37" width="0.0130%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="8"/><text x="0.2874%" y="47.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (52 samples, 0.08%)</title><rect x="0.0602%" y="117" width="0.0846%" height="15" fill="rgb(228,23,34)" fg:x="37" fg:w="52"/><text x="0.3102%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (39 samples, 0.06%)</title><rect x="0.1448%" y="117" width="0.0635%" height="15" fill="rgb(218,30,26)" fg:x="89" fg:w="39"/><text x="0.3948%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="0.8381%" y="101" width="0.0195%" height="15" fill="rgb(220,122,19)" fg:x="515" fg:w="12"/><text x="1.0881%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (50 samples, 0.08%)</title><rect x="0.8722%" y="101" width="0.0814%" height="15" fill="rgb(250,228,42)" fg:x="536" fg:w="50"/><text x="1.1222%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (65 samples, 0.11%)</title><rect x="0.9568%" y="101" width="0.1058%" height="15" fill="rgb(240,193,28)" fg:x="588" fg:w="65"/><text x="1.2068%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="1.0284%" y="85" width="0.0342%" height="15" fill="rgb(216,20,37)" fg:x="632" fg:w="21"/><text x="1.2784%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="1.0431%" y="69" width="0.0195%" height="15" fill="rgb(206,188,39)" fg:x="641" fg:w="12"/><text x="1.2931%" y="79.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (17 samples, 0.03%)</title><rect x="1.3539%" y="85" width="0.0277%" height="15" fill="rgb(217,207,13)" fg:x="832" fg:w="17"/><text x="1.6039%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (47 samples, 0.08%)</title><rect x="1.3848%" y="85" width="0.0765%" height="15" fill="rgb(231,73,38)" fg:x="851" fg:w="47"/><text x="1.6348%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (779 samples, 1.27%)</title><rect x="0.2197%" y="117" width="1.2677%" height="15" fill="rgb(225,20,46)" fg:x="135" fg:w="779"/><text x="0.4697%" y="127.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (257 samples, 0.42%)</title><rect x="1.0691%" y="101" width="0.4182%" height="15" fill="rgb(210,31,41)" fg:x="657" fg:w="257"/><text x="1.3191%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="1.4613%" y="85" width="0.0260%" height="15" fill="rgb(221,200,47)" fg:x="898" fg:w="16"/><text x="1.7113%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="1.4743%" y="69" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="906" fg:w="8"/><text x="1.7243%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="1.4955%" y="101" width="0.0391%" height="15" fill="rgb(249,33,26)" fg:x="919" fg:w="24"/><text x="1.7455%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (126 samples, 0.21%)</title><rect x="1.5394%" y="101" width="0.2050%" height="15" fill="rgb(235,183,28)" fg:x="946" fg:w="126"/><text x="1.7894%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (51 samples, 0.08%)</title><rect x="1.6615%" y="85" width="0.0830%" height="15" fill="rgb(221,5,38)" fg:x="1021" fg:w="51"/><text x="1.9115%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (161 samples, 0.26%)</title><rect x="1.4873%" y="117" width="0.2620%" height="15" fill="rgb(247,18,42)" fg:x="914" fg:w="161"/><text x="1.7373%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7558%" y="117" width="0.0114%" height="15" fill="rgb(241,131,45)" fg:x="1079" fg:w="7"/><text x="2.0058%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (7 samples, 0.01%)</title><rect x="1.7558%" y="101" width="0.0114%" height="15" fill="rgb(249,31,29)" fg:x="1079" fg:w="7"/><text x="2.0058%" y="111.50"></text></g><g><title>dyld`start (1,087 samples, 1.77%)</title><rect x="0.0000%" y="357" width="1.7689%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1087"/><text x="0.2500%" y="367.50"></text></g><g><title>rust_qecp`main (1,084 samples, 1.76%)</title><rect x="0.0049%" y="341" width="1.7640%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,084 samples, 1.76%)</title><rect x="0.0049%" y="325" width="1.7640%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="335.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,084 samples, 1.76%)</title><rect x="0.0049%" y="309" width="1.7640%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="319.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,084 samples, 1.76%)</title><rect x="0.0049%" y="293" width="1.7640%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::main (1,084 samples, 1.76%)</title><rect x="0.0049%" y="277" width="1.7640%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,084 samples, 1.76%)</title><rect x="0.0049%" y="261" width="1.7640%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="271.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,084 samples, 1.76%)</title><rect x="0.0049%" y="245" width="1.7640%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="255.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,084 samples, 1.76%)</title><rect x="0.0049%" y="229" width="1.7640%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="239.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,084 samples, 1.76%)</title><rect x="0.0049%" y="213" width="1.7640%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,084 samples, 1.76%)</title><rect x="0.0049%" y="197" width="1.7640%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,084 samples, 1.76%)</title><rect x="0.0049%" y="181" width="1.7640%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,084 samples, 1.76%)</title><rect x="0.0049%" y="165" width="1.7640%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,084 samples, 1.76%)</title><rect x="0.0049%" y="149" width="1.7640%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,084 samples, 1.76%)</title><rect x="0.0049%" y="133" width="1.7640%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1084"/><text x="0.2549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="1.7819%" y="277" width="0.0114%" height="15" fill="rgb(208,69,12)" fg:x="1095" fg:w="7"/><text x="2.0319%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="1.7933%" y="277" width="0.0163%" height="15" fill="rgb(235,93,37)" fg:x="1102" fg:w="10"/><text x="2.0433%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="1.8161%" y="261" width="0.0146%" height="15" fill="rgb(213,116,39)" fg:x="1116" fg:w="9"/><text x="2.0661%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="1.8161%" y="277" width="0.0309%" height="15" fill="rgb(222,207,29)" fg:x="1116" fg:w="19"/><text x="2.0661%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.02%)</title><rect x="1.8535%" y="261" width="0.0163%" height="15" fill="rgb(206,96,30)" fg:x="1139" fg:w="10"/><text x="2.1035%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="1.8698%" y="261" width="0.0130%" height="15" fill="rgb(218,138,4)" fg:x="1149" fg:w="8"/><text x="2.1198%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="1.8828%" y="261" width="0.0130%" height="15" fill="rgb(250,191,14)" fg:x="1157" fg:w="8"/><text x="2.1328%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (30 samples, 0.05%)</title><rect x="1.8974%" y="261" width="0.0488%" height="15" fill="rgb(239,60,40)" fg:x="1166" fg:w="30"/><text x="2.1474%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="1.9462%" y="261" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="1196" fg:w="8"/><text x="2.1962%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="1.9609%" y="261" width="0.0325%" height="15" fill="rgb(225,35,8)" fg:x="1205" fg:w="20"/><text x="2.2109%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="2.0374%" y="229" width="0.0130%" height="15" fill="rgb(250,213,24)" fg:x="1252" fg:w="8"/><text x="2.2874%" y="239.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (36 samples, 0.06%)</title><rect x="1.9934%" y="261" width="0.0586%" height="15" fill="rgb(247,123,22)" fg:x="1225" fg:w="36"/><text x="2.2434%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="2.0341%" y="245" width="0.0179%" height="15" fill="rgb(231,138,38)" fg:x="1250" fg:w="11"/><text x="2.2841%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (22 samples, 0.04%)</title><rect x="20.0596%" y="245" width="0.0358%" height="15" fill="rgb(231,145,46)" fg:x="12327" fg:w="22"/><text x="20.3096%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="20.1198%" y="213" width="0.0146%" height="15" fill="rgb(251,118,11)" fg:x="12364" fg:w="9"/><text x="20.3698%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="20.0954%" y="245" width="0.0407%" height="15" fill="rgb(217,147,25)" fg:x="12349" fg:w="25"/><text x="20.3454%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="20.1149%" y="229" width="0.0212%" height="15" fill="rgb(247,81,37)" fg:x="12361" fg:w="13"/><text x="20.3649%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="20.1897%" y="229" width="0.0260%" height="15" fill="rgb(209,12,38)" fg:x="12407" fg:w="16"/><text x="20.4397%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (50 samples, 0.08%)</title><rect x="20.1377%" y="245" width="0.0814%" height="15" fill="rgb(227,1,9)" fg:x="12375" fg:w="50"/><text x="20.3877%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="20.2272%" y="245" width="0.0146%" height="15" fill="rgb(248,47,43)" fg:x="12430" fg:w="9"/><text x="20.4772%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="20.2418%" y="245" width="0.0179%" height="15" fill="rgb(221,10,30)" fg:x="12439" fg:w="11"/><text x="20.4918%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.05%)</title><rect x="20.2679%" y="245" width="0.0472%" height="15" fill="rgb(210,229,1)" fg:x="12455" fg:w="29"/><text x="20.5179%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="20.3329%" y="229" width="0.0130%" height="15" fill="rgb(222,148,37)" fg:x="12495" fg:w="8"/><text x="20.5829%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (18 samples, 0.03%)</title><rect x="20.3199%" y="245" width="0.0293%" height="15" fill="rgb(234,67,33)" fg:x="12487" fg:w="18"/><text x="20.5699%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="20.3541%" y="213" width="0.0179%" height="15" fill="rgb(247,98,35)" fg:x="12508" fg:w="11"/><text x="20.6041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="20.3574%" y="197" width="0.0146%" height="15" fill="rgb(247,138,52)" fg:x="12510" fg:w="9"/><text x="20.6074%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="20.3574%" y="181" width="0.0146%" height="15" fill="rgb(213,79,30)" fg:x="12510" fg:w="9"/><text x="20.6074%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="20.3883%" y="181" width="0.0260%" height="15" fill="rgb(246,177,23)" fg:x="12529" fg:w="16"/><text x="20.6383%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="20.3834%" y="197" width="0.0358%" height="15" fill="rgb(230,62,27)" fg:x="12526" fg:w="22"/><text x="20.6334%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.07%)</title><rect x="20.3508%" y="245" width="0.0749%" height="15" fill="rgb(216,154,8)" fg:x="12506" fg:w="46"/><text x="20.6008%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (44 samples, 0.07%)</title><rect x="20.3541%" y="229" width="0.0716%" height="15" fill="rgb(244,35,45)" fg:x="12508" fg:w="44"/><text x="20.6041%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="20.3785%" y="213" width="0.0472%" height="15" fill="rgb(251,115,12)" fg:x="12523" fg:w="29"/><text x="20.6285%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.04%)</title><rect x="20.4696%" y="181" width="0.0358%" height="15" fill="rgb(240,54,50)" fg:x="12579" fg:w="22"/><text x="20.7196%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="20.4892%" y="165" width="0.0163%" height="15" fill="rgb(233,84,52)" fg:x="12591" fg:w="10"/><text x="20.7392%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="20.4908%" y="149" width="0.0146%" height="15" fill="rgb(207,117,47)" fg:x="12592" fg:w="9"/><text x="20.7408%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="20.4924%" y="133" width="0.0130%" height="15" fill="rgb(249,43,39)" fg:x="12593" fg:w="8"/><text x="20.7424%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="20.5201%" y="165" width="0.0146%" height="15" fill="rgb(209,38,44)" fg:x="12610" fg:w="9"/><text x="20.7701%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="20.5217%" y="149" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="12611" fg:w="8"/><text x="20.7717%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (12 samples, 0.02%)</title><rect x="20.5429%" y="165" width="0.0195%" height="15" fill="rgb(242,79,21)" fg:x="12624" fg:w="12"/><text x="20.7929%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="20.5640%" y="165" width="0.0212%" height="15" fill="rgb(211,96,35)" fg:x="12637" fg:w="13"/><text x="20.8140%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (64 samples, 0.10%)</title><rect x="20.5087%" y="181" width="0.1041%" height="15" fill="rgb(253,215,40)" fg:x="12603" fg:w="64"/><text x="20.7587%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (10 samples, 0.02%)</title><rect x="20.5966%" y="165" width="0.0163%" height="15" fill="rgb(211,81,21)" fg:x="12657" fg:w="10"/><text x="20.8466%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (155 samples, 0.25%)</title><rect x="20.4631%" y="197" width="0.2522%" height="15" fill="rgb(208,190,38)" fg:x="12575" fg:w="155"/><text x="20.7131%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (62 samples, 0.10%)</title><rect x="20.6145%" y="181" width="0.1009%" height="15" fill="rgb(235,213,38)" fg:x="12668" fg:w="62"/><text x="20.8645%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (182 samples, 0.30%)</title><rect x="20.4485%" y="213" width="0.2962%" height="15" fill="rgb(237,122,38)" fg:x="12566" fg:w="182"/><text x="20.6985%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="20.7333%" y="197" width="0.0114%" height="15" fill="rgb(244,218,35)" fg:x="12741" fg:w="7"/><text x="20.9833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="20.7333%" y="181" width="0.0114%" height="15" fill="rgb(240,68,47)" fg:x="12741" fg:w="7"/><text x="20.9833%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (197 samples, 0.32%)</title><rect x="20.4257%" y="245" width="0.3206%" height="15" fill="rgb(210,16,53)" fg:x="12552" fg:w="197"/><text x="20.6757%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (189 samples, 0.31%)</title><rect x="20.4387%" y="229" width="0.3076%" height="15" fill="rgb(235,124,12)" fg:x="12560" fg:w="189"/><text x="20.6887%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="22.1946%" y="229" width="0.0130%" height="15" fill="rgb(224,169,11)" fg:x="13639" fg:w="8"/><text x="22.4446%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="22.1946%" y="213" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="13639" fg:w="8"/><text x="22.4446%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (503 samples, 0.82%)</title><rect x="22.2173%" y="213" width="0.8185%" height="15" fill="rgb(242,216,29)" fg:x="13653" fg:w="503"/><text x="22.4673%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (506 samples, 0.82%)</title><rect x="22.2141%" y="229" width="0.8234%" height="15" fill="rgb(230,116,27)" fg:x="13651" fg:w="506"/><text x="22.4641%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (365 samples, 0.59%)</title><rect x="23.0586%" y="229" width="0.5940%" height="15" fill="rgb(228,99,48)" fg:x="14170" fg:w="365"/><text x="23.3086%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (66 samples, 0.11%)</title><rect x="23.8105%" y="213" width="0.1074%" height="15" fill="rgb(253,11,6)" fg:x="14632" fg:w="66"/><text x="24.0605%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.03%)</title><rect x="23.9244%" y="213" width="0.0342%" height="15" fill="rgb(247,143,39)" fg:x="14702" fg:w="21"/><text x="24.1744%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (787 samples, 1.28%)</title><rect x="23.9585%" y="213" width="1.2807%" height="15" fill="rgb(236,97,10)" fg:x="14723" fg:w="787"/><text x="24.2085%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (18 samples, 0.03%)</title><rect x="25.2392%" y="213" width="0.0293%" height="15" fill="rgb(233,208,19)" fg:x="15510" fg:w="18"/><text x="25.4892%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (7 samples, 0.01%)</title><rect x="25.2685%" y="213" width="0.0114%" height="15" fill="rgb(216,164,2)" fg:x="15528" fg:w="7"/><text x="25.5185%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="25.2929%" y="197" width="0.0130%" height="15" fill="rgb(220,129,5)" fg:x="15543" fg:w="8"/><text x="25.5429%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="25.2945%" y="181" width="0.0114%" height="15" fill="rgb(242,17,10)" fg:x="15544" fg:w="7"/><text x="25.5445%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (16 samples, 0.03%)</title><rect x="25.2815%" y="213" width="0.0260%" height="15" fill="rgb(242,107,0)" fg:x="15536" fg:w="16"/><text x="25.5315%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (94 samples, 0.15%)</title><rect x="25.3076%" y="213" width="0.1530%" height="15" fill="rgb(251,28,31)" fg:x="15552" fg:w="94"/><text x="25.5576%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (369 samples, 0.60%)</title><rect x="25.5809%" y="197" width="0.6005%" height="15" fill="rgb(233,223,10)" fg:x="15720" fg:w="369"/><text x="25.8309%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (48 samples, 0.08%)</title><rect x="26.1814%" y="181" width="0.0781%" height="15" fill="rgb(215,21,27)" fg:x="16089" fg:w="48"/><text x="26.4314%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (49 samples, 0.08%)</title><rect x="26.1814%" y="197" width="0.0797%" height="15" fill="rgb(232,23,21)" fg:x="16089" fg:w="49"/><text x="26.4314%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (33 samples, 0.05%)</title><rect x="26.2611%" y="197" width="0.0537%" height="15" fill="rgb(244,5,23)" fg:x="16138" fg:w="33"/><text x="26.5111%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (12 samples, 0.02%)</title><rect x="26.9137%" y="149" width="0.0195%" height="15" fill="rgb(226,81,46)" fg:x="16539" fg:w="12"/><text x="27.1637%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (175 samples, 0.28%)</title><rect x="26.6501%" y="181" width="0.2848%" height="15" fill="rgb(247,70,30)" fg:x="16377" fg:w="175"/><text x="26.9001%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (13 samples, 0.02%)</title><rect x="26.9137%" y="165" width="0.0212%" height="15" fill="rgb(212,68,19)" fg:x="16539" fg:w="13"/><text x="27.1637%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (411 samples, 0.67%)</title><rect x="26.3165%" y="197" width="0.6688%" height="15" fill="rgb(240,187,13)" fg:x="16172" fg:w="411"/><text x="26.5665%" y="207.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (31 samples, 0.05%)</title><rect x="26.9348%" y="181" width="0.0504%" height="15" fill="rgb(223,113,26)" fg:x="16552" fg:w="31"/><text x="27.1848%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,992 samples, 3.24%)</title><rect x="27.2180%" y="181" width="3.2416%" height="15" fill="rgb(206,192,2)" fg:x="16726" fg:w="1992"/><text x="27.4680%" y="191.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,141 samples, 3.48%)</title><rect x="26.9853%" y="197" width="3.4840%" height="15" fill="rgb(241,108,4)" fg:x="16583" fg:w="2141"/><text x="27.2353%" y="207.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (10 samples, 0.02%)</title><rect x="30.4693%" y="197" width="0.0163%" height="15" fill="rgb(247,173,49)" fg:x="18724" fg:w="10"/><text x="30.7193%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (459 samples, 0.75%)</title><rect x="30.4856%" y="197" width="0.7469%" height="15" fill="rgb(224,114,35)" fg:x="18734" fg:w="459"/><text x="30.7356%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (12 samples, 0.02%)</title><rect x="31.2130%" y="181" width="0.0195%" height="15" fill="rgb(245,159,27)" fg:x="19181" fg:w="12"/><text x="31.4630%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (3,571 samples, 5.81%)</title><rect x="25.4638%" y="213" width="5.8110%" height="15" fill="rgb(245,172,44)" fg:x="15648" fg:w="3571"/><text x="25.7138%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (26 samples, 0.04%)</title><rect x="31.2325%" y="197" width="0.0423%" height="15" fill="rgb(236,23,11)" fg:x="19193" fg:w="26"/><text x="31.4825%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (20 samples, 0.03%)</title><rect x="31.2748%" y="213" width="0.0325%" height="15" fill="rgb(205,117,38)" fg:x="19219" fg:w="20"/><text x="31.5248%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (6,516 samples, 10.60%)</title><rect x="20.7495%" y="245" width="10.6034%" height="15" fill="rgb(237,72,25)" fg:x="12751" fg:w="6516"/><text x="20.9995%" y="255.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (4,728 samples, 7.69%)</title><rect x="23.6591%" y="229" width="7.6938%" height="15" fill="rgb(244,70,9)" fg:x="14539" fg:w="4728"/><text x="23.9091%" y="239.50">rust_qecp`m..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (28 samples, 0.05%)</title><rect x="31.3074%" y="213" width="0.0456%" height="15" fill="rgb(217,125,39)" fg:x="19239" fg:w="28"/><text x="31.5574%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="32.4318%" y="229" width="0.0244%" height="15" fill="rgb(235,36,10)" fg:x="19930" fg:w="15"/><text x="32.6818%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="32.4448%" y="213" width="0.0114%" height="15" fill="rgb(251,123,47)" fg:x="19938" fg:w="7"/><text x="32.6948%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.02%)</title><rect x="32.4595%" y="229" width="0.0195%" height="15" fill="rgb(221,13,13)" fg:x="19947" fg:w="12"/><text x="32.7095%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="32.4660%" y="213" width="0.0130%" height="15" fill="rgb(238,131,9)" fg:x="19951" fg:w="8"/><text x="32.7160%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (18,685 samples, 30.41%)</title><rect x="2.0748%" y="261" width="30.4058%" height="15" fill="rgb(211,50,8)" fg:x="1275" fg:w="18685"/><text x="2.3248%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::deco..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (693 samples, 1.13%)</title><rect x="31.3529%" y="245" width="1.1277%" height="15" fill="rgb(245,182,24)" fg:x="19267" fg:w="693"/><text x="31.6029%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (19,019 samples, 30.95%)</title><rect x="1.8535%" y="277" width="30.9494%" height="15" fill="rgb(242,14,37)" fg:x="1139" fg:w="19019"/><text x="2.1035%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (198 samples, 0.32%)</title><rect x="32.4806%" y="261" width="0.3222%" height="15" fill="rgb(246,228,12)" fg:x="19960" fg:w="198"/><text x="32.7306%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (4,738 samples, 7.71%)</title><rect x="32.8028%" y="277" width="7.7101%" height="15" fill="rgb(213,55,15)" fg:x="20158" fg:w="4738"/><text x="33.0528%" y="287.50">rust_qecp`r..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (16 samples, 0.03%)</title><rect x="41.4665%" y="261" width="0.0260%" height="15" fill="rgb(209,9,3)" fg:x="25482" fg:w="16"/><text x="41.7165%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.03%)</title><rect x="41.4665%" y="245" width="0.0260%" height="15" fill="rgb(230,59,30)" fg:x="25482" fg:w="16"/><text x="41.7165%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="41.4681%" y="229" width="0.0244%" height="15" fill="rgb(209,121,21)" fg:x="25483" fg:w="15"/><text x="41.7181%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="41.4714%" y="213" width="0.0212%" height="15" fill="rgb(220,109,13)" fg:x="25485" fg:w="13"/><text x="41.7214%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,120 samples, 1.82%)</title><rect x="40.5129%" y="277" width="1.8226%" height="15" fill="rgb(232,18,1)" fg:x="24896" fg:w="1120"/><text x="40.7629%" y="287.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (518 samples, 0.84%)</title><rect x="41.4925%" y="261" width="0.8429%" height="15" fill="rgb(215,41,42)" fg:x="25498" fg:w="518"/><text x="41.7425%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (17,533 samples, 28.53%)</title><rect x="42.3355%" y="277" width="28.5312%" height="15" fill="rgb(224,123,36)" fg:x="26016" fg:w="17533"/><text x="42.5855%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::g..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (624 samples, 1.02%)</title><rect x="70.8781%" y="261" width="1.0154%" height="15" fill="rgb(240,125,3)" fg:x="43556" fg:w="624"/><text x="71.1281%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,382 samples, 2.25%)</title><rect x="70.8667%" y="277" width="2.2489%" height="15" fill="rgb(205,98,50)" fg:x="43549" fg:w="1382"/><text x="71.1167%" y="287.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (751 samples, 1.22%)</title><rect x="71.8935%" y="261" width="1.2221%" height="15" fill="rgb(205,185,37)" fg:x="44180" fg:w="751"/><text x="72.1435%" y="271.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (24 samples, 0.04%)</title><rect x="73.0765%" y="245" width="0.0391%" height="15" fill="rgb(238,207,15)" fg:x="44907" fg:w="24"/><text x="73.3265%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (22 samples, 0.04%)</title><rect x="73.0798%" y="229" width="0.0358%" height="15" fill="rgb(213,199,42)" fg:x="44909" fg:w="22"/><text x="73.3298%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.03%)</title><rect x="73.0814%" y="213" width="0.0342%" height="15" fill="rgb(235,201,11)" fg:x="44910" fg:w="21"/><text x="73.3314%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.02%)</title><rect x="73.0912%" y="197" width="0.0244%" height="15" fill="rgb(207,46,11)" fg:x="44916" fg:w="15"/><text x="73.3412%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (16,504 samples, 26.86%)</title><rect x="73.1172%" y="277" width="26.8567%" height="15" fill="rgb(241,35,35)" fg:x="44932" fg:w="16504"/><text x="73.3672%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (11,980 samples, 19.49%)</title><rect x="80.4791%" y="261" width="19.4949%" height="15" fill="rgb(243,32,47)" fg:x="49456" fg:w="11980"/><text x="80.7291%" y="271.50">rust_qecp`rust_qecp::ftqec::Pla..</text></g><g><title>all (61,452 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="61452"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,364 samples, 98.23%)</title><rect x="1.7705%" y="357" width="98.2295%" height="15" fill="rgb(219,102,11)" fg:x="1088" fg:w="60364"/><text x="2.0205%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,364 samples, 98.23%)</title><rect x="1.7705%" y="341" width="98.2295%" height="15" fill="rgb(243,110,44)" fg:x="1088" fg:w="60364"/><text x="2.0205%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,364 samples, 98.23%)</title><rect x="1.7705%" y="325" width="98.2295%" height="15" fill="rgb(222,74,54)" fg:x="1088" fg:w="60364"/><text x="2.0205%" y="335.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,364 samples, 98.23%)</title><rect x="1.7705%" y="309" width="98.2295%" height="15" fill="rgb(216,99,12)" fg:x="1088" fg:w="60364"/><text x="2.0205%" y="319.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,363 samples, 98.23%)</title><rect x="1.7721%" y="293" width="98.2279%" height="15" fill="rgb(226,22,26)" fg:x="1089" fg:w="60363"/><text x="2.0221%" y="303.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16 samples, 0.03%)</title><rect x="99.9740%" y="277" width="0.0260%" height="15" fill="rgb(217,163,10)" fg:x="61436" fg:w="16"/><text x="100.2240%" y="287.50"></text></g></svg></svg>