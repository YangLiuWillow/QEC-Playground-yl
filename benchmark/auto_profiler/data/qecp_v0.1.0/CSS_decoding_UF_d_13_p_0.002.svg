<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="69386"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (12 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0173%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (12 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0173%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="0.0476%" y="133" width="0.0288%" height="15" fill="rgb(221,193,54)" fg:x="33" fg:w="20"/><text x="0.2976%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.06%)</title><rect x="0.0303%" y="149" width="0.0605%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="42"/><text x="0.2803%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.06%)</title><rect x="0.1052%" y="53" width="0.0605%" height="15" fill="rgb(208,68,35)" fg:x="73" fg:w="42"/><text x="0.3552%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (8 samples, 0.01%)</title><rect x="0.1657%" y="53" width="0.0115%" height="15" fill="rgb(232,128,0)" fg:x="115" fg:w="8"/><text x="0.4157%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.1657%" y="37" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="115" fg:w="8"/><text x="0.4157%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (62 samples, 0.09%)</title><rect x="0.1052%" y="69" width="0.0894%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="62"/><text x="0.3552%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (12 samples, 0.02%)</title><rect x="0.1773%" y="53" width="0.0173%" height="15" fill="rgb(218,30,26)" fg:x="123" fg:w="12"/><text x="0.4273%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="0.1773%" y="37" width="0.0173%" height="15" fill="rgb(220,122,19)" fg:x="123" fg:w="12"/><text x="0.4273%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (14 samples, 0.02%)</title><rect x="0.1946%" y="69" width="0.0202%" height="15" fill="rgb(250,228,42)" fg:x="135" fg:w="14"/><text x="0.4446%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.02%)</title><rect x="0.1946%" y="53" width="0.0202%" height="15" fill="rgb(240,193,28)" fg:x="135" fg:w="14"/><text x="0.4446%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.08%)</title><rect x="0.2147%" y="69" width="0.0807%" height="15" fill="rgb(216,20,37)" fg:x="149" fg:w="56"/><text x="0.4647%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (142 samples, 0.20%)</title><rect x="0.0966%" y="149" width="0.2047%" height="15" fill="rgb(206,188,39)" fg:x="67" fg:w="142"/><text x="0.3466%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (142 samples, 0.20%)</title><rect x="0.0966%" y="133" width="0.2047%" height="15" fill="rgb(217,207,13)" fg:x="67" fg:w="142"/><text x="0.3466%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.20%)</title><rect x="0.0966%" y="117" width="0.2047%" height="15" fill="rgb(231,73,38)" fg:x="67" fg:w="142"/><text x="0.3466%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.20%)</title><rect x="0.0966%" y="101" width="0.2047%" height="15" fill="rgb(225,20,46)" fg:x="67" fg:w="142"/><text x="0.3466%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (139 samples, 0.20%)</title><rect x="0.1009%" y="85" width="0.2003%" height="15" fill="rgb(210,31,41)" fg:x="70" fg:w="139"/><text x="0.3509%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.02%)</title><rect x="0.3084%" y="69" width="0.0245%" height="15" fill="rgb(221,200,47)" fg:x="214" fg:w="17"/><text x="0.5584%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (25 samples, 0.04%)</title><rect x="0.3084%" y="85" width="0.0360%" height="15" fill="rgb(226,26,5)" fg:x="214" fg:w="25"/><text x="0.5584%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (7 samples, 0.01%)</title><rect x="0.3344%" y="69" width="0.0101%" height="15" fill="rgb(249,33,26)" fg:x="232" fg:w="7"/><text x="0.5844%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.3344%" y="53" width="0.0101%" height="15" fill="rgb(235,183,28)" fg:x="232" fg:w="7"/><text x="0.5844%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.05%)</title><rect x="0.3012%" y="117" width="0.0504%" height="15" fill="rgb(221,5,38)" fg:x="209" fg:w="35"/><text x="0.5512%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (31 samples, 0.04%)</title><rect x="0.3070%" y="101" width="0.0447%" height="15" fill="rgb(247,18,42)" fg:x="213" fg:w="31"/><text x="0.5570%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (36 samples, 0.05%)</title><rect x="0.3012%" y="149" width="0.0519%" height="15" fill="rgb(241,131,45)" fg:x="209" fg:w="36"/><text x="0.5512%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.05%)</title><rect x="0.3012%" y="133" width="0.0519%" height="15" fill="rgb(249,31,29)" fg:x="209" fg:w="36"/><text x="0.5512%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (482 samples, 0.69%)</title><rect x="0.3531%" y="149" width="0.6947%" height="15" fill="rgb(225,111,53)" fg:x="245" fg:w="482"/><text x="0.6031%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (193 samples, 0.28%)</title><rect x="1.0478%" y="149" width="0.2782%" height="15" fill="rgb(238,160,17)" fg:x="727" fg:w="193"/><text x="1.2978%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.01%)</title><rect x="1.3259%" y="149" width="0.0115%" height="15" fill="rgb(214,148,48)" fg:x="920" fg:w="8"/><text x="1.5759%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (24 samples, 0.03%)</title><rect x="6.0142%" y="133" width="0.0346%" height="15" fill="rgb(232,36,49)" fg:x="4173" fg:w="24"/><text x="6.2642%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.03%)</title><rect x="6.0142%" y="117" width="0.0346%" height="15" fill="rgb(209,103,24)" fg:x="4173" fg:w="24"/><text x="6.2642%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (84 samples, 0.12%)</title><rect x="6.0531%" y="133" width="0.1211%" height="15" fill="rgb(229,88,8)" fg:x="4200" fg:w="84"/><text x="6.3031%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.09%)</title><rect x="6.1742%" y="133" width="0.0922%" height="15" fill="rgb(213,181,19)" fg:x="4284" fg:w="64"/><text x="6.4242%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (51 samples, 0.07%)</title><rect x="6.2664%" y="133" width="0.0735%" height="15" fill="rgb(254,191,54)" fg:x="4348" fg:w="51"/><text x="6.5164%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (494 samples, 0.71%)</title><rect x="6.3399%" y="133" width="0.7120%" height="15" fill="rgb(241,83,37)" fg:x="4399" fg:w="494"/><text x="6.5899%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="7.0533%" y="53" width="0.0144%" height="15" fill="rgb(233,36,39)" fg:x="4894" fg:w="10"/><text x="7.3033%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="7.0533%" y="37" width="0.0144%" height="15" fill="rgb(226,3,54)" fg:x="4894" fg:w="10"/><text x="7.3033%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.02%)</title><rect x="7.0533%" y="69" width="0.0202%" height="15" fill="rgb(245,192,40)" fg:x="4894" fg:w="14"/><text x="7.3033%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="7.0533%" y="85" width="0.0303%" height="15" fill="rgb(238,167,29)" fg:x="4894" fg:w="21"/><text x="7.3033%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="7.0735%" y="69" width="0.0101%" height="15" fill="rgb(232,182,51)" fg:x="4908" fg:w="7"/><text x="7.3235%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.04%)</title><rect x="7.0519%" y="133" width="0.0360%" height="15" fill="rgb(231,60,39)" fg:x="4893" fg:w="25"/><text x="7.3019%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="7.0519%" y="117" width="0.0360%" height="15" fill="rgb(208,69,12)" fg:x="4893" fg:w="25"/><text x="7.3019%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.03%)</title><rect x="7.0533%" y="101" width="0.0346%" height="15" fill="rgb(235,93,37)" fg:x="4894" fg:w="24"/><text x="7.3033%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (100 samples, 0.14%)</title><rect x="7.6831%" y="117" width="0.1441%" height="15" fill="rgb(213,116,39)" fg:x="5331" fg:w="100"/><text x="7.9331%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (34 samples, 0.05%)</title><rect x="7.8661%" y="85" width="0.0490%" height="15" fill="rgb(222,207,29)" fg:x="5458" fg:w="34"/><text x="8.1161%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (42 samples, 0.06%)</title><rect x="7.8661%" y="101" width="0.0605%" height="15" fill="rgb(206,96,30)" fg:x="5458" fg:w="42"/><text x="8.1161%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (8 samples, 0.01%)</title><rect x="7.9151%" y="85" width="0.0115%" height="15" fill="rgb(218,138,4)" fg:x="5492" fg:w="8"/><text x="8.1651%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="7.9151%" y="69" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="5492" fg:w="8"/><text x="8.1651%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="7.9267%" y="101" width="0.0101%" height="15" fill="rgb(239,60,40)" fg:x="5500" fg:w="7"/><text x="8.1767%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (780 samples, 1.12%)</title><rect x="7.0879%" y="133" width="1.1241%" height="15" fill="rgb(206,27,48)" fg:x="4918" fg:w="780"/><text x="7.3379%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (265 samples, 0.38%)</title><rect x="7.8301%" y="117" width="0.3819%" height="15" fill="rgb(225,35,8)" fg:x="5433" fg:w="265"/><text x="8.0801%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (191 samples, 0.28%)</title><rect x="7.9368%" y="101" width="0.2753%" height="15" fill="rgb(250,213,24)" fg:x="5507" fg:w="191"/><text x="8.1868%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="8.2135%" y="133" width="0.0144%" height="15" fill="rgb(247,123,22)" fg:x="5699" fg:w="10"/><text x="8.4635%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (20 samples, 0.03%)</title><rect x="8.2279%" y="133" width="0.0288%" height="15" fill="rgb(231,138,38)" fg:x="5709" fg:w="20"/><text x="8.4779%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (168 samples, 0.24%)</title><rect x="11.1060%" y="117" width="0.2421%" height="15" fill="rgb(231,145,46)" fg:x="7706" fg:w="168"/><text x="11.3560%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (476 samples, 0.69%)</title><rect x="11.3553%" y="117" width="0.6860%" height="15" fill="rgb(251,118,11)" fg:x="7879" fg:w="476"/><text x="11.6053%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (29 samples, 0.04%)</title><rect x="12.0975%" y="101" width="0.0418%" height="15" fill="rgb(217,147,25)" fg:x="8394" fg:w="29"/><text x="12.3475%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,560 samples, 10.90%)</title><rect x="1.3461%" y="149" width="10.8956%" height="15" fill="rgb(247,81,37)" fg:x="934" fg:w="7560"/><text x="1.5961%" y="159.50">rust_qecp`rust_q..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,765 samples, 3.98%)</title><rect x="8.2567%" y="133" width="3.9850%" height="15" fill="rgb(209,12,38)" fg:x="5729" fg:w="2765"/><text x="8.5067%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (139 samples, 0.20%)</title><rect x="12.0413%" y="117" width="0.2003%" height="15" fill="rgb(227,1,9)" fg:x="8355" fg:w="139"/><text x="12.2913%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (71 samples, 0.10%)</title><rect x="12.1393%" y="101" width="0.1023%" height="15" fill="rgb(248,47,43)" fg:x="8423" fg:w="71"/><text x="12.3893%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="12.2561%" y="133" width="0.0144%" height="15" fill="rgb(221,10,30)" fg:x="8504" fg:w="10"/><text x="12.5061%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.14%)</title><rect x="12.2748%" y="133" width="0.1384%" height="15" fill="rgb(210,229,1)" fg:x="8517" fg:w="96"/><text x="12.5248%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="12.6899%" y="117" width="0.0216%" height="15" fill="rgb(222,148,37)" fg:x="8805" fg:w="15"/><text x="12.9399%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="12.7014%" y="101" width="0.0101%" height="15" fill="rgb(234,67,33)" fg:x="8813" fg:w="7"/><text x="12.9514%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="12.7216%" y="117" width="0.0159%" height="15" fill="rgb(247,98,35)" fg:x="8827" fg:w="11"/><text x="12.9716%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="12.7446%" y="85" width="0.0259%" height="15" fill="rgb(247,138,52)" fg:x="8843" fg:w="18"/><text x="12.9946%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.01%)</title><rect x="12.7562%" y="69" width="0.0144%" height="15" fill="rgb(213,79,30)" fg:x="8851" fg:w="10"/><text x="13.0062%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="12.7591%" y="53" width="0.0115%" height="15" fill="rgb(246,177,23)" fg:x="8853" fg:w="8"/><text x="13.0091%" y="63.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.04%)</title><rect x="12.7374%" y="117" width="0.0360%" height="15" fill="rgb(230,62,27)" fg:x="8838" fg:w="25"/><text x="12.9874%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="12.7418%" y="101" width="0.0317%" height="15" fill="rgb(216,154,8)" fg:x="8841" fg:w="22"/><text x="12.9918%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="12.7821%" y="117" width="0.0130%" height="15" fill="rgb(244,35,45)" fg:x="8869" fg:w="9"/><text x="13.0321%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="12.7850%" y="101" width="0.0101%" height="15" fill="rgb(251,115,12)" fg:x="8871" fg:w="7"/><text x="13.0350%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (23 samples, 0.03%)</title><rect x="12.7951%" y="117" width="0.0331%" height="15" fill="rgb(240,54,50)" fg:x="8878" fg:w="23"/><text x="13.0451%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (467 samples, 0.67%)</title><rect x="12.4276%" y="133" width="0.6730%" height="15" fill="rgb(233,84,52)" fg:x="8623" fg:w="467"/><text x="12.6776%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (189 samples, 0.27%)</title><rect x="12.8282%" y="117" width="0.2724%" height="15" fill="rgb(207,117,47)" fg:x="8901" fg:w="189"/><text x="13.0782%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (605 samples, 0.87%)</title><rect x="12.2417%" y="149" width="0.8719%" height="15" fill="rgb(249,43,39)" fg:x="8494" fg:w="605"/><text x="12.4917%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="13.1150%" y="117" width="0.0101%" height="15" fill="rgb(209,38,44)" fg:x="9100" fg:w="7"/><text x="13.3650%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (9 samples, 0.01%)</title><rect x="13.1136%" y="149" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="9099" fg:w="9"/><text x="13.3636%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (9 samples, 0.01%)</title><rect x="13.1136%" y="133" width="0.0130%" height="15" fill="rgb(242,79,21)" fg:x="9099" fg:w="9"/><text x="13.3636%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (24 samples, 0.03%)</title><rect x="13.1266%" y="149" width="0.0346%" height="15" fill="rgb(211,96,35)" fg:x="9108" fg:w="24"/><text x="13.3766%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (19 samples, 0.03%)</title><rect x="13.1338%" y="133" width="0.0274%" height="15" fill="rgb(253,215,40)" fg:x="9113" fg:w="19"/><text x="13.3838%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (12 samples, 0.02%)</title><rect x="13.1439%" y="117" width="0.0173%" height="15" fill="rgb(211,81,21)" fg:x="9120" fg:w="12"/><text x="13.3939%" y="127.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (9,123 samples, 13.15%)</title><rect x="0.0173%" y="261" width="13.1482%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="271.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,123 samples, 13.15%)</title><rect x="0.0173%" y="245" width="13.1482%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="255.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,123 samples, 13.15%)</title><rect x="0.0173%" y="229" width="13.1482%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="239.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,123 samples, 13.15%)</title><rect x="0.0173%" y="213" width="13.1482%" height="15" fill="rgb(244,218,35)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="223.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,123 samples, 13.15%)</title><rect x="0.0173%" y="197" width="13.1482%" height="15" fill="rgb(240,68,47)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="207.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (9,123 samples, 13.15%)</title><rect x="0.0173%" y="181" width="13.1482%" height="15" fill="rgb(210,16,53)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="191.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (9,123 samples, 13.15%)</title><rect x="0.0173%" y="165" width="13.1482%" height="15" fill="rgb(235,124,12)" fg:x="12" fg:w="9123"/><text x="0.2673%" y="175.50">rust_qecp`rust_qecp:..</text></g><g><title>dyld`start (9,136 samples, 13.17%)</title><rect x="0.0000%" y="389" width="13.1669%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="9136"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (9,124 samples, 13.15%)</title><rect x="0.0173%" y="373" width="13.1496%" height="15" fill="rgb(250,166,2)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (9,124 samples, 13.15%)</title><rect x="0.0173%" y="357" width="13.1496%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="367.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (9,124 samples, 13.15%)</title><rect x="0.0173%" y="341" width="13.1496%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="351.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (9,124 samples, 13.15%)</title><rect x="0.0173%" y="325" width="13.1496%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="335.50">rust_qecp`std::sys_c..</text></g><g><title>rust_qecp`rust_qecp::main (9,124 samples, 13.15%)</title><rect x="0.0173%" y="309" width="13.1496%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="319.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (9,124 samples, 13.15%)</title><rect x="0.0173%" y="293" width="13.1496%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="303.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (9,124 samples, 13.15%)</title><rect x="0.0173%" y="277" width="13.1496%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="9124"/><text x="0.2673%" y="287.50">rust_qecp`tokio::run..</text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.02%)</title><rect x="13.1669%" y="389" width="0.0187%" height="15" fill="rgb(233,208,19)" fg:x="9136" fg:w="13"/><text x="13.4169%" y="399.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="13.2073%" y="261" width="0.0144%" height="15" fill="rgb(216,164,2)" fg:x="9164" fg:w="10"/><text x="13.4573%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (9 samples, 0.01%)</title><rect x="13.2087%" y="245" width="0.0130%" height="15" fill="rgb(220,129,5)" fg:x="9165" fg:w="9"/><text x="13.4587%" y="255.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (11 samples, 0.02%)</title><rect x="13.2073%" y="309" width="0.0159%" height="15" fill="rgb(242,17,10)" fg:x="9164" fg:w="11"/><text x="13.4573%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (11 samples, 0.02%)</title><rect x="13.2073%" y="293" width="0.0159%" height="15" fill="rgb(242,107,0)" fg:x="9164" fg:w="11"/><text x="13.4573%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="13.2073%" y="277" width="0.0159%" height="15" fill="rgb(251,28,31)" fg:x="9164" fg:w="11"/><text x="13.4573%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (36 samples, 0.05%)</title><rect x="13.2433%" y="293" width="0.0519%" height="15" fill="rgb(233,223,10)" fg:x="9189" fg:w="36"/><text x="13.4933%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="13.2981%" y="293" width="0.0130%" height="15" fill="rgb(215,21,27)" fg:x="9227" fg:w="9"/><text x="13.5481%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="13.3010%" y="277" width="0.0101%" height="15" fill="rgb(232,23,21)" fg:x="9229" fg:w="7"/><text x="13.5510%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="13.3110%" y="293" width="0.0115%" height="15" fill="rgb(244,5,23)" fg:x="9236" fg:w="8"/><text x="13.5610%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.08%)</title><rect x="13.3384%" y="293" width="0.0793%" height="15" fill="rgb(226,81,46)" fg:x="9255" fg:w="55"/><text x="13.5884%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (14 samples, 0.02%)</title><rect x="13.4177%" y="293" width="0.0202%" height="15" fill="rgb(247,70,30)" fg:x="9310" fg:w="14"/><text x="13.6677%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="13.4681%" y="293" width="0.0187%" height="15" fill="rgb(212,68,19)" fg:x="9345" fg:w="13"/><text x="13.7181%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (7 samples, 0.01%)</title><rect x="13.4869%" y="293" width="0.0101%" height="15" fill="rgb(240,187,13)" fg:x="9358" fg:w="7"/><text x="13.7369%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="13.9063%" y="245" width="0.0202%" height="15" fill="rgb(223,113,26)" fg:x="9649" fg:w="14"/><text x="14.1563%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="13.9063%" y="229" width="0.0202%" height="15" fill="rgb(206,192,2)" fg:x="9649" fg:w="14"/><text x="14.1563%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.02%)</title><rect x="13.9048%" y="277" width="0.0231%" height="15" fill="rgb(241,108,4)" fg:x="9648" fg:w="16"/><text x="14.1548%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="13.9048%" y="261" width="0.0231%" height="15" fill="rgb(247,173,49)" fg:x="9648" fg:w="16"/><text x="14.1548%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="13.9322%" y="277" width="0.0159%" height="15" fill="rgb(224,114,35)" fg:x="9667" fg:w="11"/><text x="14.1822%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="13.9380%" y="261" width="0.0101%" height="15" fill="rgb(245,159,27)" fg:x="9671" fg:w="7"/><text x="14.1880%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (313 samples, 0.45%)</title><rect x="13.4984%" y="293" width="0.4511%" height="15" fill="rgb(245,172,44)" fg:x="9366" fg:w="313"/><text x="13.7484%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.01%)</title><rect x="22.4354%" y="277" width="0.0101%" height="15" fill="rgb(236,23,11)" fg:x="15567" fg:w="7"/><text x="22.6854%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="22.4455%" y="277" width="0.0303%" height="15" fill="rgb(205,117,38)" fg:x="15574" fg:w="21"/><text x="22.6955%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (47 samples, 0.07%)</title><rect x="22.4772%" y="277" width="0.0677%" height="15" fill="rgb(237,72,25)" fg:x="15596" fg:w="47"/><text x="22.7272%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.11%)</title><rect x="22.5449%" y="277" width="0.1052%" height="15" fill="rgb(244,70,9)" fg:x="15643" fg:w="73"/><text x="22.7949%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (365 samples, 0.53%)</title><rect x="22.6544%" y="261" width="0.5260%" height="15" fill="rgb(217,125,39)" fg:x="15719" fg:w="365"/><text x="22.9044%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (370 samples, 0.53%)</title><rect x="22.6501%" y="277" width="0.5332%" height="15" fill="rgb(235,36,10)" fg:x="15716" fg:w="370"/><text x="22.9001%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.02%)</title><rect x="23.1834%" y="277" width="0.0216%" height="15" fill="rgb(251,123,47)" fg:x="16086" fg:w="15"/><text x="23.4334%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (62 samples, 0.09%)</title><rect x="23.2107%" y="277" width="0.0894%" height="15" fill="rgb(221,13,13)" fg:x="16105" fg:w="62"/><text x="23.4607%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="23.3001%" y="277" width="0.0187%" height="15" fill="rgb(238,131,9)" fg:x="16167" fg:w="13"/><text x="23.5501%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (14 samples, 0.02%)</title><rect x="23.3188%" y="277" width="0.0202%" height="15" fill="rgb(211,50,8)" fg:x="16180" fg:w="14"/><text x="23.5688%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (37 samples, 0.05%)</title><rect x="23.3404%" y="277" width="0.0533%" height="15" fill="rgb(245,182,24)" fg:x="16195" fg:w="37"/><text x="23.5904%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.06%)</title><rect x="23.3938%" y="277" width="0.0562%" height="15" fill="rgb(242,14,37)" fg:x="16232" fg:w="39"/><text x="23.6438%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (31 samples, 0.04%)</title><rect x="23.4500%" y="277" width="0.0447%" height="15" fill="rgb(246,228,12)" fg:x="16271" fg:w="31"/><text x="23.7000%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="23.4947%" y="277" width="0.0115%" height="15" fill="rgb(213,55,15)" fg:x="16302" fg:w="8"/><text x="23.7447%" y="287.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="23.5062%" y="277" width="0.0115%" height="15" fill="rgb(209,9,3)" fg:x="16310" fg:w="8"/><text x="23.7562%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (8 samples, 0.01%)</title><rect x="23.6835%" y="197" width="0.0115%" height="15" fill="rgb(230,59,30)" fg:x="16433" fg:w="8"/><text x="23.9335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (28 samples, 0.04%)</title><rect x="23.6662%" y="213" width="0.0404%" height="15" fill="rgb(209,121,21)" fg:x="16421" fg:w="28"/><text x="23.9162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (142 samples, 0.20%)</title><rect x="23.6460%" y="229" width="0.2047%" height="15" fill="rgb(220,109,13)" fg:x="16407" fg:w="142"/><text x="23.8960%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (100 samples, 0.14%)</title><rect x="23.7065%" y="213" width="0.1441%" height="15" fill="rgb(232,18,1)" fg:x="16449" fg:w="100"/><text x="23.9565%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (234 samples, 0.34%)</title><rect x="23.5220%" y="277" width="0.3372%" height="15" fill="rgb(215,41,42)" fg:x="16321" fg:w="234"/><text x="23.7720%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (154 samples, 0.22%)</title><rect x="23.6373%" y="261" width="0.2219%" height="15" fill="rgb(224,123,36)" fg:x="16401" fg:w="154"/><text x="23.8873%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (149 samples, 0.21%)</title><rect x="23.6445%" y="245" width="0.2147%" height="15" fill="rgb(240,125,3)" fg:x="16406" fg:w="149"/><text x="23.8945%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (15 samples, 0.02%)</title><rect x="23.9659%" y="261" width="0.0216%" height="15" fill="rgb(205,98,50)" fg:x="16629" fg:w="15"/><text x="24.2159%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (64 samples, 0.09%)</title><rect x="24.3435%" y="245" width="0.0922%" height="15" fill="rgb(205,185,37)" fg:x="16891" fg:w="64"/><text x="24.5935%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="24.4358%" y="245" width="0.0173%" height="15" fill="rgb(238,207,15)" fg:x="16955" fg:w="12"/><text x="24.6858%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (48 samples, 0.07%)</title><rect x="24.4531%" y="245" width="0.0692%" height="15" fill="rgb(213,199,42)" fg:x="16967" fg:w="48"/><text x="24.7031%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (99 samples, 0.14%)</title><rect x="24.5222%" y="245" width="0.1427%" height="15" fill="rgb(235,201,11)" fg:x="17015" fg:w="99"/><text x="24.7722%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (68 samples, 0.10%)</title><rect x="24.5669%" y="229" width="0.0980%" height="15" fill="rgb(207,46,11)" fg:x="17046" fg:w="68"/><text x="24.8169%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (473 samples, 0.68%)</title><rect x="23.9875%" y="261" width="0.6817%" height="15" fill="rgb(241,35,35)" fg:x="16644" fg:w="473"/><text x="24.2375%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (7 samples, 0.01%)</title><rect x="24.8552%" y="245" width="0.0101%" height="15" fill="rgb(243,32,47)" fg:x="17246" fg:w="7"/><text x="25.1052%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (96 samples, 0.14%)</title><rect x="24.8652%" y="245" width="0.1384%" height="15" fill="rgb(247,202,23)" fg:x="17253" fg:w="96"/><text x="25.1152%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (30 samples, 0.04%)</title><rect x="25.0036%" y="245" width="0.0432%" height="15" fill="rgb(219,102,11)" fg:x="17349" fg:w="30"/><text x="25.2536%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (23 samples, 0.03%)</title><rect x="25.0468%" y="245" width="0.0331%" height="15" fill="rgb(243,110,44)" fg:x="17379" fg:w="23"/><text x="25.2968%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (204 samples, 0.29%)</title><rect x="25.0800%" y="245" width="0.2940%" height="15" fill="rgb(222,74,54)" fg:x="17402" fg:w="204"/><text x="25.3300%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (248 samples, 0.36%)</title><rect x="25.3754%" y="245" width="0.3574%" height="15" fill="rgb(216,99,12)" fg:x="17607" fg:w="248"/><text x="25.6254%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (247 samples, 0.36%)</title><rect x="25.3769%" y="229" width="0.3560%" height="15" fill="rgb(226,22,26)" fg:x="17608" fg:w="247"/><text x="25.6269%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (778 samples, 1.12%)</title><rect x="24.6750%" y="261" width="1.1213%" height="15" fill="rgb(217,163,10)" fg:x="17121" fg:w="778"/><text x="24.9250%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (44 samples, 0.06%)</title><rect x="25.7329%" y="245" width="0.0634%" height="15" fill="rgb(213,25,53)" fg:x="17855" fg:w="44"/><text x="25.9829%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (44 samples, 0.06%)</title><rect x="25.7329%" y="229" width="0.0634%" height="15" fill="rgb(252,105,26)" fg:x="17855" fg:w="44"/><text x="25.9829%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (20 samples, 0.03%)</title><rect x="26.0240%" y="229" width="0.0288%" height="15" fill="rgb(220,39,43)" fg:x="18057" fg:w="20"/><text x="26.2740%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (109 samples, 0.16%)</title><rect x="26.0528%" y="229" width="0.1571%" height="15" fill="rgb(229,68,48)" fg:x="18077" fg:w="109"/><text x="26.3028%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (62 samples, 0.09%)</title><rect x="26.2099%" y="229" width="0.0894%" height="15" fill="rgb(252,8,32)" fg:x="18186" fg:w="62"/><text x="26.4599%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (36 samples, 0.05%)</title><rect x="26.2993%" y="229" width="0.0519%" height="15" fill="rgb(223,20,43)" fg:x="18248" fg:w="36"/><text x="26.5493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (67 samples, 0.10%)</title><rect x="26.3511%" y="229" width="0.0966%" height="15" fill="rgb(229,81,49)" fg:x="18284" fg:w="67"/><text x="26.6011%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.06%)</title><rect x="26.3900%" y="213" width="0.0576%" height="15" fill="rgb(236,28,36)" fg:x="18311" fg:w="40"/><text x="26.6400%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (76 samples, 0.11%)</title><rect x="26.4592%" y="213" width="0.1095%" height="15" fill="rgb(249,185,26)" fg:x="18359" fg:w="76"/><text x="26.7092%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (479 samples, 0.69%)</title><rect x="25.8799%" y="245" width="0.6903%" height="15" fill="rgb(249,174,33)" fg:x="17957" fg:w="479"/><text x="26.1299%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (85 samples, 0.12%)</title><rect x="26.4477%" y="229" width="0.1225%" height="15" fill="rgb(233,201,37)" fg:x="18351" fg:w="85"/><text x="26.6977%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (539 samples, 0.78%)</title><rect x="25.7963%" y="261" width="0.7768%" height="15" fill="rgb(221,78,26)" fg:x="17899" fg:w="539"/><text x="26.0463%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (40 samples, 0.06%)</title><rect x="26.5731%" y="261" width="0.0576%" height="15" fill="rgb(250,127,30)" fg:x="18438" fg:w="40"/><text x="26.8231%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (185 samples, 0.27%)</title><rect x="26.6307%" y="261" width="0.2666%" height="15" fill="rgb(230,49,44)" fg:x="18478" fg:w="185"/><text x="26.8807%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (97 samples, 0.14%)</title><rect x="26.7576%" y="245" width="0.1398%" height="15" fill="rgb(229,67,23)" fg:x="18566" fg:w="97"/><text x="27.0076%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (97 samples, 0.14%)</title><rect x="26.7576%" y="229" width="0.1398%" height="15" fill="rgb(249,83,47)" fg:x="18566" fg:w="97"/><text x="27.0076%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (37 samples, 0.05%)</title><rect x="26.8974%" y="261" width="0.0533%" height="15" fill="rgb(215,43,3)" fg:x="18663" fg:w="37"/><text x="27.1474%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (43 samples, 0.06%)</title><rect x="26.9665%" y="261" width="0.0620%" height="15" fill="rgb(238,154,13)" fg:x="18711" fg:w="43"/><text x="27.2165%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.04%)</title><rect x="27.0285%" y="261" width="0.0404%" height="15" fill="rgb(219,56,2)" fg:x="18754" fg:w="28"/><text x="27.2785%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.01%)</title><rect x="27.0689%" y="261" width="0.0144%" height="15" fill="rgb(233,0,4)" fg:x="18782" fg:w="10"/><text x="27.3189%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (64 samples, 0.09%)</title><rect x="27.2187%" y="229" width="0.0922%" height="15" fill="rgb(235,30,7)" fg:x="18886" fg:w="64"/><text x="27.4687%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (144 samples, 0.21%)</title><rect x="27.1121%" y="245" width="0.2075%" height="15" fill="rgb(250,79,13)" fg:x="18812" fg:w="144"/><text x="27.3621%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (87 samples, 0.13%)</title><rect x="27.3283%" y="245" width="0.1254%" height="15" fill="rgb(211,146,34)" fg:x="18962" fg:w="87"/><text x="27.5783%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.01%)</title><rect x="27.4393%" y="229" width="0.0144%" height="15" fill="rgb(228,22,38)" fg:x="19039" fg:w="10"/><text x="27.6893%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="27.4393%" y="213" width="0.0144%" height="15" fill="rgb(235,168,5)" fg:x="19039" fg:w="10"/><text x="27.6893%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,501 samples, 3.60%)</title><rect x="23.8607%" y="277" width="3.6045%" height="15" fill="rgb(221,155,16)" fg:x="16556" fg:w="2501"/><text x="24.1107%" y="287.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (259 samples, 0.37%)</title><rect x="27.0919%" y="261" width="0.3733%" height="15" fill="rgb(215,215,53)" fg:x="18798" fg:w="259"/><text x="27.3419%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="27.4537%" y="245" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="19049" fg:w="8"/><text x="27.7037%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (253 samples, 0.36%)</title><rect x="27.4652%" y="277" width="0.3646%" height="15" fill="rgb(234,103,6)" fg:x="19057" fg:w="253"/><text x="27.7152%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (226 samples, 0.33%)</title><rect x="27.5041%" y="261" width="0.3257%" height="15" fill="rgb(227,97,0)" fg:x="19084" fg:w="226"/><text x="27.7541%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (182 samples, 0.26%)</title><rect x="27.5675%" y="245" width="0.2623%" height="15" fill="rgb(234,150,53)" fg:x="19128" fg:w="182"/><text x="27.8175%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (113 samples, 0.16%)</title><rect x="27.6670%" y="229" width="0.1629%" height="15" fill="rgb(228,201,54)" fg:x="19197" fg:w="113"/><text x="27.9170%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (38 samples, 0.05%)</title><rect x="27.7751%" y="213" width="0.0548%" height="15" fill="rgb(222,22,37)" fg:x="19272" fg:w="38"/><text x="28.0251%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="27.8197%" y="197" width="0.0101%" height="15" fill="rgb(237,53,32)" fg:x="19303" fg:w="7"/><text x="28.0697%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (35 samples, 0.05%)</title><rect x="28.5375%" y="261" width="0.0504%" height="15" fill="rgb(233,25,53)" fg:x="19801" fg:w="35"/><text x="28.7875%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (72 samples, 0.10%)</title><rect x="28.5879%" y="261" width="0.1038%" height="15" fill="rgb(210,40,34)" fg:x="19836" fg:w="72"/><text x="28.8379%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="28.8372%" y="229" width="0.0115%" height="15" fill="rgb(241,220,44)" fg:x="20009" fg:w="8"/><text x="29.0872%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (42 samples, 0.06%)</title><rect x="28.8488%" y="229" width="0.0605%" height="15" fill="rgb(235,28,35)" fg:x="20017" fg:w="42"/><text x="29.0988%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (906 samples, 1.31%)</title><rect x="27.8313%" y="277" width="1.3057%" height="15" fill="rgb(210,56,17)" fg:x="19311" fg:w="906"/><text x="28.0813%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (309 samples, 0.45%)</title><rect x="28.6917%" y="261" width="0.4453%" height="15" fill="rgb(224,130,29)" fg:x="19908" fg:w="309"/><text x="28.9417%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (278 samples, 0.40%)</title><rect x="28.7363%" y="245" width="0.4007%" height="15" fill="rgb(235,212,8)" fg:x="19939" fg:w="278"/><text x="28.9863%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (157 samples, 0.23%)</title><rect x="28.9107%" y="229" width="0.2263%" height="15" fill="rgb(223,33,50)" fg:x="20060" fg:w="157"/><text x="29.1607%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,446 samples, 2.08%)</title><rect x="29.1370%" y="277" width="2.0840%" height="15" fill="rgb(219,149,13)" fg:x="20217" fg:w="1446"/><text x="29.3870%" y="287.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (18 samples, 0.03%)</title><rect x="31.2210%" y="277" width="0.0259%" height="15" fill="rgb(250,156,29)" fg:x="21663" fg:w="18"/><text x="31.4710%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="31.3493%" y="261" width="0.0144%" height="15" fill="rgb(216,193,19)" fg:x="21752" fg:w="10"/><text x="31.5993%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="31.3507%" y="245" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="21753" fg:w="9"/><text x="31.6007%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (128 samples, 0.18%)</title><rect x="31.3694%" y="261" width="0.1845%" height="15" fill="rgb(241,47,5)" fg:x="21766" fg:w="128"/><text x="31.6194%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (248 samples, 0.36%)</title><rect x="31.7384%" y="245" width="0.3574%" height="15" fill="rgb(233,42,35)" fg:x="22022" fg:w="248"/><text x="31.9884%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (786 samples, 1.13%)</title><rect x="31.2469%" y="277" width="1.1328%" height="15" fill="rgb(231,13,6)" fg:x="21681" fg:w="786"/><text x="31.4969%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (573 samples, 0.83%)</title><rect x="31.5539%" y="261" width="0.8258%" height="15" fill="rgb(207,181,40)" fg:x="21894" fg:w="573"/><text x="31.8039%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (197 samples, 0.28%)</title><rect x="32.0958%" y="245" width="0.2839%" height="15" fill="rgb(254,173,49)" fg:x="22270" fg:w="197"/><text x="32.3458%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (7 samples, 0.01%)</title><rect x="32.3797%" y="277" width="0.0101%" height="15" fill="rgb(221,1,38)" fg:x="22467" fg:w="7"/><text x="32.6297%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (7 samples, 0.01%)</title><rect x="32.3913%" y="277" width="0.0101%" height="15" fill="rgb(206,124,46)" fg:x="22475" fg:w="7"/><text x="32.6413%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (145 samples, 0.21%)</title><rect x="32.4013%" y="277" width="0.2090%" height="15" fill="rgb(249,21,11)" fg:x="22482" fg:w="145"/><text x="32.6513%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,885 samples, 5.60%)</title><rect x="35.3645%" y="261" width="5.5991%" height="15" fill="rgb(222,201,40)" fg:x="24538" fg:w="3885"/><text x="35.6145%" y="271.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.04%)</title><rect x="40.9665%" y="213" width="0.0432%" height="15" fill="rgb(235,61,29)" fg:x="28425" fg:w="30"/><text x="41.2165%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="40.9737%" y="197" width="0.0360%" height="15" fill="rgb(219,207,3)" fg:x="28430" fg:w="25"/><text x="41.2237%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (32 samples, 0.05%)</title><rect x="40.9665%" y="229" width="0.0461%" height="15" fill="rgb(222,56,46)" fg:x="28425" fg:w="32"/><text x="41.2165%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 0.05%)</title><rect x="40.9650%" y="261" width="0.0490%" height="15" fill="rgb(239,76,54)" fg:x="28424" fg:w="34"/><text x="41.2150%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (34 samples, 0.05%)</title><rect x="40.9650%" y="245" width="0.0490%" height="15" fill="rgb(231,124,27)" fg:x="28424" fg:w="34"/><text x="41.2150%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,488 samples, 5.03%)</title><rect x="41.0140%" y="261" width="5.0270%" height="15" fill="rgb(249,195,6)" fg:x="28458" fg:w="3488"/><text x="41.2640%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (670 samples, 0.97%)</title><rect x="46.0410%" y="261" width="0.9656%" height="15" fill="rgb(237,174,47)" fg:x="31946" fg:w="670"/><text x="46.2910%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (141 samples, 0.20%)</title><rect x="47.0599%" y="229" width="0.2032%" height="15" fill="rgb(206,201,31)" fg:x="32653" fg:w="141"/><text x="47.3099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (143 samples, 0.21%)</title><rect x="47.0585%" y="245" width="0.2061%" height="15" fill="rgb(231,57,52)" fg:x="32652" fg:w="143"/><text x="47.3085%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (139 samples, 0.20%)</title><rect x="47.2761%" y="245" width="0.2003%" height="15" fill="rgb(248,177,22)" fg:x="32803" fg:w="139"/><text x="47.5261%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (257 samples, 0.37%)</title><rect x="47.6696%" y="229" width="0.3704%" height="15" fill="rgb(215,211,37)" fg:x="33076" fg:w="257"/><text x="47.9196%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (932 samples, 1.34%)</title><rect x="47.0066%" y="261" width="1.3432%" height="15" fill="rgb(241,128,51)" fg:x="32616" fg:w="932"/><text x="47.2566%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (606 samples, 0.87%)</title><rect x="47.4764%" y="245" width="0.8734%" height="15" fill="rgb(227,165,31)" fg:x="32942" fg:w="606"/><text x="47.7264%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (215 samples, 0.31%)</title><rect x="48.0400%" y="229" width="0.3099%" height="15" fill="rgb(228,167,24)" fg:x="33333" fg:w="215"/><text x="48.2900%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,086 samples, 18.86%)</title><rect x="32.6103%" y="277" width="18.8597%" height="15" fill="rgb(228,143,12)" fg:x="22627" fg:w="13086"/><text x="32.8603%" y="287.50">rust_qecp`rust_qecp::ftqec::P..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,165 samples, 3.12%)</title><rect x="48.3498%" y="261" width="3.1202%" height="15" fill="rgb(249,149,8)" fg:x="33548" fg:w="2165"/><text x="48.5998%" y="271.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (21 samples, 0.03%)</title><rect x="51.4398%" y="245" width="0.0303%" height="15" fill="rgb(243,35,44)" fg:x="35692" fg:w="21"/><text x="51.6898%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="51.4412%" y="229" width="0.0288%" height="15" fill="rgb(246,89,9)" fg:x="35693" fg:w="20"/><text x="51.6912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="51.4427%" y="213" width="0.0274%" height="15" fill="rgb(233,213,13)" fg:x="35694" fg:w="19"/><text x="51.6927%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.03%)</title><rect x="51.4441%" y="197" width="0.0259%" height="15" fill="rgb(233,141,41)" fg:x="35695" fg:w="18"/><text x="51.6941%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="51.4484%" y="181" width="0.0216%" height="15" fill="rgb(239,167,4)" fg:x="35698" fg:w="15"/><text x="51.6984%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 0.03%)</title><rect x="53.0957%" y="261" width="0.0259%" height="15" fill="rgb(209,217,16)" fg:x="36841" fg:w="18"/><text x="53.3457%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (30 samples, 0.04%)</title><rect x="53.1217%" y="245" width="0.0432%" height="15" fill="rgb(219,88,35)" fg:x="36859" fg:w="30"/><text x="53.3717%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="53.1649%" y="245" width="0.0173%" height="15" fill="rgb(220,193,23)" fg:x="36889" fg:w="12"/><text x="53.4149%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.02%)</title><rect x="53.1822%" y="245" width="0.0231%" height="15" fill="rgb(230,90,52)" fg:x="36901" fg:w="16"/><text x="53.4322%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.04%)</title><rect x="53.2053%" y="245" width="0.0375%" height="15" fill="rgb(252,106,19)" fg:x="36917" fg:w="26"/><text x="53.4553%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="53.2427%" y="245" width="0.0274%" height="15" fill="rgb(206,74,20)" fg:x="36943" fg:w="19"/><text x="53.4927%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.03%)</title><rect x="53.2701%" y="245" width="0.0317%" height="15" fill="rgb(230,138,44)" fg:x="36962" fg:w="22"/><text x="53.5201%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.01%)</title><rect x="53.5209%" y="213" width="0.0144%" height="15" fill="rgb(235,182,43)" fg:x="37136" fg:w="10"/><text x="53.7709%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.06%)</title><rect x="53.7803%" y="181" width="0.0649%" height="15" fill="rgb(242,16,51)" fg:x="37316" fg:w="45"/><text x="54.0303%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (184 samples, 0.27%)</title><rect x="53.5872%" y="197" width="0.2652%" height="15" fill="rgb(248,9,4)" fg:x="37182" fg:w="184"/><text x="53.8372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (359 samples, 0.52%)</title><rect x="53.3580%" y="229" width="0.5174%" height="15" fill="rgb(210,31,22)" fg:x="37023" fg:w="359"/><text x="53.6080%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (236 samples, 0.34%)</title><rect x="53.5353%" y="213" width="0.3401%" height="15" fill="rgb(239,54,39)" fg:x="37146" fg:w="236"/><text x="53.7853%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="53.8524%" y="197" width="0.0231%" height="15" fill="rgb(230,99,41)" fg:x="37366" fg:w="16"/><text x="54.1024%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.03%)</title><rect x="53.8754%" y="229" width="0.0317%" height="15" fill="rgb(253,106,12)" fg:x="37382" fg:w="22"/><text x="54.1254%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (137 samples, 0.20%)</title><rect x="53.9071%" y="229" width="0.1974%" height="15" fill="rgb(213,46,41)" fg:x="37404" fg:w="137"/><text x="54.1571%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (66 samples, 0.10%)</title><rect x="54.0095%" y="213" width="0.0951%" height="15" fill="rgb(215,133,35)" fg:x="37475" fg:w="66"/><text x="54.2595%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="54.1046%" y="229" width="0.0187%" height="15" fill="rgb(213,28,5)" fg:x="37541" fg:w="13"/><text x="54.3546%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (46 samples, 0.07%)</title><rect x="54.1233%" y="229" width="0.0663%" height="15" fill="rgb(215,77,49)" fg:x="37554" fg:w="46"/><text x="54.3733%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="54.1896%" y="229" width="0.0130%" height="15" fill="rgb(248,100,22)" fg:x="37600" fg:w="9"/><text x="54.4396%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="54.2026%" y="229" width="0.0101%" height="15" fill="rgb(208,67,9)" fg:x="37609" fg:w="7"/><text x="54.4526%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (619 samples, 0.89%)</title><rect x="54.2415%" y="213" width="0.8921%" height="15" fill="rgb(219,133,21)" fg:x="37636" fg:w="619"/><text x="54.4915%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="55.1336%" y="213" width="0.0159%" height="15" fill="rgb(246,46,29)" fg:x="38255" fg:w="11"/><text x="55.3836%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (11 samples, 0.02%)</title><rect x="55.1495%" y="213" width="0.0159%" height="15" fill="rgb(246,185,52)" fg:x="38266" fg:w="11"/><text x="55.3995%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="55.1653%" y="213" width="0.0115%" height="15" fill="rgb(252,136,11)" fg:x="38277" fg:w="8"/><text x="55.4153%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.06%)</title><rect x="55.2215%" y="197" width="0.0562%" height="15" fill="rgb(219,138,53)" fg:x="38316" fg:w="39"/><text x="55.4715%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (89 samples, 0.13%)</title><rect x="55.2777%" y="197" width="0.1283%" height="15" fill="rgb(211,51,23)" fg:x="38355" fg:w="89"/><text x="55.5277%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (169 samples, 0.24%)</title><rect x="55.1768%" y="213" width="0.2436%" height="15" fill="rgb(247,221,28)" fg:x="38285" fg:w="169"/><text x="55.4268%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="55.4060%" y="197" width="0.0144%" height="15" fill="rgb(251,222,45)" fg:x="38444" fg:w="10"/><text x="55.6560%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="55.4233%" y="213" width="0.0173%" height="15" fill="rgb(217,162,53)" fg:x="38456" fg:w="12"/><text x="55.6733%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.04%)</title><rect x="55.8066%" y="149" width="0.0418%" height="15" fill="rgb(229,93,14)" fg:x="38722" fg:w="29"/><text x="56.0566%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (163 samples, 0.23%)</title><rect x="55.6524%" y="165" width="0.2349%" height="15" fill="rgb(209,67,49)" fg:x="38615" fg:w="163"/><text x="55.9024%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (27 samples, 0.04%)</title><rect x="55.8484%" y="149" width="0.0389%" height="15" fill="rgb(213,87,29)" fg:x="38751" fg:w="27"/><text x="56.0984%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (260 samples, 0.37%)</title><rect x="55.5371%" y="197" width="0.3747%" height="15" fill="rgb(205,151,52)" fg:x="38535" fg:w="260"/><text x="55.7871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (205 samples, 0.30%)</title><rect x="55.6164%" y="181" width="0.2954%" height="15" fill="rgb(253,215,39)" fg:x="38590" fg:w="205"/><text x="55.8664%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.02%)</title><rect x="55.8874%" y="165" width="0.0245%" height="15" fill="rgb(221,220,41)" fg:x="38778" fg:w="17"/><text x="56.1374%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="55.9119%" y="197" width="0.0173%" height="15" fill="rgb(218,133,21)" fg:x="38795" fg:w="12"/><text x="56.1619%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,196 samples, 1.72%)</title><rect x="54.2127%" y="229" width="1.7237%" height="15" fill="rgb(221,193,43)" fg:x="37616" fg:w="1196"/><text x="54.4627%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (344 samples, 0.50%)</title><rect x="55.4406%" y="213" width="0.4958%" height="15" fill="rgb(240,128,52)" fg:x="38468" fg:w="344"/><text x="55.6906%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.05%)</title><rect x="56.0286%" y="213" width="0.0533%" height="15" fill="rgb(253,114,12)" fg:x="38876" fg:w="37"/><text x="56.2786%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (82 samples, 0.12%)</title><rect x="56.0819%" y="213" width="0.1182%" height="15" fill="rgb(215,223,47)" fg:x="38913" fg:w="82"/><text x="56.3319%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (237 samples, 0.34%)</title><rect x="55.9364%" y="229" width="0.3416%" height="15" fill="rgb(248,225,23)" fg:x="38812" fg:w="237"/><text x="56.1864%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (54 samples, 0.08%)</title><rect x="56.2001%" y="213" width="0.0778%" height="15" fill="rgb(250,108,0)" fg:x="38995" fg:w="54"/><text x="56.4501%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.02%)</title><rect x="56.2779%" y="229" width="0.0245%" height="15" fill="rgb(228,208,7)" fg:x="39049" fg:w="17"/><text x="56.5279%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,092 samples, 3.02%)</title><rect x="53.3076%" y="245" width="3.0150%" height="15" fill="rgb(244,45,10)" fg:x="36988" fg:w="2092"/><text x="53.5576%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="56.3024%" y="229" width="0.0202%" height="15" fill="rgb(207,125,25)" fg:x="39066" fg:w="14"/><text x="56.5524%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10 samples, 0.01%)</title><rect x="56.3226%" y="245" width="0.0144%" height="15" fill="rgb(210,195,18)" fg:x="39080" fg:w="10"/><text x="56.5726%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (17 samples, 0.02%)</title><rect x="56.3370%" y="245" width="0.0245%" height="15" fill="rgb(249,80,12)" fg:x="39090" fg:w="17"/><text x="56.5870%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.02%)</title><rect x="56.3615%" y="245" width="0.0231%" height="15" fill="rgb(221,65,9)" fg:x="39107" fg:w="16"/><text x="56.6115%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (15 samples, 0.02%)</title><rect x="56.3846%" y="245" width="0.0216%" height="15" fill="rgb(235,49,36)" fg:x="39123" fg:w="15"/><text x="56.6346%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.02%)</title><rect x="56.4062%" y="245" width="0.0202%" height="15" fill="rgb(225,32,20)" fg:x="39138" fg:w="14"/><text x="56.6562%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,302 samples, 3.32%)</title><rect x="53.1217%" y="261" width="3.3177%" height="15" fill="rgb(215,141,46)" fg:x="36859" fg:w="2302"/><text x="53.3717%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (7 samples, 0.01%)</title><rect x="56.4293%" y="245" width="0.0101%" height="15" fill="rgb(250,160,47)" fg:x="39154" fg:w="7"/><text x="56.6793%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="56.6180%" y="245" width="0.0115%" height="15" fill="rgb(216,222,40)" fg:x="39285" fg:w="8"/><text x="56.8680%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (40 samples, 0.06%)</title><rect x="56.6296%" y="245" width="0.0576%" height="15" fill="rgb(234,217,39)" fg:x="39293" fg:w="40"/><text x="56.8796%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.01%)</title><rect x="56.6872%" y="245" width="0.0144%" height="15" fill="rgb(207,178,40)" fg:x="39333" fg:w="10"/><text x="56.9372%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (36 samples, 0.05%)</title><rect x="56.7016%" y="245" width="0.0519%" height="15" fill="rgb(221,136,13)" fg:x="39343" fg:w="36"/><text x="56.9516%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="56.7535%" y="245" width="0.0101%" height="15" fill="rgb(249,199,10)" fg:x="39379" fg:w="7"/><text x="57.0035%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (13 samples, 0.02%)</title><rect x="56.7636%" y="245" width="0.0187%" height="15" fill="rgb(249,222,13)" fg:x="39386" fg:w="13"/><text x="57.0136%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.04%)</title><rect x="57.0893%" y="181" width="0.0404%" height="15" fill="rgb(244,185,38)" fg:x="39612" fg:w="28"/><text x="57.3393%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (121 samples, 0.17%)</title><rect x="56.9611%" y="197" width="0.1744%" height="15" fill="rgb(236,202,9)" fg:x="39523" fg:w="121"/><text x="57.2111%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (218 samples, 0.31%)</title><rect x="56.8313%" y="229" width="0.3142%" height="15" fill="rgb(250,229,37)" fg:x="39433" fg:w="218"/><text x="57.0813%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (156 samples, 0.22%)</title><rect x="56.9207%" y="213" width="0.2248%" height="15" fill="rgb(206,174,23)" fg:x="39495" fg:w="156"/><text x="57.1707%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="57.1354%" y="197" width="0.0101%" height="15" fill="rgb(211,33,43)" fg:x="39644" fg:w="7"/><text x="57.3854%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="57.1455%" y="229" width="0.0187%" height="15" fill="rgb(245,58,50)" fg:x="39651" fg:w="13"/><text x="57.3955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="57.1643%" y="229" width="0.0173%" height="15" fill="rgb(244,68,36)" fg:x="39664" fg:w="12"/><text x="57.4143%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.03%)</title><rect x="57.1859%" y="229" width="0.0317%" height="15" fill="rgb(232,229,15)" fg:x="39679" fg:w="22"/><text x="57.4359%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (28 samples, 0.04%)</title><rect x="57.3934%" y="213" width="0.0404%" height="15" fill="rgb(254,30,23)" fg:x="39823" fg:w="28"/><text x="57.6434%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (10 samples, 0.01%)</title><rect x="57.5217%" y="197" width="0.0144%" height="15" fill="rgb(235,160,14)" fg:x="39912" fg:w="10"/><text x="57.7717%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (14 samples, 0.02%)</title><rect x="57.5361%" y="197" width="0.0202%" height="15" fill="rgb(212,155,44)" fg:x="39922" fg:w="14"/><text x="57.7861%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.04%)</title><rect x="57.5563%" y="197" width="0.0432%" height="15" fill="rgb(226,2,50)" fg:x="39936" fg:w="30"/><text x="57.8063%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (289 samples, 0.42%)</title><rect x="57.6010%" y="197" width="0.4165%" height="15" fill="rgb(234,177,6)" fg:x="39967" fg:w="289"/><text x="57.8510%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (25 samples, 0.04%)</title><rect x="58.1212%" y="181" width="0.0360%" height="15" fill="rgb(217,24,9)" fg:x="40328" fg:w="25"/><text x="58.3712%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (146 samples, 0.21%)</title><rect x="58.1573%" y="181" width="0.2104%" height="15" fill="rgb(220,13,46)" fg:x="40353" fg:w="146"/><text x="58.4073%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (44 samples, 0.06%)</title><rect x="58.5046%" y="149" width="0.0634%" height="15" fill="rgb(239,221,27)" fg:x="40594" fg:w="44"/><text x="58.7546%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (131 samples, 0.19%)</title><rect x="58.3951%" y="165" width="0.1888%" height="15" fill="rgb(222,198,25)" fg:x="40518" fg:w="131"/><text x="58.6451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.02%)</title><rect x="58.5680%" y="149" width="0.0159%" height="15" fill="rgb(211,99,13)" fg:x="40638" fg:w="11"/><text x="58.8180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (160 samples, 0.23%)</title><rect x="58.3677%" y="181" width="0.2306%" height="15" fill="rgb(232,111,31)" fg:x="40499" fg:w="160"/><text x="58.6177%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="58.5839%" y="165" width="0.0144%" height="15" fill="rgb(245,82,37)" fg:x="40649" fg:w="10"/><text x="58.8339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (101 samples, 0.15%)</title><rect x="58.5983%" y="181" width="0.1456%" height="15" fill="rgb(227,149,46)" fg:x="40659" fg:w="101"/><text x="58.8483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 0.06%)</title><rect x="58.8735%" y="149" width="0.0591%" height="15" fill="rgb(218,36,50)" fg:x="40850" fg:w="41"/><text x="59.1235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (9 samples, 0.01%)</title><rect x="58.9326%" y="149" width="0.0130%" height="15" fill="rgb(226,80,48)" fg:x="40891" fg:w="9"/><text x="59.1826%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (419 samples, 0.60%)</title><rect x="58.7438%" y="181" width="0.6039%" height="15" fill="rgb(238,224,15)" fg:x="40760" fg:w="419"/><text x="58.9938%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (390 samples, 0.56%)</title><rect x="58.7856%" y="165" width="0.5621%" height="15" fill="rgb(241,136,10)" fg:x="40789" fg:w="390"/><text x="59.0356%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (277 samples, 0.40%)</title><rect x="58.9485%" y="149" width="0.3992%" height="15" fill="rgb(208,32,45)" fg:x="40902" fg:w="277"/><text x="59.1985%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (934 samples, 1.35%)</title><rect x="58.0175%" y="197" width="1.3461%" height="15" fill="rgb(207,135,9)" fg:x="40256" fg:w="934"/><text x="58.2675%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="59.3477%" y="181" width="0.0159%" height="15" fill="rgb(206,86,44)" fg:x="41179" fg:w="11"/><text x="59.5977%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,410 samples, 2.03%)</title><rect x="57.4338%" y="213" width="2.0321%" height="15" fill="rgb(245,177,15)" fg:x="39851" fg:w="1410"/><text x="57.6838%" y="223.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.10%)</title><rect x="59.3693%" y="197" width="0.0966%" height="15" fill="rgb(206,64,50)" fg:x="41194" fg:w="67"/><text x="59.6193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (121 samples, 0.17%)</title><rect x="59.4659%" y="213" width="0.1744%" height="15" fill="rgb(234,36,40)" fg:x="41261" fg:w="121"/><text x="59.7159%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.05%)</title><rect x="59.6403%" y="213" width="0.0476%" height="15" fill="rgb(213,64,8)" fg:x="41382" fg:w="33"/><text x="59.8903%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,724 samples, 2.48%)</title><rect x="57.2176%" y="229" width="2.4847%" height="15" fill="rgb(210,75,36)" fg:x="39701" fg:w="1724"/><text x="57.4676%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="59.6878%" y="213" width="0.0144%" height="15" fill="rgb(229,88,21)" fg:x="41415" fg:w="10"/><text x="59.9378%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,267 samples, 3.27%)</title><rect x="56.4480%" y="261" width="3.2672%" height="15" fill="rgb(252,204,47)" fg:x="39167" fg:w="2267"/><text x="56.6980%" y="271.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,035 samples, 2.93%)</title><rect x="56.7823%" y="245" width="2.9329%" height="15" fill="rgb(208,77,27)" fg:x="39399" fg:w="2035"/><text x="57.0323%" y="255.50">ru..</text></g><g><title>rust_qecp`__rdl_realloc (9 samples, 0.01%)</title><rect x="59.7022%" y="229" width="0.0130%" height="15" fill="rgb(221,76,26)" fg:x="41425" fg:w="9"/><text x="59.9522%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (48 samples, 0.07%)</title><rect x="59.7152%" y="261" width="0.0692%" height="15" fill="rgb(225,139,18)" fg:x="41434" fg:w="48"/><text x="59.9652%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (305 samples, 0.44%)</title><rect x="59.7844%" y="245" width="0.4396%" height="15" fill="rgb(230,137,11)" fg:x="41482" fg:w="305"/><text x="60.0344%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.02%)</title><rect x="60.7817%" y="229" width="0.0202%" height="15" fill="rgb(212,28,1)" fg:x="42174" fg:w="14"/><text x="61.0317%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.03%)</title><rect x="60.8019%" y="229" width="0.0346%" height="15" fill="rgb(248,164,17)" fg:x="42188" fg:w="24"/><text x="61.0519%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="60.8365%" y="229" width="0.0115%" height="15" fill="rgb(222,171,42)" fg:x="42212" fg:w="8"/><text x="61.0865%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="60.8538%" y="229" width="0.0173%" height="15" fill="rgb(243,84,45)" fg:x="42224" fg:w="12"/><text x="61.1038%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.02%)</title><rect x="61.1507%" y="197" width="0.0245%" height="15" fill="rgb(252,49,23)" fg:x="42430" fg:w="17"/><text x="61.4007%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (28 samples, 0.04%)</title><rect x="61.1752%" y="197" width="0.0404%" height="15" fill="rgb(215,19,7)" fg:x="42447" fg:w="28"/><text x="61.4252%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.01%)</title><rect x="61.2573%" y="181" width="0.0144%" height="15" fill="rgb(238,81,41)" fg:x="42504" fg:w="10"/><text x="61.5073%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (172 samples, 0.25%)</title><rect x="61.4115%" y="165" width="0.2479%" height="15" fill="rgb(210,199,37)" fg:x="42611" fg:w="172"/><text x="61.6615%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,325 samples, 1.91%)</title><rect x="61.7545%" y="149" width="1.9096%" height="15" fill="rgb(244,192,49)" fg:x="42849" fg:w="1325"/><text x="62.0045%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="63.6641%" y="149" width="0.0360%" height="15" fill="rgb(226,211,11)" fg:x="44174" fg:w="25"/><text x="63.9141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,044 samples, 2.95%)</title><rect x="60.9849%" y="213" width="2.9458%" height="15" fill="rgb(236,162,54)" fg:x="42315" fg:w="2044"/><text x="61.2349%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,884 samples, 2.72%)</title><rect x="61.2155%" y="197" width="2.7152%" height="15" fill="rgb(220,229,9)" fg:x="42475" fg:w="1884"/><text x="61.4655%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,845 samples, 2.66%)</title><rect x="61.2717%" y="181" width="2.6590%" height="15" fill="rgb(250,87,22)" fg:x="42514" fg:w="1845"/><text x="61.5217%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,571 samples, 2.26%)</title><rect x="61.6666%" y="165" width="2.2641%" height="15" fill="rgb(239,43,17)" fg:x="42788" fg:w="1571"/><text x="61.9166%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (160 samples, 0.23%)</title><rect x="63.7002%" y="149" width="0.2306%" height="15" fill="rgb(231,177,25)" fg:x="44199" fg:w="160"/><text x="63.9502%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (133 samples, 0.19%)</title><rect x="63.9308%" y="213" width="0.1917%" height="15" fill="rgb(219,179,1)" fg:x="44359" fg:w="133"/><text x="64.1808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (222 samples, 0.32%)</title><rect x="64.1224%" y="213" width="0.3199%" height="15" fill="rgb(238,219,53)" fg:x="44492" fg:w="222"/><text x="64.3724%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,927 samples, 4.22%)</title><rect x="60.2283%" y="245" width="4.2184%" height="15" fill="rgb(232,167,36)" fg:x="41790" fg:w="2927"/><text x="60.4783%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,481 samples, 3.58%)</title><rect x="60.8711%" y="229" width="3.5756%" height="15" fill="rgb(244,19,51)" fg:x="42236" fg:w="2481"/><text x="61.1211%" y="239.50">rust..</text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,252 samples, 4.69%)</title><rect x="59.7844%" y="261" width="4.6868%" height="15" fill="rgb(224,6,22)" fg:x="41482" fg:w="3252"/><text x="60.0344%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.02%)</title><rect x="64.4467%" y="245" width="0.0245%" height="15" fill="rgb(224,145,5)" fg:x="44717" fg:w="17"/><text x="64.6967%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="65.2452%" y="229" width="0.0173%" height="15" fill="rgb(234,130,49)" fg:x="45271" fg:w="12"/><text x="65.4952%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (15 samples, 0.02%)</title><rect x="65.6660%" y="213" width="0.0216%" height="15" fill="rgb(254,6,2)" fg:x="45563" fg:w="15"/><text x="65.9160%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (27 samples, 0.04%)</title><rect x="66.1185%" y="197" width="0.0389%" height="15" fill="rgb(208,96,46)" fg:x="45877" fg:w="27"/><text x="66.3685%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (44 samples, 0.06%)</title><rect x="66.5812%" y="181" width="0.0634%" height="15" fill="rgb(239,3,39)" fg:x="46198" fg:w="44"/><text x="66.8312%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (25 samples, 0.04%)</title><rect x="66.9415%" y="165" width="0.0360%" height="15" fill="rgb(233,210,1)" fg:x="46448" fg:w="25"/><text x="67.1915%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (11 samples, 0.02%)</title><rect x="67.1346%" y="149" width="0.0159%" height="15" fill="rgb(244,137,37)" fg:x="46582" fg:w="11"/><text x="67.3846%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,939 samples, 2.79%)</title><rect x="64.4712%" y="261" width="2.7945%" height="15" fill="rgb(240,136,2)" fg:x="44734" fg:w="1939"/><text x="64.7212%" y="271.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,678 samples, 2.42%)</title><rect x="64.8474%" y="245" width="2.4184%" height="15" fill="rgb(239,18,37)" fg:x="44995" fg:w="1678"/><text x="65.0974%" y="255.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,390 samples, 2.00%)</title><rect x="65.2624%" y="229" width="2.0033%" height="15" fill="rgb(218,185,22)" fg:x="45283" fg:w="1390"/><text x="65.5124%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,095 samples, 1.58%)</title><rect x="65.6876%" y="213" width="1.5781%" height="15" fill="rgb(225,218,4)" fg:x="45578" fg:w="1095"/><text x="65.9376%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (769 samples, 1.11%)</title><rect x="66.1574%" y="197" width="1.1083%" height="15" fill="rgb(230,182,32)" fg:x="45904" fg:w="769"/><text x="66.4074%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (431 samples, 0.62%)</title><rect x="66.6446%" y="181" width="0.6212%" height="15" fill="rgb(242,56,43)" fg:x="46242" fg:w="431"/><text x="66.8946%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (200 samples, 0.29%)</title><rect x="66.9775%" y="165" width="0.2882%" height="15" fill="rgb(233,99,24)" fg:x="46473" fg:w="200"/><text x="67.2275%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (80 samples, 0.12%)</title><rect x="67.1504%" y="149" width="0.1153%" height="15" fill="rgb(234,209,42)" fg:x="46593" fg:w="80"/><text x="67.4004%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (20 samples, 0.03%)</title><rect x="67.2369%" y="133" width="0.0288%" height="15" fill="rgb(227,7,12)" fg:x="46653" fg:w="20"/><text x="67.4869%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (460 samples, 0.66%)</title><rect x="68.3985%" y="245" width="0.6630%" height="15" fill="rgb(245,203,43)" fg:x="47459" fg:w="460"/><text x="68.6485%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,044 samples, 1.50%)</title><rect x="69.0615%" y="245" width="1.5046%" height="15" fill="rgb(238,205,33)" fg:x="47919" fg:w="1044"/><text x="69.3115%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,404 samples, 4.91%)</title><rect x="67.2657%" y="261" width="4.9059%" height="15" fill="rgb(231,56,7)" fg:x="46673" fg:w="3404"/><text x="67.5157%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,114 samples, 1.61%)</title><rect x="70.5661%" y="245" width="1.6055%" height="15" fill="rgb(244,186,29)" fg:x="48963" fg:w="1114"/><text x="70.8161%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (42 samples, 0.06%)</title><rect x="72.1716%" y="261" width="0.0605%" height="15" fill="rgb(234,111,31)" fg:x="50077" fg:w="42"/><text x="72.4216%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (14,906 samples, 21.48%)</title><rect x="51.4744%" y="277" width="21.4827%" height="15" fill="rgb(241,149,10)" fg:x="35716" fg:w="14906"/><text x="51.7244%" y="287.50">rust_qecp`rust_qecp::union_find_de..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (503 samples, 0.72%)</title><rect x="72.2322%" y="261" width="0.7249%" height="15" fill="rgb(249,206,44)" fg:x="50119" fg:w="503"/><text x="72.4822%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.02%)</title><rect x="75.6594%" y="261" width="0.0245%" height="15" fill="rgb(251,153,30)" fg:x="52497" fg:w="17"/><text x="75.9094%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="75.8179%" y="213" width="0.0173%" height="15" fill="rgb(239,152,38)" fg:x="52607" fg:w="12"/><text x="76.0679%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.06%)</title><rect x="75.7761%" y="229" width="0.0620%" height="15" fill="rgb(249,139,47)" fg:x="52578" fg:w="43"/><text x="76.0261%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (61 samples, 0.09%)</title><rect x="75.7574%" y="245" width="0.0879%" height="15" fill="rgb(244,64,35)" fg:x="52565" fg:w="61"/><text x="76.0074%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (117 samples, 0.17%)</title><rect x="75.6839%" y="261" width="0.1686%" height="15" fill="rgb(216,46,15)" fg:x="52514" fg:w="117"/><text x="75.9339%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (36 samples, 0.05%)</title><rect x="75.9548%" y="245" width="0.0519%" height="15" fill="rgb(250,74,19)" fg:x="52702" fg:w="36"/><text x="76.2048%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (106 samples, 0.15%)</title><rect x="75.8582%" y="261" width="0.1528%" height="15" fill="rgb(249,42,33)" fg:x="52635" fg:w="106"/><text x="76.1082%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="76.0110%" y="261" width="0.0144%" height="15" fill="rgb(242,149,17)" fg:x="52741" fg:w="10"/><text x="76.2610%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="76.0153%" y="245" width="0.0101%" height="15" fill="rgb(244,29,21)" fg:x="52744" fg:w="7"/><text x="76.2653%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="76.0297%" y="261" width="0.0216%" height="15" fill="rgb(220,130,37)" fg:x="52754" fg:w="15"/><text x="76.2797%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="76.0341%" y="245" width="0.0173%" height="15" fill="rgb(211,67,2)" fg:x="52757" fg:w="12"/><text x="76.2841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (52 samples, 0.07%)</title><rect x="76.0542%" y="261" width="0.0749%" height="15" fill="rgb(235,68,52)" fg:x="52771" fg:w="52"/><text x="76.3042%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.03%)</title><rect x="76.1321%" y="261" width="0.0317%" height="15" fill="rgb(246,142,3)" fg:x="52825" fg:w="22"/><text x="76.3821%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (30 samples, 0.04%)</title><rect x="76.1667%" y="261" width="0.0432%" height="15" fill="rgb(241,25,7)" fg:x="52849" fg:w="30"/><text x="76.4167%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 0.07%)</title><rect x="76.2099%" y="261" width="0.0663%" height="15" fill="rgb(242,119,39)" fg:x="52879" fg:w="46"/><text x="76.4599%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="76.3108%" y="181" width="0.0159%" height="15" fill="rgb(241,98,45)" fg:x="52949" fg:w="11"/><text x="76.5608%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="76.3151%" y="165" width="0.0115%" height="15" fill="rgb(254,28,30)" fg:x="52952" fg:w="8"/><text x="76.5651%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="76.3065%" y="197" width="0.0288%" height="15" fill="rgb(241,142,54)" fg:x="52946" fg:w="20"/><text x="76.5565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.03%)</title><rect x="76.3036%" y="213" width="0.0346%" height="15" fill="rgb(222,85,15)" fg:x="52944" fg:w="24"/><text x="76.5536%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="76.3382%" y="213" width="0.0101%" height="15" fill="rgb(210,85,47)" fg:x="52968" fg:w="7"/><text x="76.5882%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 0.06%)</title><rect x="76.2920%" y="261" width="0.0576%" height="15" fill="rgb(224,206,25)" fg:x="52936" fg:w="40"/><text x="76.5420%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (37 samples, 0.05%)</title><rect x="76.2964%" y="245" width="0.0533%" height="15" fill="rgb(243,201,19)" fg:x="52939" fg:w="37"/><text x="76.5464%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (34 samples, 0.05%)</title><rect x="76.3007%" y="229" width="0.0490%" height="15" fill="rgb(236,59,4)" fg:x="52942" fg:w="34"/><text x="76.5507%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 0.06%)</title><rect x="76.3944%" y="245" width="0.0591%" height="15" fill="rgb(254,179,45)" fg:x="53007" fg:w="41"/><text x="76.6444%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (61 samples, 0.09%)</title><rect x="76.4535%" y="245" width="0.0879%" height="15" fill="rgb(226,14,10)" fg:x="53048" fg:w="61"/><text x="76.7035%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (156 samples, 0.22%)</title><rect x="76.3497%" y="261" width="0.2248%" height="15" fill="rgb(244,27,41)" fg:x="52976" fg:w="156"/><text x="76.5997%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.03%)</title><rect x="76.5414%" y="245" width="0.0331%" height="15" fill="rgb(235,35,32)" fg:x="53109" fg:w="23"/><text x="76.7914%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (106 samples, 0.15%)</title><rect x="76.5745%" y="261" width="0.1528%" height="15" fill="rgb(218,68,31)" fg:x="53132" fg:w="106"/><text x="76.8245%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="76.7287%" y="261" width="0.0259%" height="15" fill="rgb(207,120,37)" fg:x="53239" fg:w="18"/><text x="76.9787%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.06%)</title><rect x="76.8556%" y="213" width="0.0591%" height="15" fill="rgb(227,98,0)" fg:x="53327" fg:w="41"/><text x="77.1056%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="76.8945%" y="197" width="0.0202%" height="15" fill="rgb(207,7,3)" fg:x="53354" fg:w="14"/><text x="77.1445%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (81 samples, 0.12%)</title><rect x="76.8037%" y="229" width="0.1167%" height="15" fill="rgb(206,98,19)" fg:x="53291" fg:w="81"/><text x="77.0537%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (132 samples, 0.19%)</title><rect x="76.7777%" y="245" width="0.1902%" height="15" fill="rgb(217,5,26)" fg:x="53273" fg:w="132"/><text x="77.0277%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.05%)</title><rect x="76.9204%" y="229" width="0.0476%" height="15" fill="rgb(235,190,38)" fg:x="53372" fg:w="33"/><text x="77.1704%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 0.04%)</title><rect x="76.9291%" y="213" width="0.0389%" height="15" fill="rgb(247,86,24)" fg:x="53378" fg:w="27"/><text x="77.1791%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.02%)</title><rect x="76.9449%" y="197" width="0.0231%" height="15" fill="rgb(205,101,16)" fg:x="53389" fg:w="16"/><text x="77.1949%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (155 samples, 0.22%)</title><rect x="76.7547%" y="261" width="0.2234%" height="15" fill="rgb(246,168,33)" fg:x="53257" fg:w="155"/><text x="77.0047%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (16 samples, 0.02%)</title><rect x="76.9781%" y="261" width="0.0231%" height="15" fill="rgb(231,114,1)" fg:x="53412" fg:w="16"/><text x="77.2281%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (2,809 samples, 4.05%)</title><rect x="72.9571%" y="277" width="4.0484%" height="15" fill="rgb(207,184,53)" fg:x="50622" fg:w="2809"/><text x="73.2071%" y="287.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (44,258 samples, 63.79%)</title><rect x="13.2231%" y="309" width="63.7852%" height="15" fill="rgb(224,95,51)" fg:x="9175" fg:w="44258"/><text x="13.4731%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,753 samples, 63.06%)</title><rect x="13.9509%" y="293" width="63.0574%" height="15" fill="rgb(212,188,45)" fg:x="9680" fg:w="43753"/><text x="14.2009%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,052 samples, 2.96%)</title><rect x="77.0083%" y="309" width="2.9574%" height="15" fill="rgb(223,154,38)" fg:x="53433" fg:w="2052"/><text x="77.2583%" y="319.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (268 samples, 0.39%)</title><rect x="79.9657%" y="309" width="0.3862%" height="15" fill="rgb(251,22,52)" fg:x="55485" fg:w="268"/><text x="80.2157%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (114 samples, 0.16%)</title><rect x="80.1876%" y="293" width="0.1643%" height="15" fill="rgb(229,209,22)" fg:x="55639" fg:w="114"/><text x="80.4376%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,312 samples, 10.54%)</title><rect x="80.3519%" y="309" width="10.5381%" height="15" fill="rgb(234,138,34)" fg:x="55753" fg:w="7312"/><text x="80.6019%" y="319.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (94 samples, 0.14%)</title><rect x="90.8915%" y="293" width="0.1355%" height="15" fill="rgb(212,95,11)" fg:x="63066" fg:w="94"/><text x="91.1415%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (465 samples, 0.67%)</title><rect x="90.8901%" y="309" width="0.6702%" height="15" fill="rgb(240,179,47)" fg:x="63065" fg:w="465"/><text x="91.1401%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (370 samples, 0.53%)</title><rect x="91.0270%" y="293" width="0.5332%" height="15" fill="rgb(240,163,11)" fg:x="63160" fg:w="370"/><text x="91.2770%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (49 samples, 0.07%)</title><rect x="91.5603%" y="309" width="0.0706%" height="15" fill="rgb(236,37,12)" fg:x="63530" fg:w="49"/><text x="91.8103%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (5,574 samples, 8.03%)</title><rect x="91.6352%" y="309" width="8.0333%" height="15" fill="rgb(232,164,16)" fg:x="63582" fg:w="5574"/><text x="91.8852%" y="319.50">rust_qecp`r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,912 samples, 5.64%)</title><rect x="94.0305%" y="293" width="5.6380%" height="15" fill="rgb(244,205,15)" fg:x="65244" fg:w="3912"/><text x="94.2805%" y="303.50">rust_qe..</text></g><g><title>libsystem_pthread.dylib`thread_start (60,083 samples, 86.59%)</title><rect x="13.1857%" y="389" width="86.5924%" height="15" fill="rgb(223,117,47)" fg:x="9149" fg:w="60083"/><text x="13.4357%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,083 samples, 86.59%)</title><rect x="13.1857%" y="373" width="86.5924%" height="15" fill="rgb(244,107,35)" fg:x="9149" fg:w="60083"/><text x="13.4357%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,083 samples, 86.59%)</title><rect x="13.1857%" y="357" width="86.5924%" height="15" fill="rgb(205,140,8)" fg:x="9149" fg:w="60083"/><text x="13.4357%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,083 samples, 86.59%)</title><rect x="13.1857%" y="341" width="86.5924%" height="15" fill="rgb(228,84,46)" fg:x="9149" fg:w="60083"/><text x="13.4357%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,080 samples, 86.59%)</title><rect x="13.1900%" y="325" width="86.5881%" height="15" fill="rgb(254,188,9)" fg:x="9152" fg:w="60080"/><text x="13.4400%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (76 samples, 0.11%)</title><rect x="99.6685%" y="309" width="0.1095%" height="15" fill="rgb(206,112,54)" fg:x="69156" fg:w="76"/><text x="99.9185%" y="319.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="99.7824%" y="341" width="0.0389%" height="15" fill="rgb(216,84,49)" fg:x="69235" fg:w="27"/><text x="100.0324%" y="351.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (8 samples, 0.01%)</title><rect x="99.9265%" y="325" width="0.0115%" height="15" fill="rgb(214,194,35)" fg:x="69335" fg:w="8"/><text x="100.1765%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (119 samples, 0.17%)</title><rect x="99.8271%" y="341" width="0.1715%" height="15" fill="rgb(249,28,3)" fg:x="69266" fg:w="119"/><text x="100.0771%" y="351.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (42 samples, 0.06%)</title><rect x="99.9380%" y="325" width="0.0605%" height="15" fill="rgb(222,56,52)" fg:x="69343" fg:w="42"/><text x="100.1880%" y="335.50"></text></g><g><title>all (69,386 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="69386"/><text x="0.2500%" y="415.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (154 samples, 0.22%)</title><rect x="99.7781%" y="389" width="0.2219%" height="15" fill="rgb(213,201,24)" fg:x="69232" fg:w="154"/><text x="100.0281%" y="399.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (154 samples, 0.22%)</title><rect x="99.7781%" y="373" width="0.2219%" height="15" fill="rgb(248,116,28)" fg:x="69232" fg:w="154"/><text x="100.0281%" y="383.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (153 samples, 0.22%)</title><rect x="99.7795%" y="357" width="0.2205%" height="15" fill="rgb(219,72,43)" fg:x="69233" fg:w="153"/><text x="100.0295%" y="367.50"></text></g></svg></svg>