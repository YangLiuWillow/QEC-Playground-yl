<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="60444"><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.03%)</title><rect x="0.0397%" y="133" width="0.0314%" height="15" fill="rgb(227,0,7)" fg:x="24" fg:w="19"/><text x="0.2897%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.07%)</title><rect x="0.0116%" y="149" width="0.0711%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="43"/><text x="0.2616%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.03%)</title><rect x="0.0893%" y="69" width="0.0265%" height="15" fill="rgb(221,193,54)" fg:x="54" fg:w="16"/><text x="0.3393%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="0.1026%" y="53" width="0.0132%" height="15" fill="rgb(248,212,6)" fg:x="62" fg:w="8"/><text x="0.3526%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.1026%" y="37" width="0.0132%" height="15" fill="rgb(208,68,35)" fg:x="62" fg:w="8"/><text x="0.3526%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.03%)</title><rect x="0.0877%" y="149" width="0.0298%" height="15" fill="rgb(232,128,0)" fg:x="53" fg:w="18"/><text x="0.3377%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (18 samples, 0.03%)</title><rect x="0.0877%" y="133" width="0.0298%" height="15" fill="rgb(207,160,47)" fg:x="53" fg:w="18"/><text x="0.3377%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="0.0877%" y="117" width="0.0298%" height="15" fill="rgb(228,23,34)" fg:x="53" fg:w="18"/><text x="0.3377%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="0.0877%" y="101" width="0.0298%" height="15" fill="rgb(218,30,26)" fg:x="53" fg:w="18"/><text x="0.3377%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (17 samples, 0.03%)</title><rect x="0.0893%" y="85" width="0.0281%" height="15" fill="rgb(220,122,19)" fg:x="54" fg:w="17"/><text x="0.3393%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.02%)</title><rect x="0.1224%" y="69" width="0.0165%" height="15" fill="rgb(250,228,42)" fg:x="74" fg:w="10"/><text x="0.3724%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="0.1224%" y="85" width="0.0298%" height="15" fill="rgb(240,193,28)" fg:x="74" fg:w="18"/><text x="0.3724%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (22 samples, 0.04%)</title><rect x="0.1175%" y="149" width="0.0364%" height="15" fill="rgb(216,20,37)" fg:x="71" fg:w="22"/><text x="0.3675%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.04%)</title><rect x="0.1175%" y="133" width="0.0364%" height="15" fill="rgb(206,188,39)" fg:x="71" fg:w="22"/><text x="0.3675%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.04%)</title><rect x="0.1175%" y="117" width="0.0364%" height="15" fill="rgb(217,207,13)" fg:x="71" fg:w="22"/><text x="0.3675%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (19 samples, 0.03%)</title><rect x="0.1224%" y="101" width="0.0314%" height="15" fill="rgb(231,73,38)" fg:x="74" fg:w="19"/><text x="0.3724%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (13 samples, 0.02%)</title><rect x="0.1605%" y="149" width="0.0215%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="13"/><text x="0.4105%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (13 samples, 0.02%)</title><rect x="0.1605%" y="133" width="0.0215%" height="15" fill="rgb(210,31,41)" fg:x="97" fg:w="13"/><text x="0.4105%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="0.1638%" y="117" width="0.0182%" height="15" fill="rgb(221,200,47)" fg:x="99" fg:w="11"/><text x="0.4138%" y="127.50"></text></g><g><title>dyld`start (113 samples, 0.19%)</title><rect x="0.0000%" y="389" width="0.1869%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="113"/><text x="0.2500%" y="399.50"></text></g><g><title>rust_qecp`main (112 samples, 0.19%)</title><rect x="0.0017%" y="373" width="0.1853%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="112"/><text x="0.2517%" y="383.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (112 samples, 0.19%)</title><rect x="0.0017%" y="357" width="0.1853%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="112"/><text x="0.2517%" y="367.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (112 samples, 0.19%)</title><rect x="0.0017%" y="341" width="0.1853%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="112"/><text x="0.2517%" y="351.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (112 samples, 0.19%)</title><rect x="0.0017%" y="325" width="0.1853%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="112"/><text x="0.2517%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::main (112 samples, 0.19%)</title><rect x="0.0017%" y="309" width="0.1853%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="112"/><text x="0.2517%" y="319.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (112 samples, 0.19%)</title><rect x="0.0017%" y="293" width="0.1853%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="112"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (112 samples, 0.19%)</title><rect x="0.0017%" y="277" width="0.1853%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="112"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (112 samples, 0.19%)</title><rect x="0.0017%" y="261" width="0.1853%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="112"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (112 samples, 0.19%)</title><rect x="0.0017%" y="245" width="0.1853%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="112"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (112 samples, 0.19%)</title><rect x="0.0017%" y="229" width="0.1853%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="112"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (112 samples, 0.19%)</title><rect x="0.0017%" y="213" width="0.1853%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="112"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (112 samples, 0.19%)</title><rect x="0.0017%" y="197" width="0.1853%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="112"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (112 samples, 0.19%)</title><rect x="0.0017%" y="181" width="0.1853%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="112"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (111 samples, 0.18%)</title><rect x="0.0033%" y="165" width="0.1836%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="111"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="0.1919%" y="309" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="116" fg:w="7"/><text x="0.4419%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (7 samples, 0.01%)</title><rect x="0.1919%" y="293" width="0.0116%" height="15" fill="rgb(233,36,39)" fg:x="116" fg:w="7"/><text x="0.4419%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.1919%" y="277" width="0.0116%" height="15" fill="rgb(226,3,54)" fg:x="116" fg:w="7"/><text x="0.4419%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (17 samples, 0.03%)</title><rect x="0.2035%" y="309" width="0.0281%" height="15" fill="rgb(245,192,40)" fg:x="123" fg:w="17"/><text x="0.4535%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.03%)</title><rect x="0.2051%" y="293" width="0.0265%" height="15" fill="rgb(238,167,29)" fg:x="124" fg:w="16"/><text x="0.4551%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="0.2051%" y="277" width="0.0265%" height="15" fill="rgb(232,182,51)" fg:x="124" fg:w="16"/><text x="0.4551%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="0.2134%" y="261" width="0.0182%" height="15" fill="rgb(231,60,39)" fg:x="129" fg:w="11"/><text x="0.4634%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (8,091 samples, 13.39%)</title><rect x="0.2316%" y="309" width="13.3859%" height="15" fill="rgb(208,69,12)" fg:x="140" fg:w="8091"/><text x="0.4816%" y="319.50">rust_qecp`rust_qecp:..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="15.2538%" y="245" width="0.0132%" height="15" fill="rgb(235,93,37)" fg:x="9220" fg:w="8"/><text x="15.5038%" y="255.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (16 samples, 0.03%)</title><rect x="15.2521%" y="293" width="0.0265%" height="15" fill="rgb(213,116,39)" fg:x="9219" fg:w="16"/><text x="15.5021%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.03%)</title><rect x="15.2521%" y="277" width="0.0265%" height="15" fill="rgb(222,207,29)" fg:x="9219" fg:w="16"/><text x="15.5021%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="15.2538%" y="261" width="0.0248%" height="15" fill="rgb(206,96,30)" fg:x="9220" fg:w="15"/><text x="15.5038%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="15.2670%" y="245" width="0.0116%" height="15" fill="rgb(218,138,4)" fg:x="9228" fg:w="7"/><text x="15.5170%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,354 samples, 2.24%)</title><rect x="13.6176%" y="309" width="2.2401%" height="15" fill="rgb(250,191,14)" fg:x="8231" fg:w="1354"/><text x="13.8676%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (350 samples, 0.58%)</title><rect x="15.2786%" y="293" width="0.5790%" height="15" fill="rgb(239,60,40)" fg:x="9235" fg:w="350"/><text x="15.5286%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (25,664 samples, 42.46%)</title><rect x="15.8577%" y="309" width="42.4591%" height="15" fill="rgb(206,27,48)" fg:x="9585" fg:w="25664"/><text x="16.1077%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (378 samples, 0.63%)</title><rect x="58.3218%" y="293" width="0.6254%" height="15" fill="rgb(225,35,8)" fg:x="35252" fg:w="378"/><text x="58.5718%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,445 samples, 2.39%)</title><rect x="58.3168%" y="309" width="2.3906%" height="15" fill="rgb(250,213,24)" fg:x="35249" fg:w="1445"/><text x="58.5668%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (1,064 samples, 1.76%)</title><rect x="58.9471%" y="293" width="1.7603%" height="15" fill="rgb(247,123,22)" fg:x="35630" fg:w="1064"/><text x="59.1971%" y="303.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="60.6942%" y="277" width="0.0132%" height="15" fill="rgb(231,138,38)" fg:x="36686" fg:w="8"/><text x="60.9442%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="60.6942%" y="261" width="0.0132%" height="15" fill="rgb(231,145,46)" fg:x="36686" fg:w="8"/><text x="60.9442%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="60.6942%" y="245" width="0.0132%" height="15" fill="rgb(251,118,11)" fg:x="36686" fg:w="8"/><text x="60.9442%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="60.6942%" y="229" width="0.0132%" height="15" fill="rgb(217,147,25)" fg:x="36686" fg:w="8"/><text x="60.9442%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (7 samples, 0.01%)</title><rect x="60.7074%" y="309" width="0.0116%" height="15" fill="rgb(247,81,37)" fg:x="36694" fg:w="7"/><text x="60.9574%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (23,566 samples, 38.99%)</title><rect x="60.7190%" y="309" width="38.9882%" height="15" fill="rgb(209,12,38)" fg:x="36701" fg:w="23566"/><text x="60.9690%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16,604 samples, 27.47%)</title><rect x="72.2371%" y="293" width="27.4701%" height="15" fill="rgb(227,1,9)" fg:x="43663" fg:w="16604"/><text x="72.4871%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel:..</text></g><g><title>all (60,444 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="60444"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,331 samples, 99.81%)</title><rect x="0.1869%" y="389" width="99.8131%" height="15" fill="rgb(221,10,30)" fg:x="113" fg:w="60331"/><text x="0.4369%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,331 samples, 99.81%)</title><rect x="0.1869%" y="373" width="99.8131%" height="15" fill="rgb(210,229,1)" fg:x="113" fg:w="60331"/><text x="0.4369%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,331 samples, 99.81%)</title><rect x="0.1869%" y="357" width="99.8131%" height="15" fill="rgb(222,148,37)" fg:x="113" fg:w="60331"/><text x="0.4369%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,331 samples, 99.81%)</title><rect x="0.1869%" y="341" width="99.8131%" height="15" fill="rgb(234,67,33)" fg:x="113" fg:w="60331"/><text x="0.4369%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,331 samples, 99.81%)</title><rect x="0.1869%" y="325" width="99.8131%" height="15" fill="rgb(247,98,35)" fg:x="113" fg:w="60331"/><text x="0.4369%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (177 samples, 0.29%)</title><rect x="99.7072%" y="309" width="0.2928%" height="15" fill="rgb(247,138,52)" fg:x="60267" fg:w="177"/><text x="99.9572%" y="319.50"></text></g></svg></svg>