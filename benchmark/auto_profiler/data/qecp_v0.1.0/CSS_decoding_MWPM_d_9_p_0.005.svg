<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61025"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0098%" y="133" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="11"/><text x="0.2598%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="0.0426%" y="53" width="0.0147%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="9"/><text x="0.2926%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.03%)</title><rect x="0.0426%" y="133" width="0.0262%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="16"/><text x="0.2926%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (16 samples, 0.03%)</title><rect x="0.0426%" y="117" width="0.0262%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="16"/><text x="0.2926%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0426%" y="101" width="0.0262%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="16"/><text x="0.2926%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0426%" y="85" width="0.0262%" height="15" fill="rgb(232,128,0)" fg:x="26" fg:w="16"/><text x="0.2926%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (16 samples, 0.03%)</title><rect x="0.0426%" y="69" width="0.0262%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="16"/><text x="0.2926%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0574%" y="53" width="0.0115%" height="15" fill="rgb(228,23,34)" fg:x="35" fg:w="7"/><text x="0.3074%" y="63.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (56 samples, 0.09%)</title><rect x="0.0787%" y="133" width="0.0918%" height="15" fill="rgb(218,30,26)" fg:x="48" fg:w="56"/><text x="0.3287%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (29 samples, 0.05%)</title><rect x="0.1704%" y="133" width="0.0475%" height="15" fill="rgb(220,122,19)" fg:x="104" fg:w="29"/><text x="0.4204%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (13 samples, 0.02%)</title><rect x="0.2179%" y="133" width="0.0213%" height="15" fill="rgb(250,228,42)" fg:x="133" fg:w="13"/><text x="0.4679%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="0.8832%" y="117" width="0.0229%" height="15" fill="rgb(240,193,28)" fg:x="539" fg:w="14"/><text x="1.1332%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (7 samples, 0.01%)</title><rect x="0.9062%" y="117" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="553" fg:w="7"/><text x="1.1562%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (28 samples, 0.05%)</title><rect x="0.9177%" y="117" width="0.0459%" height="15" fill="rgb(206,188,39)" fg:x="560" fg:w="28"/><text x="1.1677%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="1.0307%" y="101" width="0.0164%" height="15" fill="rgb(217,207,13)" fg:x="629" fg:w="10"/><text x="1.2807%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.02%)</title><rect x="1.0569%" y="85" width="0.0180%" height="15" fill="rgb(231,73,38)" fg:x="645" fg:w="11"/><text x="1.3069%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="1.0569%" y="69" width="0.0180%" height="15" fill="rgb(225,20,46)" fg:x="645" fg:w="11"/><text x="1.3069%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (83 samples, 0.14%)</title><rect x="0.9668%" y="117" width="0.1360%" height="15" fill="rgb(210,31,41)" fg:x="590" fg:w="83"/><text x="1.2168%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (34 samples, 0.06%)</title><rect x="1.0471%" y="101" width="0.0557%" height="15" fill="rgb(221,200,47)" fg:x="639" fg:w="34"/><text x="1.2971%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="1.0766%" y="85" width="0.0262%" height="15" fill="rgb(226,26,5)" fg:x="657" fg:w="16"/><text x="1.3266%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (17 samples, 0.03%)</title><rect x="1.3847%" y="101" width="0.0279%" height="15" fill="rgb(249,33,26)" fg:x="845" fg:w="17"/><text x="1.6347%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (41 samples, 0.07%)</title><rect x="1.4158%" y="101" width="0.0672%" height="15" fill="rgb(235,183,28)" fg:x="864" fg:w="41"/><text x="1.6658%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (777 samples, 1.27%)</title><rect x="0.2392%" y="133" width="1.2732%" height="15" fill="rgb(221,5,38)" fg:x="146" fg:w="777"/><text x="0.4892%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (246 samples, 0.40%)</title><rect x="1.1094%" y="117" width="0.4031%" height="15" fill="rgb(247,18,42)" fg:x="677" fg:w="246"/><text x="1.3594%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="1.4830%" y="101" width="0.0295%" height="15" fill="rgb(241,131,45)" fg:x="905" fg:w="18"/><text x="1.7330%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (11 samples, 0.02%)</title><rect x="1.4945%" y="85" width="0.0180%" height="15" fill="rgb(249,31,29)" fg:x="912" fg:w="11"/><text x="1.7445%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="1.5207%" y="117" width="0.0410%" height="15" fill="rgb(225,111,53)" fg:x="928" fg:w="25"/><text x="1.7707%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="1.6452%" y="101" width="0.0180%" height="15" fill="rgb(238,160,17)" fg:x="1004" fg:w="11"/><text x="1.8952%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="1.6452%" y="85" width="0.0180%" height="15" fill="rgb(214,148,48)" fg:x="1004" fg:w="11"/><text x="1.8952%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="1.6452%" y="69" width="0.0180%" height="15" fill="rgb(232,36,49)" fg:x="1004" fg:w="11"/><text x="1.8952%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="1.6501%" y="53" width="0.0131%" height="15" fill="rgb(209,103,24)" fg:x="1007" fg:w="8"/><text x="1.9001%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="1.6501%" y="37" width="0.0131%" height="15" fill="rgb(229,88,8)" fg:x="1007" fg:w="8"/><text x="1.9001%" y="47.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="1.6649%" y="101" width="0.0131%" height="15" fill="rgb(213,181,19)" fg:x="1016" fg:w="8"/><text x="1.9149%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (123 samples, 0.20%)</title><rect x="1.5649%" y="117" width="0.2016%" height="15" fill="rgb(254,191,54)" fg:x="955" fg:w="123"/><text x="1.8149%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (52 samples, 0.09%)</title><rect x="1.6813%" y="101" width="0.0852%" height="15" fill="rgb(241,83,37)" fg:x="1026" fg:w="52"/><text x="1.9313%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (157 samples, 0.26%)</title><rect x="1.5125%" y="133" width="0.2573%" height="15" fill="rgb(233,36,39)" fg:x="923" fg:w="157"/><text x="1.7625%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7747%" y="133" width="0.0115%" height="15" fill="rgb(226,3,54)" fg:x="1083" fg:w="7"/><text x="2.0247%" y="143.50"></text></g><g><title>dyld`start (1,093 samples, 1.79%)</title><rect x="0.0000%" y="373" width="1.7911%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="1093"/><text x="0.2500%" y="383.50">d..</text></g><g><title>rust_qecp`main (1,089 samples, 1.78%)</title><rect x="0.0066%" y="357" width="1.7845%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="367.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,089 samples, 1.78%)</title><rect x="0.0066%" y="341" width="1.7845%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,089 samples, 1.78%)</title><rect x="0.0066%" y="325" width="1.7845%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="335.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,089 samples, 1.78%)</title><rect x="0.0066%" y="309" width="1.7845%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,089 samples, 1.78%)</title><rect x="0.0066%" y="293" width="1.7845%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="303.50">r..</text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,089 samples, 1.78%)</title><rect x="0.0066%" y="277" width="1.7845%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,089 samples, 1.78%)</title><rect x="0.0066%" y="261" width="1.7845%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,089 samples, 1.78%)</title><rect x="0.0066%" y="245" width="1.7845%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,089 samples, 1.78%)</title><rect x="0.0066%" y="229" width="1.7845%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,089 samples, 1.78%)</title><rect x="0.0066%" y="213" width="1.7845%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,089 samples, 1.78%)</title><rect x="0.0066%" y="197" width="1.7845%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,089 samples, 1.78%)</title><rect x="0.0066%" y="181" width="1.7845%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,089 samples, 1.78%)</title><rect x="0.0066%" y="165" width="1.7845%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,089 samples, 1.78%)</title><rect x="0.0066%" y="149" width="1.7845%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1089"/><text x="0.2566%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="1.8288%" y="277" width="0.0115%" height="15" fill="rgb(247,123,22)" fg:x="1116" fg:w="7"/><text x="2.0788%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (26 samples, 0.04%)</title><rect x="1.8451%" y="277" width="0.0426%" height="15" fill="rgb(231,138,38)" fg:x="1126" fg:w="26"/><text x="2.0951%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="1.9009%" y="277" width="0.0213%" height="15" fill="rgb(231,145,46)" fg:x="1160" fg:w="13"/><text x="2.1509%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (23 samples, 0.04%)</title><rect x="1.9222%" y="277" width="0.0377%" height="15" fill="rgb(251,118,11)" fg:x="1173" fg:w="23"/><text x="2.1722%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="25.8140%" y="261" width="0.0229%" height="15" fill="rgb(217,147,25)" fg:x="15753" fg:w="14"/><text x="26.0640%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="25.8255%" y="245" width="0.0115%" height="15" fill="rgb(247,81,37)" fg:x="15760" fg:w="7"/><text x="26.0755%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.07%)</title><rect x="25.8402%" y="261" width="0.0672%" height="15" fill="rgb(209,12,38)" fg:x="15769" fg:w="41"/><text x="26.0902%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="25.8910%" y="245" width="0.0164%" height="15" fill="rgb(227,1,9)" fg:x="15800" fg:w="10"/><text x="26.1410%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="25.9107%" y="261" width="0.0115%" height="15" fill="rgb(248,47,43)" fg:x="15812" fg:w="7"/><text x="26.1607%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (13 samples, 0.02%)</title><rect x="25.9222%" y="261" width="0.0213%" height="15" fill="rgb(221,10,30)" fg:x="15819" fg:w="13"/><text x="26.1722%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.04%)</title><rect x="25.9500%" y="261" width="0.0426%" height="15" fill="rgb(210,229,1)" fg:x="15836" fg:w="26"/><text x="26.2000%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="25.9992%" y="261" width="0.0147%" height="15" fill="rgb(222,148,37)" fg:x="15866" fg:w="9"/><text x="26.2492%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="26.0270%" y="213" width="0.0213%" height="15" fill="rgb(234,67,33)" fg:x="15883" fg:w="13"/><text x="26.2770%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.04%)</title><rect x="26.0156%" y="261" width="0.0393%" height="15" fill="rgb(247,98,35)" fg:x="15876" fg:w="24"/><text x="26.2656%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (24 samples, 0.04%)</title><rect x="26.0156%" y="245" width="0.0393%" height="15" fill="rgb(247,138,52)" fg:x="15876" fg:w="24"/><text x="26.2656%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="26.0238%" y="229" width="0.0311%" height="15" fill="rgb(213,79,30)" fg:x="15881" fg:w="19"/><text x="26.2738%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="26.0795%" y="197" width="0.0180%" height="15" fill="rgb(246,177,23)" fg:x="15915" fg:w="11"/><text x="26.3295%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_try_realloc_in_place (7 samples, 0.01%)</title><rect x="26.1221%" y="181" width="0.0115%" height="15" fill="rgb(230,62,27)" fg:x="15941" fg:w="7"/><text x="26.3721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="26.1467%" y="181" width="0.0115%" height="15" fill="rgb(216,154,8)" fg:x="15956" fg:w="7"/><text x="26.3967%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (37 samples, 0.06%)</title><rect x="26.1041%" y="197" width="0.0606%" height="15" fill="rgb(244,35,45)" fg:x="15930" fg:w="37"/><text x="26.3541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (79 samples, 0.13%)</title><rect x="26.0746%" y="213" width="0.1295%" height="15" fill="rgb(251,115,12)" fg:x="15912" fg:w="79"/><text x="26.3246%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="26.1647%" y="197" width="0.0393%" height="15" fill="rgb(240,54,50)" fg:x="15967" fg:w="24"/><text x="26.4147%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (113 samples, 0.19%)</title><rect x="26.0549%" y="261" width="0.1852%" height="15" fill="rgb(233,84,52)" fg:x="15900" fg:w="113"/><text x="26.3049%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (109 samples, 0.18%)</title><rect x="26.0615%" y="245" width="0.1786%" height="15" fill="rgb(207,117,47)" fg:x="15904" fg:w="109"/><text x="26.3115%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (106 samples, 0.17%)</title><rect x="26.0664%" y="229" width="0.1737%" height="15" fill="rgb(249,43,39)" fg:x="15907" fg:w="106"/><text x="26.3164%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="26.2204%" y="213" width="0.0197%" height="15" fill="rgb(209,38,44)" fg:x="16001" fg:w="12"/><text x="26.4704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.02%)</title><rect x="26.2220%" y="197" width="0.0180%" height="15" fill="rgb(236,212,23)" fg:x="16002" fg:w="11"/><text x="26.4720%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (921 samples, 1.51%)</title><rect x="28.7374%" y="229" width="1.5092%" height="15" fill="rgb(242,79,21)" fg:x="17537" fg:w="921"/><text x="28.9874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (923 samples, 1.51%)</title><rect x="28.7358%" y="245" width="1.5125%" height="15" fill="rgb(211,96,35)" fg:x="17536" fg:w="923"/><text x="28.9858%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (552 samples, 0.90%)</title><rect x="30.2499%" y="245" width="0.9045%" height="15" fill="rgb(253,215,40)" fg:x="18460" fg:w="552"/><text x="30.4999%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (33 samples, 0.05%)</title><rect x="31.3724%" y="229" width="0.0541%" height="15" fill="rgb(211,81,21)" fg:x="19145" fg:w="33"/><text x="31.6224%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="31.4281%" y="229" width="0.0131%" height="15" fill="rgb(208,190,38)" fg:x="19179" fg:w="8"/><text x="31.6781%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (1,790 samples, 2.93%)</title><rect x="31.4429%" y="229" width="2.9332%" height="15" fill="rgb(235,213,38)" fg:x="19188" fg:w="1790"/><text x="31.6929%" y="239.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::Finish (53 samples, 0.09%)</title><rect x="34.3761%" y="229" width="0.0868%" height="15" fill="rgb(237,122,38)" fg:x="20978" fg:w="53"/><text x="34.6261%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (489 samples, 0.80%)</title><rect x="34.4744%" y="229" width="0.8013%" height="15" fill="rgb(244,218,35)" fg:x="21038" fg:w="489"/><text x="34.7244%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (905 samples, 1.48%)</title><rect x="35.6952%" y="213" width="1.4830%" height="15" fill="rgb(240,68,47)" fg:x="21783" fg:w="905"/><text x="35.9452%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (362 samples, 0.59%)</title><rect x="37.1798%" y="197" width="0.5932%" height="15" fill="rgb(210,16,53)" fg:x="22689" fg:w="362"/><text x="37.4298%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (370 samples, 0.61%)</title><rect x="37.1782%" y="213" width="0.6063%" height="15" fill="rgb(235,124,12)" fg:x="22688" fg:w="370"/><text x="37.4282%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (7 samples, 0.01%)</title><rect x="37.7730%" y="197" width="0.0115%" height="15" fill="rgb(224,169,11)" fg:x="23051" fg:w="7"/><text x="38.0230%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (6,577 samples, 10.78%)</title><rect x="37.7911%" y="213" width="10.7776%" height="15" fill="rgb(250,166,2)" fg:x="23062" fg:w="6577"/><text x="38.0411%" y="223.50">rust_qecp`Perfec..</text></g><g><title>rust_qecp`PerfectMatching::Augment (8 samples, 0.01%)</title><rect x="48.5555%" y="197" width="0.0131%" height="15" fill="rgb(242,216,29)" fg:x="29631" fg:w="8"/><text x="48.8055%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (8 samples, 0.01%)</title><rect x="48.5555%" y="181" width="0.0131%" height="15" fill="rgb(230,116,27)" fg:x="29631" fg:w="8"/><text x="48.8055%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (141 samples, 0.23%)</title><rect x="53.0012%" y="165" width="0.2311%" height="15" fill="rgb(228,99,48)" fg:x="32344" fg:w="141"/><text x="53.2512%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,283 samples, 2.10%)</title><rect x="51.1463%" y="197" width="2.1024%" height="15" fill="rgb(253,11,6)" fg:x="31212" fg:w="1283"/><text x="51.3963%" y="207.50">r..</text></g><g><title>rust_qecp`PerfectMatching::Augment (151 samples, 0.25%)</title><rect x="53.0012%" y="181" width="0.2474%" height="15" fill="rgb(247,143,39)" fg:x="32344" fg:w="151"/><text x="53.2512%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (10 samples, 0.02%)</title><rect x="53.2323%" y="165" width="0.0164%" height="15" fill="rgb(236,97,10)" fg:x="32485" fg:w="10"/><text x="53.4823%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (3,267 samples, 5.35%)</title><rect x="48.5719%" y="213" width="5.3535%" height="15" fill="rgb(233,208,19)" fg:x="29641" fg:w="3267"/><text x="48.8219%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (413 samples, 0.68%)</title><rect x="53.2487%" y="197" width="0.6768%" height="15" fill="rgb(216,164,2)" fg:x="32495" fg:w="413"/><text x="53.4987%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (3,567 samples, 5.85%)</title><rect x="54.6301%" y="197" width="5.8451%" height="15" fill="rgb(220,129,5)" fg:x="33338" fg:w="3567"/><text x="54.8801%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (4,007 samples, 6.57%)</title><rect x="53.9254%" y="213" width="6.5662%" height="15" fill="rgb(242,17,10)" fg:x="32908" fg:w="4007"/><text x="54.1754%" y="223.50">rust_qecp..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (10 samples, 0.02%)</title><rect x="60.4752%" y="197" width="0.0164%" height="15" fill="rgb(242,107,0)" fg:x="36905" fg:w="10"/><text x="60.7252%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (2,841 samples, 4.66%)</title><rect x="60.4965%" y="213" width="4.6555%" height="15" fill="rgb(251,28,31)" fg:x="36918" fg:w="2841"/><text x="60.7465%" y="223.50">rust_..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (57 samples, 0.09%)</title><rect x="70.4072%" y="181" width="0.0934%" height="15" fill="rgb(233,223,10)" fg:x="42966" fg:w="57"/><text x="70.6572%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (72 samples, 0.12%)</title><rect x="70.4072%" y="197" width="0.1180%" height="15" fill="rgb(215,21,27)" fg:x="42966" fg:w="72"/><text x="70.6572%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (15 samples, 0.02%)</title><rect x="70.5006%" y="181" width="0.0246%" height="15" fill="rgb(232,23,21)" fg:x="43023" fg:w="15"/><text x="70.7506%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,304 samples, 5.41%)</title><rect x="65.1520%" y="213" width="5.4142%" height="15" fill="rgb(244,5,23)" fg:x="39759" fg:w="3304"/><text x="65.4020%" y="223.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (25 samples, 0.04%)</title><rect x="70.5252%" y="197" width="0.0410%" height="15" fill="rgb(226,81,46)" fg:x="43038" fg:w="25"/><text x="70.7752%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (22,014 samples, 36.07%)</title><rect x="35.2839%" y="229" width="36.0737%" height="15" fill="rgb(247,70,30)" fg:x="21532" fg:w="22014"/><text x="35.5339%" y="239.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (482 samples, 0.79%)</title><rect x="70.5678%" y="213" width="0.7898%" height="15" fill="rgb(212,68,19)" fg:x="43064" fg:w="482"/><text x="70.8178%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="71.3658%" y="213" width="0.0147%" height="15" fill="rgb(240,187,13)" fg:x="43551" fg:w="9"/><text x="71.6158%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="71.3691%" y="197" width="0.0115%" height="15" fill="rgb(223,113,26)" fg:x="43553" fg:w="7"/><text x="71.6191%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (21 samples, 0.03%)</title><rect x="71.3593%" y="229" width="0.0344%" height="15" fill="rgb(206,192,2)" fg:x="43547" fg:w="21"/><text x="71.6093%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (27,758 samples, 45.49%)</title><rect x="26.2417%" y="261" width="45.4863%" height="15" fill="rgb(241,108,4)" fg:x="16014" fg:w="27758"/><text x="26.4917%" y="271.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (24,757 samples, 40.57%)</title><rect x="31.1594%" y="245" width="40.5686%" height="15" fill="rgb(247,173,49)" fg:x="19015" fg:w="24757"/><text x="31.4094%" y="255.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (204 samples, 0.33%)</title><rect x="71.3937%" y="229" width="0.3343%" height="15" fill="rgb(224,114,35)" fg:x="43568" fg:w="204"/><text x="71.6437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="72.6882%" y="213" width="0.0180%" height="15" fill="rgb(245,159,27)" fg:x="44358" fg:w="11"/><text x="72.9382%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="72.6751%" y="245" width="0.0328%" height="15" fill="rgb(245,172,44)" fg:x="44350" fg:w="20"/><text x="72.9251%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="72.6850%" y="229" width="0.0229%" height="15" fill="rgb(236,23,11)" fg:x="44356" fg:w="14"/><text x="72.9350%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (43,177 samples, 70.75%)</title><rect x="1.9795%" y="277" width="70.7530%" height="15" fill="rgb(205,117,38)" fg:x="1208" fg:w="43177"/><text x="2.2295%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (613 samples, 1.00%)</title><rect x="71.7280%" y="261" width="1.0045%" height="15" fill="rgb(237,72,25)" fg:x="43772" fg:w="613"/><text x="71.9780%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.02%)</title><rect x="72.7112%" y="245" width="0.0213%" height="15" fill="rgb(244,70,9)" fg:x="44372" fg:w="13"/><text x="72.9612%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="72.7177%" y="229" width="0.0147%" height="15" fill="rgb(217,125,39)" fg:x="44376" fg:w="9"/><text x="72.9677%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="72.7194%" y="213" width="0.0131%" height="15" fill="rgb(235,36,10)" fg:x="44377" fg:w="8"/><text x="72.9694%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (43,408 samples, 71.13%)</title><rect x="1.8238%" y="293" width="71.1315%" height="15" fill="rgb(251,123,47)" fg:x="1113" fg:w="43408"/><text x="2.0738%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (136 samples, 0.22%)</title><rect x="72.7325%" y="277" width="0.2229%" height="15" fill="rgb(221,13,13)" fg:x="44385" fg:w="136"/><text x="72.9825%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,474 samples, 2.42%)</title><rect x="72.9553%" y="293" width="2.4154%" height="15" fill="rgb(238,131,9)" fg:x="44521" fg:w="1474"/><text x="73.2053%" y="303.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (355 samples, 0.58%)</title><rect x="75.3707%" y="293" width="0.5817%" height="15" fill="rgb(211,50,8)" fg:x="45995" fg:w="355"/><text x="75.6207%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (136 samples, 0.22%)</title><rect x="75.7296%" y="277" width="0.2229%" height="15" fill="rgb(245,182,24)" fg:x="46214" fg:w="136"/><text x="75.9796%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,663 samples, 12.56%)</title><rect x="75.9525%" y="293" width="12.5571%" height="15" fill="rgb(242,14,37)" fg:x="46350" fg:w="7663"/><text x="76.2025%" y="303.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (233 samples, 0.38%)</title><rect x="88.5113%" y="277" width="0.3818%" height="15" fill="rgb(246,228,12)" fg:x="54014" fg:w="233"/><text x="88.7613%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (678 samples, 1.11%)</title><rect x="88.5096%" y="293" width="1.1110%" height="15" fill="rgb(213,55,15)" fg:x="54013" fg:w="678"/><text x="88.7596%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (444 samples, 0.73%)</title><rect x="88.8931%" y="277" width="0.7276%" height="15" fill="rgb(209,9,3)" fg:x="54247" fg:w="444"/><text x="89.1431%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (7 samples, 0.01%)</title><rect x="89.6092%" y="261" width="0.0115%" height="15" fill="rgb(230,59,30)" fg:x="54684" fg:w="7"/><text x="89.8592%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (6,323 samples, 10.36%)</title><rect x="89.6256%" y="293" width="10.3613%" height="15" fill="rgb(209,121,21)" fg:x="54694" fg:w="6323"/><text x="89.8756%" y="303.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (4,910 samples, 8.05%)</title><rect x="91.9410%" y="277" width="8.0459%" height="15" fill="rgb(220,109,13)" fg:x="56107" fg:w="4910"/><text x="92.1910%" y="287.50">rust_qecp`r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,925 samples, 98.20%)</title><rect x="1.7993%" y="309" width="98.1975%" height="15" fill="rgb(232,18,1)" fg:x="1098" fg:w="59925"/><text x="2.0493%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_pthread.dylib`thread_start (59,931 samples, 98.21%)</title><rect x="1.7911%" y="373" width="98.2073%" height="15" fill="rgb(215,41,42)" fg:x="1093" fg:w="59931"/><text x="2.0411%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,931 samples, 98.21%)</title><rect x="1.7911%" y="357" width="98.2073%" height="15" fill="rgb(224,123,36)" fg:x="1093" fg:w="59931"/><text x="2.0411%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,930 samples, 98.21%)</title><rect x="1.7927%" y="341" width="98.2057%" height="15" fill="rgb(240,125,3)" fg:x="1094" fg:w="59930"/><text x="2.0427%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,930 samples, 98.21%)</title><rect x="1.7927%" y="325" width="98.2057%" height="15" fill="rgb(205,98,50)" fg:x="1094" fg:w="59930"/><text x="2.0427%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>all (61,025 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="61025"/><text x="0.2500%" y="399.50"></text></g></svg></svg>