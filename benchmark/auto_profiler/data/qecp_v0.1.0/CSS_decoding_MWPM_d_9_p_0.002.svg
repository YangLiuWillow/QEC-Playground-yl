<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61425"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0114%" y="133" width="0.0179%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="11"/><text x="0.2614%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="0.0440%" y="53" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="27" fg:w="7"/><text x="0.2940%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.0440%" y="37" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="7"/><text x="0.2940%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="0.0407%" y="133" width="0.0244%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="15"/><text x="0.2907%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (15 samples, 0.02%)</title><rect x="0.0407%" y="117" width="0.0244%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="15"/><text x="0.2907%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0407%" y="101" width="0.0244%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="15"/><text x="0.2907%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.0407%" y="85" width="0.0244%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="15"/><text x="0.2907%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (14 samples, 0.02%)</title><rect x="0.0423%" y="69" width="0.0228%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="14"/><text x="0.2923%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (7 samples, 0.01%)</title><rect x="0.0651%" y="133" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="7"/><text x="0.3151%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0651%" y="117" width="0.0114%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="7"/><text x="0.3151%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0651%" y="101" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="40" fg:w="7"/><text x="0.3151%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (46 samples, 0.07%)</title><rect x="0.0765%" y="133" width="0.0749%" height="15" fill="rgb(240,193,28)" fg:x="47" fg:w="46"/><text x="0.3265%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (19 samples, 0.03%)</title><rect x="0.1514%" y="133" width="0.0309%" height="15" fill="rgb(216,20,37)" fg:x="93" fg:w="19"/><text x="0.4014%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.02%)</title><rect x="0.8335%" y="117" width="0.0163%" height="15" fill="rgb(206,188,39)" fg:x="512" fg:w="10"/><text x="1.0835%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="0.8498%" y="117" width="0.0163%" height="15" fill="rgb(217,207,13)" fg:x="522" fg:w="10"/><text x="1.0998%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (47 samples, 0.08%)</title><rect x="0.8726%" y="117" width="0.0765%" height="15" fill="rgb(231,73,38)" fg:x="536" fg:w="47"/><text x="1.1226%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (66 samples, 0.11%)</title><rect x="0.9573%" y="117" width="0.1074%" height="15" fill="rgb(225,20,46)" fg:x="588" fg:w="66"/><text x="1.2073%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="1.0338%" y="101" width="0.0309%" height="15" fill="rgb(210,31,41)" fg:x="635" fg:w="19"/><text x="1.2838%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="1.0435%" y="85" width="0.0212%" height="15" fill="rgb(221,200,47)" fg:x="641" fg:w="13"/><text x="1.2935%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (23 samples, 0.04%)</title><rect x="1.3415%" y="101" width="0.0374%" height="15" fill="rgb(226,26,5)" fg:x="824" fg:w="23"/><text x="1.5915%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (38 samples, 0.06%)</title><rect x="1.3789%" y="101" width="0.0619%" height="15" fill="rgb(249,33,26)" fg:x="847" fg:w="38"/><text x="1.6289%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (792 samples, 1.29%)</title><rect x="0.1921%" y="133" width="1.2894%" height="15" fill="rgb(235,183,28)" fg:x="118" fg:w="792"/><text x="0.4421%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (252 samples, 0.41%)</title><rect x="1.0712%" y="117" width="0.4103%" height="15" fill="rgb(221,5,38)" fg:x="658" fg:w="252"/><text x="1.3212%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.04%)</title><rect x="1.4408%" y="101" width="0.0407%" height="15" fill="rgb(247,18,42)" fg:x="885" fg:w="25"/><text x="1.6908%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="1.4652%" y="85" width="0.0163%" height="15" fill="rgb(241,131,45)" fg:x="900" fg:w="10"/><text x="1.7152%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.04%)</title><rect x="1.4896%" y="117" width="0.0374%" height="15" fill="rgb(249,31,29)" fg:x="915" fg:w="23"/><text x="1.7396%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (123 samples, 0.20%)</title><rect x="1.5303%" y="117" width="0.2002%" height="15" fill="rgb(225,111,53)" fg:x="940" fg:w="123"/><text x="1.7803%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (54 samples, 0.09%)</title><rect x="1.6427%" y="101" width="0.0879%" height="15" fill="rgb(238,160,17)" fg:x="1009" fg:w="54"/><text x="1.8927%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (158 samples, 0.26%)</title><rect x="1.4815%" y="133" width="0.2572%" height="15" fill="rgb(214,148,48)" fg:x="910" fg:w="158"/><text x="1.7315%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7452%" y="133" width="0.0114%" height="15" fill="rgb(232,36,49)" fg:x="1072" fg:w="7"/><text x="1.9952%" y="143.50"></text></g><g><title>dyld`start (1,081 samples, 1.76%)</title><rect x="0.0000%" y="373" width="1.7599%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="1081"/><text x="0.2500%" y="383.50"></text></g><g><title>rust_qecp`main (1,078 samples, 1.75%)</title><rect x="0.0049%" y="357" width="1.7550%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1078"/><text x="0.2549%" y="367.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,078 samples, 1.75%)</title><rect x="0.0049%" y="341" width="1.7550%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1078"/><text x="0.2549%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,078 samples, 1.75%)</title><rect x="0.0049%" y="325" width="1.7550%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1078"/><text x="0.2549%" y="335.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,078 samples, 1.75%)</title><rect x="0.0049%" y="309" width="1.7550%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1078"/><text x="0.2549%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::main (1,078 samples, 1.75%)</title><rect x="0.0049%" y="293" width="1.7550%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1078"/><text x="0.2549%" y="303.50"></text></g><g><title>rust_qecp`tokio::runtime::handle::Handle::enter (1,077 samples, 1.75%)</title><rect x="0.0065%" y="277" width="1.7534%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::context::enter (1,077 samples, 1.75%)</title><rect x="0.0065%" y="261" width="1.7534%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="271.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler&lt;P&gt;::block_on (1,077 samples, 1.75%)</title><rect x="0.0065%" y="245" width="1.7534%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="255.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,077 samples, 1.75%)</title><rect x="0.0065%" y="229" width="1.7534%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,077 samples, 1.75%)</title><rect x="0.0065%" y="213" width="1.7534%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,077 samples, 1.75%)</title><rect x="0.0065%" y="197" width="1.7534%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,077 samples, 1.75%)</title><rect x="0.0065%" y="181" width="1.7534%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,077 samples, 1.75%)</title><rect x="0.0065%" y="165" width="1.7534%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1077"/><text x="0.2565%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,076 samples, 1.75%)</title><rect x="0.0081%" y="149" width="1.7517%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1076"/><text x="0.2581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="1.7794%" y="293" width="0.0130%" height="15" fill="rgb(206,96,30)" fg:x="1093" fg:w="8"/><text x="2.0294%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="1.7924%" y="293" width="0.0179%" height="15" fill="rgb(218,138,4)" fg:x="1101" fg:w="11"/><text x="2.0424%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="1.8152%" y="293" width="0.0309%" height="15" fill="rgb(250,191,14)" fg:x="1115" fg:w="19"/><text x="2.0652%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16 samples, 0.03%)</title><rect x="1.8575%" y="277" width="0.0260%" height="15" fill="rgb(239,60,40)" fg:x="1141" fg:w="16"/><text x="2.1075%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="1.8950%" y="277" width="0.0179%" height="15" fill="rgb(206,27,48)" fg:x="1164" fg:w="11"/><text x="2.1450%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (31 samples, 0.05%)</title><rect x="1.9259%" y="277" width="0.0505%" height="15" fill="rgb(225,35,8)" fg:x="1183" fg:w="31"/><text x="2.1759%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="1.9764%" y="277" width="0.0147%" height="15" fill="rgb(250,213,24)" fg:x="1214" fg:w="9"/><text x="2.2264%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="1.9927%" y="277" width="0.0326%" height="15" fill="rgb(247,123,22)" fg:x="1224" fg:w="20"/><text x="2.2427%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (13 samples, 0.02%)</title><rect x="2.0676%" y="245" width="0.0212%" height="15" fill="rgb(231,138,38)" fg:x="1270" fg:w="13"/><text x="2.3176%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="2.0676%" y="229" width="0.0212%" height="15" fill="rgb(231,145,46)" fg:x="1270" fg:w="13"/><text x="2.3176%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="2.0773%" y="213" width="0.0114%" height="15" fill="rgb(251,118,11)" fg:x="1276" fg:w="7"/><text x="2.3273%" y="223.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (41 samples, 0.07%)</title><rect x="2.0252%" y="277" width="0.0667%" height="15" fill="rgb(217,147,25)" fg:x="1244" fg:w="41"/><text x="2.2752%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (17 samples, 0.03%)</title><rect x="2.0643%" y="261" width="0.0277%" height="15" fill="rgb(247,81,37)" fg:x="1268" fg:w="17"/><text x="2.3143%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (19 samples, 0.03%)</title><rect x="20.9247%" y="261" width="0.0309%" height="15" fill="rgb(209,12,38)" fg:x="12853" fg:w="19"/><text x="21.1747%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="20.9801%" y="229" width="0.0195%" height="15" fill="rgb(227,1,9)" fg:x="12887" fg:w="12"/><text x="21.2301%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="20.9556%" y="261" width="0.0472%" height="15" fill="rgb(248,47,43)" fg:x="12872" fg:w="29"/><text x="21.2056%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="20.9752%" y="245" width="0.0277%" height="15" fill="rgb(221,10,30)" fg:x="12884" fg:w="17"/><text x="21.2252%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (57 samples, 0.09%)</title><rect x="21.0028%" y="261" width="0.0928%" height="15" fill="rgb(210,229,1)" fg:x="12901" fg:w="57"/><text x="21.2528%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.04%)</title><rect x="21.0549%" y="245" width="0.0407%" height="15" fill="rgb(222,148,37)" fg:x="12933" fg:w="25"/><text x="21.3049%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="21.1119%" y="261" width="0.0244%" height="15" fill="rgb(234,67,33)" fg:x="12968" fg:w="15"/><text x="21.3619%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="21.1363%" y="261" width="0.0147%" height="15" fill="rgb(247,98,35)" fg:x="12983" fg:w="9"/><text x="21.3863%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="21.1543%" y="261" width="0.0407%" height="15" fill="rgb(247,138,52)" fg:x="12994" fg:w="25"/><text x="21.4043%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="21.2031%" y="245" width="0.0114%" height="15" fill="rgb(213,79,30)" fg:x="13024" fg:w="7"/><text x="21.4531%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 0.02%)</title><rect x="21.1982%" y="261" width="0.0244%" height="15" fill="rgb(246,177,23)" fg:x="13021" fg:w="15"/><text x="21.4482%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.02%)</title><rect x="21.2536%" y="197" width="0.0195%" height="15" fill="rgb(230,62,27)" fg:x="13055" fg:w="12"/><text x="21.5036%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="21.2454%" y="213" width="0.0309%" height="15" fill="rgb(216,154,8)" fg:x="13050" fg:w="19"/><text x="21.4954%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 0.06%)</title><rect x="21.2226%" y="261" width="0.0619%" height="15" fill="rgb(244,35,45)" fg:x="13036" fg:w="38"/><text x="21.4726%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (34 samples, 0.06%)</title><rect x="21.2291%" y="245" width="0.0554%" height="15" fill="rgb(251,115,12)" fg:x="13040" fg:w="34"/><text x="21.4791%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.04%)</title><rect x="21.2405%" y="229" width="0.0440%" height="15" fill="rgb(240,54,50)" fg:x="13047" fg:w="27"/><text x="21.4905%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (19 samples, 0.03%)</title><rect x="21.3268%" y="197" width="0.0309%" height="15" fill="rgb(233,84,52)" fg:x="13100" fg:w="19"/><text x="21.5768%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="21.3447%" y="181" width="0.0130%" height="15" fill="rgb(207,117,47)" fg:x="13111" fg:w="8"/><text x="21.5947%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="21.3854%" y="181" width="0.0179%" height="15" fill="rgb(249,43,39)" fg:x="13136" fg:w="11"/><text x="21.6354%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="21.3887%" y="165" width="0.0147%" height="15" fill="rgb(209,38,44)" fg:x="13138" fg:w="9"/><text x="21.6387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (12 samples, 0.02%)</title><rect x="21.4115%" y="181" width="0.0195%" height="15" fill="rgb(236,212,23)" fg:x="13152" fg:w="12"/><text x="21.6615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="21.4196%" y="165" width="0.0114%" height="15" fill="rgb(242,79,21)" fg:x="13157" fg:w="7"/><text x="21.6696%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="21.4359%" y="181" width="0.0244%" height="15" fill="rgb(211,96,35)" fg:x="13167" fg:w="15"/><text x="21.6859%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (68 samples, 0.11%)</title><rect x="21.3675%" y="197" width="0.1107%" height="15" fill="rgb(253,215,40)" fg:x="13125" fg:w="68"/><text x="21.6175%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.01%)</title><rect x="21.4652%" y="181" width="0.0130%" height="15" fill="rgb(211,81,21)" fg:x="13185" fg:w="8"/><text x="21.7152%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (165 samples, 0.27%)</title><rect x="21.3122%" y="213" width="0.2686%" height="15" fill="rgb(208,190,38)" fg:x="13091" fg:w="165"/><text x="21.5622%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (62 samples, 0.10%)</title><rect x="21.4799%" y="197" width="0.1009%" height="15" fill="rgb(235,213,38)" fg:x="13194" fg:w="62"/><text x="21.7299%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (204 samples, 0.33%)</title><rect x="21.2845%" y="261" width="0.3321%" height="15" fill="rgb(237,122,38)" fg:x="13074" fg:w="204"/><text x="21.5345%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (200 samples, 0.33%)</title><rect x="21.2910%" y="245" width="0.3256%" height="15" fill="rgb(244,218,35)" fg:x="13078" fg:w="200"/><text x="21.5410%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (196 samples, 0.32%)</title><rect x="21.2975%" y="229" width="0.3191%" height="15" fill="rgb(240,68,47)" fg:x="13082" fg:w="196"/><text x="21.5475%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="21.6020%" y="213" width="0.0147%" height="15" fill="rgb(210,16,53)" fg:x="13269" fg:w="9"/><text x="21.8520%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="21.6036%" y="197" width="0.0130%" height="15" fill="rgb(235,124,12)" fg:x="13270" fg:w="8"/><text x="21.8536%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="22.9923%" y="245" width="0.0228%" height="15" fill="rgb(224,169,11)" fg:x="14123" fg:w="14"/><text x="23.2423%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="22.9939%" y="229" width="0.0212%" height="15" fill="rgb(250,166,2)" fg:x="14124" fg:w="13"/><text x="23.2439%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="23.0167%" y="245" width="0.0130%" height="15" fill="rgb(242,216,29)" fg:x="14138" fg:w="8"/><text x="23.2667%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (132 samples, 0.21%)</title><rect x="23.0297%" y="245" width="0.2149%" height="15" fill="rgb(230,116,27)" fg:x="14146" fg:w="132"/><text x="23.2797%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (127 samples, 0.21%)</title><rect x="23.0379%" y="229" width="0.2068%" height="15" fill="rgb(228,99,48)" fg:x="14151" fg:w="127"/><text x="23.2879%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (346 samples, 0.56%)</title><rect x="23.2576%" y="245" width="0.5633%" height="15" fill="rgb(253,11,6)" fg:x="14286" fg:w="346"/><text x="23.5076%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (87 samples, 0.14%)</title><rect x="23.9642%" y="229" width="0.1416%" height="15" fill="rgb(247,143,39)" fg:x="14720" fg:w="87"/><text x="24.2142%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.03%)</title><rect x="24.1107%" y="229" width="0.0309%" height="15" fill="rgb(236,97,10)" fg:x="14810" fg:w="19"/><text x="24.3607%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (879 samples, 1.43%)</title><rect x="24.1416%" y="229" width="1.4310%" height="15" fill="rgb(233,208,19)" fg:x="14829" fg:w="879"/><text x="24.3916%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (31 samples, 0.05%)</title><rect x="25.5726%" y="229" width="0.0505%" height="15" fill="rgb(216,164,2)" fg:x="15708" fg:w="31"/><text x="25.8226%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (11 samples, 0.02%)</title><rect x="25.6231%" y="229" width="0.0179%" height="15" fill="rgb(220,129,5)" fg:x="15739" fg:w="11"/><text x="25.8731%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="25.6654%" y="149" width="0.0163%" height="15" fill="rgb(242,17,10)" fg:x="15765" fg:w="10"/><text x="25.9154%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (26 samples, 0.04%)</title><rect x="25.6427%" y="229" width="0.0423%" height="15" fill="rgb(242,107,0)" fg:x="15751" fg:w="26"/><text x="25.8927%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="25.6508%" y="213" width="0.0342%" height="15" fill="rgb(251,28,31)" fg:x="15756" fg:w="21"/><text x="25.9008%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.03%)</title><rect x="25.6524%" y="197" width="0.0326%" height="15" fill="rgb(233,223,10)" fg:x="15757" fg:w="20"/><text x="25.9024%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="25.6622%" y="181" width="0.0228%" height="15" fill="rgb(215,21,27)" fg:x="15763" fg:w="14"/><text x="25.9122%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="25.6654%" y="165" width="0.0195%" height="15" fill="rgb(232,23,21)" fg:x="15765" fg:w="12"/><text x="25.9154%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (91 samples, 0.15%)</title><rect x="25.6850%" y="229" width="0.1481%" height="15" fill="rgb(244,5,23)" fg:x="15777" fg:w="91"/><text x="25.9350%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (304 samples, 0.49%)</title><rect x="25.9227%" y="213" width="0.4949%" height="15" fill="rgb(226,81,46)" fg:x="15923" fg:w="304"/><text x="26.1727%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (69 samples, 0.11%)</title><rect x="26.4176%" y="213" width="0.1123%" height="15" fill="rgb(247,70,30)" fg:x="16227" fg:w="69"/><text x="26.6676%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (69 samples, 0.11%)</title><rect x="26.4176%" y="197" width="0.1123%" height="15" fill="rgb(212,68,19)" fg:x="16227" fg:w="69"/><text x="26.6676%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (28 samples, 0.05%)</title><rect x="26.5315%" y="213" width="0.0456%" height="15" fill="rgb(240,187,13)" fg:x="16297" fg:w="28"/><text x="26.7815%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (162 samples, 0.26%)</title><rect x="26.8881%" y="197" width="0.2637%" height="15" fill="rgb(223,113,26)" fg:x="16516" fg:w="162"/><text x="27.1381%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (15 samples, 0.02%)</title><rect x="27.1274%" y="181" width="0.0244%" height="15" fill="rgb(206,192,2)" fg:x="16663" fg:w="15"/><text x="27.3774%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (15 samples, 0.02%)</title><rect x="27.1274%" y="165" width="0.0244%" height="15" fill="rgb(241,108,4)" fg:x="16663" fg:w="15"/><text x="27.3774%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (378 samples, 0.62%)</title><rect x="26.5771%" y="213" width="0.6154%" height="15" fill="rgb(247,173,49)" fg:x="16325" fg:w="378"/><text x="26.8271%" y="223.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (25 samples, 0.04%)</title><rect x="27.1518%" y="197" width="0.0407%" height="15" fill="rgb(224,114,35)" fg:x="16678" fg:w="25"/><text x="27.4018%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,045 samples, 3.33%)</title><rect x="27.3765%" y="197" width="3.3293%" height="15" fill="rgb(245,159,27)" fg:x="16816" fg:w="2045"/><text x="27.6265%" y="207.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,159 samples, 3.51%)</title><rect x="27.1925%" y="213" width="3.5149%" height="15" fill="rgb(245,172,44)" fg:x="16703" fg:w="2159"/><text x="27.4425%" y="223.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::ProcessSelfloop (14 samples, 0.02%)</title><rect x="30.7074%" y="213" width="0.0228%" height="15" fill="rgb(236,23,11)" fg:x="18862" fg:w="14"/><text x="30.9574%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (439 samples, 0.71%)</title><rect x="30.7302%" y="213" width="0.7147%" height="15" fill="rgb(205,117,38)" fg:x="18876" fg:w="439"/><text x="30.9802%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (8 samples, 0.01%)</title><rect x="31.4318%" y="197" width="0.0130%" height="15" fill="rgb(237,72,25)" fg:x="19307" fg:w="8"/><text x="31.6818%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (3,471 samples, 5.65%)</title><rect x="25.8331%" y="229" width="5.6508%" height="15" fill="rgb(244,70,9)" fg:x="15868" fg:w="3471"/><text x="26.0831%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (23 samples, 0.04%)</title><rect x="31.4465%" y="213" width="0.0374%" height="15" fill="rgb(217,125,39)" fg:x="19316" fg:w="23"/><text x="31.6965%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="31.4904%" y="213" width="0.0114%" height="15" fill="rgb(235,36,10)" fg:x="19343" fg:w="7"/><text x="31.7404%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="31.5018%" y="213" width="0.0147%" height="15" fill="rgb(251,123,47)" fg:x="19350" fg:w="9"/><text x="31.7518%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (25 samples, 0.04%)</title><rect x="31.4839%" y="229" width="0.0407%" height="15" fill="rgb(221,13,13)" fg:x="19339" fg:w="25"/><text x="31.7339%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (6,101 samples, 9.93%)</title><rect x="21.6280%" y="261" width="9.9324%" height="15" fill="rgb(238,131,9)" fg:x="13285" fg:w="6101"/><text x="21.8780%" y="271.50">rust_qecp`rust..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (4,750 samples, 7.73%)</title><rect x="23.8274%" y="245" width="7.7330%" height="15" fill="rgb(211,50,8)" fg:x="14636" fg:w="4750"/><text x="24.0774%" y="255.50">rust_qecp`m..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (22 samples, 0.04%)</title><rect x="31.5246%" y="229" width="0.0358%" height="15" fill="rgb(245,182,24)" fg:x="19364" fg:w="22"/><text x="31.7746%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="32.6724%" y="213" width="0.0163%" height="15" fill="rgb(242,14,37)" fg:x="20069" fg:w="10"/><text x="32.9224%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.04%)</title><rect x="32.6512%" y="245" width="0.0391%" height="15" fill="rgb(246,228,12)" fg:x="20056" fg:w="24"/><text x="32.9012%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="32.6691%" y="229" width="0.0212%" height="15" fill="rgb(213,55,15)" fg:x="20067" fg:w="13"/><text x="32.9191%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (18,784 samples, 30.58%)</title><rect x="2.1197%" y="277" width="30.5804%" height="15" fill="rgb(209,9,3)" fg:x="1302" fg:w="18784"/><text x="2.3697%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::deco..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (700 samples, 1.14%)</title><rect x="31.5604%" y="261" width="1.1396%" height="15" fill="rgb(230,59,30)" fg:x="19386" fg:w="700"/><text x="31.8104%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (19,152 samples, 31.18%)</title><rect x="1.8575%" y="293" width="31.1795%" height="15" fill="rgb(209,121,21)" fg:x="1141" fg:w="19152"/><text x="2.1075%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (207 samples, 0.34%)</title><rect x="32.7000%" y="277" width="0.3370%" height="15" fill="rgb(220,109,13)" fg:x="20086" fg:w="207"/><text x="32.9500%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (4,700 samples, 7.65%)</title><rect x="33.0370%" y="293" width="7.6516%" height="15" fill="rgb(232,18,1)" fg:x="20293" fg:w="4700"/><text x="33.2870%" y="303.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (14 samples, 0.02%)</title><rect x="41.5303%" y="261" width="0.0228%" height="15" fill="rgb(215,41,42)" fg:x="25510" fg:w="14"/><text x="41.7803%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="41.5303%" y="245" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="25510" fg:w="14"/><text x="41.7803%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="41.5319%" y="229" width="0.0212%" height="15" fill="rgb(240,125,3)" fg:x="25511" fg:w="13"/><text x="41.7819%" y="239.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (16 samples, 0.03%)</title><rect x="41.5287%" y="277" width="0.0260%" height="15" fill="rgb(205,98,50)" fg:x="25509" fg:w="16"/><text x="41.7787%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (988 samples, 1.61%)</title><rect x="40.6886%" y="293" width="1.6085%" height="15" fill="rgb(205,185,37)" fg:x="24993" fg:w="988"/><text x="40.9386%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (456 samples, 0.74%)</title><rect x="41.5547%" y="277" width="0.7424%" height="15" fill="rgb(238,207,15)" fg:x="25525" fg:w="456"/><text x="41.8047%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (17,705 samples, 28.82%)</title><rect x="42.2971%" y="293" width="28.8238%" height="15" fill="rgb(213,199,42)" fg:x="25981" fg:w="17705"/><text x="42.5471%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::g..</text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="71.1258%" y="277" width="0.0114%" height="15" fill="rgb(235,201,11)" fg:x="43689" fg:w="7"/><text x="71.3758%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (657 samples, 1.07%)</title><rect x="71.1388%" y="277" width="1.0696%" height="15" fill="rgb(207,46,11)" fg:x="43697" fg:w="657"/><text x="71.3888%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,406 samples, 2.29%)</title><rect x="71.1209%" y="293" width="2.2890%" height="15" fill="rgb(241,35,35)" fg:x="43686" fg:w="1406"/><text x="71.3709%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (738 samples, 1.20%)</title><rect x="72.2084%" y="277" width="1.2015%" height="15" fill="rgb(243,32,47)" fg:x="44354" fg:w="738"/><text x="72.4584%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (15 samples, 0.02%)</title><rect x="73.3854%" y="261" width="0.0244%" height="15" fill="rgb(247,202,23)" fg:x="45077" fg:w="15"/><text x="73.6354%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (14 samples, 0.02%)</title><rect x="73.3871%" y="245" width="0.0228%" height="15" fill="rgb(219,102,11)" fg:x="45078" fg:w="14"/><text x="73.6371%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="73.3871%" y="229" width="0.0228%" height="15" fill="rgb(243,110,44)" fg:x="45078" fg:w="14"/><text x="73.6371%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="73.3919%" y="213" width="0.0179%" height="15" fill="rgb(222,74,54)" fg:x="45081" fg:w="11"/><text x="73.6419%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (16,317 samples, 26.56%)</title><rect x="73.4098%" y="293" width="26.5641%" height="15" fill="rgb(216,99,12)" fg:x="45092" fg:w="16317"/><text x="73.6598%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (11,911 samples, 19.39%)</title><rect x="80.5828%" y="277" width="19.3911%" height="15" fill="rgb(226,22,26)" fg:x="49498" fg:w="11911"/><text x="80.8328%" y="287.50">rust_qecp`rust_qecp::ftqec::Pl..</text></g><g><title>all (61,425 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="61425"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,344 samples, 98.24%)</title><rect x="1.7599%" y="373" width="98.2401%" height="15" fill="rgb(213,25,53)" fg:x="1081" fg:w="60344"/><text x="2.0099%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,344 samples, 98.24%)</title><rect x="1.7599%" y="357" width="98.2401%" height="15" fill="rgb(252,105,26)" fg:x="1081" fg:w="60344"/><text x="2.0099%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,344 samples, 98.24%)</title><rect x="1.7599%" y="341" width="98.2401%" height="15" fill="rgb(220,39,43)" fg:x="1081" fg:w="60344"/><text x="2.0099%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,344 samples, 98.24%)</title><rect x="1.7599%" y="325" width="98.2401%" height="15" fill="rgb(229,68,48)" fg:x="1081" fg:w="60344"/><text x="2.0099%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,339 samples, 98.23%)</title><rect x="1.7680%" y="309" width="98.2320%" height="15" fill="rgb(252,8,32)" fg:x="1086" fg:w="60339"/><text x="2.0180%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16 samples, 0.03%)</title><rect x="99.9740%" y="293" width="0.0260%" height="15" fill="rgb(223,20,43)" fg:x="61409" fg:w="16"/><text x="100.2240%" y="303.50"></text></g></svg></svg>