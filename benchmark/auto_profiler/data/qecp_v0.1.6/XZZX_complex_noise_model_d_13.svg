<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="67862"><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="0.0368%" y="149" width="0.0133%" height="15" fill="rgb(227,0,7)" fg:x="25" fg:w="9"/><text x="0.2868%" y="159.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0530%" y="133" width="0.0103%" height="15" fill="rgb(217,0,24)" fg:x="36" fg:w="7"/><text x="0.3030%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.04%)</title><rect x="0.0958%" y="53" width="0.0383%" height="15" fill="rgb(221,193,54)" fg:x="65" fg:w="26"/><text x="0.3458%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.03%)</title><rect x="0.1017%" y="37" width="0.0324%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="22"/><text x="0.3517%" y="47.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.07%)</title><rect x="0.0634%" y="133" width="0.0737%" height="15" fill="rgb(208,68,35)" fg:x="43" fg:w="50"/><text x="0.3134%" y="143.50"></text></g><g><title>qecp`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (45 samples, 0.07%)</title><rect x="0.0707%" y="117" width="0.0663%" height="15" fill="rgb(232,128,0)" fg:x="48" fg:w="45"/><text x="0.3207%" y="127.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;[qecp::model_graph::ModelGraphEdge]&gt; (41 samples, 0.06%)</title><rect x="0.0766%" y="101" width="0.0604%" height="15" fill="rgb(207,160,47)" fg:x="52" fg:w="41"/><text x="0.3266%" y="111.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (37 samples, 0.05%)</title><rect x="0.0825%" y="85" width="0.0545%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="37"/><text x="0.3325%" y="95.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.05%)</title><rect x="0.0840%" y="69" width="0.0530%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="36"/><text x="0.3340%" y="79.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (72 samples, 0.11%)</title><rect x="0.0339%" y="165" width="0.1061%" height="15" fill="rgb(220,122,19)" fg:x="23" fg:w="72"/><text x="0.2839%" y="175.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (61 samples, 0.09%)</title><rect x="0.0501%" y="149" width="0.0899%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="61"/><text x="0.3001%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="0.1650%" y="101" width="0.0221%" height="15" fill="rgb(240,193,28)" fg:x="112" fg:w="15"/><text x="0.4150%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="0.1665%" y="85" width="0.0206%" height="15" fill="rgb(216,20,37)" fg:x="113" fg:w="14"/><text x="0.4165%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (7 samples, 0.01%)</title><rect x="0.1768%" y="69" width="0.0103%" height="15" fill="rgb(206,188,39)" fg:x="120" fg:w="7"/><text x="0.4268%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.1768%" y="53" width="0.0103%" height="15" fill="rgb(217,207,13)" fg:x="120" fg:w="7"/><text x="0.4268%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="0.2726%" y="85" width="0.0236%" height="15" fill="rgb(231,73,38)" fg:x="185" fg:w="16"/><text x="0.5226%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="0.2859%" y="69" width="0.0103%" height="15" fill="rgb(225,20,46)" fg:x="194" fg:w="7"/><text x="0.5359%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="0.2859%" y="53" width="0.0103%" height="15" fill="rgb(210,31,41)" fg:x="194" fg:w="7"/><text x="0.5359%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="0.3610%" y="53" width="0.0118%" height="15" fill="rgb(221,200,47)" fg:x="245" fg:w="8"/><text x="0.6110%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.01%)</title><rect x="0.3728%" y="53" width="0.0118%" height="15" fill="rgb(226,26,5)" fg:x="253" fg:w="8"/><text x="0.6228%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (7 samples, 0.01%)</title><rect x="0.3846%" y="53" width="0.0103%" height="15" fill="rgb(249,33,26)" fg:x="261" fg:w="7"/><text x="0.6346%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (21 samples, 0.03%)</title><rect x="0.3949%" y="53" width="0.0309%" height="15" fill="rgb(235,183,28)" fg:x="268" fg:w="21"/><text x="0.6449%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="0.4038%" y="37" width="0.0221%" height="15" fill="rgb(221,5,38)" fg:x="274" fg:w="15"/><text x="0.6538%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (102 samples, 0.15%)</title><rect x="0.2962%" y="85" width="0.1503%" height="15" fill="rgb(247,18,42)" fg:x="201" fg:w="102"/><text x="0.5462%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (94 samples, 0.14%)</title><rect x="0.3080%" y="69" width="0.1385%" height="15" fill="rgb(241,131,45)" fg:x="209" fg:w="94"/><text x="0.5580%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (14 samples, 0.02%)</title><rect x="0.4259%" y="53" width="0.0206%" height="15" fill="rgb(249,31,29)" fg:x="289" fg:w="14"/><text x="0.6759%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="0.4273%" y="37" width="0.0192%" height="15" fill="rgb(225,111,53)" fg:x="290" fg:w="13"/><text x="0.6773%" y="47.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (214 samples, 0.32%)</title><rect x="0.1400%" y="117" width="0.3153%" height="15" fill="rgb(238,160,17)" fg:x="95" fg:w="214"/><text x="0.3900%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (179 samples, 0.26%)</title><rect x="0.1916%" y="101" width="0.2638%" height="15" fill="rgb(214,148,48)" fg:x="130" fg:w="179"/><text x="0.4416%" y="111.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;qecp::decoder_union_find::UnionFindDecoder&gt;&gt; (299 samples, 0.44%)</title><rect x="0.0339%" y="181" width="0.4406%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="299"/><text x="0.2839%" y="191.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;qecp::complete_model_graph::CompleteModelGraph&gt; (227 samples, 0.33%)</title><rect x="0.1400%" y="165" width="0.3345%" height="15" fill="rgb(209,103,24)" fg:x="95" fg:w="227"/><text x="0.3900%" y="175.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt;&gt; (227 samples, 0.33%)</title><rect x="0.1400%" y="149" width="0.3345%" height="15" fill="rgb(229,88,8)" fg:x="95" fg:w="227"/><text x="0.3900%" y="159.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (227 samples, 0.33%)</title><rect x="0.1400%" y="133" width="0.3345%" height="15" fill="rgb(213,181,19)" fg:x="95" fg:w="227"/><text x="0.3900%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (13 samples, 0.02%)</title><rect x="0.4553%" y="117" width="0.0192%" height="15" fill="rgb(254,191,54)" fg:x="309" fg:w="13"/><text x="0.7053%" y="127.50"></text></g><g><title>qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (11 samples, 0.02%)</title><rect x="0.4819%" y="165" width="0.0162%" height="15" fill="rgb(241,83,37)" fg:x="327" fg:w="11"/><text x="0.7319%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (11 samples, 0.02%)</title><rect x="0.4819%" y="149" width="0.0162%" height="15" fill="rgb(233,36,39)" fg:x="327" fg:w="11"/><text x="0.7319%" y="159.50"></text></g><g><title>qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (21 samples, 0.03%)</title><rect x="0.4774%" y="181" width="0.0309%" height="15" fill="rgb(226,3,54)" fg:x="324" fg:w="21"/><text x="0.7274%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="0.5246%" y="149" width="0.0103%" height="15" fill="rgb(245,192,40)" fg:x="356" fg:w="7"/><text x="0.7746%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (56 samples, 0.08%)</title><rect x="0.5349%" y="149" width="0.0825%" height="15" fill="rgb(238,167,29)" fg:x="363" fg:w="56"/><text x="0.7849%" y="159.50"></text></g><g><title>qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (194 samples, 0.29%)</title><rect x="0.6174%" y="149" width="0.2859%" height="15" fill="rgb(232,182,51)" fg:x="419" fg:w="194"/><text x="0.8674%" y="159.50"></text></g><g><title>qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (35 samples, 0.05%)</title><rect x="0.9033%" y="149" width="0.0516%" height="15" fill="rgb(231,60,39)" fg:x="613" fg:w="35"/><text x="1.1533%" y="159.50"></text></g><g><title>qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (7 samples, 0.01%)</title><rect x="0.9622%" y="149" width="0.0103%" height="15" fill="rgb(208,69,12)" fg:x="653" fg:w="7"/><text x="1.2122%" y="159.50"></text></g><g><title>qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (256 samples, 0.38%)</title><rect x="2.7526%" y="133" width="0.3772%" height="15" fill="rgb(235,93,37)" fg:x="1868" fg:w="256"/><text x="3.0026%" y="143.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (811 samples, 1.20%)</title><rect x="3.1299%" y="133" width="1.1951%" height="15" fill="rgb(213,116,39)" fg:x="2124" fg:w="811"/><text x="3.3799%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (116 samples, 0.17%)</title><rect x="5.2327%" y="101" width="0.1709%" height="15" fill="rgb(222,207,29)" fg:x="3551" fg:w="116"/><text x="5.4827%" y="111.50"></text></g><g><title>qecp`DYLD-STUB$$memmove (10 samples, 0.01%)</title><rect x="5.4036%" y="101" width="0.0147%" height="15" fill="rgb(206,96,30)" fg:x="3667" fg:w="10"/><text x="5.6536%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.04%)</title><rect x="5.6438%" y="85" width="0.0442%" height="15" fill="rgb(218,138,4)" fg:x="3830" fg:w="30"/><text x="5.8938%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.04%)</title><rect x="5.6526%" y="69" width="0.0354%" height="15" fill="rgb(250,191,14)" fg:x="3836" fg:w="24"/><text x="5.9026%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.03%)</title><rect x="5.6556%" y="53" width="0.0324%" height="15" fill="rgb(239,60,40)" fg:x="3838" fg:w="22"/><text x="5.9056%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="5.6762%" y="37" width="0.0118%" height="15" fill="rgb(206,27,48)" fg:x="3852" fg:w="8"/><text x="5.9262%" y="47.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (185 samples, 0.27%)</title><rect x="5.4198%" y="101" width="0.2726%" height="15" fill="rgb(225,35,8)" fg:x="3678" fg:w="185"/><text x="5.6698%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (330 samples, 0.49%)</title><rect x="5.2091%" y="117" width="0.4863%" height="15" fill="rgb(250,213,24)" fg:x="3535" fg:w="330"/><text x="5.4591%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (943 samples, 1.39%)</title><rect x="4.3250%" y="133" width="1.3896%" height="15" fill="rgb(247,123,22)" fg:x="2935" fg:w="943"/><text x="4.5750%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.02%)</title><rect x="5.6954%" y="117" width="0.0192%" height="15" fill="rgb(231,138,38)" fg:x="3865" fg:w="13"/><text x="5.9454%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (12 samples, 0.02%)</title><rect x="5.7145%" y="133" width="0.0177%" height="15" fill="rgb(231,145,46)" fg:x="3878" fg:w="12"/><text x="5.9645%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (86 samples, 0.13%)</title><rect x="5.7322%" y="133" width="0.1267%" height="15" fill="rgb(251,118,11)" fg:x="3890" fg:w="86"/><text x="5.9822%" y="143.50"></text></g><g><title>qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (415 samples, 0.61%)</title><rect x="5.8589%" y="133" width="0.6115%" height="15" fill="rgb(217,147,25)" fg:x="3976" fg:w="415"/><text x="6.1089%" y="143.50"></text></g><g><title>qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1,838 samples, 2.71%)</title><rect x="6.4705%" y="133" width="2.7084%" height="15" fill="rgb(247,81,37)" fg:x="4391" fg:w="1838"/><text x="6.7205%" y="143.50">qe..</text></g><g><title>qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (119 samples, 0.18%)</title><rect x="9.1789%" y="133" width="0.1754%" height="15" fill="rgb(209,12,38)" fg:x="6229" fg:w="119"/><text x="9.4289%" y="143.50"></text></g><g><title>qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (10 samples, 0.01%)</title><rect x="9.3543%" y="133" width="0.0147%" height="15" fill="rgb(227,1,9)" fg:x="6348" fg:w="10"/><text x="9.6043%" y="143.50"></text></g><g><title>qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (383 samples, 0.56%)</title><rect x="9.3734%" y="133" width="0.5644%" height="15" fill="rgb(248,47,43)" fg:x="6361" fg:w="383"/><text x="9.6234%" y="143.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (62 samples, 0.09%)</title><rect x="10.0115%" y="117" width="0.0914%" height="15" fill="rgb(221,10,30)" fg:x="6794" fg:w="62"/><text x="10.2615%" y="127.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.02%)</title><rect x="10.1029%" y="117" width="0.0177%" height="15" fill="rgb(210,229,1)" fg:x="6856" fg:w="12"/><text x="10.3529%" y="127.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="10.1043%" y="101" width="0.0162%" height="15" fill="rgb(222,148,37)" fg:x="6857" fg:w="11"/><text x="10.3543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="10.1088%" y="85" width="0.0118%" height="15" fill="rgb(234,67,33)" fg:x="6860" fg:w="8"/><text x="10.3588%" y="95.50"></text></g><g><title>qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (44 samples, 0.06%)</title><rect x="10.1205%" y="117" width="0.0648%" height="15" fill="rgb(247,98,35)" fg:x="6868" fg:w="44"/><text x="10.3705%" y="127.50"></text></g><g><title>qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (236 samples, 0.35%)</title><rect x="9.9378%" y="133" width="0.3478%" height="15" fill="rgb(247,138,52)" fg:x="6744" fg:w="236"/><text x="10.1878%" y="143.50"></text></g><g><title>qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (68 samples, 0.10%)</title><rect x="10.1854%" y="117" width="0.1002%" height="15" fill="rgb(213,79,30)" fg:x="6912" fg:w="68"/><text x="10.4354%" y="127.50"></text></g><g><title>qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.03%)</title><rect x="10.2517%" y="101" width="0.0339%" height="15" fill="rgb(246,177,23)" fg:x="6957" fg:w="23"/><text x="10.5017%" y="111.50"></text></g><g><title>qecp`priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (23 samples, 0.03%)</title><rect x="10.2856%" y="133" width="0.0339%" height="15" fill="rgb(230,62,27)" fg:x="6980" fg:w="23"/><text x="10.5356%" y="143.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_node_mut_unwrap (9 samples, 0.01%)</title><rect x="10.3195%" y="133" width="0.0133%" height="15" fill="rgb(216,154,8)" fg:x="7003" fg:w="9"/><text x="10.5695%" y="143.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute (6,670 samples, 9.83%)</title><rect x="0.5231%" y="165" width="9.8288%" height="15" fill="rgb(244,35,45)" fg:x="355" fg:w="6670"/><text x="0.7731%" y="175.50">qecp`qecp::com..</text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute_dijkstra_with_end_position (6,361 samples, 9.37%)</title><rect x="0.9785%" y="149" width="9.3734%" height="15" fill="rgb(251,115,12)" fg:x="664" fg:w="6361"/><text x="1.2285%" y="159.50">qecp`qecp::co..</text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_node_unwrap (13 samples, 0.02%)</title><rect x="10.3327%" y="133" width="0.0192%" height="15" fill="rgb(240,54,50)" fg:x="7012" fg:w="13"/><text x="10.5827%" y="143.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="10.3622%" y="149" width="0.0133%" height="15" fill="rgb(233,84,52)" fg:x="7032" fg:w="9"/><text x="10.6122%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="10.3873%" y="149" width="0.0103%" height="15" fill="rgb(207,117,47)" fg:x="7049" fg:w="7"/><text x="10.6373%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="10.6186%" y="101" width="0.0103%" height="15" fill="rgb(249,43,39)" fg:x="7206" fg:w="7"/><text x="10.8686%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="10.6186%" y="117" width="0.0118%" height="15" fill="rgb(209,38,44)" fg:x="7206" fg:w="8"/><text x="10.8686%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="10.6186%" y="133" width="0.0133%" height="15" fill="rgb(236,212,23)" fg:x="7206" fg:w="9"/><text x="10.8686%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.01%)</title><rect x="10.6333%" y="133" width="0.0118%" height="15" fill="rgb(242,79,21)" fg:x="7216" fg:w="8"/><text x="10.8833%" y="143.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (192 samples, 0.28%)</title><rect x="10.4197%" y="149" width="0.2829%" height="15" fill="rgb(211,96,35)" fg:x="7071" fg:w="192"/><text x="10.6697%" y="159.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (33 samples, 0.05%)</title><rect x="10.6540%" y="133" width="0.0486%" height="15" fill="rgb(253,215,40)" fg:x="7230" fg:w="33"/><text x="10.9040%" y="143.50"></text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::build_with_region (241 samples, 0.36%)</title><rect x="10.3519%" y="165" width="0.3551%" height="15" fill="rgb(211,81,21)" fg:x="7025" fg:w="241"/><text x="10.6019%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.01%)</title><rect x="10.7365%" y="133" width="0.0147%" height="15" fill="rgb(208,190,38)" fg:x="7286" fg:w="10"/><text x="10.9865%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="10.7380%" y="117" width="0.0133%" height="15" fill="rgb(235,213,38)" fg:x="7287" fg:w="9"/><text x="10.9880%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="10.7409%" y="101" width="0.0103%" height="15" fill="rgb(237,122,38)" fg:x="7289" fg:w="7"/><text x="10.9909%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="10.7542%" y="133" width="0.0118%" height="15" fill="rgb(244,218,35)" fg:x="7298" fg:w="8"/><text x="11.0042%" y="143.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="10.7792%" y="133" width="0.0265%" height="15" fill="rgb(240,68,47)" fg:x="7315" fg:w="18"/><text x="11.0292%" y="143.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="10.8058%" y="133" width="0.0103%" height="15" fill="rgb(210,16,53)" fg:x="7333" fg:w="7"/><text x="11.0558%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="10.8175%" y="133" width="0.0118%" height="15" fill="rgb(235,124,12)" fg:x="7341" fg:w="8"/><text x="11.0675%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="10.8190%" y="117" width="0.0103%" height="15" fill="rgb(224,169,11)" fg:x="7342" fg:w="7"/><text x="11.0690%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (42 samples, 0.06%)</title><rect x="10.8352%" y="133" width="0.0619%" height="15" fill="rgb(250,166,2)" fg:x="7353" fg:w="42"/><text x="11.0852%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (14 samples, 0.02%)</title><rect x="10.8971%" y="133" width="0.0206%" height="15" fill="rgb(242,216,29)" fg:x="7395" fg:w="14"/><text x="11.1471%" y="143.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="10.9222%" y="117" width="0.0177%" height="15" fill="rgb(230,116,27)" fg:x="7412" fg:w="12"/><text x="11.1722%" y="127.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.02%)</title><rect x="10.9207%" y="133" width="0.0206%" height="15" fill="rgb(228,99,48)" fg:x="7411" fg:w="14"/><text x="11.1707%" y="143.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::add_edge_between (16 samples, 0.02%)</title><rect x="10.9487%" y="133" width="0.0236%" height="15" fill="rgb(253,11,6)" fg:x="7430" fg:w="16"/><text x="11.1987%" y="143.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::add_edge (15 samples, 0.02%)</title><rect x="10.9502%" y="117" width="0.0221%" height="15" fill="rgb(247,143,39)" fg:x="7431" fg:w="15"/><text x="11.2002%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.04%)</title><rect x="11.7223%" y="117" width="0.0354%" height="15" fill="rgb(236,97,10)" fg:x="7955" fg:w="24"/><text x="11.9723%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="11.7459%" y="101" width="0.0118%" height="15" fill="rgb(233,208,19)" fg:x="7971" fg:w="8"/><text x="11.9959%" y="111.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="11.7680%" y="117" width="0.0221%" height="15" fill="rgb(216,164,2)" fg:x="7986" fg:w="15"/><text x="12.0180%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (7 samples, 0.01%)</title><rect x="11.7798%" y="101" width="0.0103%" height="15" fill="rgb(220,129,5)" fg:x="7994" fg:w="7"/><text x="12.0298%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="11.8107%" y="85" width="0.0280%" height="15" fill="rgb(242,17,10)" fg:x="8015" fg:w="19"/><text x="12.0607%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.02%)</title><rect x="11.8152%" y="69" width="0.0236%" height="15" fill="rgb(242,107,0)" fg:x="8018" fg:w="16"/><text x="12.0652%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="11.8166%" y="53" width="0.0221%" height="15" fill="rgb(251,28,31)" fg:x="8019" fg:w="15"/><text x="12.0666%" y="63.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (36 samples, 0.05%)</title><rect x="11.7901%" y="117" width="0.0530%" height="15" fill="rgb(233,223,10)" fg:x="8001" fg:w="36"/><text x="12.0401%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (34 samples, 0.05%)</title><rect x="11.7931%" y="101" width="0.0501%" height="15" fill="rgb(215,21,27)" fg:x="8003" fg:w="34"/><text x="12.0431%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (13 samples, 0.02%)</title><rect x="11.8432%" y="117" width="0.0192%" height="15" fill="rgb(232,23,21)" fg:x="8037" fg:w="13"/><text x="12.0932%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (36 samples, 0.05%)</title><rect x="11.8667%" y="117" width="0.0530%" height="15" fill="rgb(244,5,23)" fg:x="8053" fg:w="36"/><text x="12.1167%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="11.9301%" y="85" width="0.0309%" height="15" fill="rgb(226,81,46)" fg:x="8096" fg:w="21"/><text x="12.1801%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="11.9375%" y="69" width="0.0236%" height="15" fill="rgb(247,70,30)" fg:x="8101" fg:w="16"/><text x="12.1875%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="11.9404%" y="53" width="0.0206%" height="15" fill="rgb(212,68,19)" fg:x="8103" fg:w="14"/><text x="12.1904%" y="63.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.04%)</title><rect x="11.9227%" y="117" width="0.0427%" height="15" fill="rgb(240,187,13)" fg:x="8091" fg:w="29"/><text x="12.1727%" y="127.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (24 samples, 0.04%)</title><rect x="11.9301%" y="101" width="0.0354%" height="15" fill="rgb(223,113,26)" fg:x="8096" fg:w="24"/><text x="12.1801%" y="111.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (846 samples, 1.25%)</title><rect x="10.9737%" y="133" width="1.2466%" height="15" fill="rgb(206,192,2)" fg:x="7447" fg:w="846"/><text x="11.2237%" y="143.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (171 samples, 0.25%)</title><rect x="11.9684%" y="117" width="0.2520%" height="15" fill="rgb(241,108,4)" fg:x="8122" fg:w="171"/><text x="12.2184%" y="127.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::new (7,951 samples, 11.72%)</title><rect x="0.5113%" y="181" width="11.7164%" height="15" fill="rgb(247,173,49)" fg:x="347" fg:w="7951"/><text x="0.7613%" y="191.50">qecp`qecp::decode..</text></g><g><title>qecp`qecp::model_graph::ModelGraph::build (1,032 samples, 1.52%)</title><rect x="10.7070%" y="165" width="1.5207%" height="15" fill="rgb(224,114,35)" fg:x="7266" fg:w="1032"/><text x="10.9570%" y="175.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build_with_weight_function_region (1,020 samples, 1.50%)</title><rect x="10.7247%" y="149" width="1.5031%" height="15" fill="rgb(245,159,27)" fg:x="7278" fg:w="1020"/><text x="10.9747%" y="159.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.02%)</title><rect x="12.2513%" y="165" width="0.0206%" height="15" fill="rgb(245,172,44)" fg:x="8314" fg:w="14"/><text x="12.5013%" y="175.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.01%)</title><rect x="12.2602%" y="149" width="0.0118%" height="15" fill="rgb(236,23,11)" fg:x="8320" fg:w="8"/><text x="12.5102%" y="159.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="12.2926%" y="117" width="0.0133%" height="15" fill="rgb(205,117,38)" fg:x="8342" fg:w="9"/><text x="12.5426%" y="127.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::hash::Hash&gt;::hash (21 samples, 0.03%)</title><rect x="12.2764%" y="133" width="0.0309%" height="15" fill="rgb(237,72,25)" fg:x="8331" fg:w="21"/><text x="12.5264%" y="143.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::hash::Hash&gt;::hash (31 samples, 0.05%)</title><rect x="12.2749%" y="149" width="0.0457%" height="15" fill="rgb(244,70,9)" fg:x="8330" fg:w="31"/><text x="12.5249%" y="159.50"></text></g><g><title>qecp`core::hash::impls::_&lt;impl core::hash::Hash for u64&gt;::hash (7 samples, 0.01%)</title><rect x="12.3103%" y="133" width="0.0103%" height="15" fill="rgb(217,125,39)" fg:x="8354" fg:w="7"/><text x="12.5603%" y="143.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (32 samples, 0.05%)</title><rect x="12.2749%" y="165" width="0.0472%" height="15" fill="rgb(235,36,10)" fg:x="8330" fg:w="32"/><text x="12.5249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="12.3221%" y="149" width="0.0118%" height="15" fill="rgb(251,123,47)" fg:x="8362" fg:w="8"/><text x="12.5721%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="12.3501%" y="133" width="0.0118%" height="15" fill="rgb(221,13,13)" fg:x="8381" fg:w="8"/><text x="12.6001%" y="143.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_hashkey::key::Key&lt;serde_hashkey::float::ordered_float::OrderedFloatPolicy&gt;&gt; (34 samples, 0.05%)</title><rect x="12.3221%" y="165" width="0.0501%" height="15" fill="rgb(238,131,9)" fg:x="8362" fg:w="34"/><text x="12.5721%" y="175.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_hashkey::key::Key&lt;serde_hashkey::float::ordered_float::OrderedFloatPolicy&gt;&gt; (18 samples, 0.03%)</title><rect x="12.3456%" y="149" width="0.0265%" height="15" fill="rgb(211,50,8)" fg:x="8378" fg:w="18"/><text x="12.5956%" y="159.50"></text></g><g><title>qecp`qecp::types::_::_&lt;impl serde::ser::Serialize for qecp::types::CorrelatedPauliErrorRates&gt;::serialize (8 samples, 0.01%)</title><rect x="12.3928%" y="133" width="0.0118%" height="15" fill="rgb(245,182,24)" fg:x="8410" fg:w="8"/><text x="12.6428%" y="143.50"></text></g><g><title>qecp`&lt;serde_hashkey::ser::SerializeMap&lt;F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (35 samples, 0.05%)</title><rect x="12.3722%" y="149" width="0.0516%" height="15" fill="rgb(242,14,37)" fg:x="8396" fg:w="35"/><text x="12.6222%" y="159.50"></text></g><g><title>qecp`qecp::types::_::_&lt;impl serde::ser::Serialize for qecp::types::PauliErrorRates&gt;::serialize (13 samples, 0.02%)</title><rect x="12.4046%" y="133" width="0.0192%" height="15" fill="rgb(246,228,12)" fg:x="8418" fg:w="13"/><text x="12.6546%" y="143.50"></text></g><g><title>qecp`&lt;serde_hashkey::ser::SerializeMap&lt;F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.01%)</title><rect x="12.4105%" y="117" width="0.0133%" height="15" fill="rgb(213,55,15)" fg:x="8422" fg:w="9"/><text x="12.6605%" y="127.50"></text></g><g><title>qecp`qecp::simulator::Simulator::compress_error_rates (129 samples, 0.19%)</title><rect x="12.2351%" y="181" width="0.1901%" height="15" fill="rgb(209,9,3)" fg:x="8303" fg:w="129"/><text x="12.4851%" y="191.50"></text></g><g><title>qecp`qecp::noise_model::_::_&lt;impl serde::ser::Serialize for qecp::noise_model::NoiseModelNode&gt;::serialize (36 samples, 0.05%)</title><rect x="12.3722%" y="165" width="0.0530%" height="15" fill="rgb(230,59,30)" fg:x="8396" fg:w="36"/><text x="12.6222%" y="175.50"></text></g><g><title>qecp`qecp::tool::benchmark::_{{closure}} (7 samples, 0.01%)</title><rect x="12.4267%" y="181" width="0.0103%" height="15" fill="rgb(209,121,21)" fg:x="8433" fg:w="7"/><text x="12.6767%" y="191.50"></text></g><g><title>qecp`alloc::fmt::format (7 samples, 0.01%)</title><rect x="12.4267%" y="165" width="0.0103%" height="15" fill="rgb(220,109,13)" fg:x="8433" fg:w="7"/><text x="12.6767%" y="175.50"></text></g><g><title>qecp`std::thread::sleep (9 samples, 0.01%)</title><rect x="12.4370%" y="181" width="0.0133%" height="15" fill="rgb(232,18,1)" fg:x="8440" fg:w="9"/><text x="12.6870%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (8 samples, 0.01%)</title><rect x="12.4385%" y="165" width="0.0118%" height="15" fill="rgb(215,41,42)" fg:x="8441" fg:w="8"/><text x="12.6885%" y="175.50"></text></g><g><title>dyld`start (8,450 samples, 12.45%)</title><rect x="0.0000%" y="421" width="12.4517%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="8450"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>qecp`main (8,449 samples, 12.45%)</title><rect x="0.0015%" y="405" width="12.4503%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="415.50">qecp`main</text></g><g><title>qecp`std::rt::lang_start_internal (8,449 samples, 12.45%)</title><rect x="0.0015%" y="389" width="12.4503%" height="15" fill="rgb(205,98,50)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="399.50">qecp`std::rt::lang_..</text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (8,449 samples, 12.45%)</title><rect x="0.0015%" y="373" width="12.4503%" height="15" fill="rgb(205,185,37)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="383.50">qecp`std::rt::lang_..</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,449 samples, 12.45%)</title><rect x="0.0015%" y="357" width="12.4503%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="367.50">qecp`std::sys_commo..</text></g><g><title>qecp`qecp::main (8,449 samples, 12.45%)</title><rect x="0.0015%" y="341" width="12.4503%" height="15" fill="rgb(213,199,42)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="351.50">qecp`qecp::main</text></g><g><title>qecp`tokio::runtime::Runtime::block_on (8,449 samples, 12.45%)</title><rect x="0.0015%" y="325" width="12.4503%" height="15" fill="rgb(235,201,11)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="335.50">qecp`tokio::runtime..</text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,449 samples, 12.45%)</title><rect x="0.0015%" y="309" width="12.4503%" height="15" fill="rgb(207,46,11)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="319.50">qecp`tokio::macros:..</text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (8,449 samples, 12.45%)</title><rect x="0.0015%" y="293" width="12.4503%" height="15" fill="rgb(241,35,35)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="303.50">qecp`tokio::runtime..</text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (8,449 samples, 12.45%)</title><rect x="0.0015%" y="277" width="12.4503%" height="15" fill="rgb(243,32,47)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="287.50">qecp`std::thread::l..</text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,449 samples, 12.45%)</title><rect x="0.0015%" y="261" width="12.4503%" height="15" fill="rgb(247,202,23)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="271.50">qecp`&lt;core::future:..</text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (8,449 samples, 12.45%)</title><rect x="0.0015%" y="245" width="12.4503%" height="15" fill="rgb(219,102,11)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="255.50">qecp`std::thread::l..</text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,449 samples, 12.45%)</title><rect x="0.0015%" y="229" width="12.4503%" height="15" fill="rgb(243,110,44)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="239.50">qecp`&lt;core::future:..</text></g><g><title>qecp`qecp::tool::run_matched_tool (8,449 samples, 12.45%)</title><rect x="0.0015%" y="213" width="12.4503%" height="15" fill="rgb(222,74,54)" fg:x="1" fg:w="8449"/><text x="0.2515%" y="223.50">qecp`qecp::tool::ru..</text></g><g><title>qecp`qecp::tool::benchmark (8,445 samples, 12.44%)</title><rect x="0.0074%" y="197" width="12.4444%" height="15" fill="rgb(216,99,12)" fg:x="5" fg:w="8445"/><text x="0.2574%" y="207.50">qecp`qecp::tool::be..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="12.5726%" y="245" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="8532" fg:w="8"/><text x="12.8226%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.05%)</title><rect x="12.5608%" y="277" width="0.0545%" height="15" fill="rgb(217,163,10)" fg:x="8524" fg:w="37"/><text x="12.8108%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.05%)</title><rect x="12.5623%" y="261" width="0.0530%" height="15" fill="rgb(213,25,53)" fg:x="8525" fg:w="36"/><text x="12.8123%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.03%)</title><rect x="12.5844%" y="245" width="0.0309%" height="15" fill="rgb(252,105,26)" fg:x="8540" fg:w="21"/><text x="12.8344%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="12.6020%" y="229" width="0.0133%" height="15" fill="rgb(220,39,43)" fg:x="8552" fg:w="9"/><text x="12.8520%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.07%)</title><rect x="12.5505%" y="293" width="0.0678%" height="15" fill="rgb(229,68,48)" fg:x="8517" fg:w="46"/><text x="12.8005%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (39 samples, 0.06%)</title><rect x="12.7199%" y="229" width="0.0575%" height="15" fill="rgb(252,8,32)" fg:x="8632" fg:w="39"/><text x="12.9699%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (136 samples, 0.20%)</title><rect x="12.6816%" y="261" width="0.2004%" height="15" fill="rgb(223,20,43)" fg:x="8606" fg:w="136"/><text x="12.9316%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (125 samples, 0.18%)</title><rect x="12.6978%" y="245" width="0.1842%" height="15" fill="rgb(229,81,49)" fg:x="8617" fg:w="125"/><text x="12.9478%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (71 samples, 0.10%)</title><rect x="12.7774%" y="229" width="0.1046%" height="15" fill="rgb(236,28,36)" fg:x="8671" fg:w="71"/><text x="13.0274%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.03%)</title><rect x="12.8496%" y="213" width="0.0324%" height="15" fill="rgb(249,185,26)" fg:x="8720" fg:w="22"/><text x="13.0996%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (154 samples, 0.23%)</title><rect x="12.6595%" y="277" width="0.2269%" height="15" fill="rgb(249,174,33)" fg:x="8591" fg:w="154"/><text x="12.9095%" y="287.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (188 samples, 0.28%)</title><rect x="12.6271%" y="293" width="0.2770%" height="15" fill="rgb(233,201,37)" fg:x="8569" fg:w="188"/><text x="12.8771%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="12.8938%" y="277" width="0.0103%" height="15" fill="rgb(221,78,26)" fg:x="8750" fg:w="7"/><text x="13.1438%" y="287.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (269 samples, 0.40%)</title><rect x="12.5136%" y="309" width="0.3964%" height="15" fill="rgb(250,127,30)" fg:x="8492" fg:w="269"/><text x="12.7636%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (284 samples, 0.42%)</title><rect x="12.4930%" y="325" width="0.4185%" height="15" fill="rgb(230,49,44)" fg:x="8478" fg:w="284"/><text x="12.7430%" y="335.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (288 samples, 0.42%)</title><rect x="12.4886%" y="341" width="0.4244%" height="15" fill="rgb(229,67,23)" fg:x="8475" fg:w="288"/><text x="12.7386%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="13.0102%" y="325" width="0.0162%" height="15" fill="rgb(249,83,47)" fg:x="8829" fg:w="11"/><text x="13.2602%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.04%)</title><rect x="13.0264%" y="325" width="0.0427%" height="15" fill="rgb(215,43,3)" fg:x="8840" fg:w="29"/><text x="13.2764%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 0.04%)</title><rect x="13.0692%" y="325" width="0.0427%" height="15" fill="rgb(238,154,13)" fg:x="8869" fg:w="29"/><text x="13.3192%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="13.0927%" y="309" width="0.0192%" height="15" fill="rgb(219,56,2)" fg:x="8885" fg:w="13"/><text x="13.3427%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="13.1119%" y="325" width="0.0133%" height="15" fill="rgb(233,0,4)" fg:x="8898" fg:w="9"/><text x="13.3619%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.02%)</title><rect x="13.1252%" y="325" width="0.0177%" height="15" fill="rgb(235,30,7)" fg:x="8907" fg:w="12"/><text x="13.3752%" y="335.50"></text></g><g><title>qecp`DYLD-STUB$$free (26 samples, 0.04%)</title><rect x="13.1443%" y="325" width="0.0383%" height="15" fill="rgb(250,79,13)" fg:x="8920" fg:w="26"/><text x="13.3943%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (24 samples, 0.04%)</title><rect x="13.4744%" y="293" width="0.0354%" height="15" fill="rgb(211,146,34)" fg:x="9144" fg:w="24"/><text x="13.7244%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (142 samples, 0.21%)</title><rect x="13.3875%" y="309" width="0.2092%" height="15" fill="rgb(228,22,38)" fg:x="9085" fg:w="142"/><text x="13.6375%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (56 samples, 0.08%)</title><rect x="13.5142%" y="293" width="0.0825%" height="15" fill="rgb(235,168,5)" fg:x="9171" fg:w="56"/><text x="13.7642%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (51 samples, 0.08%)</title><rect x="13.5216%" y="277" width="0.0752%" height="15" fill="rgb(221,155,16)" fg:x="9176" fg:w="51"/><text x="13.7716%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (126 samples, 0.19%)</title><rect x="13.9356%" y="277" width="0.1857%" height="15" fill="rgb(215,215,53)" fg:x="9457" fg:w="126"/><text x="14.1856%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (501 samples, 0.74%)</title><rect x="13.5967%" y="309" width="0.7383%" height="15" fill="rgb(223,4,10)" fg:x="9227" fg:w="501"/><text x="13.8467%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (461 samples, 0.68%)</title><rect x="13.6557%" y="293" width="0.6793%" height="15" fill="rgb(234,103,6)" fg:x="9267" fg:w="461"/><text x="13.9057%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (145 samples, 0.21%)</title><rect x="14.1213%" y="277" width="0.2137%" height="15" fill="rgb(227,97,0)" fg:x="9583" fg:w="145"/><text x="14.3713%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="14.3394%" y="309" width="0.0192%" height="15" fill="rgb(234,150,53)" fg:x="9731" fg:w="13"/><text x="14.5894%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="14.3586%" y="309" width="0.0162%" height="15" fill="rgb(228,201,54)" fg:x="9744" fg:w="11"/><text x="14.6086%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1,012 samples, 1.49%)</title><rect x="12.9130%" y="341" width="1.4913%" height="15" fill="rgb(222,22,37)" fg:x="8763" fg:w="1012"/><text x="13.1630%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (829 samples, 1.22%)</title><rect x="13.1826%" y="325" width="1.2216%" height="15" fill="rgb(237,53,32)" fg:x="8946" fg:w="829"/><text x="13.4326%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="14.3836%" y="309" width="0.0206%" height="15" fill="rgb(233,25,53)" fg:x="9761" fg:w="14"/><text x="14.6336%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (45 samples, 0.07%)</title><rect x="14.4263%" y="341" width="0.0663%" height="15" fill="rgb(210,40,34)" fg:x="9790" fg:w="45"/><text x="14.6763%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (63 samples, 0.09%)</title><rect x="14.4926%" y="341" width="0.0928%" height="15" fill="rgb(241,220,44)" fg:x="9835" fg:w="63"/><text x="14.7426%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (18 samples, 0.03%)</title><rect x="14.5855%" y="341" width="0.0265%" height="15" fill="rgb(235,28,35)" fg:x="9898" fg:w="18"/><text x="14.8355%" y="351.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (276 samples, 0.41%)</title><rect x="14.6179%" y="341" width="0.4067%" height="15" fill="rgb(210,56,17)" fg:x="9920" fg:w="276"/><text x="14.8679%" y="351.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (29 samples, 0.04%)</title><rect x="15.0393%" y="341" width="0.0427%" height="15" fill="rgb(224,130,29)" fg:x="10206" fg:w="29"/><text x="15.2893%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (35 samples, 0.05%)</title><rect x="26.8707%" y="325" width="0.0516%" height="15" fill="rgb(235,212,8)" fg:x="18235" fg:w="35"/><text x="27.1207%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="26.9945%" y="309" width="0.0221%" height="15" fill="rgb(223,33,50)" fg:x="18319" fg:w="15"/><text x="27.2445%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.08%)</title><rect x="26.9370%" y="325" width="0.0810%" height="15" fill="rgb(219,149,13)" fg:x="18280" fg:w="55"/><text x="27.1870%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (73 samples, 0.11%)</title><rect x="27.0181%" y="325" width="0.1076%" height="15" fill="rgb(250,156,29)" fg:x="18335" fg:w="73"/><text x="27.2681%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (70 samples, 0.10%)</title><rect x="27.0225%" y="309" width="0.1032%" height="15" fill="rgb(216,193,19)" fg:x="18338" fg:w="70"/><text x="27.2725%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="27.1374%" y="325" width="0.0295%" height="15" fill="rgb(216,135,14)" fg:x="18416" fg:w="20"/><text x="27.3874%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.04%)</title><rect x="27.3039%" y="293" width="0.0413%" height="15" fill="rgb(241,47,5)" fg:x="18529" fg:w="28"/><text x="27.5539%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.03%)</title><rect x="27.3128%" y="277" width="0.0324%" height="15" fill="rgb(233,42,35)" fg:x="18535" fg:w="22"/><text x="27.5628%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.08%)</title><rect x="27.2715%" y="309" width="0.0766%" height="15" fill="rgb(231,13,6)" fg:x="18507" fg:w="52"/><text x="27.5215%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (40 samples, 0.06%)</title><rect x="27.4307%" y="277" width="0.0589%" height="15" fill="rgb(207,181,40)" fg:x="18615" fg:w="40"/><text x="27.6807%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (107 samples, 0.16%)</title><rect x="27.3481%" y="309" width="0.1577%" height="15" fill="rgb(254,173,49)" fg:x="18559" fg:w="107"/><text x="27.5981%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (77 samples, 0.11%)</title><rect x="27.3924%" y="293" width="0.1135%" height="15" fill="rgb(221,1,38)" fg:x="18589" fg:w="77"/><text x="27.6424%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.02%)</title><rect x="27.4896%" y="277" width="0.0162%" height="15" fill="rgb(206,124,46)" fg:x="18655" fg:w="11"/><text x="27.7396%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="27.5368%" y="309" width="0.0118%" height="15" fill="rgb(249,21,11)" fg:x="18687" fg:w="8"/><text x="27.7868%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (258 samples, 0.38%)</title><rect x="27.1846%" y="325" width="0.3802%" height="15" fill="rgb(222,201,40)" fg:x="18448" fg:w="258"/><text x="27.4346%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (11 samples, 0.02%)</title><rect x="27.5486%" y="309" width="0.0162%" height="15" fill="rgb(235,61,29)" fg:x="18695" fg:w="11"/><text x="27.7986%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="27.6031%" y="293" width="0.0133%" height="15" fill="rgb(219,207,3)" fg:x="18732" fg:w="9"/><text x="27.8531%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.01%)</title><rect x="27.6340%" y="261" width="0.0147%" height="15" fill="rgb(222,56,46)" fg:x="18753" fg:w="10"/><text x="27.8840%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.05%)</title><rect x="27.6163%" y="293" width="0.0501%" height="15" fill="rgb(239,76,54)" fg:x="18741" fg:w="34"/><text x="27.8663%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (33 samples, 0.05%)</title><rect x="27.6178%" y="277" width="0.0486%" height="15" fill="rgb(231,124,27)" fg:x="18742" fg:w="33"/><text x="27.8678%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="27.6488%" y="261" width="0.0177%" height="15" fill="rgb(249,195,6)" fg:x="18763" fg:w="12"/><text x="27.8988%" y="271.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.11%)</title><rect x="27.5648%" y="325" width="0.1135%" height="15" fill="rgb(237,174,47)" fg:x="18706" fg:w="77"/><text x="27.8148%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (61 samples, 0.09%)</title><rect x="27.5883%" y="309" width="0.0899%" height="15" fill="rgb(206,201,31)" fg:x="18722" fg:w="61"/><text x="27.8383%" y="319.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,553 samples, 2.29%)</title><rect x="27.6782%" y="325" width="2.2885%" height="15" fill="rgb(231,57,52)" fg:x="18783" fg:w="1553"/><text x="27.9282%" y="335.50">q..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.06%)</title><rect x="30.2511%" y="293" width="0.0589%" height="15" fill="rgb(248,177,22)" fg:x="20529" fg:w="40"/><text x="30.5011%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="30.3646%" y="229" width="0.0103%" height="15" fill="rgb(215,211,37)" fg:x="20606" fg:w="7"/><text x="30.6146%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.06%)</title><rect x="30.3542%" y="261" width="0.0604%" height="15" fill="rgb(241,128,51)" fg:x="20599" fg:w="41"/><text x="30.6042%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 0.06%)</title><rect x="30.3572%" y="245" width="0.0575%" height="15" fill="rgb(227,165,31)" fg:x="20601" fg:w="39"/><text x="30.6072%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.04%)</title><rect x="30.3749%" y="229" width="0.0398%" height="15" fill="rgb(228,167,24)" fg:x="20613" fg:w="27"/><text x="30.6249%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.01%)</title><rect x="30.3999%" y="213" width="0.0147%" height="15" fill="rgb(228,143,12)" fg:x="20630" fg:w="10"/><text x="30.6499%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.07%)</title><rect x="30.3484%" y="277" width="0.0693%" height="15" fill="rgb(249,149,8)" fg:x="20595" fg:w="47"/><text x="30.5984%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (70 samples, 0.10%)</title><rect x="30.3159%" y="293" width="0.1032%" height="15" fill="rgb(243,35,44)" fg:x="20573" fg:w="70"/><text x="30.5659%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (125 samples, 0.18%)</title><rect x="30.2378%" y="309" width="0.1842%" height="15" fill="rgb(246,89,9)" fg:x="20520" fg:w="125"/><text x="30.4878%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (313 samples, 0.46%)</title><rect x="29.9755%" y="325" width="0.4612%" height="15" fill="rgb(233,213,13)" fg:x="20342" fg:w="313"/><text x="30.2255%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.01%)</title><rect x="30.4220%" y="309" width="0.0147%" height="15" fill="rgb(233,141,41)" fg:x="20645" fg:w="10"/><text x="30.6720%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (12 samples, 0.02%)</title><rect x="30.4427%" y="325" width="0.0177%" height="15" fill="rgb(239,167,4)" fg:x="20659" fg:w="12"/><text x="30.6927%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (181 samples, 0.27%)</title><rect x="30.4603%" y="325" width="0.2667%" height="15" fill="rgb(209,217,16)" fg:x="20671" fg:w="181"/><text x="30.7103%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="30.8287%" y="245" width="0.0147%" height="15" fill="rgb(219,88,35)" fg:x="20921" fg:w="10"/><text x="31.0787%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="30.8125%" y="261" width="0.0354%" height="15" fill="rgb(220,193,23)" fg:x="20910" fg:w="24"/><text x="31.0625%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.09%)</title><rect x="30.7610%" y="293" width="0.0884%" height="15" fill="rgb(230,90,52)" fg:x="20875" fg:w="60"/><text x="31.0110%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.05%)</title><rect x="30.8022%" y="277" width="0.0472%" height="15" fill="rgb(252,106,19)" fg:x="20903" fg:w="32"/><text x="31.0522%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="30.8641%" y="261" width="0.0192%" height="15" fill="rgb(206,74,20)" fg:x="20945" fg:w="13"/><text x="31.1141%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="30.8582%" y="277" width="0.0309%" height="15" fill="rgb(230,138,44)" fg:x="20941" fg:w="21"/><text x="31.1082%" y="287.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (114 samples, 0.17%)</title><rect x="30.7271%" y="325" width="0.1680%" height="15" fill="rgb(235,182,43)" fg:x="20852" fg:w="114"/><text x="30.9771%" y="335.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (93 samples, 0.14%)</title><rect x="30.7580%" y="309" width="0.1370%" height="15" fill="rgb(242,16,51)" fg:x="20873" fg:w="93"/><text x="31.0080%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.04%)</title><rect x="30.8508%" y="293" width="0.0442%" height="15" fill="rgb(248,9,4)" fg:x="20936" fg:w="30"/><text x="31.1008%" y="303.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (678 samples, 1.00%)</title><rect x="30.9009%" y="325" width="0.9991%" height="15" fill="rgb(210,31,22)" fg:x="20970" fg:w="678"/><text x="31.1509%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.02%)</title><rect x="31.9752%" y="197" width="0.0236%" height="15" fill="rgb(239,54,39)" fg:x="21699" fg:w="16"/><text x="32.2252%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.07%)</title><rect x="31.9457%" y="229" width="0.0722%" height="15" fill="rgb(230,99,41)" fg:x="21679" fg:w="49"/><text x="32.1957%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (41 samples, 0.06%)</title><rect x="31.9575%" y="213" width="0.0604%" height="15" fill="rgb(253,106,12)" fg:x="21687" fg:w="41"/><text x="32.2075%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.02%)</title><rect x="31.9988%" y="197" width="0.0192%" height="15" fill="rgb(213,46,41)" fg:x="21715" fg:w="13"/><text x="32.2488%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.09%)</title><rect x="31.9442%" y="245" width="0.0884%" height="15" fill="rgb(215,133,35)" fg:x="21678" fg:w="60"/><text x="32.1942%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.01%)</title><rect x="32.0179%" y="229" width="0.0147%" height="15" fill="rgb(213,28,5)" fg:x="21728" fg:w="10"/><text x="32.2679%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (74 samples, 0.11%)</title><rect x="31.9310%" y="277" width="0.1090%" height="15" fill="rgb(215,77,49)" fg:x="21669" fg:w="74"/><text x="32.1810%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (69 samples, 0.10%)</title><rect x="31.9383%" y="261" width="0.1017%" height="15" fill="rgb(248,100,22)" fg:x="21674" fg:w="69"/><text x="32.1883%" y="271.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (98 samples, 0.14%)</title><rect x="31.9015%" y="325" width="0.1444%" height="15" fill="rgb(208,67,9)" fg:x="21649" fg:w="98"/><text x="32.1515%" y="335.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (86 samples, 0.13%)</title><rect x="31.9192%" y="309" width="0.1267%" height="15" fill="rgb(219,133,21)" fg:x="21661" fg:w="86"/><text x="32.1692%" y="319.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (78 samples, 0.11%)</title><rect x="31.9310%" y="293" width="0.1149%" height="15" fill="rgb(246,46,29)" fg:x="21669" fg:w="78"/><text x="32.1810%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (21 samples, 0.03%)</title><rect x="45.5793%" y="309" width="0.0309%" height="15" fill="rgb(246,185,52)" fg:x="30931" fg:w="21"/><text x="45.8293%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (27 samples, 0.04%)</title><rect x="45.8755%" y="293" width="0.0398%" height="15" fill="rgb(252,136,11)" fg:x="31132" fg:w="27"/><text x="46.1255%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.03%)</title><rect x="46.8259%" y="261" width="0.0339%" height="15" fill="rgb(219,138,53)" fg:x="31777" fg:w="23"/><text x="47.0759%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (33 samples, 0.05%)</title><rect x="47.1457%" y="213" width="0.0486%" height="15" fill="rgb(211,51,23)" fg:x="31994" fg:w="33"/><text x="47.3957%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (89 samples, 0.13%)</title><rect x="47.2975%" y="197" width="0.1311%" height="15" fill="rgb(247,221,28)" fg:x="32097" fg:w="89"/><text x="47.5475%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (371 samples, 0.55%)</title><rect x="47.0676%" y="229" width="0.5467%" height="15" fill="rgb(251,222,45)" fg:x="31941" fg:w="371"/><text x="47.3176%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (285 samples, 0.42%)</title><rect x="47.1943%" y="213" width="0.4200%" height="15" fill="rgb(217,162,53)" fg:x="32027" fg:w="285"/><text x="47.4443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (126 samples, 0.19%)</title><rect x="47.4286%" y="197" width="0.1857%" height="15" fill="rgb(229,93,14)" fg:x="32186" fg:w="126"/><text x="47.6786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (47 samples, 0.07%)</title><rect x="47.5450%" y="181" width="0.0693%" height="15" fill="rgb(209,67,49)" fg:x="32265" fg:w="47"/><text x="47.7950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (491 samples, 0.72%)</title><rect x="46.9924%" y="245" width="0.7235%" height="15" fill="rgb(213,87,29)" fg:x="31890" fg:w="491"/><text x="47.2424%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 0.10%)</title><rect x="47.6143%" y="229" width="0.1017%" height="15" fill="rgb(205,151,52)" fg:x="32312" fg:w="69"/><text x="47.8643%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="47.7160%" y="245" width="0.0103%" height="15" fill="rgb(253,215,39)" fg:x="32381" fg:w="7"/><text x="47.9660%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.04%)</title><rect x="47.7351%" y="245" width="0.0398%" height="15" fill="rgb(221,220,41)" fg:x="32394" fg:w="27"/><text x="47.9851%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="47.7749%" y="245" width="0.0354%" height="15" fill="rgb(218,133,21)" fg:x="32421" fg:w="24"/><text x="48.0249%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (647 samples, 0.95%)</title><rect x="46.8760%" y="261" width="0.9534%" height="15" fill="rgb(221,193,43)" fg:x="31811" fg:w="647"/><text x="47.1260%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.02%)</title><rect x="47.8103%" y="245" width="0.0192%" height="15" fill="rgb(240,128,52)" fg:x="32445" fg:w="13"/><text x="48.0603%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (869 samples, 1.28%)</title><rect x="46.5946%" y="277" width="1.2805%" height="15" fill="rgb(253,114,12)" fg:x="31620" fg:w="869"/><text x="46.8446%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (31 samples, 0.05%)</title><rect x="47.8294%" y="261" width="0.0457%" height="15" fill="rgb(215,223,47)" fg:x="32458" fg:w="31"/><text x="48.0794%" y="271.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (1,567 samples, 2.31%)</title><rect x="45.6102%" y="309" width="2.3091%" height="15" fill="rgb(248,225,23)" fg:x="30952" fg:w="1567"/><text x="45.8602%" y="319.50">q..</text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (1,360 samples, 2.00%)</title><rect x="45.9152%" y="293" width="2.0041%" height="15" fill="rgb(250,108,0)" fg:x="31159" fg:w="1360"/><text x="46.1652%" y="303.50">q..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (30 samples, 0.04%)</title><rect x="47.8751%" y="277" width="0.0442%" height="15" fill="rgb(228,208,7)" fg:x="32489" fg:w="30"/><text x="48.1251%" y="287.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (10,775 samples, 15.88%)</title><rect x="32.0459%" y="325" width="15.8778%" height="15" fill="rgb(244,45,10)" fg:x="21747" fg:w="10775"/><text x="32.2959%" y="335.50">qecp`qecp::complete_mode..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (28 samples, 0.04%)</title><rect x="47.9252%" y="309" width="0.0413%" height="15" fill="rgb(207,125,25)" fg:x="32523" fg:w="28"/><text x="48.1752%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.05%)</title><rect x="47.9665%" y="309" width="0.0545%" height="15" fill="rgb(210,195,18)" fg:x="32551" fg:w="37"/><text x="48.2165%" y="319.50"></text></g><g><title>qecp`DYLD-STUB$$memcpy (10 samples, 0.01%)</title><rect x="48.0210%" y="309" width="0.0147%" height="15" fill="rgb(249,80,12)" fg:x="32588" fg:w="10"/><text x="48.2710%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (114 samples, 0.17%)</title><rect x="54.8805%" y="277" width="0.1680%" height="15" fill="rgb(221,65,9)" fg:x="37243" fg:w="114"/><text x="55.1305%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (117 samples, 0.17%)</title><rect x="54.8790%" y="293" width="0.1724%" height="15" fill="rgb(235,49,36)" fg:x="37242" fg:w="117"/><text x="55.1290%" y="303.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_grow (4,765 samples, 7.02%)</title><rect x="48.0357%" y="309" width="7.0216%" height="15" fill="rgb(225,32,20)" fg:x="32598" fg:w="4765"/><text x="48.2857%" y="319.50">qecp`qecp..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (534 samples, 0.79%)</title><rect x="55.2062%" y="293" width="0.7869%" height="15" fill="rgb(215,141,46)" fg:x="37464" fg:w="534"/><text x="55.4562%" y="303.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_merge (802 samples, 1.18%)</title><rect x="55.0573%" y="309" width="1.1818%" height="15" fill="rgb(250,160,47)" fg:x="37363" fg:w="802"/><text x="55.3073%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (167 samples, 0.25%)</title><rect x="55.9930%" y="293" width="0.2461%" height="15" fill="rgb(216,222,40)" fg:x="37998" fg:w="167"/><text x="56.2430%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (79 samples, 0.12%)</title><rect x="56.1227%" y="277" width="0.1164%" height="15" fill="rgb(234,217,39)" fg:x="38086" fg:w="79"/><text x="56.3727%" y="287.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (295 samples, 0.43%)</title><rect x="56.3644%" y="293" width="0.4347%" height="15" fill="rgb(207,178,40)" fg:x="38250" fg:w="295"/><text x="56.6144%" y="303.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_remove (430 samples, 0.63%)</title><rect x="56.2391%" y="309" width="0.6336%" height="15" fill="rgb(221,136,13)" fg:x="38165" fg:w="430"/><text x="56.4891%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (50 samples, 0.07%)</title><rect x="56.7991%" y="293" width="0.0737%" height="15" fill="rgb(249,199,10)" fg:x="38545" fg:w="50"/><text x="57.0491%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (47 samples, 0.07%)</title><rect x="56.8035%" y="277" width="0.0693%" height="15" fill="rgb(249,222,13)" fg:x="38548" fg:w="47"/><text x="57.0535%" y="287.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_update (2,209 samples, 3.26%)</title><rect x="56.8728%" y="309" width="3.2551%" height="15" fill="rgb(244,185,38)" fg:x="38595" fg:w="2209"/><text x="57.1228%" y="319.50">qec..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (402 samples, 0.59%)</title><rect x="59.5355%" y="293" width="0.5924%" height="15" fill="rgb(236,202,9)" fg:x="40402" fg:w="402"/><text x="59.7855%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (227 samples, 0.33%)</title><rect x="60.1279%" y="309" width="0.3345%" height="15" fill="rgb(250,229,37)" fg:x="40804" fg:w="227"/><text x="60.3779%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (37 samples, 0.05%)</title><rect x="60.4624%" y="309" width="0.0545%" height="15" fill="rgb(206,174,23)" fg:x="41031" fg:w="37"/><text x="60.7124%" y="319.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_optional_grow (8,579 samples, 12.64%)</title><rect x="47.9252%" y="325" width="12.6418%" height="15" fill="rgb(211,33,43)" fg:x="32523" fg:w="8579"/><text x="48.1752%" y="335.50">qecp`qecp::decoder_..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (33 samples, 0.05%)</title><rect x="60.5184%" y="309" width="0.0486%" height="15" fill="rgb(245,58,50)" fg:x="41069" fg:w="33"/><text x="60.7684%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (71 samples, 0.10%)</title><rect x="61.2640%" y="309" width="0.1046%" height="15" fill="rgb(244,68,36)" fg:x="41575" fg:w="71"/><text x="61.5140%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.09%)</title><rect x="63.5230%" y="261" width="0.0869%" height="15" fill="rgb(232,229,15)" fg:x="43108" fg:w="59"/><text x="63.7730%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="63.6689%" y="245" width="0.0472%" height="15" fill="rgb(254,30,23)" fg:x="43207" fg:w="32"/><text x="63.9189%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.04%)</title><rect x="63.6733%" y="229" width="0.0427%" height="15" fill="rgb(235,160,14)" fg:x="43210" fg:w="29"/><text x="63.9233%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.04%)</title><rect x="63.6733%" y="213" width="0.0427%" height="15" fill="rgb(212,155,44)" fg:x="43210" fg:w="29"/><text x="63.9233%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.02%)</title><rect x="63.6925%" y="197" width="0.0236%" height="15" fill="rgb(226,2,50)" fg:x="43223" fg:w="16"/><text x="63.9425%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (67 samples, 0.10%)</title><rect x="63.6188%" y="261" width="0.0987%" height="15" fill="rgb(234,177,6)" fg:x="43173" fg:w="67"/><text x="63.8688%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (145 samples, 0.21%)</title><rect x="63.5068%" y="277" width="0.2137%" height="15" fill="rgb(217,24,9)" fg:x="43097" fg:w="145"/><text x="63.7568%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (377 samples, 0.56%)</title><rect x="63.1738%" y="293" width="0.5555%" height="15" fill="rgb(220,13,46)" fg:x="42871" fg:w="377"/><text x="63.4238%" y="303.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (2,146 samples, 3.16%)</title><rect x="60.5685%" y="325" width="3.1623%" height="15" fill="rgb(239,221,27)" fg:x="41103" fg:w="2146"/><text x="60.8185%" y="335.50">qec..</text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (1,603 samples, 2.36%)</title><rect x="61.3687%" y="309" width="2.3621%" height="15" fill="rgb(222,198,25)" fg:x="41646" fg:w="1603"/><text x="61.6187%" y="319.50">qe..</text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (83 samples, 0.12%)</title><rect x="65.3812%" y="309" width="0.1223%" height="15" fill="rgb(211,99,13)" fg:x="44369" fg:w="83"/><text x="65.6312%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.03%)</title><rect x="65.5153%" y="229" width="0.0324%" height="15" fill="rgb(232,111,31)" fg:x="44460" fg:w="22"/><text x="65.7653%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.03%)</title><rect x="65.5153%" y="213" width="0.0324%" height="15" fill="rgb(245,82,37)" fg:x="44460" fg:w="22"/><text x="65.7653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (8 samples, 0.01%)</title><rect x="65.5610%" y="229" width="0.0118%" height="15" fill="rgb(227,149,46)" fg:x="44491" fg:w="8"/><text x="65.8110%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="65.5728%" y="229" width="0.0162%" height="15" fill="rgb(218,36,50)" fg:x="44499" fg:w="11"/><text x="65.8228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (56 samples, 0.08%)</title><rect x="65.5124%" y="245" width="0.0825%" height="15" fill="rgb(226,80,48)" fg:x="44458" fg:w="56"/><text x="65.7624%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (88 samples, 0.13%)</title><rect x="65.5079%" y="261" width="0.1297%" height="15" fill="rgb(238,224,15)" fg:x="44455" fg:w="88"/><text x="65.7579%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.04%)</title><rect x="65.5949%" y="245" width="0.0427%" height="15" fill="rgb(241,136,10)" fg:x="44514" fg:w="29"/><text x="65.8449%" y="255.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (102 samples, 0.15%)</title><rect x="65.5035%" y="309" width="0.1503%" height="15" fill="rgb(208,32,45)" fg:x="44452" fg:w="102"/><text x="65.7535%" y="319.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (100 samples, 0.15%)</title><rect x="65.5065%" y="293" width="0.1474%" height="15" fill="rgb(207,135,9)" fg:x="44454" fg:w="100"/><text x="65.7565%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (99 samples, 0.15%)</title><rect x="65.5079%" y="277" width="0.1459%" height="15" fill="rgb(206,86,44)" fg:x="44455" fg:w="99"/><text x="65.7579%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="65.6435%" y="261" width="0.0103%" height="15" fill="rgb(245,177,15)" fg:x="44547" fg:w="7"/><text x="65.8935%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="65.6435%" y="245" width="0.0103%" height="15" fill="rgb(206,64,50)" fg:x="44547" fg:w="7"/><text x="65.8935%" y="255.50"></text></g><g><title>qecp`qecp::simulator::SparseDetectedErasures::get_erasure_edges (1,411 samples, 2.08%)</title><rect x="63.7308%" y="325" width="2.0792%" height="15" fill="rgb(234,36,40)" fg:x="43249" fg:w="1411"/><text x="63.9808%" y="335.50">q..</text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::get_node_unwrap (106 samples, 0.16%)</title><rect x="65.6538%" y="309" width="0.1562%" height="15" fill="rgb(213,64,8)" fg:x="44554" fg:w="106"/><text x="65.9038%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (271 samples, 0.40%)</title><rect x="65.8100%" y="325" width="0.3993%" height="15" fill="rgb(210,75,36)" fg:x="44660" fg:w="271"/><text x="66.0600%" y="335.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_erasure (34,732 samples, 51.18%)</title><rect x="15.0821%" y="341" width="51.1803%" height="15" fill="rgb(229,88,21)" fg:x="10235" fg:w="34732"/><text x="15.3321%" y="351.50">qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_erasure</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (36 samples, 0.05%)</title><rect x="66.2094%" y="325" width="0.0530%" height="15" fill="rgb(252,204,47)" fg:x="44931" fg:w="36"/><text x="66.4594%" y="335.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (21 samples, 0.03%)</title><rect x="66.2315%" y="309" width="0.0309%" height="15" fill="rgb(208,77,27)" fg:x="44946" fg:w="21"/><text x="66.4815%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (326 samples, 0.48%)</title><rect x="75.2483%" y="309" width="0.4804%" height="15" fill="rgb(221,76,26)" fg:x="51065" fg:w="326"/><text x="75.4983%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (331 samples, 0.49%)</title><rect x="75.2424%" y="325" width="0.4878%" height="15" fill="rgb(225,139,18)" fg:x="51061" fg:w="331"/><text x="75.4924%" y="335.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (331 samples, 0.49%)</title><rect x="75.7316%" y="325" width="0.4878%" height="15" fill="rgb(230,137,11)" fg:x="51393" fg:w="331"/><text x="75.9816%" y="335.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (14,610 samples, 21.53%)</title><rect x="66.2624%" y="341" width="21.5290%" height="15" fill="rgb(212,28,1)" fg:x="44967" fg:w="14610"/><text x="66.5124%" y="351.50">qecp`qecp::simulator::Simulator::g..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (7,853 samples, 11.57%)</title><rect x="76.2194%" y="325" width="11.5720%" height="15" fill="rgb(248,164,17)" fg:x="51724" fg:w="7853"/><text x="76.4694%" y="335.50">qecp`qecp::simula..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (6,510 samples, 9.59%)</title><rect x="78.1984%" y="309" width="9.5930%" height="15" fill="rgb(222,171,42)" fg:x="53067" fg:w="6510"/><text x="78.4484%" y="319.50">qecp`qecp::sim..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.02%)</title><rect x="91.7642%" y="229" width="0.0162%" height="15" fill="rgb(243,84,45)" fg:x="62273" fg:w="11"/><text x="92.0142%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (108 samples, 0.16%)</title><rect x="91.7406%" y="261" width="0.1591%" height="15" fill="rgb(252,49,23)" fg:x="62257" fg:w="108"/><text x="91.9906%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (104 samples, 0.15%)</title><rect x="91.7465%" y="245" width="0.1533%" height="15" fill="rgb(215,19,7)" fg:x="62261" fg:w="104"/><text x="91.9965%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (81 samples, 0.12%)</title><rect x="91.7804%" y="229" width="0.1194%" height="15" fill="rgb(238,81,41)" fg:x="62284" fg:w="81"/><text x="92.0304%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.06%)</title><rect x="91.8423%" y="213" width="0.0575%" height="15" fill="rgb(210,199,37)" fg:x="62326" fg:w="39"/><text x="92.0923%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (121 samples, 0.18%)</title><rect x="91.7244%" y="277" width="0.1783%" height="15" fill="rgb(244,192,49)" fg:x="62246" fg:w="121"/><text x="91.9744%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (170 samples, 0.25%)</title><rect x="91.6610%" y="293" width="0.2505%" height="15" fill="rgb(226,211,11)" fg:x="62203" fg:w="170"/><text x="91.9110%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (217 samples, 0.32%)</title><rect x="91.6006%" y="309" width="0.3198%" height="15" fill="rgb(236,162,54)" fg:x="62162" fg:w="217"/><text x="91.8506%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,009 samples, 1.49%)</title><rect x="90.4586%" y="325" width="1.4868%" height="15" fill="rgb(220,229,9)" fg:x="61387" fg:w="1009"/><text x="90.7086%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 0.03%)</title><rect x="91.9204%" y="309" width="0.0251%" height="15" fill="rgb(250,87,22)" fg:x="62379" fg:w="17"/><text x="92.1704%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_detected_erasures (2,829 samples, 4.17%)</title><rect x="87.7914%" y="341" width="4.1688%" height="15" fill="rgb(239,43,17)" fg:x="59577" fg:w="2829"/><text x="88.0414%" y="351.50">qecp`..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (10 samples, 0.01%)</title><rect x="91.9454%" y="325" width="0.0147%" height="15" fill="rgb(231,177,25)" fg:x="62396" fg:w="10"/><text x="92.1954%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.03%)</title><rect x="95.8062%" y="229" width="0.0251%" height="15" fill="rgb(219,179,1)" fg:x="65016" fg:w="17"/><text x="96.0562%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 0.09%)</title><rect x="95.7944%" y="261" width="0.0943%" height="15" fill="rgb(238,219,53)" fg:x="65008" fg:w="64"/><text x="96.0444%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (61 samples, 0.09%)</title><rect x="95.7988%" y="245" width="0.0899%" height="15" fill="rgb(232,167,36)" fg:x="65011" fg:w="61"/><text x="96.0488%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (39 samples, 0.06%)</title><rect x="95.8312%" y="229" width="0.0575%" height="15" fill="rgb(244,19,51)" fg:x="65033" fg:w="39"/><text x="96.0812%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.02%)</title><rect x="95.8666%" y="213" width="0.0221%" height="15" fill="rgb(224,6,22)" fg:x="65057" fg:w="15"/><text x="96.1166%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (74 samples, 0.11%)</title><rect x="95.7841%" y="277" width="0.1090%" height="15" fill="rgb(224,145,5)" fg:x="65001" fg:w="74"/><text x="96.0341%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (121 samples, 0.18%)</title><rect x="95.7178%" y="293" width="0.1783%" height="15" fill="rgb(234,130,49)" fg:x="64956" fg:w="121"/><text x="95.9678%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (143 samples, 0.21%)</title><rect x="95.6898%" y="309" width="0.2107%" height="15" fill="rgb(254,6,2)" fg:x="64937" fg:w="143"/><text x="95.9398%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (679 samples, 1.00%)</title><rect x="94.9103%" y="325" width="1.0006%" height="15" fill="rgb(208,96,46)" fg:x="64408" fg:w="679"/><text x="95.1603%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="95.9005%" y="309" width="0.0103%" height="15" fill="rgb(239,3,39)" fg:x="65080" fg:w="7"/><text x="96.1505%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (2,688 samples, 3.96%)</title><rect x="91.9602%" y="341" width="3.9610%" height="15" fill="rgb(233,210,1)" fg:x="62406" fg:w="2688"/><text x="92.2102%" y="351.50">qecp..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="95.9108%" y="325" width="0.0103%" height="15" fill="rgb(244,137,37)" fg:x="65087" fg:w="7"/><text x="96.1608%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (17 samples, 0.03%)</title><rect x="98.0549%" y="229" width="0.0251%" height="15" fill="rgb(240,136,2)" fg:x="66542" fg:w="17"/><text x="98.3049%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.10%)</title><rect x="98.0313%" y="261" width="0.1032%" height="15" fill="rgb(239,18,37)" fg:x="66526" fg:w="70"/><text x="98.2813%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (62 samples, 0.09%)</title><rect x="98.0431%" y="245" width="0.0914%" height="15" fill="rgb(218,185,22)" fg:x="66534" fg:w="62"/><text x="98.2931%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.05%)</title><rect x="98.0799%" y="229" width="0.0545%" height="15" fill="rgb(225,218,4)" fg:x="66559" fg:w="37"/><text x="98.3299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="98.1227%" y="213" width="0.0118%" height="15" fill="rgb(230,182,32)" fg:x="66588" fg:w="8"/><text x="98.3727%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.12%)</title><rect x="98.0210%" y="277" width="0.1179%" height="15" fill="rgb(242,56,43)" fg:x="66519" fg:w="80"/><text x="98.2710%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (130 samples, 0.19%)</title><rect x="97.9561%" y="293" width="0.1916%" height="15" fill="rgb(233,99,24)" fg:x="66475" fg:w="130"/><text x="98.2061%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (161 samples, 0.24%)</title><rect x="97.9149%" y="309" width="0.2372%" height="15" fill="rgb(234,209,42)" fg:x="66447" fg:w="161"/><text x="98.1649%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (937 samples, 1.38%)</title><rect x="96.7920%" y="325" width="1.3807%" height="15" fill="rgb(227,7,12)" fg:x="65685" fg:w="937"/><text x="97.0420%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="98.1521%" y="309" width="0.0206%" height="15" fill="rgb(245,203,43)" fg:x="66608" fg:w="14"/><text x="98.4021%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (1,537 samples, 2.26%)</title><rect x="95.9211%" y="341" width="2.2649%" height="15" fill="rgb(238,205,33)" fg:x="65094" fg:w="1537"/><text x="96.1711%" y="351.50">q..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="98.1728%" y="325" width="0.0133%" height="15" fill="rgb(231,56,7)" fg:x="66622" fg:w="9"/><text x="98.4228%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.01%)</title><rect x="98.1860%" y="325" width="0.0118%" height="15" fill="rgb(244,186,29)" fg:x="66631" fg:w="8"/><text x="98.4360%" y="335.50"></text></g><g><title>qecp`qecp::simulator::Simulator::validate_correction (121 samples, 0.18%)</title><rect x="98.1860%" y="341" width="0.1783%" height="15" fill="rgb(234,111,31)" fg:x="66631" fg:w="121"/><text x="98.4360%" y="351.50"></text></g><g><title>qecp`qecp::code_builder::code_builder_validate_correction (113 samples, 0.17%)</title><rect x="98.1978%" y="325" width="0.1665%" height="15" fill="rgb(241,149,10)" fg:x="66639" fg:w="113"/><text x="98.4478%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (14 samples, 0.02%)</title><rect x="98.3437%" y="309" width="0.0206%" height="15" fill="rgb(249,206,44)" fg:x="66738" fg:w="14"/><text x="98.5937%" y="319.50"></text></g><g><title>qecp`qecp::types::CorrelatedPauliErrorRates::generate_random_error (1,081 samples, 1.59%)</title><rect x="98.3717%" y="341" width="1.5929%" height="15" fill="rgb(251,153,30)" fg:x="66757" fg:w="1081"/><text x="98.6217%" y="351.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (7 samples, 0.01%)</title><rect x="99.9646%" y="341" width="0.0103%" height="15" fill="rgb(239,152,38)" fg:x="67838" fg:w="7"/><text x="100.2146%" y="351.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (16 samples, 0.02%)</title><rect x="99.9749%" y="341" width="0.0236%" height="15" fill="rgb(249,139,47)" fg:x="67845" fg:w="16"/><text x="100.2249%" y="351.50"></text></g><g><title>all (67,862 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="67862"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,411 samples, 87.55%)</title><rect x="12.4532%" y="421" width="87.5468%" height="15" fill="rgb(216,46,15)" fg:x="8451" fg:w="59411"/><text x="12.7032%" y="431.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,411 samples, 87.55%)</title><rect x="12.4532%" y="405" width="87.5468%" height="15" fill="rgb(250,74,19)" fg:x="8451" fg:w="59411"/><text x="12.7032%" y="415.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,411 samples, 87.55%)</title><rect x="12.4532%" y="389" width="87.5468%" height="15" fill="rgb(249,42,33)" fg:x="8451" fg:w="59411"/><text x="12.7032%" y="399.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,411 samples, 87.55%)</title><rect x="12.4532%" y="373" width="87.5468%" height="15" fill="rgb(242,149,17)" fg:x="8451" fg:w="59411"/><text x="12.7032%" y="383.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,406 samples, 87.54%)</title><rect x="12.4606%" y="357" width="87.5394%" height="15" fill="rgb(244,29,21)" fg:x="8456" fg:w="59406"/><text x="12.7106%" y="367.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>