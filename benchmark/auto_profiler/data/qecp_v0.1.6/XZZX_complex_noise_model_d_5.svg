<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="59954"><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.01%)</title><rect x="0.0017%" y="85" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="7"/><text x="0.2517%" y="95.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.0017%" y="69" width="0.0117%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="7"/><text x="0.2517%" y="79.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0017%" y="53" width="0.0117%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="7"/><text x="0.2517%" y="63.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;qecp::decoder_union_find::UnionFindDecoder&gt;&gt; (9 samples, 0.02%)</title><rect x="0.0017%" y="101" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="9"/><text x="0.2517%" y="111.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute (18 samples, 0.03%)</title><rect x="0.0217%" y="85" width="0.0300%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="18"/><text x="0.2717%" y="95.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute_dijkstra_with_end_position (18 samples, 0.03%)</title><rect x="0.0217%" y="69" width="0.0300%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="18"/><text x="0.2717%" y="79.50"></text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::build_with_region (7 samples, 0.01%)</title><rect x="0.0517%" y="85" width="0.0117%" height="15" fill="rgb(207,160,47)" fg:x="31" fg:w="7"/><text x="0.3017%" y="95.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (6 samples, 0.01%)</title><rect x="0.0534%" y="69" width="0.0100%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="6"/><text x="0.3034%" y="79.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::new (59 samples, 0.10%)</title><rect x="0.0200%" y="101" width="0.0984%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="59"/><text x="0.2700%" y="111.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build (33 samples, 0.06%)</title><rect x="0.0634%" y="85" width="0.0550%" height="15" fill="rgb(220,122,19)" fg:x="38" fg:w="33"/><text x="0.3134%" y="95.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build_with_weight_function_region (33 samples, 0.06%)</title><rect x="0.0634%" y="69" width="0.0550%" height="15" fill="rgb(250,228,42)" fg:x="38" fg:w="33"/><text x="0.3134%" y="79.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (23 samples, 0.04%)</title><rect x="0.0801%" y="53" width="0.0384%" height="15" fill="rgb(240,193,28)" fg:x="48" fg:w="23"/><text x="0.3301%" y="63.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (9 samples, 0.02%)</title><rect x="0.1034%" y="37" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="62" fg:w="9"/><text x="0.3534%" y="47.50"></text></g><g><title>qecp`qecp::simulator::Simulator::compress_error_rates (7 samples, 0.01%)</title><rect x="0.1201%" y="101" width="0.0117%" height="15" fill="rgb(206,188,39)" fg:x="72" fg:w="7"/><text x="0.3701%" y="111.50"></text></g><g><title>dyld`start (83 samples, 0.14%)</title><rect x="0.0000%" y="341" width="0.1384%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="83"/><text x="0.2500%" y="351.50"></text></g><g><title>qecp`main (83 samples, 0.14%)</title><rect x="0.0000%" y="325" width="0.1384%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="83"/><text x="0.2500%" y="335.50"></text></g><g><title>qecp`std::rt::lang_start_internal (83 samples, 0.14%)</title><rect x="0.0000%" y="309" width="0.1384%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="83"/><text x="0.2500%" y="319.50"></text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (83 samples, 0.14%)</title><rect x="0.0000%" y="293" width="0.1384%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="83"/><text x="0.2500%" y="303.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (83 samples, 0.14%)</title><rect x="0.0000%" y="277" width="0.1384%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="83"/><text x="0.2500%" y="287.50"></text></g><g><title>qecp`qecp::main (83 samples, 0.14%)</title><rect x="0.0000%" y="261" width="0.1384%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="83"/><text x="0.2500%" y="271.50"></text></g><g><title>qecp`tokio::runtime::Runtime::block_on (83 samples, 0.14%)</title><rect x="0.0000%" y="245" width="0.1384%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="83"/><text x="0.2500%" y="255.50"></text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (83 samples, 0.14%)</title><rect x="0.0000%" y="229" width="0.1384%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="83"/><text x="0.2500%" y="239.50"></text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (83 samples, 0.14%)</title><rect x="0.0000%" y="213" width="0.1384%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="83"/><text x="0.2500%" y="223.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (83 samples, 0.14%)</title><rect x="0.0000%" y="197" width="0.1384%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="83"/><text x="0.2500%" y="207.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (83 samples, 0.14%)</title><rect x="0.0000%" y="181" width="0.1384%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="83"/><text x="0.2500%" y="191.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (83 samples, 0.14%)</title><rect x="0.0000%" y="165" width="0.1384%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="83"/><text x="0.2500%" y="175.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (83 samples, 0.14%)</title><rect x="0.0000%" y="149" width="0.1384%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="83"/><text x="0.2500%" y="159.50"></text></g><g><title>qecp`qecp::tool::run_matched_tool (83 samples, 0.14%)</title><rect x="0.0000%" y="133" width="0.1384%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="83"/><text x="0.2500%" y="143.50"></text></g><g><title>qecp`qecp::tool::benchmark (83 samples, 0.14%)</title><rect x="0.0000%" y="117" width="0.1384%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="83"/><text x="0.2500%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.04%)</title><rect x="0.1401%" y="277" width="0.0400%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="24"/><text x="0.3901%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (84 samples, 0.14%)</title><rect x="0.2118%" y="261" width="0.1401%" height="15" fill="rgb(209,103,24)" fg:x="127" fg:w="84"/><text x="0.4618%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="0.3519%" y="261" width="0.0183%" height="15" fill="rgb(229,88,8)" fg:x="211" fg:w="11"/><text x="0.6019%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.03%)</title><rect x="0.3703%" y="261" width="0.0250%" height="15" fill="rgb(213,181,19)" fg:x="222" fg:w="15"/><text x="0.6203%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="0.3970%" y="261" width="0.0217%" height="15" fill="rgb(254,191,54)" fg:x="238" fg:w="13"/><text x="0.6470%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.01%)</title><rect x="0.4370%" y="261" width="0.0100%" height="15" fill="rgb(241,83,37)" fg:x="262" fg:w="6"/><text x="0.6870%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.02%)</title><rect x="0.4937%" y="197" width="0.0167%" height="15" fill="rgb(233,36,39)" fg:x="296" fg:w="10"/><text x="0.7437%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.07%)</title><rect x="0.4837%" y="229" width="0.0717%" height="15" fill="rgb(226,3,54)" fg:x="290" fg:w="43"/><text x="0.7337%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 0.07%)</title><rect x="0.4887%" y="213" width="0.0667%" height="15" fill="rgb(245,192,40)" fg:x="293" fg:w="40"/><text x="0.7387%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.05%)</title><rect x="0.5104%" y="197" width="0.0450%" height="15" fill="rgb(238,167,29)" fg:x="306" fg:w="27"/><text x="0.7604%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="0.5438%" y="181" width="0.0117%" height="15" fill="rgb(232,182,51)" fg:x="326" fg:w="7"/><text x="0.7938%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.08%)</title><rect x="0.4787%" y="245" width="0.0784%" height="15" fill="rgb(231,60,39)" fg:x="287" fg:w="47"/><text x="0.7287%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (42 samples, 0.07%)</title><rect x="0.7122%" y="181" width="0.0701%" height="15" fill="rgb(208,69,12)" fg:x="427" fg:w="42"/><text x="0.9622%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (159 samples, 0.27%)</title><rect x="0.6605%" y="213" width="0.2652%" height="15" fill="rgb(235,93,37)" fg:x="396" fg:w="159"/><text x="0.9105%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (151 samples, 0.25%)</title><rect x="0.6738%" y="197" width="0.2519%" height="15" fill="rgb(213,116,39)" fg:x="404" fg:w="151"/><text x="0.9238%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (86 samples, 0.14%)</title><rect x="0.7823%" y="181" width="0.1434%" height="15" fill="rgb(222,207,29)" fg:x="469" fg:w="86"/><text x="1.0323%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (22 samples, 0.04%)</title><rect x="0.8890%" y="165" width="0.0367%" height="15" fill="rgb(206,96,30)" fg:x="533" fg:w="22"/><text x="1.1390%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (176 samples, 0.29%)</title><rect x="0.6372%" y="229" width="0.2936%" height="15" fill="rgb(218,138,4)" fg:x="382" fg:w="176"/><text x="0.8872%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (229 samples, 0.38%)</title><rect x="0.5604%" y="245" width="0.3820%" height="15" fill="rgb(250,191,14)" fg:x="336" fg:w="229"/><text x="0.8104%" y="255.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (300 samples, 0.50%)</title><rect x="0.4470%" y="261" width="0.5004%" height="15" fill="rgb(239,60,40)" fg:x="268" fg:w="300"/><text x="0.6970%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="1.1826%" y="245" width="0.0133%" height="15" fill="rgb(206,27,48)" fg:x="709" fg:w="8"/><text x="1.4326%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (63 samples, 0.11%)</title><rect x="1.1959%" y="245" width="0.1051%" height="15" fill="rgb(225,35,8)" fg:x="717" fg:w="63"/><text x="1.4459%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="1.2643%" y="229" width="0.0367%" height="15" fill="rgb(250,213,24)" fg:x="758" fg:w="22"/><text x="1.5143%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.04%)</title><rect x="1.2643%" y="213" width="0.0367%" height="15" fill="rgb(247,123,22)" fg:x="758" fg:w="22"/><text x="1.5143%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (41 samples, 0.07%)</title><rect x="1.5245%" y="213" width="0.0684%" height="15" fill="rgb(231,138,38)" fg:x="914" fg:w="41"/><text x="1.7745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (228 samples, 0.38%)</title><rect x="1.3010%" y="245" width="0.3803%" height="15" fill="rgb(231,145,46)" fg:x="780" fg:w="228"/><text x="1.5510%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (202 samples, 0.34%)</title><rect x="1.3444%" y="229" width="0.3369%" height="15" fill="rgb(251,118,11)" fg:x="806" fg:w="202"/><text x="1.5944%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (53 samples, 0.09%)</title><rect x="1.5929%" y="213" width="0.0884%" height="15" fill="rgb(217,147,25)" fg:x="955" fg:w="53"/><text x="1.8429%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="1.6813%" y="245" width="0.0183%" height="15" fill="rgb(247,81,37)" fg:x="1008" fg:w="11"/><text x="1.9313%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="1.7063%" y="245" width="0.0183%" height="15" fill="rgb(209,12,38)" fg:x="1023" fg:w="11"/><text x="1.9563%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.01%)</title><rect x="1.7313%" y="245" width="0.0100%" height="15" fill="rgb(227,1,9)" fg:x="1038" fg:w="6"/><text x="1.9813%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (88 samples, 0.15%)</title><rect x="1.9348%" y="229" width="0.1468%" height="15" fill="rgb(248,47,43)" fg:x="1160" fg:w="88"/><text x="2.1848%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (36 samples, 0.06%)</title><rect x="2.0215%" y="213" width="0.0600%" height="15" fill="rgb(221,10,30)" fg:x="1212" fg:w="36"/><text x="2.2715%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.05%)</title><rect x="2.0299%" y="197" width="0.0517%" height="15" fill="rgb(210,229,1)" fg:x="1217" fg:w="31"/><text x="2.2799%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (101 samples, 0.17%)</title><rect x="2.3234%" y="197" width="0.1685%" height="15" fill="rgb(222,148,37)" fg:x="1393" fg:w="101"/><text x="2.5734%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (289 samples, 0.48%)</title><rect x="2.0816%" y="229" width="0.4820%" height="15" fill="rgb(234,67,33)" fg:x="1248" fg:w="289"/><text x="2.3316%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (250 samples, 0.42%)</title><rect x="2.1466%" y="213" width="0.4170%" height="15" fill="rgb(247,98,35)" fg:x="1287" fg:w="250"/><text x="2.3966%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (43 samples, 0.07%)</title><rect x="2.4919%" y="197" width="0.0717%" height="15" fill="rgb(247,138,52)" fg:x="1494" fg:w="43"/><text x="2.7419%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.01%)</title><rect x="2.5703%" y="229" width="0.0100%" height="15" fill="rgb(213,79,30)" fg:x="1541" fg:w="6"/><text x="2.8203%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.01%)</title><rect x="2.5803%" y="229" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="1547" fg:w="6"/><text x="2.8303%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="2.5903%" y="229" width="0.0117%" height="15" fill="rgb(230,62,27)" fg:x="1553" fg:w="7"/><text x="2.8403%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1,001 samples, 1.67%)</title><rect x="0.9474%" y="261" width="1.6696%" height="15" fill="rgb(216,154,8)" fg:x="568" fg:w="1001"/><text x="1.1974%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (520 samples, 0.87%)</title><rect x="1.7497%" y="245" width="0.8673%" height="15" fill="rgb(244,35,45)" fg:x="1049" fg:w="520"/><text x="1.9997%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.02%)</title><rect x="2.6020%" y="229" width="0.0150%" height="15" fill="rgb(251,115,12)" fg:x="1560" fg:w="9"/><text x="2.8520%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="2.6170%" y="261" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="1569" fg:w="9"/><text x="2.8670%" y="271.50"></text></g><g><title>qecp`DYLD-STUB$$free (16 samples, 0.03%)</title><rect x="2.6320%" y="261" width="0.0267%" height="15" fill="rgb(233,84,52)" fg:x="1578" fg:w="16"/><text x="2.8820%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (43 samples, 0.07%)</title><rect x="2.6837%" y="261" width="0.0717%" height="15" fill="rgb(207,117,47)" fg:x="1609" fg:w="43"/><text x="2.9337%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (75 samples, 0.13%)</title><rect x="2.7554%" y="261" width="0.1251%" height="15" fill="rgb(249,43,39)" fg:x="1652" fg:w="75"/><text x="3.0054%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (20 samples, 0.03%)</title><rect x="2.8805%" y="261" width="0.0334%" height="15" fill="rgb(209,38,44)" fg:x="1727" fg:w="20"/><text x="3.1305%" y="271.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (259 samples, 0.43%)</title><rect x="2.9172%" y="261" width="0.4320%" height="15" fill="rgb(236,212,23)" fg:x="1749" fg:w="259"/><text x="3.1672%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="3.3609%" y="245" width="0.0183%" height="15" fill="rgb(242,79,21)" fg:x="2015" fg:w="11"/><text x="3.6109%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.03%)</title><rect x="3.4577%" y="213" width="0.0250%" height="15" fill="rgb(211,96,35)" fg:x="2073" fg:w="15"/><text x="3.7077%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.07%)</title><rect x="3.4160%" y="229" width="0.0684%" height="15" fill="rgb(253,215,40)" fg:x="2048" fg:w="41"/><text x="3.6660%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 0.03%)</title><rect x="3.4993%" y="197" width="0.0250%" height="15" fill="rgb(211,81,21)" fg:x="2098" fg:w="15"/><text x="3.7493%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.05%)</title><rect x="3.4843%" y="229" width="0.0467%" height="15" fill="rgb(208,190,38)" fg:x="2089" fg:w="28"/><text x="3.7343%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.05%)</title><rect x="3.4860%" y="213" width="0.0450%" height="15" fill="rgb(235,213,38)" fg:x="2090" fg:w="27"/><text x="3.7360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="3.5344%" y="229" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="2119" fg:w="10"/><text x="3.7844%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="3.5777%" y="213" width="0.0217%" height="15" fill="rgb(244,218,35)" fg:x="2145" fg:w="13"/><text x="3.8277%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.02%)</title><rect x="3.5844%" y="197" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="2149" fg:w="9"/><text x="3.8344%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (25 samples, 0.04%)</title><rect x="3.5594%" y="229" width="0.0417%" height="15" fill="rgb(210,16,53)" fg:x="2134" fg:w="25"/><text x="3.8094%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.21%)</title><rect x="3.3943%" y="245" width="0.2085%" height="15" fill="rgb(235,124,12)" fg:x="2035" fg:w="125"/><text x="3.6443%" y="255.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (156 samples, 0.26%)</title><rect x="3.3526%" y="261" width="0.2602%" height="15" fill="rgb(224,169,11)" fg:x="2010" fg:w="156"/><text x="3.6026%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (348 samples, 0.58%)</title><rect x="14.1008%" y="245" width="0.5804%" height="15" fill="rgb(250,166,2)" fg:x="8454" fg:w="348"/><text x="14.3508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.05%)</title><rect x="14.7163%" y="213" width="0.0467%" height="15" fill="rgb(242,216,29)" fg:x="8823" fg:w="28"/><text x="14.9663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="14.7430%" y="197" width="0.0200%" height="15" fill="rgb(230,116,27)" fg:x="8839" fg:w="12"/><text x="14.9930%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.09%)</title><rect x="14.6813%" y="245" width="0.0851%" height="15" fill="rgb(228,99,48)" fg:x="8802" fg:w="51"/><text x="14.9313%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.06%)</title><rect x="14.7096%" y="229" width="0.0567%" height="15" fill="rgb(253,11,6)" fg:x="8819" fg:w="34"/><text x="14.9596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="14.7663%" y="245" width="0.0117%" height="15" fill="rgb(247,143,39)" fg:x="8853" fg:w="7"/><text x="15.0163%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 0.12%)</title><rect x="14.7863%" y="245" width="0.1184%" height="15" fill="rgb(236,97,10)" fg:x="8865" fg:w="71"/><text x="15.0363%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.04%)</title><rect x="14.8681%" y="229" width="0.0367%" height="15" fill="rgb(233,208,19)" fg:x="8914" fg:w="22"/><text x="15.1181%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="14.9048%" y="245" width="0.0183%" height="15" fill="rgb(216,164,2)" fg:x="8936" fg:w="11"/><text x="15.1548%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="14.9281%" y="245" width="0.0167%" height="15" fill="rgb(220,129,5)" fg:x="8950" fg:w="10"/><text x="15.1781%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="14.9448%" y="245" width="0.0367%" height="15" fill="rgb(242,17,10)" fg:x="8960" fg:w="22"/><text x="15.1948%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.02%)</title><rect x="14.9832%" y="245" width="0.0150%" height="15" fill="rgb(242,107,0)" fg:x="8983" fg:w="9"/><text x="15.2332%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (39 samples, 0.07%)</title><rect x="15.0098%" y="245" width="0.0650%" height="15" fill="rgb(251,28,31)" fg:x="8999" fg:w="39"/><text x="15.2598%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.14%)</title><rect x="15.1683%" y="229" width="0.1368%" height="15" fill="rgb(233,223,10)" fg:x="9094" fg:w="82"/><text x="15.4183%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 0.07%)</title><rect x="15.2333%" y="213" width="0.0717%" height="15" fill="rgb(215,21,27)" fg:x="9133" fg:w="43"/><text x="15.4833%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (36 samples, 0.06%)</title><rect x="15.2450%" y="197" width="0.0600%" height="15" fill="rgb(232,23,21)" fg:x="9140" fg:w="36"/><text x="15.4950%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (43 samples, 0.07%)</title><rect x="15.4252%" y="197" width="0.0717%" height="15" fill="rgb(244,5,23)" fg:x="9248" fg:w="43"/><text x="15.6752%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (130 samples, 0.22%)</title><rect x="15.3051%" y="229" width="0.2168%" height="15" fill="rgb(226,81,46)" fg:x="9176" fg:w="130"/><text x="15.5551%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (97 samples, 0.16%)</title><rect x="15.3601%" y="213" width="0.1618%" height="15" fill="rgb(247,70,30)" fg:x="9209" fg:w="97"/><text x="15.6101%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.03%)</title><rect x="15.4969%" y="197" width="0.0250%" height="15" fill="rgb(212,68,19)" fg:x="9291" fg:w="15"/><text x="15.7469%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.01%)</title><rect x="15.5252%" y="229" width="0.0100%" height="15" fill="rgb(240,187,13)" fg:x="9308" fg:w="6"/><text x="15.7752%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (15 samples, 0.03%)</title><rect x="15.5352%" y="229" width="0.0250%" height="15" fill="rgb(223,113,26)" fg:x="9314" fg:w="15"/><text x="15.7852%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.02%)</title><rect x="15.5669%" y="229" width="0.0150%" height="15" fill="rgb(206,192,2)" fg:x="9333" fg:w="9"/><text x="15.8169%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (321 samples, 0.54%)</title><rect x="15.0749%" y="245" width="0.5354%" height="15" fill="rgb(241,108,4)" fg:x="9038" fg:w="321"/><text x="15.3249%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (17 samples, 0.03%)</title><rect x="15.5819%" y="229" width="0.0284%" height="15" fill="rgb(247,173,49)" fg:x="9342" fg:w="17"/><text x="15.8319%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="15.6236%" y="229" width="0.0234%" height="15" fill="rgb(224,114,35)" fg:x="9367" fg:w="14"/><text x="15.8736%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="15.6637%" y="197" width="0.0167%" height="15" fill="rgb(245,159,27)" fg:x="9391" fg:w="10"/><text x="15.9137%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.04%)</title><rect x="15.6470%" y="229" width="0.0400%" height="15" fill="rgb(245,172,44)" fg:x="9381" fg:w="24"/><text x="15.8970%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="15.6503%" y="213" width="0.0367%" height="15" fill="rgb(236,23,11)" fg:x="9383" fg:w="22"/><text x="15.9003%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="15.7154%" y="213" width="0.0117%" height="15" fill="rgb(205,117,38)" fg:x="9422" fg:w="7"/><text x="15.9654%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="15.7271%" y="213" width="0.0217%" height="15" fill="rgb(237,72,25)" fg:x="9429" fg:w="13"/><text x="15.9771%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="15.7287%" y="197" width="0.0200%" height="15" fill="rgb(244,70,9)" fg:x="9430" fg:w="12"/><text x="15.9787%" y="207.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.14%)</title><rect x="15.6103%" y="245" width="0.1401%" height="15" fill="rgb(217,125,39)" fg:x="9359" fg:w="84"/><text x="15.8603%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (34 samples, 0.06%)</title><rect x="15.6937%" y="229" width="0.0567%" height="15" fill="rgb(235,36,10)" fg:x="9409" fg:w="34"/><text x="15.9437%" y="239.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (973 samples, 1.62%)</title><rect x="15.7504%" y="245" width="1.6229%" height="15" fill="rgb(251,123,47)" fg:x="9443" fg:w="973"/><text x="16.0004%" y="255.50"></text></g><g><title>qecp`DYLD-STUB$$free (6 samples, 0.01%)</title><rect x="17.3733%" y="245" width="0.0100%" height="15" fill="rgb(221,13,13)" fg:x="10416" fg:w="6"/><text x="17.6233%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="17.6218%" y="165" width="0.0100%" height="15" fill="rgb(238,131,9)" fg:x="10565" fg:w="6"/><text x="17.8718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.08%)</title><rect x="17.6035%" y="213" width="0.0801%" height="15" fill="rgb(211,50,8)" fg:x="10554" fg:w="48"/><text x="17.8535%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (44 samples, 0.07%)</title><rect x="17.6102%" y="197" width="0.0734%" height="15" fill="rgb(245,182,24)" fg:x="10558" fg:w="44"/><text x="17.8602%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (43 samples, 0.07%)</title><rect x="17.6118%" y="181" width="0.0717%" height="15" fill="rgb(242,14,37)" fg:x="10559" fg:w="43"/><text x="17.8618%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (31 samples, 0.05%)</title><rect x="17.6319%" y="165" width="0.0517%" height="15" fill="rgb(246,228,12)" fg:x="10571" fg:w="31"/><text x="17.8819%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="17.6602%" y="149" width="0.0234%" height="15" fill="rgb(213,55,15)" fg:x="10588" fg:w="14"/><text x="17.9102%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.08%)</title><rect x="17.6852%" y="213" width="0.0817%" height="15" fill="rgb(209,9,3)" fg:x="10603" fg:w="49"/><text x="17.9352%" y="223.50"></text></g><g><title>qecp`DYLD-STUB$$memmove (7 samples, 0.01%)</title><rect x="17.7720%" y="213" width="0.0117%" height="15" fill="rgb(230,59,30)" fg:x="10655" fg:w="7"/><text x="18.0220%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (63 samples, 0.11%)</title><rect x="17.7853%" y="213" width="0.1051%" height="15" fill="rgb(209,121,21)" fg:x="10663" fg:w="63"/><text x="18.0353%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.05%)</title><rect x="17.8453%" y="197" width="0.0450%" height="15" fill="rgb(220,109,13)" fg:x="10699" fg:w="27"/><text x="18.0953%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.04%)</title><rect x="17.8487%" y="181" width="0.0417%" height="15" fill="rgb(232,18,1)" fg:x="10701" fg:w="25"/><text x="18.0987%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.04%)</title><rect x="17.8487%" y="165" width="0.0417%" height="15" fill="rgb(215,41,42)" fg:x="10701" fg:w="25"/><text x="18.0987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.02%)</title><rect x="17.8670%" y="149" width="0.0234%" height="15" fill="rgb(224,123,36)" fg:x="10712" fg:w="14"/><text x="18.1170%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (203 samples, 0.34%)</title><rect x="17.5551%" y="229" width="0.3386%" height="15" fill="rgb(240,125,3)" fg:x="10525" fg:w="203"/><text x="17.8051%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (319 samples, 0.53%)</title><rect x="17.3967%" y="245" width="0.5321%" height="15" fill="rgb(205,98,50)" fg:x="10430" fg:w="319"/><text x="17.6467%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (21 samples, 0.04%)</title><rect x="17.8937%" y="229" width="0.0350%" height="15" fill="rgb(205,185,37)" fg:x="10728" fg:w="21"/><text x="18.1437%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (16 samples, 0.03%)</title><rect x="17.9287%" y="245" width="0.0267%" height="15" fill="rgb(238,207,15)" fg:x="10749" fg:w="16"/><text x="18.1787%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (19 samples, 0.03%)</title><rect x="17.9554%" y="245" width="0.0317%" height="15" fill="rgb(213,199,42)" fg:x="10765" fg:w="19"/><text x="18.2054%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (79 samples, 0.13%)</title><rect x="17.9871%" y="245" width="0.1318%" height="15" fill="rgb(235,201,11)" fg:x="10784" fg:w="79"/><text x="18.2371%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="18.1389%" y="229" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="10875" fg:w="6"/><text x="18.3889%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.07%)</title><rect x="18.2206%" y="181" width="0.0684%" height="15" fill="rgb(241,35,35)" fg:x="10924" fg:w="41"/><text x="18.4706%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.02%)</title><rect x="18.2740%" y="165" width="0.0150%" height="15" fill="rgb(243,32,47)" fg:x="10956" fg:w="9"/><text x="18.5240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (76 samples, 0.13%)</title><rect x="18.1723%" y="213" width="0.1268%" height="15" fill="rgb(247,202,23)" fg:x="10895" fg:w="76"/><text x="18.4223%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.10%)</title><rect x="18.2006%" y="197" width="0.0984%" height="15" fill="rgb(219,102,11)" fg:x="10912" fg:w="59"/><text x="18.4506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.01%)</title><rect x="18.2890%" y="181" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="10965" fg:w="6"/><text x="18.5390%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.01%)</title><rect x="18.3190%" y="181" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="10983" fg:w="6"/><text x="18.5690%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="18.3107%" y="197" width="0.0217%" height="15" fill="rgb(216,99,12)" fg:x="10978" fg:w="13"/><text x="18.5607%" y="207.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (130 samples, 0.22%)</title><rect x="18.1189%" y="245" width="0.2168%" height="15" fill="rgb(226,22,26)" fg:x="10863" fg:w="130"/><text x="18.3689%" y="255.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (104 samples, 0.17%)</title><rect x="18.1623%" y="229" width="0.1735%" height="15" fill="rgb(217,163,10)" fg:x="10889" fg:w="104"/><text x="18.4123%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.03%)</title><rect x="18.3074%" y="213" width="0.0284%" height="15" fill="rgb(213,25,53)" fg:x="10976" fg:w="17"/><text x="18.5574%" y="223.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (395 samples, 0.66%)</title><rect x="18.3441%" y="245" width="0.6588%" height="15" fill="rgb(252,105,26)" fg:x="10998" fg:w="395"/><text x="18.5941%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.03%)</title><rect x="19.0963%" y="117" width="0.0267%" height="15" fill="rgb(220,39,43)" fg:x="11449" fg:w="16"/><text x="19.3463%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (60 samples, 0.10%)</title><rect x="19.0730%" y="149" width="0.1001%" height="15" fill="rgb(229,68,48)" fg:x="11435" fg:w="60"/><text x="19.3230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 0.10%)</title><rect x="19.0746%" y="133" width="0.0984%" height="15" fill="rgb(252,8,32)" fg:x="11436" fg:w="59"/><text x="19.3246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.05%)</title><rect x="19.1230%" y="117" width="0.0500%" height="15" fill="rgb(223,20,43)" fg:x="11465" fg:w="30"/><text x="19.3730%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="19.1630%" y="101" width="0.0100%" height="15" fill="rgb(229,81,49)" fg:x="11489" fg:w="6"/><text x="19.4130%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 0.12%)</title><rect x="19.0596%" y="165" width="0.1201%" height="15" fill="rgb(236,28,36)" fg:x="11427" fg:w="72"/><text x="19.3096%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (83 samples, 0.14%)</title><rect x="19.0446%" y="197" width="0.1384%" height="15" fill="rgb(249,185,26)" fg:x="11418" fg:w="83"/><text x="19.2946%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (78 samples, 0.13%)</title><rect x="19.0529%" y="181" width="0.1301%" height="15" fill="rgb(249,174,33)" fg:x="11423" fg:w="78"/><text x="19.3029%" y="191.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (105 samples, 0.18%)</title><rect x="19.0112%" y="245" width="0.1751%" height="15" fill="rgb(233,201,37)" fg:x="11398" fg:w="105"/><text x="19.2612%" y="255.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (99 samples, 0.17%)</title><rect x="19.0212%" y="229" width="0.1651%" height="15" fill="rgb(221,78,26)" fg:x="11404" fg:w="99"/><text x="19.2712%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (87 samples, 0.15%)</title><rect x="19.0413%" y="213" width="0.1451%" height="15" fill="rgb(250,127,30)" fg:x="11416" fg:w="87"/><text x="19.2913%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="22.2854%" y="213" width="0.0117%" height="15" fill="rgb(230,49,44)" fg:x="13361" fg:w="7"/><text x="22.5354%" y="223.50"></text></g><g><title>qecp`DYLD-STUB$$malloc (6 samples, 0.01%)</title><rect x="22.4339%" y="181" width="0.0100%" height="15" fill="rgb(229,67,23)" fg:x="13450" fg:w="6"/><text x="22.6839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.05%)</title><rect x="22.6140%" y="117" width="0.0534%" height="15" fill="rgb(249,83,47)" fg:x="13558" fg:w="32"/><text x="22.8640%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (143 samples, 0.24%)</title><rect x="22.5339%" y="149" width="0.2385%" height="15" fill="rgb(215,43,3)" fg:x="13510" fg:w="143"/><text x="22.7839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (125 samples, 0.21%)</title><rect x="22.5640%" y="133" width="0.2085%" height="15" fill="rgb(238,154,13)" fg:x="13528" fg:w="125"/><text x="22.8140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.11%)</title><rect x="22.6674%" y="117" width="0.1051%" height="15" fill="rgb(219,56,2)" fg:x="13590" fg:w="63"/><text x="22.9174%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.03%)</title><rect x="22.7391%" y="101" width="0.0334%" height="15" fill="rgb(233,0,4)" fg:x="13633" fg:w="20"/><text x="22.9891%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (178 samples, 0.30%)</title><rect x="22.4806%" y="165" width="0.2969%" height="15" fill="rgb(235,30,7)" fg:x="13478" fg:w="178"/><text x="22.7306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.01%)</title><rect x="22.7775%" y="165" width="0.0100%" height="15" fill="rgb(250,79,13)" fg:x="13656" fg:w="6"/><text x="23.0275%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="22.7958%" y="165" width="0.0100%" height="15" fill="rgb(211,146,34)" fg:x="13667" fg:w="6"/><text x="23.0458%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="22.8058%" y="165" width="0.0117%" height="15" fill="rgb(228,22,38)" fg:x="13673" fg:w="7"/><text x="23.0558%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (229 samples, 0.38%)</title><rect x="22.4505%" y="181" width="0.3820%" height="15" fill="rgb(235,168,5)" fg:x="13460" fg:w="229"/><text x="22.7005%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (8 samples, 0.01%)</title><rect x="22.8192%" y="165" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="13681" fg:w="8"/><text x="23.0692%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (260 samples, 0.43%)</title><rect x="22.4038%" y="197" width="0.4337%" height="15" fill="rgb(215,215,53)" fg:x="13432" fg:w="260"/><text x="22.6538%" y="207.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (2,203 samples, 3.67%)</title><rect x="19.1864%" y="245" width="3.6745%" height="15" fill="rgb(223,4,10)" fg:x="11503" fg:w="2203"/><text x="19.4364%" y="255.50">qecp..</text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (393 samples, 0.66%)</title><rect x="22.2054%" y="229" width="0.6555%" height="15" fill="rgb(234,103,6)" fg:x="13313" fg:w="393"/><text x="22.4554%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (338 samples, 0.56%)</title><rect x="22.2971%" y="213" width="0.5638%" height="15" fill="rgb(227,97,0)" fg:x="13368" fg:w="338"/><text x="22.5471%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.02%)</title><rect x="22.8375%" y="197" width="0.0234%" height="15" fill="rgb(234,150,53)" fg:x="13692" fg:w="14"/><text x="23.0875%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (221 samples, 0.37%)</title><rect x="22.8742%" y="229" width="0.3686%" height="15" fill="rgb(228,201,54)" fg:x="13714" fg:w="221"/><text x="23.1242%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.05%)</title><rect x="23.2462%" y="229" width="0.0500%" height="15" fill="rgb(222,22,37)" fg:x="13937" fg:w="30"/><text x="23.4962%" y="239.50"></text></g><g><title>qecp`DYLD-STUB$$memcpy (10 samples, 0.02%)</title><rect x="23.3045%" y="229" width="0.0167%" height="15" fill="rgb(237,53,32)" fg:x="13972" fg:w="10"/><text x="23.5545%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="31.4641%" y="213" width="0.0100%" height="15" fill="rgb(233,25,53)" fg:x="18864" fg:w="6"/><text x="31.7141%" y="223.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_grow (4,907 samples, 8.18%)</title><rect x="23.3212%" y="229" width="8.1846%" height="15" fill="rgb(210,40,34)" fg:x="13982" fg:w="4907"/><text x="23.5712%" y="239.50">qecp`qecp::..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get_mut (8 samples, 0.01%)</title><rect x="31.4925%" y="213" width="0.0133%" height="15" fill="rgb(241,220,44)" fg:x="18881" fg:w="8"/><text x="31.7425%" y="223.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (540 samples, 0.90%)</title><rect x="31.7443%" y="213" width="0.9007%" height="15" fill="rgb(235,28,35)" fg:x="19032" fg:w="540"/><text x="31.9943%" y="223.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_merge (857 samples, 1.43%)</title><rect x="31.5058%" y="229" width="1.4294%" height="15" fill="rgb(210,56,17)" fg:x="18889" fg:w="857"/><text x="31.7558%" y="239.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (174 samples, 0.29%)</title><rect x="32.6450%" y="213" width="0.2902%" height="15" fill="rgb(224,130,29)" fg:x="19572" fg:w="174"/><text x="32.8950%" y="223.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (61 samples, 0.10%)</title><rect x="32.8335%" y="197" width="0.1017%" height="15" fill="rgb(235,212,8)" fg:x="19685" fg:w="61"/><text x="33.0835%" y="207.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (359 samples, 0.60%)</title><rect x="33.2005%" y="213" width="0.5988%" height="15" fill="rgb(223,33,50)" fg:x="19905" fg:w="359"/><text x="33.4505%" y="223.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_remove (604 samples, 1.01%)</title><rect x="32.9353%" y="229" width="1.0074%" height="15" fill="rgb(219,149,13)" fg:x="19746" fg:w="604"/><text x="33.1853%" y="239.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (86 samples, 0.14%)</title><rect x="33.7992%" y="213" width="0.1434%" height="15" fill="rgb(250,156,29)" fg:x="20264" fg:w="86"/><text x="34.0492%" y="223.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (72 samples, 0.12%)</title><rect x="33.8226%" y="197" width="0.1201%" height="15" fill="rgb(216,193,19)" fg:x="20278" fg:w="72"/><text x="34.0726%" y="207.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_update (1,956 samples, 3.26%)</title><rect x="33.9427%" y="229" width="3.2625%" height="15" fill="rgb(216,135,14)" fg:x="20350" fg:w="1956"/><text x="34.1927%" y="239.50">qec..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (283 samples, 0.47%)</title><rect x="36.7332%" y="213" width="0.4720%" height="15" fill="rgb(241,47,5)" fg:x="22023" fg:w="283"/><text x="36.9832%" y="223.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (181 samples, 0.30%)</title><rect x="37.2052%" y="229" width="0.3019%" height="15" fill="rgb(233,42,35)" fg:x="22306" fg:w="181"/><text x="37.4552%" y="239.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (58 samples, 0.10%)</title><rect x="37.5071%" y="229" width="0.0967%" height="15" fill="rgb(231,13,6)" fg:x="22487" fg:w="58"/><text x="37.7571%" y="239.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (41 samples, 0.07%)</title><rect x="37.6105%" y="229" width="0.0684%" height="15" fill="rgb(207,181,40)" fg:x="22549" fg:w="41"/><text x="37.8605%" y="239.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_optional_grow (8,883 samples, 14.82%)</title><rect x="22.8675%" y="245" width="14.8164%" height="15" fill="rgb(254,173,49)" fg:x="13710" fg:w="8883"/><text x="23.1175%" y="255.50">qecp`qecp::decoder_unio..</text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (34 samples, 0.06%)</title><rect x="37.9091%" y="229" width="0.0567%" height="15" fill="rgb(221,1,38)" fg:x="22728" fg:w="34"/><text x="38.1591%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="38.8515%" y="133" width="0.0100%" height="15" fill="rgb(206,124,46)" fg:x="23293" fg:w="6"/><text x="39.1015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.04%)</title><rect x="38.8464%" y="165" width="0.0350%" height="15" fill="rgb(249,21,11)" fg:x="23290" fg:w="21"/><text x="39.0964%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="38.8481%" y="149" width="0.0334%" height="15" fill="rgb(222,201,40)" fg:x="23291" fg:w="20"/><text x="39.0981%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="38.8615%" y="133" width="0.0200%" height="15" fill="rgb(235,61,29)" fg:x="23299" fg:w="12"/><text x="39.1115%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="38.8414%" y="181" width="0.0417%" height="15" fill="rgb(219,207,3)" fg:x="23287" fg:w="25"/><text x="39.0914%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 0.13%)</title><rect x="38.8848%" y="181" width="0.1268%" height="15" fill="rgb(222,56,46)" fg:x="23313" fg:w="76"/><text x="39.1348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.03%)</title><rect x="39.0733%" y="165" width="0.0250%" height="15" fill="rgb(239,76,54)" fg:x="23426" fg:w="15"/><text x="39.3233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.03%)</title><rect x="39.0733%" y="149" width="0.0250%" height="15" fill="rgb(231,124,27)" fg:x="23426" fg:w="15"/><text x="39.3233%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.03%)</title><rect x="39.0733%" y="133" width="0.0250%" height="15" fill="rgb(249,195,6)" fg:x="23426" fg:w="15"/><text x="39.3233%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.02%)</title><rect x="39.0766%" y="117" width="0.0217%" height="15" fill="rgb(237,174,47)" fg:x="23428" fg:w="13"/><text x="39.3266%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="39.0883%" y="101" width="0.0100%" height="15" fill="rgb(206,201,31)" fg:x="23435" fg:w="6"/><text x="39.3383%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (167 samples, 0.28%)</title><rect x="38.8231%" y="197" width="0.2785%" height="15" fill="rgb(231,57,52)" fg:x="23276" fg:w="167"/><text x="39.0731%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (52 samples, 0.09%)</title><rect x="39.0149%" y="181" width="0.0867%" height="15" fill="rgb(248,177,22)" fg:x="23391" fg:w="52"/><text x="39.2649%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (279 samples, 0.47%)</title><rect x="38.6463%" y="213" width="0.4654%" height="15" fill="rgb(215,211,37)" fg:x="23170" fg:w="279"/><text x="38.8963%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.01%)</title><rect x="39.1016%" y="197" width="0.0100%" height="15" fill="rgb(241,128,51)" fg:x="23443" fg:w="6"/><text x="39.3516%" y="207.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (868 samples, 1.45%)</title><rect x="37.6872%" y="245" width="1.4478%" height="15" fill="rgb(227,165,31)" fg:x="22595" fg:w="868"/><text x="37.9372%" y="255.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (701 samples, 1.17%)</title><rect x="37.9658%" y="229" width="1.1692%" height="15" fill="rgb(228,167,24)" fg:x="22762" fg:w="701"/><text x="38.2158%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (14 samples, 0.02%)</title><rect x="39.1117%" y="213" width="0.0234%" height="15" fill="rgb(228,143,12)" fg:x="23449" fg:w="14"/><text x="39.3617%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (37 samples, 0.06%)</title><rect x="39.7788%" y="229" width="0.0617%" height="15" fill="rgb(249,149,8)" fg:x="23849" fg:w="37"/><text x="40.0288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="39.9273%" y="149" width="0.0300%" height="15" fill="rgb(243,35,44)" fg:x="23938" fg:w="18"/><text x="40.1773%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="39.9306%" y="133" width="0.0267%" height="15" fill="rgb(246,89,9)" fg:x="23940" fg:w="16"/><text x="40.1806%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="39.9456%" y="117" width="0.0117%" height="15" fill="rgb(233,213,13)" fg:x="23949" fg:w="7"/><text x="40.1956%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.04%)</title><rect x="39.9223%" y="165" width="0.0367%" height="15" fill="rgb(233,141,41)" fg:x="23935" fg:w="22"/><text x="40.1723%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="39.9740%" y="149" width="0.0183%" height="15" fill="rgb(239,167,4)" fg:x="23966" fg:w="11"/><text x="40.2240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.01%)</title><rect x="39.9823%" y="133" width="0.0100%" height="15" fill="rgb(209,217,16)" fg:x="23971" fg:w="6"/><text x="40.2323%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.03%)</title><rect x="39.9923%" y="149" width="0.0300%" height="15" fill="rgb(219,88,35)" fg:x="23977" fg:w="18"/><text x="40.2423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="40.0007%" y="133" width="0.0217%" height="15" fill="rgb(220,193,23)" fg:x="23982" fg:w="13"/><text x="40.2507%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (10 samples, 0.02%)</title><rect x="40.0290%" y="149" width="0.0167%" height="15" fill="rgb(230,90,52)" fg:x="23999" fg:w="10"/><text x="40.2790%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="40.0574%" y="133" width="0.0400%" height="15" fill="rgb(252,106,19)" fg:x="24016" fg:w="24"/><text x="40.3074%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.03%)</title><rect x="40.0724%" y="117" width="0.0250%" height="15" fill="rgb(206,74,20)" fg:x="24025" fg:w="15"/><text x="40.3224%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.05%)</title><rect x="40.0507%" y="149" width="0.0484%" height="15" fill="rgb(230,138,44)" fg:x="24012" fg:w="29"/><text x="40.3007%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (104 samples, 0.17%)</title><rect x="39.9656%" y="165" width="0.1735%" height="15" fill="rgb(235,182,43)" fg:x="23961" fg:w="104"/><text x="40.2156%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (20 samples, 0.03%)</title><rect x="40.1057%" y="149" width="0.0334%" height="15" fill="rgb(242,16,51)" fg:x="24045" fg:w="20"/><text x="40.3557%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="40.1274%" y="133" width="0.0117%" height="15" fill="rgb(248,9,4)" fg:x="24058" fg:w="7"/><text x="40.3774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (169 samples, 0.28%)</title><rect x="39.9039%" y="181" width="0.2819%" height="15" fill="rgb(210,31,22)" fg:x="23924" fg:w="169"/><text x="40.1539%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.04%)</title><rect x="40.1441%" y="165" width="0.0417%" height="15" fill="rgb(239,54,39)" fg:x="24068" fg:w="25"/><text x="40.3941%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (199 samples, 0.33%)</title><rect x="39.8839%" y="197" width="0.3319%" height="15" fill="rgb(230,99,41)" fg:x="23912" fg:w="199"/><text x="40.1339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.02%)</title><rect x="40.2008%" y="181" width="0.0150%" height="15" fill="rgb(253,106,12)" fg:x="24102" fg:w="9"/><text x="40.4508%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="40.2025%" y="165" width="0.0133%" height="15" fill="rgb(213,46,41)" fg:x="24103" fg:w="8"/><text x="40.4525%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (227 samples, 0.38%)</title><rect x="39.8405%" y="229" width="0.3786%" height="15" fill="rgb(215,133,35)" fg:x="23886" fg:w="227"/><text x="40.0905%" y="239.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (213 samples, 0.36%)</title><rect x="39.8639%" y="213" width="0.3553%" height="15" fill="rgb(213,28,5)" fg:x="23900" fg:w="213"/><text x="40.1139%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseErasures::get_erasure_edges (686 samples, 1.14%)</title><rect x="39.1350%" y="245" width="1.1442%" height="15" fill="rgb(215,77,49)" fg:x="23463" fg:w="686"/><text x="39.3850%" y="255.50"></text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::get_node_unwrap (35 samples, 0.06%)</title><rect x="40.2208%" y="229" width="0.0584%" height="15" fill="rgb(248,100,22)" fg:x="24114" fg:w="35"/><text x="40.4708%" y="239.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (337 samples, 0.56%)</title><rect x="40.2792%" y="245" width="0.5621%" height="15" fill="rgb(208,67,9)" fg:x="24149" fg:w="337"/><text x="40.5292%" y="255.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (12 samples, 0.02%)</title><rect x="40.8413%" y="245" width="0.0200%" height="15" fill="rgb(219,133,21)" fg:x="24486" fg:w="12"/><text x="41.0913%" y="255.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (12 samples, 0.02%)</title><rect x="40.8413%" y="229" width="0.0200%" height="15" fill="rgb(246,46,29)" fg:x="24486" fg:w="12"/><text x="41.0913%" y="239.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_erasure (22,328 samples, 37.24%)</title><rect x="3.6244%" y="261" width="37.2419%" height="15" fill="rgb(246,185,52)" fg:x="2173" fg:w="22328"/><text x="3.8744%" y="271.50">qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="57.9361%" y="245" width="0.0234%" height="15" fill="rgb(252,136,11)" fg:x="34735" fg:w="14"/><text x="58.1861%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="57.9394%" y="229" width="0.0200%" height="15" fill="rgb(219,138,53)" fg:x="34737" fg:w="12"/><text x="58.1894%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (8 samples, 0.01%)</title><rect x="57.9461%" y="213" width="0.0133%" height="15" fill="rgb(211,51,23)" fg:x="34741" fg:w="8"/><text x="58.1961%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="57.9611%" y="245" width="0.0200%" height="15" fill="rgb(247,221,28)" fg:x="34750" fg:w="12"/><text x="58.2111%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="57.9811%" y="245" width="0.0217%" height="15" fill="rgb(251,222,45)" fg:x="34762" fg:w="13"/><text x="58.2311%" y="255.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (575 samples, 0.96%)</title><rect x="58.0095%" y="245" width="0.9591%" height="15" fill="rgb(217,162,53)" fg:x="34779" fg:w="575"/><text x="58.2595%" y="255.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (23,229 samples, 38.74%)</title><rect x="40.8697%" y="261" width="38.7447%" height="15" fill="rgb(229,93,14)" fg:x="24503" fg:w="23229"/><text x="41.1197%" y="271.50">qecp`qecp::simulator::Simulator::generate_random_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (12,378 samples, 20.65%)</title><rect x="58.9685%" y="245" width="20.6458%" height="15" fill="rgb(209,67,49)" fg:x="35354" fg:w="12378"/><text x="59.2185%" y="255.50">qecp`qecp::simulator::Simulator:..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (9,763 samples, 16.28%)</title><rect x="63.3302%" y="229" width="16.2842%" height="15" fill="rgb(213,87,29)" fg:x="37969" fg:w="9763"/><text x="63.5802%" y="239.50">qecp`qecp::simulator::Sim..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.04%)</title><rect x="87.2836%" y="213" width="0.0434%" height="15" fill="rgb(205,151,52)" fg:x="52330" fg:w="26"/><text x="87.5336%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="87.2886%" y="197" width="0.0384%" height="15" fill="rgb(253,215,39)" fg:x="52333" fg:w="23"/><text x="87.5386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.04%)</title><rect x="87.2919%" y="181" width="0.0350%" height="15" fill="rgb(221,220,41)" fg:x="52335" fg:w="21"/><text x="87.5419%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.03%)</title><rect x="87.3003%" y="165" width="0.0267%" height="15" fill="rgb(218,133,21)" fg:x="52340" fg:w="16"/><text x="87.5503%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="87.3136%" y="149" width="0.0133%" height="15" fill="rgb(221,193,43)" fg:x="52348" fg:w="8"/><text x="87.5636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.02%)</title><rect x="87.4621%" y="149" width="0.0150%" height="15" fill="rgb(240,128,52)" fg:x="52437" fg:w="9"/><text x="87.7121%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.13%)</title><rect x="87.4437%" y="181" width="0.1318%" height="15" fill="rgb(253,114,12)" fg:x="52426" fg:w="79"/><text x="87.6937%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (75 samples, 0.13%)</title><rect x="87.4504%" y="165" width="0.1251%" height="15" fill="rgb(215,223,47)" fg:x="52430" fg:w="75"/><text x="87.7004%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (59 samples, 0.10%)</title><rect x="87.4771%" y="149" width="0.0984%" height="15" fill="rgb(248,225,23)" fg:x="52446" fg:w="59"/><text x="87.7271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.04%)</title><rect x="87.5371%" y="133" width="0.0384%" height="15" fill="rgb(250,108,0)" fg:x="52482" fg:w="23"/><text x="87.7871%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (90 samples, 0.15%)</title><rect x="87.4287%" y="197" width="0.1501%" height="15" fill="rgb(228,208,7)" fg:x="52417" fg:w="90"/><text x="87.6787%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (147 samples, 0.25%)</title><rect x="87.3386%" y="213" width="0.2452%" height="15" fill="rgb(244,45,10)" fg:x="52363" fg:w="147"/><text x="87.5886%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (212 samples, 0.35%)</title><rect x="87.2319%" y="229" width="0.3536%" height="15" fill="rgb(207,125,25)" fg:x="52299" fg:w="212"/><text x="87.4819%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (780 samples, 1.30%)</title><rect x="86.3128%" y="245" width="1.3010%" height="15" fill="rgb(210,195,18)" fg:x="51748" fg:w="780"/><text x="86.5628%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 0.03%)</title><rect x="87.5855%" y="229" width="0.0284%" height="15" fill="rgb(249,80,12)" fg:x="52511" fg:w="17"/><text x="87.8355%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_detected_erasures (4,804 samples, 8.01%)</title><rect x="79.6144%" y="261" width="8.0128%" height="15" fill="rgb(221,65,9)" fg:x="47732" fg:w="4804"/><text x="79.8644%" y="271.50">qecp`qecp::..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="87.6138%" y="245" width="0.0133%" height="15" fill="rgb(235,49,36)" fg:x="52528" fg:w="8"/><text x="87.8638%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="93.7152%" y="165" width="0.0100%" height="15" fill="rgb(225,32,20)" fg:x="56186" fg:w="6"/><text x="93.9652%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.04%)</title><rect x="93.7068%" y="197" width="0.0434%" height="15" fill="rgb(215,141,46)" fg:x="56181" fg:w="26"/><text x="93.9568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.04%)</title><rect x="93.7085%" y="181" width="0.0417%" height="15" fill="rgb(250,160,47)" fg:x="56182" fg:w="25"/><text x="93.9585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.03%)</title><rect x="93.7252%" y="165" width="0.0250%" height="15" fill="rgb(216,222,40)" fg:x="56192" fg:w="15"/><text x="93.9752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="93.7402%" y="149" width="0.0100%" height="15" fill="rgb(234,217,39)" fg:x="56201" fg:w="6"/><text x="93.9902%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.05%)</title><rect x="93.7018%" y="213" width="0.0500%" height="15" fill="rgb(207,178,40)" fg:x="56178" fg:w="30"/><text x="93.9518%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="93.8453%" y="149" width="0.0217%" height="15" fill="rgb(221,136,13)" fg:x="56264" fg:w="13"/><text x="94.0953%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.08%)</title><rect x="93.8369%" y="181" width="0.0751%" height="15" fill="rgb(249,199,10)" fg:x="56259" fg:w="45"/><text x="94.0869%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (44 samples, 0.07%)</title><rect x="93.8386%" y="165" width="0.0734%" height="15" fill="rgb(249,222,13)" fg:x="56260" fg:w="44"/><text x="94.0886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.05%)</title><rect x="93.8670%" y="149" width="0.0450%" height="15" fill="rgb(244,185,38)" fg:x="56277" fg:w="27"/><text x="94.1170%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="93.8937%" y="133" width="0.0183%" height="15" fill="rgb(236,202,9)" fg:x="56293" fg:w="11"/><text x="94.1437%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.09%)</title><rect x="93.8236%" y="197" width="0.0901%" height="15" fill="rgb(250,229,37)" fg:x="56251" fg:w="54"/><text x="94.0736%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (92 samples, 0.15%)</title><rect x="93.7669%" y="213" width="0.1535%" height="15" fill="rgb(206,174,23)" fg:x="56217" fg:w="92"/><text x="94.0169%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (150 samples, 0.25%)</title><rect x="93.6735%" y="229" width="0.2502%" height="15" fill="rgb(211,33,43)" fg:x="56161" fg:w="150"/><text x="93.9235%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (471 samples, 0.79%)</title><rect x="93.1581%" y="245" width="0.7856%" height="15" fill="rgb(245,58,50)" fg:x="55852" fg:w="471"/><text x="93.4081%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.02%)</title><rect x="93.9237%" y="229" width="0.0200%" height="15" fill="rgb(244,68,36)" fg:x="56311" fg:w="12"/><text x="94.1737%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (3,794 samples, 6.33%)</title><rect x="87.6272%" y="261" width="6.3282%" height="15" fill="rgb(232,229,15)" fg:x="52536" fg:w="3794"/><text x="87.8772%" y="271.50">qecp`qec..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="93.9437%" y="245" width="0.0117%" height="15" fill="rgb(254,30,23)" fg:x="56323" fg:w="7"/><text x="94.1937%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.05%)</title><rect x="96.7975%" y="213" width="0.0500%" height="15" fill="rgb(235,160,14)" fg:x="58034" fg:w="30"/><text x="97.0475%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.05%)</title><rect x="96.8009%" y="197" width="0.0467%" height="15" fill="rgb(212,155,44)" fg:x="58036" fg:w="28"/><text x="97.0509%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.04%)</title><rect x="96.8042%" y="181" width="0.0434%" height="15" fill="rgb(226,2,50)" fg:x="58038" fg:w="26"/><text x="97.0542%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.03%)</title><rect x="96.8142%" y="165" width="0.0334%" height="15" fill="rgb(234,177,6)" fg:x="58044" fg:w="20"/><text x="97.0642%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.03%)</title><rect x="96.9577%" y="149" width="0.0300%" height="15" fill="rgb(217,24,9)" fg:x="58130" fg:w="18"/><text x="97.2077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.12%)</title><rect x="96.9360%" y="197" width="0.1184%" height="15" fill="rgb(220,13,46)" fg:x="58117" fg:w="71"/><text x="97.1860%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.11%)</title><rect x="96.9427%" y="181" width="0.1118%" height="15" fill="rgb(239,221,27)" fg:x="58121" fg:w="67"/><text x="97.1927%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (64 samples, 0.11%)</title><rect x="96.9477%" y="165" width="0.1067%" height="15" fill="rgb(222,198,25)" fg:x="58124" fg:w="64"/><text x="97.1977%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.07%)</title><rect x="96.9877%" y="149" width="0.0667%" height="15" fill="rgb(211,99,13)" fg:x="58148" fg:w="40"/><text x="97.2377%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="97.0344%" y="133" width="0.0200%" height="15" fill="rgb(232,111,31)" fg:x="58176" fg:w="12"/><text x="97.2844%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (124 samples, 0.21%)</title><rect x="96.8559%" y="213" width="0.2068%" height="15" fill="rgb(245,82,37)" fg:x="58069" fg:w="124"/><text x="97.1059%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (181 samples, 0.30%)</title><rect x="96.7642%" y="229" width="0.3019%" height="15" fill="rgb(227,149,46)" fg:x="58014" fg:w="181"/><text x="97.0142%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (824 samples, 1.37%)</title><rect x="95.7184%" y="245" width="1.3744%" height="15" fill="rgb(218,36,50)" fg:x="57387" fg:w="824"/><text x="95.9684%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (16 samples, 0.03%)</title><rect x="97.0661%" y="229" width="0.0267%" height="15" fill="rgb(226,80,48)" fg:x="58195" fg:w="16"/><text x="97.3161%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (1,894 samples, 3.16%)</title><rect x="93.9554%" y="261" width="3.1591%" height="15" fill="rgb(238,224,15)" fg:x="56330" fg:w="1894"/><text x="94.2054%" y="271.50">qec..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (13 samples, 0.02%)</title><rect x="97.0928%" y="245" width="0.0217%" height="15" fill="rgb(241,136,10)" fg:x="58211" fg:w="13"/><text x="97.3428%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (12 samples, 0.02%)</title><rect x="97.1161%" y="245" width="0.0200%" height="15" fill="rgb(208,32,45)" fg:x="58225" fg:w="12"/><text x="97.3661%" y="255.50"></text></g><g><title>qecp`qecp::simulator::Simulator::validate_correction (243 samples, 0.41%)</title><rect x="97.1161%" y="261" width="0.4053%" height="15" fill="rgb(207,135,9)" fg:x="58225" fg:w="243"/><text x="97.3661%" y="271.50"></text></g><g><title>qecp`qecp::code_builder::code_builder_validate_correction (231 samples, 0.39%)</title><rect x="97.1361%" y="245" width="0.3853%" height="15" fill="rgb(206,86,44)" fg:x="58237" fg:w="231"/><text x="97.3861%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (13 samples, 0.02%)</title><rect x="97.4997%" y="229" width="0.0217%" height="15" fill="rgb(245,177,15)" fg:x="58455" fg:w="13"/><text x="97.7497%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (7 samples, 0.01%)</title><rect x="97.5214%" y="261" width="0.0117%" height="15" fill="rgb(206,64,50)" fg:x="58468" fg:w="7"/><text x="97.7714%" y="271.50"></text></g><g><title>qecp`qecp::types::CorrelatedPauliErrorRates::generate_random_error (1,454 samples, 2.43%)</title><rect x="97.5331%" y="261" width="2.4252%" height="15" fill="rgb(234,36,40)" fg:x="58475" fg:w="1454"/><text x="97.7831%" y="271.50">qe..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (8 samples, 0.01%)</title><rect x="99.9583%" y="261" width="0.0133%" height="15" fill="rgb(213,64,8)" fg:x="59929" fg:w="8"/><text x="100.2083%" y="271.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (16 samples, 0.03%)</title><rect x="99.9716%" y="261" width="0.0267%" height="15" fill="rgb(210,75,36)" fg:x="59937" fg:w="16"/><text x="100.2216%" y="271.50"></text></g><g><title>all (59,954 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="59954"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,870 samples, 99.86%)</title><rect x="0.1401%" y="341" width="99.8599%" height="15" fill="rgb(252,204,47)" fg:x="84" fg:w="59870"/><text x="0.3901%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,870 samples, 99.86%)</title><rect x="0.1401%" y="325" width="99.8599%" height="15" fill="rgb(208,77,27)" fg:x="84" fg:w="59870"/><text x="0.3901%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,870 samples, 99.86%)</title><rect x="0.1401%" y="309" width="99.8599%" height="15" fill="rgb(221,76,26)" fg:x="84" fg:w="59870"/><text x="0.3901%" y="319.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,870 samples, 99.86%)</title><rect x="0.1401%" y="293" width="99.8599%" height="15" fill="rgb(225,139,18)" fg:x="84" fg:w="59870"/><text x="0.3901%" y="303.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,834 samples, 99.80%)</title><rect x="0.2002%" y="277" width="99.7998%" height="15" fill="rgb(230,137,11)" fg:x="120" fg:w="59834"/><text x="0.4502%" y="287.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>