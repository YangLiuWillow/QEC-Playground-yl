<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="59921"><g><title>qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (19 samples, 0.03%)</title><rect x="0.0117%" y="69" width="0.0317%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="19"/><text x="0.2617%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (19 samples, 0.03%)</title><rect x="0.0117%" y="53" width="0.0317%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="19"/><text x="0.2617%" y="63.50"></text></g><g><title>qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (23 samples, 0.04%)</title><rect x="0.0117%" y="85" width="0.0384%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="23"/><text x="0.2617%" y="95.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute (14 samples, 0.02%)</title><rect x="0.0501%" y="69" width="0.0234%" height="15" fill="rgb(248,212,6)" fg:x="30" fg:w="14"/><text x="0.3001%" y="79.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute_dijkstra_with_end_position (13 samples, 0.02%)</title><rect x="0.0517%" y="53" width="0.0217%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="13"/><text x="0.3017%" y="63.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build (11 samples, 0.02%)</title><rect x="0.0734%" y="69" width="0.0184%" height="15" fill="rgb(232,128,0)" fg:x="44" fg:w="11"/><text x="0.3234%" y="79.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build_with_weight_function_region (11 samples, 0.02%)</title><rect x="0.0734%" y="53" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="44" fg:w="11"/><text x="0.3234%" y="63.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (6 samples, 0.01%)</title><rect x="0.0818%" y="37" width="0.0100%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="6"/><text x="0.3318%" y="47.50"></text></g><g><title>qecp`qecp::decoder_mwpm::MWPMDecoder::new (26 samples, 0.04%)</title><rect x="0.0501%" y="85" width="0.0434%" height="15" fill="rgb(218,30,26)" fg:x="30" fg:w="26"/><text x="0.3001%" y="95.50"></text></g><g><title>dyld`start (61 samples, 0.10%)</title><rect x="0.0000%" y="325" width="0.1018%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="61"/><text x="0.2500%" y="335.50"></text></g><g><title>qecp`main (61 samples, 0.10%)</title><rect x="0.0000%" y="309" width="0.1018%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="61"/><text x="0.2500%" y="319.50"></text></g><g><title>qecp`std::rt::lang_start_internal (61 samples, 0.10%)</title><rect x="0.0000%" y="293" width="0.1018%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="61"/><text x="0.2500%" y="303.50"></text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (61 samples, 0.10%)</title><rect x="0.0000%" y="277" width="0.1018%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="61"/><text x="0.2500%" y="287.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (61 samples, 0.10%)</title><rect x="0.0000%" y="261" width="0.1018%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="61"/><text x="0.2500%" y="271.50"></text></g><g><title>qecp`qecp::main (61 samples, 0.10%)</title><rect x="0.0000%" y="245" width="0.1018%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="61"/><text x="0.2500%" y="255.50"></text></g><g><title>qecp`tokio::runtime::Runtime::block_on (61 samples, 0.10%)</title><rect x="0.0000%" y="229" width="0.1018%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="61"/><text x="0.2500%" y="239.50"></text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (61 samples, 0.10%)</title><rect x="0.0000%" y="213" width="0.1018%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="61"/><text x="0.2500%" y="223.50"></text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (61 samples, 0.10%)</title><rect x="0.0000%" y="197" width="0.1018%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="61"/><text x="0.2500%" y="207.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 0.10%)</title><rect x="0.0000%" y="181" width="0.1018%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="61"/><text x="0.2500%" y="191.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.10%)</title><rect x="0.0000%" y="165" width="0.1018%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="61"/><text x="0.2500%" y="175.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (61 samples, 0.10%)</title><rect x="0.0000%" y="149" width="0.1018%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="61"/><text x="0.2500%" y="159.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (61 samples, 0.10%)</title><rect x="0.0000%" y="133" width="0.1018%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="61"/><text x="0.2500%" y="143.50"></text></g><g><title>qecp`qecp::tool::run_matched_tool (61 samples, 0.10%)</title><rect x="0.0000%" y="117" width="0.1018%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="61"/><text x="0.2500%" y="127.50"></text></g><g><title>qecp`qecp::tool::benchmark (61 samples, 0.10%)</title><rect x="0.0000%" y="101" width="0.1018%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="61"/><text x="0.2500%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (38 samples, 0.06%)</title><rect x="0.1035%" y="261" width="0.0634%" height="15" fill="rgb(241,131,45)" fg:x="62" fg:w="38"/><text x="0.3535%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (102 samples, 0.17%)</title><rect x="0.2019%" y="245" width="0.1702%" height="15" fill="rgb(249,31,29)" fg:x="121" fg:w="102"/><text x="0.4519%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="0.3755%" y="245" width="0.0234%" height="15" fill="rgb(225,111,53)" fg:x="225" fg:w="14"/><text x="0.6255%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.05%)</title><rect x="0.3989%" y="245" width="0.0467%" height="15" fill="rgb(238,160,17)" fg:x="239" fg:w="28"/><text x="0.6489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="0.4473%" y="245" width="0.0217%" height="15" fill="rgb(214,148,48)" fg:x="268" fg:w="13"/><text x="0.6973%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="0.5307%" y="181" width="0.0134%" height="15" fill="rgb(232,36,49)" fg:x="318" fg:w="8"/><text x="0.7807%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.06%)</title><rect x="0.5190%" y="213" width="0.0551%" height="15" fill="rgb(209,103,24)" fg:x="311" fg:w="33"/><text x="0.7690%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 0.05%)</title><rect x="0.5257%" y="197" width="0.0484%" height="15" fill="rgb(229,88,8)" fg:x="315" fg:w="29"/><text x="0.7757%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.03%)</title><rect x="0.5440%" y="181" width="0.0300%" height="15" fill="rgb(213,181,19)" fg:x="326" fg:w="18"/><text x="0.7940%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="0.5641%" y="165" width="0.0100%" height="15" fill="rgb(254,191,54)" fg:x="338" fg:w="6"/><text x="0.8141%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (43 samples, 0.07%)</title><rect x="0.5040%" y="229" width="0.0718%" height="15" fill="rgb(241,83,37)" fg:x="302" fg:w="43"/><text x="0.7540%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.02%)</title><rect x="0.6258%" y="165" width="0.0234%" height="15" fill="rgb(233,36,39)" fg:x="375" fg:w="14"/><text x="0.8758%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.07%)</title><rect x="0.5991%" y="213" width="0.0668%" height="15" fill="rgb(226,3,54)" fg:x="359" fg:w="40"/><text x="0.8491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.06%)</title><rect x="0.6108%" y="197" width="0.0551%" height="15" fill="rgb(245,192,40)" fg:x="366" fg:w="33"/><text x="0.8608%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.05%)</title><rect x="0.6125%" y="181" width="0.0534%" height="15" fill="rgb(238,167,29)" fg:x="367" fg:w="32"/><text x="0.8625%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="0.6492%" y="165" width="0.0167%" height="15" fill="rgb(232,182,51)" fg:x="389" fg:w="10"/><text x="0.8992%" y="175.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (53 samples, 0.09%)</title><rect x="0.5808%" y="229" width="0.0884%" height="15" fill="rgb(231,60,39)" fg:x="348" fg:w="53"/><text x="0.8308%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (108 samples, 0.18%)</title><rect x="0.4906%" y="245" width="0.1802%" height="15" fill="rgb(208,69,12)" fg:x="294" fg:w="108"/><text x="0.7406%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.09%)</title><rect x="0.8011%" y="229" width="0.0901%" height="15" fill="rgb(235,93,37)" fg:x="480" fg:w="54"/><text x="1.0511%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="0.8528%" y="213" width="0.0384%" height="15" fill="rgb(213,116,39)" fg:x="511" fg:w="23"/><text x="1.1028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.04%)</title><rect x="0.8545%" y="197" width="0.0367%" height="15" fill="rgb(222,207,29)" fg:x="512" fg:w="22"/><text x="1.1045%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.03%)</title><rect x="1.0113%" y="197" width="0.0317%" height="15" fill="rgb(206,96,30)" fg:x="606" fg:w="19"/><text x="1.2613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (117 samples, 0.20%)</title><rect x="0.8912%" y="229" width="0.1953%" height="15" fill="rgb(218,138,4)" fg:x="534" fg:w="117"/><text x="1.1412%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (97 samples, 0.16%)</title><rect x="0.9246%" y="213" width="0.1619%" height="15" fill="rgb(250,191,14)" fg:x="554" fg:w="97"/><text x="1.1746%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (26 samples, 0.04%)</title><rect x="1.0430%" y="197" width="0.0434%" height="15" fill="rgb(239,60,40)" fg:x="625" fg:w="26"/><text x="1.2930%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.05%)</title><rect x="1.1816%" y="213" width="0.0451%" height="15" fill="rgb(206,27,48)" fg:x="708" fg:w="27"/><text x="1.4316%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="1.2083%" y="197" width="0.0184%" height="15" fill="rgb(225,35,8)" fg:x="724" fg:w="11"/><text x="1.4583%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="1.2133%" y="181" width="0.0134%" height="15" fill="rgb(250,213,24)" fg:x="727" fg:w="8"/><text x="1.4633%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="1.2884%" y="181" width="0.0234%" height="15" fill="rgb(247,123,22)" fg:x="772" fg:w="14"/><text x="1.5384%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 0.11%)</title><rect x="1.2266%" y="213" width="0.1068%" height="15" fill="rgb(231,138,38)" fg:x="735" fg:w="64"/><text x="1.4766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (56 samples, 0.09%)</title><rect x="1.2400%" y="197" width="0.0935%" height="15" fill="rgb(231,145,46)" fg:x="743" fg:w="56"/><text x="1.4900%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="1.3117%" y="181" width="0.0217%" height="15" fill="rgb(251,118,11)" fg:x="786" fg:w="13"/><text x="1.5617%" y="191.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (407 samples, 0.68%)</title><rect x="0.6709%" y="245" width="0.6792%" height="15" fill="rgb(217,147,25)" fg:x="402" fg:w="407"/><text x="0.9209%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (145 samples, 0.24%)</title><rect x="1.1081%" y="229" width="0.2420%" height="15" fill="rgb(247,81,37)" fg:x="664" fg:w="145"/><text x="1.3581%" y="239.50"></text></g><g><title>qecp`DYLD-STUB$$free (18 samples, 0.03%)</title><rect x="1.3551%" y="245" width="0.0300%" height="15" fill="rgb(209,12,38)" fg:x="812" fg:w="18"/><text x="1.6051%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (33 samples, 0.06%)</title><rect x="1.3985%" y="245" width="0.0551%" height="15" fill="rgb(227,1,9)" fg:x="838" fg:w="33"/><text x="1.6485%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.02%)</title><rect x="1.4953%" y="197" width="0.0150%" height="15" fill="rgb(248,47,43)" fg:x="896" fg:w="9"/><text x="1.7453%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="1.4836%" y="213" width="0.0334%" height="15" fill="rgb(221,10,30)" fg:x="889" fg:w="20"/><text x="1.7336%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.04%)</title><rect x="1.5170%" y="213" width="0.0350%" height="15" fill="rgb(210,229,1)" fg:x="909" fg:w="21"/><text x="1.7670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.03%)</title><rect x="1.5253%" y="197" width="0.0267%" height="15" fill="rgb(222,148,37)" fg:x="914" fg:w="16"/><text x="1.7753%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="1.5554%" y="213" width="0.0117%" height="15" fill="rgb(234,67,33)" fg:x="932" fg:w="7"/><text x="1.8054%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.11%)</title><rect x="1.4753%" y="229" width="0.1085%" height="15" fill="rgb(247,98,35)" fg:x="884" fg:w="65"/><text x="1.7253%" y="239.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (79 samples, 0.13%)</title><rect x="1.4586%" y="245" width="0.1318%" height="15" fill="rgb(247,138,52)" fg:x="874" fg:w="79"/><text x="1.7086%" y="255.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_edges (13 samples, 0.02%)</title><rect x="1.5971%" y="245" width="0.0217%" height="15" fill="rgb(213,79,30)" fg:x="957" fg:w="13"/><text x="1.8471%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (65 samples, 0.11%)</title><rect x="2.5834%" y="229" width="0.1085%" height="15" fill="rgb(246,177,23)" fg:x="1548" fg:w="65"/><text x="2.8334%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="2.7086%" y="197" width="0.0284%" height="15" fill="rgb(230,62,27)" fg:x="1623" fg:w="17"/><text x="2.9586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="2.6919%" y="229" width="0.0467%" height="15" fill="rgb(216,154,8)" fg:x="1613" fg:w="28"/><text x="2.9419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.04%)</title><rect x="2.7019%" y="213" width="0.0367%" height="15" fill="rgb(244,35,45)" fg:x="1619" fg:w="22"/><text x="2.9519%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.06%)</title><rect x="2.8521%" y="213" width="0.0584%" height="15" fill="rgb(251,115,12)" fg:x="1709" fg:w="35"/><text x="3.1021%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.17%)</title><rect x="2.7503%" y="229" width="0.1686%" height="15" fill="rgb(240,54,50)" fg:x="1648" fg:w="101"/><text x="3.0003%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="2.9405%" y="197" width="0.0100%" height="15" fill="rgb(233,84,52)" fg:x="1762" fg:w="6"/><text x="3.1905%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.04%)</title><rect x="2.9188%" y="229" width="0.0401%" height="15" fill="rgb(207,117,47)" fg:x="1749" fg:w="24"/><text x="3.1688%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="2.9222%" y="213" width="0.0367%" height="15" fill="rgb(249,43,39)" fg:x="1751" fg:w="22"/><text x="3.1722%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="2.9589%" y="229" width="0.0267%" height="15" fill="rgb(209,38,44)" fg:x="1773" fg:w="16"/><text x="3.2089%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 0.06%)</title><rect x="2.9856%" y="229" width="0.0567%" height="15" fill="rgb(236,212,23)" fg:x="1789" fg:w="34"/><text x="3.2356%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="3.0457%" y="229" width="0.0184%" height="15" fill="rgb(242,79,21)" fg:x="1825" fg:w="11"/><text x="3.2957%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.08%)</title><rect x="3.1141%" y="213" width="0.0801%" height="15" fill="rgb(211,96,35)" fg:x="1866" fg:w="48"/><text x="3.3641%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.05%)</title><rect x="3.1475%" y="197" width="0.0467%" height="15" fill="rgb(253,215,40)" fg:x="1886" fg:w="28"/><text x="3.3975%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.04%)</title><rect x="3.1508%" y="181" width="0.0434%" height="15" fill="rgb(211,81,21)" fg:x="1888" fg:w="26"/><text x="3.4008%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (84 samples, 0.14%)</title><rect x="3.1942%" y="213" width="0.1402%" height="15" fill="rgb(208,190,38)" fg:x="1914" fg:w="84"/><text x="3.4442%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (61 samples, 0.10%)</title><rect x="3.2326%" y="197" width="0.1018%" height="15" fill="rgb(235,213,38)" fg:x="1937" fg:w="61"/><text x="3.4826%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.06%)</title><rect x="3.2710%" y="181" width="0.0634%" height="15" fill="rgb(237,122,38)" fg:x="1960" fg:w="38"/><text x="3.5210%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="3.3361%" y="213" width="0.0134%" height="15" fill="rgb(244,218,35)" fg:x="1999" fg:w="8"/><text x="3.5861%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.01%)</title><rect x="3.3644%" y="213" width="0.0100%" height="15" fill="rgb(240,68,47)" fg:x="2016" fg:w="6"/><text x="3.6144%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.32%)</title><rect x="3.0774%" y="229" width="0.3188%" height="15" fill="rgb(210,16,53)" fg:x="1844" fg:w="191"/><text x="3.3274%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (13 samples, 0.02%)</title><rect x="3.3744%" y="213" width="0.0217%" height="15" fill="rgb(235,124,12)" fg:x="2022" fg:w="13"/><text x="3.6244%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="3.4295%" y="213" width="0.0184%" height="15" fill="rgb(224,169,11)" fg:x="2055" fg:w="11"/><text x="3.6795%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="3.4312%" y="197" width="0.0167%" height="15" fill="rgb(250,166,2)" fg:x="2056" fg:w="10"/><text x="3.6812%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="3.4362%" y="181" width="0.0117%" height="15" fill="rgb(242,216,29)" fg:x="2059" fg:w="7"/><text x="3.6862%" y="191.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 0.07%)</title><rect x="3.3961%" y="229" width="0.0701%" height="15" fill="rgb(230,116,27)" fg:x="2035" fg:w="42"/><text x="3.6461%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.02%)</title><rect x="3.4479%" y="213" width="0.0184%" height="15" fill="rgb(228,99,48)" fg:x="2066" fg:w="11"/><text x="3.6979%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="3.5063%" y="197" width="0.0384%" height="15" fill="rgb(253,11,6)" fg:x="2101" fg:w="23"/><text x="3.7563%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.03%)</title><rect x="3.5113%" y="181" width="0.0334%" height="15" fill="rgb(247,143,39)" fg:x="2104" fg:w="20"/><text x="3.7613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="3.5130%" y="165" width="0.0317%" height="15" fill="rgb(236,97,10)" fg:x="2105" fg:w="19"/><text x="3.7630%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.02%)</title><rect x="3.5230%" y="149" width="0.0217%" height="15" fill="rgb(233,208,19)" fg:x="2111" fg:w="13"/><text x="3.7730%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="3.5447%" y="197" width="0.0184%" height="15" fill="rgb(216,164,2)" fg:x="2124" fg:w="11"/><text x="3.7947%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (48 samples, 0.08%)</title><rect x="3.4946%" y="213" width="0.0801%" height="15" fill="rgb(220,129,5)" fg:x="2094" fg:w="48"/><text x="3.7446%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (60 samples, 0.10%)</title><rect x="3.4779%" y="229" width="0.1001%" height="15" fill="rgb(242,17,10)" fg:x="2084" fg:w="60"/><text x="3.7279%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (9 samples, 0.02%)</title><rect x="3.5847%" y="229" width="0.0150%" height="15" fill="rgb(242,107,0)" fg:x="2148" fg:w="9"/><text x="3.8347%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (9 samples, 0.02%)</title><rect x="3.6081%" y="229" width="0.0150%" height="15" fill="rgb(251,28,31)" fg:x="2162" fg:w="9"/><text x="3.8581%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.01%)</title><rect x="3.6565%" y="213" width="0.0100%" height="15" fill="rgb(233,223,10)" fg:x="2191" fg:w="6"/><text x="3.9065%" y="223.50"></text></g><g><title>qecp`DYLD-STUB$$realloc (6 samples, 0.01%)</title><rect x="3.6682%" y="213" width="0.0100%" height="15" fill="rgb(215,21,27)" fg:x="2198" fg:w="6"/><text x="3.9182%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="3.6865%" y="197" width="0.0134%" height="15" fill="rgb(232,23,21)" fg:x="2209" fg:w="8"/><text x="3.9365%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="3.6882%" y="181" width="0.0117%" height="15" fill="rgb(244,5,23)" fg:x="2210" fg:w="7"/><text x="3.9382%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="3.7549%" y="149" width="0.0100%" height="15" fill="rgb(226,81,46)" fg:x="2250" fg:w="6"/><text x="4.0049%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="3.7783%" y="149" width="0.0117%" height="15" fill="rgb(247,70,30)" fg:x="2264" fg:w="7"/><text x="4.0283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="3.7783%" y="133" width="0.0117%" height="15" fill="rgb(212,68,19)" fg:x="2264" fg:w="7"/><text x="4.0283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (26 samples, 0.04%)</title><rect x="3.7483%" y="165" width="0.0434%" height="15" fill="rgb(240,187,13)" fg:x="2246" fg:w="26"/><text x="3.9983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.02%)</title><rect x="3.8250%" y="149" width="0.0150%" height="15" fill="rgb(223,113,26)" fg:x="2292" fg:w="9"/><text x="4.0750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="3.8701%" y="133" width="0.0134%" height="15" fill="rgb(206,192,2)" fg:x="2319" fg:w="8"/><text x="4.1201%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (35 samples, 0.06%)</title><rect x="3.8467%" y="149" width="0.0584%" height="15" fill="rgb(241,108,4)" fg:x="2305" fg:w="35"/><text x="4.0967%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="3.8885%" y="133" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="2330" fg:w="10"/><text x="4.1385%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.02%)</title><rect x="3.9369%" y="101" width="0.0217%" height="15" fill="rgb(224,114,35)" fg:x="2359" fg:w="13"/><text x="4.1869%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.06%)</title><rect x="3.9101%" y="149" width="0.0584%" height="15" fill="rgb(245,159,27)" fg:x="2343" fg:w="35"/><text x="4.1601%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (33 samples, 0.06%)</title><rect x="3.9135%" y="133" width="0.0551%" height="15" fill="rgb(245,172,44)" fg:x="2345" fg:w="33"/><text x="4.1635%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (26 samples, 0.04%)</title><rect x="3.9252%" y="117" width="0.0434%" height="15" fill="rgb(236,23,11)" fg:x="2352" fg:w="26"/><text x="4.1752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="3.9686%" y="149" width="0.0134%" height="15" fill="rgb(205,117,38)" fg:x="2378" fg:w="8"/><text x="4.2186%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (116 samples, 0.19%)</title><rect x="3.8033%" y="165" width="0.1936%" height="15" fill="rgb(237,72,25)" fg:x="2279" fg:w="116"/><text x="4.0533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.01%)</title><rect x="3.9836%" y="149" width="0.0134%" height="15" fill="rgb(244,70,9)" fg:x="2387" fg:w="8"/><text x="4.2336%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (202 samples, 0.34%)</title><rect x="3.7282%" y="181" width="0.3371%" height="15" fill="rgb(217,125,39)" fg:x="2234" fg:w="202"/><text x="3.9782%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.06%)</title><rect x="4.0019%" y="165" width="0.0634%" height="15" fill="rgb(235,36,10)" fg:x="2398" fg:w="38"/><text x="4.2519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (249 samples, 0.42%)</title><rect x="3.7082%" y="197" width="0.4155%" height="15" fill="rgb(251,123,47)" fg:x="2222" fg:w="249"/><text x="3.9582%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="4.0937%" y="181" width="0.0300%" height="15" fill="rgb(221,13,13)" fg:x="2453" fg:w="18"/><text x="4.3437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.03%)</title><rect x="4.0971%" y="165" width="0.0267%" height="15" fill="rgb(238,131,9)" fg:x="2455" fg:w="16"/><text x="4.3471%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (302 samples, 0.50%)</title><rect x="3.6231%" y="229" width="0.5040%" height="15" fill="rgb(211,50,8)" fg:x="2171" fg:w="302"/><text x="3.8731%" y="239.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (269 samples, 0.45%)</title><rect x="3.6782%" y="213" width="0.4489%" height="15" fill="rgb(245,182,24)" fg:x="2204" fg:w="269"/><text x="3.9282%" y="223.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (8 samples, 0.01%)</title><rect x="4.1338%" y="229" width="0.0134%" height="15" fill="rgb(242,14,37)" fg:x="2477" fg:w="8"/><text x="4.3838%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.01%)</title><rect x="6.6271%" y="197" width="0.0100%" height="15" fill="rgb(246,228,12)" fg:x="3971" fg:w="6"/><text x="6.8771%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="6.6888%" y="149" width="0.0234%" height="15" fill="rgb(213,55,15)" fg:x="4008" fg:w="14"/><text x="6.9388%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (48 samples, 0.08%)</title><rect x="6.6521%" y="181" width="0.0801%" height="15" fill="rgb(209,9,3)" fg:x="3986" fg:w="48"/><text x="6.9021%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (39 samples, 0.07%)</title><rect x="6.6671%" y="165" width="0.0651%" height="15" fill="rgb(230,59,30)" fg:x="3995" fg:w="39"/><text x="6.9171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.02%)</title><rect x="6.7172%" y="149" width="0.0150%" height="15" fill="rgb(209,121,21)" fg:x="4025" fg:w="9"/><text x="6.9672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="6.7422%" y="165" width="0.0134%" height="15" fill="rgb(220,109,13)" fg:x="4040" fg:w="8"/><text x="6.9922%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.15%)</title><rect x="6.6170%" y="213" width="0.1452%" height="15" fill="rgb(232,18,1)" fg:x="3965" fg:w="87"/><text x="6.8670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (75 samples, 0.13%)</title><rect x="6.6371%" y="197" width="0.1252%" height="15" fill="rgb(215,41,42)" fg:x="3977" fg:w="75"/><text x="6.8871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="6.7339%" y="181" width="0.0284%" height="15" fill="rgb(224,123,36)" fg:x="4035" fg:w="17"/><text x="6.9839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (42 samples, 0.07%)</title><rect x="6.7639%" y="213" width="0.0701%" height="15" fill="rgb(240,125,3)" fg:x="4053" fg:w="42"/><text x="7.0139%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="6.8123%" y="197" width="0.0217%" height="15" fill="rgb(205,98,50)" fg:x="4082" fg:w="13"/><text x="7.0623%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="6.8140%" y="181" width="0.0200%" height="15" fill="rgb(205,185,37)" fg:x="4083" fg:w="12"/><text x="7.0640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="6.8857%" y="197" width="0.0234%" height="15" fill="rgb(238,207,15)" fg:x="4126" fg:w="14"/><text x="7.1357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="6.9141%" y="197" width="0.0100%" height="15" fill="rgb(213,199,42)" fg:x="4143" fg:w="6"/><text x="7.1641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (71 samples, 0.12%)</title><rect x="6.8340%" y="213" width="0.1185%" height="15" fill="rgb(235,201,11)" fg:x="4095" fg:w="71"/><text x="7.0840%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (17 samples, 0.03%)</title><rect x="6.9241%" y="197" width="0.0284%" height="15" fill="rgb(207,46,11)" fg:x="4149" fg:w="17"/><text x="7.1741%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="6.9525%" y="213" width="0.0134%" height="15" fill="rgb(241,35,35)" fg:x="4166" fg:w="8"/><text x="7.2025%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="6.9542%" y="197" width="0.0117%" height="15" fill="rgb(243,32,47)" fg:x="4167" fg:w="7"/><text x="7.2042%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="6.9658%" y="213" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="4174" fg:w="6"/><text x="7.2158%" y="223.50"></text></g><g><title>qecp`PerfectMatching::AddEdge (259 samples, 0.43%)</title><rect x="6.9975%" y="213" width="0.4322%" height="15" fill="rgb(219,102,11)" fg:x="4193" fg:w="259"/><text x="7.2475%" y="223.50"></text></g><g><title>qecp`PerfectMatching::GetMatch (11 samples, 0.02%)</title><rect x="7.4298%" y="213" width="0.0184%" height="15" fill="rgb(243,110,44)" fg:x="4452" fg:w="11"/><text x="7.6798%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (224 samples, 0.37%)</title><rect x="7.6217%" y="197" width="0.3738%" height="15" fill="rgb(222,74,54)" fg:x="4567" fg:w="224"/><text x="7.8717%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.01%)</title><rect x="8.0022%" y="197" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="4795" fg:w="6"/><text x="8.2522%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (31 samples, 0.05%)</title><rect x="8.0222%" y="197" width="0.0517%" height="15" fill="rgb(226,22,26)" fg:x="4807" fg:w="31"/><text x="8.2722%" y="207.50"></text></g><g><title>qecp`PerfectMatching::AddEdge (721 samples, 1.20%)</title><rect x="8.0840%" y="197" width="1.2033%" height="15" fill="rgb(217,163,10)" fg:x="4844" fg:w="721"/><text x="8.3340%" y="207.50"></text></g><g><title>qecp`PerfectMatching::Finish (71 samples, 0.12%)</title><rect x="9.2872%" y="197" width="0.1185%" height="15" fill="rgb(213,25,53)" fg:x="5565" fg:w="71"/><text x="9.5372%" y="207.50"></text></g><g><title>qecp`PerfectMatching::GetMatch (34 samples, 0.06%)</title><rect x="9.4057%" y="197" width="0.0567%" height="15" fill="rgb(252,105,26)" fg:x="5636" fg:w="34"/><text x="9.6557%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="9.4858%" y="133" width="0.0300%" height="15" fill="rgb(220,39,43)" fg:x="5684" fg:w="18"/><text x="9.7358%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="9.5025%" y="117" width="0.0134%" height="15" fill="rgb(229,68,48)" fg:x="5694" fg:w="8"/><text x="9.7525%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="9.4708%" y="165" width="0.0484%" height="15" fill="rgb(252,8,32)" fg:x="5675" fg:w="29"/><text x="9.7208%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.04%)</title><rect x="9.4791%" y="149" width="0.0401%" height="15" fill="rgb(223,20,43)" fg:x="5680" fg:w="24"/><text x="9.7291%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (32 samples, 0.05%)</title><rect x="9.4708%" y="181" width="0.0534%" height="15" fill="rgb(229,81,49)" fg:x="5675" fg:w="32"/><text x="9.7208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.07%)</title><rect x="9.5242%" y="181" width="0.0684%" height="15" fill="rgb(236,28,36)" fg:x="5707" fg:w="41"/><text x="9.7742%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.06%)</title><rect x="9.5326%" y="165" width="0.0601%" height="15" fill="rgb(249,185,26)" fg:x="5712" fg:w="36"/><text x="9.7826%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (28 samples, 0.05%)</title><rect x="9.5459%" y="149" width="0.0467%" height="15" fill="rgb(249,174,33)" fg:x="5720" fg:w="28"/><text x="9.7959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (20 samples, 0.03%)</title><rect x="9.5593%" y="133" width="0.0334%" height="15" fill="rgb(233,201,37)" fg:x="5728" fg:w="20"/><text x="9.8093%" y="143.50"></text></g><g><title>qecp`PerfectMatching::PerfectMatching (82 samples, 0.14%)</title><rect x="9.4675%" y="197" width="0.1368%" height="15" fill="rgb(221,78,26)" fg:x="5673" fg:w="82"/><text x="9.7175%" y="207.50"></text></g><g><title>qecp`PerfectMatching::ProcessEdge00 (114 samples, 0.19%)</title><rect x="9.6043%" y="197" width="0.1903%" height="15" fill="rgb(250,127,30)" fg:x="5755" fg:w="114"/><text x="9.8543%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (6 samples, 0.01%)</title><rect x="10.0532%" y="181" width="0.0100%" height="15" fill="rgb(230,49,44)" fg:x="6024" fg:w="6"/><text x="10.3032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="10.0532%" y="165" width="0.0100%" height="15" fill="rgb(229,67,23)" fg:x="6024" fg:w="6"/><text x="10.3032%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="10.0532%" y="149" width="0.0100%" height="15" fill="rgb(249,83,47)" fg:x="6024" fg:w="6"/><text x="10.3032%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.01%)</title><rect x="10.0532%" y="133" width="0.0100%" height="15" fill="rgb(215,43,3)" fg:x="6024" fg:w="6"/><text x="10.3032%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1,390 samples, 2.32%)</title><rect x="10.0632%" y="181" width="2.3197%" height="15" fill="rgb(238,154,13)" fg:x="6030" fg:w="1390"/><text x="10.3132%" y="191.50">l..</text></g><g><title>qecp`PerfectMatching::AugmentBranch (246 samples, 0.41%)</title><rect x="12.3896%" y="165" width="0.4105%" height="15" fill="rgb(219,56,2)" fg:x="7424" fg:w="246"/><text x="12.6396%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Augment (252 samples, 0.42%)</title><rect x="12.3863%" y="181" width="0.4206%" height="15" fill="rgb(233,0,4)" fg:x="7422" fg:w="252"/><text x="12.6363%" y="191.50"></text></g><g><title>qecp`PerfectMatching::ComputeEpsCC (10 samples, 0.02%)</title><rect x="12.8119%" y="181" width="0.0167%" height="15" fill="rgb(235,30,7)" fg:x="7677" fg:w="10"/><text x="13.0619%" y="191.50"></text></g><g><title>qecp`PerfectMatching::Expand (67 samples, 0.11%)</title><rect x="12.8286%" y="181" width="0.1118%" height="15" fill="rgb(250,79,13)" fg:x="7687" fg:w="67"/><text x="13.0786%" y="191.50"></text></g><g><title>qecp`PerfectMatching::AugmentBranch (14 samples, 0.02%)</title><rect x="14.1720%" y="133" width="0.0234%" height="15" fill="rgb(211,146,34)" fg:x="8492" fg:w="14"/><text x="14.4220%" y="143.50"></text></g><g><title>qecp`PerfectMatching::GrowNode (362 samples, 0.60%)</title><rect x="13.5929%" y="165" width="0.6041%" height="15" fill="rgb(228,22,38)" fg:x="8145" fg:w="362"/><text x="13.8429%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Augment (15 samples, 0.03%)</title><rect x="14.1720%" y="149" width="0.0250%" height="15" fill="rgb(235,168,5)" fg:x="8492" fg:w="15"/><text x="14.4220%" y="159.50"></text></g><g><title>qecp`PerfectMatching::GrowTree (861 samples, 1.44%)</title><rect x="12.9454%" y="181" width="1.4369%" height="15" fill="rgb(221,155,16)" fg:x="7757" fg:w="861"/><text x="13.1954%" y="191.50"></text></g><g><title>qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (111 samples, 0.19%)</title><rect x="14.1970%" y="165" width="0.1852%" height="15" fill="rgb(215,215,53)" fg:x="8507" fg:w="111"/><text x="14.4470%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="18.5427%" y="149" width="0.0150%" height="15" fill="rgb(223,4,10)" fg:x="11111" fg:w="9"/><text x="18.7927%" y="159.50"></text></g><g><title>qecp`PerfectMatching::InitGreedy (2,020 samples, 3.37%)</title><rect x="15.1900%" y="165" width="3.3711%" height="15" fill="rgb(234,103,6)" fg:x="9102" fg:w="2020"/><text x="15.4400%" y="175.50">qec..</text></g><g><title>qecp`PerfectMatching::InitGlobal (2,534 samples, 4.23%)</title><rect x="14.3823%" y="181" width="4.2289%" height="15" fill="rgb(227,97,0)" fg:x="8618" fg:w="2534"/><text x="14.6323%" y="191.50">qecp`..</text></g><g><title>qecp`PerfectMatching::ShrinkInit (30 samples, 0.05%)</title><rect x="18.5611%" y="165" width="0.0501%" height="15" fill="rgb(234,150,53)" fg:x="11122" fg:w="30"/><text x="18.8111%" y="175.50"></text></g><g><title>qecp`PerfectMatching::FindBlossomRootInit (7 samples, 0.01%)</title><rect x="18.5995%" y="149" width="0.0117%" height="15" fill="rgb(228,201,54)" fg:x="11145" fg:w="7"/><text x="18.8495%" y="159.50"></text></g><g><title>qecp`PerfectMatching::ProcessEdge00 (9 samples, 0.02%)</title><rect x="18.6128%" y="181" width="0.0150%" height="15" fill="rgb(222,22,37)" fg:x="11153" fg:w="9"/><text x="18.8628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="19.5908%" y="149" width="0.0117%" height="15" fill="rgb(237,53,32)" fg:x="11739" fg:w="7"/><text x="19.8408%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (8 samples, 0.01%)</title><rect x="19.5908%" y="165" width="0.0134%" height="15" fill="rgb(233,25,53)" fg:x="11739" fg:w="8"/><text x="19.8408%" y="175.50"></text></g><g><title>qecp`PerfectMatching::AugmentBranch (14 samples, 0.02%)</title><rect x="19.6041%" y="149" width="0.0234%" height="15" fill="rgb(210,40,34)" fg:x="11747" fg:w="14"/><text x="19.8541%" y="159.50"></text></g><g><title>qecp`PerfectMatching::Augment (16 samples, 0.03%)</title><rect x="19.6041%" y="165" width="0.0267%" height="15" fill="rgb(241,220,44)" fg:x="11747" fg:w="16"/><text x="19.8541%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Shrink (661 samples, 1.10%)</title><rect x="18.6279%" y="181" width="1.1031%" height="15" fill="rgb(235,28,35)" fg:x="11162" fg:w="661"/><text x="18.8779%" y="191.50"></text></g><g><title>qecp`PerfectMatching::FindBlossomRoot (60 samples, 0.10%)</title><rect x="19.6308%" y="165" width="0.1001%" height="15" fill="rgb(210,56,17)" fg:x="11763" fg:w="60"/><text x="19.8808%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Solve (6,065 samples, 10.12%)</title><rect x="9.7996%" y="197" width="10.1217%" height="15" fill="rgb(224,130,29)" fg:x="5872" fg:w="6065"/><text x="10.0496%" y="207.50">qecp`PerfectMat..</text></g><g><title>qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (110 samples, 0.18%)</title><rect x="19.7377%" y="181" width="0.1836%" height="15" fill="rgb(235,212,8)" fg:x="11827" fg:w="110"/><text x="19.9877%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="19.9529%" y="165" width="0.0134%" height="15" fill="rgb(223,33,50)" fg:x="11956" fg:w="8"/><text x="20.2029%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.06%)</title><rect x="19.9296%" y="181" width="0.0634%" height="15" fill="rgb(219,149,13)" fg:x="11942" fg:w="38"/><text x="20.1796%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="19.9746%" y="165" width="0.0184%" height="15" fill="rgb(250,156,29)" fg:x="11969" fg:w="11"/><text x="20.2246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="19.9813%" y="149" width="0.0117%" height="15" fill="rgb(216,193,19)" fg:x="11973" fg:w="7"/><text x="20.2313%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="19.9930%" y="181" width="0.0117%" height="15" fill="rgb(216,135,14)" fg:x="11980" fg:w="7"/><text x="20.2430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (19 samples, 0.03%)</title><rect x="20.0314%" y="165" width="0.0317%" height="15" fill="rgb(241,47,5)" fg:x="12003" fg:w="19"/><text x="20.2814%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (40 samples, 0.07%)</title><rect x="20.0047%" y="181" width="0.0668%" height="15" fill="rgb(233,42,35)" fg:x="11987" fg:w="40"/><text x="20.2547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.01%)</title><rect x="20.0714%" y="181" width="0.0100%" height="15" fill="rgb(231,13,6)" fg:x="12027" fg:w="6"/><text x="20.3214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="20.0814%" y="181" width="0.0234%" height="15" fill="rgb(207,181,40)" fg:x="12033" fg:w="14"/><text x="20.3314%" y="191.50"></text></g><g><title>qecp`PerfectMatching::~PerfectMatching (117 samples, 0.20%)</title><rect x="19.9229%" y="197" width="0.1953%" height="15" fill="rgb(254,173,49)" fg:x="11938" fg:w="117"/><text x="20.1729%" y="207.50"></text></g><g><title>qecp`qecp::blossom_v::safe_minimum_weight_perfect_matching (9,620 samples, 16.05%)</title><rect x="4.1471%" y="229" width="16.0545%" height="15" fill="rgb(221,1,38)" fg:x="2485" fg:w="9620"/><text x="4.3971%" y="239.50">qecp`qecp::blossom_v::saf..</text></g><g><title>qecp`minimum_weight_perfect_matching (7,642 samples, 12.75%)</title><rect x="7.4481%" y="213" width="12.7535%" height="15" fill="rgb(206,124,46)" fg:x="4463" fg:w="7642"/><text x="7.6981%" y="223.50">qecp`minimum_weight..</text></g><g><title>qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (50 samples, 0.08%)</title><rect x="20.1182%" y="197" width="0.0834%" height="15" fill="rgb(249,21,11)" fg:x="12055" fg:w="50"/><text x="20.3682%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.03%)</title><rect x="20.2767%" y="101" width="0.0317%" height="15" fill="rgb(222,201,40)" fg:x="12150" fg:w="19"/><text x="20.5267%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.06%)</title><rect x="20.2583%" y="133" width="0.0634%" height="15" fill="rgb(235,61,29)" fg:x="12139" fg:w="38"/><text x="20.5083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.06%)</title><rect x="20.2583%" y="117" width="0.0634%" height="15" fill="rgb(219,207,3)" fg:x="12139" fg:w="38"/><text x="20.5083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="20.3084%" y="101" width="0.0134%" height="15" fill="rgb(222,56,46)" fg:x="12169" fg:w="8"/><text x="20.5584%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.08%)</title><rect x="20.2483%" y="149" width="0.0768%" height="15" fill="rgb(239,76,54)" fg:x="12133" fg:w="46"/><text x="20.4983%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (58 samples, 0.10%)</title><rect x="20.2333%" y="181" width="0.0968%" height="15" fill="rgb(231,124,27)" fg:x="12124" fg:w="58"/><text x="20.4833%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (52 samples, 0.09%)</title><rect x="20.2433%" y="165" width="0.0868%" height="15" fill="rgb(249,195,6)" fg:x="12130" fg:w="52"/><text x="20.4933%" y="175.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (79 samples, 0.13%)</title><rect x="20.2016%" y="229" width="0.1318%" height="15" fill="rgb(237,174,47)" fg:x="12105" fg:w="79"/><text x="20.4516%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (66 samples, 0.11%)</title><rect x="20.2233%" y="213" width="0.1101%" height="15" fill="rgb(206,201,31)" fg:x="12118" fg:w="66"/><text x="20.4733%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (62 samples, 0.10%)</title><rect x="20.2300%" y="197" width="0.1035%" height="15" fill="rgb(231,57,52)" fg:x="12122" fg:w="62"/><text x="20.4800%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6 samples, 0.01%)</title><rect x="21.5634%" y="213" width="0.0100%" height="15" fill="rgb(248,177,22)" fg:x="12921" fg:w="6"/><text x="21.8134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (34 samples, 0.06%)</title><rect x="21.8054%" y="101" width="0.0567%" height="15" fill="rgb(215,211,37)" fg:x="13066" fg:w="34"/><text x="22.0554%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (97 samples, 0.16%)</title><rect x="21.7637%" y="133" width="0.1619%" height="15" fill="rgb(241,128,51)" fg:x="13041" fg:w="97"/><text x="22.0137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (89 samples, 0.15%)</title><rect x="21.7770%" y="117" width="0.1485%" height="15" fill="rgb(227,165,31)" fg:x="13049" fg:w="89"/><text x="22.0270%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (38 samples, 0.06%)</title><rect x="21.8621%" y="101" width="0.0634%" height="15" fill="rgb(228,167,24)" fg:x="13100" fg:w="38"/><text x="22.1121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (120 samples, 0.20%)</title><rect x="21.7336%" y="149" width="0.2003%" height="15" fill="rgb(228,143,12)" fg:x="13023" fg:w="120"/><text x="21.9836%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (138 samples, 0.23%)</title><rect x="21.7169%" y="165" width="0.2303%" height="15" fill="rgb(249,149,8)" fg:x="13013" fg:w="138"/><text x="21.9669%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (146 samples, 0.24%)</title><rect x="21.7052%" y="181" width="0.2437%" height="15" fill="rgb(243,35,44)" fg:x="13006" fg:w="146"/><text x="21.9552%" y="191.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (227 samples, 0.38%)</title><rect x="21.5734%" y="213" width="0.3788%" height="15" fill="rgb(246,89,9)" fg:x="12927" fg:w="227"/><text x="21.8234%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (169 samples, 0.28%)</title><rect x="21.6702%" y="197" width="0.2820%" height="15" fill="rgb(233,213,13)" fg:x="12985" fg:w="169"/><text x="21.9202%" y="207.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (972 samples, 1.62%)</title><rect x="20.3334%" y="229" width="1.6221%" height="15" fill="rgb(233,141,41)" fg:x="12184" fg:w="972"/><text x="20.5834%" y="239.50"></text></g><g><title>qecp`__rdl_alloc (6 samples, 0.01%)</title><rect x="38.0851%" y="197" width="0.0100%" height="15" fill="rgb(239,167,4)" fg:x="22821" fg:w="6"/><text x="38.3351%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="38.1753%" y="165" width="0.0117%" height="15" fill="rgb(209,217,16)" fg:x="22875" fg:w="7"/><text x="38.4253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (55 samples, 0.09%)</title><rect x="38.2153%" y="149" width="0.0918%" height="15" fill="rgb(219,88,35)" fg:x="22899" fg:w="55"/><text x="38.4653%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.03%)</title><rect x="38.2821%" y="133" width="0.0250%" height="15" fill="rgb(220,193,23)" fg:x="22939" fg:w="15"/><text x="38.5321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.20%)</title><rect x="38.1252%" y="181" width="0.1969%" height="15" fill="rgb(230,90,52)" fg:x="22845" fg:w="118"/><text x="38.3752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (81 samples, 0.14%)</title><rect x="38.1869%" y="165" width="0.1352%" height="15" fill="rgb(252,106,19)" fg:x="22882" fg:w="81"/><text x="38.4369%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.02%)</title><rect x="38.3071%" y="149" width="0.0150%" height="15" fill="rgb(206,74,20)" fg:x="22954" fg:w="9"/><text x="38.5571%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="38.4056%" y="149" width="0.0267%" height="15" fill="rgb(230,138,44)" fg:x="23013" fg:w="16"/><text x="38.6556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.03%)</title><rect x="38.4573%" y="133" width="0.0267%" height="15" fill="rgb(235,182,43)" fg:x="23044" fg:w="16"/><text x="38.7073%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="38.4957%" y="117" width="0.0334%" height="15" fill="rgb(242,16,51)" fg:x="23067" fg:w="20"/><text x="38.7457%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.05%)</title><rect x="38.4840%" y="133" width="0.0484%" height="15" fill="rgb(248,9,4)" fg:x="23060" fg:w="29"/><text x="38.7340%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (80 samples, 0.13%)</title><rect x="38.4323%" y="149" width="0.1335%" height="15" fill="rgb(210,31,22)" fg:x="23029" fg:w="80"/><text x="38.6823%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="38.5324%" y="133" width="0.0334%" height="15" fill="rgb(239,54,39)" fg:x="23089" fg:w="20"/><text x="38.7824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (139 samples, 0.23%)</title><rect x="38.3722%" y="165" width="0.2320%" height="15" fill="rgb(230,99,41)" fg:x="22993" fg:w="139"/><text x="38.6222%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.04%)</title><rect x="38.5658%" y="149" width="0.0384%" height="15" fill="rgb(253,106,12)" fg:x="23109" fg:w="23"/><text x="38.8158%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="38.6042%" y="165" width="0.0317%" height="15" fill="rgb(213,46,41)" fg:x="23132" fg:w="19"/><text x="38.8542%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (413 samples, 0.69%)</title><rect x="37.9583%" y="213" width="0.6892%" height="15" fill="rgb(215,133,35)" fg:x="22745" fg:w="413"/><text x="38.2083%" y="223.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (326 samples, 0.54%)</title><rect x="38.1035%" y="197" width="0.5440%" height="15" fill="rgb(213,28,5)" fg:x="22832" fg:w="326"/><text x="38.3535%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (184 samples, 0.31%)</title><rect x="38.3405%" y="181" width="0.3071%" height="15" fill="rgb(215,77,49)" fg:x="22974" fg:w="184"/><text x="38.5905%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="38.6359%" y="165" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="23151" fg:w="7"/><text x="38.8859%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (9 samples, 0.02%)</title><rect x="38.6476%" y="213" width="0.0150%" height="15" fill="rgb(208,67,9)" fg:x="23158" fg:w="9"/><text x="38.8976%" y="223.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_edges (10,021 samples, 16.72%)</title><rect x="21.9556%" y="229" width="16.7237%" height="15" fill="rgb(219,133,21)" fg:x="13156" fg:w="10021"/><text x="22.2056%" y="239.50">qecp`qecp::complete_model_..</text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_node_unwrap (10 samples, 0.02%)</title><rect x="38.6626%" y="213" width="0.0167%" height="15" fill="rgb(246,46,29)" fg:x="23167" fg:w="10"/><text x="38.9126%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (21 samples, 0.04%)</title><rect x="38.8628%" y="213" width="0.0350%" height="15" fill="rgb(246,185,52)" fg:x="23287" fg:w="21"/><text x="39.1128%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.04%)</title><rect x="39.3318%" y="165" width="0.0350%" height="15" fill="rgb(252,136,11)" fg:x="23568" fg:w="21"/><text x="39.5818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="39.3368%" y="149" width="0.0300%" height="15" fill="rgb(219,138,53)" fg:x="23571" fg:w="18"/><text x="39.5868%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.03%)</title><rect x="39.3418%" y="133" width="0.0250%" height="15" fill="rgb(211,51,23)" fg:x="23574" fg:w="15"/><text x="39.5918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="39.3568%" y="117" width="0.0100%" height="15" fill="rgb(247,221,28)" fg:x="23583" fg:w="6"/><text x="39.6068%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.06%)</title><rect x="39.3685%" y="165" width="0.0617%" height="15" fill="rgb(251,222,45)" fg:x="23590" fg:w="37"/><text x="39.6185%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (92 samples, 0.15%)</title><rect x="39.3151%" y="181" width="0.1535%" height="15" fill="rgb(217,162,53)" fg:x="23558" fg:w="92"/><text x="39.5651%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (19 samples, 0.03%)</title><rect x="39.4369%" y="165" width="0.0317%" height="15" fill="rgb(229,93,14)" fg:x="23631" fg:w="19"/><text x="39.6869%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (155 samples, 0.26%)</title><rect x="39.2283%" y="197" width="0.2587%" height="15" fill="rgb(209,67,49)" fg:x="23506" fg:w="155"/><text x="39.4783%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.02%)</title><rect x="39.4686%" y="181" width="0.0184%" height="15" fill="rgb(213,87,29)" fg:x="23650" fg:w="11"/><text x="39.7186%" y="191.50"></text></g><g><title>qecp`qecp::decoder_mwpm::MWPMDecoder::decode_with_erasure (22,693 samples, 37.87%)</title><rect x="1.6188%" y="245" width="37.8715%" height="15" fill="rgb(205,151,52)" fg:x="970" fg:w="22693"/><text x="1.8688%" y="255.50">qecp`qecp::decoder_mwpm::MWPMDecoder::decode_with_erasure</text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (486 samples, 0.81%)</title><rect x="38.6793%" y="229" width="0.8111%" height="15" fill="rgb(253,215,39)" fg:x="23177" fg:w="486"/><text x="38.9293%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (355 samples, 0.59%)</title><rect x="38.8979%" y="213" width="0.5924%" height="15" fill="rgb(221,220,41)" fg:x="23308" fg:w="355"/><text x="39.1479%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_list_add_ptr (6 samples, 0.01%)</title><rect x="60.8184%" y="165" width="0.0100%" height="15" fill="rgb(218,133,21)" fg:x="36443" fg:w="6"/><text x="61.0684%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="60.7984%" y="229" width="0.0367%" height="15" fill="rgb(221,193,43)" fg:x="36431" fg:w="22"/><text x="61.0484%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.03%)</title><rect x="60.8017%" y="213" width="0.0334%" height="15" fill="rgb(240,128,52)" fg:x="36433" fg:w="20"/><text x="61.0517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (19 samples, 0.03%)</title><rect x="60.8034%" y="197" width="0.0317%" height="15" fill="rgb(253,114,12)" fg:x="36434" fg:w="19"/><text x="61.0534%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (12 samples, 0.02%)</title><rect x="60.8151%" y="181" width="0.0200%" height="15" fill="rgb(215,223,47)" fg:x="36441" fg:w="12"/><text x="61.0651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.03%)</title><rect x="60.8384%" y="229" width="0.0250%" height="15" fill="rgb(248,225,23)" fg:x="36455" fg:w="15"/><text x="61.0884%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (21 samples, 0.04%)</title><rect x="60.8635%" y="229" width="0.0350%" height="15" fill="rgb(250,108,0)" fg:x="36470" fg:w="21"/><text x="61.1135%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (817 samples, 1.36%)</title><rect x="60.9069%" y="229" width="1.3635%" height="15" fill="rgb(228,208,7)" fg:x="36496" fg:w="817"/><text x="61.1569%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (29,624 samples, 49.44%)</title><rect x="39.4903%" y="245" width="49.4384%" height="15" fill="rgb(244,45,10)" fg:x="23663" fg:w="29624"/><text x="39.7403%" y="255.50">qecp`qecp::simulator::Simulator::generate_random_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (15,974 samples, 26.66%)</title><rect x="62.2703%" y="229" width="26.6584%" height="15" fill="rgb(207,125,25)" fg:x="37313" fg:w="15974"/><text x="62.5203%" y="239.50">qecp`qecp::simulator::Simulator::propagate_..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (12,398 samples, 20.69%)</title><rect x="68.2382%" y="213" width="20.6906%" height="15" fill="rgb(210,195,18)" fg:x="40889" fg:w="12398"/><text x="68.4882%" y="223.50">qecp`qecp::simulator::Simulator::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.03%)</title><rect x="96.5037%" y="181" width="0.0267%" height="15" fill="rgb(249,80,12)" fg:x="57826" fg:w="16"/><text x="96.7537%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="96.5087%" y="165" width="0.0217%" height="15" fill="rgb(221,65,9)" fg:x="57829" fg:w="13"/><text x="96.7587%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="96.4904%" y="197" width="0.0417%" height="15" fill="rgb(235,49,36)" fg:x="57818" fg:w="25"/><text x="96.7404%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (86 samples, 0.14%)</title><rect x="96.4653%" y="213" width="0.1435%" height="15" fill="rgb(225,32,20)" fg:x="57803" fg:w="86"/><text x="96.7153%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (43 samples, 0.07%)</title><rect x="96.5371%" y="197" width="0.0718%" height="15" fill="rgb(215,141,46)" fg:x="57846" fg:w="43"/><text x="96.7871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="96.5938%" y="181" width="0.0150%" height="15" fill="rgb(250,160,47)" fg:x="57880" fg:w="9"/><text x="96.8438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="96.5955%" y="165" width="0.0134%" height="15" fill="rgb(216,222,40)" fg:x="57881" fg:w="8"/><text x="96.8455%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (187 samples, 0.31%)</title><rect x="96.3101%" y="229" width="0.3121%" height="15" fill="rgb(234,217,39)" fg:x="57710" fg:w="187"/><text x="96.5601%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (8 samples, 0.01%)</title><rect x="96.6089%" y="213" width="0.0134%" height="15" fill="rgb(207,178,40)" fg:x="57889" fg:w="8"/><text x="96.8589%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (4,619 samples, 7.71%)</title><rect x="88.9288%" y="245" width="7.7085%" height="15" fill="rgb(221,136,13)" fg:x="53287" fg:w="4619"/><text x="89.1788%" y="255.50">qecp`qecp::..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (9 samples, 0.02%)</title><rect x="96.6222%" y="229" width="0.0150%" height="15" fill="rgb(249,199,10)" fg:x="57897" fg:w="9"/><text x="96.8722%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="99.5210%" y="197" width="0.0534%" height="15" fill="rgb(249,222,13)" fg:x="59634" fg:w="32"/><text x="99.7710%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.04%)</title><rect x="99.5327%" y="181" width="0.0417%" height="15" fill="rgb(244,185,38)" fg:x="59641" fg:w="25"/><text x="99.7827%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.03%)</title><rect x="99.5444%" y="165" width="0.0300%" height="15" fill="rgb(236,202,9)" fg:x="59648" fg:w="18"/><text x="99.7944%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.5628%" y="149" width="0.0117%" height="15" fill="rgb(250,229,37)" fg:x="59659" fg:w="7"/><text x="99.8128%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.03%)</title><rect x="99.6712%" y="133" width="0.0250%" height="15" fill="rgb(206,174,23)" fg:x="59724" fg:w="15"/><text x="99.9212%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.05%)</title><rect x="99.6596%" y="165" width="0.0484%" height="15" fill="rgb(211,33,43)" fg:x="59717" fg:w="29"/><text x="99.9096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.04%)</title><rect x="99.6662%" y="149" width="0.0417%" height="15" fill="rgb(245,58,50)" fg:x="59721" fg:w="25"/><text x="99.9162%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.6963%" y="133" width="0.0117%" height="15" fill="rgb(244,68,36)" fg:x="59739" fg:w="7"/><text x="99.9463%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.06%)</title><rect x="99.6545%" y="181" width="0.0551%" height="15" fill="rgb(232,229,15)" fg:x="59714" fg:w="33"/><text x="99.9045%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (71 samples, 0.12%)</title><rect x="99.5928%" y="197" width="0.1185%" height="15" fill="rgb(254,30,23)" fg:x="59677" fg:w="71"/><text x="99.8428%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (133 samples, 0.22%)</title><rect x="99.4910%" y="213" width="0.2220%" height="15" fill="rgb(235,160,14)" fg:x="59616" fg:w="133"/><text x="99.7410%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (512 samples, 0.85%)</title><rect x="98.8819%" y="229" width="0.8545%" height="15" fill="rgb(212,155,44)" fg:x="59251" fg:w="512"/><text x="99.1319%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="99.7130%" y="213" width="0.0234%" height="15" fill="rgb(226,2,50)" fg:x="59749" fg:w="14"/><text x="99.9630%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (1,863 samples, 3.11%)</title><rect x="96.6372%" y="245" width="3.1091%" height="15" fill="rgb(234,177,6)" fg:x="57906" fg:w="1863"/><text x="96.8872%" y="255.50">qec..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (6 samples, 0.01%)</title><rect x="99.7363%" y="229" width="0.0100%" height="15" fill="rgb(217,24,9)" fg:x="59763" fg:w="6"/><text x="99.9863%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::validate_correction (143 samples, 0.24%)</title><rect x="99.7480%" y="245" width="0.2386%" height="15" fill="rgb(220,13,46)" fg:x="59770" fg:w="143"/><text x="99.9980%" y="255.50"></text></g><g><title>qecp`qecp::code_builder::code_builder_validate_correction (139 samples, 0.23%)</title><rect x="99.7547%" y="229" width="0.2320%" height="15" fill="rgb(239,221,27)" fg:x="59774" fg:w="139"/><text x="100.0047%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="99.9750%" y="213" width="0.0117%" height="15" fill="rgb(222,198,25)" fg:x="59906" fg:w="7"/><text x="100.2250%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (6 samples, 0.01%)</title><rect x="99.9866%" y="245" width="0.0100%" height="15" fill="rgb(211,99,13)" fg:x="59913" fg:w="6"/><text x="100.2366%" y="255.50"></text></g><g><title>all (59,921 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="59921"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,859 samples, 99.90%)</title><rect x="0.1035%" y="325" width="99.8965%" height="15" fill="rgb(245,82,37)" fg:x="62" fg:w="59859"/><text x="0.3535%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,859 samples, 99.90%)</title><rect x="0.1035%" y="309" width="99.8965%" height="15" fill="rgb(227,149,46)" fg:x="62" fg:w="59859"/><text x="0.3535%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,859 samples, 99.90%)</title><rect x="0.1035%" y="293" width="99.8965%" height="15" fill="rgb(218,36,50)" fg:x="62" fg:w="59859"/><text x="0.3535%" y="303.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,859 samples, 99.90%)</title><rect x="0.1035%" y="277" width="99.8965%" height="15" fill="rgb(226,80,48)" fg:x="62" fg:w="59859"/><text x="0.3535%" y="287.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,811 samples, 99.82%)</title><rect x="0.1836%" y="261" width="99.8164%" height="15" fill="rgb(238,224,15)" fg:x="110" fg:w="59811"/><text x="0.4336%" y="271.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>