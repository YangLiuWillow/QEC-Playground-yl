<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="60789"><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (20 samples, 0.03%)</title><rect x="0.0049%" y="165" width="0.0329%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="20"/><text x="0.2549%" y="175.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (18 samples, 0.03%)</title><rect x="0.0082%" y="149" width="0.0296%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="18"/><text x="0.2582%" y="159.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.0148%" y="133" width="0.0230%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="14"/><text x="0.2648%" y="143.50"></text></g><g><title>qecp`core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (13 samples, 0.02%)</title><rect x="0.0165%" y="117" width="0.0214%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="13"/><text x="0.2665%" y="127.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;[qecp::model_graph::ModelGraphEdge]&gt; (12 samples, 0.02%)</title><rect x="0.0181%" y="101" width="0.0197%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="12"/><text x="0.2681%" y="111.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (10 samples, 0.02%)</title><rect x="0.0214%" y="85" width="0.0165%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="10"/><text x="0.2714%" y="95.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0214%" y="69" width="0.0165%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="10"/><text x="0.2714%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="0.0230%" y="53" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="9"/><text x="0.2730%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="0.0230%" y="37" width="0.0148%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="9"/><text x="0.2730%" y="47.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.05%)</title><rect x="0.0395%" y="117" width="0.0526%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="32"/><text x="0.2895%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (27 samples, 0.04%)</title><rect x="0.0477%" y="101" width="0.0444%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="27"/><text x="0.2977%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="0.0707%" y="85" width="0.0214%" height="15" fill="rgb(240,193,28)" fg:x="43" fg:w="13"/><text x="0.3207%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="0.0707%" y="69" width="0.0214%" height="15" fill="rgb(216,20,37)" fg:x="43" fg:w="13"/><text x="0.3207%" y="79.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;qecp::decoder_union_find::UnionFindDecoder&gt;&gt; (54 samples, 0.09%)</title><rect x="0.0049%" y="181" width="0.0888%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="54"/><text x="0.2549%" y="191.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;qecp::complete_model_graph::CompleteModelGraph&gt; (34 samples, 0.06%)</title><rect x="0.0378%" y="165" width="0.0559%" height="15" fill="rgb(217,207,13)" fg:x="23" fg:w="34"/><text x="0.2878%" y="175.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt;&gt; (34 samples, 0.06%)</title><rect x="0.0378%" y="149" width="0.0559%" height="15" fill="rgb(231,73,38)" fg:x="23" fg:w="34"/><text x="0.2878%" y="159.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (33 samples, 0.05%)</title><rect x="0.0395%" y="133" width="0.0543%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="33"/><text x="0.2895%" y="143.50"></text></g><g><title>qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (15 samples, 0.02%)</title><rect x="0.1184%" y="149" width="0.0247%" height="15" fill="rgb(210,31,41)" fg:x="72" fg:w="15"/><text x="0.3684%" y="159.50"></text></g><g><title>qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.03%)</title><rect x="0.3471%" y="133" width="0.0329%" height="15" fill="rgb(221,200,47)" fg:x="211" fg:w="20"/><text x="0.5971%" y="143.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (78 samples, 0.13%)</title><rect x="0.3800%" y="133" width="0.1283%" height="15" fill="rgb(226,26,5)" fg:x="231" fg:w="78"/><text x="0.6300%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="0.5906%" y="101" width="0.0115%" height="15" fill="rgb(249,33,26)" fg:x="359" fg:w="7"/><text x="0.8406%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (26 samples, 0.04%)</title><rect x="0.5906%" y="117" width="0.0428%" height="15" fill="rgb(235,183,28)" fg:x="359" fg:w="26"/><text x="0.8406%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (18 samples, 0.03%)</title><rect x="0.6037%" y="101" width="0.0296%" height="15" fill="rgb(221,5,38)" fg:x="367" fg:w="18"/><text x="0.8537%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (81 samples, 0.13%)</title><rect x="0.5083%" y="133" width="0.1332%" height="15" fill="rgb(247,18,42)" fg:x="309" fg:w="81"/><text x="0.7583%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="0.6465%" y="133" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="393" fg:w="7"/><text x="0.8965%" y="143.50"></text></g><g><title>qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (39 samples, 0.06%)</title><rect x="0.6580%" y="133" width="0.0642%" height="15" fill="rgb(249,31,29)" fg:x="400" fg:w="39"/><text x="0.9080%" y="143.50"></text></g><g><title>qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (195 samples, 0.32%)</title><rect x="0.7222%" y="133" width="0.3208%" height="15" fill="rgb(225,111,53)" fg:x="439" fg:w="195"/><text x="0.9722%" y="143.50"></text></g><g><title>qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (16 samples, 0.03%)</title><rect x="1.0430%" y="133" width="0.0263%" height="15" fill="rgb(238,160,17)" fg:x="634" fg:w="16"/><text x="1.2930%" y="143.50"></text></g><g><title>qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (43 samples, 0.07%)</title><rect x="1.0742%" y="133" width="0.0707%" height="15" fill="rgb(214,148,48)" fg:x="653" fg:w="43"/><text x="1.3242%" y="143.50"></text></g><g><title>qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (23 samples, 0.04%)</title><rect x="1.1449%" y="133" width="0.0378%" height="15" fill="rgb(232,36,49)" fg:x="696" fg:w="23"/><text x="1.3949%" y="143.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute (660 samples, 1.09%)</title><rect x="0.1102%" y="165" width="1.0857%" height="15" fill="rgb(209,103,24)" fg:x="67" fg:w="660"/><text x="0.3602%" y="175.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute_dijkstra_with_end_position (636 samples, 1.05%)</title><rect x="0.1497%" y="149" width="1.0462%" height="15" fill="rgb(229,88,8)" fg:x="91" fg:w="636"/><text x="0.3997%" y="159.50"></text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::build_with_region (58 samples, 0.10%)</title><rect x="1.1959%" y="165" width="0.0954%" height="15" fill="rgb(213,181,19)" fg:x="727" fg:w="58"/><text x="1.4459%" y="175.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (44 samples, 0.07%)</title><rect x="1.2190%" y="149" width="0.0724%" height="15" fill="rgb(254,191,54)" fg:x="741" fg:w="44"/><text x="1.4690%" y="159.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (12 samples, 0.02%)</title><rect x="1.2716%" y="133" width="0.0197%" height="15" fill="rgb(241,83,37)" fg:x="773" fg:w="12"/><text x="1.5216%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.01%)</title><rect x="1.3374%" y="133" width="0.0132%" height="15" fill="rgb(233,36,39)" fg:x="813" fg:w="8"/><text x="1.5874%" y="143.50"></text></g><g><title>qecp`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (11 samples, 0.02%)</title><rect x="1.3506%" y="133" width="0.0181%" height="15" fill="rgb(226,3,54)" fg:x="821" fg:w="11"/><text x="1.6006%" y="143.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.01%)</title><rect x="1.3703%" y="133" width="0.0132%" height="15" fill="rgb(245,192,40)" fg:x="833" fg:w="8"/><text x="1.6203%" y="143.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="1.3720%" y="117" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="834" fg:w="7"/><text x="1.6220%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="1.5825%" y="117" width="0.0148%" height="15" fill="rgb(232,182,51)" fg:x="962" fg:w="9"/><text x="1.8325%" y="127.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="1.5842%" y="101" width="0.0132%" height="15" fill="rgb(231,60,39)" fg:x="963" fg:w="8"/><text x="1.8342%" y="111.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.02%)</title><rect x="1.6039%" y="117" width="0.0165%" height="15" fill="rgb(208,69,12)" fg:x="975" fg:w="10"/><text x="1.8539%" y="127.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.02%)</title><rect x="1.6204%" y="117" width="0.0165%" height="15" fill="rgb(235,93,37)" fg:x="985" fg:w="10"/><text x="1.8704%" y="127.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="1.6220%" y="101" width="0.0148%" height="15" fill="rgb(213,116,39)" fg:x="986" fg:w="9"/><text x="1.8720%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="1.6236%" y="85" width="0.0132%" height="15" fill="rgb(222,207,29)" fg:x="987" fg:w="8"/><text x="1.8736%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="1.6253%" y="69" width="0.0115%" height="15" fill="rgb(206,96,30)" fg:x="988" fg:w="7"/><text x="1.8753%" y="79.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (197 samples, 0.32%)</title><rect x="1.3917%" y="133" width="0.3241%" height="15" fill="rgb(218,138,4)" fg:x="846" fg:w="197"/><text x="1.6417%" y="143.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (48 samples, 0.08%)</title><rect x="1.6368%" y="117" width="0.0790%" height="15" fill="rgb(250,191,14)" fg:x="995" fg:w="48"/><text x="1.8868%" y="127.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::new (983 samples, 1.62%)</title><rect x="0.1053%" y="181" width="1.6171%" height="15" fill="rgb(239,60,40)" fg:x="64" fg:w="983"/><text x="0.3553%" y="191.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build (262 samples, 0.43%)</title><rect x="1.2914%" y="165" width="0.4310%" height="15" fill="rgb(206,27,48)" fg:x="785" fg:w="262"/><text x="1.5414%" y="175.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build_with_weight_function_region (258 samples, 0.42%)</title><rect x="1.2979%" y="149" width="0.4244%" height="15" fill="rgb(225,35,8)" fg:x="789" fg:w="258"/><text x="1.5479%" y="159.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::hash::Hash&gt;::hash (8 samples, 0.01%)</title><rect x="1.7355%" y="133" width="0.0132%" height="15" fill="rgb(250,213,24)" fg:x="1055" fg:w="8"/><text x="1.9855%" y="143.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="1.7355%" y="117" width="0.0132%" height="15" fill="rgb(247,123,22)" fg:x="1055" fg:w="8"/><text x="1.9855%" y="127.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (13 samples, 0.02%)</title><rect x="1.7355%" y="165" width="0.0214%" height="15" fill="rgb(231,138,38)" fg:x="1055" fg:w="13"/><text x="1.9855%" y="175.50"></text></g><g><title>qecp`&lt;serde_hashkey::key::Key&lt;F&gt; as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="1.7355%" y="149" width="0.0214%" height="15" fill="rgb(231,145,46)" fg:x="1055" fg:w="13"/><text x="1.9855%" y="159.50"></text></g><g><title>qecp`qecp::simulator::Simulator::compress_error_rates (41 samples, 0.07%)</title><rect x="1.7256%" y="181" width="0.0674%" height="15" fill="rgb(251,118,11)" fg:x="1049" fg:w="41"/><text x="1.9756%" y="191.50"></text></g><g><title>qecp`qecp::error_model::_::_&lt;impl serde::ser::Serialize for qecp::error_model::ErrorModelNode&gt;::serialize (16 samples, 0.03%)</title><rect x="1.7668%" y="165" width="0.0263%" height="15" fill="rgb(217,147,25)" fg:x="1074" fg:w="16"/><text x="2.0168%" y="175.50"></text></g><g><title>qecp`&lt;serde_hashkey::ser::SerializeMap&lt;F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 0.03%)</title><rect x="1.7668%" y="149" width="0.0263%" height="15" fill="rgb(247,81,37)" fg:x="1074" fg:w="16"/><text x="2.0168%" y="159.50"></text></g><g><title>dyld`start (1,112 samples, 1.83%)</title><rect x="0.0000%" y="421" width="1.8293%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="431.50">d..</text></g><g><title>qecp`main (1,112 samples, 1.83%)</title><rect x="0.0000%" y="405" width="1.8293%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="415.50">q..</text></g><g><title>qecp`std::rt::lang_start_internal (1,112 samples, 1.83%)</title><rect x="0.0000%" y="389" width="1.8293%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="399.50">q..</text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (1,112 samples, 1.83%)</title><rect x="0.0000%" y="373" width="1.8293%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="383.50">q..</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,112 samples, 1.83%)</title><rect x="0.0000%" y="357" width="1.8293%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="367.50">q..</text></g><g><title>qecp`qecp::main (1,112 samples, 1.83%)</title><rect x="0.0000%" y="341" width="1.8293%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="351.50">q..</text></g><g><title>qecp`tokio::runtime::Runtime::block_on (1,112 samples, 1.83%)</title><rect x="0.0000%" y="325" width="1.8293%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="335.50">q..</text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,112 samples, 1.83%)</title><rect x="0.0000%" y="309" width="1.8293%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="319.50">q..</text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (1,112 samples, 1.83%)</title><rect x="0.0000%" y="293" width="1.8293%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="303.50">q..</text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (1,112 samples, 1.83%)</title><rect x="0.0000%" y="277" width="1.8293%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="287.50">q..</text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,112 samples, 1.83%)</title><rect x="0.0000%" y="261" width="1.8293%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="271.50">q..</text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (1,112 samples, 1.83%)</title><rect x="0.0000%" y="245" width="1.8293%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="255.50">q..</text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,112 samples, 1.83%)</title><rect x="0.0000%" y="229" width="1.8293%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="239.50">q..</text></g><g><title>qecp`qecp::tool::run_matched_tool (1,112 samples, 1.83%)</title><rect x="0.0000%" y="213" width="1.8293%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="223.50">q..</text></g><g><title>qecp`qecp::tool::benchmark (1,112 samples, 1.83%)</title><rect x="0.0000%" y="197" width="1.8293%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="1112"/><text x="0.2500%" y="207.50">q..</text></g><g><title>qecp`std::thread::sleep (20 samples, 0.03%)</title><rect x="1.7964%" y="181" width="0.0329%" height="15" fill="rgb(240,54,50)" fg:x="1092" fg:w="20"/><text x="2.0464%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (16 samples, 0.03%)</title><rect x="1.8030%" y="165" width="0.0263%" height="15" fill="rgb(233,84,52)" fg:x="1096" fg:w="16"/><text x="2.0530%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="1.8309%" y="357" width="0.0115%" height="15" fill="rgb(207,117,47)" fg:x="1113" fg:w="7"/><text x="2.0809%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="1.8556%" y="341" width="0.0148%" height="15" fill="rgb(249,43,39)" fg:x="1128" fg:w="9"/><text x="2.1056%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="1.8885%" y="341" width="0.0132%" height="15" fill="rgb(209,38,44)" fg:x="1148" fg:w="8"/><text x="2.1385%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="1.9296%" y="309" width="0.0148%" height="15" fill="rgb(236,212,23)" fg:x="1173" fg:w="9"/><text x="2.1796%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="1.9296%" y="293" width="0.0148%" height="15" fill="rgb(242,79,21)" fg:x="1173" fg:w="9"/><text x="2.1796%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="1.9329%" y="277" width="0.0115%" height="15" fill="rgb(211,96,35)" fg:x="1175" fg:w="7"/><text x="2.1829%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="1.9280%" y="325" width="0.0181%" height="15" fill="rgb(253,215,40)" fg:x="1172" fg:w="11"/><text x="2.1780%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.01%)</title><rect x="2.0069%" y="261" width="0.0148%" height="15" fill="rgb(211,81,21)" fg:x="1220" fg:w="9"/><text x="2.2569%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.09%)</title><rect x="1.9905%" y="309" width="0.0905%" height="15" fill="rgb(208,190,38)" fg:x="1210" fg:w="55"/><text x="2.2405%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.08%)</title><rect x="2.0020%" y="293" width="0.0790%" height="15" fill="rgb(235,213,38)" fg:x="1217" fg:w="48"/><text x="2.2520%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (47 samples, 0.08%)</title><rect x="2.0037%" y="277" width="0.0773%" height="15" fill="rgb(237,122,38)" fg:x="1218" fg:w="47"/><text x="2.2537%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.06%)</title><rect x="2.0217%" y="261" width="0.0592%" height="15" fill="rgb(244,218,35)" fg:x="1229" fg:w="36"/><text x="2.2717%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="2.0612%" y="245" width="0.0197%" height="15" fill="rgb(240,68,47)" fg:x="1253" fg:w="12"/><text x="2.3112%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (36 samples, 0.06%)</title><rect x="2.1879%" y="245" width="0.0592%" height="15" fill="rgb(210,16,53)" fg:x="1330" fg:w="36"/><text x="2.4379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (157 samples, 0.26%)</title><rect x="2.1451%" y="277" width="0.2583%" height="15" fill="rgb(235,124,12)" fg:x="1304" fg:w="157"/><text x="2.3951%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (153 samples, 0.25%)</title><rect x="2.1517%" y="261" width="0.2517%" height="15" fill="rgb(224,169,11)" fg:x="1308" fg:w="153"/><text x="2.4017%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (95 samples, 0.16%)</title><rect x="2.2471%" y="245" width="0.1563%" height="15" fill="rgb(250,166,2)" fg:x="1366" fg:w="95"/><text x="2.4971%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 0.05%)</title><rect x="2.3524%" y="229" width="0.0510%" height="15" fill="rgb(242,216,29)" fg:x="1430" fg:w="31"/><text x="2.6024%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (171 samples, 0.28%)</title><rect x="2.1254%" y="293" width="0.2813%" height="15" fill="rgb(230,116,27)" fg:x="1292" fg:w="171"/><text x="2.3754%" y="303.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (206 samples, 0.34%)</title><rect x="2.0859%" y="309" width="0.3389%" height="15" fill="rgb(228,99,48)" fg:x="1268" fg:w="206"/><text x="2.3359%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (316 samples, 0.52%)</title><rect x="1.9132%" y="341" width="0.5198%" height="15" fill="rgb(253,11,6)" fg:x="1163" fg:w="316"/><text x="2.1632%" y="351.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (296 samples, 0.49%)</title><rect x="1.9461%" y="325" width="0.4869%" height="15" fill="rgb(247,143,39)" fg:x="1183" fg:w="296"/><text x="2.1961%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="2.5564%" y="325" width="0.0230%" height="15" fill="rgb(236,97,10)" fg:x="1554" fg:w="14"/><text x="2.8064%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="2.5794%" y="325" width="0.0526%" height="15" fill="rgb(233,208,19)" fg:x="1568" fg:w="32"/><text x="2.8294%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (57 samples, 0.09%)</title><rect x="2.6321%" y="325" width="0.0938%" height="15" fill="rgb(216,164,2)" fg:x="1600" fg:w="57"/><text x="2.8821%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (40 samples, 0.07%)</title><rect x="2.6600%" y="309" width="0.0658%" height="15" fill="rgb(220,129,5)" fg:x="1617" fg:w="40"/><text x="2.9100%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="2.7061%" y="293" width="0.0197%" height="15" fill="rgb(242,17,10)" fg:x="1645" fg:w="12"/><text x="2.9561%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="2.7258%" y="325" width="0.0132%" height="15" fill="rgb(242,107,0)" fg:x="1657" fg:w="8"/><text x="2.9758%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="2.7390%" y="325" width="0.0132%" height="15" fill="rgb(251,28,31)" fg:x="1665" fg:w="8"/><text x="2.9890%" y="335.50"></text></g><g><title>qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="2.7538%" y="325" width="0.0247%" height="15" fill="rgb(233,223,10)" fg:x="1674" fg:w="15"/><text x="3.0038%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (132 samples, 0.22%)</title><rect x="3.0598%" y="309" width="0.2171%" height="15" fill="rgb(215,21,27)" fg:x="1860" fg:w="132"/><text x="3.3098%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (64 samples, 0.11%)</title><rect x="3.1716%" y="293" width="0.1053%" height="15" fill="rgb(232,23,21)" fg:x="1928" fg:w="64"/><text x="3.4216%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (57 samples, 0.09%)</title><rect x="3.1831%" y="277" width="0.0938%" height="15" fill="rgb(244,5,23)" fg:x="1935" fg:w="57"/><text x="3.4331%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (148 samples, 0.24%)</title><rect x="3.6536%" y="277" width="0.2435%" height="15" fill="rgb(226,81,46)" fg:x="2221" fg:w="148"/><text x="3.9036%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (494 samples, 0.81%)</title><rect x="3.2769%" y="309" width="0.8126%" height="15" fill="rgb(247,70,30)" fg:x="1992" fg:w="494"/><text x="3.5269%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (444 samples, 0.73%)</title><rect x="3.3592%" y="293" width="0.7304%" height="15" fill="rgb(212,68,19)" fg:x="2042" fg:w="444"/><text x="3.6092%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (117 samples, 0.19%)</title><rect x="3.8971%" y="277" width="0.1925%" height="15" fill="rgb(240,187,13)" fg:x="2369" fg:w="117"/><text x="4.1471%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="4.0928%" y="309" width="0.0197%" height="15" fill="rgb(223,113,26)" fg:x="2488" fg:w="12"/><text x="4.3428%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (16 samples, 0.03%)</title><rect x="4.1126%" y="309" width="0.0263%" height="15" fill="rgb(206,192,2)" fg:x="2500" fg:w="16"/><text x="4.3626%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="4.1389%" y="309" width="0.0115%" height="15" fill="rgb(241,108,4)" fg:x="2516" fg:w="7"/><text x="4.3889%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1,051 samples, 1.73%)</title><rect x="2.4330%" y="341" width="1.7289%" height="15" fill="rgb(247,173,49)" fg:x="1479" fg:w="1051"/><text x="2.6830%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (840 samples, 1.38%)</title><rect x="2.7801%" y="325" width="1.3818%" height="15" fill="rgb(224,114,35)" fg:x="1690" fg:w="840"/><text x="3.0301%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="4.1504%" y="309" width="0.0115%" height="15" fill="rgb(245,159,27)" fg:x="2523" fg:w="7"/><text x="4.4004%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (37 samples, 0.06%)</title><rect x="4.1883%" y="341" width="0.0609%" height="15" fill="rgb(245,172,44)" fg:x="2546" fg:w="37"/><text x="4.4383%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (63 samples, 0.10%)</title><rect x="4.2491%" y="341" width="0.1036%" height="15" fill="rgb(236,23,11)" fg:x="2583" fg:w="63"/><text x="4.4991%" y="351.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (12 samples, 0.02%)</title><rect x="4.3528%" y="341" width="0.0197%" height="15" fill="rgb(205,117,38)" fg:x="2646" fg:w="12"/><text x="4.6028%" y="351.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (265 samples, 0.44%)</title><rect x="4.3774%" y="341" width="0.4359%" height="15" fill="rgb(237,72,25)" fg:x="2661" fg:w="265"/><text x="4.6274%" y="351.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="4.8232%" y="325" width="0.0263%" height="15" fill="rgb(244,70,9)" fg:x="2932" fg:w="16"/><text x="5.0732%" y="335.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (21 samples, 0.03%)</title><rect x="4.8167%" y="341" width="0.0345%" height="15" fill="rgb(217,125,39)" fg:x="2928" fg:w="21"/><text x="5.0667%" y="351.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (9 samples, 0.01%)</title><rect x="4.8529%" y="341" width="0.0148%" height="15" fill="rgb(235,36,10)" fg:x="2950" fg:w="9"/><text x="5.1029%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (129 samples, 0.21%)</title><rect x="16.4339%" y="325" width="0.2122%" height="15" fill="rgb(251,123,47)" fg:x="9990" fg:w="129"/><text x="16.6839%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="16.6461%" y="325" width="0.0132%" height="15" fill="rgb(221,13,13)" fg:x="10119" fg:w="8"/><text x="16.8961%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="16.7366%" y="309" width="0.0329%" height="15" fill="rgb(238,131,9)" fg:x="10174" fg:w="20"/><text x="16.9866%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (64 samples, 0.11%)</title><rect x="16.6675%" y="325" width="0.1053%" height="15" fill="rgb(211,50,8)" fg:x="10132" fg:w="64"/><text x="16.9175%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="16.7876%" y="325" width="0.0214%" height="15" fill="rgb(245,182,24)" fg:x="10205" fg:w="13"/><text x="17.0376%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="16.8090%" y="325" width="0.0197%" height="15" fill="rgb(242,14,37)" fg:x="10218" fg:w="12"/><text x="17.0590%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (91 samples, 0.15%)</title><rect x="16.9603%" y="309" width="0.1497%" height="15" fill="rgb(246,228,12)" fg:x="10310" fg:w="91"/><text x="17.2103%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (39 samples, 0.06%)</title><rect x="17.0458%" y="293" width="0.0642%" height="15" fill="rgb(213,55,15)" fg:x="10362" fg:w="39"/><text x="17.2958%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.05%)</title><rect x="17.0574%" y="277" width="0.0526%" height="15" fill="rgb(209,9,3)" fg:x="10369" fg:w="32"/><text x="17.3074%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (47 samples, 0.08%)</title><rect x="17.2317%" y="277" width="0.0773%" height="15" fill="rgb(230,59,30)" fg:x="10475" fg:w="47"/><text x="17.4817%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (130 samples, 0.21%)</title><rect x="17.1100%" y="309" width="0.2139%" height="15" fill="rgb(209,121,21)" fg:x="10401" fg:w="130"/><text x="17.3600%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (101 samples, 0.17%)</title><rect x="17.1577%" y="293" width="0.1661%" height="15" fill="rgb(220,109,13)" fg:x="10430" fg:w="101"/><text x="17.4077%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="17.3091%" y="277" width="0.0148%" height="15" fill="rgb(232,18,1)" fg:x="10522" fg:w="9"/><text x="17.5591%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="17.3304%" y="309" width="0.0197%" height="15" fill="rgb(215,41,42)" fg:x="10535" fg:w="12"/><text x="17.5804%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.02%)</title><rect x="17.3502%" y="309" width="0.0197%" height="15" fill="rgb(224,123,36)" fg:x="10547" fg:w="12"/><text x="17.6002%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="17.3699%" y="309" width="0.0181%" height="15" fill="rgb(240,125,3)" fg:x="10559" fg:w="11"/><text x="17.6199%" y="319.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (337 samples, 0.55%)</title><rect x="16.8534%" y="325" width="0.5544%" height="15" fill="rgb(205,98,50)" fg:x="10245" fg:w="337"/><text x="17.1034%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (11 samples, 0.02%)</title><rect x="17.3897%" y="309" width="0.0181%" height="15" fill="rgb(205,185,37)" fg:x="10571" fg:w="11"/><text x="17.6397%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="17.4588%" y="293" width="0.0115%" height="15" fill="rgb(238,207,15)" fg:x="10613" fg:w="7"/><text x="17.7088%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.04%)</title><rect x="17.4703%" y="293" width="0.0378%" height="15" fill="rgb(213,199,42)" fg:x="10620" fg:w="23"/><text x="17.7203%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.03%)</title><rect x="17.4736%" y="277" width="0.0345%" height="15" fill="rgb(235,201,11)" fg:x="10622" fg:w="21"/><text x="17.7236%" y="287.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.12%)</title><rect x="17.4078%" y="325" width="0.1152%" height="15" fill="rgb(207,46,11)" fg:x="10582" fg:w="70"/><text x="17.6578%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (53 samples, 0.09%)</title><rect x="17.4357%" y="309" width="0.0872%" height="15" fill="rgb(241,35,35)" fg:x="10599" fg:w="53"/><text x="17.6857%" y="319.50"></text></g><g><title>qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,285 samples, 2.11%)</title><rect x="17.5229%" y="325" width="2.1139%" height="15" fill="rgb(243,32,47)" fg:x="10652" fg:w="1285"/><text x="17.7729%" y="335.50">q..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="19.9378%" y="293" width="0.0165%" height="15" fill="rgb(247,202,23)" fg:x="12120" fg:w="10"/><text x="20.1878%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="19.9428%" y="277" width="0.0115%" height="15" fill="rgb(219,102,11)" fg:x="12123" fg:w="7"/><text x="20.1928%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="19.9428%" y="261" width="0.0115%" height="15" fill="rgb(243,110,44)" fg:x="12123" fg:w="7"/><text x="20.1928%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.06%)</title><rect x="19.9559%" y="293" width="0.0609%" height="15" fill="rgb(222,74,54)" fg:x="12131" fg:w="37"/><text x="20.2059%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.02%)</title><rect x="20.0941%" y="229" width="0.0165%" height="15" fill="rgb(216,99,12)" fg:x="12215" fg:w="10"/><text x="20.3441%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.06%)</title><rect x="20.0793%" y="261" width="0.0609%" height="15" fill="rgb(226,22,26)" fg:x="12206" fg:w="37"/><text x="20.3293%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33 samples, 0.05%)</title><rect x="20.0859%" y="245" width="0.0543%" height="15" fill="rgb(217,163,10)" fg:x="12210" fg:w="33"/><text x="20.3359%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.03%)</title><rect x="20.1105%" y="229" width="0.0296%" height="15" fill="rgb(213,25,53)" fg:x="12225" fg:w="18"/><text x="20.3605%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="20.1270%" y="213" width="0.0132%" height="15" fill="rgb(252,105,26)" fg:x="12235" fg:w="8"/><text x="20.3770%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.06%)</title><rect x="20.0776%" y="277" width="0.0642%" height="15" fill="rgb(220,39,43)" fg:x="12205" fg:w="39"/><text x="20.3276%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (74 samples, 0.12%)</title><rect x="20.0234%" y="293" width="0.1217%" height="15" fill="rgb(229,68,48)" fg:x="12172" fg:w="74"/><text x="20.2734%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (135 samples, 0.22%)</title><rect x="19.9247%" y="309" width="0.2221%" height="15" fill="rgb(252,8,32)" fg:x="12112" fg:w="135"/><text x="20.1747%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (321 samples, 0.53%)</title><rect x="19.6434%" y="325" width="0.5281%" height="15" fill="rgb(223,20,43)" fg:x="11941" fg:w="321"/><text x="19.8934%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.02%)</title><rect x="20.1467%" y="309" width="0.0247%" height="15" fill="rgb(229,81,49)" fg:x="12247" fg:w="15"/><text x="20.3967%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="20.1714%" y="325" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="12262" fg:w="7"/><text x="20.4214%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (21 samples, 0.03%)</title><rect x="20.1829%" y="325" width="0.0345%" height="15" fill="rgb(249,185,26)" fg:x="12269" fg:w="21"/><text x="20.4329%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (132 samples, 0.22%)</title><rect x="20.2175%" y="325" width="0.2171%" height="15" fill="rgb(249,174,33)" fg:x="12290" fg:w="132"/><text x="20.4675%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (26 samples, 0.04%)</title><rect x="20.5119%" y="261" width="0.0428%" height="15" fill="rgb(233,201,37)" fg:x="12469" fg:w="26"/><text x="20.7619%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="20.5366%" y="245" width="0.0181%" height="15" fill="rgb(221,78,26)" fg:x="12484" fg:w="11"/><text x="20.7866%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.08%)</title><rect x="20.4757%" y="293" width="0.0823%" height="15" fill="rgb(250,127,30)" fg:x="12447" fg:w="50"/><text x="20.7257%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.06%)</title><rect x="20.5021%" y="277" width="0.0559%" height="15" fill="rgb(230,49,44)" fg:x="12463" fg:w="34"/><text x="20.7521%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="20.5728%" y="261" width="0.0148%" height="15" fill="rgb(229,67,23)" fg:x="12506" fg:w="9"/><text x="20.8228%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (21 samples, 0.03%)</title><rect x="20.5613%" y="277" width="0.0345%" height="15" fill="rgb(249,83,47)" fg:x="12499" fg:w="21"/><text x="20.8113%" y="287.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (99 samples, 0.16%)</title><rect x="20.4346%" y="325" width="0.1629%" height="15" fill="rgb(215,43,3)" fg:x="12422" fg:w="99"/><text x="20.6846%" y="335.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (80 samples, 0.13%)</title><rect x="20.4659%" y="309" width="0.1316%" height="15" fill="rgb(238,154,13)" fg:x="12441" fg:w="80"/><text x="20.7159%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (23 samples, 0.04%)</title><rect x="20.5596%" y="293" width="0.0378%" height="15" fill="rgb(219,56,2)" fg:x="12498" fg:w="23"/><text x="20.8096%" y="303.50"></text></g><g><title>qecp`core::hash::BuildHasher::hash_one (471 samples, 0.77%)</title><rect x="20.6057%" y="325" width="0.7748%" height="15" fill="rgb(233,0,4)" fg:x="12526" fg:w="471"/><text x="20.8557%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (25 samples, 0.04%)</title><rect x="21.4924%" y="197" width="0.0411%" height="15" fill="rgb(235,30,7)" fg:x="13065" fg:w="25"/><text x="21.7424%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.11%)</title><rect x="21.4611%" y="229" width="0.1119%" height="15" fill="rgb(250,79,13)" fg:x="13046" fg:w="68"/><text x="21.7111%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.11%)</title><rect x="21.4661%" y="213" width="0.1069%" height="15" fill="rgb(211,146,34)" fg:x="13049" fg:w="65"/><text x="21.7161%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 0.04%)</title><rect x="21.5335%" y="197" width="0.0395%" height="15" fill="rgb(228,22,38)" fg:x="13090" fg:w="24"/><text x="21.7835%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.14%)</title><rect x="21.4496%" y="245" width="0.1365%" height="15" fill="rgb(235,168,5)" fg:x="13039" fg:w="83"/><text x="21.6996%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="21.5730%" y="229" width="0.0132%" height="15" fill="rgb(221,155,16)" fg:x="13114" fg:w="8"/><text x="21.8230%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (113 samples, 0.19%)</title><rect x="21.4118%" y="277" width="0.1859%" height="15" fill="rgb(215,215,53)" fg:x="13016" fg:w="113"/><text x="21.6618%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (98 samples, 0.16%)</title><rect x="21.4364%" y="261" width="0.1612%" height="15" fill="rgb(223,4,10)" fg:x="13031" fg:w="98"/><text x="21.6864%" y="271.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (141 samples, 0.23%)</title><rect x="21.3805%" y="325" width="0.2319%" height="15" fill="rgb(234,103,6)" fg:x="12997" fg:w="141"/><text x="21.6305%" y="335.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (131 samples, 0.22%)</title><rect x="21.3970%" y="309" width="0.2155%" height="15" fill="rgb(227,97,0)" fg:x="13007" fg:w="131"/><text x="21.6470%" y="319.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (122 samples, 0.20%)</title><rect x="21.4118%" y="293" width="0.2007%" height="15" fill="rgb(234,150,53)" fg:x="13016" fg:w="122"/><text x="21.6618%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="21.5977%" y="277" width="0.0148%" height="15" fill="rgb(228,201,54)" fg:x="13129" fg:w="9"/><text x="21.8477%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (14 samples, 0.02%)</title><rect x="31.0566%" y="309" width="0.0230%" height="15" fill="rgb(222,22,37)" fg:x="18879" fg:w="14"/><text x="31.3066%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (22 samples, 0.04%)</title><rect x="31.3313%" y="293" width="0.0362%" height="15" fill="rgb(237,53,32)" fg:x="19046" fg:w="22"/><text x="31.5813%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="32.1900%" y="261" width="0.0477%" height="15" fill="rgb(233,25,53)" fg:x="19568" fg:w="29"/><text x="32.4400%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="32.3990%" y="229" width="0.0148%" height="15" fill="rgb(210,40,34)" fg:x="19695" fg:w="9"/><text x="32.6490%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.02%)</title><rect x="32.4812%" y="213" width="0.0230%" height="15" fill="rgb(241,220,44)" fg:x="19745" fg:w="14"/><text x="32.7312%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (89 samples, 0.15%)</title><rect x="32.6309%" y="197" width="0.1464%" height="15" fill="rgb(235,28,35)" fg:x="19836" fg:w="89"/><text x="32.8809%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (347 samples, 0.57%)</title><rect x="32.4138%" y="229" width="0.5708%" height="15" fill="rgb(210,56,17)" fg:x="19704" fg:w="347"/><text x="32.6638%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (292 samples, 0.48%)</title><rect x="32.5042%" y="213" width="0.4804%" height="15" fill="rgb(224,130,29)" fg:x="19759" fg:w="292"/><text x="32.7542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (126 samples, 0.21%)</title><rect x="32.7773%" y="197" width="0.2073%" height="15" fill="rgb(235,212,8)" fg:x="19925" fg:w="126"/><text x="33.0273%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (61 samples, 0.10%)</title><rect x="32.8842%" y="181" width="0.1003%" height="15" fill="rgb(223,33,50)" fg:x="19990" fg:w="61"/><text x="33.1342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (454 samples, 0.75%)</title><rect x="32.3529%" y="245" width="0.7468%" height="15" fill="rgb(219,149,13)" fg:x="19667" fg:w="454"/><text x="32.6029%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (70 samples, 0.12%)</title><rect x="32.9846%" y="229" width="0.1152%" height="15" fill="rgb(250,156,29)" fg:x="20051" fg:w="70"/><text x="33.2346%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="33.1063%" y="245" width="0.0115%" height="15" fill="rgb(216,193,19)" fg:x="20125" fg:w="7"/><text x="33.3563%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.06%)</title><rect x="33.1178%" y="245" width="0.0642%" height="15" fill="rgb(216,135,14)" fg:x="20132" fg:w="39"/><text x="33.3678%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="33.1820%" y="245" width="0.0395%" height="15" fill="rgb(241,47,5)" fg:x="20171" fg:w="24"/><text x="33.4320%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (600 samples, 0.99%)</title><rect x="32.2558%" y="261" width="0.9870%" height="15" fill="rgb(233,42,35)" fg:x="19608" fg:w="600"/><text x="32.5058%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.02%)</title><rect x="33.2231%" y="245" width="0.0197%" height="15" fill="rgb(231,13,6)" fg:x="20196" fg:w="12"/><text x="33.4731%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (754 samples, 1.24%)</title><rect x="32.0222%" y="277" width="1.2404%" height="15" fill="rgb(207,181,40)" fg:x="19466" fg:w="754"/><text x="32.2722%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.02%)</title><rect x="33.2429%" y="261" width="0.0197%" height="15" fill="rgb(254,173,49)" fg:x="20208" fg:w="12"/><text x="33.4929%" y="271.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (1,354 samples, 2.23%)</title><rect x="31.0796%" y="309" width="2.2274%" height="15" fill="rgb(221,1,38)" fg:x="18893" fg:w="1354"/><text x="31.3296%" y="319.50">q..</text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (1,179 samples, 1.94%)</title><rect x="31.3675%" y="293" width="1.9395%" height="15" fill="rgb(206,124,46)" fg:x="19068" fg:w="1179"/><text x="31.6175%" y="303.50">q..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (27 samples, 0.04%)</title><rect x="33.2626%" y="277" width="0.0444%" height="15" fill="rgb(249,21,11)" fg:x="20220" fg:w="27"/><text x="33.5126%" y="287.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (7,111 samples, 11.70%)</title><rect x="21.6125%" y="325" width="11.6978%" height="15" fill="rgb(222,201,40)" fg:x="13138" fg:w="7111"/><text x="21.8625%" y="335.50">qecp`qecp::comple..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (90 samples, 0.15%)</title><rect x="33.3103%" y="309" width="0.1481%" height="15" fill="rgb(235,61,29)" fg:x="20249" fg:w="90"/><text x="33.5603%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="33.4584%" y="309" width="0.0674%" height="15" fill="rgb(219,207,3)" fg:x="20339" fg:w="41"/><text x="33.7084%" y="319.50"></text></g><g><title>qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="33.5274%" y="309" width="0.0115%" height="15" fill="rgb(222,56,46)" fg:x="20381" fg:w="7"/><text x="33.7774%" y="319.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_grow (4,863 samples, 8.00%)</title><rect x="33.5390%" y="309" width="7.9998%" height="15" fill="rgb(239,76,54)" fg:x="20388" fg:w="4863"/><text x="33.7890%" y="319.50">qecp`qecp::..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (609 samples, 1.00%)</title><rect x="41.7543%" y="293" width="1.0018%" height="15" fill="rgb(231,124,27)" fg:x="25382" fg:w="609"/><text x="42.0043%" y="303.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_merge (908 samples, 1.49%)</title><rect x="41.5388%" y="309" width="1.4937%" height="15" fill="rgb(249,195,6)" fg:x="25251" fg:w="908"/><text x="41.7888%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (168 samples, 0.28%)</title><rect x="42.7561%" y="293" width="0.2764%" height="15" fill="rgb(237,174,47)" fg:x="25991" fg:w="168"/><text x="43.0061%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (68 samples, 0.11%)</title><rect x="42.9206%" y="277" width="0.1119%" height="15" fill="rgb(206,201,31)" fg:x="26091" fg:w="68"/><text x="43.1706%" y="287.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (326 samples, 0.54%)</title><rect x="43.2381%" y="293" width="0.5363%" height="15" fill="rgb(231,57,52)" fg:x="26284" fg:w="326"/><text x="43.4881%" y="303.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_remove (525 samples, 0.86%)</title><rect x="43.0325%" y="309" width="0.8636%" height="15" fill="rgb(248,177,22)" fg:x="26159" fg:w="525"/><text x="43.2825%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (74 samples, 0.12%)</title><rect x="43.7744%" y="293" width="0.1217%" height="15" fill="rgb(215,211,37)" fg:x="26610" fg:w="74"/><text x="44.0244%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (60 samples, 0.10%)</title><rect x="43.7974%" y="277" width="0.0987%" height="15" fill="rgb(241,128,51)" fg:x="26624" fg:w="60"/><text x="44.0474%" y="287.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_uf_update (2,170 samples, 3.57%)</title><rect x="43.8961%" y="309" width="3.5697%" height="15" fill="rgb(227,165,31)" fg:x="26684" fg:w="2170"/><text x="44.1461%" y="319.50">qecp..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (403 samples, 0.66%)</title><rect x="46.8029%" y="293" width="0.6629%" height="15" fill="rgb(228,167,24)" fg:x="28451" fg:w="403"/><text x="47.0529%" y="303.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (229 samples, 0.38%)</title><rect x="47.4658%" y="309" width="0.3767%" height="15" fill="rgb(228,143,12)" fg:x="28854" fg:w="229"/><text x="47.7158%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (41 samples, 0.07%)</title><rect x="47.8425%" y="309" width="0.0674%" height="15" fill="rgb(249,149,8)" fg:x="29083" fg:w="41"/><text x="48.0925%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::union (31 samples, 0.05%)</title><rect x="47.9133%" y="309" width="0.0510%" height="15" fill="rgb(243,35,44)" fg:x="29126" fg:w="31"/><text x="48.1633%" y="319.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::run_single_iteration_optional_grow (8,910 samples, 14.66%)</title><rect x="33.3103%" y="325" width="14.6573%" height="15" fill="rgb(246,89,9)" fg:x="20249" fg:w="8910"/><text x="33.5603%" y="335.50">qecp`qecp::decoder_uni..</text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (84 samples, 0.14%)</title><rect x="48.5795%" y="309" width="0.1382%" height="15" fill="rgb(233,213,13)" fg:x="29531" fg:w="84"/><text x="48.8295%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="50.7707%" y="261" width="0.0115%" height="15" fill="rgb(233,141,41)" fg:x="30863" fg:w="7"/><text x="51.0207%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="50.7707%" y="245" width="0.0115%" height="15" fill="rgb(239,167,4)" fg:x="30863" fg:w="7"/><text x="51.0207%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="50.7707%" y="229" width="0.0115%" height="15" fill="rgb(209,217,16)" fg:x="30863" fg:w="7"/><text x="51.0207%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.11%)</title><rect x="50.7822%" y="261" width="0.1119%" height="15" fill="rgb(219,88,35)" fg:x="30870" fg:w="68"/><text x="51.0322%" y="271.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (83 samples, 0.14%)</title><rect x="50.9007%" y="261" width="0.1365%" height="15" fill="rgb(220,193,23)" fg:x="30942" fg:w="83"/><text x="51.1507%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.08%)</title><rect x="50.9582%" y="245" width="0.0790%" height="15" fill="rgb(230,90,52)" fg:x="30977" fg:w="48"/><text x="51.2082%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (47 samples, 0.08%)</title><rect x="50.9599%" y="229" width="0.0773%" height="15" fill="rgb(252,106,19)" fg:x="30978" fg:w="47"/><text x="51.2099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (46 samples, 0.08%)</title><rect x="50.9615%" y="213" width="0.0757%" height="15" fill="rgb(206,74,20)" fg:x="30979" fg:w="46"/><text x="51.2115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.06%)</title><rect x="50.9796%" y="197" width="0.0576%" height="15" fill="rgb(230,138,44)" fg:x="30990" fg:w="35"/><text x="51.2296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.03%)</title><rect x="51.0026%" y="181" width="0.0345%" height="15" fill="rgb(235,182,43)" fg:x="31004" fg:w="21"/><text x="51.2526%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (179 samples, 0.29%)</title><rect x="50.7493%" y="277" width="0.2945%" height="15" fill="rgb(242,16,51)" fg:x="30850" fg:w="179"/><text x="50.9993%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (395 samples, 0.65%)</title><rect x="50.4039%" y="293" width="0.6498%" height="15" fill="rgb(248,9,4)" fg:x="30640" fg:w="395"/><text x="50.6539%" y="303.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (1,875 samples, 3.08%)</title><rect x="47.9741%" y="325" width="3.0844%" height="15" fill="rgb(210,31,22)" fg:x="29163" fg:w="1875"/><text x="48.2241%" y="335.50">qec..</text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (1,423 samples, 2.34%)</title><rect x="48.7177%" y="309" width="2.3409%" height="15" fill="rgb(239,54,39)" fg:x="29615" fg:w="1423"/><text x="48.9677%" y="319.50">q..</text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (81 samples, 0.13%)</title><rect x="52.6477%" y="309" width="0.1332%" height="15" fill="rgb(230,99,41)" fg:x="32004" fg:w="81"/><text x="52.8977%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="52.8105%" y="245" width="0.0115%" height="15" fill="rgb(253,106,12)" fg:x="32103" fg:w="7"/><text x="53.0605%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (17 samples, 0.03%)</title><rect x="52.8402%" y="229" width="0.0280%" height="15" fill="rgb(213,46,41)" fg:x="32121" fg:w="17"/><text x="53.0902%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="52.8517%" y="213" width="0.0165%" height="15" fill="rgb(215,133,35)" fg:x="32128" fg:w="10"/><text x="53.1017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="52.8813%" y="213" width="0.0165%" height="15" fill="rgb(213,28,5)" fg:x="32146" fg:w="10"/><text x="53.1313%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="52.8846%" y="197" width="0.0132%" height="15" fill="rgb(215,77,49)" fg:x="32148" fg:w="8"/><text x="53.1346%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="52.8714%" y="229" width="0.0313%" height="15" fill="rgb(248,100,22)" fg:x="32140" fg:w="19"/><text x="53.1214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (60 samples, 0.10%)</title><rect x="52.8237%" y="245" width="0.0987%" height="15" fill="rgb(208,67,9)" fg:x="32111" fg:w="60"/><text x="53.0737%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.01%)</title><rect x="52.9092%" y="229" width="0.0132%" height="15" fill="rgb(219,133,21)" fg:x="32163" fg:w="8"/><text x="53.1592%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (122 samples, 0.20%)</title><rect x="52.8023%" y="261" width="0.2007%" height="15" fill="rgb(246,46,29)" fg:x="32098" fg:w="122"/><text x="53.0523%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.08%)</title><rect x="52.9224%" y="245" width="0.0806%" height="15" fill="rgb(246,185,52)" fg:x="32171" fg:w="49"/><text x="53.1724%" y="255.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (155 samples, 0.25%)</title><rect x="52.7809%" y="309" width="0.2550%" height="15" fill="rgb(252,136,11)" fg:x="32085" fg:w="155"/><text x="53.0309%" y="319.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (150 samples, 0.25%)</title><rect x="52.7892%" y="293" width="0.2468%" height="15" fill="rgb(219,138,53)" fg:x="32090" fg:w="150"/><text x="53.0392%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (146 samples, 0.24%)</title><rect x="52.7957%" y="277" width="0.2402%" height="15" fill="rgb(211,51,23)" fg:x="32094" fg:w="146"/><text x="53.0457%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="53.0162%" y="261" width="0.0197%" height="15" fill="rgb(247,221,28)" fg:x="32228" fg:w="12"/><text x="53.2662%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="53.0195%" y="245" width="0.0165%" height="15" fill="rgb(251,222,45)" fg:x="32230" fg:w="10"/><text x="53.2695%" y="255.50"></text></g><g><title>qecp`qecp::simulator::SparseDetectedErasures::get_erasure_edges (1,294 samples, 2.13%)</title><rect x="51.0586%" y="325" width="2.1287%" height="15" fill="rgb(217,162,53)" fg:x="31038" fg:w="1294"/><text x="51.3086%" y="335.50">q..</text></g><g><title>qecp`qecp::erasure_graph::ErasureGraph::get_node_unwrap (92 samples, 0.15%)</title><rect x="53.0359%" y="309" width="0.1513%" height="15" fill="rgb(229,93,14)" fg:x="32240" fg:w="92"/><text x="53.2859%" y="319.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (248 samples, 0.41%)</title><rect x="53.1873%" y="325" width="0.4080%" height="15" fill="rgb(209,67,49)" fg:x="32332" fg:w="248"/><text x="53.4373%" y="335.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (41 samples, 0.07%)</title><rect x="53.5952%" y="325" width="0.0674%" height="15" fill="rgb(213,87,29)" fg:x="32580" fg:w="41"/><text x="53.8452%" y="335.50"></text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::find (24 samples, 0.04%)</title><rect x="53.6232%" y="309" width="0.0395%" height="15" fill="rgb(205,151,52)" fg:x="32597" fg:w="24"/><text x="53.8732%" y="319.50"></text></g><g><title>qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_erasure (29,663 samples, 48.80%)</title><rect x="4.8677%" y="341" width="48.7967%" height="15" fill="rgb(253,215,39)" fg:x="2959" fg:w="29663"/><text x="5.1177%" y="351.50">qecp`qecp::decoder_union_find::UnionFindDecoder::decode_with_erasure</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="66.2735%" y="325" width="0.0115%" height="15" fill="rgb(221,220,41)" fg:x="40287" fg:w="7"/><text x="66.5235%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="66.2735%" y="309" width="0.0115%" height="15" fill="rgb(218,133,21)" fg:x="40287" fg:w="7"/><text x="66.5235%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="66.2850%" y="325" width="0.0197%" height="15" fill="rgb(221,193,43)" fg:x="40294" fg:w="12"/><text x="66.5350%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="66.2916%" y="309" width="0.0132%" height="15" fill="rgb(240,128,52)" fg:x="40298" fg:w="8"/><text x="66.5416%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="66.2916%" y="293" width="0.0132%" height="15" fill="rgb(253,114,12)" fg:x="40298" fg:w="8"/><text x="66.5416%" y="303.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (460 samples, 0.76%)</title><rect x="66.3196%" y="325" width="0.7567%" height="15" fill="rgb(215,223,47)" fg:x="40315" fg:w="460"/><text x="66.5696%" y="335.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (17,951 samples, 29.53%)</title><rect x="53.6676%" y="341" width="29.5300%" height="15" fill="rgb(248,225,23)" fg:x="32624" fg:w="17951"/><text x="53.9176%" y="351.50">qecp`qecp::simulator::Simulator::generate_random..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (9,800 samples, 16.12%)</title><rect x="67.0763%" y="325" width="16.1213%" height="15" fill="rgb(250,108,0)" fg:x="40775" fg:w="9800"/><text x="67.3263%" y="335.50">qecp`qecp::simulator::Sim..</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (8,018 samples, 13.19%)</title><rect x="70.0077%" y="309" width="13.1899%" height="15" fill="rgb(228,208,7)" fg:x="42557" fg:w="8018"/><text x="70.2577%" y="319.50">qecp`qecp::simulator..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="88.6739%" y="293" width="0.0165%" height="15" fill="rgb(244,45,10)" fg:x="53904" fg:w="10"/><text x="88.9239%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="88.6756%" y="277" width="0.0148%" height="15" fill="rgb(207,125,25)" fg:x="53905" fg:w="9"/><text x="88.9256%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="88.6756%" y="261" width="0.0148%" height="15" fill="rgb(210,195,18)" fg:x="53905" fg:w="9"/><text x="88.9256%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="88.6756%" y="245" width="0.0148%" height="15" fill="rgb(249,80,12)" fg:x="53905" fg:w="9"/><text x="88.9256%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="88.8352%" y="229" width="0.0197%" height="15" fill="rgb(221,65,9)" fg:x="54002" fg:w="12"/><text x="89.0852%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (119 samples, 0.20%)</title><rect x="88.8105%" y="261" width="0.1958%" height="15" fill="rgb(235,49,36)" fg:x="53987" fg:w="119"/><text x="89.0605%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (113 samples, 0.19%)</title><rect x="88.8203%" y="245" width="0.1859%" height="15" fill="rgb(225,32,20)" fg:x="53993" fg:w="113"/><text x="89.0703%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (92 samples, 0.15%)</title><rect x="88.8549%" y="229" width="0.1513%" height="15" fill="rgb(215,141,46)" fg:x="54014" fg:w="92"/><text x="89.1049%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (55 samples, 0.09%)</title><rect x="88.9158%" y="213" width="0.0905%" height="15" fill="rgb(250,160,47)" fg:x="54051" fg:w="55"/><text x="89.1658%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 0.21%)</title><rect x="88.8006%" y="277" width="0.2106%" height="15" fill="rgb(216,222,40)" fg:x="53981" fg:w="128"/><text x="89.0506%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (185 samples, 0.30%)</title><rect x="88.7101%" y="293" width="0.3043%" height="15" fill="rgb(234,217,39)" fg:x="53926" fg:w="185"/><text x="88.9601%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (240 samples, 0.39%)</title><rect x="88.6213%" y="309" width="0.3948%" height="15" fill="rgb(207,178,40)" fg:x="53872" fg:w="240"/><text x="88.8713%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,083 samples, 1.78%)</title><rect x="87.2576%" y="325" width="1.7816%" height="15" fill="rgb(221,136,13)" fg:x="53043" fg:w="1083"/><text x="87.5076%" y="335.50">q..</text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="89.0161%" y="309" width="0.0230%" height="15" fill="rgb(249,199,10)" fg:x="54112" fg:w="14"/><text x="89.2661%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_detected_erasures (3,562 samples, 5.86%)</title><rect x="83.1976%" y="341" width="5.8596%" height="15" fill="rgb(249,222,13)" fg:x="50575" fg:w="3562"/><text x="83.4476%" y="351.50">qecp`qe..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.02%)</title><rect x="89.0391%" y="325" width="0.0181%" height="15" fill="rgb(244,185,38)" fg:x="54126" fg:w="11"/><text x="89.2891%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="94.2111%" y="293" width="0.0197%" height="15" fill="rgb(236,202,9)" fg:x="57270" fg:w="12"/><text x="94.4611%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="94.2128%" y="277" width="0.0181%" height="15" fill="rgb(250,229,37)" fg:x="57271" fg:w="11"/><text x="94.4628%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="94.2128%" y="261" width="0.0181%" height="15" fill="rgb(206,174,23)" fg:x="57271" fg:w="11"/><text x="94.4628%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="94.2161%" y="245" width="0.0148%" height="15" fill="rgb(211,33,43)" fg:x="57273" fg:w="9"/><text x="94.4661%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="94.2325%" y="293" width="0.0115%" height="15" fill="rgb(245,58,50)" fg:x="57283" fg:w="7"/><text x="94.4825%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="94.3427%" y="229" width="0.0395%" height="15" fill="rgb(244,68,36)" fg:x="57350" fg:w="24"/><text x="94.5927%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.13%)</title><rect x="94.3312%" y="261" width="0.1300%" height="15" fill="rgb(232,229,15)" fg:x="57343" fg:w="79"/><text x="94.5812%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (79 samples, 0.13%)</title><rect x="94.3312%" y="245" width="0.1300%" height="15" fill="rgb(254,30,23)" fg:x="57343" fg:w="79"/><text x="94.5812%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.08%)</title><rect x="94.3822%" y="229" width="0.0790%" height="15" fill="rgb(235,160,14)" fg:x="57374" fg:w="48"/><text x="94.6322%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.02%)</title><rect x="94.4381%" y="213" width="0.0230%" height="15" fill="rgb(212,155,44)" fg:x="57408" fg:w="14"/><text x="94.6881%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (81 samples, 0.13%)</title><rect x="94.3296%" y="277" width="0.1332%" height="15" fill="rgb(226,2,50)" fg:x="57342" fg:w="81"/><text x="94.5796%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (130 samples, 0.21%)</title><rect x="94.2506%" y="293" width="0.2139%" height="15" fill="rgb(234,177,6)" fg:x="57294" fg:w="130"/><text x="94.5006%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (172 samples, 0.28%)</title><rect x="94.1881%" y="309" width="0.2829%" height="15" fill="rgb(217,24,9)" fg:x="57256" fg:w="172"/><text x="94.4381%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (726 samples, 1.19%)</title><rect x="93.2998%" y="325" width="1.1943%" height="15" fill="rgb(220,13,46)" fg:x="56716" fg:w="726"/><text x="93.5498%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="94.4710%" y="309" width="0.0230%" height="15" fill="rgb(239,221,27)" fg:x="57428" fg:w="14"/><text x="94.7210%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (3,313 samples, 5.45%)</title><rect x="89.0572%" y="341" width="5.4500%" height="15" fill="rgb(222,198,25)" fg:x="54137" fg:w="3313"/><text x="89.3072%" y="351.50">qecp`qe..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="94.4941%" y="325" width="0.0132%" height="15" fill="rgb(211,99,13)" fg:x="57442" fg:w="8"/><text x="94.7441%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.03%)</title><rect x="97.3976%" y="229" width="0.0296%" height="15" fill="rgb(232,111,31)" fg:x="59207" fg:w="18"/><text x="97.6476%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (78 samples, 0.13%)</title><rect x="97.3696%" y="261" width="0.1283%" height="15" fill="rgb(245,82,37)" fg:x="59190" fg:w="78"/><text x="97.6196%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (74 samples, 0.12%)</title><rect x="97.3762%" y="245" width="0.1217%" height="15" fill="rgb(227,149,46)" fg:x="59194" fg:w="74"/><text x="97.6262%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (43 samples, 0.07%)</title><rect x="97.4272%" y="229" width="0.0707%" height="15" fill="rgb(218,36,50)" fg:x="59225" fg:w="43"/><text x="97.6772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="97.4782%" y="213" width="0.0197%" height="15" fill="rgb(226,80,48)" fg:x="59256" fg:w="12"/><text x="97.7282%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (96 samples, 0.16%)</title><rect x="97.3449%" y="277" width="0.1579%" height="15" fill="rgb(238,224,15)" fg:x="59175" fg:w="96"/><text x="97.5949%" y="287.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (149 samples, 0.25%)</title><rect x="97.2676%" y="293" width="0.2451%" height="15" fill="rgb(241,136,10)" fg:x="59128" fg:w="149"/><text x="97.5176%" y="303.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (181 samples, 0.30%)</title><rect x="97.2182%" y="309" width="0.2978%" height="15" fill="rgb(208,32,45)" fg:x="59098" fg:w="181"/><text x="97.4682%" y="319.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,038 samples, 1.71%)</title><rect x="95.8414%" y="325" width="1.7075%" height="15" fill="rgb(207,135,9)" fg:x="58261" fg:w="1038"/><text x="96.0914%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (20 samples, 0.03%)</title><rect x="97.5160%" y="309" width="0.0329%" height="15" fill="rgb(206,86,44)" fg:x="59279" fg:w="20"/><text x="97.7660%" y="319.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (1,870 samples, 3.08%)</title><rect x="94.5072%" y="341" width="3.0762%" height="15" fill="rgb(245,177,15)" fg:x="57450" fg:w="1870"/><text x="94.7572%" y="351.50">qec..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (21 samples, 0.03%)</title><rect x="97.5489%" y="325" width="0.0345%" height="15" fill="rgb(206,64,50)" fg:x="59299" fg:w="21"/><text x="97.7989%" y="335.50"></text></g><g><title>qecp`qecp::simulator::Simulator::validate_correction (190 samples, 0.31%)</title><rect x="97.5834%" y="341" width="0.3126%" height="15" fill="rgb(234,36,40)" fg:x="59320" fg:w="190"/><text x="97.8334%" y="351.50"></text></g><g><title>qecp`qecp::code_builder::code_builder_validate_correction (184 samples, 0.30%)</title><rect x="97.5933%" y="325" width="0.3027%" height="15" fill="rgb(213,64,8)" fg:x="59326" fg:w="184"/><text x="97.8433%" y="335.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (20 samples, 0.03%)</title><rect x="97.8631%" y="309" width="0.0329%" height="15" fill="rgb(210,75,36)" fg:x="59490" fg:w="20"/><text x="98.1131%" y="319.50"></text></g><g><title>qecp`qecp::types::CorrelatedPauliErrorRates::generate_random_error (1,243 samples, 2.04%)</title><rect x="97.9042%" y="341" width="2.0448%" height="15" fill="rgb(229,88,21)" fg:x="59515" fg:w="1243"/><text x="98.1542%" y="351.50">q..</text></g><g><title>qecp`qecp::union_find::UnionFindGeneric&lt;U&gt;::get (24 samples, 0.04%)</title><rect x="99.9589%" y="341" width="0.0395%" height="15" fill="rgb(252,204,47)" fg:x="60764" fg:w="24"/><text x="100.2089%" y="351.50"></text></g><g><title>all (60,789 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="60789"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,676 samples, 98.17%)</title><rect x="1.8309%" y="421" width="98.1691%" height="15" fill="rgb(221,76,26)" fg:x="1113" fg:w="59676"/><text x="2.0809%" y="431.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,676 samples, 98.17%)</title><rect x="1.8309%" y="405" width="98.1691%" height="15" fill="rgb(225,139,18)" fg:x="1113" fg:w="59676"/><text x="2.0809%" y="415.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,676 samples, 98.17%)</title><rect x="1.8309%" y="389" width="98.1691%" height="15" fill="rgb(230,137,11)" fg:x="1113" fg:w="59676"/><text x="2.0809%" y="399.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,676 samples, 98.17%)</title><rect x="1.8309%" y="373" width="98.1691%" height="15" fill="rgb(212,28,1)" fg:x="1113" fg:w="59676"/><text x="2.0809%" y="383.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,664 samples, 98.15%)</title><rect x="1.8507%" y="357" width="98.1493%" height="15" fill="rgb(248,164,17)" fg:x="1125" fg:w="59664"/><text x="2.1007%" y="367.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>