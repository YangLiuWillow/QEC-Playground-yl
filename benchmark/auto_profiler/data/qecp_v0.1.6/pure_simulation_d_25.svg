<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="59945"><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="0.0017%" y="85" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="7"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="0.0300%" y="53" width="0.0217%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="13"/><text x="0.2800%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="0.0551%" y="53" width="0.0117%" height="15" fill="rgb(221,193,54)" fg:x="33" fg:w="7"/><text x="0.3051%" y="63.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.06%)</title><rect x="0.0133%" y="85" width="0.0551%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="33"/><text x="0.2633%" y="95.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.05%)</title><rect x="0.0217%" y="69" width="0.0467%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="28"/><text x="0.2717%" y="79.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0701%" y="69" width="0.0133%" height="15" fill="rgb(232,128,0)" fg:x="42" fg:w="8"/><text x="0.3201%" y="79.50"></text></g><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.02%)</title><rect x="0.0701%" y="85" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="9"/><text x="0.3201%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="0.0884%" y="69" width="0.0167%" height="15" fill="rgb(228,23,34)" fg:x="53" fg:w="10"/><text x="0.3384%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="0.0934%" y="53" width="0.0117%" height="15" fill="rgb(218,30,26)" fg:x="56" fg:w="7"/><text x="0.3434%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="0.0934%" y="37" width="0.0117%" height="15" fill="rgb(220,122,19)" fg:x="56" fg:w="7"/><text x="0.3434%" y="47.50"></text></g><g><title>qecp`qecp::code_builder::build_code (13 samples, 0.02%)</title><rect x="0.0851%" y="85" width="0.0217%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="13"/><text x="0.3351%" y="95.50"></text></g><g><title>qecp`qecp::simulator::Simulator::compress_error_rates (24 samples, 0.04%)</title><rect x="0.1151%" y="85" width="0.0400%" height="15" fill="rgb(240,193,28)" fg:x="69" fg:w="24"/><text x="0.3651%" y="95.50"></text></g><g><title>qecp`qecp::simulator::Simulator::set_error_rates (6 samples, 0.01%)</title><rect x="0.1551%" y="85" width="0.0100%" height="15" fill="rgb(216,20,37)" fg:x="93" fg:w="6"/><text x="0.4051%" y="95.50"></text></g><g><title>dyld`start (114 samples, 0.19%)</title><rect x="0.0000%" y="325" width="0.1902%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="114"/><text x="0.2500%" y="335.50"></text></g><g><title>qecp`main (114 samples, 0.19%)</title><rect x="0.0000%" y="309" width="0.1902%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="114"/><text x="0.2500%" y="319.50"></text></g><g><title>qecp`std::rt::lang_start_internal (114 samples, 0.19%)</title><rect x="0.0000%" y="293" width="0.1902%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="114"/><text x="0.2500%" y="303.50"></text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (114 samples, 0.19%)</title><rect x="0.0000%" y="277" width="0.1902%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="114"/><text x="0.2500%" y="287.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (114 samples, 0.19%)</title><rect x="0.0000%" y="261" width="0.1902%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="114"/><text x="0.2500%" y="271.50"></text></g><g><title>qecp`qecp::main (114 samples, 0.19%)</title><rect x="0.0000%" y="245" width="0.1902%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="114"/><text x="0.2500%" y="255.50"></text></g><g><title>qecp`tokio::runtime::Runtime::block_on (114 samples, 0.19%)</title><rect x="0.0000%" y="229" width="0.1902%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="114"/><text x="0.2500%" y="239.50"></text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (114 samples, 0.19%)</title><rect x="0.0000%" y="213" width="0.1902%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="114"/><text x="0.2500%" y="223.50"></text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (114 samples, 0.19%)</title><rect x="0.0000%" y="197" width="0.1902%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="114"/><text x="0.2500%" y="207.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (114 samples, 0.19%)</title><rect x="0.0000%" y="181" width="0.1902%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="114"/><text x="0.2500%" y="191.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (114 samples, 0.19%)</title><rect x="0.0000%" y="165" width="0.1902%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="114"/><text x="0.2500%" y="175.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (114 samples, 0.19%)</title><rect x="0.0000%" y="149" width="0.1902%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="114"/><text x="0.2500%" y="159.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (114 samples, 0.19%)</title><rect x="0.0000%" y="133" width="0.1902%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="114"/><text x="0.2500%" y="143.50"></text></g><g><title>qecp`qecp::tool::run_matched_tool (114 samples, 0.19%)</title><rect x="0.0000%" y="117" width="0.1902%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="114"/><text x="0.2500%" y="127.50"></text></g><g><title>qecp`qecp::tool::benchmark (114 samples, 0.19%)</title><rect x="0.0000%" y="101" width="0.1902%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="114"/><text x="0.2500%" y="111.50"></text></g><g><title>qecp`std::thread::sleep (10 samples, 0.02%)</title><rect x="0.1735%" y="85" width="0.0167%" height="15" fill="rgb(214,148,48)" fg:x="104" fg:w="10"/><text x="0.4235%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__semwait_signal (9 samples, 0.02%)</title><rect x="0.1752%" y="69" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="105" fg:w="9"/><text x="0.4252%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="0.3003%" y="133" width="0.0100%" height="15" fill="rgb(209,103,24)" fg:x="180" fg:w="6"/><text x="0.5503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="0.2853%" y="181" width="0.0300%" height="15" fill="rgb(229,88,8)" fg:x="171" fg:w="18"/><text x="0.5353%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="0.2953%" y="165" width="0.0200%" height="15" fill="rgb(213,181,19)" fg:x="177" fg:w="12"/><text x="0.5453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="0.2986%" y="149" width="0.0167%" height="15" fill="rgb(254,191,54)" fg:x="179" fg:w="10"/><text x="0.5486%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (37 samples, 0.06%)</title><rect x="0.4688%" y="117" width="0.0617%" height="15" fill="rgb(241,83,37)" fg:x="281" fg:w="37"/><text x="0.7188%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 0.17%)</title><rect x="0.4104%" y="149" width="0.1685%" height="15" fill="rgb(233,36,39)" fg:x="246" fg:w="101"/><text x="0.6604%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (91 samples, 0.15%)</title><rect x="0.4271%" y="133" width="0.1518%" height="15" fill="rgb(226,3,54)" fg:x="256" fg:w="91"/><text x="0.6771%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.05%)</title><rect x="0.5305%" y="117" width="0.0484%" height="15" fill="rgb(245,192,40)" fg:x="318" fg:w="29"/><text x="0.7805%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (130 samples, 0.22%)</title><rect x="0.3687%" y="165" width="0.2169%" height="15" fill="rgb(238,167,29)" fg:x="221" fg:w="130"/><text x="0.6187%" y="175.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (170 samples, 0.28%)</title><rect x="0.3170%" y="181" width="0.2836%" height="15" fill="rgb(232,182,51)" fg:x="190" fg:w="170"/><text x="0.5670%" y="191.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (238 samples, 0.40%)</title><rect x="0.2119%" y="245" width="0.3970%" height="15" fill="rgb(231,60,39)" fg:x="127" fg:w="238"/><text x="0.4619%" y="255.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (238 samples, 0.40%)</title><rect x="0.2119%" y="229" width="0.3970%" height="15" fill="rgb(208,69,12)" fg:x="127" fg:w="238"/><text x="0.4619%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (238 samples, 0.40%)</title><rect x="0.2119%" y="213" width="0.3970%" height="15" fill="rgb(235,93,37)" fg:x="127" fg:w="238"/><text x="0.4619%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (233 samples, 0.39%)</title><rect x="0.2202%" y="197" width="0.3887%" height="15" fill="rgb(213,116,39)" fg:x="132" fg:w="233"/><text x="0.4702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="0.7323%" y="229" width="0.0133%" height="15" fill="rgb(222,207,29)" fg:x="439" fg:w="8"/><text x="0.9823%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.05%)</title><rect x="0.7457%" y="229" width="0.0467%" height="15" fill="rgb(206,96,30)" fg:x="447" fg:w="28"/><text x="0.9957%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.02%)</title><rect x="0.7924%" y="229" width="0.0200%" height="15" fill="rgb(218,138,4)" fg:x="475" fg:w="12"/><text x="1.0424%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="0.8124%" y="229" width="0.0267%" height="15" fill="rgb(250,191,14)" fg:x="487" fg:w="16"/><text x="1.0624%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.02%)</title><rect x="0.8391%" y="229" width="0.0150%" height="15" fill="rgb(239,60,40)" fg:x="503" fg:w="9"/><text x="1.0891%" y="239.50"></text></g><g><title>qecp`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="0.8541%" y="229" width="0.0217%" height="15" fill="rgb(206,27,48)" fg:x="512" fg:w="13"/><text x="1.1041%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (22 samples, 0.04%)</title><rect x="1.2411%" y="197" width="0.0367%" height="15" fill="rgb(225,35,8)" fg:x="744" fg:w="22"/><text x="1.4911%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (188 samples, 0.31%)</title><rect x="1.1010%" y="213" width="0.3136%" height="15" fill="rgb(250,213,24)" fg:x="660" fg:w="188"/><text x="1.3510%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (78 samples, 0.13%)</title><rect x="1.2845%" y="197" width="0.1301%" height="15" fill="rgb(247,123,22)" fg:x="770" fg:w="78"/><text x="1.5345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (71 samples, 0.12%)</title><rect x="1.2962%" y="181" width="0.1184%" height="15" fill="rgb(231,138,38)" fg:x="777" fg:w="71"/><text x="1.5462%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (116 samples, 0.19%)</title><rect x="1.7449%" y="181" width="0.1935%" height="15" fill="rgb(231,145,46)" fg:x="1046" fg:w="116"/><text x="1.9949%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (409 samples, 0.68%)</title><rect x="1.4146%" y="213" width="0.6823%" height="15" fill="rgb(251,118,11)" fg:x="848" fg:w="409"/><text x="1.6646%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (335 samples, 0.56%)</title><rect x="1.5381%" y="197" width="0.5588%" height="15" fill="rgb(217,147,25)" fg:x="922" fg:w="335"/><text x="1.7881%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (95 samples, 0.16%)</title><rect x="1.9384%" y="181" width="0.1585%" height="15" fill="rgb(247,81,37)" fg:x="1162" fg:w="95"/><text x="2.1884%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.03%)</title><rect x="2.1019%" y="213" width="0.0250%" height="15" fill="rgb(209,12,38)" fg:x="1260" fg:w="15"/><text x="2.3519%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.03%)</title><rect x="2.1269%" y="213" width="0.0300%" height="15" fill="rgb(227,1,9)" fg:x="1275" fg:w="18"/><text x="2.3769%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="2.1570%" y="213" width="0.0200%" height="15" fill="rgb(248,47,43)" fg:x="1293" fg:w="12"/><text x="2.4070%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (960 samples, 1.60%)</title><rect x="0.6089%" y="245" width="1.6015%" height="15" fill="rgb(221,10,30)" fg:x="365" fg:w="960"/><text x="0.8589%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (800 samples, 1.33%)</title><rect x="0.8758%" y="229" width="1.3346%" height="15" fill="rgb(210,229,1)" fg:x="525" fg:w="800"/><text x="1.1258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.03%)</title><rect x="2.1770%" y="213" width="0.0334%" height="15" fill="rgb(222,148,37)" fg:x="1305" fg:w="20"/><text x="2.4270%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (90 samples, 0.15%)</title><rect x="2.2170%" y="245" width="0.1501%" height="15" fill="rgb(234,67,33)" fg:x="1329" fg:w="90"/><text x="2.4670%" y="255.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;qecp::tool::benchmark::{{closure}}&gt; (7 samples, 0.01%)</title><rect x="2.3672%" y="245" width="0.0117%" height="15" fill="rgb(247,98,35)" fg:x="1419" fg:w="7"/><text x="2.6172%" y="255.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="2.3672%" y="229" width="0.0117%" height="15" fill="rgb(247,138,52)" fg:x="1419" fg:w="7"/><text x="2.6172%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.05%)</title><rect x="30.8416%" y="229" width="0.0517%" height="15" fill="rgb(213,79,30)" fg:x="18488" fg:w="31"/><text x="31.0916%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.01%)</title><rect x="30.8950%" y="229" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="18520" fg:w="6"/><text x="31.1450%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (1,144 samples, 1.91%)</title><rect x="30.9100%" y="229" width="1.9084%" height="15" fill="rgb(230,62,27)" fg:x="18529" fg:w="1144"/><text x="31.1600%" y="239.50">q..</text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (44,791 samples, 74.72%)</title><rect x="2.3805%" y="245" width="74.7202%" height="15" fill="rgb(216,154,8)" fg:x="1427" fg:w="44791"/><text x="2.6305%" y="255.50">qecp`qecp::simulator::Simulator::generate_random_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (26,545 samples, 44.28%)</title><rect x="32.8184%" y="229" width="44.2823%" height="15" fill="rgb(244,35,45)" fg:x="19673" fg:w="26545"/><text x="33.0684%" y="239.50">qecp`qecp::simulator::Simulator::propagate_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (22,490 samples, 37.52%)</title><rect x="39.5830%" y="213" width="37.5177%" height="15" fill="rgb(251,115,12)" fg:x="23728" fg:w="22490"/><text x="39.8330%" y="223.50">qecp`qecp::simulator::Simulator::propagate_error_from</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="90.1760%" y="197" width="0.0133%" height="15" fill="rgb(240,54,50)" fg:x="54056" fg:w="8"/><text x="90.4260%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.01%)</title><rect x="90.1793%" y="181" width="0.0100%" height="15" fill="rgb(233,84,52)" fg:x="54058" fg:w="6"/><text x="90.4293%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.03%)</title><rect x="90.1893%" y="197" width="0.0250%" height="15" fill="rgb(207,117,47)" fg:x="54064" fg:w="15"/><text x="90.4393%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (42 samples, 0.07%)</title><rect x="90.4412%" y="133" width="0.0701%" height="15" fill="rgb(249,43,39)" fg:x="54215" fg:w="42"/><text x="90.6912%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (97 samples, 0.16%)</title><rect x="90.3912%" y="165" width="0.1618%" height="15" fill="rgb(209,38,44)" fg:x="54185" fg:w="97"/><text x="90.6412%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (86 samples, 0.14%)</title><rect x="90.4095%" y="149" width="0.1435%" height="15" fill="rgb(236,212,23)" fg:x="54196" fg:w="86"/><text x="90.6595%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.04%)</title><rect x="90.5113%" y="133" width="0.0417%" height="15" fill="rgb(242,79,21)" fg:x="54257" fg:w="25"/><text x="90.7613%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (120 samples, 0.20%)</title><rect x="90.3595%" y="181" width="0.2002%" height="15" fill="rgb(211,96,35)" fg:x="54166" fg:w="120"/><text x="90.6095%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (209 samples, 0.35%)</title><rect x="90.2244%" y="197" width="0.3487%" height="15" fill="rgb(253,215,40)" fg:x="54085" fg:w="209"/><text x="90.4744%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (271 samples, 0.45%)</title><rect x="90.1259%" y="213" width="0.4521%" height="15" fill="rgb(211,81,21)" fg:x="54026" fg:w="271"/><text x="90.3759%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1,776 samples, 2.96%)</title><rect x="87.6754%" y="229" width="2.9627%" height="15" fill="rgb(208,190,38)" fg:x="52557" fg:w="1776"/><text x="87.9254%" y="239.50">qec..</text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (36 samples, 0.06%)</title><rect x="90.5780%" y="213" width="0.0601%" height="15" fill="rgb(235,213,38)" fg:x="54297" fg:w="36"/><text x="90.8280%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (8,133 samples, 13.57%)</title><rect x="77.1007%" y="245" width="13.5674%" height="15" fill="rgb(237,122,38)" fg:x="46218" fg:w="8133"/><text x="77.3507%" y="255.50">qecp`qecp::simulator..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (18 samples, 0.03%)</title><rect x="90.6381%" y="229" width="0.0300%" height="15" fill="rgb(244,218,35)" fg:x="54333" fg:w="18"/><text x="90.8881%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="99.2893%" y="197" width="0.0234%" height="15" fill="rgb(240,68,47)" fg:x="59519" fg:w="14"/><text x="99.5393%" y="207.50"></text></g><g><title>qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="99.3160%" y="197" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="59535" fg:w="7"/><text x="99.5660%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="99.5880%" y="149" width="0.0133%" height="15" fill="rgb(235,124,12)" fg:x="59698" fg:w="8"/><text x="99.8380%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (56 samples, 0.09%)</title><rect x="99.6580%" y="133" width="0.0934%" height="15" fill="rgb(224,169,11)" fg:x="59740" fg:w="56"/><text x="99.9080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (153 samples, 0.26%)</title><rect x="99.5746%" y="165" width="0.2552%" height="15" fill="rgb(250,166,2)" fg:x="59690" fg:w="153"/><text x="99.8246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (137 samples, 0.23%)</title><rect x="99.6013%" y="149" width="0.2285%" height="15" fill="rgb(242,216,29)" fg:x="59706" fg:w="137"/><text x="99.8513%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (47 samples, 0.08%)</title><rect x="99.7514%" y="133" width="0.0784%" height="15" fill="rgb(230,116,27)" fg:x="59796" fg:w="47"/><text x="100.0014%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (184 samples, 0.31%)</title><rect x="99.5312%" y="181" width="0.3069%" height="15" fill="rgb(228,99,48)" fg:x="59664" fg:w="184"/><text x="99.7812%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.01%)</title><rect x="99.8382%" y="181" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="59848" fg:w="6"/><text x="100.0882%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (313 samples, 0.52%)</title><rect x="99.3277%" y="197" width="0.5221%" height="15" fill="rgb(247,143,39)" fg:x="59542" fg:w="313"/><text x="99.5777%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (419 samples, 0.70%)</title><rect x="99.1709%" y="213" width="0.6990%" height="15" fill="rgb(236,97,10)" fg:x="59448" fg:w="419"/><text x="99.4209%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::splitpoint (12 samples, 0.02%)</title><rect x="99.8499%" y="197" width="0.0200%" height="15" fill="rgb(233,208,19)" fg:x="59855" fg:w="12"/><text x="100.0999%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (3,344 samples, 5.58%)</title><rect x="94.3415%" y="229" width="5.5784%" height="15" fill="rgb(216,164,2)" fg:x="56553" fg:w="3344"/><text x="94.5915%" y="239.50">qecp`al..</text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (30 samples, 0.05%)</title><rect x="99.8699%" y="213" width="0.0500%" height="15" fill="rgb(220,129,5)" fg:x="59867" fg:w="30"/><text x="100.1199%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (5,591 samples, 9.33%)</title><rect x="90.6681%" y="245" width="9.3269%" height="15" fill="rgb(242,17,10)" fg:x="54351" fg:w="5591"/><text x="90.9181%" y="255.50">qecp`qecp::si..</text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (45 samples, 0.08%)</title><rect x="99.9199%" y="229" width="0.0751%" height="15" fill="rgb(242,107,0)" fg:x="59897" fg:w="45"/><text x="100.1699%" y="239.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,824 samples, 99.80%)</title><rect x="0.2002%" y="261" width="99.7981%" height="15" fill="rgb(251,28,31)" fg:x="120" fg:w="59824"/><text x="0.4502%" y="271.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (59,945 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="59945"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,830 samples, 99.81%)</title><rect x="0.1918%" y="325" width="99.8082%" height="15" fill="rgb(215,21,27)" fg:x="115" fg:w="59830"/><text x="0.4418%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,830 samples, 99.81%)</title><rect x="0.1918%" y="309" width="99.8082%" height="15" fill="rgb(232,23,21)" fg:x="115" fg:w="59830"/><text x="0.4418%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,830 samples, 99.81%)</title><rect x="0.1918%" y="293" width="99.8082%" height="15" fill="rgb(244,5,23)" fg:x="115" fg:w="59830"/><text x="0.4418%" y="303.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,830 samples, 99.81%)</title><rect x="0.1918%" y="277" width="99.8082%" height="15" fill="rgb(226,81,46)" fg:x="115" fg:w="59830"/><text x="0.4418%" y="287.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>