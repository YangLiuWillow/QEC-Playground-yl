<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="59938"><g><title>qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.01%)</title><rect x="0.0067%" y="69" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="7"/><text x="0.2567%" y="79.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (7 samples, 0.01%)</title><rect x="0.0067%" y="53" width="0.0117%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="7"/><text x="0.2567%" y="63.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;qecp::decoder_mwpm::MWPMDecoder&gt; (9 samples, 0.02%)</title><rect x="0.0067%" y="85" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="9"/><text x="0.2567%" y="95.50"></text></g><g><title>qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (18 samples, 0.03%)</title><rect x="0.0250%" y="69" width="0.0300%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="18"/><text x="0.2750%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (18 samples, 0.03%)</title><rect x="0.0250%" y="53" width="0.0300%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="18"/><text x="0.2750%" y="63.50"></text></g><g><title>qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (30 samples, 0.05%)</title><rect x="0.0234%" y="85" width="0.0501%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="30"/><text x="0.2734%" y="95.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute (13 samples, 0.02%)</title><rect x="0.0734%" y="69" width="0.0217%" height="15" fill="rgb(207,160,47)" fg:x="44" fg:w="13"/><text x="0.3234%" y="79.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::precompute_dijkstra_with_end_position (12 samples, 0.02%)</title><rect x="0.0751%" y="53" width="0.0200%" height="15" fill="rgb(228,23,34)" fg:x="45" fg:w="12"/><text x="0.3251%" y="63.50"></text></g><g><title>qecp`qecp::decoder_mwpm::MWPMDecoder::new (24 samples, 0.04%)</title><rect x="0.0734%" y="85" width="0.0400%" height="15" fill="rgb(218,30,26)" fg:x="44" fg:w="24"/><text x="0.3234%" y="95.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build (11 samples, 0.02%)</title><rect x="0.0951%" y="69" width="0.0184%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="11"/><text x="0.3451%" y="79.50"></text></g><g><title>qecp`qecp::model_graph::ModelGraph::build_with_weight_function_region (11 samples, 0.02%)</title><rect x="0.0951%" y="53" width="0.0184%" height="15" fill="rgb(250,228,42)" fg:x="57" fg:w="11"/><text x="0.3451%" y="63.50"></text></g><g><title>qecp`qecp::simulator::Simulator::fast_measurement_given_few_errors (9 samples, 0.02%)</title><rect x="0.0984%" y="37" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="59" fg:w="9"/><text x="0.3484%" y="47.50"></text></g><g><title>dyld`start (75 samples, 0.13%)</title><rect x="0.0000%" y="325" width="0.1251%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="75"/><text x="0.2500%" y="335.50"></text></g><g><title>qecp`main (74 samples, 0.12%)</title><rect x="0.0017%" y="309" width="0.1235%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="74"/><text x="0.2517%" y="319.50"></text></g><g><title>qecp`std::rt::lang_start_internal (74 samples, 0.12%)</title><rect x="0.0017%" y="293" width="0.1235%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="74"/><text x="0.2517%" y="303.50"></text></g><g><title>qecp`std::rt::lang_start::_{{closure}} (74 samples, 0.12%)</title><rect x="0.0017%" y="277" width="0.1235%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="74"/><text x="0.2517%" y="287.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (74 samples, 0.12%)</title><rect x="0.0017%" y="261" width="0.1235%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="74"/><text x="0.2517%" y="271.50"></text></g><g><title>qecp`qecp::main (74 samples, 0.12%)</title><rect x="0.0017%" y="245" width="0.1235%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="74"/><text x="0.2517%" y="255.50"></text></g><g><title>qecp`tokio::runtime::Runtime::block_on (74 samples, 0.12%)</title><rect x="0.0017%" y="229" width="0.1235%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="74"/><text x="0.2517%" y="239.50"></text></g><g><title>qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (74 samples, 0.12%)</title><rect x="0.0017%" y="213" width="0.1235%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="74"/><text x="0.2517%" y="223.50"></text></g><g><title>qecp`tokio::runtime::basic_scheduler::Context::enter (74 samples, 0.12%)</title><rect x="0.0017%" y="197" width="0.1235%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="74"/><text x="0.2517%" y="207.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (74 samples, 0.12%)</title><rect x="0.0017%" y="181" width="0.1235%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="74"/><text x="0.2517%" y="191.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="165" width="0.1235%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="74"/><text x="0.2517%" y="175.50"></text></g><g><title>qecp`std::thread::local::LocalKey&lt;T&gt;::with (74 samples, 0.12%)</title><rect x="0.0017%" y="149" width="0.1235%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="74"/><text x="0.2517%" y="159.50"></text></g><g><title>qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.12%)</title><rect x="0.0017%" y="133" width="0.1235%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="74"/><text x="0.2517%" y="143.50"></text></g><g><title>qecp`qecp::tool::run_matched_tool (74 samples, 0.12%)</title><rect x="0.0017%" y="117" width="0.1235%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="74"/><text x="0.2517%" y="127.50"></text></g><g><title>qecp`qecp::tool::benchmark (74 samples, 0.12%)</title><rect x="0.0017%" y="101" width="0.1235%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="74"/><text x="0.2517%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (50 samples, 0.08%)</title><rect x="0.1285%" y="261" width="0.0834%" height="15" fill="rgb(238,160,17)" fg:x="77" fg:w="50"/><text x="0.3785%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (143 samples, 0.24%)</title><rect x="0.2486%" y="245" width="0.2386%" height="15" fill="rgb(214,148,48)" fg:x="149" fg:w="143"/><text x="0.4986%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="0.4872%" y="245" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="292" fg:w="6"/><text x="0.7372%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (13 samples, 0.02%)</title><rect x="0.4972%" y="245" width="0.0217%" height="15" fill="rgb(209,103,24)" fg:x="298" fg:w="13"/><text x="0.7472%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="0.5189%" y="245" width="0.0184%" height="15" fill="rgb(229,88,8)" fg:x="311" fg:w="11"/><text x="0.7689%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.03%)</title><rect x="0.5389%" y="245" width="0.0250%" height="15" fill="rgb(213,181,19)" fg:x="323" fg:w="15"/><text x="0.7889%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="0.5639%" y="245" width="0.0100%" height="15" fill="rgb(254,191,54)" fg:x="338" fg:w="6"/><text x="0.8139%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.02%)</title><rect x="0.5823%" y="245" width="0.0150%" height="15" fill="rgb(241,83,37)" fg:x="349" fg:w="9"/><text x="0.8323%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="0.6457%" y="229" width="0.0584%" height="15" fill="rgb(233,36,39)" fg:x="387" fg:w="35"/><text x="0.8957%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.05%)</title><rect x="0.6540%" y="213" width="0.0501%" height="15" fill="rgb(226,3,54)" fg:x="392" fg:w="30"/><text x="0.9040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 0.05%)</title><rect x="0.6573%" y="197" width="0.0467%" height="15" fill="rgb(245,192,40)" fg:x="394" fg:w="28"/><text x="0.9073%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.03%)</title><rect x="0.6774%" y="181" width="0.0267%" height="15" fill="rgb(238,167,29)" fg:x="406" fg:w="16"/><text x="0.9274%" y="191.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (80 samples, 0.13%)</title><rect x="0.6056%" y="245" width="0.1335%" height="15" fill="rgb(232,182,51)" fg:x="363" fg:w="80"/><text x="0.8556%" y="255.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 0.03%)</title><rect x="0.7074%" y="229" width="0.0317%" height="15" fill="rgb(231,60,39)" fg:x="424" fg:w="19"/><text x="0.9574%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="0.7191%" y="213" width="0.0200%" height="15" fill="rgb(208,69,12)" fg:x="431" fg:w="12"/><text x="0.9691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.02%)</title><rect x="0.7241%" y="197" width="0.0150%" height="15" fill="rgb(235,93,37)" fg:x="434" fg:w="9"/><text x="0.9741%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="0.7257%" y="181" width="0.0133%" height="15" fill="rgb(213,116,39)" fg:x="435" fg:w="8"/><text x="0.9757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.06%)</title><rect x="0.8709%" y="229" width="0.0634%" height="15" fill="rgb(222,207,29)" fg:x="522" fg:w="38"/><text x="1.1209%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="0.9109%" y="213" width="0.0234%" height="15" fill="rgb(206,96,30)" fg:x="546" fg:w="14"/><text x="1.1609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="0.9176%" y="197" width="0.0167%" height="15" fill="rgb(218,138,4)" fg:x="550" fg:w="10"/><text x="1.1676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.03%)</title><rect x="1.0494%" y="197" width="0.0300%" height="15" fill="rgb(250,191,14)" fg:x="629" fg:w="18"/><text x="1.2994%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (105 samples, 0.18%)</title><rect x="0.9343%" y="229" width="0.1752%" height="15" fill="rgb(239,60,40)" fg:x="560" fg:w="105"/><text x="1.1843%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (85 samples, 0.14%)</title><rect x="0.9677%" y="213" width="0.1418%" height="15" fill="rgb(206,27,48)" fg:x="580" fg:w="85"/><text x="1.2177%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (18 samples, 0.03%)</title><rect x="1.0794%" y="197" width="0.0300%" height="15" fill="rgb(225,35,8)" fg:x="647" fg:w="18"/><text x="1.3294%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (9 samples, 0.02%)</title><rect x="1.1195%" y="229" width="0.0150%" height="15" fill="rgb(250,213,24)" fg:x="671" fg:w="9"/><text x="1.3695%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="1.1345%" y="229" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="680" fg:w="6"/><text x="1.3845%" y="239.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (281 samples, 0.47%)</title><rect x="0.7391%" y="245" width="0.4688%" height="15" fill="rgb(231,138,38)" fg:x="443" fg:w="281"/><text x="0.9891%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (37 samples, 0.06%)</title><rect x="1.1462%" y="229" width="0.0617%" height="15" fill="rgb(231,145,46)" fg:x="687" fg:w="37"/><text x="1.3962%" y="239.50"></text></g><g><title>qecp`DYLD-STUB$$free (19 samples, 0.03%)</title><rect x="1.2096%" y="245" width="0.0317%" height="15" fill="rgb(251,118,11)" fg:x="725" fg:w="19"/><text x="1.4596%" y="255.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (24 samples, 0.04%)</title><rect x="1.2613%" y="245" width="0.0400%" height="15" fill="rgb(217,147,25)" fg:x="756" fg:w="24"/><text x="1.5113%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.02%)</title><rect x="1.3748%" y="197" width="0.0150%" height="15" fill="rgb(247,81,37)" fg:x="824" fg:w="9"/><text x="1.6248%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="1.3431%" y="213" width="0.0567%" height="15" fill="rgb(209,12,38)" fg:x="805" fg:w="34"/><text x="1.5931%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="1.3898%" y="197" width="0.0100%" height="15" fill="rgb(227,1,9)" fg:x="833" fg:w="6"/><text x="1.6398%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="1.3898%" y="181" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="833" fg:w="6"/><text x="1.6398%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="1.3998%" y="213" width="0.0167%" height="15" fill="rgb(221,10,30)" fg:x="839" fg:w="10"/><text x="1.6498%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.02%)</title><rect x="1.4014%" y="197" width="0.0150%" height="15" fill="rgb(210,229,1)" fg:x="840" fg:w="9"/><text x="1.6514%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="1.4165%" y="213" width="0.0167%" height="15" fill="rgb(222,148,37)" fg:x="849" fg:w="10"/><text x="1.6665%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.10%)</title><rect x="1.3347%" y="229" width="0.1018%" height="15" fill="rgb(234,67,33)" fg:x="800" fg:w="61"/><text x="1.5847%" y="239.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (77 samples, 0.13%)</title><rect x="1.3130%" y="245" width="0.1285%" height="15" fill="rgb(247,98,35)" fg:x="787" fg:w="77"/><text x="1.5630%" y="255.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_edges (12 samples, 0.02%)</title><rect x="1.4448%" y="245" width="0.0200%" height="15" fill="rgb(247,138,52)" fg:x="866" fg:w="12"/><text x="1.6948%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (79 samples, 0.13%)</title><rect x="1.9070%" y="229" width="0.1318%" height="15" fill="rgb(213,79,30)" fg:x="1143" fg:w="79"/><text x="2.1570%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="2.0388%" y="229" width="0.0484%" height="15" fill="rgb(246,177,23)" fg:x="1222" fg:w="29"/><text x="2.2888%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="2.0555%" y="213" width="0.0317%" height="15" fill="rgb(230,62,27)" fg:x="1232" fg:w="19"/><text x="2.3055%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="2.0588%" y="197" width="0.0284%" height="15" fill="rgb(216,154,8)" fg:x="1234" fg:w="17"/><text x="2.3088%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="2.0872%" y="229" width="0.0133%" height="15" fill="rgb(244,35,45)" fg:x="1251" fg:w="8"/><text x="2.3372%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (32 samples, 0.05%)</title><rect x="2.1823%" y="213" width="0.0534%" height="15" fill="rgb(251,115,12)" fg:x="1308" fg:w="32"/><text x="2.4323%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.14%)</title><rect x="2.1038%" y="229" width="0.1368%" height="15" fill="rgb(240,54,50)" fg:x="1261" fg:w="82"/><text x="2.3538%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="2.2423%" y="229" width="0.0267%" height="15" fill="rgb(233,84,52)" fg:x="1344" fg:w="16"/><text x="2.4923%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="2.2507%" y="213" width="0.0184%" height="15" fill="rgb(207,117,47)" fg:x="1349" fg:w="11"/><text x="2.5007%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="2.2690%" y="229" width="0.0200%" height="15" fill="rgb(249,43,39)" fg:x="1360" fg:w="12"/><text x="2.5190%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.04%)</title><rect x="2.2890%" y="229" width="0.0384%" height="15" fill="rgb(209,38,44)" fg:x="1372" fg:w="23"/><text x="2.5390%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.02%)</title><rect x="2.3374%" y="229" width="0.0184%" height="15" fill="rgb(236,212,23)" fg:x="1401" fg:w="11"/><text x="2.5874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.06%)</title><rect x="2.3825%" y="213" width="0.0551%" height="15" fill="rgb(242,79,21)" fg:x="1428" fg:w="33"/><text x="2.6325%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="2.4058%" y="197" width="0.0317%" height="15" fill="rgb(211,96,35)" fg:x="1442" fg:w="19"/><text x="2.6558%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.03%)</title><rect x="2.4075%" y="181" width="0.0300%" height="15" fill="rgb(253,215,40)" fg:x="1443" fg:w="18"/><text x="2.6575%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.08%)</title><rect x="2.4375%" y="213" width="0.0801%" height="15" fill="rgb(211,81,21)" fg:x="1461" fg:w="48"/><text x="2.6875%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.05%)</title><rect x="2.4709%" y="197" width="0.0467%" height="15" fill="rgb(208,190,38)" fg:x="1481" fg:w="28"/><text x="2.7209%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.03%)</title><rect x="2.4859%" y="181" width="0.0317%" height="15" fill="rgb(235,213,38)" fg:x="1490" fg:w="19"/><text x="2.7359%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="2.5243%" y="213" width="0.0133%" height="15" fill="rgb(237,122,38)" fg:x="1513" fg:w="8"/><text x="2.7743%" y="223.50"></text></g><g><title>qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.20%)</title><rect x="2.3558%" y="229" width="0.1969%" height="15" fill="rgb(244,218,35)" fg:x="1412" fg:w="118"/><text x="2.6058%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (9 samples, 0.02%)</title><rect x="2.5376%" y="213" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="1521" fg:w="9"/><text x="2.7876%" y="223.50"></text></g><g><title>qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 0.05%)</title><rect x="2.5526%" y="229" width="0.0534%" height="15" fill="rgb(210,16,53)" fg:x="1530" fg:w="32"/><text x="2.8026%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (12 samples, 0.02%)</title><rect x="2.5860%" y="213" width="0.0200%" height="15" fill="rgb(235,124,12)" fg:x="1550" fg:w="12"/><text x="2.8360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="2.6828%" y="149" width="0.0133%" height="15" fill="rgb(224,169,11)" fg:x="1608" fg:w="8"/><text x="2.9328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="2.6728%" y="181" width="0.0367%" height="15" fill="rgb(250,166,2)" fg:x="1602" fg:w="22"/><text x="2.9228%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="2.6761%" y="165" width="0.0334%" height="15" fill="rgb(242,216,29)" fg:x="1604" fg:w="20"/><text x="2.9261%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="2.6961%" y="149" width="0.0133%" height="15" fill="rgb(230,116,27)" fg:x="1616" fg:w="8"/><text x="2.9461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.04%)</title><rect x="2.6678%" y="197" width="0.0434%" height="15" fill="rgb(228,99,48)" fg:x="1599" fg:w="26"/><text x="2.9178%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="2.7145%" y="197" width="0.0167%" height="15" fill="rgb(253,11,6)" fg:x="1627" fg:w="10"/><text x="2.9645%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (60 samples, 0.10%)</title><rect x="2.6444%" y="213" width="0.1001%" height="15" fill="rgb(247,143,39)" fg:x="1585" fg:w="60"/><text x="2.8944%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (79 samples, 0.13%)</title><rect x="2.6227%" y="229" width="0.1318%" height="15" fill="rgb(236,97,10)" fg:x="1572" fg:w="79"/><text x="2.8727%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.01%)</title><rect x="2.7445%" y="213" width="0.0100%" height="15" fill="rgb(233,208,19)" fg:x="1645" fg:w="6"/><text x="2.9945%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="2.7545%" y="229" width="0.0117%" height="15" fill="rgb(216,164,2)" fg:x="1651" fg:w="7"/><text x="3.0045%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (14 samples, 0.02%)</title><rect x="2.7662%" y="229" width="0.0234%" height="15" fill="rgb(220,129,5)" fg:x="1658" fg:w="14"/><text x="3.0162%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.02%)</title><rect x="2.7962%" y="229" width="0.0184%" height="15" fill="rgb(242,17,10)" fg:x="1676" fg:w="11"/><text x="3.0462%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="2.8746%" y="197" width="0.0100%" height="15" fill="rgb(242,107,0)" fg:x="1723" fg:w="6"/><text x="3.1246%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.02%)</title><rect x="2.9347%" y="149" width="0.0150%" height="15" fill="rgb(251,28,31)" fg:x="1759" fg:w="9"/><text x="3.1847%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="2.9497%" y="149" width="0.0117%" height="15" fill="rgb(233,223,10)" fg:x="1768" fg:w="7"/><text x="3.1997%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (35 samples, 0.06%)</title><rect x="2.9247%" y="165" width="0.0584%" height="15" fill="rgb(215,21,27)" fg:x="1753" fg:w="35"/><text x="3.1747%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="2.9664%" y="149" width="0.0167%" height="15" fill="rgb(232,23,21)" fg:x="1778" fg:w="10"/><text x="3.2164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.02%)</title><rect x="2.9681%" y="133" width="0.0150%" height="15" fill="rgb(244,5,23)" fg:x="1779" fg:w="9"/><text x="3.2181%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="3.0031%" y="149" width="0.0217%" height="15" fill="rgb(226,81,46)" fg:x="1800" fg:w="13"/><text x="3.2531%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="3.0131%" y="133" width="0.0117%" height="15" fill="rgb(247,70,30)" fg:x="1806" fg:w="7"/><text x="3.2631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (10 samples, 0.02%)</title><rect x="3.0348%" y="149" width="0.0167%" height="15" fill="rgb(212,68,19)" fg:x="1819" fg:w="10"/><text x="3.2848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.01%)</title><rect x="3.0782%" y="101" width="0.0100%" height="15" fill="rgb(240,187,13)" fg:x="1845" fg:w="6"/><text x="3.3282%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="3.0515%" y="149" width="0.0384%" height="15" fill="rgb(223,113,26)" fg:x="1829" fg:w="23"/><text x="3.3015%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (23 samples, 0.04%)</title><rect x="3.0515%" y="133" width="0.0384%" height="15" fill="rgb(206,192,2)" fg:x="1829" fg:w="23"/><text x="3.3015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.03%)</title><rect x="3.0648%" y="117" width="0.0250%" height="15" fill="rgb(241,108,4)" fg:x="1837" fg:w="15"/><text x="3.3148%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="3.0899%" y="149" width="0.0117%" height="15" fill="rgb(247,173,49)" fg:x="1852" fg:w="7"/><text x="3.3399%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="3.0915%" y="133" width="0.0100%" height="15" fill="rgb(224,114,35)" fg:x="1853" fg:w="6"/><text x="3.3415%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.01%)</title><rect x="3.1099%" y="133" width="0.0100%" height="15" fill="rgb(245,159,27)" fg:x="1864" fg:w="6"/><text x="3.3599%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (86 samples, 0.14%)</title><rect x="2.9864%" y="165" width="0.1435%" height="15" fill="rgb(245,172,44)" fg:x="1790" fg:w="86"/><text x="3.2364%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (17 samples, 0.03%)</title><rect x="3.1015%" y="149" width="0.0284%" height="15" fill="rgb(236,23,11)" fg:x="1859" fg:w="17"/><text x="3.3515%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="3.1199%" y="133" width="0.0100%" height="15" fill="rgb(205,117,38)" fg:x="1870" fg:w="6"/><text x="3.3699%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (154 samples, 0.26%)</title><rect x="2.9030%" y="181" width="0.2569%" height="15" fill="rgb(237,72,25)" fg:x="1740" fg:w="154"/><text x="3.1530%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.03%)</title><rect x="3.1349%" y="165" width="0.0250%" height="15" fill="rgb(244,70,9)" fg:x="1879" fg:w="15"/><text x="3.3849%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="3.1599%" y="181" width="0.0117%" height="15" fill="rgb(217,125,39)" fg:x="1894" fg:w="7"/><text x="3.4099%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (196 samples, 0.33%)</title><rect x="2.8930%" y="197" width="0.3270%" height="15" fill="rgb(235,36,10)" fg:x="1734" fg:w="196"/><text x="3.1430%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="3.1933%" y="181" width="0.0267%" height="15" fill="rgb(251,123,47)" fg:x="1914" fg:w="16"/><text x="3.4433%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.03%)</title><rect x="3.1933%" y="165" width="0.0267%" height="15" fill="rgb(221,13,13)" fg:x="1914" fg:w="16"/><text x="3.4433%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (244 samples, 0.41%)</title><rect x="2.8146%" y="229" width="0.4071%" height="15" fill="rgb(238,131,9)" fg:x="1687" fg:w="244"/><text x="3.0646%" y="239.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (210 samples, 0.35%)</title><rect x="2.8713%" y="213" width="0.3504%" height="15" fill="rgb(211,50,8)" fg:x="1721" fg:w="210"/><text x="3.1213%" y="223.50"></text></g><g><title>qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (6 samples, 0.01%)</title><rect x="3.2283%" y="229" width="0.0100%" height="15" fill="rgb(245,182,24)" fg:x="1935" fg:w="6"/><text x="3.4783%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="3.9858%" y="181" width="0.0334%" height="15" fill="rgb(242,14,37)" fg:x="2389" fg:w="20"/><text x="4.2358%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="4.0025%" y="165" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="2399" fg:w="10"/><text x="4.2525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.05%)</title><rect x="3.9724%" y="197" width="0.0484%" height="15" fill="rgb(213,55,15)" fg:x="2381" fg:w="29"/><text x="4.2224%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.04%)</title><rect x="4.0242%" y="181" width="0.0367%" height="15" fill="rgb(209,9,3)" fg:x="2412" fg:w="22"/><text x="4.2742%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (20 samples, 0.03%)</title><rect x="4.0275%" y="165" width="0.0334%" height="15" fill="rgb(230,59,30)" fg:x="2414" fg:w="20"/><text x="4.2775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="4.0725%" y="165" width="0.0100%" height="15" fill="rgb(209,121,21)" fg:x="2441" fg:w="6"/><text x="4.3225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (82 samples, 0.14%)</title><rect x="3.9541%" y="213" width="0.1368%" height="15" fill="rgb(220,109,13)" fg:x="2370" fg:w="82"/><text x="4.2041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41 samples, 0.07%)</title><rect x="4.0225%" y="197" width="0.0684%" height="15" fill="rgb(232,18,1)" fg:x="2411" fg:w="41"/><text x="4.2725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="4.0625%" y="181" width="0.0284%" height="15" fill="rgb(215,41,42)" fg:x="2435" fg:w="17"/><text x="4.3125%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.03%)</title><rect x="4.1276%" y="197" width="0.0250%" height="15" fill="rgb(224,123,36)" fg:x="2474" fg:w="15"/><text x="4.3776%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.09%)</title><rect x="4.0959%" y="213" width="0.0901%" height="15" fill="rgb(240,125,3)" fg:x="2455" fg:w="54"/><text x="4.3459%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.03%)</title><rect x="4.1610%" y="197" width="0.0250%" height="15" fill="rgb(205,98,50)" fg:x="2494" fg:w="15"/><text x="4.4110%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.02%)</title><rect x="4.1676%" y="181" width="0.0184%" height="15" fill="rgb(205,185,37)" fg:x="2498" fg:w="11"/><text x="4.4176%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.06%)</title><rect x="4.1860%" y="213" width="0.0601%" height="15" fill="rgb(238,207,15)" fg:x="2509" fg:w="36"/><text x="4.4360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="4.2277%" y="197" width="0.0184%" height="15" fill="rgb(213,199,42)" fg:x="2534" fg:w="11"/><text x="4.4777%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.03%)</title><rect x="4.2461%" y="213" width="0.0334%" height="15" fill="rgb(235,201,11)" fg:x="2545" fg:w="20"/><text x="4.4961%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="4.2561%" y="197" width="0.0234%" height="15" fill="rgb(207,46,11)" fg:x="2551" fg:w="14"/><text x="4.5061%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="4.2794%" y="213" width="0.0234%" height="15" fill="rgb(241,35,35)" fg:x="2565" fg:w="14"/><text x="4.5294%" y="223.50"></text></g><g><title>qecp`PerfectMatching::AddEdge (86 samples, 0.14%)</title><rect x="4.3245%" y="213" width="0.1435%" height="15" fill="rgb(243,32,47)" fg:x="2592" fg:w="86"/><text x="4.5745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="4.5580%" y="181" width="0.0200%" height="15" fill="rgb(247,202,23)" fg:x="2732" fg:w="12"/><text x="4.8080%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="4.5647%" y="165" width="0.0133%" height="15" fill="rgb(219,102,11)" fg:x="2736" fg:w="8"/><text x="4.8147%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (17 samples, 0.03%)</title><rect x="4.5530%" y="197" width="0.0284%" height="15" fill="rgb(243,110,44)" fg:x="2729" fg:w="17"/><text x="4.8030%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (322 samples, 0.54%)</title><rect x="4.5814%" y="197" width="0.5372%" height="15" fill="rgb(222,74,54)" fg:x="2746" fg:w="322"/><text x="4.8314%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.01%)</title><rect x="5.1186%" y="197" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="3068" fg:w="6"/><text x="5.3686%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="5.1336%" y="197" width="0.0117%" height="15" fill="rgb(226,22,26)" fg:x="3077" fg:w="7"/><text x="5.3836%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.03%)</title><rect x="5.1520%" y="197" width="0.0284%" height="15" fill="rgb(217,163,10)" fg:x="3088" fg:w="17"/><text x="5.4020%" y="207.50"></text></g><g><title>qecp`PerfectMatching::AddEdge (270 samples, 0.45%)</title><rect x="5.1887%" y="197" width="0.4505%" height="15" fill="rgb(213,25,53)" fg:x="3110" fg:w="270"/><text x="5.4387%" y="207.50"></text></g><g><title>qecp`PerfectMatching::Finish (24 samples, 0.04%)</title><rect x="5.6392%" y="197" width="0.0400%" height="15" fill="rgb(252,105,26)" fg:x="3380" fg:w="24"/><text x="5.8892%" y="207.50"></text></g><g><title>qecp`PerfectMatching::GetMatch (7 samples, 0.01%)</title><rect x="5.6792%" y="197" width="0.0117%" height="15" fill="rgb(220,39,43)" fg:x="3404" fg:w="7"/><text x="5.9292%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="5.7159%" y="133" width="0.0317%" height="15" fill="rgb(229,68,48)" fg:x="3426" fg:w="19"/><text x="5.9659%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="5.7359%" y="117" width="0.0117%" height="15" fill="rgb(252,8,32)" fg:x="3438" fg:w="7"/><text x="5.9859%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (30 samples, 0.05%)</title><rect x="5.6992%" y="181" width="0.0501%" height="15" fill="rgb(223,20,43)" fg:x="3416" fg:w="30"/><text x="5.9492%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.05%)</title><rect x="5.6992%" y="165" width="0.0501%" height="15" fill="rgb(229,81,49)" fg:x="3416" fg:w="30"/><text x="5.9492%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="5.7076%" y="149" width="0.0417%" height="15" fill="rgb(236,28,36)" fg:x="3421" fg:w="25"/><text x="5.9576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="5.8027%" y="117" width="0.0234%" height="15" fill="rgb(249,185,26)" fg:x="3478" fg:w="14"/><text x="6.0527%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (48 samples, 0.08%)</title><rect x="5.7726%" y="149" width="0.0801%" height="15" fill="rgb(249,174,33)" fg:x="3460" fg:w="48"/><text x="6.0226%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (43 samples, 0.07%)</title><rect x="5.7810%" y="133" width="0.0717%" height="15" fill="rgb(233,201,37)" fg:x="3465" fg:w="43"/><text x="6.0310%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="5.8344%" y="117" width="0.0184%" height="15" fill="rgb(221,78,26)" fg:x="3497" fg:w="11"/><text x="6.0844%" y="127.50"></text></g><g><title>qecp`PerfectMatching::PerfectMatching (99 samples, 0.17%)</title><rect x="5.6959%" y="197" width="0.1652%" height="15" fill="rgb(250,127,30)" fg:x="3414" fg:w="99"/><text x="5.9459%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (67 samples, 0.11%)</title><rect x="5.7493%" y="181" width="0.1118%" height="15" fill="rgb(230,49,44)" fg:x="3446" fg:w="67"/><text x="5.9993%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (58 samples, 0.10%)</title><rect x="5.7643%" y="165" width="0.0968%" height="15" fill="rgb(229,67,23)" fg:x="3455" fg:w="58"/><text x="6.0143%" y="175.50"></text></g><g><title>qecp`PerfectMatching::ProcessEdge00 (13 samples, 0.02%)</title><rect x="5.8611%" y="197" width="0.0217%" height="15" fill="rgb(249,83,47)" fg:x="3513" fg:w="13"/><text x="6.1111%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (252 samples, 0.42%)</title><rect x="5.9378%" y="181" width="0.4204%" height="15" fill="rgb(215,43,3)" fg:x="3559" fg:w="252"/><text x="6.1878%" y="191.50"></text></g><g><title>qecp`PerfectMatching::AugmentBranch (43 samples, 0.07%)</title><rect x="6.3582%" y="165" width="0.0717%" height="15" fill="rgb(238,154,13)" fg:x="3811" fg:w="43"/><text x="6.6082%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Augment (44 samples, 0.07%)</title><rect x="6.3582%" y="181" width="0.0734%" height="15" fill="rgb(219,56,2)" fg:x="3811" fg:w="44"/><text x="6.6082%" y="191.50"></text></g><g><title>qecp`PerfectMatching::GrowNode (30 samples, 0.05%)</title><rect x="6.5468%" y="165" width="0.0501%" height="15" fill="rgb(233,0,4)" fg:x="3924" fg:w="30"/><text x="6.7968%" y="175.50"></text></g><g><title>qecp`PerfectMatching::GrowTree (109 samples, 0.18%)</title><rect x="6.4400%" y="181" width="0.1819%" height="15" fill="rgb(235,30,7)" fg:x="3860" fg:w="109"/><text x="6.6900%" y="191.50"></text></g><g><title>qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (15 samples, 0.03%)</title><rect x="6.5968%" y="165" width="0.0250%" height="15" fill="rgb(250,79,13)" fg:x="3954" fg:w="15"/><text x="6.8468%" y="175.50"></text></g><g><title>qecp`PerfectMatching::InitGreedy (843 samples, 1.41%)</title><rect x="6.8487%" y="165" width="1.4065%" height="15" fill="rgb(211,146,34)" fg:x="4105" fg:w="843"/><text x="7.0987%" y="175.50"></text></g><g><title>qecp`PerfectMatching::InitGlobal (986 samples, 1.65%)</title><rect x="6.6218%" y="181" width="1.6450%" height="15" fill="rgb(228,22,38)" fg:x="3969" fg:w="986"/><text x="6.8718%" y="191.50"></text></g><g><title>qecp`PerfectMatching::ShrinkInit (7 samples, 0.01%)</title><rect x="8.2552%" y="165" width="0.0117%" height="15" fill="rgb(235,168,5)" fg:x="4948" fg:w="7"/><text x="8.5052%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Shrink (99 samples, 0.17%)</title><rect x="8.2685%" y="181" width="0.1652%" height="15" fill="rgb(221,155,16)" fg:x="4956" fg:w="99"/><text x="8.5185%" y="191.50"></text></g><g><title>qecp`PerfectMatching::FindBlossomRoot (13 samples, 0.02%)</title><rect x="8.4120%" y="165" width="0.0217%" height="15" fill="rgb(215,215,53)" fg:x="5042" fg:w="13"/><text x="8.6620%" y="175.50"></text></g><g><title>qecp`PerfectMatching::Solve (1,540 samples, 2.57%)</title><rect x="5.8827%" y="197" width="2.5693%" height="15" fill="rgb(223,4,10)" fg:x="3526" fg:w="1540"/><text x="6.1327%" y="207.50">qe..</text></g><g><title>qecp`PriorityQueue&lt;int&gt;::_Remove(PriorityQueue (9 samples, 0.02%)</title><rect x="8.4371%" y="181" width="0.0150%" height="15" fill="rgb(234,103,6)" fg:x="5057" fg:w="9"/><text x="8.6871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.02%)</title><rect x="8.4904%" y="165" width="0.0150%" height="15" fill="rgb(227,97,0)" fg:x="5089" fg:w="9"/><text x="8.7404%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.06%)</title><rect x="8.4621%" y="181" width="0.0601%" height="15" fill="rgb(234,150,53)" fg:x="5072" fg:w="36"/><text x="8.7121%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="8.5121%" y="165" width="0.0100%" height="15" fill="rgb(228,201,54)" fg:x="5102" fg:w="6"/><text x="8.7621%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="8.5538%" y="165" width="0.0133%" height="15" fill="rgb(222,22,37)" fg:x="5127" fg:w="8"/><text x="8.8038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (34 samples, 0.06%)</title><rect x="8.5221%" y="181" width="0.0567%" height="15" fill="rgb(237,53,32)" fg:x="5108" fg:w="34"/><text x="8.7721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.02%)</title><rect x="8.5789%" y="181" width="0.0150%" height="15" fill="rgb(233,25,53)" fg:x="5142" fg:w="9"/><text x="8.8289%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="8.5822%" y="165" width="0.0117%" height="15" fill="rgb(210,40,34)" fg:x="5144" fg:w="7"/><text x="8.8322%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="8.5955%" y="181" width="0.0334%" height="15" fill="rgb(241,220,44)" fg:x="5152" fg:w="20"/><text x="8.8455%" y="191.50"></text></g><g><title>qecp`PerfectMatching::~PerfectMatching (111 samples, 0.19%)</title><rect x="8.4537%" y="197" width="0.1852%" height="15" fill="rgb(235,28,35)" fg:x="5067" fg:w="111"/><text x="8.7037%" y="207.50"></text></g><g><title>qecp`qecp::blossom_v::safe_minimum_weight_perfect_matching (3,239 samples, 5.40%)</title><rect x="3.2383%" y="229" width="5.4039%" height="15" fill="rgb(210,56,17)" fg:x="1941" fg:w="3239"/><text x="3.4883%" y="239.50">qecp`qe..</text></g><g><title>qecp`minimum_weight_perfect_matching (2,497 samples, 4.17%)</title><rect x="4.4763%" y="213" width="4.1660%" height="15" fill="rgb(224,130,29)" fg:x="2683" fg:w="2497"/><text x="4.7263%" y="223.50">qecp`..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="8.6823%" y="101" width="0.0400%" height="15" fill="rgb(235,212,8)" fg:x="5204" fg:w="24"/><text x="8.9323%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.06%)</title><rect x="8.6723%" y="133" width="0.0551%" height="15" fill="rgb(223,33,50)" fg:x="5198" fg:w="33"/><text x="8.9223%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.05%)</title><rect x="8.6740%" y="117" width="0.0534%" height="15" fill="rgb(219,149,13)" fg:x="5199" fg:w="32"/><text x="8.9240%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 0.06%)</title><rect x="8.6690%" y="149" width="0.0601%" height="15" fill="rgb(250,156,29)" fg:x="5196" fg:w="36"/><text x="8.9190%" y="159.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (53 samples, 0.09%)</title><rect x="8.6423%" y="229" width="0.0884%" height="15" fill="rgb(216,193,19)" fg:x="5180" fg:w="53"/><text x="8.8923%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (44 samples, 0.07%)</title><rect x="8.6573%" y="213" width="0.0734%" height="15" fill="rgb(216,135,14)" fg:x="5189" fg:w="44"/><text x="8.9073%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (42 samples, 0.07%)</title><rect x="8.6606%" y="197" width="0.0701%" height="15" fill="rgb(241,47,5)" fg:x="5191" fg:w="42"/><text x="8.9106%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (39 samples, 0.07%)</title><rect x="8.6656%" y="181" width="0.0651%" height="15" fill="rgb(233,42,35)" fg:x="5194" fg:w="39"/><text x="8.9156%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (38 samples, 0.06%)</title><rect x="8.6673%" y="165" width="0.0634%" height="15" fill="rgb(231,13,6)" fg:x="5195" fg:w="38"/><text x="8.9173%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.05%)</title><rect x="9.6583%" y="101" width="0.0467%" height="15" fill="rgb(207,181,40)" fg:x="5789" fg:w="28"/><text x="9.9083%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 0.11%)</title><rect x="9.6300%" y="133" width="0.1068%" height="15" fill="rgb(254,173,49)" fg:x="5772" fg:w="64"/><text x="9.8800%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (58 samples, 0.10%)</title><rect x="9.6400%" y="117" width="0.0968%" height="15" fill="rgb(221,1,38)" fg:x="5778" fg:w="58"/><text x="9.8900%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (19 samples, 0.03%)</title><rect x="9.7050%" y="101" width="0.0317%" height="15" fill="rgb(206,124,46)" fg:x="5817" fg:w="19"/><text x="9.9550%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (76 samples, 0.13%)</title><rect x="9.6133%" y="149" width="0.1268%" height="15" fill="rgb(249,21,11)" fg:x="5762" fg:w="76"/><text x="9.8633%" y="159.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (87 samples, 0.15%)</title><rect x="9.6033%" y="165" width="0.1451%" height="15" fill="rgb(222,201,40)" fg:x="5756" fg:w="87"/><text x="9.8533%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (97 samples, 0.16%)</title><rect x="9.5882%" y="181" width="0.1618%" height="15" fill="rgb(235,61,29)" fg:x="5747" fg:w="97"/><text x="9.8382%" y="191.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (614 samples, 1.02%)</title><rect x="8.7307%" y="229" width="1.0244%" height="15" fill="rgb(219,207,3)" fg:x="5233" fg:w="614"/><text x="8.9807%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (151 samples, 0.25%)</title><rect x="9.5032%" y="213" width="0.2519%" height="15" fill="rgb(222,56,46)" fg:x="5696" fg:w="151"/><text x="9.7532%" y="223.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (116 samples, 0.19%)</title><rect x="9.5615%" y="197" width="0.1935%" height="15" fill="rgb(239,76,54)" fg:x="5731" fg:w="116"/><text x="9.8115%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.05%)</title><rect x="15.7012%" y="149" width="0.0450%" height="15" fill="rgb(231,124,27)" fg:x="9411" fg:w="27"/><text x="15.9512%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="15.7279%" y="133" width="0.0184%" height="15" fill="rgb(249,195,6)" fg:x="9427" fg:w="11"/><text x="15.9779%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (76 samples, 0.13%)</title><rect x="15.6328%" y="181" width="0.1268%" height="15" fill="rgb(237,174,47)" fg:x="9370" fg:w="76"/><text x="15.8828%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (47 samples, 0.08%)</title><rect x="15.6812%" y="165" width="0.0784%" height="15" fill="rgb(206,201,31)" fg:x="9399" fg:w="47"/><text x="15.9312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="15.7463%" y="149" width="0.0133%" height="15" fill="rgb(231,57,52)" fg:x="9438" fg:w="8"/><text x="15.9963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="15.7596%" y="181" width="0.0133%" height="15" fill="rgb(248,177,22)" fg:x="9446" fg:w="8"/><text x="16.0096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.01%)</title><rect x="15.7913%" y="117" width="0.0100%" height="15" fill="rgb(215,211,37)" fg:x="9465" fg:w="6"/><text x="16.0413%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="15.7913%" y="133" width="0.0117%" height="15" fill="rgb(241,128,51)" fg:x="9465" fg:w="7"/><text x="16.0413%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.02%)</title><rect x="15.7830%" y="149" width="0.0234%" height="15" fill="rgb(227,165,31)" fg:x="9460" fg:w="14"/><text x="16.0330%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="15.7746%" y="165" width="0.0367%" height="15" fill="rgb(228,167,24)" fg:x="9455" fg:w="22"/><text x="16.0246%" y="175.50"></text></g><g><title>qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (147 samples, 0.25%)</title><rect x="15.5761%" y="213" width="0.2453%" height="15" fill="rgb(228,143,12)" fg:x="9336" fg:w="147"/><text x="15.8261%" y="223.50"></text></g><g><title>qecp`alloc::raw_vec::finish_grow (116 samples, 0.19%)</title><rect x="15.6278%" y="197" width="0.1935%" height="15" fill="rgb(249,149,8)" fg:x="9367" fg:w="116"/><text x="15.8778%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="15.7730%" y="181" width="0.0484%" height="15" fill="rgb(243,35,44)" fg:x="9454" fg:w="29"/><text x="16.0230%" y="191.50"></text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_edges (3,650 samples, 6.09%)</title><rect x="9.7551%" y="229" width="6.0896%" height="15" fill="rgb(246,89,9)" fg:x="5847" fg:w="3650"/><text x="10.0051%" y="239.50">qecp`qec..</text></g><g><title>qecp`qecp::complete_model_graph::CompleteModelGraph::get_node_unwrap (9 samples, 0.02%)</title><rect x="15.8297%" y="213" width="0.0150%" height="15" fill="rgb(233,213,13)" fg:x="9488" fg:w="9"/><text x="16.0797%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (20 samples, 0.03%)</title><rect x="16.0382%" y="213" width="0.0334%" height="15" fill="rgb(233,141,41)" fg:x="9613" fg:w="20"/><text x="16.2882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="16.2401%" y="165" width="0.0217%" height="15" fill="rgb(239,167,4)" fg:x="9734" fg:w="13"/><text x="16.4901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="16.2418%" y="149" width="0.0200%" height="15" fill="rgb(209,217,16)" fg:x="9735" fg:w="12"/><text x="16.4918%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="16.2418%" y="133" width="0.0200%" height="15" fill="rgb(219,88,35)" fg:x="9735" fg:w="12"/><text x="16.4918%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="16.2618%" y="165" width="0.0234%" height="15" fill="rgb(220,193,23)" fg:x="9747" fg:w="14"/><text x="16.5118%" y="175.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (40 samples, 0.07%)</title><rect x="16.2301%" y="181" width="0.0667%" height="15" fill="rgb(230,90,52)" fg:x="9728" fg:w="40"/><text x="16.4801%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (63 samples, 0.11%)</title><rect x="16.2001%" y="197" width="0.1051%" height="15" fill="rgb(252,106,19)" fg:x="9710" fg:w="63"/><text x="16.4501%" y="207.50"></text></g><g><title>qecp`qecp::decoder_mwpm::MWPMDecoder::decode_with_erasure (8,900 samples, 14.85%)</title><rect x="1.4648%" y="245" width="14.8487%" height="15" fill="rgb(206,74,20)" fg:x="878" fg:w="8900"/><text x="1.7148%" y="255.50">qecp`qecp::decoder_mwpm..</text></g><g><title>qecp`qecp::simulator::SparseCorrection::extend (281 samples, 0.47%)</title><rect x="15.8447%" y="229" width="0.4688%" height="15" fill="rgb(230,138,44)" fg:x="9497" fg:w="281"/><text x="16.0947%" y="239.50"></text></g><g><title>qecp`qecp::simulator::SparseErrorPattern::add (145 samples, 0.24%)</title><rect x="16.0716%" y="213" width="0.2419%" height="15" fill="rgb(235,182,43)" fg:x="9633" fg:w="145"/><text x="16.3216%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.04%)</title><rect x="47.4207%" y="229" width="0.0434%" height="15" fill="rgb(242,16,51)" fg:x="28423" fg:w="26"/><text x="47.6707%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="47.4323%" y="213" width="0.0317%" height="15" fill="rgb(248,9,4)" fg:x="28430" fg:w="19"/><text x="47.6823%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (17 samples, 0.03%)</title><rect x="47.4357%" y="197" width="0.0284%" height="15" fill="rgb(210,31,22)" fg:x="28432" fg:w="17"/><text x="47.6857%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (13 samples, 0.02%)</title><rect x="47.4424%" y="181" width="0.0217%" height="15" fill="rgb(239,54,39)" fg:x="28436" fg:w="13"/><text x="47.6924%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_size (8 samples, 0.01%)</title><rect x="47.4757%" y="213" width="0.0133%" height="15" fill="rgb(230,99,41)" fg:x="28456" fg:w="8"/><text x="47.7257%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.05%)</title><rect x="47.4640%" y="229" width="0.0450%" height="15" fill="rgb(253,106,12)" fg:x="28449" fg:w="27"/><text x="47.7140%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="47.4991%" y="213" width="0.0100%" height="15" fill="rgb(213,46,41)" fg:x="28470" fg:w="6"/><text x="47.7491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.04%)</title><rect x="47.5091%" y="229" width="0.0367%" height="15" fill="rgb(215,133,35)" fg:x="28476" fg:w="22"/><text x="47.7591%" y="239.50"></text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (1,252 samples, 2.09%)</title><rect x="47.5608%" y="229" width="2.0888%" height="15" fill="rgb(213,28,5)" fg:x="28507" fg:w="1252"/><text x="47.8108%" y="239.50">q..</text></g><g><title>qecp`qecp::simulator::Simulator::generate_random_errors (41,828 samples, 69.79%)</title><rect x="16.3135%" y="245" width="69.7854%" height="15" fill="rgb(215,77,49)" fg:x="9778" fg:w="41828"/><text x="16.5635%" y="255.50">qecp`qecp::simulator::Simulator::generate_random_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_errors (21,847 samples, 36.45%)</title><rect x="49.6496%" y="229" width="36.4493%" height="15" fill="rgb(248,100,22)" fg:x="29759" fg:w="21847"/><text x="49.8996%" y="239.50">qecp`qecp::simulator::Simulator::propagate_errors</text></g><g><title>qecp`qecp::simulator::Simulator::propagate_error_from (16,827 samples, 28.07%)</title><rect x="58.0250%" y="213" width="28.0740%" height="15" fill="rgb(208,67,9)" fg:x="34779" fg:w="16827"/><text x="58.2750%" y="223.50">qecp`qecp::simulator::Simulator::propagate_er..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="96.4497%" y="181" width="0.0317%" height="15" fill="rgb(219,133,21)" fg:x="57810" fg:w="19"/><text x="96.6997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.03%)</title><rect x="96.4563%" y="165" width="0.0250%" height="15" fill="rgb(246,46,29)" fg:x="57814" fg:w="15"/><text x="96.7063%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="96.4697%" y="149" width="0.0117%" height="15" fill="rgb(246,185,52)" fg:x="57822" fg:w="7"/><text x="96.7197%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="96.4447%" y="197" width="0.0467%" height="15" fill="rgb(252,136,11)" fg:x="57807" fg:w="28"/><text x="96.6947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.01%)</title><rect x="96.4814%" y="181" width="0.0100%" height="15" fill="rgb(219,138,53)" fg:x="57829" fg:w="6"/><text x="96.7314%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (49 samples, 0.08%)</title><rect x="96.4413%" y="213" width="0.0818%" height="15" fill="rgb(211,51,23)" fg:x="57805" fg:w="49"/><text x="96.6913%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (18 samples, 0.03%)</title><rect x="96.4930%" y="197" width="0.0300%" height="15" fill="rgb(247,221,28)" fg:x="57836" fg:w="18"/><text x="96.7430%" y="207.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (89 samples, 0.15%)</title><rect x="96.3863%" y="229" width="0.1485%" height="15" fill="rgb(251,222,45)" fg:x="57772" fg:w="89"/><text x="96.6363%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="96.5231%" y="213" width="0.0117%" height="15" fill="rgb(217,162,53)" fg:x="57854" fg:w="7"/><text x="96.7731%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_error_pattern (6,260 samples, 10.44%)</title><rect x="86.0990%" y="245" width="10.4441%" height="15" fill="rgb(229,93,14)" fg:x="51606" fg:w="6260"/><text x="86.3490%" y="255.50">qecp`qecp::simu..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="99.7631%" y="149" width="0.0100%" height="15" fill="rgb(209,67,49)" fg:x="59796" fg:w="6"/><text x="100.0131%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.05%)</title><rect x="99.7314%" y="181" width="0.0517%" height="15" fill="rgb(213,87,29)" fg:x="59777" fg:w="31"/><text x="99.9814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.04%)</title><rect x="99.7414%" y="165" width="0.0417%" height="15" fill="rgb(205,151,52)" fg:x="59783" fg:w="25"/><text x="99.9914%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="99.7731%" y="149" width="0.0100%" height="15" fill="rgb(253,215,39)" fg:x="59802" fg:w="6"/><text x="100.0231%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (49 samples, 0.08%)</title><rect x="99.7230%" y="197" width="0.0818%" height="15" fill="rgb(221,220,41)" fg:x="59772" fg:w="49"/><text x="99.9730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="99.7831%" y="181" width="0.0217%" height="15" fill="rgb(218,133,21)" fg:x="59808" fg:w="13"/><text x="100.0331%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (79 samples, 0.13%)</title><rect x="99.7030%" y="213" width="0.1318%" height="15" fill="rgb(221,193,43)" fg:x="59760" fg:w="79"/><text x="99.9530%" y="223.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="99.8115%" y="197" width="0.0234%" height="15" fill="rgb(240,128,52)" fg:x="59825" fg:w="14"/><text x="100.0615%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="99.8248%" y="181" width="0.0100%" height="15" fill="rgb(253,114,12)" fg:x="59833" fg:w="6"/><text x="100.0748%" y="191.50"></text></g><g><title>qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (223 samples, 0.37%)</title><rect x="99.4761%" y="229" width="0.3721%" height="15" fill="rgb(215,223,47)" fg:x="59624" fg:w="223"/><text x="99.7261%" y="239.50"></text></g><g><title>qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (8 samples, 0.01%)</title><rect x="99.8348%" y="213" width="0.0133%" height="15" fill="rgb(248,225,23)" fg:x="59839" fg:w="8"/><text x="100.0848%" y="223.50"></text></g><g><title>qecp`qecp::simulator::Simulator::generate_sparse_measurement (1,985 samples, 3.31%)</title><rect x="96.5431%" y="245" width="3.3118%" height="15" fill="rgb(250,108,0)" fg:x="57866" fg:w="1985"/><text x="96.7931%" y="255.50">qec..</text></g><g><title>qecp`qecp::simulator::Simulator::validate_correction (82 samples, 0.14%)</title><rect x="99.8582%" y="245" width="0.1368%" height="15" fill="rgb(228,208,7)" fg:x="59853" fg:w="82"/><text x="100.1082%" y="255.50"></text></g><g><title>qecp`qecp::code_builder::code_builder_validate_correction (79 samples, 0.13%)</title><rect x="99.8632%" y="229" width="0.1318%" height="15" fill="rgb(244,45,10)" fg:x="59856" fg:w="79"/><text x="100.1132%" y="239.50"></text></g><g><title>qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,798 samples, 99.77%)</title><rect x="0.2319%" y="261" width="99.7664%" height="15" fill="rgb(207,125,25)" fg:x="139" fg:w="59798"/><text x="0.4819%" y="271.50">qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (59,938 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="59938"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,861 samples, 99.87%)</title><rect x="0.1285%" y="325" width="99.8715%" height="15" fill="rgb(249,80,12)" fg:x="77" fg:w="59861"/><text x="0.3785%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,861 samples, 99.87%)</title><rect x="0.1285%" y="309" width="99.8715%" height="15" fill="rgb(221,65,9)" fg:x="77" fg:w="59861"/><text x="0.3785%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>qecp`std::sys::unix::thread::Thread::new::thread_start (59,861 samples, 99.87%)</title><rect x="0.1285%" y="293" width="99.8715%" height="15" fill="rgb(235,49,36)" fg:x="77" fg:w="59861"/><text x="0.3785%" y="303.50">qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,861 samples, 99.87%)</title><rect x="0.1285%" y="277" width="99.8715%" height="15" fill="rgb(225,32,20)" fg:x="77" fg:w="59861"/><text x="0.3785%" y="287.50">qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>