<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61411"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.0081%" y="133" width="0.0147%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="9"/><text x="0.2581%" y="143.50"></text></g><g><title>rust_qecp`alloc::fmt::format (9 samples, 0.01%)</title><rect x="0.0277%" y="133" width="0.0147%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="9"/><text x="0.2777%" y="143.50"></text></g><g><title>rust_qecp`core::fmt::write (8 samples, 0.01%)</title><rect x="0.0293%" y="117" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="8"/><text x="0.2793%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0456%" y="53" width="0.0130%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="8"/><text x="0.2956%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0456%" y="37" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="8"/><text x="0.2956%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.03%)</title><rect x="0.0440%" y="133" width="0.0261%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="16"/><text x="0.2940%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (16 samples, 0.03%)</title><rect x="0.0440%" y="117" width="0.0261%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="16"/><text x="0.2940%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0440%" y="101" width="0.0261%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="16"/><text x="0.2940%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0440%" y="85" width="0.0261%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="16"/><text x="0.2940%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (16 samples, 0.03%)</title><rect x="0.0440%" y="69" width="0.0261%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="16"/><text x="0.2940%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0586%" y="53" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="7"/><text x="0.3086%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (7 samples, 0.01%)</title><rect x="0.0700%" y="133" width="0.0114%" height="15" fill="rgb(240,193,28)" fg:x="43" fg:w="7"/><text x="0.3200%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0700%" y="117" width="0.0114%" height="15" fill="rgb(216,20,37)" fg:x="43" fg:w="7"/><text x="0.3200%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="0.0700%" y="101" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="43" fg:w="7"/><text x="0.3200%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (7 samples, 0.01%)</title><rect x="0.0700%" y="85" width="0.0114%" height="15" fill="rgb(217,207,13)" fg:x="43" fg:w="7"/><text x="0.3200%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (47 samples, 0.08%)</title><rect x="0.0814%" y="133" width="0.0765%" height="15" fill="rgb(231,73,38)" fg:x="50" fg:w="47"/><text x="0.3314%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (38 samples, 0.06%)</title><rect x="0.1580%" y="133" width="0.0619%" height="15" fill="rgb(225,20,46)" fg:x="97" fg:w="38"/><text x="0.4080%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (15 samples, 0.02%)</title><rect x="0.2215%" y="133" width="0.0244%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="15"/><text x="0.4715%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="0.8565%" y="117" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="526" fg:w="8"/><text x="1.1065%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="0.8696%" y="117" width="0.0195%" height="15" fill="rgb(226,26,5)" fg:x="534" fg:w="12"/><text x="1.1196%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (9 samples, 0.01%)</title><rect x="0.8891%" y="117" width="0.0147%" height="15" fill="rgb(249,33,26)" fg:x="546" fg:w="9"/><text x="1.1391%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (46 samples, 0.07%)</title><rect x="0.9037%" y="117" width="0.0749%" height="15" fill="rgb(235,183,28)" fg:x="555" fg:w="46"/><text x="1.1537%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="1.0503%" y="101" width="0.0130%" height="15" fill="rgb(221,5,38)" fg:x="645" fg:w="8"/><text x="1.3003%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (78 samples, 0.13%)</title><rect x="0.9787%" y="117" width="0.1270%" height="15" fill="rgb(247,18,42)" fg:x="601" fg:w="78"/><text x="1.2287%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="1.0633%" y="101" width="0.0423%" height="15" fill="rgb(241,131,45)" fg:x="653" fg:w="26"/><text x="1.3133%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.03%)</title><rect x="1.0747%" y="85" width="0.0309%" height="15" fill="rgb(249,31,29)" fg:x="660" fg:w="19"/><text x="1.3247%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="1.3629%" y="101" width="0.0261%" height="15" fill="rgb(225,111,53)" fg:x="837" fg:w="16"/><text x="1.6129%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (40 samples, 0.07%)</title><rect x="1.3890%" y="101" width="0.0651%" height="15" fill="rgb(238,160,17)" fg:x="853" fg:w="40"/><text x="1.6390%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (754 samples, 1.23%)</title><rect x="0.2459%" y="133" width="1.2278%" height="15" fill="rgb(214,148,48)" fg:x="151" fg:w="754"/><text x="0.4959%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (226 samples, 0.37%)</title><rect x="1.1057%" y="117" width="0.3680%" height="15" fill="rgb(232,36,49)" fg:x="679" fg:w="226"/><text x="1.3557%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="1.4541%" y="101" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="893" fg:w="12"/><text x="1.7041%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="1.4834%" y="117" width="0.0293%" height="15" fill="rgb(229,88,8)" fg:x="911" fg:w="18"/><text x="1.7334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="1.6007%" y="69" width="0.0147%" height="15" fill="rgb(213,181,19)" fg:x="983" fg:w="9"/><text x="1.8507%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="1.5991%" y="101" width="0.0179%" height="15" fill="rgb(254,191,54)" fg:x="982" fg:w="11"/><text x="1.8491%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="1.6007%" y="85" width="0.0163%" height="15" fill="rgb(241,83,37)" fg:x="983" fg:w="10"/><text x="1.8507%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (131 samples, 0.21%)</title><rect x="1.5209%" y="117" width="0.2133%" height="15" fill="rgb(233,36,39)" fg:x="934" fg:w="131"/><text x="1.7709%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (63 samples, 0.10%)</title><rect x="1.6316%" y="101" width="0.1026%" height="15" fill="rgb(226,3,54)" fg:x="1002" fg:w="63"/><text x="1.8816%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (161 samples, 0.26%)</title><rect x="1.4737%" y="133" width="0.2622%" height="15" fill="rgb(245,192,40)" fg:x="905" fg:w="161"/><text x="1.7237%" y="143.50"></text></g><g><title>dyld`start (1,077 samples, 1.75%)</title><rect x="0.0000%" y="373" width="1.7538%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="1077"/><text x="0.2500%" y="383.50"></text></g><g><title>rust_qecp`main (1,074 samples, 1.75%)</title><rect x="0.0049%" y="357" width="1.7489%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="367.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,074 samples, 1.75%)</title><rect x="0.0049%" y="341" width="1.7489%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="351.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,074 samples, 1.75%)</title><rect x="0.0049%" y="325" width="1.7489%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="335.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,074 samples, 1.75%)</title><rect x="0.0049%" y="309" width="1.7489%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::main (1,074 samples, 1.75%)</title><rect x="0.0049%" y="293" width="1.7489%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="303.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (1,074 samples, 1.75%)</title><rect x="0.0049%" y="277" width="1.7489%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="287.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (1,074 samples, 1.75%)</title><rect x="0.0049%" y="261" width="1.7489%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="271.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,074 samples, 1.75%)</title><rect x="0.0049%" y="245" width="1.7489%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="255.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,074 samples, 1.75%)</title><rect x="0.0049%" y="229" width="1.7489%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,074 samples, 1.75%)</title><rect x="0.0049%" y="213" width="1.7489%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,074 samples, 1.75%)</title><rect x="0.0049%" y="197" width="1.7489%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,074 samples, 1.75%)</title><rect x="0.0049%" y="181" width="1.7489%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1074"/><text x="0.2549%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,073 samples, 1.75%)</title><rect x="0.0065%" y="165" width="1.7472%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1073"/><text x="0.2565%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,073 samples, 1.75%)</title><rect x="0.0065%" y="149" width="1.7472%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1073"/><text x="0.2565%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7424%" y="133" width="0.0114%" height="15" fill="rgb(231,138,38)" fg:x="1070" fg:w="7"/><text x="1.9924%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (7 samples, 0.01%)</title><rect x="1.7424%" y="117" width="0.0114%" height="15" fill="rgb(231,145,46)" fg:x="1070" fg:w="7"/><text x="1.9924%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="1.7766%" y="293" width="0.0147%" height="15" fill="rgb(251,118,11)" fg:x="1091" fg:w="9"/><text x="2.0266%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="1.7994%" y="277" width="0.0130%" height="15" fill="rgb(217,147,25)" fg:x="1105" fg:w="8"/><text x="2.0494%" y="287.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (16 samples, 0.03%)</title><rect x="1.7994%" y="293" width="0.0261%" height="15" fill="rgb(247,81,37)" fg:x="1105" fg:w="16"/><text x="2.0494%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (18 samples, 0.03%)</title><rect x="1.8368%" y="277" width="0.0293%" height="15" fill="rgb(209,12,38)" fg:x="1128" fg:w="18"/><text x="2.0868%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="1.8759%" y="277" width="0.0179%" height="15" fill="rgb(227,1,9)" fg:x="1152" fg:w="11"/><text x="2.1259%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="1.9019%" y="277" width="0.0326%" height="15" fill="rgb(248,47,43)" fg:x="1168" fg:w="20"/><text x="2.1519%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="1.9443%" y="277" width="0.0277%" height="15" fill="rgb(221,10,30)" fg:x="1194" fg:w="17"/><text x="2.1943%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (46 samples, 0.07%)</title><rect x="1.9720%" y="277" width="0.0749%" height="15" fill="rgb(210,229,1)" fg:x="1211" fg:w="46"/><text x="2.2220%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (18 samples, 0.03%)</title><rect x="2.0176%" y="261" width="0.0293%" height="15" fill="rgb(222,148,37)" fg:x="1239" fg:w="18"/><text x="2.2676%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (17 samples, 0.03%)</title><rect x="2.0192%" y="245" width="0.0277%" height="15" fill="rgb(234,67,33)" fg:x="1240" fg:w="17"/><text x="2.2692%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="2.0192%" y="229" width="0.0277%" height="15" fill="rgb(247,98,35)" fg:x="1240" fg:w="17"/><text x="2.2692%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="2.0273%" y="213" width="0.0195%" height="15" fill="rgb(247,138,52)" fg:x="1245" fg:w="12"/><text x="2.2773%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.04%)</title><rect x="19.8499%" y="261" width="0.0375%" height="15" fill="rgb(213,79,30)" fg:x="12190" fg:w="23"/><text x="20.0999%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="19.9069%" y="229" width="0.0293%" height="15" fill="rgb(246,177,23)" fg:x="12225" fg:w="18"/><text x="20.1569%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="19.8873%" y="261" width="0.0521%" height="15" fill="rgb(230,62,27)" fg:x="12213" fg:w="32"/><text x="20.1373%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="19.9020%" y="245" width="0.0375%" height="15" fill="rgb(216,154,8)" fg:x="12222" fg:w="23"/><text x="20.1520%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.09%)</title><rect x="19.9476%" y="261" width="0.0863%" height="15" fill="rgb(244,35,45)" fg:x="12250" fg:w="53"/><text x="20.1976%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (24 samples, 0.04%)</title><rect x="19.9948%" y="245" width="0.0391%" height="15" fill="rgb(251,115,12)" fg:x="12279" fg:w="24"/><text x="20.2448%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="20.0453%" y="261" width="0.0212%" height="15" fill="rgb(240,54,50)" fg:x="12310" fg:w="13"/><text x="20.2953%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="20.0664%" y="261" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="12323" fg:w="8"/><text x="20.3164%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="20.0795%" y="261" width="0.0147%" height="15" fill="rgb(207,117,47)" fg:x="12331" fg:w="9"/><text x="20.3295%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="20.0957%" y="261" width="0.0293%" height="15" fill="rgb(249,43,39)" fg:x="12341" fg:w="18"/><text x="20.3457%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (16 samples, 0.03%)</title><rect x="20.1365%" y="261" width="0.0261%" height="15" fill="rgb(209,38,44)" fg:x="12366" fg:w="16"/><text x="20.3865%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="20.1951%" y="197" width="0.0261%" height="15" fill="rgb(236,212,23)" fg:x="12402" fg:w="16"/><text x="20.4451%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="20.2097%" y="181" width="0.0114%" height="15" fill="rgb(242,79,21)" fg:x="12411" fg:w="7"/><text x="20.4597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="20.2097%" y="165" width="0.0114%" height="15" fill="rgb(211,96,35)" fg:x="12411" fg:w="7"/><text x="20.4597%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.04%)</title><rect x="20.1869%" y="213" width="0.0391%" height="15" fill="rgb(253,215,40)" fg:x="12397" fg:w="24"/><text x="20.4369%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (42 samples, 0.07%)</title><rect x="20.1658%" y="261" width="0.0684%" height="15" fill="rgb(211,81,21)" fg:x="12384" fg:w="42"/><text x="20.4158%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (36 samples, 0.06%)</title><rect x="20.1755%" y="245" width="0.0586%" height="15" fill="rgb(208,190,38)" fg:x="12390" fg:w="36"/><text x="20.4255%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="20.1853%" y="229" width="0.0489%" height="15" fill="rgb(235,213,38)" fg:x="12396" fg:w="30"/><text x="20.4353%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.02%)</title><rect x="20.3156%" y="197" width="0.0244%" height="15" fill="rgb(237,122,38)" fg:x="12476" fg:w="15"/><text x="20.5656%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="20.3726%" y="181" width="0.0147%" height="15" fill="rgb(244,218,35)" fg:x="12511" fg:w="9"/><text x="20.6226%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="20.3758%" y="165" width="0.0114%" height="15" fill="rgb(240,68,47)" fg:x="12513" fg:w="7"/><text x="20.6258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (15 samples, 0.02%)</title><rect x="20.4035%" y="181" width="0.0244%" height="15" fill="rgb(210,16,53)" fg:x="12530" fg:w="15"/><text x="20.6535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="20.4296%" y="181" width="0.0228%" height="15" fill="rgb(235,124,12)" fg:x="12546" fg:w="14"/><text x="20.6796%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="20.4361%" y="165" width="0.0163%" height="15" fill="rgb(224,169,11)" fg:x="12550" fg:w="10"/><text x="20.6861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="20.4377%" y="149" width="0.0147%" height="15" fill="rgb(250,166,2)" fg:x="12551" fg:w="9"/><text x="20.6877%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (73 samples, 0.12%)</title><rect x="20.3514%" y="197" width="0.1189%" height="15" fill="rgb(242,216,29)" fg:x="12498" fg:w="73"/><text x="20.6014%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.01%)</title><rect x="20.4572%" y="181" width="0.0130%" height="15" fill="rgb(230,116,27)" fg:x="12563" fg:w="8"/><text x="20.7072%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (166 samples, 0.27%)</title><rect x="20.3042%" y="213" width="0.2703%" height="15" fill="rgb(228,99,48)" fg:x="12469" fg:w="166"/><text x="20.5542%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.10%)</title><rect x="20.4719%" y="197" width="0.1026%" height="15" fill="rgb(253,11,6)" fg:x="12572" fg:w="63"/><text x="20.7219%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (204 samples, 0.33%)</title><rect x="20.2863%" y="229" width="0.3322%" height="15" fill="rgb(247,143,39)" fg:x="12458" fg:w="204"/><text x="20.5363%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="20.5843%" y="213" width="0.0342%" height="15" fill="rgb(236,97,10)" fg:x="12641" fg:w="21"/><text x="20.8343%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.03%)</title><rect x="20.5859%" y="197" width="0.0326%" height="15" fill="rgb(233,208,19)" fg:x="12642" fg:w="20"/><text x="20.8359%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (238 samples, 0.39%)</title><rect x="20.2342%" y="261" width="0.3876%" height="15" fill="rgb(216,164,2)" fg:x="12426" fg:w="238"/><text x="20.4842%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (223 samples, 0.36%)</title><rect x="20.2586%" y="245" width="0.3631%" height="15" fill="rgb(220,129,5)" fg:x="12441" fg:w="223"/><text x="20.5086%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="22.0026%" y="245" width="0.0228%" height="15" fill="rgb(242,17,10)" fg:x="13512" fg:w="14"/><text x="22.2526%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="22.0075%" y="229" width="0.0179%" height="15" fill="rgb(242,107,0)" fg:x="13515" fg:w="11"/><text x="22.2575%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="22.0368%" y="229" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="13533" fg:w="12"/><text x="22.2868%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.03%)</title><rect x="22.0303%" y="245" width="0.0293%" height="15" fill="rgb(233,223,10)" fg:x="13529" fg:w="18"/><text x="22.2803%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="22.0596%" y="245" width="0.0147%" height="15" fill="rgb(215,21,27)" fg:x="13547" fg:w="9"/><text x="22.3096%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (348 samples, 0.57%)</title><rect x="22.0758%" y="245" width="0.5667%" height="15" fill="rgb(232,23,21)" fg:x="13557" fg:w="348"/><text x="22.3258%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (71 samples, 0.12%)</title><rect x="22.8070%" y="229" width="0.1156%" height="15" fill="rgb(244,5,23)" fg:x="14006" fg:w="71"/><text x="23.0570%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.04%)</title><rect x="22.9275%" y="229" width="0.0358%" height="15" fill="rgb(226,81,46)" fg:x="14080" fg:w="22"/><text x="23.1775%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (735 samples, 1.20%)</title><rect x="22.9633%" y="229" width="1.1969%" height="15" fill="rgb(247,70,30)" fg:x="14102" fg:w="735"/><text x="23.2133%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (18 samples, 0.03%)</title><rect x="24.1618%" y="229" width="0.0293%" height="15" fill="rgb(212,68,19)" fg:x="14838" fg:w="18"/><text x="24.4118%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (12 samples, 0.02%)</title><rect x="24.1911%" y="229" width="0.0195%" height="15" fill="rgb(240,187,13)" fg:x="14856" fg:w="12"/><text x="24.4411%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (12 samples, 0.02%)</title><rect x="24.2106%" y="229" width="0.0195%" height="15" fill="rgb(223,113,26)" fg:x="14868" fg:w="12"/><text x="24.4606%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="24.2155%" y="213" width="0.0147%" height="15" fill="rgb(206,192,2)" fg:x="14871" fg:w="9"/><text x="24.4655%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (92 samples, 0.15%)</title><rect x="24.2302%" y="229" width="0.1498%" height="15" fill="rgb(241,108,4)" fg:x="14880" fg:w="92"/><text x="24.4802%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (338 samples, 0.55%)</title><rect x="24.4761%" y="213" width="0.5504%" height="15" fill="rgb(247,173,49)" fg:x="15031" fg:w="338"/><text x="24.7261%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (69 samples, 0.11%)</title><rect x="25.0281%" y="213" width="0.1124%" height="15" fill="rgb(224,114,35)" fg:x="15370" fg:w="69"/><text x="25.2781%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (69 samples, 0.11%)</title><rect x="25.0281%" y="197" width="0.1124%" height="15" fill="rgb(245,159,27)" fg:x="15370" fg:w="69"/><text x="25.2781%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (37 samples, 0.06%)</title><rect x="25.1421%" y="213" width="0.0602%" height="15" fill="rgb(245,172,44)" fg:x="15440" fg:w="37"/><text x="25.3921%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (177 samples, 0.29%)</title><rect x="25.5313%" y="197" width="0.2882%" height="15" fill="rgb(236,23,11)" fg:x="15679" fg:w="177"/><text x="25.7813%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (14 samples, 0.02%)</title><rect x="25.7967%" y="181" width="0.0228%" height="15" fill="rgb(205,117,38)" fg:x="15842" fg:w="14"/><text x="26.0467%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (14 samples, 0.02%)</title><rect x="25.7967%" y="165" width="0.0228%" height="15" fill="rgb(237,72,25)" fg:x="15842" fg:w="14"/><text x="26.0467%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (405 samples, 0.66%)</title><rect x="25.2040%" y="213" width="0.6595%" height="15" fill="rgb(244,70,9)" fg:x="15478" fg:w="405"/><text x="25.4540%" y="223.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (27 samples, 0.04%)</title><rect x="25.8195%" y="197" width="0.0440%" height="15" fill="rgb(217,125,39)" fg:x="15856" fg:w="27"/><text x="26.0695%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,040 samples, 3.32%)</title><rect x="26.1224%" y="197" width="3.3219%" height="15" fill="rgb(235,36,10)" fg:x="16042" fg:w="2040"/><text x="26.3724%" y="207.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,203 samples, 3.59%)</title><rect x="25.8634%" y="213" width="3.5873%" height="15" fill="rgb(251,123,47)" fg:x="15883" fg:w="2203"/><text x="26.1134%" y="223.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::Shrink (440 samples, 0.72%)</title><rect x="29.4507%" y="213" width="0.7165%" height="15" fill="rgb(221,13,13)" fg:x="18086" fg:w="440"/><text x="29.7007%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (3,591 samples, 5.85%)</title><rect x="24.3833%" y="229" width="5.8475%" height="15" fill="rgb(238,131,9)" fg:x="14974" fg:w="3591"/><text x="24.6333%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (39 samples, 0.06%)</title><rect x="30.1672%" y="213" width="0.0635%" height="15" fill="rgb(211,50,8)" fg:x="18526" fg:w="39"/><text x="30.4172%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (5,923 samples, 9.64%)</title><rect x="20.6315%" y="261" width="9.6449%" height="15" fill="rgb(245,182,24)" fg:x="12670" fg:w="5923"/><text x="20.8815%" y="271.50">rust_qecp`rust..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (4,685 samples, 7.63%)</title><rect x="22.6474%" y="245" width="7.6289%" height="15" fill="rgb(242,14,37)" fg:x="13908" fg:w="4685"/><text x="22.8974%" y="255.50">rust_qecp`..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (22 samples, 0.04%)</title><rect x="30.2405%" y="229" width="0.0358%" height="15" fill="rgb(246,228,12)" fg:x="18571" fg:w="22"/><text x="30.4905%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="31.3348%" y="213" width="0.0293%" height="15" fill="rgb(213,55,15)" fg:x="19243" fg:w="18"/><text x="31.5848%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="31.3445%" y="197" width="0.0195%" height="15" fill="rgb(209,9,3)" fg:x="19249" fg:w="12"/><text x="31.5945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="31.3185%" y="245" width="0.0505%" height="15" fill="rgb(230,59,30)" fg:x="19233" fg:w="31"/><text x="31.5685%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="31.3283%" y="229" width="0.0407%" height="15" fill="rgb(209,121,21)" fg:x="19239" fg:w="25"/><text x="31.5783%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (17,996 samples, 29.30%)</title><rect x="2.0745%" y="277" width="29.3042%" height="15" fill="rgb(220,109,13)" fg:x="1274" fg:w="17996"/><text x="2.3245%" y="287.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::de..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (677 samples, 1.10%)</title><rect x="30.2763%" y="261" width="1.1024%" height="15" fill="rgb(232,18,1)" fg:x="18593" fg:w="677"/><text x="30.5263%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (18,359 samples, 29.90%)</title><rect x="1.8335%" y="293" width="29.8953%" height="15" fill="rgb(215,41,42)" fg:x="1126" fg:w="18359"/><text x="2.0835%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::dec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (215 samples, 0.35%)</title><rect x="31.3787%" y="277" width="0.3501%" height="15" fill="rgb(224,123,36)" fg:x="19270" fg:w="215"/><text x="31.6287%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (4,669 samples, 7.60%)</title><rect x="31.7288%" y="293" width="7.6029%" height="15" fill="rgb(240,125,3)" fg:x="19485" fg:w="4669"/><text x="31.9788%" y="303.50">rust_qecp`..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (15 samples, 0.02%)</title><rect x="40.1915%" y="277" width="0.0244%" height="15" fill="rgb(205,98,50)" fg:x="24682" fg:w="15"/><text x="40.4415%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (15 samples, 0.02%)</title><rect x="40.1915%" y="261" width="0.0244%" height="15" fill="rgb(205,185,37)" fg:x="24682" fg:w="15"/><text x="40.4415%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="40.1931%" y="245" width="0.0228%" height="15" fill="rgb(238,207,15)" fg:x="24683" fg:w="14"/><text x="40.4431%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="40.1948%" y="229" width="0.0212%" height="15" fill="rgb(213,199,42)" fg:x="24684" fg:w="13"/><text x="40.4448%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (994 samples, 1.62%)</title><rect x="39.3317%" y="293" width="1.6186%" height="15" fill="rgb(235,201,11)" fg:x="24154" fg:w="994"/><text x="39.5817%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (451 samples, 0.73%)</title><rect x="40.2159%" y="277" width="0.7344%" height="15" fill="rgb(207,46,11)" fg:x="24697" fg:w="451"/><text x="40.4659%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (18,314 samples, 29.82%)</title><rect x="40.9503%" y="293" width="29.8220%" height="15" fill="rgb(241,35,35)" fg:x="25148" fg:w="18314"/><text x="41.2003%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::gen..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (667 samples, 1.09%)</title><rect x="70.7837%" y="277" width="1.0861%" height="15" fill="rgb(243,32,47)" fg:x="43469" fg:w="667"/><text x="71.0337%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,410 samples, 2.30%)</title><rect x="70.7723%" y="293" width="2.2960%" height="15" fill="rgb(247,202,23)" fg:x="43462" fg:w="1410"/><text x="71.0223%" y="303.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (736 samples, 1.20%)</title><rect x="71.8699%" y="277" width="1.1985%" height="15" fill="rgb(219,102,11)" fg:x="44136" fg:w="736"/><text x="72.1199%" y="287.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (14 samples, 0.02%)</title><rect x="73.0455%" y="261" width="0.0228%" height="15" fill="rgb(243,110,44)" fg:x="44858" fg:w="14"/><text x="73.2955%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (11 samples, 0.02%)</title><rect x="73.0504%" y="245" width="0.0179%" height="15" fill="rgb(222,74,54)" fg:x="44861" fg:w="11"/><text x="73.3004%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="73.0521%" y="229" width="0.0163%" height="15" fill="rgb(216,99,12)" fg:x="44862" fg:w="10"/><text x="73.3021%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (16,525 samples, 26.91%)</title><rect x="73.0716%" y="293" width="26.9089%" height="15" fill="rgb(226,22,26)" fg:x="44874" fg:w="16525"/><text x="73.3216%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (12,038 samples, 19.60%)</title><rect x="80.3781%" y="277" width="19.6024%" height="15" fill="rgb(217,163,10)" fg:x="49361" fg:w="12038"/><text x="80.6281%" y="287.50">rust_qecp`rust_qecp::ftqec::Pla..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,330 samples, 98.24%)</title><rect x="1.7586%" y="309" width="98.2397%" height="15" fill="rgb(213,25,53)" fg:x="1080" fg:w="60330"/><text x="2.0086%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (11 samples, 0.02%)</title><rect x="99.9805%" y="293" width="0.0179%" height="15" fill="rgb(252,105,26)" fg:x="61399" fg:w="11"/><text x="100.2305%" y="303.50"></text></g><g><title>all (61,411 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="61411"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,333 samples, 98.24%)</title><rect x="1.7554%" y="373" width="98.2446%" height="15" fill="rgb(229,68,48)" fg:x="1078" fg:w="60333"/><text x="2.0054%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,333 samples, 98.24%)</title><rect x="1.7554%" y="357" width="98.2446%" height="15" fill="rgb(252,8,32)" fg:x="1078" fg:w="60333"/><text x="2.0054%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,333 samples, 98.24%)</title><rect x="1.7554%" y="341" width="98.2446%" height="15" fill="rgb(223,20,43)" fg:x="1078" fg:w="60333"/><text x="2.0054%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,333 samples, 98.24%)</title><rect x="1.7554%" y="325" width="98.2446%" height="15" fill="rgb(229,81,49)" fg:x="1078" fg:w="60333"/><text x="2.0054%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>