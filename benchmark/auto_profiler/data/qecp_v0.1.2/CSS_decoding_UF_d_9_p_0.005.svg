<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61062"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0098%" y="133" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="11"/><text x="0.2598%" y="143.50"></text></g><g><title>rust_qecp`alloc::fmt::format (12 samples, 0.02%)</title><rect x="0.0344%" y="133" width="0.0197%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="12"/><text x="0.2844%" y="143.50"></text></g><g><title>rust_qecp`core::fmt::write (10 samples, 0.02%)</title><rect x="0.0377%" y="117" width="0.0164%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="10"/><text x="0.2877%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0573%" y="53" width="0.0131%" height="15" fill="rgb(248,212,6)" fg:x="35" fg:w="8"/><text x="0.3073%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0573%" y="37" width="0.0131%" height="15" fill="rgb(208,68,35)" fg:x="35" fg:w="8"/><text x="0.3073%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (17 samples, 0.03%)</title><rect x="0.0557%" y="133" width="0.0278%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="17"/><text x="0.3057%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (17 samples, 0.03%)</title><rect x="0.0557%" y="117" width="0.0278%" height="15" fill="rgb(207,160,47)" fg:x="34" fg:w="17"/><text x="0.3057%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="0.0557%" y="101" width="0.0278%" height="15" fill="rgb(228,23,34)" fg:x="34" fg:w="17"/><text x="0.3057%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.03%)</title><rect x="0.0557%" y="85" width="0.0278%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="17"/><text x="0.3057%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (16 samples, 0.03%)</title><rect x="0.0573%" y="69" width="0.0262%" height="15" fill="rgb(220,122,19)" fg:x="35" fg:w="16"/><text x="0.3073%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0704%" y="53" width="0.0131%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="8"/><text x="0.3204%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="0.0852%" y="69" width="0.0147%" height="15" fill="rgb(240,193,28)" fg:x="52" fg:w="9"/><text x="0.3352%" y="79.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (12 samples, 0.02%)</title><rect x="0.0835%" y="133" width="0.0197%" height="15" fill="rgb(216,20,37)" fg:x="51" fg:w="12"/><text x="0.3335%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="0.0835%" y="117" width="0.0197%" height="15" fill="rgb(206,188,39)" fg:x="51" fg:w="12"/><text x="0.3335%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="0.0835%" y="101" width="0.0197%" height="15" fill="rgb(217,207,13)" fg:x="51" fg:w="12"/><text x="0.3335%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (12 samples, 0.02%)</title><rect x="0.0835%" y="85" width="0.0197%" height="15" fill="rgb(231,73,38)" fg:x="51" fg:w="12"/><text x="0.3335%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (44 samples, 0.07%)</title><rect x="0.1064%" y="133" width="0.0721%" height="15" fill="rgb(225,20,46)" fg:x="65" fg:w="44"/><text x="0.3564%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (39 samples, 0.06%)</title><rect x="0.1785%" y="133" width="0.0639%" height="15" fill="rgb(210,31,41)" fg:x="109" fg:w="39"/><text x="0.4285%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (13 samples, 0.02%)</title><rect x="0.2424%" y="133" width="0.0213%" height="15" fill="rgb(221,200,47)" fg:x="148" fg:w="13"/><text x="0.4924%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.03%)</title><rect x="0.8860%" y="117" width="0.0262%" height="15" fill="rgb(226,26,5)" fg:x="541" fg:w="16"/><text x="1.1360%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (46 samples, 0.08%)</title><rect x="0.9286%" y="117" width="0.0753%" height="15" fill="rgb(249,33,26)" fg:x="567" fg:w="46"/><text x="1.1786%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.02%)</title><rect x="1.0694%" y="101" width="0.0164%" height="15" fill="rgb(235,183,28)" fg:x="653" fg:w="10"/><text x="1.3194%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (58 samples, 0.09%)</title><rect x="1.0055%" y="117" width="0.0950%" height="15" fill="rgb(221,5,38)" fg:x="614" fg:w="58"/><text x="1.2555%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="1.0858%" y="101" width="0.0147%" height="15" fill="rgb(247,18,42)" fg:x="663" fg:w="9"/><text x="1.3358%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="1.0891%" y="85" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="665" fg:w="7"/><text x="1.3391%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (18 samples, 0.03%)</title><rect x="1.3937%" y="101" width="0.0295%" height="15" fill="rgb(249,31,29)" fg:x="851" fg:w="18"/><text x="1.6437%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (47 samples, 0.08%)</title><rect x="1.4248%" y="101" width="0.0770%" height="15" fill="rgb(225,111,53)" fg:x="870" fg:w="47"/><text x="1.6748%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (767 samples, 1.26%)</title><rect x="0.2653%" y="133" width="1.2561%" height="15" fill="rgb(238,160,17)" fg:x="162" fg:w="767"/><text x="0.5153%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (252 samples, 0.41%)</title><rect x="1.1087%" y="117" width="0.4127%" height="15" fill="rgb(214,148,48)" fg:x="677" fg:w="252"/><text x="1.3587%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="1.5018%" y="101" width="0.0197%" height="15" fill="rgb(232,36,49)" fg:x="917" fg:w="12"/><text x="1.7518%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="1.5099%" y="85" width="0.0115%" height="15" fill="rgb(209,103,24)" fg:x="922" fg:w="7"/><text x="1.7599%" y="95.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.04%)</title><rect x="1.5378%" y="117" width="0.0360%" height="15" fill="rgb(229,88,8)" fg:x="939" fg:w="22"/><text x="1.7878%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="1.6688%" y="101" width="0.0131%" height="15" fill="rgb(213,181,19)" fg:x="1019" fg:w="8"/><text x="1.9188%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="1.6704%" y="85" width="0.0115%" height="15" fill="rgb(254,191,54)" fg:x="1020" fg:w="7"/><text x="1.9204%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (162 samples, 0.27%)</title><rect x="1.5214%" y="133" width="0.2653%" height="15" fill="rgb(241,83,37)" fg:x="929" fg:w="162"/><text x="1.7714%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (125 samples, 0.20%)</title><rect x="1.5820%" y="117" width="0.2047%" height="15" fill="rgb(233,36,39)" fg:x="966" fg:w="125"/><text x="1.8320%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (56 samples, 0.09%)</title><rect x="1.6950%" y="101" width="0.0917%" height="15" fill="rgb(226,3,54)" fg:x="1035" fg:w="56"/><text x="1.9450%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7916%" y="133" width="0.0115%" height="15" fill="rgb(245,192,40)" fg:x="1094" fg:w="7"/><text x="2.0416%" y="143.50"></text></g><g><title>dyld`start (1,103 samples, 1.81%)</title><rect x="0.0000%" y="373" width="1.8064%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="1103"/><text x="0.2500%" y="383.50">d..</text></g><g><title>rust_qecp`main (1,100 samples, 1.80%)</title><rect x="0.0049%" y="357" width="1.8014%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="367.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,100 samples, 1.80%)</title><rect x="0.0049%" y="341" width="1.8014%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,100 samples, 1.80%)</title><rect x="0.0049%" y="325" width="1.8014%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="335.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,100 samples, 1.80%)</title><rect x="0.0049%" y="309" width="1.8014%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,100 samples, 1.80%)</title><rect x="0.0049%" y="293" width="1.8014%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="303.50">r..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (1,100 samples, 1.80%)</title><rect x="0.0049%" y="277" width="1.8014%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (1,100 samples, 1.80%)</title><rect x="0.0049%" y="261" width="1.8014%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,100 samples, 1.80%)</title><rect x="0.0049%" y="245" width="1.8014%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,100 samples, 1.80%)</title><rect x="0.0049%" y="229" width="1.8014%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,100 samples, 1.80%)</title><rect x="0.0049%" y="213" width="1.8014%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,100 samples, 1.80%)</title><rect x="0.0049%" y="197" width="1.8014%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,100 samples, 1.80%)</title><rect x="0.0049%" y="181" width="1.8014%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,100 samples, 1.80%)</title><rect x="0.0049%" y="165" width="1.8014%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1100"/><text x="0.2549%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,099 samples, 1.80%)</title><rect x="0.0066%" y="149" width="1.7998%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1099"/><text x="0.2566%" y="159.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="1.8342%" y="293" width="0.0180%" height="15" fill="rgb(231,138,38)" fg:x="1120" fg:w="11"/><text x="2.0842%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="1.9341%" y="245" width="0.0229%" height="15" fill="rgb(231,145,46)" fg:x="1181" fg:w="14"/><text x="2.1841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="1.9374%" y="229" width="0.0197%" height="15" fill="rgb(251,118,11)" fg:x="1183" fg:w="12"/><text x="2.1874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="1.9210%" y="277" width="0.0377%" height="15" fill="rgb(217,147,25)" fg:x="1173" fg:w="23"/><text x="2.1710%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="1.9325%" y="261" width="0.0262%" height="15" fill="rgb(247,81,37)" fg:x="1180" fg:w="16"/><text x="2.1825%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="1.9603%" y="277" width="0.0409%" height="15" fill="rgb(209,12,38)" fg:x="1197" fg:w="25"/><text x="2.2103%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="1.9865%" y="261" width="0.0147%" height="15" fill="rgb(227,1,9)" fg:x="1213" fg:w="9"/><text x="2.2365%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="2.0078%" y="277" width="0.0229%" height="15" fill="rgb(248,47,43)" fg:x="1226" fg:w="14"/><text x="2.2578%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (88 samples, 0.14%)</title><rect x="2.0373%" y="277" width="0.1441%" height="15" fill="rgb(221,10,30)" fg:x="1244" fg:w="88"/><text x="2.2873%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (421 samples, 0.69%)</title><rect x="2.1814%" y="277" width="0.6895%" height="15" fill="rgb(210,229,1)" fg:x="1332" fg:w="421"/><text x="2.4314%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (21 samples, 0.03%)</title><rect x="2.8709%" y="277" width="0.0344%" height="15" fill="rgb(222,148,37)" fg:x="1753" fg:w="21"/><text x="3.1209%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="2.9233%" y="229" width="0.0115%" height="15" fill="rgb(234,67,33)" fg:x="1785" fg:w="7"/><text x="3.1733%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="2.9183%" y="277" width="0.0229%" height="15" fill="rgb(247,98,35)" fg:x="1782" fg:w="14"/><text x="3.1683%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="2.9216%" y="261" width="0.0197%" height="15" fill="rgb(247,138,52)" fg:x="1784" fg:w="12"/><text x="3.1716%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="2.9233%" y="245" width="0.0180%" height="15" fill="rgb(213,79,30)" fg:x="1785" fg:w="11"/><text x="3.1733%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (488 samples, 0.80%)</title><rect x="2.9495%" y="277" width="0.7992%" height="15" fill="rgb(246,177,23)" fg:x="1801" fg:w="488"/><text x="3.1995%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (55 samples, 0.09%)</title><rect x="3.7486%" y="277" width="0.0901%" height="15" fill="rgb(230,62,27)" fg:x="2289" fg:w="55"/><text x="3.9986%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (38 samples, 0.06%)</title><rect x="3.8387%" y="277" width="0.0622%" height="15" fill="rgb(216,154,8)" fg:x="2344" fg:w="38"/><text x="4.0887%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.14%)</title><rect x="5.0670%" y="261" width="0.1359%" height="15" fill="rgb(244,35,45)" fg:x="3094" fg:w="83"/><text x="5.3170%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (78 samples, 0.13%)</title><rect x="5.0752%" y="245" width="0.1277%" height="15" fill="rgb(251,115,12)" fg:x="3099" fg:w="78"/><text x="5.3252%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (76 samples, 0.12%)</title><rect x="5.0784%" y="229" width="0.1245%" height="15" fill="rgb(240,54,50)" fg:x="3101" fg:w="76"/><text x="5.3284%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (67 samples, 0.11%)</title><rect x="5.0932%" y="213" width="0.1097%" height="15" fill="rgb(233,84,52)" fg:x="3110" fg:w="67"/><text x="5.3432%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="5.2029%" y="261" width="0.0131%" height="15" fill="rgb(207,117,47)" fg:x="3177" fg:w="8"/><text x="5.4529%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="5.2160%" y="261" width="0.0131%" height="15" fill="rgb(249,43,39)" fg:x="3185" fg:w="8"/><text x="5.4660%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="5.2766%" y="181" width="0.0197%" height="15" fill="rgb(209,38,44)" fg:x="3222" fg:w="12"/><text x="5.5266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.02%)</title><rect x="5.2766%" y="197" width="0.0246%" height="15" fill="rgb(236,212,23)" fg:x="3222" fg:w="15"/><text x="5.5266%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (23 samples, 0.04%)</title><rect x="5.2668%" y="213" width="0.0377%" height="15" fill="rgb(242,79,21)" fg:x="3216" fg:w="23"/><text x="5.5168%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="5.3044%" y="213" width="0.0246%" height="15" fill="rgb(211,96,35)" fg:x="3239" fg:w="15"/><text x="5.5544%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (41 samples, 0.07%)</title><rect x="5.2635%" y="229" width="0.0671%" height="15" fill="rgb(253,215,40)" fg:x="3214" fg:w="41"/><text x="5.5135%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (64 samples, 0.10%)</title><rect x="5.2307%" y="261" width="0.1048%" height="15" fill="rgb(211,81,21)" fg:x="3194" fg:w="64"/><text x="5.4807%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (55 samples, 0.09%)</title><rect x="5.2455%" y="245" width="0.0901%" height="15" fill="rgb(208,190,38)" fg:x="3203" fg:w="55"/><text x="5.4955%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (872 samples, 1.43%)</title><rect x="3.9091%" y="277" width="1.4281%" height="15" fill="rgb(235,213,38)" fg:x="2387" fg:w="872"/><text x="4.1591%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (81 samples, 0.13%)</title><rect x="12.4529%" y="261" width="0.1327%" height="15" fill="rgb(237,122,38)" fg:x="7604" fg:w="81"/><text x="12.7029%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (76 samples, 0.12%)</title><rect x="12.5856%" y="261" width="0.1245%" height="15" fill="rgb(244,218,35)" fg:x="7685" fg:w="76"/><text x="12.8356%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (80 samples, 0.13%)</title><rect x="12.7117%" y="261" width="0.1310%" height="15" fill="rgb(240,68,47)" fg:x="7762" fg:w="80"/><text x="12.9617%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (114 samples, 0.19%)</title><rect x="12.8427%" y="261" width="0.1867%" height="15" fill="rgb(210,16,53)" fg:x="7842" fg:w="114"/><text x="13.0927%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.04%)</title><rect x="13.0392%" y="261" width="0.0360%" height="15" fill="rgb(235,124,12)" fg:x="7962" fg:w="22"/><text x="13.2892%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (82 samples, 0.13%)</title><rect x="13.0851%" y="261" width="0.1343%" height="15" fill="rgb(224,169,11)" fg:x="7990" fg:w="82"/><text x="13.3351%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="13.2194%" y="261" width="0.0524%" height="15" fill="rgb(250,166,2)" fg:x="8072" fg:w="32"/><text x="13.4694%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (14 samples, 0.02%)</title><rect x="13.2799%" y="261" width="0.0229%" height="15" fill="rgb(242,216,29)" fg:x="8109" fg:w="14"/><text x="13.5299%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="13.3029%" y="261" width="0.0147%" height="15" fill="rgb(230,116,27)" fg:x="8123" fg:w="9"/><text x="13.5529%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (277 samples, 0.45%)</title><rect x="13.3176%" y="261" width="0.4536%" height="15" fill="rgb(228,99,48)" fg:x="8132" fg:w="277"/><text x="13.5676%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.12%)</title><rect x="13.7712%" y="261" width="0.1163%" height="15" fill="rgb(253,11,6)" fg:x="8409" fg:w="71"/><text x="14.0212%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (77 samples, 0.13%)</title><rect x="13.8875%" y="261" width="0.1261%" height="15" fill="rgb(247,143,39)" fg:x="8480" fg:w="77"/><text x="14.1375%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,105 samples, 3.45%)</title><rect x="14.0136%" y="261" width="3.4473%" height="15" fill="rgb(236,97,10)" fg:x="8557" fg:w="2105"/><text x="14.2636%" y="271.50">rus..</text></g><g><title>rust_qecp`DYLD-STUB$$free (70 samples, 0.11%)</title><rect x="17.4609%" y="261" width="0.1146%" height="15" fill="rgb(233,208,19)" fg:x="10662" fg:w="70"/><text x="17.7109%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (32 samples, 0.05%)</title><rect x="17.5772%" y="261" width="0.0524%" height="15" fill="rgb(216,164,2)" fg:x="10733" fg:w="32"/><text x="17.8272%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (20 samples, 0.03%)</title><rect x="17.6329%" y="261" width="0.0328%" height="15" fill="rgb(220,129,5)" fg:x="10767" fg:w="20"/><text x="17.8829%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="17.6689%" y="261" width="0.0115%" height="15" fill="rgb(242,17,10)" fg:x="10789" fg:w="7"/><text x="17.9189%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="17.8753%" y="213" width="0.0147%" height="15" fill="rgb(242,107,0)" fg:x="10915" fg:w="9"/><text x="18.1253%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="17.8720%" y="229" width="0.0229%" height="15" fill="rgb(251,28,31)" fg:x="10913" fg:w="14"/><text x="18.1220%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="17.9326%" y="181" width="0.0115%" height="15" fill="rgb(233,223,10)" fg:x="10950" fg:w="7"/><text x="18.1826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (17 samples, 0.03%)</title><rect x="17.9195%" y="197" width="0.0278%" height="15" fill="rgb(215,21,27)" fg:x="10942" fg:w="17"/><text x="18.1695%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="17.9522%" y="181" width="0.0197%" height="15" fill="rgb(232,23,21)" fg:x="10962" fg:w="12"/><text x="18.2022%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (8 samples, 0.01%)</title><rect x="17.9883%" y="181" width="0.0131%" height="15" fill="rgb(244,5,23)" fg:x="10984" fg:w="8"/><text x="18.2383%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.03%)</title><rect x="18.0063%" y="165" width="0.0278%" height="15" fill="rgb(226,81,46)" fg:x="10995" fg:w="17"/><text x="18.2563%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="18.0145%" y="149" width="0.0197%" height="15" fill="rgb(247,70,30)" fg:x="11000" fg:w="12"/><text x="18.2645%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="18.0014%" y="181" width="0.0360%" height="15" fill="rgb(212,68,19)" fg:x="10992" fg:w="22"/><text x="18.2514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (61 samples, 0.10%)</title><rect x="17.9506%" y="197" width="0.0999%" height="15" fill="rgb(240,187,13)" fg:x="10961" fg:w="61"/><text x="18.2006%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (141 samples, 0.23%)</title><rect x="17.9097%" y="213" width="0.2309%" height="15" fill="rgb(223,113,26)" fg:x="10936" fg:w="141"/><text x="18.1597%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 0.09%)</title><rect x="18.0505%" y="197" width="0.0901%" height="15" fill="rgb(206,192,2)" fg:x="11022" fg:w="55"/><text x="18.3005%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="18.1406%" y="213" width="0.0131%" height="15" fill="rgb(241,108,4)" fg:x="11077" fg:w="8"/><text x="18.3906%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (308 samples, 0.50%)</title><rect x="17.6804%" y="261" width="0.5044%" height="15" fill="rgb(247,173,49)" fg:x="10796" fg:w="308"/><text x="17.9304%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (193 samples, 0.32%)</title><rect x="17.8687%" y="245" width="0.3161%" height="15" fill="rgb(224,114,35)" fg:x="10911" fg:w="193"/><text x="18.1187%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (170 samples, 0.28%)</title><rect x="17.9064%" y="229" width="0.2784%" height="15" fill="rgb(245,159,27)" fg:x="10934" fg:w="170"/><text x="18.1564%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="18.1635%" y="213" width="0.0213%" height="15" fill="rgb(245,172,44)" fg:x="11091" fg:w="13"/><text x="18.4135%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="18.1651%" y="197" width="0.0197%" height="15" fill="rgb(236,23,11)" fg:x="11092" fg:w="12"/><text x="18.4151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="18.2978%" y="245" width="0.0278%" height="15" fill="rgb(205,117,38)" fg:x="11173" fg:w="17"/><text x="18.5478%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (94 samples, 0.15%)</title><rect x="18.8268%" y="229" width="0.1539%" height="15" fill="rgb(237,72,25)" fg:x="11496" fg:w="94"/><text x="19.0768%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="18.9807%" y="229" width="0.0246%" height="15" fill="rgb(244,70,9)" fg:x="11590" fg:w="15"/><text x="19.2307%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (37 samples, 0.06%)</title><rect x="19.0053%" y="229" width="0.0606%" height="15" fill="rgb(217,125,39)" fg:x="11605" fg:w="37"/><text x="19.2553%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (74 samples, 0.12%)</title><rect x="19.0659%" y="229" width="0.1212%" height="15" fill="rgb(235,36,10)" fg:x="11642" fg:w="74"/><text x="19.3159%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (53 samples, 0.09%)</title><rect x="19.1003%" y="213" width="0.0868%" height="15" fill="rgb(251,123,47)" fg:x="11663" fg:w="53"/><text x="19.3503%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (527 samples, 0.86%)</title><rect x="18.3256%" y="245" width="0.8631%" height="15" fill="rgb(221,13,13)" fg:x="11190" fg:w="527"/><text x="18.5756%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (103 samples, 0.17%)</title><rect x="19.4393%" y="229" width="0.1687%" height="15" fill="rgb(238,131,9)" fg:x="11870" fg:w="103"/><text x="19.6893%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (30 samples, 0.05%)</title><rect x="19.6079%" y="229" width="0.0491%" height="15" fill="rgb(211,50,8)" fg:x="11973" fg:w="30"/><text x="19.8579%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (38 samples, 0.06%)</title><rect x="19.6571%" y="229" width="0.0622%" height="15" fill="rgb(245,182,24)" fg:x="12003" fg:w="38"/><text x="19.9071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (537 samples, 0.88%)</title><rect x="19.1969%" y="245" width="0.8794%" height="15" fill="rgb(242,14,37)" fg:x="11722" fg:w="537"/><text x="19.4469%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (218 samples, 0.36%)</title><rect x="19.7193%" y="229" width="0.3570%" height="15" fill="rgb(246,228,12)" fg:x="12041" fg:w="218"/><text x="19.9693%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (98 samples, 0.16%)</title><rect x="20.3383%" y="213" width="0.1605%" height="15" fill="rgb(213,55,15)" fg:x="12419" fg:w="98"/><text x="20.5883%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (371 samples, 0.61%)</title><rect x="20.0763%" y="245" width="0.6076%" height="15" fill="rgb(209,9,3)" fg:x="12259" fg:w="371"/><text x="20.3263%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (317 samples, 0.52%)</title><rect x="20.1648%" y="229" width="0.5191%" height="15" fill="rgb(230,59,30)" fg:x="12313" fg:w="317"/><text x="20.4148%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (113 samples, 0.19%)</title><rect x="20.4988%" y="213" width="0.1851%" height="15" fill="rgb(209,121,21)" fg:x="12517" fg:w="113"/><text x="20.7488%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.05%)</title><rect x="20.6839%" y="245" width="0.0459%" height="15" fill="rgb(220,109,13)" fg:x="12630" fg:w="28"/><text x="20.9339%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (249 samples, 0.41%)</title><rect x="20.7298%" y="245" width="0.4078%" height="15" fill="rgb(232,18,1)" fg:x="12658" fg:w="249"/><text x="20.9798%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (126 samples, 0.21%)</title><rect x="20.9312%" y="229" width="0.2063%" height="15" fill="rgb(215,41,42)" fg:x="12781" fg:w="126"/><text x="21.1812%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (125 samples, 0.20%)</title><rect x="20.9328%" y="213" width="0.2047%" height="15" fill="rgb(224,123,36)" fg:x="12782" fg:w="125"/><text x="21.1828%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (44 samples, 0.07%)</title><rect x="21.1375%" y="245" width="0.0721%" height="15" fill="rgb(240,125,3)" fg:x="12907" fg:w="44"/><text x="21.3875%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (42 samples, 0.07%)</title><rect x="21.2227%" y="245" width="0.0688%" height="15" fill="rgb(205,98,50)" fg:x="12959" fg:w="42"/><text x="21.4727%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.03%)</title><rect x="21.2915%" y="245" width="0.0344%" height="15" fill="rgb(205,185,37)" fg:x="13001" fg:w="21"/><text x="21.5415%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="21.3259%" y="245" width="0.0246%" height="15" fill="rgb(238,207,15)" fg:x="13022" fg:w="15"/><text x="21.5759%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (61 samples, 0.10%)</title><rect x="21.4913%" y="213" width="0.0999%" height="15" fill="rgb(213,199,42)" fg:x="13123" fg:w="61"/><text x="21.7413%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (129 samples, 0.21%)</title><rect x="21.3832%" y="229" width="0.2113%" height="15" fill="rgb(235,201,11)" fg:x="13057" fg:w="129"/><text x="21.6332%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="21.5944%" y="229" width="0.0131%" height="15" fill="rgb(207,46,11)" fg:x="13186" fg:w="8"/><text x="21.8444%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (81 samples, 0.13%)</title><rect x="21.6075%" y="229" width="0.1327%" height="15" fill="rgb(241,35,35)" fg:x="13194" fg:w="81"/><text x="21.8575%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (13 samples, 0.02%)</title><rect x="21.7189%" y="213" width="0.0213%" height="15" fill="rgb(243,32,47)" fg:x="13262" fg:w="13"/><text x="21.9689%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="21.7189%" y="197" width="0.0213%" height="15" fill="rgb(247,202,23)" fg:x="13262" fg:w="13"/><text x="21.9689%" y="207.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,180 samples, 3.57%)</title><rect x="18.1897%" y="261" width="3.5701%" height="15" fill="rgb(219,102,11)" fg:x="11107" fg:w="2180"/><text x="18.4397%" y="271.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (244 samples, 0.40%)</title><rect x="21.3603%" y="245" width="0.3996%" height="15" fill="rgb(243,110,44)" fg:x="13043" fg:w="244"/><text x="21.6103%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="21.7402%" y="229" width="0.0197%" height="15" fill="rgb(222,74,54)" fg:x="13275" fg:w="12"/><text x="21.9902%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (217 samples, 0.36%)</title><rect x="21.7599%" y="261" width="0.3554%" height="15" fill="rgb(216,99,12)" fg:x="13287" fg:w="217"/><text x="22.0099%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (174 samples, 0.28%)</title><rect x="21.8303%" y="245" width="0.2850%" height="15" fill="rgb(226,22,26)" fg:x="13330" fg:w="174"/><text x="22.0803%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (106 samples, 0.17%)</title><rect x="21.9416%" y="229" width="0.1736%" height="15" fill="rgb(217,163,10)" fg:x="13398" fg:w="106"/><text x="22.1916%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (49 samples, 0.08%)</title><rect x="22.0350%" y="213" width="0.0802%" height="15" fill="rgb(213,25,53)" fg:x="13455" fg:w="49"/><text x="22.2850%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="22.1038%" y="197" width="0.0115%" height="15" fill="rgb(252,105,26)" fg:x="13497" fg:w="7"/><text x="22.3538%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (119 samples, 0.19%)</title><rect x="22.1152%" y="261" width="0.1949%" height="15" fill="rgb(220,39,43)" fg:x="13504" fg:w="119"/><text x="22.3652%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,905 samples, 4.76%)</title><rect x="22.3101%" y="261" width="4.7575%" height="15" fill="rgb(229,68,48)" fg:x="13623" fg:w="2905"/><text x="22.5601%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (199 samples, 0.33%)</title><rect x="27.0676%" y="261" width="0.3259%" height="15" fill="rgb(252,8,32)" fg:x="16528" fg:w="199"/><text x="27.3176%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="27.5949%" y="245" width="0.0197%" height="15" fill="rgb(223,20,43)" fg:x="16850" fg:w="12"/><text x="27.8449%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="27.6146%" y="245" width="0.0164%" height="15" fill="rgb(229,81,49)" fg:x="16862" fg:w="10"/><text x="27.8646%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (87 samples, 0.14%)</title><rect x="27.6457%" y="245" width="0.1425%" height="15" fill="rgb(236,28,36)" fg:x="16881" fg:w="87"/><text x="27.8957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="28.0960%" y="213" width="0.0131%" height="15" fill="rgb(249,185,26)" fg:x="17156" fg:w="8"/><text x="28.3460%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.03%)</title><rect x="28.0928%" y="229" width="0.0262%" height="15" fill="rgb(249,174,33)" fg:x="17154" fg:w="16"/><text x="28.3428%" y="239.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (40 samples, 0.07%)</title><rect x="28.1206%" y="229" width="0.0655%" height="15" fill="rgb(233,201,37)" fg:x="17171" fg:w="40"/><text x="28.3706%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (191 samples, 0.31%)</title><rect x="28.1861%" y="229" width="0.3128%" height="15" fill="rgb(221,78,26)" fg:x="17211" fg:w="191"/><text x="28.4361%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,006 samples, 1.65%)</title><rect x="27.3935%" y="261" width="1.6475%" height="15" fill="rgb(250,127,30)" fg:x="16727" fg:w="1006"/><text x="27.6435%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (765 samples, 1.25%)</title><rect x="27.7881%" y="245" width="1.2528%" height="15" fill="rgb(230,49,44)" fg:x="16968" fg:w="765"/><text x="28.0381%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (331 samples, 0.54%)</title><rect x="28.4989%" y="229" width="0.5421%" height="15" fill="rgb(229,67,23)" fg:x="17402" fg:w="331"/><text x="28.7489%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (59 samples, 0.10%)</title><rect x="29.0410%" y="261" width="0.0966%" height="15" fill="rgb(249,83,47)" fg:x="17733" fg:w="59"/><text x="29.2910%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.03%)</title><rect x="29.1392%" y="261" width="0.0328%" height="15" fill="rgb(215,43,3)" fg:x="17793" fg:w="20"/><text x="29.3892%" y="271.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (186 samples, 0.30%)</title><rect x="29.1720%" y="261" width="0.3046%" height="15" fill="rgb(238,154,13)" fg:x="17813" fg:w="186"/><text x="29.4220%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,964 samples, 6.49%)</title><rect x="33.7460%" y="245" width="6.4918%" height="15" fill="rgb(219,56,2)" fg:x="20606" fg:w="3964"/><text x="33.9960%" y="255.50">rust_qecp..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.02%)</title><rect x="40.2525%" y="181" width="0.0164%" height="15" fill="rgb(233,0,4)" fg:x="24579" fg:w="10"/><text x="40.5025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.08%)</title><rect x="40.2394%" y="197" width="0.0753%" height="15" fill="rgb(235,30,7)" fg:x="24571" fg:w="46"/><text x="40.4894%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.05%)</title><rect x="40.2689%" y="181" width="0.0459%" height="15" fill="rgb(250,79,13)" fg:x="24589" fg:w="28"/><text x="40.5189%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (47 samples, 0.08%)</title><rect x="40.2394%" y="245" width="0.0770%" height="15" fill="rgb(211,146,34)" fg:x="24571" fg:w="47"/><text x="40.4894%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (47 samples, 0.08%)</title><rect x="40.2394%" y="229" width="0.0770%" height="15" fill="rgb(228,22,38)" fg:x="24571" fg:w="47"/><text x="40.4894%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (47 samples, 0.08%)</title><rect x="40.2394%" y="213" width="0.0770%" height="15" fill="rgb(235,168,5)" fg:x="24571" fg:w="47"/><text x="40.4894%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,578 samples, 4.22%)</title><rect x="40.3164%" y="245" width="4.2219%" height="15" fill="rgb(221,155,16)" fg:x="24618" fg:w="2578"/><text x="40.5664%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (559 samples, 0.92%)</title><rect x="44.5383%" y="245" width="0.9155%" height="15" fill="rgb(215,215,53)" fg:x="27196" fg:w="559"/><text x="44.7883%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="45.5226%" y="229" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="27797" fg:w="7"/><text x="45.7726%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (95 samples, 0.16%)</title><rect x="45.5570%" y="229" width="0.1556%" height="15" fill="rgb(234,103,6)" fg:x="27818" fg:w="95"/><text x="45.8070%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="45.8665%" y="213" width="0.0131%" height="15" fill="rgb(227,97,0)" fg:x="28007" fg:w="8"/><text x="46.1165%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="45.8681%" y="197" width="0.0115%" height="15" fill="rgb(234,150,53)" fg:x="28008" fg:w="7"/><text x="46.1181%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (189 samples, 0.31%)</title><rect x="45.8796%" y="213" width="0.3095%" height="15" fill="rgb(228,201,54)" fg:x="28015" fg:w="189"/><text x="46.1296%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (643 samples, 1.05%)</title><rect x="45.4538%" y="245" width="1.0530%" height="15" fill="rgb(222,22,37)" fg:x="27755" fg:w="643"/><text x="45.7038%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (485 samples, 0.79%)</title><rect x="45.7126%" y="229" width="0.7943%" height="15" fill="rgb(237,53,32)" fg:x="27913" fg:w="485"/><text x="45.9626%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (194 samples, 0.32%)</title><rect x="46.1891%" y="213" width="0.3177%" height="15" fill="rgb(233,25,53)" fg:x="28204" fg:w="194"/><text x="46.4391%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.01%)</title><rect x="51.3724%" y="165" width="0.0147%" height="15" fill="rgb(210,40,34)" fg:x="31369" fg:w="9"/><text x="51.6224%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,400 samples, 21.94%)</title><rect x="29.4766%" y="261" width="21.9449%" height="15" fill="rgb(241,220,44)" fg:x="17999" fg:w="13400"/><text x="29.7266%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarC..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,000 samples, 4.91%)</title><rect x="46.5085%" y="245" width="4.9130%" height="15" fill="rgb(235,28,35)" fg:x="28399" fg:w="3000"/><text x="46.7585%" y="255.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.06%)</title><rect x="51.3625%" y="229" width="0.0590%" height="15" fill="rgb(210,56,17)" fg:x="31363" fg:w="36"/><text x="51.6125%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (35 samples, 0.06%)</title><rect x="51.3642%" y="213" width="0.0573%" height="15" fill="rgb(224,130,29)" fg:x="31364" fg:w="35"/><text x="51.6142%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.06%)</title><rect x="51.3642%" y="197" width="0.0573%" height="15" fill="rgb(235,212,8)" fg:x="31364" fg:w="35"/><text x="51.6142%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (32 samples, 0.05%)</title><rect x="51.3691%" y="181" width="0.0524%" height="15" fill="rgb(223,33,50)" fg:x="31367" fg:w="32"/><text x="51.6191%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.03%)</title><rect x="51.3871%" y="165" width="0.0344%" height="15" fill="rgb(219,149,13)" fg:x="31378" fg:w="21"/><text x="51.6371%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (11 samples, 0.02%)</title><rect x="51.4215%" y="261" width="0.0180%" height="15" fill="rgb(250,156,29)" fg:x="31399" fg:w="11"/><text x="51.6715%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 0.07%)</title><rect x="53.2442%" y="245" width="0.0688%" height="15" fill="rgb(216,193,19)" fg:x="32512" fg:w="42"/><text x="53.4942%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="53.2983%" y="229" width="0.0147%" height="15" fill="rgb(216,135,14)" fg:x="32545" fg:w="9"/><text x="53.5483%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="53.2999%" y="213" width="0.0131%" height="15" fill="rgb(241,47,5)" fg:x="32546" fg:w="8"/><text x="53.5499%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="53.3343%" y="213" width="0.0131%" height="15" fill="rgb(233,42,35)" fg:x="32567" fg:w="8"/><text x="53.5843%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="53.3474%" y="213" width="0.0197%" height="15" fill="rgb(231,13,6)" fg:x="32575" fg:w="12"/><text x="53.5974%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.06%)</title><rect x="53.3212%" y="229" width="0.0622%" height="15" fill="rgb(207,181,40)" fg:x="32559" fg:w="38"/><text x="53.5712%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="53.3671%" y="213" width="0.0164%" height="15" fill="rgb(254,173,49)" fg:x="32587" fg:w="10"/><text x="53.6171%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (48 samples, 0.08%)</title><rect x="53.3147%" y="245" width="0.0786%" height="15" fill="rgb(221,1,38)" fg:x="32555" fg:w="48"/><text x="53.5647%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.06%)</title><rect x="53.3933%" y="229" width="0.0639%" height="15" fill="rgb(206,124,46)" fg:x="32603" fg:w="39"/><text x="53.6433%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="53.4571%" y="229" width="0.0180%" height="15" fill="rgb(249,21,11)" fg:x="32642" fg:w="11"/><text x="53.7071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="53.4752%" y="229" width="0.0295%" height="15" fill="rgb(222,201,40)" fg:x="32653" fg:w="18"/><text x="53.7252%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.03%)</title><rect x="53.5046%" y="229" width="0.0311%" height="15" fill="rgb(235,61,29)" fg:x="32671" fg:w="19"/><text x="53.7546%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="53.5358%" y="229" width="0.0311%" height="15" fill="rgb(219,207,3)" fg:x="32690" fg:w="19"/><text x="53.7858%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="53.5669%" y="229" width="0.0164%" height="15" fill="rgb(222,56,46)" fg:x="32709" fg:w="10"/><text x="53.8169%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="53.8420%" y="197" width="0.0246%" height="15" fill="rgb(239,76,54)" fg:x="32877" fg:w="15"/><text x="54.0920%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (60 samples, 0.10%)</title><rect x="54.2383%" y="165" width="0.0983%" height="15" fill="rgb(231,124,27)" fg:x="33119" fg:w="60"/><text x="54.4883%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (224 samples, 0.37%)</title><rect x="53.9714%" y="181" width="0.3668%" height="15" fill="rgb(249,195,6)" fg:x="32956" fg:w="224"/><text x="54.2214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (441 samples, 0.72%)</title><rect x="53.6602%" y="213" width="0.7222%" height="15" fill="rgb(237,174,47)" fg:x="32766" fg:w="441"/><text x="53.9102%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (315 samples, 0.52%)</title><rect x="53.8666%" y="197" width="0.5159%" height="15" fill="rgb(206,201,31)" fg:x="32892" fg:w="315"/><text x="54.1166%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="54.3382%" y="181" width="0.0442%" height="15" fill="rgb(231,57,52)" fg:x="33180" fg:w="27"/><text x="54.5882%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (38 samples, 0.06%)</title><rect x="54.3824%" y="213" width="0.0622%" height="15" fill="rgb(248,177,22)" fg:x="33207" fg:w="38"/><text x="54.6324%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (70 samples, 0.11%)</title><rect x="54.5724%" y="197" width="0.1146%" height="15" fill="rgb(215,211,37)" fg:x="33323" fg:w="70"/><text x="54.8224%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (149 samples, 0.24%)</title><rect x="54.4447%" y="213" width="0.2440%" height="15" fill="rgb(241,128,51)" fg:x="33245" fg:w="149"/><text x="54.6947%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="54.6887%" y="213" width="0.0147%" height="15" fill="rgb(227,165,31)" fg:x="33394" fg:w="9"/><text x="54.9387%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (48 samples, 0.08%)</title><rect x="54.7034%" y="213" width="0.0786%" height="15" fill="rgb(228,167,24)" fg:x="33403" fg:w="48"/><text x="54.9534%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="54.7820%" y="213" width="0.0147%" height="15" fill="rgb(228,143,12)" fg:x="33451" fg:w="9"/><text x="55.0320%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="54.7968%" y="213" width="0.0197%" height="15" fill="rgb(249,149,8)" fg:x="33460" fg:w="12"/><text x="55.0468%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="54.8541%" y="197" width="0.0147%" height="15" fill="rgb(243,35,44)" fg:x="33495" fg:w="9"/><text x="55.1041%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (314 samples, 0.51%)</title><rect x="54.8688%" y="197" width="0.5142%" height="15" fill="rgb(246,89,9)" fg:x="33504" fg:w="314"/><text x="55.1188%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="55.3831%" y="197" width="0.0229%" height="15" fill="rgb(233,213,13)" fg:x="33818" fg:w="14"/><text x="55.6331%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (10 samples, 0.02%)</title><rect x="55.4060%" y="197" width="0.0164%" height="15" fill="rgb(233,141,41)" fg:x="33832" fg:w="10"/><text x="55.6560%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="55.4224%" y="197" width="0.0131%" height="15" fill="rgb(239,167,4)" fg:x="33842" fg:w="8"/><text x="55.6724%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.07%)</title><rect x="55.4862%" y="181" width="0.0721%" height="15" fill="rgb(209,217,16)" fg:x="33881" fg:w="44"/><text x="55.7362%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (103 samples, 0.17%)</title><rect x="55.5583%" y="181" width="0.1687%" height="15" fill="rgb(219,88,35)" fg:x="33925" fg:w="103"/><text x="55.8083%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (190 samples, 0.31%)</title><rect x="55.4355%" y="197" width="0.3112%" height="15" fill="rgb(220,193,23)" fg:x="33850" fg:w="190"/><text x="55.6855%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="55.7270%" y="181" width="0.0197%" height="15" fill="rgb(230,90,52)" fg:x="34028" fg:w="12"/><text x="55.9770%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="55.7483%" y="197" width="0.0180%" height="15" fill="rgb(252,106,19)" fg:x="34041" fg:w="11"/><text x="55.9983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="56.2166%" y="133" width="0.0409%" height="15" fill="rgb(206,74,20)" fg:x="34327" fg:w="25"/><text x="56.4666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (161 samples, 0.26%)</title><rect x="56.0185%" y="149" width="0.2637%" height="15" fill="rgb(230,138,44)" fg:x="34206" fg:w="161"/><text x="56.2685%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.02%)</title><rect x="56.2576%" y="133" width="0.0246%" height="15" fill="rgb(235,182,43)" fg:x="34352" fg:w="15"/><text x="56.5076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (252 samples, 0.41%)</title><rect x="55.8891%" y="181" width="0.4127%" height="15" fill="rgb(242,16,51)" fg:x="34127" fg:w="252"/><text x="56.1391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (185 samples, 0.30%)</title><rect x="55.9988%" y="165" width="0.3030%" height="15" fill="rgb(248,9,4)" fg:x="34194" fg:w="185"/><text x="56.2488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="56.2821%" y="149" width="0.0197%" height="15" fill="rgb(210,31,22)" fg:x="34367" fg:w="12"/><text x="56.5321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="56.3018%" y="181" width="0.0246%" height="15" fill="rgb(239,54,39)" fg:x="34379" fg:w="15"/><text x="56.5518%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (923 samples, 1.51%)</title><rect x="54.8164%" y="213" width="1.5116%" height="15" fill="rgb(230,99,41)" fg:x="33472" fg:w="923"/><text x="55.0664%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (343 samples, 0.56%)</title><rect x="55.7663%" y="197" width="0.5617%" height="15" fill="rgb(253,106,12)" fg:x="34052" fg:w="343"/><text x="56.0163%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (50 samples, 0.08%)</title><rect x="56.5032%" y="197" width="0.0819%" height="15" fill="rgb(213,46,41)" fg:x="34502" fg:w="50"/><text x="56.7532%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (82 samples, 0.13%)</title><rect x="56.5851%" y="197" width="0.1343%" height="15" fill="rgb(215,133,35)" fg:x="34552" fg:w="82"/><text x="56.8351%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (274 samples, 0.45%)</title><rect x="56.3280%" y="213" width="0.4487%" height="15" fill="rgb(213,28,5)" fg:x="34395" fg:w="274"/><text x="56.5780%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (35 samples, 0.06%)</title><rect x="56.7194%" y="197" width="0.0573%" height="15" fill="rgb(215,77,49)" fg:x="34634" fg:w="35"/><text x="56.9694%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="56.7767%" y="213" width="0.0246%" height="15" fill="rgb(248,100,22)" fg:x="34669" fg:w="15"/><text x="57.0267%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,983 samples, 3.25%)</title><rect x="53.5865%" y="229" width="3.2475%" height="15" fill="rgb(208,67,9)" fg:x="32721" fg:w="1983"/><text x="53.8365%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.03%)</title><rect x="56.8013%" y="213" width="0.0328%" height="15" fill="rgb(219,133,21)" fg:x="34684" fg:w="20"/><text x="57.0513%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.01%)</title><rect x="56.8340%" y="229" width="0.0147%" height="15" fill="rgb(246,46,29)" fg:x="34704" fg:w="9"/><text x="57.0840%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (14 samples, 0.02%)</title><rect x="56.8488%" y="229" width="0.0229%" height="15" fill="rgb(246,185,52)" fg:x="34713" fg:w="14"/><text x="57.0988%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.03%)</title><rect x="56.8717%" y="229" width="0.0262%" height="15" fill="rgb(252,136,11)" fg:x="34727" fg:w="16"/><text x="57.1217%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="56.8979%" y="229" width="0.0131%" height="15" fill="rgb(219,138,53)" fg:x="34743" fg:w="8"/><text x="57.1479%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="56.9126%" y="229" width="0.0246%" height="15" fill="rgb(211,51,23)" fg:x="34752" fg:w="15"/><text x="57.1626%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,175 samples, 3.56%)</title><rect x="53.3933%" y="245" width="3.5620%" height="15" fill="rgb(247,221,28)" fg:x="32603" fg:w="2175"/><text x="53.6433%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (9 samples, 0.01%)</title><rect x="56.9405%" y="229" width="0.0147%" height="15" fill="rgb(251,222,45)" fg:x="34769" fg:w="9"/><text x="57.1905%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.05%)</title><rect x="57.1976%" y="229" width="0.0508%" height="15" fill="rgb(217,162,53)" fg:x="34926" fg:w="31"/><text x="57.4476%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="57.2484%" y="229" width="0.0246%" height="15" fill="rgb(229,93,14)" fg:x="34957" fg:w="15"/><text x="57.4984%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (28 samples, 0.05%)</title><rect x="57.2729%" y="229" width="0.0459%" height="15" fill="rgb(209,67,49)" fg:x="34972" fg:w="28"/><text x="57.5229%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="57.3188%" y="229" width="0.0278%" height="15" fill="rgb(213,87,29)" fg:x="35000" fg:w="17"/><text x="57.5688%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (21 samples, 0.03%)</title><rect x="57.3466%" y="229" width="0.0344%" height="15" fill="rgb(205,151,52)" fg:x="35017" fg:w="21"/><text x="57.5966%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (114 samples, 0.19%)</title><rect x="57.6103%" y="181" width="0.1867%" height="15" fill="rgb(253,215,39)" fg:x="35178" fg:w="114"/><text x="57.8603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="57.7528%" y="165" width="0.0442%" height="15" fill="rgb(221,220,41)" fg:x="35265" fg:w="27"/><text x="58.0028%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (224 samples, 0.37%)</title><rect x="57.4547%" y="213" width="0.3668%" height="15" fill="rgb(218,133,21)" fg:x="35083" fg:w="224"/><text x="57.7047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (156 samples, 0.26%)</title><rect x="57.5661%" y="197" width="0.2555%" height="15" fill="rgb(221,193,43)" fg:x="35151" fg:w="156"/><text x="57.8161%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="57.7970%" y="181" width="0.0246%" height="15" fill="rgb(240,128,52)" fg:x="35292" fg:w="15"/><text x="58.0470%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="57.8216%" y="213" width="0.0278%" height="15" fill="rgb(253,114,12)" fg:x="35307" fg:w="17"/><text x="58.0716%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="57.8494%" y="213" width="0.0262%" height="15" fill="rgb(215,223,47)" fg:x="35324" fg:w="16"/><text x="58.0994%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="57.8756%" y="213" width="0.0262%" height="15" fill="rgb(248,225,23)" fg:x="35340" fg:w="16"/><text x="58.1256%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (27 samples, 0.04%)</title><rect x="58.1491%" y="197" width="0.0442%" height="15" fill="rgb(250,108,0)" fg:x="35507" fg:w="27"/><text x="58.3991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (15 samples, 0.02%)</title><rect x="58.3260%" y="181" width="0.0246%" height="15" fill="rgb(228,208,7)" fg:x="35615" fg:w="15"/><text x="58.5760%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (26 samples, 0.04%)</title><rect x="58.3505%" y="181" width="0.0426%" height="15" fill="rgb(244,45,10)" fg:x="35630" fg:w="26"/><text x="58.6005%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (37 samples, 0.06%)</title><rect x="58.3931%" y="181" width="0.0606%" height="15" fill="rgb(207,125,25)" fg:x="35656" fg:w="37"/><text x="58.6431%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (220 samples, 0.36%)</title><rect x="58.4619%" y="181" width="0.3603%" height="15" fill="rgb(210,195,18)" fg:x="35698" fg:w="220"/><text x="58.7119%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (36 samples, 0.06%)</title><rect x="58.9974%" y="165" width="0.0590%" height="15" fill="rgb(249,80,12)" fg:x="36025" fg:w="36"/><text x="59.2474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (104 samples, 0.17%)</title><rect x="59.0564%" y="165" width="0.1703%" height="15" fill="rgb(221,65,9)" fg:x="36061" fg:w="104"/><text x="59.3064%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (54 samples, 0.09%)</title><rect x="59.4576%" y="133" width="0.0884%" height="15" fill="rgb(235,49,36)" fg:x="36306" fg:w="54"/><text x="59.7076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (185 samples, 0.30%)</title><rect x="59.2578%" y="149" width="0.3030%" height="15" fill="rgb(225,32,20)" fg:x="36184" fg:w="185"/><text x="59.5078%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.01%)</title><rect x="59.5460%" y="133" width="0.0147%" height="15" fill="rgb(215,141,46)" fg:x="36360" fg:w="9"/><text x="59.7960%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (215 samples, 0.35%)</title><rect x="59.2267%" y="165" width="0.3521%" height="15" fill="rgb(250,160,47)" fg:x="36165" fg:w="215"/><text x="59.4767%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="59.5608%" y="149" width="0.0180%" height="15" fill="rgb(216,222,40)" fg:x="36369" fg:w="11"/><text x="59.8108%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (115 samples, 0.19%)</title><rect x="59.5788%" y="165" width="0.1883%" height="15" fill="rgb(234,217,39)" fg:x="36380" fg:w="115"/><text x="59.8288%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="59.8015%" y="149" width="0.0197%" height="15" fill="rgb(207,178,40)" fg:x="36516" fg:w="12"/><text x="60.0515%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.05%)</title><rect x="59.9293%" y="133" width="0.0540%" height="15" fill="rgb(221,136,13)" fg:x="36594" fg:w="33"/><text x="60.1793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (225 samples, 0.37%)</title><rect x="59.7671%" y="165" width="0.3685%" height="15" fill="rgb(249,199,10)" fg:x="36495" fg:w="225"/><text x="60.0171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (192 samples, 0.31%)</title><rect x="59.8212%" y="149" width="0.3144%" height="15" fill="rgb(249,222,13)" fg:x="36528" fg:w="192"/><text x="60.0712%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (93 samples, 0.15%)</title><rect x="59.9833%" y="133" width="0.1523%" height="15" fill="rgb(244,185,38)" fg:x="36627" fg:w="93"/><text x="60.2333%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (815 samples, 1.33%)</title><rect x="58.8222%" y="181" width="1.3347%" height="15" fill="rgb(236,202,9)" fg:x="35918" fg:w="815"/><text x="59.0722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="60.1356%" y="165" width="0.0213%" height="15" fill="rgb(250,229,37)" fg:x="36720" fg:w="13"/><text x="60.3856%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="60.1569%" y="181" width="0.0147%" height="15" fill="rgb(206,174,23)" fg:x="36733" fg:w="9"/><text x="60.4069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,287 samples, 2.11%)</title><rect x="58.1933%" y="197" width="2.1077%" height="15" fill="rgb(211,33,43)" fg:x="35534" fg:w="1287"/><text x="58.4433%" y="207.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (79 samples, 0.13%)</title><rect x="60.1716%" y="181" width="0.1294%" height="15" fill="rgb(245,58,50)" fg:x="36742" fg:w="79"/><text x="60.4216%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (125 samples, 0.20%)</title><rect x="60.3010%" y="197" width="0.2047%" height="15" fill="rgb(244,68,36)" fg:x="36821" fg:w="125"/><text x="60.5510%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (42 samples, 0.07%)</title><rect x="60.5057%" y="197" width="0.0688%" height="15" fill="rgb(232,229,15)" fg:x="36946" fg:w="42"/><text x="60.7557%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,643 samples, 2.69%)</title><rect x="57.9018%" y="213" width="2.6907%" height="15" fill="rgb(254,30,23)" fg:x="35356" fg:w="1643"/><text x="58.1518%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="60.5745%" y="197" width="0.0180%" height="15" fill="rgb(235,160,14)" fg:x="36988" fg:w="11"/><text x="60.8245%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,221 samples, 3.64%)</title><rect x="56.9601%" y="245" width="3.6373%" height="15" fill="rgb(212,155,44)" fg:x="34781" fg:w="2221"/><text x="57.2101%" y="255.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,964 samples, 3.22%)</title><rect x="57.3810%" y="229" width="3.2164%" height="15" fill="rgb(226,2,50)" fg:x="35038" fg:w="1964"/><text x="57.6310%" y="239.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (74 samples, 0.12%)</title><rect x="60.5974%" y="245" width="0.1212%" height="15" fill="rgb(234,177,6)" fg:x="37002" fg:w="74"/><text x="60.8474%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (190 samples, 0.31%)</title><rect x="60.7186%" y="229" width="0.3112%" height="15" fill="rgb(217,24,9)" fg:x="37076" fg:w="190"/><text x="60.9686%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="61.4867%" y="213" width="0.0197%" height="15" fill="rgb(220,13,46)" fg:x="37545" fg:w="12"/><text x="61.7367%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="61.5063%" y="213" width="0.0197%" height="15" fill="rgb(239,221,27)" fg:x="37557" fg:w="12"/><text x="61.7563%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="61.5260%" y="213" width="0.0147%" height="15" fill="rgb(222,198,25)" fg:x="37569" fg:w="9"/><text x="61.7760%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="61.8306%" y="181" width="0.0295%" height="15" fill="rgb(211,99,13)" fg:x="37755" fg:w="18"/><text x="62.0806%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="61.8601%" y="181" width="0.0229%" height="15" fill="rgb(232,111,31)" fg:x="37773" fg:w="14"/><text x="62.1101%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="61.9436%" y="165" width="0.0147%" height="15" fill="rgb(245,82,37)" fg:x="37824" fg:w="9"/><text x="62.1936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (119 samples, 0.19%)</title><rect x="62.1680%" y="149" width="0.1949%" height="15" fill="rgb(227,149,46)" fg:x="37961" fg:w="119"/><text x="62.4180%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (349 samples, 0.57%)</title><rect x="62.4693%" y="133" width="0.5716%" height="15" fill="rgb(218,36,50)" fg:x="38145" fg:w="349"/><text x="62.7193%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (39 samples, 0.06%)</title><rect x="63.0408%" y="133" width="0.0639%" height="15" fill="rgb(226,80,48)" fg:x="38494" fg:w="39"/><text x="63.2908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,075 samples, 1.76%)</title><rect x="61.6783%" y="197" width="1.7605%" height="15" fill="rgb(238,224,15)" fg:x="37662" fg:w="1075"/><text x="61.9283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (950 samples, 1.56%)</title><rect x="61.8830%" y="181" width="1.5558%" height="15" fill="rgb(241,136,10)" fg:x="37787" fg:w="950"/><text x="62.1330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (904 samples, 1.48%)</title><rect x="61.9583%" y="165" width="1.4805%" height="15" fill="rgb(208,32,45)" fg:x="37833" fg:w="904"/><text x="62.2083%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (654 samples, 1.07%)</title><rect x="62.3678%" y="149" width="1.0710%" height="15" fill="rgb(207,135,9)" fg:x="38083" fg:w="654"/><text x="62.6178%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (204 samples, 0.33%)</title><rect x="63.1047%" y="133" width="0.3341%" height="15" fill="rgb(206,86,44)" fg:x="38533" fg:w="204"/><text x="63.3547%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (80 samples, 0.13%)</title><rect x="63.4388%" y="197" width="0.1310%" height="15" fill="rgb(245,177,15)" fg:x="38737" fg:w="80"/><text x="63.6888%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (156 samples, 0.26%)</title><rect x="63.5698%" y="197" width="0.2555%" height="15" fill="rgb(206,64,50)" fg:x="38817" fg:w="156"/><text x="63.8198%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,705 samples, 2.79%)</title><rect x="61.0429%" y="229" width="2.7922%" height="15" fill="rgb(234,36,40)" fg:x="37274" fg:w="1705"/><text x="61.2929%" y="239.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,397 samples, 2.29%)</title><rect x="61.5473%" y="213" width="2.2878%" height="15" fill="rgb(213,64,8)" fg:x="37582" fg:w="1397"/><text x="61.7973%" y="223.50">r..</text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,926 samples, 3.15%)</title><rect x="60.7186%" y="245" width="3.1542%" height="15" fill="rgb(210,75,36)" fg:x="37076" fg:w="1926"/><text x="60.9686%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.04%)</title><rect x="63.8351%" y="229" width="0.0377%" height="15" fill="rgb(229,88,21)" fg:x="38979" fg:w="23"/><text x="64.0851%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (11 samples, 0.02%)</title><rect x="64.2200%" y="229" width="0.0180%" height="15" fill="rgb(252,204,47)" fg:x="39214" fg:w="11"/><text x="64.4700%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (36 samples, 0.06%)</title><rect x="64.7506%" y="213" width="0.0590%" height="15" fill="rgb(208,77,27)" fg:x="39538" fg:w="36"/><text x="65.0006%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (21 samples, 0.03%)</title><rect x="65.3876%" y="197" width="0.0344%" height="15" fill="rgb(221,76,26)" fg:x="39927" fg:w="21"/><text x="65.6376%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (46 samples, 0.08%)</title><rect x="65.9739%" y="181" width="0.0753%" height="15" fill="rgb(225,139,18)" fg:x="40285" fg:w="46"/><text x="66.2239%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (35 samples, 0.06%)</title><rect x="66.4439%" y="165" width="0.0573%" height="15" fill="rgb(230,137,11)" fg:x="40572" fg:w="35"/><text x="66.6939%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (31 samples, 0.05%)</title><rect x="66.6912%" y="149" width="0.0508%" height="15" fill="rgb(212,28,1)" fg:x="40723" fg:w="31"/><text x="66.9412%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (11 samples, 0.02%)</title><rect x="66.8206%" y="133" width="0.0180%" height="15" fill="rgb(248,164,17)" fg:x="40802" fg:w="11"/><text x="67.0706%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,815 samples, 2.97%)</title><rect x="63.8744%" y="245" width="2.9724%" height="15" fill="rgb(222,171,42)" fg:x="39003" fg:w="1815"/><text x="64.1244%" y="255.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,593 samples, 2.61%)</title><rect x="64.2380%" y="229" width="2.6088%" height="15" fill="rgb(243,84,45)" fg:x="39225" fg:w="1593"/><text x="64.4880%" y="239.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,244 samples, 2.04%)</title><rect x="64.8095%" y="213" width="2.0373%" height="15" fill="rgb(252,49,23)" fg:x="39574" fg:w="1244"/><text x="65.0595%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (870 samples, 1.42%)</title><rect x="65.4220%" y="197" width="1.4248%" height="15" fill="rgb(215,19,7)" fg:x="39948" fg:w="870"/><text x="65.6720%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (487 samples, 0.80%)</title><rect x="66.0493%" y="181" width="0.7976%" height="15" fill="rgb(238,81,41)" fg:x="40331" fg:w="487"/><text x="66.2993%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (211 samples, 0.35%)</title><rect x="66.5013%" y="165" width="0.3456%" height="15" fill="rgb(210,199,37)" fg:x="40607" fg:w="211"/><text x="66.7513%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (64 samples, 0.10%)</title><rect x="66.7420%" y="149" width="0.1048%" height="15" fill="rgb(244,192,49)" fg:x="40754" fg:w="64"/><text x="66.9920%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (530 samples, 0.87%)</title><rect x="67.9703%" y="229" width="0.8680%" height="15" fill="rgb(226,211,11)" fg:x="41504" fg:w="530"/><text x="68.2203%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,113 samples, 1.82%)</title><rect x="68.8382%" y="229" width="1.8227%" height="15" fill="rgb(236,162,54)" fg:x="42034" fg:w="1113"/><text x="69.0882%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,098 samples, 5.07%)</title><rect x="66.8468%" y="245" width="5.0735%" height="15" fill="rgb(220,229,9)" fg:x="40818" fg:w="3098"/><text x="67.0968%" y="255.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (769 samples, 1.26%)</title><rect x="70.6610%" y="229" width="1.2594%" height="15" fill="rgb(250,87,22)" fg:x="43147" fg:w="769"/><text x="70.9110%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (56 samples, 0.09%)</title><rect x="71.9203%" y="245" width="0.0917%" height="15" fill="rgb(239,43,17)" fg:x="43916" fg:w="56"/><text x="72.1703%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (12,940 samples, 21.19%)</title><rect x="51.4412%" y="261" width="21.1916%" height="15" fill="rgb(231,177,25)" fg:x="31411" fg:w="12940"/><text x="51.6912%" y="271.50">rust_qecp`rust_qecp::union_find_d..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (379 samples, 0.62%)</title><rect x="72.0121%" y="245" width="0.6207%" height="15" fill="rgb(219,179,1)" fg:x="43972" fg:w="379"/><text x="72.2621%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (62 samples, 0.10%)</title><rect x="76.3454%" y="245" width="0.1015%" height="15" fill="rgb(238,219,53)" fg:x="46618" fg:w="62"/><text x="76.5954%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="76.6172%" y="229" width="0.0147%" height="15" fill="rgb(232,167,36)" fg:x="46784" fg:w="9"/><text x="76.8672%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (91 samples, 0.15%)</title><rect x="76.6794%" y="213" width="0.1490%" height="15" fill="rgb(244,19,51)" fg:x="46822" fg:w="91"/><text x="76.9294%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="76.7761%" y="197" width="0.0524%" height="15" fill="rgb(224,6,22)" fg:x="46881" fg:w="32"/><text x="77.0261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (130 samples, 0.21%)</title><rect x="76.6319%" y="229" width="0.2129%" height="15" fill="rgb(224,145,5)" fg:x="46793" fg:w="130"/><text x="76.8819%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="76.8285%" y="213" width="0.0164%" height="15" fill="rgb(234,130,49)" fg:x="46913" fg:w="10"/><text x="77.0785%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (253 samples, 0.41%)</title><rect x="76.4469%" y="245" width="0.4143%" height="15" fill="rgb(254,6,2)" fg:x="46680" fg:w="253"/><text x="76.6969%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="76.8448%" y="229" width="0.0164%" height="15" fill="rgb(208,96,46)" fg:x="46923" fg:w="10"/><text x="77.0948%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.01%)</title><rect x="76.8465%" y="213" width="0.0147%" height="15" fill="rgb(239,3,39)" fg:x="46924" fg:w="9"/><text x="77.0965%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="76.8498%" y="197" width="0.0115%" height="15" fill="rgb(233,210,1)" fg:x="46926" fg:w="7"/><text x="77.0998%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="76.8612%" y="245" width="0.0409%" height="15" fill="rgb(244,137,37)" fg:x="46933" fg:w="25"/><text x="77.1112%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (147 samples, 0.24%)</title><rect x="77.1904%" y="229" width="0.2407%" height="15" fill="rgb(240,136,2)" fg:x="47134" fg:w="147"/><text x="77.4404%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (355 samples, 0.58%)</title><rect x="76.9022%" y="245" width="0.5814%" height="15" fill="rgb(239,18,37)" fg:x="46958" fg:w="355"/><text x="77.1522%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.05%)</title><rect x="77.4360%" y="229" width="0.0475%" height="15" fill="rgb(218,185,22)" fg:x="47284" fg:w="29"/><text x="77.6860%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (27 samples, 0.04%)</title><rect x="77.4393%" y="213" width="0.0442%" height="15" fill="rgb(225,218,4)" fg:x="47286" fg:w="27"/><text x="77.6893%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.02%)</title><rect x="77.4835%" y="245" width="0.0164%" height="15" fill="rgb(230,182,32)" fg:x="47313" fg:w="10"/><text x="77.7335%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (9 samples, 0.01%)</title><rect x="77.5114%" y="229" width="0.0147%" height="15" fill="rgb(242,56,43)" fg:x="47330" fg:w="9"/><text x="77.7614%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (20 samples, 0.03%)</title><rect x="77.4999%" y="245" width="0.0328%" height="15" fill="rgb(233,99,24)" fg:x="47323" fg:w="20"/><text x="77.7499%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="77.5965%" y="213" width="0.0115%" height="15" fill="rgb(234,209,42)" fg:x="47382" fg:w="7"/><text x="77.8465%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.08%)</title><rect x="77.5327%" y="245" width="0.0786%" height="15" fill="rgb(227,7,12)" fg:x="47343" fg:w="48"/><text x="77.7827%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.07%)</title><rect x="77.5425%" y="229" width="0.0688%" height="15" fill="rgb(245,203,43)" fg:x="47349" fg:w="42"/><text x="77.7925%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="77.6113%" y="245" width="0.0197%" height="15" fill="rgb(238,205,33)" fg:x="47391" fg:w="12"/><text x="77.8613%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (99 samples, 0.16%)</title><rect x="77.6309%" y="245" width="0.1621%" height="15" fill="rgb(231,56,7)" fg:x="47403" fg:w="99"/><text x="77.8809%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (37 samples, 0.06%)</title><rect x="77.7931%" y="245" width="0.0606%" height="15" fill="rgb(244,186,29)" fg:x="47502" fg:w="37"/><text x="78.0431%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (57 samples, 0.09%)</title><rect x="77.8684%" y="245" width="0.0933%" height="15" fill="rgb(234,111,31)" fg:x="47548" fg:w="57"/><text x="78.1184%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="77.9781%" y="213" width="0.0164%" height="15" fill="rgb(241,149,10)" fg:x="47615" fg:w="10"/><text x="78.2281%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (14 samples, 0.02%)</title><rect x="77.9945%" y="213" width="0.0229%" height="15" fill="rgb(249,206,44)" fg:x="47625" fg:w="14"/><text x="78.2445%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.05%)</title><rect x="77.9650%" y="229" width="0.0540%" height="15" fill="rgb(251,153,30)" fg:x="47607" fg:w="33"/><text x="78.2150%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.07%)</title><rect x="77.9617%" y="245" width="0.0655%" height="15" fill="rgb(239,152,38)" fg:x="47605" fg:w="40"/><text x="78.2117%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="78.0273%" y="245" width="0.0295%" height="15" fill="rgb(249,139,47)" fg:x="47645" fg:w="18"/><text x="78.2773%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,122 samples, 1.84%)</title><rect x="78.0567%" y="245" width="1.8375%" height="15" fill="rgb(244,64,35)" fg:x="47663" fg:w="1122"/><text x="78.3067%" y="255.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$memset (15 samples, 0.02%)</title><rect x="79.9008%" y="245" width="0.0246%" height="15" fill="rgb(216,46,15)" fg:x="48789" fg:w="15"/><text x="80.1508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="79.9695%" y="181" width="0.0164%" height="15" fill="rgb(250,74,19)" fg:x="48831" fg:w="10"/><text x="80.2195%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="80.0056%" y="149" width="0.0213%" height="15" fill="rgb(249,42,33)" fg:x="48853" fg:w="13"/><text x="80.2556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="80.0088%" y="133" width="0.0180%" height="15" fill="rgb(242,149,17)" fg:x="48855" fg:w="11"/><text x="80.2588%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="79.9974%" y="165" width="0.0311%" height="15" fill="rgb(244,29,21)" fg:x="48848" fg:w="19"/><text x="80.2474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (30 samples, 0.05%)</title><rect x="79.9859%" y="181" width="0.0491%" height="15" fill="rgb(220,130,37)" fg:x="48841" fg:w="30"/><text x="80.2359%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (57 samples, 0.09%)</title><rect x="79.9630%" y="197" width="0.0933%" height="15" fill="rgb(211,67,2)" fg:x="48827" fg:w="57"/><text x="80.2130%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.01%)</title><rect x="80.0432%" y="181" width="0.0131%" height="15" fill="rgb(235,68,52)" fg:x="48876" fg:w="8"/><text x="80.2932%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="80.0563%" y="197" width="0.0197%" height="15" fill="rgb(246,142,3)" fg:x="48884" fg:w="12"/><text x="80.3063%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (89 samples, 0.15%)</title><rect x="79.9319%" y="245" width="0.1458%" height="15" fill="rgb(241,25,7)" fg:x="48808" fg:w="89"/><text x="80.1819%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (83 samples, 0.14%)</title><rect x="79.9417%" y="229" width="0.1359%" height="15" fill="rgb(242,119,39)" fg:x="48814" fg:w="83"/><text x="80.1917%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (79 samples, 0.13%)</title><rect x="79.9482%" y="213" width="0.1294%" height="15" fill="rgb(241,98,45)" fg:x="48818" fg:w="79"/><text x="80.1982%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,125 samples, 3.48%)</title><rect x="80.0842%" y="245" width="3.4801%" height="15" fill="rgb(254,28,30)" fg:x="48901" fg:w="2125"/><text x="80.3342%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (183 samples, 0.30%)</title><rect x="83.5642%" y="245" width="0.2997%" height="15" fill="rgb(241,142,54)" fg:x="51026" fg:w="183"/><text x="83.8142%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (62 samples, 0.10%)</title><rect x="83.8639%" y="245" width="0.1015%" height="15" fill="rgb(222,85,15)" fg:x="51209" fg:w="62"/><text x="84.1139%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="84.1391%" y="213" width="0.0164%" height="15" fill="rgb(210,85,47)" fg:x="51377" fg:w="10"/><text x="84.3891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.14%)</title><rect x="84.3536%" y="197" width="0.1359%" height="15" fill="rgb(224,206,25)" fg:x="51508" fg:w="83"/><text x="84.6036%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="84.4273%" y="181" width="0.0622%" height="15" fill="rgb(243,201,19)" fg:x="51553" fg:w="38"/><text x="84.6773%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (207 samples, 0.34%)</title><rect x="84.1554%" y="213" width="0.3390%" height="15" fill="rgb(236,59,4)" fg:x="51387" fg:w="207"/><text x="84.4054%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (19 samples, 0.03%)</title><rect x="84.5125%" y="197" width="0.0311%" height="15" fill="rgb(254,179,45)" fg:x="51605" fg:w="19"/><text x="84.7625%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="84.5272%" y="181" width="0.0164%" height="15" fill="rgb(226,14,10)" fg:x="51614" fg:w="10"/><text x="84.7772%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="84.5698%" y="181" width="0.0213%" height="15" fill="rgb(244,27,41)" fg:x="51640" fg:w="13"/><text x="84.8198%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (369 samples, 0.60%)</title><rect x="84.0556%" y="229" width="0.6043%" height="15" fill="rgb(235,35,32)" fg:x="51326" fg:w="369"/><text x="84.3056%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 0.17%)</title><rect x="84.4944%" y="213" width="0.1654%" height="15" fill="rgb(218,68,31)" fg:x="51594" fg:w="101"/><text x="84.7444%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (70 samples, 0.11%)</title><rect x="84.5452%" y="197" width="0.1146%" height="15" fill="rgb(207,120,37)" fg:x="51625" fg:w="70"/><text x="84.7952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.07%)</title><rect x="84.5911%" y="181" width="0.0688%" height="15" fill="rgb(227,98,0)" fg:x="51653" fg:w="42"/><text x="84.8411%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="84.6599%" y="229" width="0.0344%" height="15" fill="rgb(207,7,3)" fg:x="51695" fg:w="21"/><text x="84.9099%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (452 samples, 0.74%)</title><rect x="83.9655%" y="245" width="0.7402%" height="15" fill="rgb(206,98,19)" fg:x="51271" fg:w="452"/><text x="84.2155%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (31 samples, 0.05%)</title><rect x="84.7057%" y="245" width="0.0508%" height="15" fill="rgb(217,5,26)" fg:x="51723" fg:w="31"/><text x="84.9557%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,414 samples, 12.14%)</title><rect x="72.6327%" y="261" width="12.1418%" height="15" fill="rgb(235,190,38)" fg:x="44351" fg:w="7414"/><text x="72.8827%" y="271.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (11 samples, 0.02%)</title><rect x="84.7565%" y="245" width="0.0180%" height="15" fill="rgb(247,86,24)" fg:x="51754" fg:w="11"/><text x="85.0065%" y="255.50"></text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (18 samples, 0.03%)</title><rect x="84.7745%" y="261" width="0.0295%" height="15" fill="rgb(205,101,16)" fg:x="51765" fg:w="18"/><text x="85.0245%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,633 samples, 82.92%)</title><rect x="1.8850%" y="293" width="82.9206%" height="15" fill="rgb(246,168,33)" fg:x="1151" fg:w="50633"/><text x="2.1350%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (48,523 samples, 79.47%)</title><rect x="5.3405%" y="277" width="79.4651%" height="15" fill="rgb(231,114,1)" fg:x="3261" fg:w="48523"/><text x="5.5905%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (816 samples, 1.34%)</title><rect x="84.8056%" y="293" width="1.3363%" height="15" fill="rgb(207,184,53)" fg:x="51784" fg:w="816"/><text x="85.0556%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (218 samples, 0.36%)</title><rect x="86.1420%" y="293" width="0.3570%" height="15" fill="rgb(224,95,51)" fg:x="52600" fg:w="218"/><text x="86.3920%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (83 samples, 0.14%)</title><rect x="86.3630%" y="277" width="0.1359%" height="15" fill="rgb(212,188,45)" fg:x="52735" fg:w="83"/><text x="86.6130%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,313 samples, 7.06%)</title><rect x="86.4990%" y="293" width="7.0633%" height="15" fill="rgb(223,154,38)" fg:x="52818" fg:w="4313"/><text x="86.7490%" y="303.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (102 samples, 0.17%)</title><rect x="93.5672%" y="277" width="0.1670%" height="15" fill="rgb(251,22,52)" fg:x="57134" fg:w="102"/><text x="93.8172%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (393 samples, 0.64%)</title><rect x="93.5623%" y="293" width="0.6436%" height="15" fill="rgb(229,209,22)" fg:x="57131" fg:w="393"/><text x="93.8123%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (288 samples, 0.47%)</title><rect x="93.7342%" y="277" width="0.4717%" height="15" fill="rgb(234,138,34)" fg:x="57236" fg:w="288"/><text x="93.9842%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (49 samples, 0.08%)</title><rect x="94.2059%" y="293" width="0.0802%" height="15" fill="rgb(212,95,11)" fg:x="57524" fg:w="49"/><text x="94.4559%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,485 samples, 5.71%)</title><rect x="94.2878%" y="293" width="5.7073%" height="15" fill="rgb(240,179,47)" fg:x="57574" fg:w="3485"/><text x="94.5378%" y="303.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,698 samples, 4.42%)</title><rect x="95.5766%" y="277" width="4.4185%" height="15" fill="rgb(240,163,11)" fg:x="58361" fg:w="2698"/><text x="95.8266%" y="287.50">rust_..</text></g><g><title>all (61,062 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="61062"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,958 samples, 98.19%)</title><rect x="1.8080%" y="373" width="98.1920%" height="15" fill="rgb(232,164,16)" fg:x="1104" fg:w="59958"/><text x="2.0580%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,958 samples, 98.19%)</title><rect x="1.8080%" y="357" width="98.1920%" height="15" fill="rgb(244,205,15)" fg:x="1104" fg:w="59958"/><text x="2.0580%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,958 samples, 98.19%)</title><rect x="1.8080%" y="341" width="98.1920%" height="15" fill="rgb(223,117,47)" fg:x="1104" fg:w="59958"/><text x="2.0580%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,958 samples, 98.19%)</title><rect x="1.8080%" y="325" width="98.1920%" height="15" fill="rgb(244,107,35)" fg:x="1104" fg:w="59958"/><text x="2.0580%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,957 samples, 98.19%)</title><rect x="1.8096%" y="309" width="98.1904%" height="15" fill="rgb(205,140,8)" fg:x="1105" fg:w="59957"/><text x="2.0596%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>