<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60255"><g><title>libsystem_kernel.dylib`write (15 samples, 0.02%)</title><rect x="0.0282%" y="37" width="0.0249%" height="15" fill="rgb(227,0,7)" fg:x="17" fg:w="15"/><text x="0.2782%" y="47.50"></text></g><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (16 samples, 0.03%)</title><rect x="0.0282%" y="53" width="0.0266%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="16"/><text x="0.2782%" y="63.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (22 samples, 0.04%)</title><rect x="0.0266%" y="69" width="0.0365%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="22"/><text x="0.2766%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (15 samples, 0.02%)</title><rect x="0.0647%" y="69" width="0.0249%" height="15" fill="rgb(248,212,6)" fg:x="39" fg:w="15"/><text x="0.3147%" y="79.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (9 samples, 0.01%)</title><rect x="0.0747%" y="53" width="0.0149%" height="15" fill="rgb(208,68,35)" fg:x="45" fg:w="9"/><text x="0.3247%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (12 samples, 0.02%)</title><rect x="0.0963%" y="53" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="58" fg:w="12"/><text x="0.3463%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (18 samples, 0.03%)</title><rect x="0.0896%" y="69" width="0.0299%" height="15" fill="rgb(207,160,47)" fg:x="54" fg:w="18"/><text x="0.3396%" y="79.50"></text></g><g><title>dyld`start (73 samples, 0.12%)</title><rect x="0.0000%" y="309" width="0.1212%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="73"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (72 samples, 0.12%)</title><rect x="0.0017%" y="293" width="0.1195%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="72"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (72 samples, 0.12%)</title><rect x="0.0017%" y="277" width="0.1195%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="72"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (72 samples, 0.12%)</title><rect x="0.0017%" y="261" width="0.1195%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="72"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (72 samples, 0.12%)</title><rect x="0.0017%" y="245" width="0.1195%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="72"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (72 samples, 0.12%)</title><rect x="0.0017%" y="229" width="0.1195%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="72"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (72 samples, 0.12%)</title><rect x="0.0017%" y="213" width="0.1195%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="72"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (72 samples, 0.12%)</title><rect x="0.0017%" y="197" width="0.1195%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="72"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (72 samples, 0.12%)</title><rect x="0.0017%" y="181" width="0.1195%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="72"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (72 samples, 0.12%)</title><rect x="0.0017%" y="165" width="0.1195%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="72"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.12%)</title><rect x="0.0017%" y="149" width="0.1195%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="72"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (72 samples, 0.12%)</title><rect x="0.0017%" y="133" width="0.1195%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="72"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.12%)</title><rect x="0.0017%" y="117" width="0.1195%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="72"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (71 samples, 0.12%)</title><rect x="0.0033%" y="101" width="0.1178%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="71"/><text x="0.2533%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (69 samples, 0.11%)</title><rect x="0.0066%" y="85" width="0.1145%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="69"/><text x="0.2566%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (15 samples, 0.02%)</title><rect x="0.1361%" y="229" width="0.0249%" height="15" fill="rgb(221,5,38)" fg:x="82" fg:w="15"/><text x="0.3861%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="0.1842%" y="229" width="0.0116%" height="15" fill="rgb(247,18,42)" fg:x="111" fg:w="7"/><text x="0.4342%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.02%)</title><rect x="0.2041%" y="229" width="0.0199%" height="15" fill="rgb(241,131,45)" fg:x="123" fg:w="12"/><text x="0.4541%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="0.2556%" y="213" width="0.0349%" height="15" fill="rgb(249,31,29)" fg:x="154" fg:w="21"/><text x="0.5056%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="0.3020%" y="213" width="0.0232%" height="15" fill="rgb(225,111,53)" fg:x="182" fg:w="14"/><text x="0.5520%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="0.3469%" y="213" width="0.0398%" height="15" fill="rgb(238,160,17)" fg:x="209" fg:w="24"/><text x="0.5969%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 0.59%)</title><rect x="0.3867%" y="213" width="0.5892%" height="15" fill="rgb(214,148,48)" fg:x="233" fg:w="355"/><text x="0.6367%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="0.9891%" y="149" width="0.0116%" height="15" fill="rgb(232,36,49)" fg:x="596" fg:w="7"/><text x="1.2391%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.02%)</title><rect x="0.9891%" y="181" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="596" fg:w="10"/><text x="1.2391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="0.9891%" y="165" width="0.0166%" height="15" fill="rgb(229,88,8)" fg:x="596" fg:w="10"/><text x="1.2391%" y="175.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (19 samples, 0.03%)</title><rect x="0.9759%" y="213" width="0.0315%" height="15" fill="rgb(213,181,19)" fg:x="588" fg:w="19"/><text x="1.2259%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="0.9891%" y="197" width="0.0183%" height="15" fill="rgb(254,191,54)" fg:x="596" fg:w="11"/><text x="1.2391%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="1.0140%" y="213" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="611" fg:w="7"/><text x="1.2640%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="1.0140%" y="197" width="0.0116%" height="15" fill="rgb(233,36,39)" fg:x="611" fg:w="7"/><text x="1.2640%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (563 samples, 0.93%)</title><rect x="1.0306%" y="213" width="0.9344%" height="15" fill="rgb(226,3,54)" fg:x="621" fg:w="563"/><text x="1.2806%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (93 samples, 0.15%)</title><rect x="1.9650%" y="213" width="0.1543%" height="15" fill="rgb(245,192,40)" fg:x="1184" fg:w="93"/><text x="2.2150%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (50 samples, 0.08%)</title><rect x="2.1193%" y="213" width="0.0830%" height="15" fill="rgb(238,167,29)" fg:x="1277" fg:w="50"/><text x="2.3693%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="2.4330%" y="165" width="0.0282%" height="15" fill="rgb(232,182,51)" fg:x="1466" fg:w="17"/><text x="2.6830%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="2.4380%" y="149" width="0.0232%" height="15" fill="rgb(231,60,39)" fg:x="1469" fg:w="14"/><text x="2.6880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="2.4330%" y="197" width="0.0299%" height="15" fill="rgb(208,69,12)" fg:x="1466" fg:w="18"/><text x="2.6830%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="2.4330%" y="181" width="0.0299%" height="15" fill="rgb(235,93,37)" fg:x="1466" fg:w="18"/><text x="2.6830%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (158 samples, 0.26%)</title><rect x="2.2139%" y="213" width="0.2622%" height="15" fill="rgb(213,116,39)" fg:x="1334" fg:w="158"/><text x="2.4639%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="2.4645%" y="197" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="1485" fg:w="7"/><text x="2.7145%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (112 samples, 0.19%)</title><rect x="10.2879%" y="197" width="0.1859%" height="15" fill="rgb(206,96,30)" fg:x="6199" fg:w="112"/><text x="10.5379%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (414 samples, 0.69%)</title><rect x="10.4738%" y="197" width="0.6871%" height="15" fill="rgb(218,138,4)" fg:x="6311" fg:w="414"/><text x="10.7238%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="11.1609%" y="197" width="0.0149%" height="15" fill="rgb(250,191,14)" fg:x="6725" fg:w="9"/><text x="11.4109%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (89 samples, 0.15%)</title><rect x="11.1758%" y="197" width="0.1477%" height="15" fill="rgb(239,60,40)" fg:x="6734" fg:w="89"/><text x="11.4258%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (116 samples, 0.19%)</title><rect x="11.3235%" y="197" width="0.1925%" height="15" fill="rgb(206,27,48)" fg:x="6823" fg:w="116"/><text x="11.5735%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="11.5642%" y="181" width="0.0116%" height="15" fill="rgb(225,35,8)" fg:x="6968" fg:w="7"/><text x="11.8142%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (47 samples, 0.08%)</title><rect x="11.5161%" y="197" width="0.0780%" height="15" fill="rgb(250,213,24)" fg:x="6939" fg:w="47"/><text x="11.7661%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="11.5824%" y="181" width="0.0116%" height="15" fill="rgb(247,123,22)" fg:x="6979" fg:w="7"/><text x="11.8324%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.02%)</title><rect x="11.5941%" y="197" width="0.0216%" height="15" fill="rgb(231,138,38)" fg:x="6986" fg:w="13"/><text x="11.8441%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (117 samples, 0.19%)</title><rect x="11.6156%" y="197" width="0.1942%" height="15" fill="rgb(231,145,46)" fg:x="6999" fg:w="117"/><text x="11.8656%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.07%)</title><rect x="11.8098%" y="197" width="0.0697%" height="15" fill="rgb(251,118,11)" fg:x="7116" fg:w="42"/><text x="12.0598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.02%)</title><rect x="11.8862%" y="197" width="0.0216%" height="15" fill="rgb(217,147,25)" fg:x="7162" fg:w="13"/><text x="12.1362%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.20%)</title><rect x="11.9177%" y="197" width="0.1958%" height="15" fill="rgb(247,81,37)" fg:x="7181" fg:w="118"/><text x="12.1677%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="12.1135%" y="197" width="0.0315%" height="15" fill="rgb(209,12,38)" fg:x="7299" fg:w="19"/><text x="12.3635%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (103 samples, 0.17%)</title><rect x="12.1451%" y="197" width="0.1709%" height="15" fill="rgb(227,1,9)" fg:x="7318" fg:w="103"/><text x="12.3951%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,618 samples, 4.34%)</title><rect x="12.3160%" y="197" width="4.3449%" height="15" fill="rgb(248,47,43)" fg:x="7421" fg:w="2618"/><text x="12.5660%" y="207.50">rust_..</text></g><g><title>rust_qecp`DYLD-STUB$$free (80 samples, 0.13%)</title><rect x="16.6609%" y="197" width="0.1328%" height="15" fill="rgb(221,10,30)" fg:x="10039" fg:w="80"/><text x="16.9109%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="16.7986%" y="197" width="0.0116%" height="15" fill="rgb(210,229,1)" fg:x="10122" fg:w="7"/><text x="17.0486%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (14 samples, 0.02%)</title><rect x="16.8119%" y="197" width="0.0232%" height="15" fill="rgb(222,148,37)" fg:x="10130" fg:w="14"/><text x="17.0619%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="16.8501%" y="197" width="0.0166%" height="15" fill="rgb(234,67,33)" fg:x="10153" fg:w="10"/><text x="17.1001%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="16.8550%" y="181" width="0.0116%" height="15" fill="rgb(247,98,35)" fg:x="10156" fg:w="7"/><text x="17.1050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="16.9861%" y="181" width="0.0133%" height="15" fill="rgb(247,138,52)" fg:x="10235" fg:w="8"/><text x="17.2361%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (7 samples, 0.01%)</title><rect x="17.0027%" y="181" width="0.0116%" height="15" fill="rgb(213,79,30)" fg:x="10245" fg:w="7"/><text x="17.2527%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="17.0409%" y="133" width="0.0166%" height="15" fill="rgb(246,177,23)" fg:x="10268" fg:w="10"/><text x="17.2909%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="17.0359%" y="149" width="0.0266%" height="15" fill="rgb(230,62,27)" fg:x="10265" fg:w="16"/><text x="17.2859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="17.0293%" y="165" width="0.0382%" height="15" fill="rgb(216,154,8)" fg:x="10261" fg:w="23"/><text x="17.2793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="17.1538%" y="133" width="0.0249%" height="15" fill="rgb(244,35,45)" fg:x="10336" fg:w="15"/><text x="17.4038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="17.1969%" y="117" width="0.0183%" height="15" fill="rgb(251,115,12)" fg:x="10362" fg:w="11"/><text x="17.4469%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="17.2168%" y="101" width="0.0315%" height="15" fill="rgb(240,54,50)" fg:x="10374" fg:w="19"/><text x="17.4668%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="17.2318%" y="85" width="0.0166%" height="15" fill="rgb(233,84,52)" fg:x="10383" fg:w="10"/><text x="17.4818%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="17.2152%" y="117" width="0.0349%" height="15" fill="rgb(207,117,47)" fg:x="10373" fg:w="21"/><text x="17.4652%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="17.2500%" y="117" width="0.0133%" height="15" fill="rgb(249,43,39)" fg:x="10394" fg:w="8"/><text x="17.5000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="17.2749%" y="85" width="0.0216%" height="15" fill="rgb(209,38,44)" fg:x="10409" fg:w="13"/><text x="17.5249%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.05%)</title><rect x="17.2633%" y="117" width="0.0548%" height="15" fill="rgb(236,212,23)" fg:x="10402" fg:w="33"/><text x="17.5133%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.05%)</title><rect x="17.2683%" y="101" width="0.0498%" height="15" fill="rgb(242,79,21)" fg:x="10405" fg:w="30"/><text x="17.5183%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.02%)</title><rect x="17.2965%" y="85" width="0.0216%" height="15" fill="rgb(211,96,35)" fg:x="10422" fg:w="13"/><text x="17.5465%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (85 samples, 0.14%)</title><rect x="17.1787%" y="133" width="0.1411%" height="15" fill="rgb(253,215,40)" fg:x="10351" fg:w="85"/><text x="17.4287%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.06%)</title><rect x="17.3430%" y="117" width="0.0597%" height="15" fill="rgb(211,81,21)" fg:x="10450" fg:w="36"/><text x="17.5930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="17.3911%" y="101" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="10479" fg:w="7"/><text x="17.6411%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.03%)</title><rect x="17.4027%" y="117" width="0.0332%" height="15" fill="rgb(235,213,38)" fg:x="10486" fg:w="20"/><text x="17.6527%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="17.4127%" y="101" width="0.0232%" height="15" fill="rgb(237,122,38)" fg:x="10492" fg:w="14"/><text x="17.6627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (16 samples, 0.03%)</title><rect x="17.4442%" y="117" width="0.0266%" height="15" fill="rgb(244,218,35)" fg:x="10511" fg:w="16"/><text x="17.6942%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (7 samples, 0.01%)</title><rect x="17.4707%" y="117" width="0.0116%" height="15" fill="rgb(240,68,47)" fg:x="10527" fg:w="7"/><text x="17.7207%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.04%)</title><rect x="17.5156%" y="69" width="0.0365%" height="15" fill="rgb(210,16,53)" fg:x="10554" fg:w="22"/><text x="17.7656%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (52 samples, 0.09%)</title><rect x="17.4890%" y="101" width="0.0863%" height="15" fill="rgb(235,124,12)" fg:x="10538" fg:w="52"/><text x="17.7390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (42 samples, 0.07%)</title><rect x="17.5056%" y="85" width="0.0697%" height="15" fill="rgb(224,169,11)" fg:x="10548" fg:w="42"/><text x="17.7556%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="17.5570%" y="69" width="0.0183%" height="15" fill="rgb(250,166,2)" fg:x="10579" fg:w="11"/><text x="17.8070%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (57 samples, 0.09%)</title><rect x="17.4824%" y="117" width="0.0946%" height="15" fill="rgb(242,216,29)" fg:x="10534" fg:w="57"/><text x="17.7324%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (154 samples, 0.26%)</title><rect x="17.3297%" y="133" width="0.2556%" height="15" fill="rgb(230,116,27)" fg:x="10442" fg:w="154"/><text x="17.5797%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (375 samples, 0.62%)</title><rect x="17.1255%" y="149" width="0.6224%" height="15" fill="rgb(228,99,48)" fg:x="10319" fg:w="375"/><text x="17.3755%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (95 samples, 0.16%)</title><rect x="17.5902%" y="133" width="0.1577%" height="15" fill="rgb(253,11,6)" fg:x="10599" fg:w="95"/><text x="17.8402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="17.7479%" y="149" width="0.0315%" height="15" fill="rgb(247,143,39)" fg:x="10694" fg:w="19"/><text x="17.9979%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="17.7794%" y="149" width="0.0133%" height="15" fill="rgb(236,97,10)" fg:x="10713" fg:w="8"/><text x="18.0294%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (448 samples, 0.74%)</title><rect x="17.0841%" y="165" width="0.7435%" height="15" fill="rgb(233,208,19)" fg:x="10294" fg:w="448"/><text x="17.3341%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="17.8010%" y="149" width="0.0266%" height="15" fill="rgb(216,164,2)" fg:x="10726" fg:w="16"/><text x="18.0510%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="17.8077%" y="133" width="0.0199%" height="15" fill="rgb(220,129,5)" fg:x="10730" fg:w="12"/><text x="18.0577%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (585 samples, 0.97%)</title><rect x="16.8667%" y="197" width="0.9709%" height="15" fill="rgb(242,17,10)" fg:x="10163" fg:w="585"/><text x="17.1167%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (492 samples, 0.82%)</title><rect x="17.0210%" y="181" width="0.8165%" height="15" fill="rgb(242,107,0)" fg:x="10256" fg:w="492"/><text x="17.2710%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (10 samples, 0.02%)</title><rect x="17.8375%" y="197" width="0.0166%" height="15" fill="rgb(251,28,31)" fg:x="10748" fg:w="10"/><text x="18.0875%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.03%)</title><rect x="18.0018%" y="181" width="0.0266%" height="15" fill="rgb(233,223,10)" fg:x="10847" fg:w="16"/><text x="18.2518%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (219 samples, 0.36%)</title><rect x="18.7221%" y="165" width="0.3635%" height="15" fill="rgb(215,21,27)" fg:x="11281" fg:w="219"/><text x="18.9721%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (50 samples, 0.08%)</title><rect x="19.0856%" y="165" width="0.0830%" height="15" fill="rgb(232,23,21)" fg:x="11500" fg:w="50"/><text x="19.3356%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (41 samples, 0.07%)</title><rect x="19.1685%" y="165" width="0.0680%" height="15" fill="rgb(244,5,23)" fg:x="11550" fg:w="41"/><text x="19.4185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (140 samples, 0.23%)</title><rect x="19.2366%" y="165" width="0.2323%" height="15" fill="rgb(226,81,46)" fg:x="11591" fg:w="140"/><text x="19.4866%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (98 samples, 0.16%)</title><rect x="19.3063%" y="149" width="0.1626%" height="15" fill="rgb(247,70,30)" fg:x="11633" fg:w="98"/><text x="19.5563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (870 samples, 1.44%)</title><rect x="18.0284%" y="181" width="1.4439%" height="15" fill="rgb(212,68,19)" fg:x="10863" fg:w="870"/><text x="18.2784%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (168 samples, 0.28%)</title><rect x="19.8407%" y="165" width="0.2788%" height="15" fill="rgb(240,187,13)" fg:x="11955" fg:w="168"/><text x="20.0907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (41 samples, 0.07%)</title><rect x="20.1195%" y="165" width="0.0680%" height="15" fill="rgb(223,113,26)" fg:x="12123" fg:w="41"/><text x="20.3695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (36 samples, 0.06%)</title><rect x="20.1875%" y="165" width="0.0597%" height="15" fill="rgb(206,192,2)" fg:x="12164" fg:w="36"/><text x="20.4375%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (723 samples, 1.20%)</title><rect x="19.4722%" y="181" width="1.1999%" height="15" fill="rgb(241,108,4)" fg:x="11733" fg:w="723"/><text x="19.7222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (256 samples, 0.42%)</title><rect x="20.2473%" y="165" width="0.4249%" height="15" fill="rgb(247,173,49)" fg:x="12200" fg:w="256"/><text x="20.4973%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (95 samples, 0.16%)</title><rect x="20.9559%" y="149" width="0.1577%" height="15" fill="rgb(224,114,35)" fg:x="12627" fg:w="95"/><text x="21.2059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (372 samples, 0.62%)</title><rect x="20.6721%" y="181" width="0.6174%" height="15" fill="rgb(245,159,27)" fg:x="12456" fg:w="372"/><text x="20.9221%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (317 samples, 0.53%)</title><rect x="20.7634%" y="165" width="0.5261%" height="15" fill="rgb(245,172,44)" fg:x="12511" fg:w="317"/><text x="21.0134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (106 samples, 0.18%)</title><rect x="21.1136%" y="149" width="0.1759%" height="15" fill="rgb(236,23,11)" fg:x="12722" fg:w="106"/><text x="21.3636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (59 samples, 0.10%)</title><rect x="21.2895%" y="181" width="0.0979%" height="15" fill="rgb(205,117,38)" fg:x="12828" fg:w="59"/><text x="21.5395%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (177 samples, 0.29%)</title><rect x="21.6663%" y="149" width="0.2938%" height="15" fill="rgb(237,72,25)" fg:x="13055" fg:w="177"/><text x="21.9163%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (178 samples, 0.30%)</title><rect x="21.6663%" y="165" width="0.2954%" height="15" fill="rgb(244,70,9)" fg:x="13055" fg:w="178"/><text x="21.9163%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (347 samples, 0.58%)</title><rect x="21.3874%" y="181" width="0.5759%" height="15" fill="rgb(217,125,39)" fg:x="12887" fg:w="347"/><text x="21.6374%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (48 samples, 0.08%)</title><rect x="21.9633%" y="181" width="0.0797%" height="15" fill="rgb(235,36,10)" fg:x="13234" fg:w="48"/><text x="22.2133%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="22.0513%" y="181" width="0.0199%" height="15" fill="rgb(251,123,47)" fg:x="13287" fg:w="12"/><text x="22.3013%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (54 samples, 0.09%)</title><rect x="22.0712%" y="181" width="0.0896%" height="15" fill="rgb(221,13,13)" fg:x="13299" fg:w="54"/><text x="22.3212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.04%)</title><rect x="22.1608%" y="181" width="0.0431%" height="15" fill="rgb(238,131,9)" fg:x="13353" fg:w="26"/><text x="22.4108%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="22.2040%" y="181" width="0.0232%" height="15" fill="rgb(211,50,8)" fg:x="13379" fg:w="14"/><text x="22.4540%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (14 samples, 0.02%)</title><rect x="22.2272%" y="181" width="0.0232%" height="15" fill="rgb(245,182,24)" fg:x="13393" fg:w="14"/><text x="22.4772%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (204 samples, 0.34%)</title><rect x="22.2952%" y="165" width="0.3386%" height="15" fill="rgb(242,14,37)" fg:x="13434" fg:w="204"/><text x="22.5452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (102 samples, 0.17%)</title><rect x="22.4645%" y="149" width="0.1693%" height="15" fill="rgb(246,228,12)" fg:x="13536" fg:w="102"/><text x="22.7145%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="22.6338%" y="165" width="0.0166%" height="15" fill="rgb(213,55,15)" fg:x="13638" fg:w="10"/><text x="22.8838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (65 samples, 0.11%)</title><rect x="22.6504%" y="165" width="0.1079%" height="15" fill="rgb(209,9,3)" fg:x="13648" fg:w="65"/><text x="22.9004%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,970 samples, 4.93%)</title><rect x="17.8541%" y="197" width="4.9291%" height="15" fill="rgb(230,59,30)" fg:x="10758" fg:w="2970"/><text x="18.1041%" y="207.50">rust_q..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (321 samples, 0.53%)</title><rect x="22.2504%" y="181" width="0.5327%" height="15" fill="rgb(209,121,21)" fg:x="13407" fg:w="321"/><text x="22.5004%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="22.7583%" y="165" width="0.0249%" height="15" fill="rgb(220,109,13)" fg:x="13713" fg:w="15"/><text x="23.0083%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (138 samples, 0.23%)</title><rect x="22.7832%" y="197" width="0.2290%" height="15" fill="rgb(232,18,1)" fg:x="13728" fg:w="138"/><text x="23.0332%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (75 samples, 0.12%)</title><rect x="22.8877%" y="181" width="0.1245%" height="15" fill="rgb(215,41,42)" fg:x="13791" fg:w="75"/><text x="23.1377%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (24 samples, 0.04%)</title><rect x="22.9724%" y="165" width="0.0398%" height="15" fill="rgb(224,123,36)" fg:x="13842" fg:w="24"/><text x="23.2224%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="23.0006%" y="149" width="0.0116%" height="15" fill="rgb(240,125,3)" fg:x="13859" fg:w="7"/><text x="23.2506%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (140 samples, 0.23%)</title><rect x="23.0205%" y="197" width="0.2323%" height="15" fill="rgb(205,98,50)" fg:x="13871" fg:w="140"/><text x="23.2705%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,224 samples, 5.35%)</title><rect x="23.2528%" y="197" width="5.3506%" height="15" fill="rgb(205,185,37)" fg:x="14011" fg:w="3224"/><text x="23.5028%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (328 samples, 0.54%)</title><rect x="28.6034%" y="197" width="0.5444%" height="15" fill="rgb(238,207,15)" fg:x="17235" fg:w="328"/><text x="28.8534%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="29.4781%" y="165" width="0.0216%" height="15" fill="rgb(213,199,42)" fg:x="17762" fg:w="13"/><text x="29.7281%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (40 samples, 0.07%)</title><rect x="29.4631%" y="181" width="0.0664%" height="15" fill="rgb(235,201,11)" fg:x="17753" fg:w="40"/><text x="29.7131%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.02%)</title><rect x="29.5063%" y="165" width="0.0232%" height="15" fill="rgb(207,46,11)" fg:x="17779" fg:w="14"/><text x="29.7563%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.02%)</title><rect x="29.5079%" y="149" width="0.0216%" height="15" fill="rgb(241,35,35)" fg:x="17780" fg:w="13"/><text x="29.7579%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="29.5544%" y="165" width="0.0116%" height="15" fill="rgb(243,32,47)" fg:x="17808" fg:w="7"/><text x="29.8044%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.04%)</title><rect x="29.5295%" y="181" width="0.0398%" height="15" fill="rgb(247,202,23)" fg:x="17793" fg:w="24"/><text x="29.7795%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.03%)</title><rect x="29.5693%" y="181" width="0.0349%" height="15" fill="rgb(219,102,11)" fg:x="17817" fg:w="21"/><text x="29.8193%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.03%)</title><rect x="29.5743%" y="165" width="0.0299%" height="15" fill="rgb(243,110,44)" fg:x="17820" fg:w="18"/><text x="29.8243%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="29.6241%" y="181" width="0.0216%" height="15" fill="rgb(222,74,54)" fg:x="17850" fg:w="13"/><text x="29.8741%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (253 samples, 0.42%)</title><rect x="29.6556%" y="181" width="0.4199%" height="15" fill="rgb(216,99,12)" fg:x="17869" fg:w="253"/><text x="29.9056%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="30.7377%" y="149" width="0.0299%" height="15" fill="rgb(226,22,26)" fg:x="18521" fg:w="18"/><text x="30.9877%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="30.7443%" y="133" width="0.0232%" height="15" fill="rgb(217,163,10)" fg:x="18525" fg:w="14"/><text x="30.9943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="30.8207%" y="101" width="0.0183%" height="15" fill="rgb(213,25,53)" fg:x="18571" fg:w="11"/><text x="31.0707%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (42 samples, 0.07%)</title><rect x="30.7808%" y="133" width="0.0697%" height="15" fill="rgb(252,105,26)" fg:x="18547" fg:w="42"/><text x="31.0308%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (35 samples, 0.06%)</title><rect x="30.7925%" y="117" width="0.0581%" height="15" fill="rgb(220,39,43)" fg:x="18554" fg:w="35"/><text x="31.0425%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.11%)</title><rect x="30.7692%" y="149" width="0.1112%" height="15" fill="rgb(229,68,48)" fg:x="18540" fg:w="67"/><text x="31.0192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.03%)</title><rect x="30.8506%" y="133" width="0.0299%" height="15" fill="rgb(252,8,32)" fg:x="18589" fg:w="18"/><text x="31.1006%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="30.8671%" y="117" width="0.0133%" height="15" fill="rgb(223,20,43)" fg:x="18599" fg:w="8"/><text x="31.1171%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (100 samples, 0.17%)</title><rect x="30.7161%" y="165" width="0.1660%" height="15" fill="rgb(229,81,49)" fg:x="18508" fg:w="100"/><text x="30.9661%" y="175.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (102 samples, 0.17%)</title><rect x="30.8854%" y="165" width="0.1693%" height="15" fill="rgb(236,28,36)" fg:x="18610" fg:w="102"/><text x="31.1354%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (474 samples, 0.79%)</title><rect x="31.0547%" y="165" width="0.7867%" height="15" fill="rgb(249,185,26)" fg:x="18712" fg:w="474"/><text x="31.3047%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,242 samples, 3.72%)</title><rect x="29.1478%" y="197" width="3.7209%" height="15" fill="rgb(249,174,33)" fg:x="17563" fg:w="2242"/><text x="29.3978%" y="207.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,683 samples, 2.79%)</title><rect x="30.0755%" y="181" width="2.7931%" height="15" fill="rgb(233,201,37)" fg:x="18122" fg:w="1683"/><text x="30.3255%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (619 samples, 1.03%)</title><rect x="31.8413%" y="165" width="1.0273%" height="15" fill="rgb(221,78,26)" fg:x="19186" fg:w="619"/><text x="32.0913%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (11 samples, 0.02%)</title><rect x="32.8686%" y="197" width="0.0183%" height="15" fill="rgb(250,127,30)" fg:x="19805" fg:w="11"/><text x="33.1186%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (16 samples, 0.03%)</title><rect x="32.8902%" y="197" width="0.0266%" height="15" fill="rgb(230,49,44)" fg:x="19818" fg:w="16"/><text x="33.1402%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (196 samples, 0.33%)</title><rect x="32.9184%" y="197" width="0.3253%" height="15" fill="rgb(229,67,23)" fg:x="19835" fg:w="196"/><text x="33.1684%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,883 samples, 8.10%)</title><rect x="37.7794%" y="181" width="8.1039%" height="15" fill="rgb(249,83,47)" fg:x="22764" fg:w="4883"/><text x="38.0294%" y="191.50">rust_qecp`&lt;..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="45.9165%" y="117" width="0.0216%" height="15" fill="rgb(215,43,3)" fg:x="27667" fg:w="13"/><text x="46.1665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="45.9265%" y="101" width="0.0116%" height="15" fill="rgb(238,154,13)" fg:x="27673" fg:w="7"/><text x="46.1765%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="45.9414%" y="101" width="0.0149%" height="15" fill="rgb(219,56,2)" fg:x="27682" fg:w="9"/><text x="46.1914%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="45.9779%" y="101" width="0.0149%" height="15" fill="rgb(233,0,4)" fg:x="27704" fg:w="9"/><text x="46.2279%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="45.9779%" y="85" width="0.0149%" height="15" fill="rgb(235,30,7)" fg:x="27704" fg:w="9"/><text x="46.2279%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (33 samples, 0.05%)</title><rect x="45.9398%" y="117" width="0.0548%" height="15" fill="rgb(250,79,13)" fg:x="27681" fg:w="33"/><text x="46.1898%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (67 samples, 0.11%)</title><rect x="45.9099%" y="133" width="0.1112%" height="15" fill="rgb(211,146,34)" fg:x="27663" fg:w="67"/><text x="46.1599%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="45.9945%" y="117" width="0.0266%" height="15" fill="rgb(228,22,38)" fg:x="27714" fg:w="16"/><text x="46.2445%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (83 samples, 0.14%)</title><rect x="45.8999%" y="149" width="0.1377%" height="15" fill="rgb(235,168,5)" fg:x="27657" fg:w="83"/><text x="46.1499%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (94 samples, 0.16%)</title><rect x="45.8850%" y="181" width="0.1560%" height="15" fill="rgb(221,155,16)" fg:x="27648" fg:w="94"/><text x="46.1350%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (88 samples, 0.15%)</title><rect x="45.8949%" y="165" width="0.1460%" height="15" fill="rgb(215,215,53)" fg:x="27654" fg:w="88"/><text x="46.1449%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,432 samples, 4.04%)</title><rect x="46.0410%" y="181" width="4.0362%" height="15" fill="rgb(223,4,10)" fg:x="27742" fg:w="2432"/><text x="46.2910%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (137 samples, 0.23%)</title><rect x="50.0772%" y="181" width="0.2274%" height="15" fill="rgb(234,103,6)" fg:x="30174" fg:w="137"/><text x="50.3272%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.03%)</title><rect x="50.4323%" y="165" width="0.0299%" height="15" fill="rgb(227,97,0)" fg:x="30388" fg:w="18"/><text x="50.6823%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="50.4456%" y="149" width="0.0166%" height="15" fill="rgb(234,150,53)" fg:x="30396" fg:w="10"/><text x="50.6956%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="50.4489%" y="133" width="0.0133%" height="15" fill="rgb(228,201,54)" fg:x="30398" fg:w="8"/><text x="50.6989%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="50.4622%" y="165" width="0.0116%" height="15" fill="rgb(222,22,37)" fg:x="30406" fg:w="7"/><text x="50.7122%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (130 samples, 0.22%)</title><rect x="50.4987%" y="165" width="0.2157%" height="15" fill="rgb(237,53,32)" fg:x="30428" fg:w="130"/><text x="50.7487%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.03%)</title><rect x="51.0995%" y="117" width="0.0266%" height="15" fill="rgb(233,25,53)" fg:x="30790" fg:w="16"/><text x="51.3495%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="51.1045%" y="101" width="0.0216%" height="15" fill="rgb(210,40,34)" fg:x="30793" fg:w="13"/><text x="51.3545%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="51.0929%" y="149" width="0.0415%" height="15" fill="rgb(241,220,44)" fg:x="30786" fg:w="25"/><text x="51.3429%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.03%)</title><rect x="51.0995%" y="133" width="0.0349%" height="15" fill="rgb(235,28,35)" fg:x="30790" fg:w="21"/><text x="51.3495%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (354 samples, 0.59%)</title><rect x="51.1343%" y="149" width="0.5875%" height="15" fill="rgb(210,56,17)" fg:x="30811" fg:w="354"/><text x="51.3843%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,218 samples, 2.02%)</title><rect x="50.3045%" y="181" width="2.0214%" height="15" fill="rgb(224,130,29)" fg:x="30311" fg:w="1218"/><text x="50.5545%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (971 samples, 1.61%)</title><rect x="50.7145%" y="165" width="1.6115%" height="15" fill="rgb(235,212,8)" fg:x="30558" fg:w="971"/><text x="50.9645%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (364 samples, 0.60%)</title><rect x="51.7218%" y="149" width="0.6041%" height="15" fill="rgb(223,33,50)" fg:x="31165" fg:w="364"/><text x="51.9718%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="57.7429%" y="101" width="0.0166%" height="15" fill="rgb(219,149,13)" fg:x="34793" fg:w="10"/><text x="57.9929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="57.7861%" y="85" width="0.0183%" height="15" fill="rgb(250,156,29)" fg:x="34819" fg:w="11"/><text x="58.0361%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.02%)</title><rect x="57.7877%" y="69" width="0.0166%" height="15" fill="rgb(216,193,19)" fg:x="34820" fg:w="10"/><text x="58.0377%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (29 samples, 0.05%)</title><rect x="57.7595%" y="101" width="0.0481%" height="15" fill="rgb(216,135,14)" fg:x="34803" fg:w="29"/><text x="58.0095%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (70 samples, 0.12%)</title><rect x="57.7313%" y="117" width="0.1162%" height="15" fill="rgb(241,47,5)" fg:x="34786" fg:w="70"/><text x="57.9813%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.04%)</title><rect x="57.8077%" y="101" width="0.0398%" height="15" fill="rgb(233,42,35)" fg:x="34832" fg:w="24"/><text x="58.0577%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (96 samples, 0.16%)</title><rect x="57.7031%" y="165" width="0.1593%" height="15" fill="rgb(231,13,6)" fg:x="34769" fg:w="96"/><text x="57.9531%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (87 samples, 0.14%)</title><rect x="57.7180%" y="149" width="0.1444%" height="15" fill="rgb(207,181,40)" fg:x="34778" fg:w="87"/><text x="57.9680%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (85 samples, 0.14%)</title><rect x="57.7214%" y="133" width="0.1411%" height="15" fill="rgb(254,173,49)" fg:x="34780" fg:w="85"/><text x="57.9714%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (14,836 samples, 24.62%)</title><rect x="33.2437%" y="197" width="24.6220%" height="15" fill="rgb(221,1,38)" fg:x="20031" fg:w="14836"/><text x="33.4937%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarCodeM..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,338 samples, 5.54%)</title><rect x="52.3259%" y="181" width="5.5398%" height="15" fill="rgb(206,124,46)" fg:x="31529" fg:w="3338"/><text x="52.5759%" y="191.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="60.1510%" y="101" width="0.0166%" height="15" fill="rgb(249,21,11)" fg:x="36244" fg:w="10"/><text x="60.4010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="60.1477%" y="117" width="0.0266%" height="15" fill="rgb(222,201,40)" fg:x="36242" fg:w="16"/><text x="60.3977%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.04%)</title><rect x="60.1394%" y="165" width="0.0365%" height="15" fill="rgb(235,61,29)" fg:x="36237" fg:w="22"/><text x="60.3894%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="60.1477%" y="149" width="0.0282%" height="15" fill="rgb(219,207,3)" fg:x="36242" fg:w="17"/><text x="60.3977%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.03%)</title><rect x="60.1477%" y="133" width="0.0282%" height="15" fill="rgb(222,56,46)" fg:x="36242" fg:w="17"/><text x="60.3977%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.09%)</title><rect x="60.0913%" y="181" width="0.0863%" height="15" fill="rgb(239,76,54)" fg:x="36208" fg:w="52"/><text x="60.3413%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.02%)</title><rect x="60.1925%" y="165" width="0.0199%" height="15" fill="rgb(231,124,27)" fg:x="36269" fg:w="12"/><text x="60.4425%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.04%)</title><rect x="60.1875%" y="181" width="0.0382%" height="15" fill="rgb(249,195,6)" fg:x="36266" fg:w="23"/><text x="60.4375%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (68 samples, 0.11%)</title><rect x="60.2274%" y="165" width="0.1129%" height="15" fill="rgb(237,174,47)" fg:x="36290" fg:w="68"/><text x="60.4774%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="60.3402%" y="165" width="0.0299%" height="15" fill="rgb(206,201,31)" fg:x="36358" fg:w="18"/><text x="60.5902%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (20 samples, 0.03%)</title><rect x="60.3701%" y="165" width="0.0332%" height="15" fill="rgb(231,57,52)" fg:x="36376" fg:w="20"/><text x="60.6201%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.05%)</title><rect x="60.4033%" y="165" width="0.0465%" height="15" fill="rgb(248,177,22)" fg:x="36396" fg:w="28"/><text x="60.6533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.04%)</title><rect x="60.4498%" y="165" width="0.0398%" height="15" fill="rgb(215,211,37)" fg:x="36424" fg:w="24"/><text x="60.6998%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="60.4896%" y="165" width="0.0349%" height="15" fill="rgb(241,128,51)" fg:x="36448" fg:w="21"/><text x="60.7396%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.03%)</title><rect x="60.9144%" y="133" width="0.0349%" height="15" fill="rgb(227,165,31)" fg:x="36704" fg:w="21"/><text x="61.1644%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (270 samples, 0.45%)</title><rect x="61.0389%" y="117" width="0.4481%" height="15" fill="rgb(228,167,24)" fg:x="36779" fg:w="270"/><text x="61.2889%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (85 samples, 0.14%)</title><rect x="61.3459%" y="101" width="0.1411%" height="15" fill="rgb(228,143,12)" fg:x="36964" fg:w="85"/><text x="61.5959%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (559 samples, 0.93%)</title><rect x="60.6157%" y="149" width="0.9277%" height="15" fill="rgb(249,149,8)" fg:x="36524" fg:w="559"/><text x="60.8657%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (358 samples, 0.59%)</title><rect x="60.9493%" y="133" width="0.5941%" height="15" fill="rgb(243,35,44)" fg:x="36725" fg:w="358"/><text x="61.1993%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="61.4870%" y="117" width="0.0564%" height="15" fill="rgb(246,89,9)" fg:x="37049" fg:w="34"/><text x="61.7370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (43 samples, 0.07%)</title><rect x="61.5434%" y="149" width="0.0714%" height="15" fill="rgb(233,213,13)" fg:x="37083" fg:w="43"/><text x="61.7934%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (213 samples, 0.35%)</title><rect x="61.6148%" y="149" width="0.3535%" height="15" fill="rgb(233,141,41)" fg:x="37126" fg:w="213"/><text x="61.8648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (89 samples, 0.15%)</title><rect x="61.8206%" y="133" width="0.1477%" height="15" fill="rgb(239,167,4)" fg:x="37250" fg:w="89"/><text x="62.0706%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (62 samples, 0.10%)</title><rect x="61.9783%" y="149" width="0.1029%" height="15" fill="rgb(209,217,16)" fg:x="37345" fg:w="62"/><text x="62.2283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="62.0812%" y="149" width="0.0315%" height="15" fill="rgb(219,88,35)" fg:x="37407" fg:w="19"/><text x="62.3312%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (25 samples, 0.04%)</title><rect x="62.1127%" y="149" width="0.0415%" height="15" fill="rgb(220,193,23)" fg:x="37426" fg:w="25"/><text x="62.3627%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (169 samples, 0.28%)</title><rect x="62.2538%" y="133" width="0.2805%" height="15" fill="rgb(230,90,52)" fg:x="37511" fg:w="169"/><text x="62.5038%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="62.5342%" y="133" width="0.0232%" height="15" fill="rgb(252,106,19)" fg:x="37680" fg:w="14"/><text x="62.7842%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="62.5575%" y="133" width="0.0199%" height="15" fill="rgb(206,74,20)" fg:x="37694" fg:w="12"/><text x="62.8075%" y="143.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="62.5774%" y="133" width="0.0183%" height="15" fill="rgb(230,138,44)" fg:x="37706" fg:w="11"/><text x="62.8274%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (80 samples, 0.13%)</title><rect x="62.6604%" y="117" width="0.1328%" height="15" fill="rgb(235,182,43)" fg:x="37756" fg:w="80"/><text x="62.9104%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (129 samples, 0.21%)</title><rect x="62.7931%" y="117" width="0.2141%" height="15" fill="rgb(242,16,51)" fg:x="37836" fg:w="129"/><text x="63.0431%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (271 samples, 0.45%)</title><rect x="62.5956%" y="133" width="0.4498%" height="15" fill="rgb(248,9,4)" fg:x="37717" fg:w="271"/><text x="62.8456%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="63.0072%" y="117" width="0.0382%" height="15" fill="rgb(210,31,22)" fg:x="37965" fg:w="23"/><text x="63.2572%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (20 samples, 0.03%)</title><rect x="63.0454%" y="133" width="0.0332%" height="15" fill="rgb(239,54,39)" fg:x="37988" fg:w="20"/><text x="63.2954%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="63.4470%" y="101" width="0.0315%" height="15" fill="rgb(230,99,41)" fg:x="38230" fg:w="19"/><text x="63.6970%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (125 samples, 0.21%)</title><rect x="63.5234%" y="85" width="0.2075%" height="15" fill="rgb(253,106,12)" fg:x="38276" fg:w="125"/><text x="63.7734%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.06%)</title><rect x="63.6677%" y="69" width="0.0631%" height="15" fill="rgb(213,46,41)" fg:x="38363" fg:w="38"/><text x="63.9177%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (288 samples, 0.48%)</title><rect x="63.2761%" y="117" width="0.4780%" height="15" fill="rgb(215,133,35)" fg:x="38127" fg:w="288"/><text x="63.5261%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (166 samples, 0.28%)</title><rect x="63.4785%" y="101" width="0.2755%" height="15" fill="rgb(213,28,5)" fg:x="38249" fg:w="166"/><text x="63.7285%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="63.7308%" y="85" width="0.0232%" height="15" fill="rgb(215,77,49)" fg:x="38401" fg:w="14"/><text x="63.9808%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="63.7540%" y="117" width="0.0332%" height="15" fill="rgb(248,100,22)" fg:x="38415" fg:w="20"/><text x="64.0040%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (993 samples, 1.65%)</title><rect x="62.1542%" y="149" width="1.6480%" height="15" fill="rgb(208,67,9)" fg:x="37451" fg:w="993"/><text x="62.4042%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (436 samples, 0.72%)</title><rect x="63.0786%" y="133" width="0.7236%" height="15" fill="rgb(219,133,21)" fg:x="38008" fg:w="436"/><text x="63.3286%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="63.7872%" y="117" width="0.0149%" height="15" fill="rgb(246,46,29)" fg:x="38435" fg:w="9"/><text x="64.0372%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (62 samples, 0.10%)</title><rect x="63.9432%" y="133" width="0.1029%" height="15" fill="rgb(246,185,52)" fg:x="38529" fg:w="62"/><text x="64.1932%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (132 samples, 0.22%)</title><rect x="64.0461%" y="133" width="0.2191%" height="15" fill="rgb(252,136,11)" fg:x="38591" fg:w="132"/><text x="64.2961%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (321 samples, 0.53%)</title><rect x="63.8022%" y="149" width="0.5327%" height="15" fill="rgb(219,138,53)" fg:x="38444" fg:w="321"/><text x="64.0522%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (42 samples, 0.07%)</title><rect x="64.2652%" y="133" width="0.0697%" height="15" fill="rgb(211,51,23)" fg:x="38723" fg:w="42"/><text x="64.5152%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="64.3349%" y="149" width="0.0398%" height="15" fill="rgb(247,221,28)" fg:x="38765" fg:w="24"/><text x="64.5849%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,343 samples, 3.89%)</title><rect x="60.5244%" y="165" width="3.8885%" height="15" fill="rgb(251,222,45)" fg:x="36469" fg:w="2343"/><text x="60.7744%" y="175.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.04%)</title><rect x="64.3747%" y="149" width="0.0382%" height="15" fill="rgb(217,162,53)" fg:x="38789" fg:w="23"/><text x="64.6247%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (11 samples, 0.02%)</title><rect x="64.4129%" y="165" width="0.0183%" height="15" fill="rgb(229,93,14)" fg:x="38812" fg:w="11"/><text x="64.6629%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (24 samples, 0.04%)</title><rect x="64.4312%" y="165" width="0.0398%" height="15" fill="rgb(209,67,49)" fg:x="38823" fg:w="24"/><text x="64.6812%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="64.4710%" y="165" width="0.0365%" height="15" fill="rgb(213,87,29)" fg:x="38847" fg:w="22"/><text x="64.7210%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (25 samples, 0.04%)</title><rect x="64.5075%" y="165" width="0.0415%" height="15" fill="rgb(205,151,52)" fg:x="38869" fg:w="25"/><text x="64.7575%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="64.5490%" y="165" width="0.0249%" height="15" fill="rgb(253,215,39)" fg:x="38894" fg:w="15"/><text x="64.7990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="64.5772%" y="149" width="0.0166%" height="15" fill="rgb(221,220,41)" fg:x="38911" fg:w="10"/><text x="64.8272%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="64.5789%" y="133" width="0.0149%" height="15" fill="rgb(218,133,21)" fg:x="38912" fg:w="9"/><text x="64.8289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="64.5805%" y="117" width="0.0133%" height="15" fill="rgb(221,193,43)" fg:x="38913" fg:w="8"/><text x="64.8305%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="64.5739%" y="165" width="0.0216%" height="15" fill="rgb(240,128,52)" fg:x="38909" fg:w="13"/><text x="64.8239%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,647 samples, 4.39%)</title><rect x="60.2257%" y="181" width="4.3930%" height="15" fill="rgb(253,114,12)" fg:x="36289" fg:w="2647"/><text x="60.4757%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (14 samples, 0.02%)</title><rect x="64.5955%" y="165" width="0.0232%" height="15" fill="rgb(215,223,47)" fg:x="38922" fg:w="14"/><text x="64.8455%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="64.6336%" y="117" width="0.0116%" height="15" fill="rgb(248,225,23)" fg:x="38945" fg:w="7"/><text x="64.8836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="64.6336%" y="101" width="0.0116%" height="15" fill="rgb(250,108,0)" fg:x="38945" fg:w="7"/><text x="64.8836%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="64.6237%" y="149" width="0.0299%" height="15" fill="rgb(228,208,7)" fg:x="38939" fg:w="18"/><text x="64.8737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="64.6287%" y="133" width="0.0249%" height="15" fill="rgb(244,45,10)" fg:x="38942" fg:w="15"/><text x="64.8787%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.04%)</title><rect x="64.6187%" y="181" width="0.0365%" height="15" fill="rgb(207,125,25)" fg:x="38936" fg:w="22"/><text x="64.8687%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.04%)</title><rect x="64.6187%" y="165" width="0.0365%" height="15" fill="rgb(210,195,18)" fg:x="38936" fg:w="22"/><text x="64.8687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.06%)</title><rect x="64.9357%" y="165" width="0.0597%" height="15" fill="rgb(249,80,12)" fg:x="39127" fg:w="36"/><text x="65.1857%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="64.9954%" y="165" width="0.0249%" height="15" fill="rgb(221,65,9)" fg:x="39163" fg:w="15"/><text x="65.2454%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (25 samples, 0.04%)</title><rect x="65.0203%" y="165" width="0.0415%" height="15" fill="rgb(235,49,36)" fg:x="39178" fg:w="25"/><text x="65.2703%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (18 samples, 0.03%)</title><rect x="65.0618%" y="165" width="0.0299%" height="15" fill="rgb(225,32,20)" fg:x="39203" fg:w="18"/><text x="65.3118%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (19 samples, 0.03%)</title><rect x="65.0917%" y="165" width="0.0315%" height="15" fill="rgb(215,141,46)" fg:x="39221" fg:w="19"/><text x="65.3417%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (189 samples, 0.31%)</title><rect x="65.4585%" y="117" width="0.3137%" height="15" fill="rgb(250,160,47)" fg:x="39442" fg:w="189"/><text x="65.7085%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (68 samples, 0.11%)</title><rect x="65.6593%" y="101" width="0.1129%" height="15" fill="rgb(216,222,40)" fg:x="39563" fg:w="68"/><text x="65.9093%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (359 samples, 0.60%)</title><rect x="65.2062%" y="149" width="0.5958%" height="15" fill="rgb(234,217,39)" fg:x="39290" fg:w="359"/><text x="65.4562%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (246 samples, 0.41%)</title><rect x="65.3937%" y="133" width="0.4083%" height="15" fill="rgb(207,178,40)" fg:x="39403" fg:w="246"/><text x="65.6437%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="65.7721%" y="117" width="0.0299%" height="15" fill="rgb(221,136,13)" fg:x="39631" fg:w="18"/><text x="66.0221%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (25 samples, 0.04%)</title><rect x="65.8020%" y="149" width="0.0415%" height="15" fill="rgb(249,199,10)" fg:x="39649" fg:w="25"/><text x="66.0520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="65.8435%" y="149" width="0.0216%" height="15" fill="rgb(249,222,13)" fg:x="39674" fg:w="13"/><text x="66.0935%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="65.8684%" y="149" width="0.0315%" height="15" fill="rgb(244,185,38)" fg:x="39689" fg:w="19"/><text x="66.1184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (36 samples, 0.06%)</title><rect x="66.1472%" y="133" width="0.0597%" height="15" fill="rgb(236,202,9)" fg:x="39857" fg:w="36"/><text x="66.3972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (21 samples, 0.03%)</title><rect x="66.3480%" y="117" width="0.0349%" height="15" fill="rgb(250,229,37)" fg:x="39978" fg:w="21"/><text x="66.5980%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (43 samples, 0.07%)</title><rect x="66.3829%" y="117" width="0.0714%" height="15" fill="rgb(206,174,23)" fg:x="39999" fg:w="43"/><text x="66.6329%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.06%)</title><rect x="66.4542%" y="117" width="0.0581%" height="15" fill="rgb(211,33,43)" fg:x="40042" fg:w="35"/><text x="66.7042%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (160 samples, 0.27%)</title><rect x="66.5156%" y="117" width="0.2655%" height="15" fill="rgb(245,58,50)" fg:x="40079" fg:w="160"/><text x="66.7656%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (29 samples, 0.05%)</title><rect x="67.0368%" y="101" width="0.0481%" height="15" fill="rgb(244,68,36)" fg:x="40393" fg:w="29"/><text x="67.2868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (138 samples, 0.23%)</title><rect x="67.0849%" y="101" width="0.2290%" height="15" fill="rgb(232,229,15)" fg:x="40422" fg:w="138"/><text x="67.3349%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (102 samples, 0.17%)</title><rect x="67.6558%" y="69" width="0.1693%" height="15" fill="rgb(254,30,23)" fg:x="40766" fg:w="102"/><text x="67.9058%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (281 samples, 0.47%)</title><rect x="67.3703%" y="85" width="0.4664%" height="15" fill="rgb(235,160,14)" fg:x="40594" fg:w="281"/><text x="67.6203%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="67.8251%" y="69" width="0.0116%" height="15" fill="rgb(212,155,44)" fg:x="40868" fg:w="7"/><text x="68.0751%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (335 samples, 0.56%)</title><rect x="67.3139%" y="101" width="0.5560%" height="15" fill="rgb(226,2,50)" fg:x="40560" fg:w="335"/><text x="67.5639%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="67.8367%" y="85" width="0.0332%" height="15" fill="rgb(234,177,6)" fg:x="40875" fg:w="20"/><text x="68.0867%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (130 samples, 0.22%)</title><rect x="67.8699%" y="101" width="0.2157%" height="15" fill="rgb(217,24,9)" fg:x="40895" fg:w="130"/><text x="68.1199%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (47 samples, 0.08%)</title><rect x="68.2201%" y="69" width="0.0780%" height="15" fill="rgb(220,13,46)" fg:x="41106" fg:w="47"/><text x="68.4701%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (221 samples, 0.37%)</title><rect x="68.0856%" y="101" width="0.3668%" height="15" fill="rgb(239,221,27)" fg:x="41025" fg:w="221"/><text x="68.3356%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (201 samples, 0.33%)</title><rect x="68.1188%" y="85" width="0.3336%" height="15" fill="rgb(222,198,25)" fg:x="41045" fg:w="201"/><text x="68.3688%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (93 samples, 0.15%)</title><rect x="68.2981%" y="69" width="0.1543%" height="15" fill="rgb(211,99,13)" fg:x="41153" fg:w="93"/><text x="68.5481%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,012 samples, 1.68%)</title><rect x="66.7812%" y="117" width="1.6795%" height="15" fill="rgb(232,111,31)" fg:x="40239" fg:w="1012"/><text x="67.0312%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="68.4607%" y="117" width="0.0149%" height="15" fill="rgb(245,82,37)" fg:x="41251" fg:w="9"/><text x="68.7107%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,452 samples, 2.41%)</title><rect x="66.2070%" y="133" width="2.4098%" height="15" fill="rgb(227,149,46)" fg:x="39893" fg:w="1452"/><text x="66.4570%" y="143.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (85 samples, 0.14%)</title><rect x="68.4756%" y="117" width="0.1411%" height="15" fill="rgb(218,36,50)" fg:x="41260" fg:w="85"/><text x="68.7256%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (151 samples, 0.25%)</title><rect x="68.6167%" y="133" width="0.2506%" height="15" fill="rgb(226,80,48)" fg:x="41345" fg:w="151"/><text x="68.8667%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (31 samples, 0.05%)</title><rect x="68.8673%" y="133" width="0.0514%" height="15" fill="rgb(238,224,15)" fg:x="41496" fg:w="31"/><text x="69.1173%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,827 samples, 3.03%)</title><rect x="65.8999%" y="149" width="3.0321%" height="15" fill="rgb(241,136,10)" fg:x="39708" fg:w="1827"/><text x="66.1499%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="68.9188%" y="133" width="0.0133%" height="15" fill="rgb(208,32,45)" fg:x="41527" fg:w="8"/><text x="69.1688%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,581 samples, 4.28%)</title><rect x="64.6552%" y="181" width="4.2835%" height="15" fill="rgb(207,135,9)" fg:x="38958" fg:w="2581"/><text x="64.9052%" y="191.50">rust_..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,299 samples, 3.82%)</title><rect x="65.1232%" y="165" width="3.8155%" height="15" fill="rgb(206,86,44)" fg:x="39240" fg:w="2299"/><text x="65.3732%" y="175.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (77 samples, 0.13%)</title><rect x="68.9387%" y="181" width="0.1278%" height="15" fill="rgb(245,177,15)" fg:x="41539" fg:w="77"/><text x="69.1887%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (81 samples, 0.13%)</title><rect x="69.0665%" y="165" width="0.1344%" height="15" fill="rgb(206,64,50)" fg:x="41616" fg:w="81"/><text x="69.3165%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="69.2009%" y="165" width="0.0133%" height="15" fill="rgb(234,36,40)" fg:x="41697" fg:w="8"/><text x="69.4509%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="69.2026%" y="149" width="0.0116%" height="15" fill="rgb(213,64,8)" fg:x="41698" fg:w="7"/><text x="69.4526%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="69.2026%" y="133" width="0.0116%" height="15" fill="rgb(210,75,36)" fg:x="41698" fg:w="7"/><text x="69.4526%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.04%)</title><rect x="69.3519%" y="149" width="0.0398%" height="15" fill="rgb(229,88,21)" fg:x="41788" fg:w="24"/><text x="69.6019%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="69.3918%" y="149" width="0.0166%" height="15" fill="rgb(252,204,47)" fg:x="41812" fg:w="10"/><text x="69.6418%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="69.4083%" y="149" width="0.0116%" height="15" fill="rgb(208,77,27)" fg:x="41822" fg:w="7"/><text x="69.6583%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="69.4200%" y="149" width="0.0166%" height="15" fill="rgb(221,76,26)" fg:x="41829" fg:w="10"/><text x="69.6700%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="69.6921%" y="117" width="0.0349%" height="15" fill="rgb(225,139,18)" fg:x="41993" fg:w="21"/><text x="69.9421%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="69.7270%" y="117" width="0.0398%" height="15" fill="rgb(230,137,11)" fg:x="42014" fg:w="24"/><text x="69.9770%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (13 samples, 0.02%)</title><rect x="69.8233%" y="101" width="0.0216%" height="15" fill="rgb(212,28,1)" fg:x="42072" fg:w="13"/><text x="70.0733%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="70.0954%" y="85" width="0.0166%" height="15" fill="rgb(248,164,17)" fg:x="42236" fg:w="10"/><text x="70.3454%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (353 samples, 0.59%)</title><rect x="70.2830%" y="69" width="0.5858%" height="15" fill="rgb(222,171,42)" fg:x="42349" fg:w="353"/><text x="70.5330%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (50 samples, 0.08%)</title><rect x="70.8688%" y="69" width="0.0830%" height="15" fill="rgb(243,84,45)" fg:x="42702" fg:w="50"/><text x="71.1188%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,004 samples, 1.67%)</title><rect x="69.5295%" y="133" width="1.6663%" height="15" fill="rgb(252,49,23)" fg:x="41895" fg:w="1004"/><text x="69.7795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (861 samples, 1.43%)</title><rect x="69.7668%" y="117" width="1.4289%" height="15" fill="rgb(215,19,7)" fg:x="42038" fg:w="861"/><text x="70.0168%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (814 samples, 1.35%)</title><rect x="69.8448%" y="101" width="1.3509%" height="15" fill="rgb(238,81,41)" fg:x="42085" fg:w="814"/><text x="70.0948%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (652 samples, 1.08%)</title><rect x="70.1137%" y="85" width="1.0821%" height="15" fill="rgb(210,199,37)" fg:x="42247" fg:w="652"/><text x="70.3637%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (147 samples, 0.24%)</title><rect x="70.9518%" y="69" width="0.2440%" height="15" fill="rgb(244,192,49)" fg:x="42752" fg:w="147"/><text x="71.2018%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (35 samples, 0.06%)</title><rect x="71.1958%" y="133" width="0.0581%" height="15" fill="rgb(226,211,11)" fg:x="42899" fg:w="35"/><text x="71.4458%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (60 samples, 0.10%)</title><rect x="71.2538%" y="133" width="0.0996%" height="15" fill="rgb(236,162,54)" fg:x="42934" fg:w="60"/><text x="71.5038%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,287 samples, 2.14%)</title><rect x="69.2374%" y="165" width="2.1359%" height="15" fill="rgb(220,229,9)" fg:x="41719" fg:w="1287"/><text x="69.4874%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,167 samples, 1.94%)</title><rect x="69.4366%" y="149" width="1.9368%" height="15" fill="rgb(250,87,22)" fg:x="41839" fg:w="1167"/><text x="69.6866%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="71.3534%" y="133" width="0.0199%" height="15" fill="rgb(239,43,17)" fg:x="42994" fg:w="12"/><text x="71.6034%" y="143.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,421 samples, 2.36%)</title><rect x="69.0665%" y="181" width="2.3583%" height="15" fill="rgb(231,177,25)" fg:x="41616" fg:w="1421"/><text x="69.3165%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (31 samples, 0.05%)</title><rect x="71.3733%" y="165" width="0.0514%" height="15" fill="rgb(219,179,1)" fg:x="43006" fg:w="31"/><text x="71.6233%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.04%)</title><rect x="72.6280%" y="149" width="0.0365%" height="15" fill="rgb(238,219,53)" fg:x="43762" fg:w="22"/><text x="72.8780%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (36 samples, 0.06%)</title><rect x="73.1724%" y="133" width="0.0597%" height="15" fill="rgb(232,167,36)" fg:x="44090" fg:w="36"/><text x="73.4224%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.04%)</title><rect x="73.4910%" y="117" width="0.0365%" height="15" fill="rgb(244,19,51)" fg:x="44282" fg:w="22"/><text x="73.7410%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,321 samples, 2.19%)</title><rect x="71.4248%" y="181" width="2.1923%" height="15" fill="rgb(224,6,22)" fg:x="43037" fg:w="1321"/><text x="71.6748%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (987 samples, 1.64%)</title><rect x="71.9791%" y="165" width="1.6380%" height="15" fill="rgb(224,145,5)" fg:x="43371" fg:w="987"/><text x="72.2291%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (574 samples, 0.95%)</title><rect x="72.6645%" y="149" width="0.9526%" height="15" fill="rgb(234,130,49)" fg:x="43784" fg:w="574"/><text x="72.9145%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (232 samples, 0.39%)</title><rect x="73.2321%" y="133" width="0.3850%" height="15" fill="rgb(254,6,2)" fg:x="44126" fg:w="232"/><text x="73.4821%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (54 samples, 0.09%)</title><rect x="73.5275%" y="117" width="0.0896%" height="15" fill="rgb(208,96,46)" fg:x="44304" fg:w="54"/><text x="73.7775%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (8 samples, 0.01%)</title><rect x="73.6039%" y="101" width="0.0133%" height="15" fill="rgb(239,3,39)" fg:x="44350" fg:w="8"/><text x="73.8539%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (643 samples, 1.07%)</title><rect x="74.5399%" y="165" width="1.0671%" height="15" fill="rgb(233,210,1)" fg:x="44914" fg:w="643"/><text x="74.7899%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,098 samples, 1.82%)</title><rect x="75.6070%" y="165" width="1.8223%" height="15" fill="rgb(244,137,37)" fg:x="45557" fg:w="1098"/><text x="75.8570%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,837 samples, 4.71%)</title><rect x="73.6171%" y="181" width="4.7083%" height="15" fill="rgb(240,136,2)" fg:x="44358" fg:w="2837"/><text x="73.8671%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (540 samples, 0.90%)</title><rect x="77.4293%" y="165" width="0.8962%" height="15" fill="rgb(239,18,37)" fg:x="46655" fg:w="540"/><text x="77.6793%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (43 samples, 0.07%)</title><rect x="78.3255%" y="181" width="0.0714%" height="15" fill="rgb(218,185,22)" fg:x="47195" fg:w="43"/><text x="78.5755%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (278 samples, 0.46%)</title><rect x="78.3968%" y="181" width="0.4614%" height="15" fill="rgb(225,218,4)" fg:x="47238" fg:w="278"/><text x="78.6468%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (12,648 samples, 20.99%)</title><rect x="57.8691%" y="197" width="20.9908%" height="15" fill="rgb(230,182,32)" fg:x="34869" fg:w="12648"/><text x="58.1191%" y="207.50">rust_qecp`rust_qecp::union_find_d..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (225 samples, 0.37%)</title><rect x="80.5145%" y="181" width="0.3734%" height="15" fill="rgb(242,56,43)" fg:x="48514" fg:w="225"/><text x="80.7645%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="80.9510%" y="165" width="0.0116%" height="15" fill="rgb(233,99,24)" fg:x="48777" fg:w="7"/><text x="81.2010%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (58 samples, 0.10%)</title><rect x="80.9958%" y="149" width="0.0963%" height="15" fill="rgb(234,209,42)" fg:x="48804" fg:w="58"/><text x="81.2458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="81.0671%" y="133" width="0.0249%" height="15" fill="rgb(227,7,12)" fg:x="48847" fg:w="15"/><text x="81.3171%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (85 samples, 0.14%)</title><rect x="80.9626%" y="165" width="0.1411%" height="15" fill="rgb(245,203,43)" fg:x="48784" fg:w="85"/><text x="81.2126%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="81.0920%" y="149" width="0.0116%" height="15" fill="rgb(238,205,33)" fg:x="48862" fg:w="7"/><text x="81.3420%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (136 samples, 0.23%)</title><rect x="80.8879%" y="181" width="0.2257%" height="15" fill="rgb(231,56,7)" fg:x="48739" fg:w="136"/><text x="81.1379%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.02%)</title><rect x="81.1136%" y="181" width="0.0166%" height="15" fill="rgb(244,186,29)" fg:x="48875" fg:w="10"/><text x="81.3636%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 0.13%)</title><rect x="81.3426%" y="165" width="0.1344%" height="15" fill="rgb(234,111,31)" fg:x="49013" fg:w="81"/><text x="81.5926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (232 samples, 0.39%)</title><rect x="81.1302%" y="181" width="0.3850%" height="15" fill="rgb(241,149,10)" fg:x="48885" fg:w="232"/><text x="81.3802%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.03%)</title><rect x="81.4870%" y="165" width="0.0282%" height="15" fill="rgb(249,206,44)" fg:x="49100" fg:w="17"/><text x="81.7370%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="81.4903%" y="149" width="0.0249%" height="15" fill="rgb(251,153,30)" fg:x="49102" fg:w="15"/><text x="81.7403%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="81.5551%" y="165" width="0.0116%" height="15" fill="rgb(239,152,38)" fg:x="49141" fg:w="7"/><text x="81.8051%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (34 samples, 0.06%)</title><rect x="81.5152%" y="181" width="0.0564%" height="15" fill="rgb(249,139,47)" fg:x="49117" fg:w="34"/><text x="81.7652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.03%)</title><rect x="81.6297%" y="149" width="0.0282%" height="15" fill="rgb(244,64,35)" fg:x="49186" fg:w="17"/><text x="81.8797%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (53 samples, 0.09%)</title><rect x="81.5717%" y="181" width="0.0880%" height="15" fill="rgb(216,46,15)" fg:x="49151" fg:w="53"/><text x="81.8217%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.08%)</title><rect x="81.5816%" y="165" width="0.0780%" height="15" fill="rgb(250,74,19)" fg:x="49157" fg:w="47"/><text x="81.8316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="81.6596%" y="181" width="0.0149%" height="15" fill="rgb(249,42,33)" fg:x="49204" fg:w="9"/><text x="81.9096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (55 samples, 0.09%)</title><rect x="81.6745%" y="181" width="0.0913%" height="15" fill="rgb(242,149,17)" fg:x="49213" fg:w="55"/><text x="81.9245%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="81.7675%" y="181" width="0.0266%" height="15" fill="rgb(244,29,21)" fg:x="49269" fg:w="16"/><text x="82.0175%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (34 samples, 0.06%)</title><rect x="81.8090%" y="181" width="0.0564%" height="15" fill="rgb(220,130,37)" fg:x="49294" fg:w="34"/><text x="82.0590%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.01%)</title><rect x="81.8654%" y="181" width="0.0133%" height="15" fill="rgb(211,67,2)" fg:x="49328" fg:w="8"/><text x="82.1154%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="81.8671%" y="165" width="0.0116%" height="15" fill="rgb(235,68,52)" fg:x="49329" fg:w="7"/><text x="82.1171%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="81.8787%" y="181" width="0.0149%" height="15" fill="rgb(246,142,3)" fg:x="49336" fg:w="9"/><text x="82.1287%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (394 samples, 0.65%)</title><rect x="81.8936%" y="181" width="0.6539%" height="15" fill="rgb(241,25,7)" fg:x="49345" fg:w="394"/><text x="82.1436%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$mach_absolute_time (8 samples, 0.01%)</title><rect x="82.5475%" y="181" width="0.0133%" height="15" fill="rgb(242,119,39)" fg:x="49739" fg:w="8"/><text x="82.7975%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="82.5608%" y="181" width="0.0116%" height="15" fill="rgb(241,98,45)" fg:x="49747" fg:w="7"/><text x="82.8108%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (13 samples, 0.02%)</title><rect x="82.5724%" y="181" width="0.0216%" height="15" fill="rgb(254,28,30)" fg:x="49754" fg:w="13"/><text x="82.8224%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="82.6371%" y="117" width="0.0166%" height="15" fill="rgb(241,142,54)" fg:x="49793" fg:w="10"/><text x="82.8871%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="82.6288%" y="133" width="0.0266%" height="15" fill="rgb(222,85,15)" fg:x="49788" fg:w="16"/><text x="82.8788%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.04%)</title><rect x="82.6156%" y="149" width="0.0431%" height="15" fill="rgb(210,85,47)" fg:x="49780" fg:w="26"/><text x="82.8656%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.06%)</title><rect x="82.5990%" y="181" width="0.0614%" height="15" fill="rgb(224,206,25)" fg:x="49770" fg:w="37"/><text x="82.8490%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="82.6073%" y="165" width="0.0531%" height="15" fill="rgb(243,201,19)" fg:x="49775" fg:w="32"/><text x="82.8573%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (777 samples, 1.29%)</title><rect x="82.6637%" y="181" width="1.2895%" height="15" fill="rgb(236,59,4)" fg:x="49809" fg:w="777"/><text x="82.9137%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (89 samples, 0.15%)</title><rect x="83.9532%" y="181" width="0.1477%" height="15" fill="rgb(254,179,45)" fg:x="50586" fg:w="89"/><text x="84.2032%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="84.1009%" y="181" width="0.0431%" height="15" fill="rgb(226,14,10)" fg:x="50675" fg:w="26"/><text x="84.3509%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="84.2304%" y="149" width="0.0133%" height="15" fill="rgb(244,27,41)" fg:x="50753" fg:w="8"/><text x="84.4804%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (67 samples, 0.11%)</title><rect x="84.3299%" y="133" width="0.1112%" height="15" fill="rgb(235,35,32)" fg:x="50813" fg:w="67"/><text x="84.5799%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.06%)</title><rect x="84.3764%" y="117" width="0.0647%" height="15" fill="rgb(218,68,31)" fg:x="50841" fg:w="39"/><text x="84.6264%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (123 samples, 0.20%)</title><rect x="84.2436%" y="149" width="0.2041%" height="15" fill="rgb(207,120,37)" fg:x="50761" fg:w="123"/><text x="84.4936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="84.4544%" y="133" width="0.0149%" height="15" fill="rgb(227,98,0)" fg:x="50888" fg:w="9"/><text x="84.7044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="84.4561%" y="117" width="0.0133%" height="15" fill="rgb(207,7,3)" fg:x="50889" fg:w="8"/><text x="84.7061%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.01%)</title><rect x="84.4776%" y="117" width="0.0149%" height="15" fill="rgb(206,98,19)" fg:x="50902" fg:w="9"/><text x="84.7276%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.10%)</title><rect x="84.4478%" y="149" width="0.0979%" height="15" fill="rgb(217,5,26)" fg:x="50884" fg:w="59"/><text x="84.6978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.07%)</title><rect x="84.4710%" y="133" width="0.0747%" height="15" fill="rgb(235,190,38)" fg:x="50898" fg:w="45"/><text x="84.7210%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (32 samples, 0.05%)</title><rect x="84.4926%" y="117" width="0.0531%" height="15" fill="rgb(247,86,24)" fg:x="50911" fg:w="32"/><text x="84.7426%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (220 samples, 0.37%)</title><rect x="84.1822%" y="165" width="0.3651%" height="15" fill="rgb(205,101,16)" fg:x="50724" fg:w="220"/><text x="84.4322%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="84.5473%" y="165" width="0.0183%" height="15" fill="rgb(246,168,33)" fg:x="50944" fg:w="11"/><text x="84.7973%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (262 samples, 0.43%)</title><rect x="84.1441%" y="181" width="0.4348%" height="15" fill="rgb(231,114,1)" fg:x="50701" fg:w="262"/><text x="84.3941%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,455 samples, 5.73%)</title><rect x="78.8598%" y="197" width="5.7340%" height="15" fill="rgb(207,184,53)" fg:x="47517" fg:w="3455"/><text x="79.1098%" y="207.50">rust_qe..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (18 samples, 0.03%)</title><rect x="84.5938%" y="197" width="0.0299%" height="15" fill="rgb(224,95,51)" fg:x="50972" fg:w="18"/><text x="84.8438%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,501 samples, 82.15%)</title><rect x="2.4778%" y="213" width="82.1525%" height="15" fill="rgb(212,188,45)" fg:x="1493" fg:w="49501"/><text x="2.7278%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,860 samples, 84.41%)</title><rect x="0.2240%" y="229" width="84.4079%" height="15" fill="rgb(223,154,38)" fg:x="135" fg:w="50860"/><text x="0.4740%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,232 samples, 2.04%)</title><rect x="84.6320%" y="229" width="2.0446%" height="15" fill="rgb(251,22,52)" fg:x="50995" fg:w="1232"/><text x="84.8820%" y="239.50">r..</text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (8 samples, 0.01%)</title><rect x="86.9007%" y="213" width="0.0133%" height="15" fill="rgb(229,209,22)" fg:x="52362" fg:w="8"/><text x="87.1507%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="86.9023%" y="197" width="0.0116%" height="15" fill="rgb(234,138,34)" fg:x="52363" fg:w="7"/><text x="87.1523%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (258 samples, 0.43%)</title><rect x="86.6766%" y="229" width="0.4282%" height="15" fill="rgb(212,95,11)" fg:x="52227" fg:w="258"/><text x="86.9266%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (115 samples, 0.19%)</title><rect x="86.9139%" y="213" width="0.1909%" height="15" fill="rgb(240,179,47)" fg:x="52370" fg:w="115"/><text x="87.1639%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,726 samples, 6.18%)</title><rect x="87.1048%" y="229" width="6.1837%" height="15" fill="rgb(240,163,11)" fg:x="52485" fg:w="3726"/><text x="87.3548%" y="239.50">rust_qec..</text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="93.2985%" y="213" width="0.0116%" height="15" fill="rgb(236,37,12)" fg:x="56217" fg:w="7"/><text x="93.5485%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (168 samples, 0.28%)</title><rect x="93.3101%" y="213" width="0.2788%" height="15" fill="rgb(232,164,16)" fg:x="56224" fg:w="168"/><text x="93.5601%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (368 samples, 0.61%)</title><rect x="93.2885%" y="229" width="0.6107%" height="15" fill="rgb(244,205,15)" fg:x="56211" fg:w="368"/><text x="93.5385%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (187 samples, 0.31%)</title><rect x="93.5889%" y="213" width="0.3103%" height="15" fill="rgb(223,117,47)" fg:x="56392" fg:w="187"/><text x="93.8389%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (39 samples, 0.06%)</title><rect x="93.8993%" y="229" width="0.0647%" height="15" fill="rgb(244,107,35)" fg:x="56579" fg:w="39"/><text x="94.1493%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,632 samples, 6.03%)</title><rect x="93.9706%" y="229" width="6.0277%" height="15" fill="rgb(205,140,8)" fg:x="56622" fg:w="3632"/><text x="94.2206%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,517 samples, 4.18%)</title><rect x="95.8211%" y="213" width="4.1772%" height="15" fill="rgb(228,84,46)" fg:x="57737" fg:w="2517"/><text x="96.0711%" y="223.50">rust_..</text></g><g><title>all (60,255 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="60255"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,182 samples, 99.88%)</title><rect x="0.1212%" y="309" width="99.8788%" height="15" fill="rgb(206,112,54)" fg:x="73" fg:w="60182"/><text x="0.3712%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,182 samples, 99.88%)</title><rect x="0.1212%" y="293" width="99.8788%" height="15" fill="rgb(216,84,49)" fg:x="73" fg:w="60182"/><text x="0.3712%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,182 samples, 99.88%)</title><rect x="0.1212%" y="277" width="99.8788%" height="15" fill="rgb(214,194,35)" fg:x="73" fg:w="60182"/><text x="0.3712%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,182 samples, 99.88%)</title><rect x="0.1212%" y="261" width="99.8788%" height="15" fill="rgb(249,28,3)" fg:x="73" fg:w="60182"/><text x="0.3712%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,174 samples, 99.87%)</title><rect x="0.1344%" y="245" width="99.8656%" height="15" fill="rgb(222,56,52)" fg:x="81" fg:w="60174"/><text x="0.3844%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>