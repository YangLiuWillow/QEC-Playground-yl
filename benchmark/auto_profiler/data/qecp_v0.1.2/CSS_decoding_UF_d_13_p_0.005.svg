<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="69223"><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.03%)</title><rect x="0.0390%" y="133" width="0.0289%" height="15" fill="rgb(227,0,7)" fg:x="27" fg:w="20"/><text x="0.2890%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="0.0679%" y="133" width="0.0116%" height="15" fill="rgb(217,0,24)" fg:x="47" fg:w="8"/><text x="0.3179%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (47 samples, 0.07%)</title><rect x="0.0144%" y="149" width="0.0679%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="47"/><text x="0.2644%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.0823%" y="149" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="7"/><text x="0.3323%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (48 samples, 0.07%)</title><rect x="0.1156%" y="53" width="0.0693%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="48"/><text x="0.3656%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (12 samples, 0.02%)</title><rect x="0.1864%" y="53" width="0.0173%" height="15" fill="rgb(232,128,0)" fg:x="129" fg:w="12"/><text x="0.4364%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="0.1864%" y="37" width="0.0173%" height="15" fill="rgb(207,160,47)" fg:x="129" fg:w="12"/><text x="0.4364%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (74 samples, 0.11%)</title><rect x="0.1156%" y="69" width="0.1069%" height="15" fill="rgb(228,23,34)" fg:x="80" fg:w="74"/><text x="0.3656%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (13 samples, 0.02%)</title><rect x="0.2037%" y="53" width="0.0188%" height="15" fill="rgb(218,30,26)" fg:x="141" fg:w="13"/><text x="0.4537%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="0.2037%" y="37" width="0.0188%" height="15" fill="rgb(220,122,19)" fg:x="141" fg:w="13"/><text x="0.4537%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.01%)</title><rect x="0.2239%" y="69" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="155" fg:w="7"/><text x="0.4739%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.01%)</title><rect x="0.2239%" y="53" width="0.0101%" height="15" fill="rgb(240,193,28)" fg:x="155" fg:w="7"/><text x="0.4739%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.07%)</title><rect x="0.2340%" y="69" width="0.0722%" height="15" fill="rgb(216,20,37)" fg:x="162" fg:w="50"/><text x="0.4840%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (143 samples, 0.21%)</title><rect x="0.1026%" y="149" width="0.2066%" height="15" fill="rgb(206,188,39)" fg:x="71" fg:w="143"/><text x="0.3526%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (143 samples, 0.21%)</title><rect x="0.1026%" y="133" width="0.2066%" height="15" fill="rgb(217,207,13)" fg:x="71" fg:w="143"/><text x="0.3526%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.21%)</title><rect x="0.1026%" y="117" width="0.2066%" height="15" fill="rgb(231,73,38)" fg:x="71" fg:w="143"/><text x="0.3526%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.21%)</title><rect x="0.1026%" y="101" width="0.2066%" height="15" fill="rgb(225,20,46)" fg:x="71" fg:w="143"/><text x="0.3526%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (140 samples, 0.20%)</title><rect x="0.1069%" y="85" width="0.2022%" height="15" fill="rgb(210,31,41)" fg:x="74" fg:w="140"/><text x="0.3569%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.3149%" y="69" width="0.0101%" height="15" fill="rgb(221,200,47)" fg:x="218" fg:w="7"/><text x="0.5649%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.02%)</title><rect x="0.3149%" y="85" width="0.0217%" height="15" fill="rgb(226,26,5)" fg:x="218" fg:w="15"/><text x="0.5649%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (27 samples, 0.04%)</title><rect x="0.3091%" y="149" width="0.0390%" height="15" fill="rgb(249,33,26)" fg:x="214" fg:w="27"/><text x="0.5591%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="0.3091%" y="133" width="0.0390%" height="15" fill="rgb(235,183,28)" fg:x="214" fg:w="27"/><text x="0.5591%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="0.3091%" y="117" width="0.0390%" height="15" fill="rgb(221,5,38)" fg:x="214" fg:w="27"/><text x="0.5591%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (24 samples, 0.03%)</title><rect x="0.3135%" y="101" width="0.0347%" height="15" fill="rgb(247,18,42)" fg:x="217" fg:w="24"/><text x="0.5635%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (486 samples, 0.70%)</title><rect x="0.3482%" y="149" width="0.7021%" height="15" fill="rgb(241,131,45)" fg:x="241" fg:w="486"/><text x="0.5982%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (181 samples, 0.26%)</title><rect x="1.0502%" y="149" width="0.2615%" height="15" fill="rgb(249,31,29)" fg:x="727" fg:w="181"/><text x="1.3002%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="6.0255%" y="133" width="0.0101%" height="15" fill="rgb(225,111,53)" fg:x="4171" fg:w="7"/><text x="6.2755%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 0.08%)</title><rect x="6.0356%" y="133" width="0.0809%" height="15" fill="rgb(238,160,17)" fg:x="4178" fg:w="56"/><text x="6.2856%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.11%)</title><rect x="6.1165%" y="133" width="0.1098%" height="15" fill="rgb(214,148,48)" fg:x="4234" fg:w="76"/><text x="6.3665%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (59 samples, 0.09%)</title><rect x="6.2263%" y="133" width="0.0852%" height="15" fill="rgb(232,36,49)" fg:x="4310" fg:w="59"/><text x="6.4763%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (517 samples, 0.75%)</title><rect x="6.3129%" y="133" width="0.7469%" height="15" fill="rgb(209,103,24)" fg:x="4370" fg:w="517"/><text x="6.5629%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="7.0627%" y="85" width="0.0202%" height="15" fill="rgb(229,88,8)" fg:x="4889" fg:w="14"/><text x="7.3127%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="7.0728%" y="69" width="0.0101%" height="15" fill="rgb(213,181,19)" fg:x="4896" fg:w="7"/><text x="7.3228%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.02%)</title><rect x="7.0598%" y="133" width="0.0246%" height="15" fill="rgb(254,191,54)" fg:x="4887" fg:w="17"/><text x="7.3098%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="7.0627%" y="117" width="0.0217%" height="15" fill="rgb(241,83,37)" fg:x="4889" fg:w="15"/><text x="7.3127%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.02%)</title><rect x="7.0627%" y="101" width="0.0217%" height="15" fill="rgb(233,36,39)" fg:x="4889" fg:w="15"/><text x="7.3127%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (83 samples, 0.12%)</title><rect x="7.6839%" y="117" width="0.1199%" height="15" fill="rgb(226,3,54)" fg:x="5319" fg:w="83"/><text x="7.9339%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (684 samples, 0.99%)</title><rect x="7.0844%" y="133" width="0.9881%" height="15" fill="rgb(245,192,40)" fg:x="4904" fg:w="684"/><text x="7.3344%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (182 samples, 0.26%)</title><rect x="7.8095%" y="117" width="0.2629%" height="15" fill="rgb(238,167,29)" fg:x="5406" fg:w="182"/><text x="8.0595%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (148 samples, 0.21%)</title><rect x="7.8587%" y="101" width="0.2138%" height="15" fill="rgb(232,182,51)" fg:x="5440" fg:w="148"/><text x="8.1087%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="8.0739%" y="133" width="0.0116%" height="15" fill="rgb(231,60,39)" fg:x="5589" fg:w="8"/><text x="8.3239%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (20 samples, 0.03%)</title><rect x="8.0855%" y="133" width="0.0289%" height="15" fill="rgb(208,69,12)" fg:x="5597" fg:w="20"/><text x="8.3355%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (152 samples, 0.22%)</title><rect x="10.9154%" y="117" width="0.2196%" height="15" fill="rgb(235,93,37)" fg:x="7556" fg:w="152"/><text x="11.1654%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (465 samples, 0.67%)</title><rect x="11.1408%" y="117" width="0.6717%" height="15" fill="rgb(213,116,39)" fg:x="7712" fg:w="465"/><text x="11.3908%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (35 samples, 0.05%)</title><rect x="11.8602%" y="101" width="0.0506%" height="15" fill="rgb(222,207,29)" fg:x="8210" fg:w="35"/><text x="12.1102%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,392 samples, 10.68%)</title><rect x="1.3261%" y="149" width="10.6785%" height="15" fill="rgb(206,96,30)" fg:x="918" fg:w="7392"/><text x="1.5761%" y="159.50">rust_qecp`rust_q..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,693 samples, 3.89%)</title><rect x="8.1144%" y="133" width="3.8903%" height="15" fill="rgb(218,138,4)" fg:x="5617" fg:w="2693"/><text x="8.3644%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (133 samples, 0.19%)</title><rect x="11.8125%" y="117" width="0.1921%" height="15" fill="rgb(250,191,14)" fg:x="8177" fg:w="133"/><text x="12.0625%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (65 samples, 0.09%)</title><rect x="11.9108%" y="101" width="0.0939%" height="15" fill="rgb(239,60,40)" fg:x="8245" fg:w="65"/><text x="12.1608%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="12.0307%" y="133" width="0.0101%" height="15" fill="rgb(206,27,48)" fg:x="8328" fg:w="7"/><text x="12.2807%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.17%)</title><rect x="12.0480%" y="133" width="0.1719%" height="15" fill="rgb(225,35,8)" fg:x="8340" fg:w="119"/><text x="12.2980%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.02%)</title><rect x="12.5161%" y="117" width="0.0246%" height="15" fill="rgb(250,213,24)" fg:x="8664" fg:w="17"/><text x="12.7661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="12.5435%" y="117" width="0.0101%" height="15" fill="rgb(247,123,22)" fg:x="8683" fg:w="7"/><text x="12.7935%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="12.5536%" y="117" width="0.0159%" height="15" fill="rgb(231,138,38)" fg:x="8690" fg:w="11"/><text x="12.8036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="12.6085%" y="53" width="0.0202%" height="15" fill="rgb(231,145,46)" fg:x="8728" fg:w="14"/><text x="12.8585%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.04%)</title><rect x="12.5926%" y="85" width="0.0376%" height="15" fill="rgb(251,118,11)" fg:x="8717" fg:w="26"/><text x="12.8426%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="12.6071%" y="69" width="0.0231%" height="15" fill="rgb(217,147,25)" fg:x="8727" fg:w="16"/><text x="12.8571%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 0.06%)</title><rect x="12.5695%" y="117" width="0.0621%" height="15" fill="rgb(247,81,37)" fg:x="8701" fg:w="43"/><text x="12.8195%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (36 samples, 0.05%)</title><rect x="12.5796%" y="101" width="0.0520%" height="15" fill="rgb(209,12,38)" fg:x="8708" fg:w="36"/><text x="12.8296%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="12.6403%" y="117" width="0.0202%" height="15" fill="rgb(227,1,9)" fg:x="8750" fg:w="14"/><text x="12.8903%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="12.6490%" y="101" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="8756" fg:w="8"/><text x="12.8990%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (17 samples, 0.02%)</title><rect x="12.6605%" y="117" width="0.0246%" height="15" fill="rgb(221,10,30)" fg:x="8764" fg:w="17"/><text x="12.9105%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (547 samples, 0.79%)</title><rect x="12.2358%" y="133" width="0.7902%" height="15" fill="rgb(210,229,1)" fg:x="8470" fg:w="547"/><text x="12.4858%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (236 samples, 0.34%)</title><rect x="12.6851%" y="117" width="0.3409%" height="15" fill="rgb(222,148,37)" fg:x="8781" fg:w="236"/><text x="12.9351%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (718 samples, 1.04%)</title><rect x="12.0047%" y="149" width="1.0372%" height="15" fill="rgb(234,67,33)" fg:x="8310" fg:w="718"/><text x="12.2547%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (7 samples, 0.01%)</title><rect x="13.0318%" y="133" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="9021" fg:w="7"/><text x="13.2818%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (7 samples, 0.01%)</title><rect x="13.0419%" y="149" width="0.0101%" height="15" fill="rgb(247,138,52)" fg:x="9028" fg:w="7"/><text x="13.2919%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (7 samples, 0.01%)</title><rect x="13.0419%" y="133" width="0.0101%" height="15" fill="rgb(213,79,30)" fg:x="9028" fg:w="7"/><text x="13.2919%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="13.0520%" y="149" width="0.0332%" height="15" fill="rgb(246,177,23)" fg:x="9035" fg:w="23"/><text x="13.3020%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (20 samples, 0.03%)</title><rect x="13.0564%" y="133" width="0.0289%" height="15" fill="rgb(230,62,27)" fg:x="9038" fg:w="20"/><text x="13.3064%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="13.0737%" y="117" width="0.0116%" height="15" fill="rgb(216,154,8)" fg:x="9050" fg:w="8"/><text x="13.3237%" y="127.50"></text></g><g><title>dyld`start (9,064 samples, 13.09%)</title><rect x="0.0000%" y="389" width="13.0939%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="9064"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (9,062 samples, 13.09%)</title><rect x="0.0029%" y="373" width="13.0910%" height="15" fill="rgb(251,115,12)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (9,062 samples, 13.09%)</title><rect x="0.0029%" y="357" width="13.0910%" height="15" fill="rgb(240,54,50)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="367.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (9,062 samples, 13.09%)</title><rect x="0.0029%" y="341" width="13.0910%" height="15" fill="rgb(233,84,52)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="351.50">rust_qecp`std::rt::l..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (9,062 samples, 13.09%)</title><rect x="0.0029%" y="325" width="13.0910%" height="15" fill="rgb(207,117,47)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="335.50">rust_qecp`std::sys_c..</text></g><g><title>rust_qecp`rust_qecp::main (9,062 samples, 13.09%)</title><rect x="0.0029%" y="309" width="13.0910%" height="15" fill="rgb(249,43,39)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="319.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (9,062 samples, 13.09%)</title><rect x="0.0029%" y="293" width="13.0910%" height="15" fill="rgb(209,38,44)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="303.50">rust_qecp`tokio::tas..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (9,062 samples, 13.09%)</title><rect x="0.0029%" y="277" width="13.0910%" height="15" fill="rgb(236,212,23)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="287.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,062 samples, 13.09%)</title><rect x="0.0029%" y="261" width="13.0910%" height="15" fill="rgb(242,79,21)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="271.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (9,062 samples, 13.09%)</title><rect x="0.0029%" y="245" width="13.0910%" height="15" fill="rgb(211,96,35)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="255.50">rust_qecp`tokio::run..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,062 samples, 13.09%)</title><rect x="0.0029%" y="229" width="13.0910%" height="15" fill="rgb(253,215,40)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="239.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (9,062 samples, 13.09%)</title><rect x="0.0029%" y="213" width="13.0910%" height="15" fill="rgb(211,81,21)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="223.50">rust_qecp`tokio::mac..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,062 samples, 13.09%)</title><rect x="0.0029%" y="197" width="13.0910%" height="15" fill="rgb(208,190,38)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="207.50">rust_qecp`&lt;core::fut..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (9,062 samples, 13.09%)</title><rect x="0.0029%" y="181" width="13.0910%" height="15" fill="rgb(235,213,38)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="191.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (9,062 samples, 13.09%)</title><rect x="0.0029%" y="165" width="13.0910%" height="15" fill="rgb(237,122,38)" fg:x="2" fg:w="9062"/><text x="0.2529%" y="175.50">rust_qecp`rust_qecp:..</text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.02%)</title><rect x="13.0939%" y="389" width="0.0159%" height="15" fill="rgb(244,218,35)" fg:x="9064" fg:w="11"/><text x="13.3439%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="13.1315%" y="309" width="0.0130%" height="15" fill="rgb(240,68,47)" fg:x="9090" fg:w="9"/><text x="13.3815%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (10 samples, 0.01%)</title><rect x="13.1503%" y="309" width="0.0144%" height="15" fill="rgb(210,16,53)" fg:x="9103" fg:w="10"/><text x="13.4003%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (10 samples, 0.01%)</title><rect x="13.1503%" y="293" width="0.0144%" height="15" fill="rgb(235,124,12)" fg:x="9103" fg:w="10"/><text x="13.4003%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="13.1503%" y="277" width="0.0144%" height="15" fill="rgb(224,169,11)" fg:x="9103" fg:w="10"/><text x="13.4003%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="13.1503%" y="261" width="0.0144%" height="15" fill="rgb(250,166,2)" fg:x="9103" fg:w="10"/><text x="13.4003%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (7 samples, 0.01%)</title><rect x="13.1546%" y="245" width="0.0101%" height="15" fill="rgb(242,216,29)" fg:x="9106" fg:w="7"/><text x="13.4046%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="13.2008%" y="261" width="0.0274%" height="15" fill="rgb(230,116,27)" fg:x="9138" fg:w="19"/><text x="13.4508%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="13.2095%" y="245" width="0.0188%" height="15" fill="rgb(228,99,48)" fg:x="9144" fg:w="13"/><text x="13.4595%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.04%)</title><rect x="13.1878%" y="293" width="0.0419%" height="15" fill="rgb(253,11,6)" fg:x="9129" fg:w="29"/><text x="13.4378%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.03%)</title><rect x="13.1950%" y="277" width="0.0347%" height="15" fill="rgb(247,143,39)" fg:x="9134" fg:w="24"/><text x="13.4450%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="13.2470%" y="277" width="0.0130%" height="15" fill="rgb(236,97,10)" fg:x="9170" fg:w="9"/><text x="13.4970%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="13.2326%" y="293" width="0.0289%" height="15" fill="rgb(233,208,19)" fg:x="9160" fg:w="20"/><text x="13.4826%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="13.2644%" y="293" width="0.0116%" height="15" fill="rgb(216,164,2)" fg:x="9182" fg:w="8"/><text x="13.5144%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="13.2759%" y="293" width="0.0173%" height="15" fill="rgb(220,129,5)" fg:x="9190" fg:w="12"/><text x="13.5259%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (160 samples, 0.23%)</title><rect x="13.2990%" y="293" width="0.2311%" height="15" fill="rgb(242,17,10)" fg:x="9206" fg:w="160"/><text x="13.5490%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (339 samples, 0.49%)</title><rect x="13.5302%" y="293" width="0.4897%" height="15" fill="rgb(242,107,0)" fg:x="9366" fg:w="339"/><text x="13.7802%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (16 samples, 0.02%)</title><rect x="14.0199%" y="293" width="0.0231%" height="15" fill="rgb(251,28,31)" fg:x="9705" fg:w="16"/><text x="14.2699%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (14 samples, 0.02%)</title><rect x="14.0459%" y="293" width="0.0202%" height="15" fill="rgb(233,223,10)" fg:x="9723" fg:w="14"/><text x="14.2959%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (402 samples, 0.58%)</title><rect x="14.0777%" y="293" width="0.5807%" height="15" fill="rgb(215,21,27)" fg:x="9745" fg:w="402"/><text x="14.3277%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (49 samples, 0.07%)</title><rect x="14.6584%" y="293" width="0.0708%" height="15" fill="rgb(232,23,21)" fg:x="10147" fg:w="49"/><text x="14.9084%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 0.04%)</title><rect x="14.7292%" y="293" width="0.0361%" height="15" fill="rgb(244,5,23)" fg:x="10196" fg:w="25"/><text x="14.9792%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.11%)</title><rect x="15.7549%" y="245" width="0.1083%" height="15" fill="rgb(226,81,46)" fg:x="10906" fg:w="75"/><text x="16.0049%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (70 samples, 0.10%)</title><rect x="15.7621%" y="229" width="0.1011%" height="15" fill="rgb(247,70,30)" fg:x="10911" fg:w="70"/><text x="16.0121%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (85 samples, 0.12%)</title><rect x="15.7419%" y="277" width="0.1228%" height="15" fill="rgb(212,68,19)" fg:x="10897" fg:w="85"/><text x="15.9919%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (79 samples, 0.11%)</title><rect x="15.7505%" y="261" width="0.1141%" height="15" fill="rgb(240,187,13)" fg:x="10903" fg:w="79"/><text x="16.0005%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.02%)</title><rect x="15.8690%" y="277" width="0.0217%" height="15" fill="rgb(223,113,26)" fg:x="10985" fg:w="15"/><text x="16.1190%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="15.8791%" y="261" width="0.0116%" height="15" fill="rgb(206,192,2)" fg:x="10992" fg:w="8"/><text x="16.1291%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="15.9643%" y="197" width="0.0202%" height="15" fill="rgb(241,108,4)" fg:x="11051" fg:w="14"/><text x="16.2143%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (32 samples, 0.05%)</title><rect x="15.9441%" y="229" width="0.0462%" height="15" fill="rgb(247,173,49)" fg:x="11037" fg:w="32"/><text x="16.1941%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (20 samples, 0.03%)</title><rect x="15.9615%" y="213" width="0.0289%" height="15" fill="rgb(224,114,35)" fg:x="11049" fg:w="20"/><text x="16.2115%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (54 samples, 0.08%)</title><rect x="15.9383%" y="245" width="0.0780%" height="15" fill="rgb(245,159,27)" fg:x="11033" fg:w="54"/><text x="16.1883%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="15.9904%" y="229" width="0.0260%" height="15" fill="rgb(245,172,44)" fg:x="11069" fg:w="18"/><text x="16.2404%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (88 samples, 0.13%)</title><rect x="15.8979%" y="277" width="0.1271%" height="15" fill="rgb(236,23,11)" fg:x="11005" fg:w="88"/><text x="16.1479%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (78 samples, 0.11%)</title><rect x="15.9123%" y="261" width="0.1127%" height="15" fill="rgb(205,117,38)" fg:x="11015" fg:w="78"/><text x="16.1623%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (872 samples, 1.26%)</title><rect x="14.7697%" y="293" width="1.2597%" height="15" fill="rgb(237,72,25)" fg:x="10224" fg:w="872"/><text x="15.0197%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (74 samples, 0.11%)</title><rect x="21.1823%" y="277" width="0.1069%" height="15" fill="rgb(244,70,9)" fg:x="14663" fg:w="74"/><text x="21.4323%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (16 samples, 0.02%)</title><rect x="21.2892%" y="277" width="0.0231%" height="15" fill="rgb(217,125,39)" fg:x="14737" fg:w="16"/><text x="21.5392%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (53 samples, 0.08%)</title><rect x="21.3152%" y="277" width="0.0766%" height="15" fill="rgb(235,36,10)" fg:x="14755" fg:w="53"/><text x="21.5652%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (70 samples, 0.10%)</title><rect x="21.3917%" y="277" width="0.1011%" height="15" fill="rgb(251,123,47)" fg:x="14808" fg:w="70"/><text x="21.6417%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="21.4972%" y="277" width="0.0116%" height="15" fill="rgb(221,13,13)" fg:x="14881" fg:w="8"/><text x="21.7472%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (63 samples, 0.09%)</title><rect x="21.5160%" y="277" width="0.0910%" height="15" fill="rgb(238,131,9)" fg:x="14894" fg:w="63"/><text x="21.7660%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="21.6070%" y="277" width="0.0260%" height="15" fill="rgb(211,50,8)" fg:x="14957" fg:w="18"/><text x="21.8570%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.01%)</title><rect x="21.6330%" y="277" width="0.0144%" height="15" fill="rgb(245,182,24)" fg:x="14975" fg:w="10"/><text x="21.8830%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.35%)</title><rect x="21.6561%" y="277" width="0.3510%" height="15" fill="rgb(242,14,37)" fg:x="14991" fg:w="243"/><text x="21.9061%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.09%)</title><rect x="22.0071%" y="277" width="0.0939%" height="15" fill="rgb(246,228,12)" fg:x="15234" fg:w="65"/><text x="22.2571%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (65 samples, 0.09%)</title><rect x="22.1010%" y="277" width="0.0939%" height="15" fill="rgb(213,55,15)" fg:x="15299" fg:w="65"/><text x="22.3510%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,699 samples, 2.45%)</title><rect x="22.1949%" y="277" width="2.4544%" height="15" fill="rgb(209,9,3)" fg:x="15364" fg:w="1699"/><text x="22.4449%" y="287.50">ru..</text></g><g><title>rust_qecp`DYLD-STUB$$free (46 samples, 0.07%)</title><rect x="24.6493%" y="277" width="0.0665%" height="15" fill="rgb(230,59,30)" fg:x="17063" fg:w="46"/><text x="24.8993%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (17 samples, 0.02%)</title><rect x="24.7158%" y="277" width="0.0246%" height="15" fill="rgb(209,121,21)" fg:x="17109" fg:w="17"/><text x="24.9658%" y="287.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="24.7418%" y="277" width="0.0173%" height="15" fill="rgb(220,109,13)" fg:x="17127" fg:w="12"/><text x="24.9918%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="24.8400%" y="245" width="0.0101%" height="15" fill="rgb(232,18,1)" fg:x="17195" fg:w="7"/><text x="25.0900%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.01%)</title><rect x="24.8935%" y="149" width="0.0144%" height="15" fill="rgb(215,41,42)" fg:x="17232" fg:w="10"/><text x="25.1435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="24.8891%" y="181" width="0.0202%" height="15" fill="rgb(224,123,36)" fg:x="17229" fg:w="14"/><text x="25.1391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.02%)</title><rect x="24.8891%" y="165" width="0.0202%" height="15" fill="rgb(240,125,3)" fg:x="17229" fg:w="14"/><text x="25.1391%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (33 samples, 0.05%)</title><rect x="24.8631%" y="213" width="0.0477%" height="15" fill="rgb(205,98,50)" fg:x="17211" fg:w="33"/><text x="25.1131%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="24.8848%" y="197" width="0.0260%" height="15" fill="rgb(205,185,37)" fg:x="17226" fg:w="18"/><text x="25.1348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (131 samples, 0.19%)</title><rect x="24.8530%" y="229" width="0.1892%" height="15" fill="rgb(238,207,15)" fg:x="17204" fg:w="131"/><text x="25.1030%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (91 samples, 0.13%)</title><rect x="24.9108%" y="213" width="0.1315%" height="15" fill="rgb(213,199,42)" fg:x="17244" fg:w="91"/><text x="25.1608%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (196 samples, 0.28%)</title><rect x="24.7663%" y="277" width="0.2831%" height="15" fill="rgb(235,201,11)" fg:x="17144" fg:w="196"/><text x="25.0163%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (147 samples, 0.21%)</title><rect x="24.8371%" y="261" width="0.2124%" height="15" fill="rgb(207,46,11)" fg:x="17193" fg:w="147"/><text x="25.0871%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (138 samples, 0.20%)</title><rect x="24.8501%" y="245" width="0.1994%" height="15" fill="rgb(241,35,35)" fg:x="17202" fg:w="138"/><text x="25.1001%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="25.1492%" y="261" width="0.0101%" height="15" fill="rgb(243,32,47)" fg:x="17409" fg:w="7"/><text x="25.3992%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (57 samples, 0.08%)</title><rect x="25.4540%" y="245" width="0.0823%" height="15" fill="rgb(247,202,23)" fg:x="17620" fg:w="57"/><text x="25.7040%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="25.5363%" y="245" width="0.0231%" height="15" fill="rgb(219,102,11)" fg:x="17677" fg:w="16"/><text x="25.7863%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (33 samples, 0.05%)</title><rect x="25.5594%" y="245" width="0.0477%" height="15" fill="rgb(243,110,44)" fg:x="17693" fg:w="33"/><text x="25.8094%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (415 samples, 0.60%)</title><rect x="25.1593%" y="261" width="0.5995%" height="15" fill="rgb(222,74,54)" fg:x="17416" fg:w="415"/><text x="25.4093%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (105 samples, 0.15%)</title><rect x="25.6071%" y="245" width="0.1517%" height="15" fill="rgb(216,99,12)" fg:x="17726" fg:w="105"/><text x="25.8571%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (80 samples, 0.12%)</title><rect x="25.6432%" y="229" width="0.1156%" height="15" fill="rgb(226,22,26)" fg:x="17751" fg:w="80"/><text x="25.8932%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.02%)</title><rect x="25.7588%" y="261" width="0.0159%" height="15" fill="rgb(217,163,10)" fg:x="17831" fg:w="11"/><text x="26.0088%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (79 samples, 0.11%)</title><rect x="25.9668%" y="245" width="0.1141%" height="15" fill="rgb(213,25,53)" fg:x="17975" fg:w="79"/><text x="26.2168%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (14 samples, 0.02%)</title><rect x="26.0809%" y="245" width="0.0202%" height="15" fill="rgb(252,105,26)" fg:x="18054" fg:w="14"/><text x="26.3309%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (23 samples, 0.03%)</title><rect x="26.1012%" y="245" width="0.0332%" height="15" fill="rgb(220,39,43)" fg:x="18068" fg:w="23"/><text x="26.3512%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (166 samples, 0.24%)</title><rect x="26.1344%" y="245" width="0.2398%" height="15" fill="rgb(229,68,48)" fg:x="18091" fg:w="166"/><text x="26.3844%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (8 samples, 0.01%)</title><rect x="26.3742%" y="245" width="0.0116%" height="15" fill="rgb(252,8,32)" fg:x="18257" fg:w="8"/><text x="26.6242%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (370 samples, 0.53%)</title><rect x="26.3857%" y="245" width="0.5345%" height="15" fill="rgb(223,20,43)" fg:x="18265" fg:w="370"/><text x="26.6357%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (364 samples, 0.53%)</title><rect x="26.3944%" y="229" width="0.5258%" height="15" fill="rgb(229,81,49)" fg:x="18271" fg:w="364"/><text x="26.6444%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.18%)</title><rect x="26.9260%" y="229" width="0.1820%" height="15" fill="rgb(236,28,36)" fg:x="18639" fg:w="126"/><text x="27.1760%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (926 samples, 1.34%)</title><rect x="25.7747%" y="261" width="1.3377%" height="15" fill="rgb(249,185,26)" fg:x="17842" fg:w="926"/><text x="26.0247%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (133 samples, 0.19%)</title><rect x="26.9202%" y="245" width="0.1921%" height="15" fill="rgb(249,174,33)" fg:x="18635" fg:w="133"/><text x="27.1702%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (21 samples, 0.03%)</title><rect x="27.3421%" y="229" width="0.0303%" height="15" fill="rgb(233,201,37)" fg:x="18927" fg:w="21"/><text x="27.5921%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (80 samples, 0.12%)</title><rect x="27.3724%" y="229" width="0.1156%" height="15" fill="rgb(221,78,26)" fg:x="18948" fg:w="80"/><text x="27.6224%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (88 samples, 0.13%)</title><rect x="27.4880%" y="229" width="0.1271%" height="15" fill="rgb(250,127,30)" fg:x="19028" fg:w="88"/><text x="27.7380%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (32 samples, 0.05%)</title><rect x="27.6151%" y="229" width="0.0462%" height="15" fill="rgb(230,49,44)" fg:x="19116" fg:w="32"/><text x="27.8651%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (55 samples, 0.08%)</title><rect x="27.6613%" y="229" width="0.0795%" height="15" fill="rgb(229,67,23)" fg:x="19148" fg:w="55"/><text x="27.9113%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (34 samples, 0.05%)</title><rect x="27.6917%" y="213" width="0.0491%" height="15" fill="rgb(249,83,47)" fg:x="19169" fg:w="34"/><text x="27.9417%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (114 samples, 0.16%)</title><rect x="27.7523%" y="213" width="0.1647%" height="15" fill="rgb(215,43,3)" fg:x="19211" fg:w="114"/><text x="28.0023%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (486 samples, 0.70%)</title><rect x="27.2164%" y="245" width="0.7021%" height="15" fill="rgb(238,154,13)" fg:x="18840" fg:w="486"/><text x="27.4664%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (123 samples, 0.18%)</title><rect x="27.7408%" y="229" width="0.1777%" height="15" fill="rgb(219,56,2)" fg:x="19203" fg:w="123"/><text x="27.9908%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (559 samples, 0.81%)</title><rect x="27.1124%" y="261" width="0.8075%" height="15" fill="rgb(233,0,4)" fg:x="18768" fg:w="559"/><text x="27.3624%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="27.9199%" y="261" width="0.0303%" height="15" fill="rgb(235,30,7)" fg:x="19327" fg:w="21"/><text x="28.1699%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (130 samples, 0.19%)</title><rect x="27.9502%" y="261" width="0.1878%" height="15" fill="rgb(250,79,13)" fg:x="19348" fg:w="130"/><text x="28.2002%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (69 samples, 0.10%)</title><rect x="28.0384%" y="245" width="0.0997%" height="15" fill="rgb(211,146,34)" fg:x="19409" fg:w="69"/><text x="28.2884%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (69 samples, 0.10%)</title><rect x="28.0384%" y="229" width="0.0997%" height="15" fill="rgb(228,22,38)" fg:x="19409" fg:w="69"/><text x="28.2884%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (39 samples, 0.06%)</title><rect x="28.1380%" y="261" width="0.0563%" height="15" fill="rgb(235,168,5)" fg:x="19478" fg:w="39"/><text x="28.3880%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (33 samples, 0.05%)</title><rect x="28.2074%" y="261" width="0.0477%" height="15" fill="rgb(221,155,16)" fg:x="19526" fg:w="33"/><text x="28.4574%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.03%)</title><rect x="28.2551%" y="261" width="0.0347%" height="15" fill="rgb(215,215,53)" fg:x="19559" fg:w="24"/><text x="28.5051%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="28.2897%" y="261" width="0.0159%" height="15" fill="rgb(223,4,10)" fg:x="19583" fg:w="11"/><text x="28.5397%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (39 samples, 0.06%)</title><rect x="28.4270%" y="229" width="0.0563%" height="15" fill="rgb(234,103,6)" fg:x="19678" fg:w="39"/><text x="28.6770%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 0.16%)</title><rect x="28.3316%" y="245" width="0.1589%" height="15" fill="rgb(227,97,0)" fg:x="19612" fg:w="110"/><text x="28.5816%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="28.4934%" y="245" width="0.0101%" height="15" fill="rgb(234,150,53)" fg:x="19724" fg:w="7"/><text x="28.7434%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (67 samples, 0.10%)</title><rect x="28.5035%" y="245" width="0.0968%" height="15" fill="rgb(228,201,54)" fg:x="19731" fg:w="67"/><text x="28.7535%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (14 samples, 0.02%)</title><rect x="28.5801%" y="229" width="0.0202%" height="15" fill="rgb(222,22,37)" fg:x="19784" fg:w="14"/><text x="28.8301%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.02%)</title><rect x="28.5801%" y="213" width="0.0202%" height="15" fill="rgb(237,53,32)" fg:x="19784" fg:w="14"/><text x="28.8301%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,461 samples, 3.56%)</title><rect x="25.0509%" y="277" width="3.5552%" height="15" fill="rgb(233,25,53)" fg:x="17341" fg:w="2461"/><text x="25.3009%" y="287.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (203 samples, 0.29%)</title><rect x="28.3128%" y="261" width="0.2933%" height="15" fill="rgb(210,40,34)" fg:x="19599" fg:w="203"/><text x="28.5628%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (252 samples, 0.36%)</title><rect x="28.6061%" y="277" width="0.3640%" height="15" fill="rgb(241,220,44)" fg:x="19802" fg:w="252"/><text x="28.8561%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (226 samples, 0.33%)</title><rect x="28.6437%" y="261" width="0.3265%" height="15" fill="rgb(235,28,35)" fg:x="19828" fg:w="226"/><text x="28.8937%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (177 samples, 0.26%)</title><rect x="28.7144%" y="245" width="0.2557%" height="15" fill="rgb(210,56,17)" fg:x="19877" fg:w="177"/><text x="28.9644%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (113 samples, 0.16%)</title><rect x="28.8069%" y="229" width="0.1632%" height="15" fill="rgb(224,130,29)" fg:x="19941" fg:w="113"/><text x="29.0569%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (55 samples, 0.08%)</title><rect x="28.8907%" y="213" width="0.0795%" height="15" fill="rgb(235,212,8)" fg:x="19999" fg:w="55"/><text x="29.1407%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (10 samples, 0.01%)</title><rect x="28.9557%" y="197" width="0.0144%" height="15" fill="rgb(223,33,50)" fg:x="20044" fg:w="10"/><text x="29.2057%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (88 samples, 0.13%)</title><rect x="28.9701%" y="277" width="0.1271%" height="15" fill="rgb(219,149,13)" fg:x="20054" fg:w="88"/><text x="29.2201%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,445 samples, 3.53%)</title><rect x="29.0973%" y="277" width="3.5321%" height="15" fill="rgb(250,156,29)" fg:x="20142" fg:w="2445"/><text x="29.3473%" y="287.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (138 samples, 0.20%)</title><rect x="32.6293%" y="277" width="0.1994%" height="15" fill="rgb(216,193,19)" fg:x="22587" fg:w="138"/><text x="32.8793%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="32.9789%" y="261" width="0.0101%" height="15" fill="rgb(216,135,14)" fg:x="22829" fg:w="7"/><text x="33.2289%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (113 samples, 0.16%)</title><rect x="32.9905%" y="261" width="0.1632%" height="15" fill="rgb(241,47,5)" fg:x="22837" fg:w="113"/><text x="33.2405%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="33.3892%" y="245" width="0.0159%" height="15" fill="rgb(233,42,35)" fg:x="23113" fg:w="11"/><text x="33.6392%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (60 samples, 0.09%)</title><rect x="33.4051%" y="245" width="0.0867%" height="15" fill="rgb(231,13,6)" fg:x="23124" fg:w="60"/><text x="33.6551%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (227 samples, 0.33%)</title><rect x="33.4918%" y="245" width="0.3279%" height="15" fill="rgb(207,181,40)" fg:x="23184" fg:w="227"/><text x="33.7418%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,003 samples, 1.45%)</title><rect x="32.8287%" y="277" width="1.4489%" height="15" fill="rgb(254,173,49)" fg:x="22725" fg:w="1003"/><text x="33.0787%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (778 samples, 1.12%)</title><rect x="33.1537%" y="261" width="1.1239%" height="15" fill="rgb(221,1,38)" fg:x="22950" fg:w="778"/><text x="33.4037%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (317 samples, 0.46%)</title><rect x="33.8197%" y="245" width="0.4579%" height="15" fill="rgb(206,124,46)" fg:x="23411" fg:w="317"/><text x="34.0697%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (25 samples, 0.04%)</title><rect x="34.2776%" y="277" width="0.0361%" height="15" fill="rgb(249,21,11)" fg:x="23728" fg:w="25"/><text x="34.5276%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (16 samples, 0.02%)</title><rect x="34.3137%" y="277" width="0.0231%" height="15" fill="rgb(222,201,40)" fg:x="23753" fg:w="16"/><text x="34.5637%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (147 samples, 0.21%)</title><rect x="34.3369%" y="277" width="0.2124%" height="15" fill="rgb(235,61,29)" fg:x="23769" fg:w="147"/><text x="34.5869%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,297 samples, 4.76%)</title><rect x="36.9054%" y="261" width="4.7629%" height="15" fill="rgb(219,207,3)" fg:x="25547" fg:w="3297"/><text x="37.1554%" y="271.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.04%)</title><rect x="41.6682%" y="261" width="0.0448%" height="15" fill="rgb(222,56,46)" fg:x="28844" fg:w="31"/><text x="41.9182%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (30 samples, 0.04%)</title><rect x="41.6697%" y="245" width="0.0433%" height="15" fill="rgb(239,76,54)" fg:x="28845" fg:w="30"/><text x="41.9197%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.04%)</title><rect x="41.6697%" y="229" width="0.0433%" height="15" fill="rgb(231,124,27)" fg:x="28845" fg:w="30"/><text x="41.9197%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.04%)</title><rect x="41.6697%" y="213" width="0.0433%" height="15" fill="rgb(249,195,6)" fg:x="28845" fg:w="30"/><text x="41.9197%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.04%)</title><rect x="41.6740%" y="197" width="0.0390%" height="15" fill="rgb(237,174,47)" fg:x="28848" fg:w="27"/><text x="41.9240%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,884 samples, 4.17%)</title><rect x="41.7130%" y="261" width="4.1662%" height="15" fill="rgb(206,201,31)" fg:x="28875" fg:w="2884"/><text x="41.9630%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (624 samples, 0.90%)</title><rect x="45.8793%" y="261" width="0.9014%" height="15" fill="rgb(231,57,52)" fg:x="31759" fg:w="624"/><text x="46.1293%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (25 samples, 0.04%)</title><rect x="46.8197%" y="245" width="0.0361%" height="15" fill="rgb(248,177,22)" fg:x="32410" fg:w="25"/><text x="47.0697%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.04%)</title><rect x="46.8197%" y="229" width="0.0361%" height="15" fill="rgb(215,211,37)" fg:x="32410" fg:w="25"/><text x="47.0697%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (120 samples, 0.17%)</title><rect x="46.8601%" y="245" width="0.1734%" height="15" fill="rgb(241,128,51)" fg:x="32438" fg:w="120"/><text x="47.1101%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="47.2025%" y="229" width="0.0116%" height="15" fill="rgb(227,165,31)" fg:x="32675" fg:w="8"/><text x="47.4525%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (208 samples, 0.30%)</title><rect x="47.2141%" y="229" width="0.3005%" height="15" fill="rgb(228,167,24)" fg:x="32683" fg:w="208"/><text x="47.4641%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (692 samples, 1.00%)</title><rect x="46.7807%" y="261" width="0.9997%" height="15" fill="rgb(228,143,12)" fg:x="32383" fg:w="692"/><text x="47.0307%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (517 samples, 0.75%)</title><rect x="47.0335%" y="245" width="0.7469%" height="15" fill="rgb(249,149,8)" fg:x="32558" fg:w="517"/><text x="47.2835%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (184 samples, 0.27%)</title><rect x="47.5146%" y="229" width="0.2658%" height="15" fill="rgb(243,35,44)" fg:x="32891" fg:w="184"/><text x="47.7646%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (11,102 samples, 16.04%)</title><rect x="34.5492%" y="277" width="16.0380%" height="15" fill="rgb(246,89,9)" fg:x="23916" fg:w="11102"/><text x="34.7992%" y="287.50">rust_qecp`rust_qecp::ftqe..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,943 samples, 2.81%)</title><rect x="47.7804%" y="261" width="2.8069%" height="15" fill="rgb(233,213,13)" fg:x="33075" fg:w="1943"/><text x="48.0304%" y="271.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.04%)</title><rect x="50.5511%" y="245" width="0.0361%" height="15" fill="rgb(233,141,41)" fg:x="34993" fg:w="25"/><text x="50.8011%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="50.5511%" y="229" width="0.0361%" height="15" fill="rgb(239,167,4)" fg:x="34993" fg:w="25"/><text x="50.8011%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.04%)</title><rect x="50.5511%" y="213" width="0.0361%" height="15" fill="rgb(209,217,16)" fg:x="34993" fg:w="25"/><text x="50.8011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.03%)</title><rect x="50.5526%" y="197" width="0.0347%" height="15" fill="rgb(219,88,35)" fg:x="34994" fg:w="24"/><text x="50.8026%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.03%)</title><rect x="50.5569%" y="181" width="0.0303%" height="15" fill="rgb(220,193,23)" fg:x="34997" fg:w="21"/><text x="50.8069%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 0.04%)</title><rect x="52.2745%" y="261" width="0.0419%" height="15" fill="rgb(230,90,52)" fg:x="36186" fg:w="29"/><text x="52.5245%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="52.3063%" y="245" width="0.0101%" height="15" fill="rgb(252,106,19)" fg:x="36208" fg:w="7"/><text x="52.5563%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (9 samples, 0.01%)</title><rect x="52.3367%" y="229" width="0.0130%" height="15" fill="rgb(206,74,20)" fg:x="36229" fg:w="9"/><text x="52.5867%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.05%)</title><rect x="52.3164%" y="245" width="0.0477%" height="15" fill="rgb(230,138,44)" fg:x="36215" fg:w="33"/><text x="52.5664%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="52.3497%" y="229" width="0.0144%" height="15" fill="rgb(235,182,43)" fg:x="36238" fg:w="10"/><text x="52.5997%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (41 samples, 0.06%)</title><rect x="52.3164%" y="261" width="0.0592%" height="15" fill="rgb(242,16,51)" fg:x="36215" fg:w="41"/><text x="52.5664%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (39 samples, 0.06%)</title><rect x="52.3757%" y="245" width="0.0563%" height="15" fill="rgb(248,9,4)" fg:x="36256" fg:w="39"/><text x="52.6257%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="52.4320%" y="245" width="0.0188%" height="15" fill="rgb(210,31,22)" fg:x="36295" fg:w="13"/><text x="52.6820%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (19 samples, 0.03%)</title><rect x="52.4508%" y="245" width="0.0274%" height="15" fill="rgb(239,54,39)" fg:x="36308" fg:w="19"/><text x="52.7008%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="52.4782%" y="245" width="0.0289%" height="15" fill="rgb(230,99,41)" fg:x="36327" fg:w="20"/><text x="52.7282%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="52.5071%" y="245" width="0.0130%" height="15" fill="rgb(253,106,12)" fg:x="36347" fg:w="9"/><text x="52.7571%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="52.5201%" y="245" width="0.0159%" height="15" fill="rgb(213,46,41)" fg:x="36356" fg:w="11"/><text x="52.7701%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.02%)</title><rect x="52.7253%" y="213" width="0.0217%" height="15" fill="rgb(215,133,35)" fg:x="36498" fg:w="15"/><text x="52.9753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (47 samples, 0.07%)</title><rect x="52.9549%" y="181" width="0.0679%" height="15" fill="rgb(213,28,5)" fg:x="36657" fg:w="47"/><text x="53.2049%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (144 samples, 0.21%)</title><rect x="52.8191%" y="197" width="0.2080%" height="15" fill="rgb(215,77,49)" fg:x="36563" fg:w="144"/><text x="53.0691%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (309 samples, 0.45%)</title><rect x="52.5996%" y="229" width="0.4464%" height="15" fill="rgb(248,100,22)" fg:x="36411" fg:w="309"/><text x="52.8496%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (207 samples, 0.30%)</title><rect x="52.7469%" y="213" width="0.2990%" height="15" fill="rgb(208,67,9)" fg:x="36513" fg:w="207"/><text x="52.9969%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="53.0272%" y="197" width="0.0188%" height="15" fill="rgb(219,133,21)" fg:x="36707" fg:w="13"/><text x="53.2772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.03%)</title><rect x="53.0460%" y="229" width="0.0347%" height="15" fill="rgb(246,46,29)" fg:x="36720" fg:w="24"/><text x="53.2960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.07%)</title><rect x="53.1817%" y="213" width="0.0737%" height="15" fill="rgb(246,185,52)" fg:x="36814" fg:w="51"/><text x="53.4317%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (123 samples, 0.18%)</title><rect x="53.0806%" y="229" width="0.1777%" height="15" fill="rgb(252,136,11)" fg:x="36744" fg:w="123"/><text x="53.3306%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="53.2583%" y="229" width="0.0101%" height="15" fill="rgb(219,138,53)" fg:x="36867" fg:w="7"/><text x="53.5083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.06%)</title><rect x="53.2684%" y="229" width="0.0607%" height="15" fill="rgb(211,51,23)" fg:x="36874" fg:w="42"/><text x="53.5184%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="53.3291%" y="229" width="0.0101%" height="15" fill="rgb(247,221,28)" fg:x="36916" fg:w="7"/><text x="53.5791%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="53.3392%" y="229" width="0.0130%" height="15" fill="rgb(251,222,45)" fg:x="36923" fg:w="9"/><text x="53.5892%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (514 samples, 0.74%)</title><rect x="53.3825%" y="213" width="0.7425%" height="15" fill="rgb(217,162,53)" fg:x="36953" fg:w="514"/><text x="53.6325%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="54.1294%" y="213" width="0.0101%" height="15" fill="rgb(229,93,14)" fg:x="37470" fg:w="7"/><text x="54.3794%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 0.05%)</title><rect x="54.1756%" y="197" width="0.0549%" height="15" fill="rgb(209,67,49)" fg:x="37502" fg:w="38"/><text x="54.4256%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (71 samples, 0.10%)</title><rect x="54.2305%" y="197" width="0.1026%" height="15" fill="rgb(213,87,29)" fg:x="37540" fg:w="71"/><text x="54.4805%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (146 samples, 0.21%)</title><rect x="54.1453%" y="213" width="0.2109%" height="15" fill="rgb(205,151,52)" fg:x="37481" fg:w="146"/><text x="54.3953%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.02%)</title><rect x="54.3331%" y="197" width="0.0231%" height="15" fill="rgb(253,215,39)" fg:x="37611" fg:w="16"/><text x="54.5831%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="54.3562%" y="213" width="0.0101%" height="15" fill="rgb(221,220,41)" fg:x="37627" fg:w="7"/><text x="54.6062%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="54.6668%" y="149" width="0.0202%" height="15" fill="rgb(218,133,21)" fg:x="37842" fg:w="14"/><text x="54.9168%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (126 samples, 0.18%)</title><rect x="54.5556%" y="165" width="0.1820%" height="15" fill="rgb(221,193,43)" fg:x="37765" fg:w="126"/><text x="54.8056%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (35 samples, 0.05%)</title><rect x="54.6870%" y="149" width="0.0506%" height="15" fill="rgb(240,128,52)" fg:x="37856" fg:w="35"/><text x="54.9370%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (204 samples, 0.29%)</title><rect x="54.4573%" y="197" width="0.2947%" height="15" fill="rgb(253,114,12)" fg:x="37697" fg:w="204"/><text x="54.7073%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (154 samples, 0.22%)</title><rect x="54.5296%" y="181" width="0.2225%" height="15" fill="rgb(215,223,47)" fg:x="37747" fg:w="154"/><text x="54.7796%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="54.7376%" y="165" width="0.0144%" height="15" fill="rgb(248,225,23)" fg:x="37891" fg:w="10"/><text x="54.9876%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="54.7520%" y="197" width="0.0217%" height="15" fill="rgb(250,108,0)" fg:x="37901" fg:w="15"/><text x="55.0020%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (988 samples, 1.43%)</title><rect x="53.3522%" y="229" width="1.4273%" height="15" fill="rgb(228,208,7)" fg:x="36932" fg:w="988"/><text x="53.6022%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (286 samples, 0.41%)</title><rect x="54.3663%" y="213" width="0.4132%" height="15" fill="rgb(244,45,10)" fg:x="37634" fg:w="286"/><text x="54.6163%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.04%)</title><rect x="54.8532%" y="213" width="0.0433%" height="15" fill="rgb(207,125,25)" fg:x="37971" fg:w="30"/><text x="55.1032%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (58 samples, 0.08%)</title><rect x="54.8965%" y="213" width="0.0838%" height="15" fill="rgb(210,195,18)" fg:x="38001" fg:w="58"/><text x="55.1465%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (186 samples, 0.27%)</title><rect x="54.7795%" y="229" width="0.2687%" height="15" fill="rgb(249,80,12)" fg:x="37920" fg:w="186"/><text x="55.0295%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (47 samples, 0.07%)</title><rect x="54.9803%" y="213" width="0.0679%" height="15" fill="rgb(221,65,9)" fg:x="38059" fg:w="47"/><text x="55.2303%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="55.0482%" y="229" width="0.0130%" height="15" fill="rgb(235,49,36)" fg:x="38106" fg:w="9"/><text x="55.2982%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,760 samples, 2.54%)</title><rect x="52.5447%" y="245" width="2.5425%" height="15" fill="rgb(225,32,20)" fg:x="36373" fg:w="1760"/><text x="52.7947%" y="255.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.03%)</title><rect x="55.0612%" y="229" width="0.0260%" height="15" fill="rgb(215,141,46)" fg:x="38115" fg:w="18"/><text x="55.3112%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (11 samples, 0.02%)</title><rect x="55.0958%" y="245" width="0.0159%" height="15" fill="rgb(250,160,47)" fg:x="38139" fg:w="11"/><text x="55.3458%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="55.1117%" y="245" width="0.0130%" height="15" fill="rgb(216,222,40)" fg:x="38150" fg:w="9"/><text x="55.3617%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="55.1247%" y="245" width="0.0188%" height="15" fill="rgb(234,217,39)" fg:x="38159" fg:w="13"/><text x="55.3747%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="55.1435%" y="245" width="0.0101%" height="15" fill="rgb(207,178,40)" fg:x="38172" fg:w="7"/><text x="55.3935%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,929 samples, 2.79%)</title><rect x="52.3757%" y="261" width="2.7866%" height="15" fill="rgb(221,136,13)" fg:x="36256" fg:w="1929"/><text x="52.6257%" y="271.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="55.1623%" y="261" width="0.0101%" height="15" fill="rgb(249,199,10)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="55.1623%" y="245" width="0.0101%" height="15" fill="rgb(249,222,13)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="55.1623%" y="229" width="0.0101%" height="15" fill="rgb(244,185,38)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="55.1623%" y="213" width="0.0101%" height="15" fill="rgb(236,202,9)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="55.1623%" y="197" width="0.0101%" height="15" fill="rgb(250,229,37)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="55.1623%" y="181" width="0.0101%" height="15" fill="rgb(206,174,23)" fg:x="38185" fg:w="7"/><text x="55.4123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="55.3125%" y="245" width="0.0101%" height="15" fill="rgb(211,33,43)" fg:x="38289" fg:w="7"/><text x="55.5625%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="55.3227%" y="245" width="0.0274%" height="15" fill="rgb(245,58,50)" fg:x="38296" fg:w="19"/><text x="55.5727%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="55.3501%" y="245" width="0.0202%" height="15" fill="rgb(244,68,36)" fg:x="38315" fg:w="14"/><text x="55.6001%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (21 samples, 0.03%)</title><rect x="55.3703%" y="245" width="0.0303%" height="15" fill="rgb(232,229,15)" fg:x="38329" fg:w="21"/><text x="55.6203%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (9 samples, 0.01%)</title><rect x="55.4093%" y="245" width="0.0130%" height="15" fill="rgb(254,30,23)" fg:x="38356" fg:w="9"/><text x="55.6593%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="55.5885%" y="213" width="0.0116%" height="15" fill="rgb(235,160,14)" fg:x="38480" fg:w="8"/><text x="55.8385%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.04%)</title><rect x="55.7589%" y="181" width="0.0433%" height="15" fill="rgb(212,155,44)" fg:x="38598" fg:w="30"/><text x="56.0089%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (120 samples, 0.17%)</title><rect x="55.6376%" y="197" width="0.1734%" height="15" fill="rgb(226,2,50)" fg:x="38514" fg:w="120"/><text x="55.8876%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (223 samples, 0.32%)</title><rect x="55.5018%" y="229" width="0.3221%" height="15" fill="rgb(234,177,6)" fg:x="38420" fg:w="223"/><text x="55.7518%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (155 samples, 0.22%)</title><rect x="55.6000%" y="213" width="0.2239%" height="15" fill="rgb(217,24,9)" fg:x="38488" fg:w="155"/><text x="55.8500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="55.8109%" y="197" width="0.0130%" height="15" fill="rgb(220,13,46)" fg:x="38634" fg:w="9"/><text x="56.0609%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.02%)</title><rect x="55.8239%" y="229" width="0.0159%" height="15" fill="rgb(239,221,27)" fg:x="38643" fg:w="11"/><text x="56.0739%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="55.8398%" y="229" width="0.0202%" height="15" fill="rgb(222,198,25)" fg:x="38654" fg:w="14"/><text x="56.0898%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.03%)</title><rect x="55.8629%" y="229" width="0.0332%" height="15" fill="rgb(211,99,13)" fg:x="38670" fg:w="23"/><text x="56.1129%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (19 samples, 0.03%)</title><rect x="56.0305%" y="213" width="0.0274%" height="15" fill="rgb(232,111,31)" fg:x="38786" fg:w="19"/><text x="56.2805%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.02%)</title><rect x="56.1605%" y="197" width="0.0159%" height="15" fill="rgb(245,82,37)" fg:x="38876" fg:w="11"/><text x="56.4105%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (30 samples, 0.04%)</title><rect x="56.1764%" y="197" width="0.0433%" height="15" fill="rgb(227,149,46)" fg:x="38887" fg:w="30"/><text x="56.4264%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.03%)</title><rect x="56.2198%" y="197" width="0.0274%" height="15" fill="rgb(218,36,50)" fg:x="38917" fg:w="19"/><text x="56.4698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (204 samples, 0.29%)</title><rect x="56.2472%" y="197" width="0.2947%" height="15" fill="rgb(226,80,48)" fg:x="38936" fg:w="204"/><text x="56.4972%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (19 samples, 0.03%)</title><rect x="56.6604%" y="181" width="0.0274%" height="15" fill="rgb(238,224,15)" fg:x="39222" fg:w="19"/><text x="56.9104%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (113 samples, 0.16%)</title><rect x="56.6878%" y="181" width="0.1632%" height="15" fill="rgb(241,136,10)" fg:x="39241" fg:w="113"/><text x="56.9378%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (25 samples, 0.04%)</title><rect x="57.0027%" y="149" width="0.0361%" height="15" fill="rgb(208,32,45)" fg:x="39459" fg:w="25"/><text x="57.2527%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (108 samples, 0.16%)</title><rect x="56.8987%" y="165" width="0.1560%" height="15" fill="rgb(207,135,9)" fg:x="39387" fg:w="108"/><text x="57.1487%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.02%)</title><rect x="57.0388%" y="149" width="0.0159%" height="15" fill="rgb(206,86,44)" fg:x="39484" fg:w="11"/><text x="57.2888%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (148 samples, 0.21%)</title><rect x="56.8510%" y="181" width="0.2138%" height="15" fill="rgb(245,177,15)" fg:x="39354" fg:w="148"/><text x="57.1010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (87 samples, 0.13%)</title><rect x="57.0648%" y="181" width="0.1257%" height="15" fill="rgb(206,64,50)" fg:x="39502" fg:w="87"/><text x="57.3148%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="57.2108%" y="165" width="0.0101%" height="15" fill="rgb(234,36,40)" fg:x="39603" fg:w="7"/><text x="57.4608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (43 samples, 0.06%)</title><rect x="57.3018%" y="149" width="0.0621%" height="15" fill="rgb(213,64,8)" fg:x="39666" fg:w="43"/><text x="57.5518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (339 samples, 0.49%)</title><rect x="57.1905%" y="181" width="0.4897%" height="15" fill="rgb(210,75,36)" fg:x="39589" fg:w="339"/><text x="57.4405%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (318 samples, 0.46%)</title><rect x="57.2209%" y="165" width="0.4594%" height="15" fill="rgb(229,88,21)" fg:x="39610" fg:w="318"/><text x="57.4709%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (213 samples, 0.31%)</title><rect x="57.3725%" y="149" width="0.3077%" height="15" fill="rgb(252,204,47)" fg:x="39715" fg:w="213"/><text x="57.6225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (796 samples, 1.15%)</title><rect x="56.5419%" y="197" width="1.1499%" height="15" fill="rgb(208,77,27)" fg:x="39140" fg:w="796"/><text x="56.7919%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="57.6803%" y="181" width="0.0116%" height="15" fill="rgb(221,76,26)" fg:x="39928" fg:w="8"/><text x="57.9303%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,206 samples, 1.74%)</title><rect x="56.0580%" y="213" width="1.7422%" height="15" fill="rgb(225,139,18)" fg:x="38805" fg:w="1206"/><text x="56.3080%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (69 samples, 0.10%)</title><rect x="57.7005%" y="197" width="0.0997%" height="15" fill="rgb(230,137,11)" fg:x="39942" fg:w="69"/><text x="57.9505%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (106 samples, 0.15%)</title><rect x="57.8002%" y="213" width="0.1531%" height="15" fill="rgb(212,28,1)" fg:x="40011" fg:w="106"/><text x="58.0502%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (32 samples, 0.05%)</title><rect x="57.9533%" y="213" width="0.0462%" height="15" fill="rgb(248,164,17)" fg:x="40117" fg:w="32"/><text x="58.2033%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,459 samples, 2.11%)</title><rect x="55.8962%" y="229" width="2.1077%" height="15" fill="rgb(222,171,42)" fg:x="38693" fg:w="1459"/><text x="56.1462%" y="239.50">l..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,966 samples, 2.84%)</title><rect x="55.1724%" y="261" width="2.8401%" height="15" fill="rgb(243,84,45)" fg:x="38192" fg:w="1966"/><text x="55.4224%" y="271.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,793 samples, 2.59%)</title><rect x="55.4223%" y="245" width="2.5902%" height="15" fill="rgb(252,49,23)" fg:x="38365" fg:w="1793"/><text x="55.6723%" y="255.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (70 samples, 0.10%)</title><rect x="58.0125%" y="261" width="0.1011%" height="15" fill="rgb(215,19,7)" fg:x="40158" fg:w="70"/><text x="58.2625%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (150 samples, 0.22%)</title><rect x="58.1136%" y="245" width="0.2167%" height="15" fill="rgb(238,81,41)" fg:x="40228" fg:w="150"/><text x="58.3636%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.01%)</title><rect x="58.6366%" y="229" width="0.0101%" height="15" fill="rgb(210,199,37)" fg:x="40590" fg:w="7"/><text x="58.8866%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="58.6467%" y="229" width="0.0173%" height="15" fill="rgb(244,192,49)" fg:x="40597" fg:w="12"/><text x="58.8967%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="58.6640%" y="229" width="0.0217%" height="15" fill="rgb(226,211,11)" fg:x="40609" fg:w="15"/><text x="58.9140%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.01%)</title><rect x="59.0021%" y="197" width="0.0144%" height="15" fill="rgb(236,162,54)" fg:x="40843" fg:w="10"/><text x="59.2521%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.02%)</title><rect x="59.0165%" y="197" width="0.0231%" height="15" fill="rgb(220,229,9)" fg:x="40853" fg:w="16"/><text x="59.2665%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="59.0743%" y="181" width="0.0173%" height="15" fill="rgb(250,87,22)" fg:x="40893" fg:w="12"/><text x="59.3243%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (60 samples, 0.09%)</title><rect x="59.1884%" y="165" width="0.0867%" height="15" fill="rgb(239,43,17)" fg:x="40972" fg:w="60"/><text x="59.4384%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,731 samples, 2.50%)</title><rect x="59.3488%" y="149" width="2.5006%" height="15" fill="rgb(231,177,25)" fg:x="41083" fg:w="1731"/><text x="59.5988%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (27 samples, 0.04%)</title><rect x="61.8494%" y="149" width="0.0390%" height="15" fill="rgb(219,179,1)" fg:x="42814" fg:w="27"/><text x="62.0994%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,236 samples, 3.23%)</title><rect x="58.7912%" y="213" width="3.2301%" height="15" fill="rgb(238,219,53)" fg:x="40697" fg:w="2236"/><text x="59.0412%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,064 samples, 2.98%)</title><rect x="59.0396%" y="197" width="2.9817%" height="15" fill="rgb(232,167,36)" fg:x="40869" fg:w="2064"/><text x="59.2896%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2,028 samples, 2.93%)</title><rect x="59.0916%" y="181" width="2.9297%" height="15" fill="rgb(244,19,51)" fg:x="40905" fg:w="2028"/><text x="59.3416%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,899 samples, 2.74%)</title><rect x="59.2780%" y="165" width="2.7433%" height="15" fill="rgb(224,6,22)" fg:x="41034" fg:w="1899"/><text x="59.5280%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (92 samples, 0.13%)</title><rect x="61.8884%" y="149" width="0.1329%" height="15" fill="rgb(224,145,5)" fg:x="42841" fg:w="92"/><text x="62.1384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (220 samples, 0.32%)</title><rect x="62.0213%" y="213" width="0.3178%" height="15" fill="rgb(234,130,49)" fg:x="42933" fg:w="220"/><text x="62.2713%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (400 samples, 0.58%)</title><rect x="62.3391%" y="213" width="0.5778%" height="15" fill="rgb(254,6,2)" fg:x="43153" fg:w="400"/><text x="62.5891%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,186 samples, 4.60%)</title><rect x="58.3303%" y="245" width="4.6025%" height="15" fill="rgb(208,96,46)" fg:x="40378" fg:w="3186"/><text x="58.5803%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,933 samples, 4.24%)</title><rect x="58.6958%" y="229" width="4.2370%" height="15" fill="rgb(239,3,39)" fg:x="40631" fg:w="2933"/><text x="58.9458%" y="239.50">rust_..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="62.9169%" y="213" width="0.0159%" height="15" fill="rgb(233,210,1)" fg:x="43553" fg:w="11"/><text x="63.1669%" y="223.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,355 samples, 4.85%)</title><rect x="58.1136%" y="261" width="4.8467%" height="15" fill="rgb(244,137,37)" fg:x="40228" fg:w="3355"/><text x="58.3636%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="62.9328%" y="245" width="0.0274%" height="15" fill="rgb(240,136,2)" fg:x="43564" fg:w="19"/><text x="63.1828%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="63.9484%" y="213" width="0.0173%" height="15" fill="rgb(239,18,37)" fg:x="44267" fg:w="12"/><text x="64.1984%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="64.2937%" y="197" width="0.0173%" height="15" fill="rgb(218,185,22)" fg:x="44506" fg:w="12"/><text x="64.5437%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (35 samples, 0.05%)</title><rect x="64.6490%" y="181" width="0.0506%" height="15" fill="rgb(225,218,4)" fg:x="44752" fg:w="35"/><text x="64.8990%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (20 samples, 0.03%)</title><rect x="64.9177%" y="165" width="0.0289%" height="15" fill="rgb(230,182,32)" fg:x="44938" fg:w="20"/><text x="65.1677%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="65.0810%" y="149" width="0.0130%" height="15" fill="rgb(242,56,43)" fg:x="45051" fg:w="9"/><text x="65.3310%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,546 samples, 2.23%)</title><rect x="62.9603%" y="261" width="2.2334%" height="15" fill="rgb(233,99,24)" fg:x="43583" fg:w="1546"/><text x="63.2103%" y="271.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,342 samples, 1.94%)</title><rect x="63.2550%" y="245" width="1.9387%" height="15" fill="rgb(234,209,42)" fg:x="43787" fg:w="1342"/><text x="63.5050%" y="255.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,108 samples, 1.60%)</title><rect x="63.5930%" y="229" width="1.6006%" height="15" fill="rgb(227,7,12)" fg:x="44021" fg:w="1108"/><text x="63.8430%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (850 samples, 1.23%)</title><rect x="63.9657%" y="213" width="1.2279%" height="15" fill="rgb(245,203,43)" fg:x="44279" fg:w="850"/><text x="64.2157%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (611 samples, 0.88%)</title><rect x="64.3110%" y="197" width="0.8827%" height="15" fill="rgb(238,205,33)" fg:x="44518" fg:w="611"/><text x="64.5610%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (342 samples, 0.49%)</title><rect x="64.6996%" y="181" width="0.4941%" height="15" fill="rgb(231,56,7)" fg:x="44787" fg:w="342"/><text x="64.9496%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (171 samples, 0.25%)</title><rect x="64.9466%" y="165" width="0.2470%" height="15" fill="rgb(244,186,29)" fg:x="44958" fg:w="171"/><text x="65.1966%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (69 samples, 0.10%)</title><rect x="65.0940%" y="149" width="0.0997%" height="15" fill="rgb(234,111,31)" fg:x="45060" fg:w="69"/><text x="65.3440%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="65.1720%" y="133" width="0.0217%" height="15" fill="rgb(241,149,10)" fg:x="45114" fg:w="15"/><text x="65.4220%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (461 samples, 0.67%)</title><rect x="66.3826%" y="245" width="0.6660%" height="15" fill="rgb(249,206,44)" fg:x="45952" fg:w="461"/><text x="66.6326%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (854 samples, 1.23%)</title><rect x="67.0485%" y="245" width="1.2337%" height="15" fill="rgb(251,153,30)" fg:x="46413" fg:w="854"/><text x="67.2985%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,186 samples, 4.60%)</title><rect x="65.1936%" y="261" width="4.6025%" height="15" fill="rgb(239,152,38)" fg:x="45129" fg:w="3186"/><text x="65.4436%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,048 samples, 1.51%)</title><rect x="68.2822%" y="245" width="1.5139%" height="15" fill="rgb(249,139,47)" fg:x="47267" fg:w="1048"/><text x="68.5322%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (108 samples, 0.16%)</title><rect x="69.7962%" y="261" width="0.1560%" height="15" fill="rgb(244,64,35)" fg:x="48315" fg:w="108"/><text x="70.0462%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (13,629 samples, 19.69%)</title><rect x="50.5988%" y="277" width="19.6885%" height="15" fill="rgb(216,46,15)" fg:x="35026" fg:w="13629"/><text x="50.8488%" y="287.50">rust_qecp`rust_qecp::union_find..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (232 samples, 0.34%)</title><rect x="69.9522%" y="261" width="0.3351%" height="15" fill="rgb(250,74,19)" fg:x="48423" fg:w="232"/><text x="70.2022%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.03%)</title><rect x="73.0971%" y="261" width="0.0347%" height="15" fill="rgb(249,42,33)" fg:x="50600" fg:w="24"/><text x="73.3471%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.04%)</title><rect x="73.3499%" y="213" width="0.0404%" height="15" fill="rgb(242,149,17)" fg:x="50775" fg:w="28"/><text x="73.5999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.11%)</title><rect x="73.2849%" y="229" width="0.1083%" height="15" fill="rgb(244,29,21)" fg:x="50730" fg:w="75"/><text x="73.5349%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (102 samples, 0.15%)</title><rect x="73.2531%" y="245" width="0.1473%" height="15" fill="rgb(220,130,37)" fg:x="50708" fg:w="102"/><text x="73.5031%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (191 samples, 0.28%)</title><rect x="73.1318%" y="261" width="0.2759%" height="15" fill="rgb(211,67,2)" fg:x="50624" fg:w="191"/><text x="73.3818%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.02%)</title><rect x="73.4077%" y="261" width="0.0246%" height="15" fill="rgb(235,68,52)" fg:x="50815" fg:w="17"/><text x="73.6577%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (126 samples, 0.18%)</title><rect x="73.6157%" y="245" width="0.1820%" height="15" fill="rgb(246,142,3)" fg:x="50959" fg:w="126"/><text x="73.8657%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (266 samples, 0.38%)</title><rect x="73.4322%" y="261" width="0.3843%" height="15" fill="rgb(241,25,7)" fg:x="50832" fg:w="266"/><text x="73.6822%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="73.7977%" y="245" width="0.0188%" height="15" fill="rgb(242,119,39)" fg:x="51085" fg:w="13"/><text x="74.0477%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.02%)</title><rect x="73.7977%" y="229" width="0.0188%" height="15" fill="rgb(241,98,45)" fg:x="51085" fg:w="13"/><text x="74.0477%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.01%)</title><rect x="73.8165%" y="261" width="0.0130%" height="15" fill="rgb(254,28,30)" fg:x="51098" fg:w="9"/><text x="74.0665%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="73.8295%" y="261" width="0.0159%" height="15" fill="rgb(241,142,54)" fg:x="51107" fg:w="11"/><text x="74.0795%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="73.8353%" y="245" width="0.0101%" height="15" fill="rgb(222,85,15)" fg:x="51111" fg:w="7"/><text x="74.0853%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="73.8757%" y="229" width="0.0159%" height="15" fill="rgb(210,85,47)" fg:x="51139" fg:w="11"/><text x="74.1257%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.05%)</title><rect x="73.8454%" y="261" width="0.0506%" height="15" fill="rgb(224,206,25)" fg:x="51118" fg:w="35"/><text x="74.0954%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (29 samples, 0.04%)</title><rect x="73.8541%" y="245" width="0.0419%" height="15" fill="rgb(243,201,19)" fg:x="51124" fg:w="29"/><text x="74.1041%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="73.8960%" y="261" width="0.0159%" height="15" fill="rgb(236,59,4)" fg:x="51153" fg:w="11"/><text x="74.1460%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.04%)</title><rect x="74.0361%" y="229" width="0.0361%" height="15" fill="rgb(254,179,45)" fg:x="51250" fg:w="25"/><text x="74.2861%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (112 samples, 0.16%)</title><rect x="73.9119%" y="261" width="0.1618%" height="15" fill="rgb(226,14,10)" fg:x="51164" fg:w="112"/><text x="74.1619%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (26 samples, 0.04%)</title><rect x="74.0361%" y="245" width="0.0376%" height="15" fill="rgb(244,27,41)" fg:x="51250" fg:w="26"/><text x="74.2861%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (32 samples, 0.05%)</title><rect x="74.0736%" y="261" width="0.0462%" height="15" fill="rgb(235,35,32)" fg:x="51276" fg:w="32"/><text x="74.3236%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (50 samples, 0.07%)</title><rect x="74.1271%" y="261" width="0.0722%" height="15" fill="rgb(218,68,31)" fg:x="51313" fg:w="50"/><text x="74.3771%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (15 samples, 0.02%)</title><rect x="74.2326%" y="229" width="0.0217%" height="15" fill="rgb(207,120,37)" fg:x="51386" fg:w="15"/><text x="74.4826%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.07%)</title><rect x="74.1993%" y="261" width="0.0679%" height="15" fill="rgb(227,98,0)" fg:x="51363" fg:w="47"/><text x="74.4493%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.06%)</title><rect x="74.2080%" y="245" width="0.0592%" height="15" fill="rgb(207,7,3)" fg:x="51369" fg:w="41"/><text x="74.4580%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="74.2542%" y="229" width="0.0130%" height="15" fill="rgb(206,98,19)" fg:x="51401" fg:w="9"/><text x="74.5042%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.05%)</title><rect x="74.2672%" y="261" width="0.0477%" height="15" fill="rgb(217,5,26)" fg:x="51410" fg:w="33"/><text x="74.5172%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,117 samples, 1.61%)</title><rect x="74.3149%" y="261" width="1.6136%" height="15" fill="rgb(235,190,38)" fg:x="51443" fg:w="1117"/><text x="74.5649%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="75.9372%" y="261" width="0.0173%" height="15" fill="rgb(247,86,24)" fg:x="52566" fg:w="12"/><text x="76.1872%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="75.9906%" y="197" width="0.0130%" height="15" fill="rgb(205,101,16)" fg:x="52603" fg:w="9"/><text x="76.2406%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.03%)</title><rect x="76.0195%" y="165" width="0.0260%" height="15" fill="rgb(246,168,33)" fg:x="52623" fg:w="18"/><text x="76.2695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="76.0311%" y="149" width="0.0144%" height="15" fill="rgb(231,114,1)" fg:x="52631" fg:w="10"/><text x="76.2811%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.03%)</title><rect x="76.0166%" y="181" width="0.0303%" height="15" fill="rgb(207,184,53)" fg:x="52621" fg:w="21"/><text x="76.2666%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.05%)</title><rect x="76.0036%" y="197" width="0.0477%" height="15" fill="rgb(224,95,51)" fg:x="52612" fg:w="33"/><text x="76.2536%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (51 samples, 0.07%)</title><rect x="75.9863%" y="213" width="0.0737%" height="15" fill="rgb(212,188,45)" fg:x="52600" fg:w="51"/><text x="76.2363%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (74 samples, 0.11%)</title><rect x="75.9617%" y="261" width="0.1069%" height="15" fill="rgb(223,154,38)" fg:x="52583" fg:w="74"/><text x="76.2117%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (65 samples, 0.09%)</title><rect x="75.9747%" y="245" width="0.0939%" height="15" fill="rgb(251,22,52)" fg:x="52592" fg:w="65"/><text x="76.2247%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (62 samples, 0.09%)</title><rect x="75.9791%" y="229" width="0.0896%" height="15" fill="rgb(229,209,22)" fg:x="52595" fg:w="62"/><text x="76.2291%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,166 samples, 3.13%)</title><rect x="76.0701%" y="261" width="3.1290%" height="15" fill="rgb(234,138,34)" fg:x="52658" fg:w="2166"/><text x="76.3201%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (156 samples, 0.23%)</title><rect x="79.1991%" y="261" width="0.2254%" height="15" fill="rgb(212,95,11)" fg:x="54824" fg:w="156"/><text x="79.4491%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (56 samples, 0.08%)</title><rect x="79.4245%" y="261" width="0.0809%" height="15" fill="rgb(240,179,47)" fg:x="54980" fg:w="56"/><text x="79.6745%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.04%)</title><rect x="79.7943%" y="197" width="0.0448%" height="15" fill="rgb(240,163,11)" fg:x="55236" fg:w="31"/><text x="80.0443%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (80 samples, 0.12%)</title><rect x="79.7322%" y="213" width="0.1156%" height="15" fill="rgb(236,37,12)" fg:x="55193" fg:w="80"/><text x="79.9822%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (170 samples, 0.25%)</title><rect x="79.6123%" y="229" width="0.2456%" height="15" fill="rgb(232,164,16)" fg:x="55110" fg:w="170"/><text x="79.8623%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="79.8477%" y="213" width="0.0101%" height="15" fill="rgb(244,205,15)" fg:x="55273" fg:w="7"/><text x="80.0977%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.01%)</title><rect x="79.8795%" y="213" width="0.0144%" height="15" fill="rgb(223,117,47)" fg:x="55295" fg:w="10"/><text x="80.1295%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="79.8839%" y="197" width="0.0101%" height="15" fill="rgb(244,107,35)" fg:x="55298" fg:w="7"/><text x="80.1339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.01%)</title><rect x="79.9185%" y="197" width="0.0101%" height="15" fill="rgb(205,140,8)" fg:x="55322" fg:w="7"/><text x="80.1685%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (85 samples, 0.12%)</title><rect x="79.8579%" y="229" width="0.1228%" height="15" fill="rgb(228,84,46)" fg:x="55280" fg:w="85"/><text x="80.1079%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (60 samples, 0.09%)</title><rect x="79.8940%" y="213" width="0.0867%" height="15" fill="rgb(254,188,9)" fg:x="55305" fg:w="60"/><text x="80.1440%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.05%)</title><rect x="79.9286%" y="197" width="0.0520%" height="15" fill="rgb(206,112,54)" fg:x="55329" fg:w="36"/><text x="80.1786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (302 samples, 0.44%)</title><rect x="79.5458%" y="245" width="0.4363%" height="15" fill="rgb(216,84,49)" fg:x="55064" fg:w="302"/><text x="79.7958%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="79.9821%" y="245" width="0.0144%" height="15" fill="rgb(214,194,35)" fg:x="55366" fg:w="10"/><text x="80.2321%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (348 samples, 0.50%)</title><rect x="79.5054%" y="261" width="0.5027%" height="15" fill="rgb(249,28,3)" fg:x="55036" fg:w="348"/><text x="79.7554%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="79.9965%" y="245" width="0.0116%" height="15" fill="rgb(222,56,52)" fg:x="55376" fg:w="8"/><text x="80.2465%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (20 samples, 0.03%)</title><rect x="80.0081%" y="261" width="0.0289%" height="15" fill="rgb(245,217,50)" fg:x="55384" fg:w="20"/><text x="80.2581%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (6,755 samples, 9.76%)</title><rect x="70.2873%" y="277" width="9.7583%" height="15" fill="rgb(213,201,24)" fg:x="48655" fg:w="6755"/><text x="70.5373%" y="287.50">rust_qecp`rust..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (8 samples, 0.01%)</title><rect x="80.0456%" y="277" width="0.0116%" height="15" fill="rgb(248,116,28)" fg:x="55410" fg:w="8"/><text x="80.2956%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (46,307 samples, 66.90%)</title><rect x="13.1647%" y="309" width="66.8954%" height="15" fill="rgb(219,72,43)" fg:x="9113" fg:w="46307"/><text x="13.4147%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (44,324 samples, 64.03%)</title><rect x="16.0294%" y="293" width="64.0307%" height="15" fill="rgb(209,138,14)" fg:x="11096" fg:w="44324"/><text x="16.2794%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,766 samples, 2.55%)</title><rect x="80.0601%" y="309" width="2.5512%" height="15" fill="rgb(222,18,33)" fg:x="55420" fg:w="1766"/><text x="80.3101%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (226 samples, 0.33%)</title><rect x="82.6113%" y="309" width="0.3265%" height="15" fill="rgb(213,199,7)" fg:x="57186" fg:w="226"/><text x="82.8613%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (84 samples, 0.12%)</title><rect x="82.8164%" y="293" width="0.1213%" height="15" fill="rgb(250,110,10)" fg:x="57328" fg:w="84"/><text x="83.0664%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,436 samples, 9.30%)</title><rect x="82.9378%" y="309" width="9.2975%" height="15" fill="rgb(248,123,6)" fg:x="57412" fg:w="6436"/><text x="83.1878%" y="319.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (101 samples, 0.15%)</title><rect x="92.2367%" y="293" width="0.1459%" height="15" fill="rgb(206,91,31)" fg:x="63849" fg:w="101"/><text x="92.4867%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (417 samples, 0.60%)</title><rect x="92.2352%" y="309" width="0.6024%" height="15" fill="rgb(211,154,13)" fg:x="63848" fg:w="417"/><text x="92.4852%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (315 samples, 0.46%)</title><rect x="92.3826%" y="293" width="0.4551%" height="15" fill="rgb(225,148,7)" fg:x="63950" fg:w="315"/><text x="92.6326%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (38 samples, 0.05%)</title><rect x="92.8376%" y="309" width="0.0549%" height="15" fill="rgb(220,160,43)" fg:x="64265" fg:w="38"/><text x="93.0876%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (4,876 samples, 7.04%)</title><rect x="92.8983%" y="309" width="7.0439%" height="15" fill="rgb(213,52,39)" fg:x="64307" fg:w="4876"/><text x="93.1483%" y="319.50">rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,516 samples, 5.08%)</title><rect x="94.8630%" y="293" width="5.0792%" height="15" fill="rgb(243,137,7)" fg:x="65667" fg:w="3516"/><text x="95.1130%" y="303.50">rust_q..</text></g><g><title>all (69,223 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(230,79,13)" fg:x="0" fg:w="69223"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,148 samples, 86.89%)</title><rect x="13.1098%" y="389" width="86.8902%" height="15" fill="rgb(247,105,23)" fg:x="9075" fg:w="60148"/><text x="13.3598%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,148 samples, 86.89%)</title><rect x="13.1098%" y="373" width="86.8902%" height="15" fill="rgb(223,179,41)" fg:x="9075" fg:w="60148"/><text x="13.3598%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,148 samples, 86.89%)</title><rect x="13.1098%" y="357" width="86.8902%" height="15" fill="rgb(218,9,34)" fg:x="9075" fg:w="60148"/><text x="13.3598%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,148 samples, 86.89%)</title><rect x="13.1098%" y="341" width="86.8902%" height="15" fill="rgb(222,106,8)" fg:x="9075" fg:w="60148"/><text x="13.3598%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,148 samples, 86.89%)</title><rect x="13.1098%" y="325" width="86.8902%" height="15" fill="rgb(211,220,0)" fg:x="9075" fg:w="60148"/><text x="13.3598%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (40 samples, 0.06%)</title><rect x="99.9422%" y="309" width="0.0578%" height="15" fill="rgb(229,52,16)" fg:x="69183" fg:w="40"/><text x="100.1922%" y="319.50"></text></g></svg></svg>