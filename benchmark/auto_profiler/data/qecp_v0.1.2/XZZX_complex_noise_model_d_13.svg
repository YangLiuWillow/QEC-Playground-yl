<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="70465"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (9 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0128%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (9 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0128%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="0.0397%" y="133" width="0.0184%" height="15" fill="rgb(221,193,54)" fg:x="28" fg:w="13"/><text x="0.2897%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="0.0582%" y="133" width="0.0128%" height="15" fill="rgb(248,212,6)" fg:x="41" fg:w="9"/><text x="0.3082%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.06%)</title><rect x="0.0199%" y="149" width="0.0582%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="41"/><text x="0.2699%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (52 samples, 0.07%)</title><rect x="0.1036%" y="53" width="0.0738%" height="15" fill="rgb(232,128,0)" fg:x="73" fg:w="52"/><text x="0.3536%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (8 samples, 0.01%)</title><rect x="0.1774%" y="53" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="125" fg:w="8"/><text x="0.4274%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.1774%" y="37" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="125" fg:w="8"/><text x="0.4274%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (69 samples, 0.10%)</title><rect x="0.1036%" y="69" width="0.0979%" height="15" fill="rgb(218,30,26)" fg:x="73" fg:w="69"/><text x="0.3536%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (9 samples, 0.01%)</title><rect x="0.1887%" y="53" width="0.0128%" height="15" fill="rgb(220,122,19)" fg:x="133" fg:w="9"/><text x="0.4387%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="0.1887%" y="37" width="0.0128%" height="15" fill="rgb(250,228,42)" fg:x="133" fg:w="9"/><text x="0.4387%" y="47.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.07%)</title><rect x="0.2115%" y="69" width="0.0695%" height="15" fill="rgb(240,193,28)" fg:x="149" fg:w="49"/><text x="0.4615%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (133 samples, 0.19%)</title><rect x="0.0979%" y="149" width="0.1887%" height="15" fill="rgb(216,20,37)" fg:x="69" fg:w="133"/><text x="0.3479%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (133 samples, 0.19%)</title><rect x="0.0979%" y="133" width="0.1887%" height="15" fill="rgb(206,188,39)" fg:x="69" fg:w="133"/><text x="0.3479%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.19%)</title><rect x="0.0979%" y="117" width="0.1887%" height="15" fill="rgb(217,207,13)" fg:x="69" fg:w="133"/><text x="0.3479%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.19%)</title><rect x="0.0979%" y="101" width="0.1887%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="133"/><text x="0.3479%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (130 samples, 0.18%)</title><rect x="0.1022%" y="85" width="0.1845%" height="15" fill="rgb(225,20,46)" fg:x="72" fg:w="130"/><text x="0.3522%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (13 samples, 0.02%)</title><rect x="0.2952%" y="85" width="0.0184%" height="15" fill="rgb(210,31,41)" fg:x="208" fg:w="13"/><text x="0.5452%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (30 samples, 0.04%)</title><rect x="0.2867%" y="149" width="0.0426%" height="15" fill="rgb(221,200,47)" fg:x="202" fg:w="30"/><text x="0.5367%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="0.2867%" y="133" width="0.0426%" height="15" fill="rgb(226,26,5)" fg:x="202" fg:w="30"/><text x="0.5367%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="0.2867%" y="117" width="0.0426%" height="15" fill="rgb(249,33,26)" fg:x="202" fg:w="30"/><text x="0.5367%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (25 samples, 0.04%)</title><rect x="0.2938%" y="101" width="0.0355%" height="15" fill="rgb(235,183,28)" fg:x="207" fg:w="25"/><text x="0.5438%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (508 samples, 0.72%)</title><rect x="0.3292%" y="149" width="0.7209%" height="15" fill="rgb(221,5,38)" fg:x="232" fg:w="508"/><text x="0.5792%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (181 samples, 0.26%)</title><rect x="1.0502%" y="149" width="0.2569%" height="15" fill="rgb(247,18,42)" fg:x="740" fg:w="181"/><text x="1.3002%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.01%)</title><rect x="1.3070%" y="149" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="921" fg:w="10"/><text x="1.5570%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 0.08%)</title><rect x="5.7475%" y="133" width="0.0809%" height="15" fill="rgb(249,31,29)" fg:x="4050" fg:w="57"/><text x="5.9975%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.12%)</title><rect x="5.8284%" y="133" width="0.1192%" height="15" fill="rgb(225,111,53)" fg:x="4107" fg:w="84"/><text x="6.0784%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (46 samples, 0.07%)</title><rect x="5.9476%" y="133" width="0.0653%" height="15" fill="rgb(238,160,17)" fg:x="4191" fg:w="46"/><text x="6.1976%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (447 samples, 0.63%)</title><rect x="6.0129%" y="133" width="0.6344%" height="15" fill="rgb(214,148,48)" fg:x="4237" fg:w="447"/><text x="6.2629%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.02%)</title><rect x="6.6473%" y="133" width="0.0170%" height="15" fill="rgb(232,36,49)" fg:x="4684" fg:w="12"/><text x="6.8973%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="6.6473%" y="117" width="0.0170%" height="15" fill="rgb(209,103,24)" fg:x="4684" fg:w="12"/><text x="6.8973%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="6.6487%" y="101" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="4685" fg:w="11"/><text x="6.8987%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="6.6487%" y="85" width="0.0156%" height="15" fill="rgb(213,181,19)" fg:x="4685" fg:w="11"/><text x="6.8987%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (91 samples, 0.13%)</title><rect x="7.2589%" y="117" width="0.1291%" height="15" fill="rgb(254,191,54)" fg:x="5115" fg:w="91"/><text x="7.5089%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (657 samples, 0.93%)</title><rect x="6.6643%" y="133" width="0.9324%" height="15" fill="rgb(241,83,37)" fg:x="4696" fg:w="657"/><text x="6.9143%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (144 samples, 0.20%)</title><rect x="7.3923%" y="117" width="0.2044%" height="15" fill="rgb(233,36,39)" fg:x="5209" fg:w="144"/><text x="7.6423%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 0.17%)</title><rect x="7.4306%" y="101" width="0.1660%" height="15" fill="rgb(226,3,54)" fg:x="5236" fg:w="117"/><text x="7.6806%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (16 samples, 0.02%)</title><rect x="7.6038%" y="133" width="0.0227%" height="15" fill="rgb(245,192,40)" fg:x="5358" fg:w="16"/><text x="7.8538%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (184 samples, 0.26%)</title><rect x="10.1767%" y="117" width="0.2611%" height="15" fill="rgb(238,167,29)" fg:x="7171" fg:w="184"/><text x="10.4267%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (440 samples, 0.62%)</title><rect x="10.4406%" y="117" width="0.6244%" height="15" fill="rgb(232,182,51)" fg:x="7357" fg:w="440"/><text x="10.6906%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (31 samples, 0.04%)</title><rect x="11.1233%" y="101" width="0.0440%" height="15" fill="rgb(231,60,39)" fg:x="7838" fg:w="31"/><text x="11.3733%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,011 samples, 9.95%)</title><rect x="1.3241%" y="149" width="9.9496%" height="15" fill="rgb(208,69,12)" fg:x="933" fg:w="7011"/><text x="1.5741%" y="159.50">rust_qecp`rust..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,570 samples, 3.65%)</title><rect x="7.6265%" y="133" width="3.6472%" height="15" fill="rgb(235,93,37)" fg:x="5374" fg:w="2570"/><text x="7.8765%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (147 samples, 0.21%)</title><rect x="11.0651%" y="117" width="0.2086%" height="15" fill="rgb(213,116,39)" fg:x="7797" fg:w="147"/><text x="11.3151%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (75 samples, 0.11%)</title><rect x="11.1672%" y="101" width="0.1064%" height="15" fill="rgb(222,207,29)" fg:x="7869" fg:w="75"/><text x="11.4172%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.01%)</title><rect x="11.3077%" y="133" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="7968" fg:w="10"/><text x="11.5577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="11.3219%" y="133" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="7978" fg:w="8"/><text x="11.5719%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.01%)</title><rect x="11.3333%" y="133" width="0.0142%" height="15" fill="rgb(250,191,14)" fg:x="7986" fg:w="10"/><text x="11.5833%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (367 samples, 0.52%)</title><rect x="11.3503%" y="133" width="0.5208%" height="15" fill="rgb(239,60,40)" fg:x="7998" fg:w="367"/><text x="11.6003%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="11.8711%" y="133" width="0.0355%" height="15" fill="rgb(206,27,48)" fg:x="8365" fg:w="25"/><text x="12.1211%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.02%)</title><rect x="11.9123%" y="133" width="0.0227%" height="15" fill="rgb(225,35,8)" fg:x="8394" fg:w="16"/><text x="12.1623%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="11.9237%" y="117" width="0.0114%" height="15" fill="rgb(250,213,24)" fg:x="8402" fg:w="8"/><text x="12.1737%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="11.9237%" y="101" width="0.0114%" height="15" fill="rgb(247,123,22)" fg:x="8402" fg:w="8"/><text x="12.1737%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (12 samples, 0.02%)</title><rect x="11.9435%" y="133" width="0.0170%" height="15" fill="rgb(231,138,38)" fg:x="8416" fg:w="12"/><text x="12.1935%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.08%)</title><rect x="12.8745%" y="117" width="0.0781%" height="15" fill="rgb(231,145,46)" fg:x="9072" fg:w="55"/><text x="13.1245%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.04%)</title><rect x="12.9156%" y="101" width="0.0369%" height="15" fill="rgb(251,118,11)" fg:x="9101" fg:w="26"/><text x="13.1656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="12.9554%" y="117" width="0.0199%" height="15" fill="rgb(217,147,25)" fg:x="9129" fg:w="14"/><text x="13.2054%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.04%)</title><rect x="12.9838%" y="117" width="0.0412%" height="15" fill="rgb(247,81,37)" fg:x="9149" fg:w="29"/><text x="13.2338%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="13.1356%" y="37" width="0.0213%" height="15" fill="rgb(209,12,38)" fg:x="9256" fg:w="15"/><text x="13.3856%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (35 samples, 0.05%)</title><rect x="13.1086%" y="53" width="0.0497%" height="15" fill="rgb(227,1,9)" fg:x="9237" fg:w="35"/><text x="13.3586%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (70 samples, 0.10%)</title><rect x="13.0646%" y="85" width="0.0993%" height="15" fill="rgb(248,47,43)" fg:x="9206" fg:w="70"/><text x="13.3146%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.07%)</title><rect x="13.0959%" y="69" width="0.0681%" height="15" fill="rgb(221,10,30)" fg:x="9228" fg:w="48"/><text x="13.3459%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (108 samples, 0.15%)</title><rect x="13.0249%" y="117" width="0.1533%" height="15" fill="rgb(210,229,1)" fg:x="9178" fg:w="108"/><text x="13.2749%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (86 samples, 0.12%)</title><rect x="13.0561%" y="101" width="0.1220%" height="15" fill="rgb(222,148,37)" fg:x="9200" fg:w="86"/><text x="13.3061%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.01%)</title><rect x="13.1640%" y="85" width="0.0142%" height="15" fill="rgb(234,67,33)" fg:x="9276" fg:w="10"/><text x="13.4140%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (20 samples, 0.03%)</title><rect x="13.1853%" y="117" width="0.0284%" height="15" fill="rgb(247,98,35)" fg:x="9291" fg:w="20"/><text x="13.4353%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 0.04%)</title><rect x="13.2137%" y="117" width="0.0355%" height="15" fill="rgb(247,138,52)" fg:x="9311" fg:w="25"/><text x="13.4637%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="13.2293%" y="101" width="0.0199%" height="15" fill="rgb(213,79,30)" fg:x="9322" fg:w="14"/><text x="13.4793%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (39 samples, 0.06%)</title><rect x="13.2505%" y="117" width="0.0553%" height="15" fill="rgb(246,177,23)" fg:x="9337" fg:w="39"/><text x="13.5005%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (1,721 samples, 2.44%)</title><rect x="11.9605%" y="133" width="2.4423%" height="15" fill="rgb(230,62,27)" fg:x="8428" fg:w="1721"/><text x="12.2105%" y="143.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (773 samples, 1.10%)</title><rect x="13.3059%" y="117" width="1.0970%" height="15" fill="rgb(216,154,8)" fg:x="9376" fg:w="773"/><text x="13.5559%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="14.4199%" y="117" width="0.0128%" height="15" fill="rgb(244,35,45)" fg:x="10161" fg:w="9"/><text x="14.6699%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="14.4199%" y="101" width="0.0128%" height="15" fill="rgb(251,115,12)" fg:x="10161" fg:w="9"/><text x="14.6699%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="14.4213%" y="85" width="0.0114%" height="15" fill="rgb(240,54,50)" fg:x="10162" fg:w="8"/><text x="14.6713%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (2,228 samples, 3.16%)</title><rect x="11.2737%" y="149" width="3.1619%" height="15" fill="rgb(233,84,52)" fg:x="7944" fg:w="2228"/><text x="11.5237%" y="159.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (18 samples, 0.03%)</title><rect x="14.4100%" y="133" width="0.0255%" height="15" fill="rgb(207,117,47)" fg:x="10154" fg:w="18"/><text x="14.6600%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_XZZX_code_rectangle (9 samples, 0.01%)</title><rect x="14.4355%" y="149" width="0.0128%" height="15" fill="rgb(249,43,39)" fg:x="10172" fg:w="9"/><text x="14.6855%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (8 samples, 0.01%)</title><rect x="14.4370%" y="133" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="10173" fg:w="8"/><text x="14.6870%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="14.4951%" y="101" width="0.0128%" height="15" fill="rgb(236,212,23)" fg:x="10214" fg:w="9"/><text x="14.7451%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (50 samples, 0.07%)</title><rect x="14.4483%" y="149" width="0.0710%" height="15" fill="rgb(242,79,21)" fg:x="10181" fg:w="50"/><text x="14.6983%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (43 samples, 0.06%)</title><rect x="14.4582%" y="133" width="0.0610%" height="15" fill="rgb(211,96,35)" fg:x="10188" fg:w="43"/><text x="14.7082%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (24 samples, 0.03%)</title><rect x="14.4852%" y="117" width="0.0341%" height="15" fill="rgb(253,215,40)" fg:x="10207" fg:w="24"/><text x="14.7352%" y="127.50"></text></g><g><title>rust_qecp`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (8 samples, 0.01%)</title><rect x="14.5079%" y="101" width="0.0114%" height="15" fill="rgb(211,81,21)" fg:x="10223" fg:w="8"/><text x="14.7579%" y="111.50"></text></g><g><title>dyld`start (10,236 samples, 14.53%)</title><rect x="0.0000%" y="389" width="14.5264%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="10236"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (10,227 samples, 14.51%)</title><rect x="0.0128%" y="373" width="14.5136%" height="15" fill="rgb(235,213,38)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (10,227 samples, 14.51%)</title><rect x="0.0128%" y="357" width="14.5136%" height="15" fill="rgb(237,122,38)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="367.50">rust_qecp`std::rt::lan..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (10,227 samples, 14.51%)</title><rect x="0.0128%" y="341" width="14.5136%" height="15" fill="rgb(244,218,35)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="351.50">rust_qecp`std::rt::lan..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (10,227 samples, 14.51%)</title><rect x="0.0128%" y="325" width="14.5136%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="335.50">rust_qecp`std::sys_com..</text></g><g><title>rust_qecp`rust_qecp::main (10,227 samples, 14.51%)</title><rect x="0.0128%" y="309" width="14.5136%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="319.50">rust_qecp`rust_qecp::m..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (10,227 samples, 14.51%)</title><rect x="0.0128%" y="293" width="14.5136%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="303.50">rust_qecp`tokio::task:..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (10,227 samples, 14.51%)</title><rect x="0.0128%" y="277" width="14.5136%" height="15" fill="rgb(224,169,11)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="287.50">rust_qecp`tokio::runti..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,227 samples, 14.51%)</title><rect x="0.0128%" y="261" width="14.5136%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="271.50">rust_qecp`tokio::macro..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (10,227 samples, 14.51%)</title><rect x="0.0128%" y="245" width="14.5136%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="255.50">rust_qecp`tokio::runti..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,227 samples, 14.51%)</title><rect x="0.0128%" y="229" width="14.5136%" height="15" fill="rgb(230,116,27)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="239.50">rust_qecp`&lt;core::futur..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (10,227 samples, 14.51%)</title><rect x="0.0128%" y="213" width="14.5136%" height="15" fill="rgb(228,99,48)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="223.50">rust_qecp`tokio::macro..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,227 samples, 14.51%)</title><rect x="0.0128%" y="197" width="14.5136%" height="15" fill="rgb(253,11,6)" fg:x="9" fg:w="10227"/><text x="0.2628%" y="207.50">rust_qecp`&lt;core::futur..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (10,226 samples, 14.51%)</title><rect x="0.0142%" y="181" width="14.5122%" height="15" fill="rgb(247,143,39)" fg:x="10" fg:w="10226"/><text x="0.2642%" y="191.50">rust_qecp`rust_qecp::t..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (10,226 samples, 14.51%)</title><rect x="0.0142%" y="165" width="14.5122%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="10226"/><text x="0.2642%" y="175.50">rust_qecp`rust_qecp::t..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="14.5434%" y="309" width="0.0128%" height="15" fill="rgb(233,208,19)" fg:x="10248" fg:w="9"/><text x="14.7934%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.02%)</title><rect x="14.5562%" y="309" width="0.0241%" height="15" fill="rgb(216,164,2)" fg:x="10257" fg:w="17"/><text x="14.8062%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (45 samples, 0.06%)</title><rect x="14.5803%" y="309" width="0.0639%" height="15" fill="rgb(220,129,5)" fg:x="10274" fg:w="45"/><text x="14.8303%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (44 samples, 0.06%)</title><rect x="14.5817%" y="293" width="0.0624%" height="15" fill="rgb(242,17,10)" fg:x="10275" fg:w="44"/><text x="14.8317%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="14.6441%" y="309" width="0.0156%" height="15" fill="rgb(242,107,0)" fg:x="10319" fg:w="11"/><text x="14.8941%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (9 samples, 0.01%)</title><rect x="14.6470%" y="293" width="0.0128%" height="15" fill="rgb(251,28,31)" fg:x="10321" fg:w="9"/><text x="14.8970%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.01%)</title><rect x="14.6470%" y="277" width="0.0128%" height="15" fill="rgb(233,223,10)" fg:x="10321" fg:w="9"/><text x="14.8970%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="14.6598%" y="309" width="0.0156%" height="15" fill="rgb(215,21,27)" fg:x="10330" fg:w="11"/><text x="14.9098%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 0.03%)</title><rect x="14.6782%" y="309" width="0.0341%" height="15" fill="rgb(232,23,21)" fg:x="10343" fg:w="24"/><text x="14.9282%" y="319.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.05%)</title><rect x="14.7123%" y="309" width="0.0525%" height="15" fill="rgb(244,5,23)" fg:x="10367" fg:w="37"/><text x="14.9623%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.03%)</title><rect x="14.8329%" y="277" width="0.0298%" height="15" fill="rgb(226,81,46)" fg:x="10452" fg:w="21"/><text x="15.0829%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (60 samples, 0.09%)</title><rect x="14.7846%" y="293" width="0.0851%" height="15" fill="rgb(247,70,30)" fg:x="10418" fg:w="60"/><text x="15.0346%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="14.8698%" y="293" width="0.0156%" height="15" fill="rgb(212,68,19)" fg:x="10478" fg:w="11"/><text x="15.1198%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="14.8698%" y="277" width="0.0156%" height="15" fill="rgb(240,187,13)" fg:x="10478" fg:w="11"/><text x="15.1198%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (82 samples, 0.12%)</title><rect x="14.8882%" y="293" width="0.1164%" height="15" fill="rgb(223,113,26)" fg:x="10491" fg:w="82"/><text x="15.1382%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (67 samples, 0.10%)</title><rect x="14.9095%" y="277" width="0.0951%" height="15" fill="rgb(206,192,2)" fg:x="10506" fg:w="67"/><text x="15.1595%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (67 samples, 0.10%)</title><rect x="14.9095%" y="261" width="0.0951%" height="15" fill="rgb(241,108,4)" fg:x="10506" fg:w="67"/><text x="15.1595%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (173 samples, 0.25%)</title><rect x="14.7648%" y="309" width="0.2455%" height="15" fill="rgb(247,173,49)" fg:x="10404" fg:w="173"/><text x="15.0148%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (13 samples, 0.02%)</title><rect x="15.0287%" y="309" width="0.0184%" height="15" fill="rgb(224,114,35)" fg:x="10590" fg:w="13"/><text x="15.2787%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (13 samples, 0.02%)</title><rect x="15.0287%" y="293" width="0.0184%" height="15" fill="rgb(245,159,27)" fg:x="10590" fg:w="13"/><text x="15.2787%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.0287%" y="277" width="0.0184%" height="15" fill="rgb(245,172,44)" fg:x="10590" fg:w="13"/><text x="15.2787%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="15.0287%" y="261" width="0.0184%" height="15" fill="rgb(236,23,11)" fg:x="10590" fg:w="13"/><text x="15.2787%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (12 samples, 0.02%)</title><rect x="15.0302%" y="245" width="0.0170%" height="15" fill="rgb(205,117,38)" fg:x="10591" fg:w="12"/><text x="15.2802%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="15.0500%" y="309" width="0.0255%" height="15" fill="rgb(237,72,25)" fg:x="10605" fg:w="18"/><text x="15.3000%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (37 samples, 0.05%)</title><rect x="15.1196%" y="293" width="0.0525%" height="15" fill="rgb(244,70,9)" fg:x="10654" fg:w="37"/><text x="15.3696%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.03%)</title><rect x="15.1394%" y="277" width="0.0326%" height="15" fill="rgb(217,125,39)" fg:x="10668" fg:w="23"/><text x="15.3894%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.03%)</title><rect x="15.1409%" y="261" width="0.0312%" height="15" fill="rgb(235,36,10)" fg:x="10669" fg:w="22"/><text x="15.3909%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="15.1522%" y="245" width="0.0199%" height="15" fill="rgb(251,123,47)" fg:x="10677" fg:w="14"/><text x="15.4022%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="15.1721%" y="293" width="0.0156%" height="15" fill="rgb(221,13,13)" fg:x="10691" fg:w="11"/><text x="15.4221%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.07%)</title><rect x="15.1905%" y="293" width="0.0681%" height="15" fill="rgb(238,131,9)" fg:x="10704" fg:w="48"/><text x="15.4405%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="15.2416%" y="277" width="0.0170%" height="15" fill="rgb(211,50,8)" fg:x="10740" fg:w="12"/><text x="15.4916%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.01%)</title><rect x="15.2643%" y="293" width="0.0142%" height="15" fill="rgb(245,182,24)" fg:x="10756" fg:w="10"/><text x="15.5143%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="15.2785%" y="293" width="0.0184%" height="15" fill="rgb(242,14,37)" fg:x="10766" fg:w="13"/><text x="15.5285%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="15.2970%" y="293" width="0.0298%" height="15" fill="rgb(246,228,12)" fg:x="10779" fg:w="21"/><text x="15.5470%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (150 samples, 0.21%)</title><rect x="15.3409%" y="293" width="0.2129%" height="15" fill="rgb(213,55,15)" fg:x="10810" fg:w="150"/><text x="15.5909%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.08%)</title><rect x="15.5538%" y="293" width="0.0809%" height="15" fill="rgb(209,9,3)" fg:x="10960" fg:w="57"/><text x="15.8038%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (260 samples, 0.37%)</title><rect x="15.6347%" y="293" width="0.3690%" height="15" fill="rgb(230,59,30)" fg:x="11017" fg:w="260"/><text x="15.8847%" y="303.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (25 samples, 0.04%)</title><rect x="16.0037%" y="293" width="0.0355%" height="15" fill="rgb(209,121,21)" fg:x="11277" fg:w="25"/><text x="16.2537%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.01%)</title><rect x="16.0392%" y="293" width="0.0142%" height="15" fill="rgb(220,109,13)" fg:x="11302" fg:w="10"/><text x="16.2892%" y="303.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (11 samples, 0.02%)</title><rect x="16.0605%" y="293" width="0.0156%" height="15" fill="rgb(232,18,1)" fg:x="11317" fg:w="11"/><text x="16.3105%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="16.0761%" y="293" width="0.0114%" height="15" fill="rgb(215,41,42)" fg:x="11328" fg:w="8"/><text x="16.3261%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (35 samples, 0.05%)</title><rect x="16.0874%" y="293" width="0.0497%" height="15" fill="rgb(224,123,36)" fg:x="11336" fg:w="35"/><text x="16.3374%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (325 samples, 0.46%)</title><rect x="16.1371%" y="293" width="0.4612%" height="15" fill="rgb(240,125,3)" fg:x="11371" fg:w="325"/><text x="16.3871%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (17 samples, 0.02%)</title><rect x="16.5983%" y="293" width="0.0241%" height="15" fill="rgb(205,98,50)" fg:x="11696" fg:w="17"/><text x="16.8483%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="16.6224%" y="293" width="0.0298%" height="15" fill="rgb(205,185,37)" fg:x="11713" fg:w="21"/><text x="16.8724%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.05%)</title><rect x="18.2161%" y="277" width="0.0468%" height="15" fill="rgb(238,207,15)" fg:x="12836" fg:w="33"/><text x="18.4661%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.03%)</title><rect x="18.2317%" y="261" width="0.0312%" height="15" fill="rgb(213,199,42)" fg:x="12847" fg:w="22"/><text x="18.4817%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="18.2445%" y="245" width="0.0184%" height="15" fill="rgb(235,201,11)" fg:x="12856" fg:w="13"/><text x="18.4945%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="18.2516%" y="229" width="0.0114%" height="15" fill="rgb(207,46,11)" fg:x="12861" fg:w="8"/><text x="18.5016%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="18.2658%" y="277" width="0.0114%" height="15" fill="rgb(241,35,35)" fg:x="12871" fg:w="8"/><text x="18.5158%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="18.3339%" y="197" width="0.0199%" height="15" fill="rgb(243,32,47)" fg:x="12919" fg:w="14"/><text x="18.5839%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.03%)</title><rect x="18.3297%" y="229" width="0.0270%" height="15" fill="rgb(247,202,23)" fg:x="12916" fg:w="19"/><text x="18.5797%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.02%)</title><rect x="18.3339%" y="213" width="0.0227%" height="15" fill="rgb(219,102,11)" fg:x="12919" fg:w="16"/><text x="18.5839%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (42 samples, 0.06%)</title><rect x="18.3268%" y="245" width="0.0596%" height="15" fill="rgb(243,110,44)" fg:x="12914" fg:w="42"/><text x="18.5768%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.03%)</title><rect x="18.3566%" y="229" width="0.0298%" height="15" fill="rgb(222,74,54)" fg:x="12935" fg:w="21"/><text x="18.6066%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (78 samples, 0.11%)</title><rect x="18.2843%" y="277" width="0.1107%" height="15" fill="rgb(216,99,12)" fg:x="12884" fg:w="78"/><text x="18.5343%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (61 samples, 0.09%)</title><rect x="18.3084%" y="261" width="0.0866%" height="15" fill="rgb(226,22,26)" fg:x="12901" fg:w="61"/><text x="18.5584%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,225 samples, 1.74%)</title><rect x="16.6678%" y="293" width="1.7385%" height="15" fill="rgb(217,163,10)" fg:x="11745" fg:w="1225"/><text x="16.9178%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="18.3949%" y="277" width="0.0114%" height="15" fill="rgb(213,25,53)" fg:x="12962" fg:w="8"/><text x="18.6449%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (53 samples, 0.08%)</title><rect x="25.8838%" y="277" width="0.0752%" height="15" fill="rgb(252,105,26)" fg:x="18239" fg:w="53"/><text x="26.1338%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (9 samples, 0.01%)</title><rect x="25.9590%" y="277" width="0.0128%" height="15" fill="rgb(220,39,43)" fg:x="18292" fg:w="9"/><text x="26.2090%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (44 samples, 0.06%)</title><rect x="25.9774%" y="277" width="0.0624%" height="15" fill="rgb(229,68,48)" fg:x="18305" fg:w="44"/><text x="26.2274%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="26.2130%" y="261" width="0.0255%" height="15" fill="rgb(252,8,32)" fg:x="18471" fg:w="18"/><text x="26.4630%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (193 samples, 0.27%)</title><rect x="26.0399%" y="277" width="0.2739%" height="15" fill="rgb(223,20,43)" fg:x="18349" fg:w="193"/><text x="26.2899%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (48 samples, 0.07%)</title><rect x="26.2457%" y="261" width="0.0681%" height="15" fill="rgb(229,81,49)" fg:x="18494" fg:w="48"/><text x="26.4957%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (45 samples, 0.06%)</title><rect x="26.2499%" y="245" width="0.0639%" height="15" fill="rgb(236,28,36)" fg:x="18497" fg:w="45"/><text x="26.4999%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (37 samples, 0.05%)</title><rect x="26.5281%" y="245" width="0.0525%" height="15" fill="rgb(249,185,26)" fg:x="18693" fg:w="37"/><text x="26.7781%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (205 samples, 0.29%)</title><rect x="26.3322%" y="277" width="0.2909%" height="15" fill="rgb(249,174,33)" fg:x="18555" fg:w="205"/><text x="26.5822%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (159 samples, 0.23%)</title><rect x="26.3975%" y="261" width="0.2256%" height="15" fill="rgb(233,201,37)" fg:x="18601" fg:w="159"/><text x="26.6475%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.04%)</title><rect x="26.5806%" y="245" width="0.0426%" height="15" fill="rgb(221,78,26)" fg:x="18730" fg:w="30"/><text x="26.8306%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (58 samples, 0.08%)</title><rect x="26.6231%" y="277" width="0.0823%" height="15" fill="rgb(250,127,30)" fg:x="18760" fg:w="58"/><text x="26.8731%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (25 samples, 0.04%)</title><rect x="26.7055%" y="277" width="0.0355%" height="15" fill="rgb(230,49,44)" fg:x="18818" fg:w="25"/><text x="26.9555%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="26.7409%" y="277" width="0.0227%" height="15" fill="rgb(229,67,23)" fg:x="18843" fg:w="16"/><text x="26.9909%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (13 samples, 0.02%)</title><rect x="26.7636%" y="277" width="0.0184%" height="15" fill="rgb(249,83,47)" fg:x="18859" fg:w="13"/><text x="27.0136%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="26.7906%" y="277" width="0.0170%" height="15" fill="rgb(215,43,3)" fg:x="18878" fg:w="12"/><text x="27.0406%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="26.8076%" y="277" width="0.0128%" height="15" fill="rgb(238,154,13)" fg:x="18890" fg:w="9"/><text x="27.0576%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84 samples, 0.12%)</title><rect x="26.8545%" y="261" width="0.1192%" height="15" fill="rgb(219,56,2)" fg:x="18923" fg:w="84"/><text x="27.1045%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="26.9467%" y="245" width="0.0270%" height="15" fill="rgb(233,0,4)" fg:x="18988" fg:w="19"/><text x="27.1967%" y="255.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (119 samples, 0.17%)</title><rect x="26.8218%" y="277" width="0.1689%" height="15" fill="rgb(235,30,7)" fg:x="18900" fg:w="119"/><text x="27.0718%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="26.9737%" y="261" width="0.0170%" height="15" fill="rgb(250,79,13)" fg:x="19007" fg:w="12"/><text x="27.2237%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (537 samples, 0.76%)</title><rect x="26.9907%" y="277" width="0.7621%" height="15" fill="rgb(211,146,34)" fg:x="19019" fg:w="537"/><text x="27.2407%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.07%)</title><rect x="27.7528%" y="277" width="0.0681%" height="15" fill="rgb(228,22,38)" fg:x="19556" fg:w="48"/><text x="28.0028%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (59 samples, 0.08%)</title><rect x="27.8209%" y="277" width="0.0837%" height="15" fill="rgb(235,168,5)" fg:x="19604" fg:w="59"/><text x="28.0709%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,478 samples, 2.10%)</title><rect x="27.9046%" y="277" width="2.0975%" height="15" fill="rgb(221,155,16)" fg:x="19663" fg:w="1478"/><text x="28.1546%" y="287.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$free (40 samples, 0.06%)</title><rect x="30.0021%" y="277" width="0.0568%" height="15" fill="rgb(215,215,53)" fg:x="21141" fg:w="40"/><text x="30.2521%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="30.1582%" y="245" width="0.0128%" height="15" fill="rgb(223,4,10)" fg:x="21251" fg:w="9"/><text x="30.4082%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.02%)</title><rect x="30.1824%" y="213" width="0.0199%" height="15" fill="rgb(234,103,6)" fg:x="21268" fg:w="14"/><text x="30.4324%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (107 samples, 0.15%)</title><rect x="30.1781%" y="229" width="0.1518%" height="15" fill="rgb(227,97,0)" fg:x="21265" fg:w="107"/><text x="30.4281%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.13%)</title><rect x="30.2022%" y="213" width="0.1277%" height="15" fill="rgb(234,150,53)" fg:x="21282" fg:w="90"/><text x="30.4522%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (183 samples, 0.26%)</title><rect x="30.0788%" y="277" width="0.2597%" height="15" fill="rgb(228,201,54)" fg:x="21195" fg:w="183"/><text x="30.3288%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (127 samples, 0.18%)</title><rect x="30.1582%" y="261" width="0.1802%" height="15" fill="rgb(222,22,37)" fg:x="21251" fg:w="127"/><text x="30.4082%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (117 samples, 0.17%)</title><rect x="30.1724%" y="245" width="0.1660%" height="15" fill="rgb(237,53,32)" fg:x="21261" fg:w="117"/><text x="30.4224%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.06%)</title><rect x="30.6053%" y="245" width="0.0596%" height="15" fill="rgb(233,25,53)" fg:x="21566" fg:w="42"/><text x="30.8553%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.01%)</title><rect x="30.6649%" y="245" width="0.0142%" height="15" fill="rgb(210,40,34)" fg:x="21608" fg:w="10"/><text x="30.9149%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (26 samples, 0.04%)</title><rect x="30.6791%" y="245" width="0.0369%" height="15" fill="rgb(241,220,44)" fg:x="21618" fg:w="26"/><text x="30.9291%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (70 samples, 0.10%)</title><rect x="30.7160%" y="245" width="0.0993%" height="15" fill="rgb(235,28,35)" fg:x="21644" fg:w="70"/><text x="30.9660%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (52 samples, 0.07%)</title><rect x="30.7415%" y="229" width="0.0738%" height="15" fill="rgb(210,56,17)" fg:x="21662" fg:w="52"/><text x="30.9915%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (291 samples, 0.41%)</title><rect x="30.4037%" y="261" width="0.4130%" height="15" fill="rgb(224,130,29)" fg:x="21424" fg:w="291"/><text x="30.6537%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (56 samples, 0.08%)</title><rect x="30.9501%" y="245" width="0.0795%" height="15" fill="rgb(235,212,8)" fg:x="21809" fg:w="56"/><text x="31.2001%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (13 samples, 0.02%)</title><rect x="31.0296%" y="245" width="0.0184%" height="15" fill="rgb(223,33,50)" fg:x="21865" fg:w="13"/><text x="31.2796%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (21 samples, 0.03%)</title><rect x="31.0480%" y="245" width="0.0298%" height="15" fill="rgb(219,149,13)" fg:x="21878" fg:w="21"/><text x="31.2980%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (119 samples, 0.17%)</title><rect x="31.0778%" y="245" width="0.1689%" height="15" fill="rgb(250,156,29)" fg:x="21899" fg:w="119"/><text x="31.3278%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (271 samples, 0.38%)</title><rect x="31.2496%" y="245" width="0.3846%" height="15" fill="rgb(216,193,19)" fg:x="22020" fg:w="271"/><text x="31.4996%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (268 samples, 0.38%)</title><rect x="31.2538%" y="229" width="0.3803%" height="15" fill="rgb(216,135,14)" fg:x="22023" fg:w="268"/><text x="31.5038%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (137 samples, 0.19%)</title><rect x="31.6455%" y="229" width="0.1944%" height="15" fill="rgb(241,47,5)" fg:x="22299" fg:w="137"/><text x="31.8955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (719 samples, 1.02%)</title><rect x="30.8210%" y="261" width="1.0204%" height="15" fill="rgb(233,42,35)" fg:x="21718" fg:w="719"/><text x="31.0710%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (146 samples, 0.21%)</title><rect x="31.6341%" y="245" width="0.2072%" height="15" fill="rgb(231,13,6)" fg:x="22291" fg:w="146"/><text x="31.8841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.02%)</title><rect x="31.9861%" y="229" width="0.0241%" height="15" fill="rgb(207,181,40)" fg:x="22539" fg:w="17"/><text x="32.2361%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.02%)</title><rect x="31.9861%" y="213" width="0.0241%" height="15" fill="rgb(254,173,49)" fg:x="22539" fg:w="17"/><text x="32.2361%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (14 samples, 0.02%)</title><rect x="32.0173%" y="229" width="0.0199%" height="15" fill="rgb(221,1,38)" fg:x="22561" fg:w="14"/><text x="32.2673%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (75 samples, 0.11%)</title><rect x="32.0372%" y="229" width="0.1064%" height="15" fill="rgb(206,124,46)" fg:x="22575" fg:w="75"/><text x="32.2872%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (68 samples, 0.10%)</title><rect x="32.1436%" y="229" width="0.0965%" height="15" fill="rgb(249,21,11)" fg:x="22650" fg:w="68"/><text x="32.3936%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (19 samples, 0.03%)</title><rect x="32.2401%" y="229" width="0.0270%" height="15" fill="rgb(222,201,40)" fg:x="22718" fg:w="19"/><text x="32.4901%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (41 samples, 0.06%)</title><rect x="32.2671%" y="229" width="0.0582%" height="15" fill="rgb(235,61,29)" fg:x="22737" fg:w="41"/><text x="32.5171%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.04%)</title><rect x="32.2855%" y="213" width="0.0397%" height="15" fill="rgb(219,207,3)" fg:x="22750" fg:w="28"/><text x="32.5355%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (96 samples, 0.14%)</title><rect x="32.3338%" y="213" width="0.1362%" height="15" fill="rgb(222,56,46)" fg:x="22784" fg:w="96"/><text x="32.5838%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (444 samples, 0.63%)</title><rect x="31.8413%" y="261" width="0.6301%" height="15" fill="rgb(239,76,54)" fg:x="22437" fg:w="444"/><text x="32.0913%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (414 samples, 0.59%)</title><rect x="31.8839%" y="245" width="0.5875%" height="15" fill="rgb(231,124,27)" fg:x="22467" fg:w="414"/><text x="32.1339%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (103 samples, 0.15%)</title><rect x="32.3253%" y="229" width="0.1462%" height="15" fill="rgb(249,195,6)" fg:x="22778" fg:w="103"/><text x="32.5753%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="32.4714%" y="261" width="0.0213%" height="15" fill="rgb(237,174,47)" fg:x="22881" fg:w="15"/><text x="32.7214%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (131 samples, 0.19%)</title><rect x="32.4927%" y="261" width="0.1859%" height="15" fill="rgb(206,201,31)" fg:x="22896" fg:w="131"/><text x="32.7427%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (102 samples, 0.14%)</title><rect x="32.5339%" y="245" width="0.1448%" height="15" fill="rgb(231,57,52)" fg:x="22925" fg:w="102"/><text x="32.7839%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (102 samples, 0.14%)</title><rect x="32.5339%" y="229" width="0.1448%" height="15" fill="rgb(248,177,22)" fg:x="22925" fg:w="102"/><text x="32.7839%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.03%)</title><rect x="32.6786%" y="261" width="0.0326%" height="15" fill="rgb(215,211,37)" fg:x="23027" fg:w="23"/><text x="32.9286%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (25 samples, 0.04%)</title><rect x="32.7170%" y="261" width="0.0355%" height="15" fill="rgb(241,128,51)" fg:x="23054" fg:w="25"/><text x="32.9670%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.01%)</title><rect x="32.7524%" y="261" width="0.0142%" height="15" fill="rgb(227,165,31)" fg:x="23079" fg:w="10"/><text x="33.0024%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.04%)</title><rect x="32.8362%" y="229" width="0.0383%" height="15" fill="rgb(228,167,24)" fg:x="23138" fg:w="27"/><text x="33.0862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.09%)</title><rect x="32.7879%" y="245" width="0.0880%" height="15" fill="rgb(228,143,12)" fg:x="23104" fg:w="62"/><text x="33.0379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="32.8759%" y="245" width="0.0114%" height="15" fill="rgb(249,149,8)" fg:x="23166" fg:w="8"/><text x="33.1259%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.07%)</title><rect x="32.8872%" y="245" width="0.0667%" height="15" fill="rgb(243,35,44)" fg:x="23174" fg:w="47"/><text x="33.1372%" y="255.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,844 samples, 2.62%)</title><rect x="30.3399%" y="277" width="2.6169%" height="15" fill="rgb(246,89,9)" fg:x="21379" fg:w="1844"/><text x="30.5899%" y="287.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (124 samples, 0.18%)</title><rect x="32.7808%" y="261" width="0.1760%" height="15" fill="rgb(233,213,13)" fg:x="23099" fg:w="124"/><text x="33.0308%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (205 samples, 0.29%)</title><rect x="32.9568%" y="277" width="0.2909%" height="15" fill="rgb(233,141,41)" fg:x="23223" fg:w="205"/><text x="33.2068%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (167 samples, 0.24%)</title><rect x="33.0107%" y="261" width="0.2370%" height="15" fill="rgb(239,167,4)" fg:x="23261" fg:w="167"/><text x="33.2607%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (126 samples, 0.18%)</title><rect x="33.0689%" y="245" width="0.1788%" height="15" fill="rgb(209,217,16)" fg:x="23302" fg:w="126"/><text x="33.3189%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (63 samples, 0.09%)</title><rect x="33.1583%" y="229" width="0.0894%" height="15" fill="rgb(219,88,35)" fg:x="23365" fg:w="63"/><text x="33.4083%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (19 samples, 0.03%)</title><rect x="33.2207%" y="213" width="0.0270%" height="15" fill="rgb(220,193,23)" fg:x="23409" fg:w="19"/><text x="33.4707%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (33 samples, 0.05%)</title><rect x="33.2477%" y="277" width="0.0468%" height="15" fill="rgb(230,90,52)" fg:x="23428" fg:w="33"/><text x="33.4977%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="34.3717%" y="261" width="0.0199%" height="15" fill="rgb(252,106,19)" fg:x="24220" fg:w="14"/><text x="34.6217%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="34.3915%" y="261" width="0.0227%" height="15" fill="rgb(206,74,20)" fg:x="24234" fg:w="16"/><text x="34.6415%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="34.4142%" y="261" width="0.0156%" height="15" fill="rgb(230,138,44)" fg:x="24250" fg:w="11"/><text x="34.6642%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (11 samples, 0.02%)</title><rect x="34.4384%" y="261" width="0.0156%" height="15" fill="rgb(235,182,43)" fg:x="24267" fg:w="11"/><text x="34.6884%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.05%)</title><rect x="35.1054%" y="229" width="0.0497%" height="15" fill="rgb(242,16,51)" fg:x="24737" fg:w="35"/><text x="35.3554%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.14%)</title><rect x="35.0145%" y="245" width="0.1433%" height="15" fill="rgb(248,9,4)" fg:x="24673" fg:w="101"/><text x="35.2645%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.02%)</title><rect x="35.1650%" y="245" width="0.0156%" height="15" fill="rgb(210,31,22)" fg:x="24779" fg:w="11"/><text x="35.4150%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="35.1806%" y="245" width="0.0156%" height="15" fill="rgb(239,54,39)" fg:x="24790" fg:w="11"/><text x="35.4306%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (29 samples, 0.04%)</title><rect x="35.1962%" y="245" width="0.0412%" height="15" fill="rgb(230,99,41)" fg:x="24801" fg:w="29"/><text x="35.4462%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="35.2374%" y="245" width="0.0213%" height="15" fill="rgb(253,106,12)" fg:x="24830" fg:w="15"/><text x="35.4874%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="35.2586%" y="245" width="0.0128%" height="15" fill="rgb(213,46,41)" fg:x="24845" fg:w="9"/><text x="35.5086%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="35.2714%" y="245" width="0.0156%" height="15" fill="rgb(215,133,35)" fg:x="24854" fg:w="11"/><text x="35.5214%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.07%)</title><rect x="35.7610%" y="197" width="0.0653%" height="15" fill="rgb(213,28,5)" fg:x="25199" fg:w="46"/><text x="36.0110%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="35.8093%" y="181" width="0.0170%" height="15" fill="rgb(215,77,49)" fg:x="25233" fg:w="12"/><text x="36.0593%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (77 samples, 0.11%)</title><rect x="35.7270%" y="213" width="0.1093%" height="15" fill="rgb(248,100,22)" fg:x="25175" fg:w="77"/><text x="35.9770%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (43 samples, 0.06%)</title><rect x="35.9285%" y="181" width="0.0610%" height="15" fill="rgb(208,67,9)" fg:x="25317" fg:w="43"/><text x="36.1785%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (207 samples, 0.29%)</title><rect x="35.8362%" y="213" width="0.2938%" height="15" fill="rgb(219,133,21)" fg:x="25252" fg:w="207"/><text x="36.0862%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (194 samples, 0.28%)</title><rect x="35.8547%" y="197" width="0.2753%" height="15" fill="rgb(246,46,29)" fg:x="25265" fg:w="194"/><text x="36.1047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (99 samples, 0.14%)</title><rect x="35.9895%" y="181" width="0.1405%" height="15" fill="rgb(246,185,52)" fg:x="25360" fg:w="99"/><text x="36.2395%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (59 samples, 0.08%)</title><rect x="36.0463%" y="165" width="0.0837%" height="15" fill="rgb(252,136,11)" fg:x="25400" fg:w="59"/><text x="36.2963%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (383 samples, 0.54%)</title><rect x="35.5978%" y="229" width="0.5435%" height="15" fill="rgb(219,138,53)" fg:x="25084" fg:w="383"/><text x="35.8478%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="36.1300%" y="213" width="0.0114%" height="15" fill="rgb(211,51,23)" fg:x="25459" fg:w="8"/><text x="36.3800%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.02%)</title><rect x="36.1413%" y="229" width="0.0170%" height="15" fill="rgb(247,221,28)" fg:x="25467" fg:w="12"/><text x="36.3913%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (105 samples, 0.15%)</title><rect x="36.1740%" y="229" width="0.1490%" height="15" fill="rgb(251,222,45)" fg:x="25490" fg:w="105"/><text x="36.4240%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,506 samples, 2.14%)</title><rect x="34.4597%" y="261" width="2.1372%" height="15" fill="rgb(217,162,53)" fg:x="24282" fg:w="1506"/><text x="34.7097%" y="271.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (919 samples, 1.30%)</title><rect x="35.2927%" y="245" width="1.3042%" height="15" fill="rgb(229,93,14)" fg:x="24869" fg:w="919"/><text x="35.5427%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (193 samples, 0.27%)</title><rect x="36.3230%" y="229" width="0.2739%" height="15" fill="rgb(209,67,49)" fg:x="25595" fg:w="193"/><text x="36.5730%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,342 samples, 3.32%)</title><rect x="33.2945%" y="277" width="3.3236%" height="15" fill="rgb(213,87,29)" fg:x="23461" fg:w="2342"/><text x="33.5445%" y="287.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="36.5969%" y="261" width="0.0213%" height="15" fill="rgb(205,151,52)" fg:x="25788" fg:w="15"/><text x="36.8469%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,742 samples, 2.47%)</title><rect x="36.6182%" y="277" width="2.4721%" height="15" fill="rgb(253,215,39)" fg:x="25803" fg:w="1742"/><text x="36.8682%" y="287.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (111 samples, 0.16%)</title><rect x="39.0903%" y="277" width="0.1575%" height="15" fill="rgb(221,220,41)" fg:x="27545" fg:w="111"/><text x="39.3403%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (92 samples, 0.13%)</title><rect x="39.4579%" y="261" width="0.1306%" height="15" fill="rgb(218,133,21)" fg:x="27804" fg:w="92"/><text x="39.7079%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (27 samples, 0.04%)</title><rect x="39.8098%" y="245" width="0.0383%" height="15" fill="rgb(221,193,43)" fg:x="28052" fg:w="27"/><text x="40.0598%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (158 samples, 0.22%)</title><rect x="39.8482%" y="245" width="0.2242%" height="15" fill="rgb(240,128,52)" fg:x="28079" fg:w="158"/><text x="40.0982%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (827 samples, 1.17%)</title><rect x="39.2479%" y="277" width="1.1736%" height="15" fill="rgb(253,114,12)" fg:x="27656" fg:w="827"/><text x="39.4979%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (587 samples, 0.83%)</title><rect x="39.5884%" y="261" width="0.8330%" height="15" fill="rgb(215,223,47)" fg:x="27896" fg:w="587"/><text x="39.8384%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (246 samples, 0.35%)</title><rect x="40.0724%" y="245" width="0.3491%" height="15" fill="rgb(248,225,23)" fg:x="28237" fg:w="246"/><text x="40.3224%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (53 samples, 0.08%)</title><rect x="40.4215%" y="277" width="0.0752%" height="15" fill="rgb(250,108,0)" fg:x="28483" fg:w="53"/><text x="40.6715%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="40.4967%" y="277" width="0.0184%" height="15" fill="rgb(228,208,7)" fg:x="28536" fg:w="13"/><text x="40.7467%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (343 samples, 0.49%)</title><rect x="40.5151%" y="277" width="0.4868%" height="15" fill="rgb(244,45,10)" fg:x="28549" fg:w="343"/><text x="40.7651%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (394 samples, 0.56%)</title><rect x="42.5587%" y="245" width="0.5591%" height="15" fill="rgb(207,125,25)" fg:x="29989" fg:w="394"/><text x="42.8087%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,753 samples, 2.49%)</title><rect x="41.3070%" y="261" width="2.4878%" height="15" fill="rgb(210,195,18)" fg:x="29107" fg:w="1753"/><text x="41.5570%" y="271.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (477 samples, 0.68%)</title><rect x="43.1179%" y="245" width="0.6769%" height="15" fill="rgb(249,80,12)" fg:x="30383" fg:w="477"/><text x="43.3679%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,056 samples, 2.92%)</title><rect x="41.0019%" y="277" width="2.9178%" height="15" fill="rgb(221,65,9)" fg:x="28892" fg:w="2056"/><text x="41.2519%" y="287.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (88 samples, 0.12%)</title><rect x="43.7948%" y="261" width="0.1249%" height="15" fill="rgb(235,49,36)" fg:x="30860" fg:w="88"/><text x="44.0448%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,487 samples, 3.53%)</title><rect x="45.6695%" y="261" width="3.5294%" height="15" fill="rgb(225,32,20)" fg:x="32181" fg:w="2487"/><text x="45.9195%" y="271.50">rus..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (33 samples, 0.05%)</title><rect x="49.2017%" y="213" width="0.0468%" height="15" fill="rgb(215,141,46)" fg:x="34670" fg:w="33"/><text x="49.4517%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (30 samples, 0.04%)</title><rect x="49.2060%" y="197" width="0.0426%" height="15" fill="rgb(250,160,47)" fg:x="34673" fg:w="30"/><text x="49.4560%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (37 samples, 0.05%)</title><rect x="49.1989%" y="261" width="0.0525%" height="15" fill="rgb(216,222,40)" fg:x="34668" fg:w="37"/><text x="49.4489%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (37 samples, 0.05%)</title><rect x="49.1989%" y="245" width="0.0525%" height="15" fill="rgb(234,217,39)" fg:x="34668" fg:w="37"/><text x="49.4489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 0.05%)</title><rect x="49.1989%" y="229" width="0.0525%" height="15" fill="rgb(207,178,40)" fg:x="34668" fg:w="37"/><text x="49.4489%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,081 samples, 2.95%)</title><rect x="49.2514%" y="261" width="2.9532%" height="15" fill="rgb(221,136,13)" fg:x="34705" fg:w="2081"/><text x="49.5014%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (410 samples, 0.58%)</title><rect x="52.2046%" y="261" width="0.5818%" height="15" fill="rgb(249,199,10)" fg:x="36786" fg:w="410"/><text x="52.4546%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (104 samples, 0.15%)</title><rect x="52.8234%" y="245" width="0.1476%" height="15" fill="rgb(249,222,13)" fg:x="37222" fg:w="104"/><text x="53.0734%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (160 samples, 0.23%)</title><rect x="53.0959%" y="229" width="0.2271%" height="15" fill="rgb(244,185,38)" fg:x="37414" fg:w="160"/><text x="53.3459%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (516 samples, 0.73%)</title><rect x="52.7865%" y="261" width="0.7323%" height="15" fill="rgb(236,202,9)" fg:x="37196" fg:w="516"/><text x="53.0365%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (386 samples, 0.55%)</title><rect x="52.9710%" y="245" width="0.5478%" height="15" fill="rgb(250,229,37)" fg:x="37326" fg:w="386"/><text x="53.2210%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (138 samples, 0.20%)</title><rect x="53.3229%" y="229" width="0.1958%" height="15" fill="rgb(206,174,23)" fg:x="37574" fg:w="138"/><text x="53.5729%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.06%)</title><rect x="55.0174%" y="245" width="0.0568%" height="15" fill="rgb(211,33,43)" fg:x="38768" fg:w="40"/><text x="55.2674%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (40 samples, 0.06%)</title><rect x="55.0174%" y="229" width="0.0568%" height="15" fill="rgb(245,58,50)" fg:x="38768" fg:w="40"/><text x="55.2674%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (40 samples, 0.06%)</title><rect x="55.0174%" y="213" width="0.0568%" height="15" fill="rgb(244,68,36)" fg:x="38768" fg:w="40"/><text x="55.2674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (39 samples, 0.06%)</title><rect x="55.0188%" y="197" width="0.0553%" height="15" fill="rgb(232,229,15)" fg:x="38769" fg:w="39"/><text x="55.2688%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.05%)</title><rect x="55.0202%" y="181" width="0.0539%" height="15" fill="rgb(254,30,23)" fg:x="38770" fg:w="38"/><text x="55.2702%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (7,861 samples, 11.16%)</title><rect x="43.9197%" y="277" width="11.1559%" height="15" fill="rgb(235,160,14)" fg:x="30948" fg:w="7861"/><text x="44.1697%" y="287.50">rust_qecp`rust_q..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,097 samples, 1.56%)</title><rect x="53.5188%" y="261" width="1.5568%" height="15" fill="rgb(212,155,44)" fg:x="37712" fg:w="1097"/><text x="53.7688%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (10 samples, 0.01%)</title><rect x="55.0756%" y="277" width="0.0142%" height="15" fill="rgb(226,2,50)" fg:x="38809" fg:w="10"/><text x="55.3256%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (10 samples, 0.01%)</title><rect x="55.0898%" y="277" width="0.0142%" height="15" fill="rgb(234,177,6)" fg:x="38819" fg:w="10"/><text x="55.3398%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.04%)</title><rect x="56.0775%" y="261" width="0.0397%" height="15" fill="rgb(217,24,9)" fg:x="39515" fg:w="28"/><text x="56.3275%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="56.1371%" y="229" width="0.0114%" height="15" fill="rgb(220,13,46)" fg:x="39557" fg:w="8"/><text x="56.3871%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (11 samples, 0.02%)</title><rect x="56.1484%" y="229" width="0.0156%" height="15" fill="rgb(239,221,27)" fg:x="39565" fg:w="11"/><text x="56.3984%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (38 samples, 0.05%)</title><rect x="56.1229%" y="245" width="0.0539%" height="15" fill="rgb(222,198,25)" fg:x="39547" fg:w="38"/><text x="56.3729%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="56.1641%" y="229" width="0.0128%" height="15" fill="rgb(211,99,13)" fg:x="39576" fg:w="9"/><text x="56.4141%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (50 samples, 0.07%)</title><rect x="56.1186%" y="261" width="0.0710%" height="15" fill="rgb(232,111,31)" fg:x="39544" fg:w="50"/><text x="56.3686%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="56.1782%" y="245" width="0.0114%" height="15" fill="rgb(245,82,37)" fg:x="39586" fg:w="8"/><text x="56.4282%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (31 samples, 0.04%)</title><rect x="56.1896%" y="245" width="0.0440%" height="15" fill="rgb(227,149,46)" fg:x="39594" fg:w="31"/><text x="56.4396%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="56.2336%" y="245" width="0.0170%" height="15" fill="rgb(218,36,50)" fg:x="39625" fg:w="12"/><text x="56.4836%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="56.2606%" y="245" width="0.0199%" height="15" fill="rgb(226,80,48)" fg:x="39644" fg:w="14"/><text x="56.5106%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="56.4138%" y="213" width="0.0128%" height="15" fill="rgb(238,224,15)" fg:x="39752" fg:w="9"/><text x="56.6638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.03%)</title><rect x="56.5813%" y="181" width="0.0312%" height="15" fill="rgb(241,136,10)" fg:x="39870" fg:w="22"/><text x="56.8313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (108 samples, 0.15%)</title><rect x="56.4621%" y="197" width="0.1533%" height="15" fill="rgb(208,32,45)" fg:x="39786" fg:w="108"/><text x="56.7121%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (211 samples, 0.30%)</title><rect x="56.3344%" y="229" width="0.2994%" height="15" fill="rgb(207,135,9)" fg:x="39696" fg:w="211"/><text x="56.5844%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (146 samples, 0.21%)</title><rect x="56.4266%" y="213" width="0.2072%" height="15" fill="rgb(206,86,44)" fg:x="39761" fg:w="146"/><text x="56.6766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="56.6153%" y="197" width="0.0184%" height="15" fill="rgb(245,177,15)" fg:x="39894" fg:w="13"/><text x="56.8653%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="56.6338%" y="229" width="0.0284%" height="15" fill="rgb(206,64,50)" fg:x="39907" fg:w="20"/><text x="56.8838%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (88 samples, 0.12%)</title><rect x="56.6622%" y="229" width="0.1249%" height="15" fill="rgb(234,36,40)" fg:x="39927" fg:w="88"/><text x="56.9122%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.06%)</title><rect x="56.7275%" y="213" width="0.0596%" height="15" fill="rgb(213,64,8)" fg:x="39973" fg:w="42"/><text x="56.9775%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="56.7871%" y="229" width="0.0128%" height="15" fill="rgb(210,75,36)" fg:x="40015" fg:w="9"/><text x="57.0371%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (25 samples, 0.04%)</title><rect x="56.7998%" y="229" width="0.0355%" height="15" fill="rgb(229,88,21)" fg:x="40024" fg:w="25"/><text x="57.0498%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="56.8396%" y="229" width="0.0227%" height="15" fill="rgb(252,204,47)" fg:x="40052" fg:w="16"/><text x="57.0896%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (387 samples, 0.55%)</title><rect x="56.8836%" y="213" width="0.5492%" height="15" fill="rgb(208,77,27)" fg:x="40083" fg:w="387"/><text x="57.1336%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="57.4739%" y="197" width="0.0454%" height="15" fill="rgb(221,76,26)" fg:x="40499" fg:w="32"/><text x="57.7239%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (47 samples, 0.07%)</title><rect x="57.5193%" y="197" width="0.0667%" height="15" fill="rgb(225,139,18)" fg:x="40531" fg:w="47"/><text x="57.7693%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (107 samples, 0.15%)</title><rect x="57.4498%" y="213" width="0.1518%" height="15" fill="rgb(230,137,11)" fg:x="40482" fg:w="107"/><text x="57.6998%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="57.5860%" y="197" width="0.0156%" height="15" fill="rgb(212,28,1)" fg:x="40578" fg:w="11"/><text x="57.8360%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.01%)</title><rect x="57.6031%" y="213" width="0.0142%" height="15" fill="rgb(248,164,17)" fg:x="40590" fg:w="10"/><text x="57.8531%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.02%)</title><rect x="57.8287%" y="149" width="0.0170%" height="15" fill="rgb(222,171,42)" fg:x="40749" fg:w="12"/><text x="58.0787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (94 samples, 0.13%)</title><rect x="57.7450%" y="165" width="0.1334%" height="15" fill="rgb(243,84,45)" fg:x="40690" fg:w="94"/><text x="57.9950%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.03%)</title><rect x="57.8457%" y="149" width="0.0326%" height="15" fill="rgb(252,49,23)" fg:x="40761" fg:w="23"/><text x="58.0957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (147 samples, 0.21%)</title><rect x="57.6797%" y="197" width="0.2086%" height="15" fill="rgb(215,19,7)" fg:x="40644" fg:w="147"/><text x="57.9297%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 0.17%)</title><rect x="57.7209%" y="181" width="0.1675%" height="15" fill="rgb(238,81,41)" fg:x="40673" fg:w="118"/><text x="57.9709%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (731 samples, 1.04%)</title><rect x="56.8623%" y="229" width="1.0374%" height="15" fill="rgb(210,199,37)" fg:x="40068" fg:w="731"/><text x="57.1123%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (199 samples, 0.28%)</title><rect x="57.6173%" y="213" width="0.2824%" height="15" fill="rgb(244,192,49)" fg:x="40600" fg:w="199"/><text x="57.8673%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.03%)</title><rect x="57.9465%" y="213" width="0.0341%" height="15" fill="rgb(226,211,11)" fg:x="40832" fg:w="24"/><text x="58.1965%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (49 samples, 0.07%)</title><rect x="57.9806%" y="213" width="0.0695%" height="15" fill="rgb(236,162,54)" fg:x="40856" fg:w="49"/><text x="58.2306%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (169 samples, 0.24%)</title><rect x="57.8997%" y="229" width="0.2398%" height="15" fill="rgb(220,229,9)" fg:x="40799" fg:w="169"/><text x="58.1497%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (63 samples, 0.09%)</title><rect x="58.0501%" y="213" width="0.0894%" height="15" fill="rgb(250,87,22)" fg:x="40905" fg:w="63"/><text x="58.3001%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,304 samples, 1.85%)</title><rect x="56.3017%" y="245" width="1.8506%" height="15" fill="rgb(239,43,17)" fg:x="39673" fg:w="1304"/><text x="56.5517%" y="255.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$free (9 samples, 0.01%)</title><rect x="58.1580%" y="245" width="0.0128%" height="15" fill="rgb(231,177,25)" fg:x="40981" fg:w="9"/><text x="58.4080%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="58.1707%" y="245" width="0.0156%" height="15" fill="rgb(219,179,1)" fg:x="40990" fg:w="11"/><text x="58.4207%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.01%)</title><rect x="58.1863%" y="245" width="0.0142%" height="15" fill="rgb(238,219,53)" fg:x="41001" fg:w="10"/><text x="58.4363%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,427 samples, 2.03%)</title><rect x="56.1896%" y="261" width="2.0251%" height="15" fill="rgb(232,167,36)" fg:x="39594" fg:w="1427"/><text x="56.4396%" y="271.50">r..</text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="58.3112%" y="245" width="0.0270%" height="15" fill="rgb(244,19,51)" fg:x="41089" fg:w="19"/><text x="58.5612%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="58.3382%" y="245" width="0.0114%" height="15" fill="rgb(224,6,22)" fg:x="41108" fg:w="8"/><text x="58.5882%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (14 samples, 0.02%)</title><rect x="58.3495%" y="245" width="0.0199%" height="15" fill="rgb(224,145,5)" fg:x="41116" fg:w="14"/><text x="58.5995%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (15 samples, 0.02%)</title><rect x="58.3751%" y="245" width="0.0213%" height="15" fill="rgb(234,130,49)" fg:x="41134" fg:w="15"/><text x="58.6251%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="58.5794%" y="181" width="0.0270%" height="15" fill="rgb(254,6,2)" fg:x="41278" fg:w="19"/><text x="58.8294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (82 samples, 0.12%)</title><rect x="58.4985%" y="197" width="0.1164%" height="15" fill="rgb(208,96,46)" fg:x="41221" fg:w="82"/><text x="58.7485%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (131 samples, 0.19%)</title><rect x="58.4375%" y="229" width="0.1859%" height="15" fill="rgb(239,3,39)" fg:x="41178" fg:w="131"/><text x="58.6875%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (103 samples, 0.15%)</title><rect x="58.4773%" y="213" width="0.1462%" height="15" fill="rgb(233,210,1)" fg:x="41206" fg:w="103"/><text x="58.7273%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="58.6234%" y="229" width="0.0128%" height="15" fill="rgb(244,137,37)" fg:x="41309" fg:w="9"/><text x="58.8734%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.01%)</title><rect x="58.6362%" y="229" width="0.0142%" height="15" fill="rgb(240,136,2)" fg:x="41318" fg:w="10"/><text x="58.8862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="58.6504%" y="229" width="0.0213%" height="15" fill="rgb(239,18,37)" fg:x="41328" fg:w="15"/><text x="58.9004%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (19 samples, 0.03%)</title><rect x="58.7469%" y="213" width="0.0270%" height="15" fill="rgb(218,185,22)" fg:x="41396" fg:w="19"/><text x="58.9969%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (17 samples, 0.02%)</title><rect x="58.8349%" y="197" width="0.0241%" height="15" fill="rgb(225,218,4)" fg:x="41458" fg:w="17"/><text x="59.0849%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="58.8590%" y="197" width="0.0170%" height="15" fill="rgb(230,182,32)" fg:x="41475" fg:w="12"/><text x="59.1090%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (163 samples, 0.23%)</title><rect x="58.8760%" y="197" width="0.2313%" height="15" fill="rgb(242,56,43)" fg:x="41487" fg:w="163"/><text x="59.1260%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (18 samples, 0.03%)</title><rect x="59.1840%" y="181" width="0.0255%" height="15" fill="rgb(233,99,24)" fg:x="41704" fg:w="18"/><text x="59.4340%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (89 samples, 0.13%)</title><rect x="59.2095%" y="181" width="0.1263%" height="15" fill="rgb(234,209,42)" fg:x="41722" fg:w="89"/><text x="59.4595%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.03%)</title><rect x="59.4735%" y="149" width="0.0298%" height="15" fill="rgb(227,7,12)" fg:x="41908" fg:w="21"/><text x="59.7235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (101 samples, 0.14%)</title><rect x="59.3671%" y="165" width="0.1433%" height="15" fill="rgb(245,203,43)" fg:x="41833" fg:w="101"/><text x="59.6171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (130 samples, 0.18%)</title><rect x="59.3358%" y="181" width="0.1845%" height="15" fill="rgb(238,205,33)" fg:x="41811" fg:w="130"/><text x="59.5858%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (68 samples, 0.10%)</title><rect x="59.5203%" y="181" width="0.0965%" height="15" fill="rgb(231,56,7)" fg:x="41941" fg:w="68"/><text x="59.7703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (26 samples, 0.04%)</title><rect x="59.7006%" y="149" width="0.0369%" height="15" fill="rgb(244,186,29)" fg:x="42068" fg:w="26"/><text x="59.9506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (285 samples, 0.40%)</title><rect x="59.6168%" y="181" width="0.4045%" height="15" fill="rgb(234,111,31)" fg:x="42009" fg:w="285"/><text x="59.8668%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (271 samples, 0.38%)</title><rect x="59.6367%" y="165" width="0.3846%" height="15" fill="rgb(241,149,10)" fg:x="42023" fg:w="271"/><text x="59.8867%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (199 samples, 0.28%)</title><rect x="59.7389%" y="149" width="0.2824%" height="15" fill="rgb(249,206,44)" fg:x="42095" fg:w="199"/><text x="59.9889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (648 samples, 0.92%)</title><rect x="59.1074%" y="197" width="0.9196%" height="15" fill="rgb(251,153,30)" fg:x="41650" fg:w="648"/><text x="59.3574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (931 samples, 1.32%)</title><rect x="58.7739%" y="213" width="1.3212%" height="15" fill="rgb(239,152,38)" fg:x="41415" fg:w="931"/><text x="59.0239%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (45 samples, 0.06%)</title><rect x="60.0312%" y="197" width="0.0639%" height="15" fill="rgb(249,139,47)" fg:x="42301" fg:w="45"/><text x="60.2812%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (76 samples, 0.11%)</title><rect x="60.0951%" y="213" width="0.1079%" height="15" fill="rgb(244,64,35)" fg:x="42346" fg:w="76"/><text x="60.3451%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (23 samples, 0.03%)</title><rect x="60.2029%" y="213" width="0.0326%" height="15" fill="rgb(216,46,15)" fg:x="42422" fg:w="23"/><text x="60.4529%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,105 samples, 1.57%)</title><rect x="58.6717%" y="229" width="1.5682%" height="15" fill="rgb(250,74,19)" fg:x="41343" fg:w="1105"/><text x="58.9217%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,425 samples, 2.02%)</title><rect x="58.2247%" y="261" width="2.0223%" height="15" fill="rgb(249,42,33)" fg:x="41028" fg:w="1425"/><text x="58.4747%" y="271.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,304 samples, 1.85%)</title><rect x="58.3964%" y="245" width="1.8506%" height="15" fill="rgb(242,149,17)" fg:x="41149" fg:w="1304"/><text x="58.6464%" y="255.50">r..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (36 samples, 0.05%)</title><rect x="60.2469%" y="261" width="0.0511%" height="15" fill="rgb(244,29,21)" fg:x="42453" fg:w="36"/><text x="60.4969%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (120 samples, 0.17%)</title><rect x="60.2980%" y="245" width="0.1703%" height="15" fill="rgb(220,130,37)" fg:x="42489" fg:w="120"/><text x="60.5480%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="60.7536%" y="229" width="0.0170%" height="15" fill="rgb(211,67,2)" fg:x="42810" fg:w="12"/><text x="61.0036%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="60.9636%" y="197" width="0.0156%" height="15" fill="rgb(235,68,52)" fg:x="42958" fg:w="11"/><text x="61.2136%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="60.9792%" y="197" width="0.0156%" height="15" fill="rgb(246,142,3)" fg:x="42969" fg:w="11"/><text x="61.2292%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (76 samples, 0.11%)</title><rect x="61.0913%" y="165" width="0.1079%" height="15" fill="rgb(241,25,7)" fg:x="43048" fg:w="76"/><text x="61.3413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,378 samples, 1.96%)</title><rect x="61.2559%" y="149" width="1.9556%" height="15" fill="rgb(242,119,39)" fg:x="43164" fg:w="1378"/><text x="61.5059%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (19 samples, 0.03%)</title><rect x="63.2115%" y="149" width="0.0270%" height="15" fill="rgb(241,98,45)" fg:x="44542" fg:w="19"/><text x="63.4615%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,778 samples, 2.52%)</title><rect x="60.8330%" y="213" width="2.5232%" height="15" fill="rgb(254,28,30)" fg:x="42866" fg:w="1778"/><text x="61.0830%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,664 samples, 2.36%)</title><rect x="60.9948%" y="197" width="2.3615%" height="15" fill="rgb(241,142,54)" fg:x="42980" fg:w="1664"/><text x="61.2448%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,645 samples, 2.33%)</title><rect x="61.0218%" y="181" width="2.3345%" height="15" fill="rgb(222,85,15)" fg:x="42999" fg:w="1645"/><text x="61.2718%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,520 samples, 2.16%)</title><rect x="61.1992%" y="165" width="2.1571%" height="15" fill="rgb(210,85,47)" fg:x="43124" fg:w="1520"/><text x="61.4492%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (83 samples, 0.12%)</title><rect x="63.2385%" y="149" width="0.1178%" height="15" fill="rgb(224,206,25)" fg:x="44561" fg:w="83"/><text x="63.4885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (117 samples, 0.17%)</title><rect x="63.3563%" y="213" width="0.1660%" height="15" fill="rgb(243,201,19)" fg:x="44644" fg:w="117"/><text x="63.6063%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (206 samples, 0.29%)</title><rect x="63.5223%" y="213" width="0.2923%" height="15" fill="rgb(236,59,4)" fg:x="44761" fg:w="206"/><text x="63.7723%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,366 samples, 3.36%)</title><rect x="60.4683%" y="245" width="3.3577%" height="15" fill="rgb(254,179,45)" fg:x="42609" fg:w="2366"/><text x="60.7183%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,138 samples, 3.03%)</title><rect x="60.7919%" y="229" width="3.0341%" height="15" fill="rgb(226,14,10)" fg:x="42837" fg:w="2138"/><text x="61.0419%" y="239.50">rus..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="63.8147%" y="213" width="0.0114%" height="15" fill="rgb(244,27,41)" fg:x="44967" fg:w="8"/><text x="64.0647%" y="223.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,499 samples, 3.55%)</title><rect x="60.2980%" y="261" width="3.5464%" height="15" fill="rgb(235,35,32)" fg:x="42489" fg:w="2499"/><text x="60.5480%" y="271.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="63.8260%" y="245" width="0.0184%" height="15" fill="rgb(218,68,31)" fg:x="44975" fg:w="13"/><text x="64.0760%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="64.2830%" y="229" width="0.0199%" height="15" fill="rgb(207,120,37)" fg:x="45297" fg:w="14"/><text x="64.5330%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.02%)</title><rect x="64.5895%" y="213" width="0.0241%" height="15" fill="rgb(227,98,0)" fg:x="45513" fg:w="17"/><text x="64.8395%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (18 samples, 0.03%)</title><rect x="64.9088%" y="197" width="0.0255%" height="15" fill="rgb(207,7,3)" fg:x="45738" fg:w="18"/><text x="65.1588%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.03%)</title><rect x="65.2253%" y="181" width="0.0326%" height="15" fill="rgb(206,98,19)" fg:x="45961" fg:w="23"/><text x="65.4753%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (12 samples, 0.02%)</title><rect x="65.4949%" y="165" width="0.0170%" height="15" fill="rgb(217,5,26)" fg:x="46151" fg:w="12"/><text x="65.7449%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,320 samples, 1.87%)</title><rect x="63.8445%" y="261" width="1.8733%" height="15" fill="rgb(235,190,38)" fg:x="44988" fg:w="1320"/><text x="64.0945%" y="271.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,186 samples, 1.68%)</title><rect x="64.0346%" y="245" width="1.6831%" height="15" fill="rgb(247,86,24)" fg:x="45122" fg:w="1186"/><text x="64.2846%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (997 samples, 1.41%)</title><rect x="64.3028%" y="229" width="1.4149%" height="15" fill="rgb(205,101,16)" fg:x="45311" fg:w="997"/><text x="64.5528%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (778 samples, 1.10%)</title><rect x="64.6136%" y="213" width="1.1041%" height="15" fill="rgb(246,168,33)" fg:x="45530" fg:w="778"/><text x="64.8636%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (552 samples, 0.78%)</title><rect x="64.9344%" y="197" width="0.7834%" height="15" fill="rgb(231,114,1)" fg:x="45756" fg:w="552"/><text x="65.1844%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (324 samples, 0.46%)</title><rect x="65.2579%" y="181" width="0.4598%" height="15" fill="rgb(207,184,53)" fg:x="45984" fg:w="324"/><text x="65.5079%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (145 samples, 0.21%)</title><rect x="65.5120%" y="165" width="0.2058%" height="15" fill="rgb(224,95,51)" fg:x="46163" fg:w="145"/><text x="65.7620%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (49 samples, 0.07%)</title><rect x="65.6482%" y="149" width="0.0695%" height="15" fill="rgb(212,188,45)" fg:x="46259" fg:w="49"/><text x="65.8982%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (13 samples, 0.02%)</title><rect x="65.6993%" y="133" width="0.0184%" height="15" fill="rgb(223,154,38)" fg:x="46295" fg:w="13"/><text x="65.9493%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (325 samples, 0.46%)</title><rect x="66.4245%" y="245" width="0.4612%" height="15" fill="rgb(251,22,52)" fg:x="46806" fg:w="325"/><text x="66.6745%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (657 samples, 0.93%)</title><rect x="66.8857%" y="245" width="0.9324%" height="15" fill="rgb(229,209,22)" fg:x="47131" fg:w="657"/><text x="67.1357%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,242 samples, 3.18%)</title><rect x="65.7177%" y="261" width="3.1817%" height="15" fill="rgb(234,138,34)" fg:x="46308" fg:w="2242"/><text x="65.9677%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (762 samples, 1.08%)</title><rect x="67.8181%" y="245" width="1.0814%" height="15" fill="rgb(212,95,11)" fg:x="47788" fg:w="762"/><text x="68.0681%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (80 samples, 0.11%)</title><rect x="68.8995%" y="261" width="0.1135%" height="15" fill="rgb(240,179,47)" fg:x="48550" fg:w="80"/><text x="69.1495%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (10,123 samples, 14.37%)</title><rect x="55.1040%" y="277" width="14.3660%" height="15" fill="rgb(240,163,11)" fg:x="38829" fg:w="10123"/><text x="55.3540%" y="287.50">rust_qecp`rust_qecp::u..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (322 samples, 0.46%)</title><rect x="69.0130%" y="261" width="0.4570%" height="15" fill="rgb(236,37,12)" fg:x="48630" fg:w="322"/><text x="69.2630%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (13 samples, 0.02%)</title><rect x="73.6522%" y="261" width="0.0184%" height="15" fill="rgb(232,164,16)" fg:x="51899" fg:w="13"/><text x="73.9022%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (68 samples, 0.10%)</title><rect x="73.7771%" y="229" width="0.0965%" height="15" fill="rgb(244,205,15)" fg:x="51987" fg:w="68"/><text x="74.0271%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.05%)</title><rect x="73.8281%" y="213" width="0.0454%" height="15" fill="rgb(223,117,47)" fg:x="52023" fg:w="32"/><text x="74.0781%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (90 samples, 0.13%)</title><rect x="73.7558%" y="245" width="0.1277%" height="15" fill="rgb(244,107,35)" fg:x="51972" fg:w="90"/><text x="74.0058%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (160 samples, 0.23%)</title><rect x="73.6706%" y="261" width="0.2271%" height="15" fill="rgb(205,140,8)" fg:x="51912" fg:w="160"/><text x="73.9206%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="73.8835%" y="245" width="0.0142%" height="15" fill="rgb(228,84,46)" fg:x="52062" fg:w="10"/><text x="74.1335%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="73.8977%" y="261" width="0.0114%" height="15" fill="rgb(254,188,9)" fg:x="52072" fg:w="8"/><text x="74.1477%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (111 samples, 0.16%)</title><rect x="74.1318%" y="245" width="0.1575%" height="15" fill="rgb(206,112,54)" fg:x="52237" fg:w="111"/><text x="74.3818%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (317 samples, 0.45%)</title><rect x="73.9090%" y="261" width="0.4499%" height="15" fill="rgb(216,84,49)" fg:x="52080" fg:w="317"/><text x="74.1590%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.06%)</title><rect x="74.2993%" y="245" width="0.0596%" height="15" fill="rgb(214,194,35)" fg:x="52355" fg:w="42"/><text x="74.5493%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.05%)</title><rect x="74.3064%" y="229" width="0.0525%" height="15" fill="rgb(249,28,3)" fg:x="52360" fg:w="37"/><text x="74.5564%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (59 samples, 0.08%)</title><rect x="74.3589%" y="261" width="0.0837%" height="15" fill="rgb(222,56,52)" fg:x="52397" fg:w="59"/><text x="74.6089%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (59 samples, 0.08%)</title><rect x="74.3589%" y="245" width="0.0837%" height="15" fill="rgb(245,217,50)" fg:x="52397" fg:w="59"/><text x="74.6089%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (30 samples, 0.04%)</title><rect x="74.4426%" y="261" width="0.0426%" height="15" fill="rgb(213,201,24)" fg:x="52456" fg:w="30"/><text x="74.6926%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="74.5264%" y="229" width="0.0114%" height="15" fill="rgb(248,116,28)" fg:x="52515" fg:w="8"/><text x="74.7764%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.06%)</title><rect x="74.4852%" y="261" width="0.0582%" height="15" fill="rgb(219,72,43)" fg:x="52486" fg:w="41"/><text x="74.7352%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.03%)</title><rect x="74.5108%" y="245" width="0.0326%" height="15" fill="rgb(209,138,14)" fg:x="52504" fg:w="23"/><text x="74.7608%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="74.5448%" y="261" width="0.0184%" height="15" fill="rgb(222,18,33)" fg:x="52528" fg:w="13"/><text x="74.7948%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.04%)</title><rect x="74.7577%" y="229" width="0.0412%" height="15" fill="rgb(213,199,7)" fg:x="52678" fg:w="29"/><text x="75.0077%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (167 samples, 0.24%)</title><rect x="74.5633%" y="261" width="0.2370%" height="15" fill="rgb(250,110,10)" fg:x="52541" fg:w="167"/><text x="74.8133%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (30 samples, 0.04%)</title><rect x="74.7577%" y="245" width="0.0426%" height="15" fill="rgb(248,123,6)" fg:x="52678" fg:w="30"/><text x="75.0077%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.05%)</title><rect x="74.8045%" y="261" width="0.0483%" height="15" fill="rgb(206,91,31)" fg:x="52711" fg:w="34"/><text x="75.0545%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (58 samples, 0.08%)</title><rect x="74.8684%" y="261" width="0.0823%" height="15" fill="rgb(211,154,13)" fg:x="52756" fg:w="58"/><text x="75.1184%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.05%)</title><rect x="74.9507%" y="261" width="0.0525%" height="15" fill="rgb(225,148,7)" fg:x="52814" fg:w="37"/><text x="75.2007%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="74.9918%" y="245" width="0.0114%" height="15" fill="rgb(220,160,43)" fg:x="52843" fg:w="8"/><text x="75.2418%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="74.9918%" y="229" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="52843" fg:w="8"/><text x="75.2418%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="74.9918%" y="213" width="0.0114%" height="15" fill="rgb(243,137,7)" fg:x="52843" fg:w="8"/><text x="75.2418%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="74.9918%" y="197" width="0.0114%" height="15" fill="rgb(230,79,13)" fg:x="52843" fg:w="8"/><text x="75.2418%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="74.9918%" y="181" width="0.0114%" height="15" fill="rgb(247,105,23)" fg:x="52843" fg:w="8"/><text x="75.2418%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.01%)</title><rect x="75.0287%" y="229" width="0.0142%" height="15" fill="rgb(223,179,41)" fg:x="52869" fg:w="10"/><text x="75.2787%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (19 samples, 0.03%)</title><rect x="75.0429%" y="229" width="0.0270%" height="15" fill="rgb(218,9,34)" fg:x="52879" fg:w="19"/><text x="75.2929%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (67 samples, 0.10%)</title><rect x="75.0117%" y="245" width="0.0951%" height="15" fill="rgb(222,106,8)" fg:x="52857" fg:w="67"/><text x="75.2617%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="75.0699%" y="229" width="0.0369%" height="15" fill="rgb(211,220,0)" fg:x="52898" fg:w="26"/><text x="75.3199%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="75.0883%" y="213" width="0.0184%" height="15" fill="rgb(229,52,16)" fg:x="52911" fg:w="13"/><text x="75.3383%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (79 samples, 0.11%)</title><rect x="75.0032%" y="261" width="0.1121%" height="15" fill="rgb(212,155,18)" fg:x="52851" fg:w="79"/><text x="75.2532%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="75.1153%" y="261" width="0.0184%" height="15" fill="rgb(242,21,14)" fg:x="52930" fg:w="13"/><text x="75.3653%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,480 samples, 2.10%)</title><rect x="75.1338%" y="261" width="2.1003%" height="15" fill="rgb(222,19,48)" fg:x="52943" fg:w="1480"/><text x="75.3838%" y="271.50">r..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="77.3150%" y="197" width="0.0128%" height="15" fill="rgb(232,45,27)" fg:x="54480" fg:w="9"/><text x="77.5650%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.02%)</title><rect x="77.3448%" y="181" width="0.0213%" height="15" fill="rgb(249,103,42)" fg:x="54501" fg:w="15"/><text x="77.5948%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.03%)</title><rect x="77.3717%" y="165" width="0.0341%" height="15" fill="rgb(246,81,33)" fg:x="54520" fg:w="24"/><text x="77.6217%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="77.3874%" y="149" width="0.0184%" height="15" fill="rgb(252,33,42)" fg:x="54531" fg:w="13"/><text x="77.6374%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.04%)</title><rect x="77.3661%" y="181" width="0.0426%" height="15" fill="rgb(209,212,41)" fg:x="54516" fg:w="30"/><text x="77.6161%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (62 samples, 0.09%)</title><rect x="77.3278%" y="197" width="0.0880%" height="15" fill="rgb(207,154,6)" fg:x="54489" fg:w="62"/><text x="77.5778%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (82 samples, 0.12%)</title><rect x="77.3022%" y="213" width="0.1164%" height="15" fill="rgb(223,64,47)" fg:x="54471" fg:w="82"/><text x="77.5522%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.02%)</title><rect x="77.4186%" y="213" width="0.0213%" height="15" fill="rgb(211,161,38)" fg:x="54553" fg:w="15"/><text x="77.6686%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (132 samples, 0.19%)</title><rect x="77.2582%" y="261" width="0.1873%" height="15" fill="rgb(219,138,40)" fg:x="54440" fg:w="132"/><text x="77.5082%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (121 samples, 0.17%)</title><rect x="77.2738%" y="245" width="0.1717%" height="15" fill="rgb(241,228,46)" fg:x="54451" fg:w="121"/><text x="77.5238%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (115 samples, 0.16%)</title><rect x="77.2823%" y="229" width="0.1632%" height="15" fill="rgb(223,209,38)" fg:x="54457" fg:w="115"/><text x="77.5323%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,217 samples, 1.73%)</title><rect x="77.4498%" y="261" width="1.7271%" height="15" fill="rgb(236,164,45)" fg:x="54575" fg:w="1217"/><text x="77.6998%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (184 samples, 0.26%)</title><rect x="79.1769%" y="261" width="0.2611%" height="15" fill="rgb(231,15,5)" fg:x="55792" fg:w="184"/><text x="79.4269%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (57 samples, 0.08%)</title><rect x="79.4380%" y="261" width="0.0809%" height="15" fill="rgb(252,35,15)" fg:x="55976" fg:w="57"/><text x="79.6880%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="79.5345%" y="229" width="0.0128%" height="15" fill="rgb(248,181,18)" fg:x="56044" fg:w="9"/><text x="79.7845%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="79.5274%" y="245" width="0.0213%" height="15" fill="rgb(233,39,42)" fg:x="56039" fg:w="15"/><text x="79.7774%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.06%)</title><rect x="79.5189%" y="261" width="0.0582%" height="15" fill="rgb(238,110,33)" fg:x="56033" fg:w="41"/><text x="79.7689%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (13 samples, 0.02%)</title><rect x="79.5586%" y="245" width="0.0184%" height="15" fill="rgb(233,195,10)" fg:x="56061" fg:w="13"/><text x="79.8086%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="79.6566%" y="229" width="0.0128%" height="15" fill="rgb(254,105,3)" fg:x="56130" fg:w="9"/><text x="79.9066%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="80.1405%" y="197" width="0.0227%" height="15" fill="rgb(221,225,9)" fg:x="56471" fg:w="16"/><text x="80.3905%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (118 samples, 0.17%)</title><rect x="80.0199%" y="213" width="0.1675%" height="15" fill="rgb(224,227,45)" fg:x="56386" fg:w="118"/><text x="80.2699%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.02%)</title><rect x="80.1632%" y="197" width="0.0241%" height="15" fill="rgb(229,198,43)" fg:x="56487" fg:w="17"/><text x="80.4132%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (368 samples, 0.52%)</title><rect x="79.6693%" y="229" width="0.5222%" height="15" fill="rgb(206,209,35)" fg:x="56139" fg:w="368"/><text x="79.9193%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (18 samples, 0.03%)</title><rect x="80.3094%" y="181" width="0.0255%" height="15" fill="rgb(245,195,53)" fg:x="56590" fg:w="18"/><text x="80.5594%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (66 samples, 0.09%)</title><rect x="80.2540%" y="213" width="0.0937%" height="15" fill="rgb(240,92,26)" fg:x="56551" fg:w="66"/><text x="80.5040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (42 samples, 0.06%)</title><rect x="80.2881%" y="197" width="0.0596%" height="15" fill="rgb(207,40,23)" fg:x="56575" fg:w="42"/><text x="80.5381%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (21 samples, 0.03%)</title><rect x="80.3860%" y="197" width="0.0298%" height="15" fill="rgb(223,111,35)" fg:x="56644" fg:w="21"/><text x="80.6360%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (210 samples, 0.30%)</title><rect x="80.1958%" y="229" width="0.2980%" height="15" fill="rgb(229,147,28)" fg:x="56510" fg:w="210"/><text x="80.4458%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.14%)</title><rect x="80.3505%" y="213" width="0.1433%" height="15" fill="rgb(211,29,28)" fg:x="56619" fg:w="101"/><text x="80.6005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (55 samples, 0.08%)</title><rect x="80.4158%" y="197" width="0.0781%" height="15" fill="rgb(228,72,33)" fg:x="56665" fg:w="55"/><text x="80.6658%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="80.4783%" y="181" width="0.0156%" height="15" fill="rgb(205,214,31)" fg:x="56709" fg:w="11"/><text x="80.7283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (628 samples, 0.89%)</title><rect x="79.6069%" y="245" width="0.8912%" height="15" fill="rgb(224,111,15)" fg:x="56095" fg:w="628"/><text x="79.8569%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="80.4981%" y="245" width="0.0114%" height="15" fill="rgb(253,21,26)" fg:x="56723" fg:w="8"/><text x="80.7481%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="80.5095%" y="245" width="0.0114%" height="15" fill="rgb(245,139,43)" fg:x="56731" fg:w="8"/><text x="80.7595%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (667 samples, 0.95%)</title><rect x="79.5771%" y="261" width="0.9466%" height="15" fill="rgb(252,170,7)" fg:x="56074" fg:w="667"/><text x="79.8271%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (39 samples, 0.06%)</title><rect x="80.5237%" y="261" width="0.0553%" height="15" fill="rgb(231,118,14)" fg:x="56741" fg:w="39"/><text x="80.7737%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,852 samples, 11.14%)</title><rect x="69.4699%" y="277" width="11.1431%" height="15" fill="rgb(238,83,0)" fg:x="48952" fg:w="7852"/><text x="69.7199%" y="287.50">rust_qecp`rust_q..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (24 samples, 0.03%)</title><rect x="80.5790%" y="261" width="0.0341%" height="15" fill="rgb(221,39,39)" fg:x="56780" fg:w="24"/><text x="80.8290%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,837 samples, 62.21%)</title><rect x="18.4063%" y="293" width="62.2110%" height="15" fill="rgb(222,119,46)" fg:x="12970" fg:w="43837"/><text x="18.6563%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (46,181 samples, 65.54%)</title><rect x="15.0812%" y="309" width="65.5375%" height="15" fill="rgb(222,165,49)" fg:x="10627" fg:w="46181"/><text x="15.3312%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="84.0971%" y="293" width="0.0298%" height="15" fill="rgb(219,113,52)" fg:x="59259" fg:w="21"/><text x="84.3471%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (15 samples, 0.02%)</title><rect x="84.2489%" y="261" width="0.0213%" height="15" fill="rgb(214,7,15)" fg:x="59366" fg:w="15"/><text x="84.4989%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (34 samples, 0.05%)</title><rect x="84.3199%" y="245" width="0.0483%" height="15" fill="rgb(235,32,4)" fg:x="59416" fg:w="34"/><text x="84.5699%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (184 samples, 0.26%)</title><rect x="84.1325%" y="293" width="0.2611%" height="15" fill="rgb(238,90,54)" fg:x="59284" fg:w="184"/><text x="84.3825%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (113 samples, 0.16%)</title><rect x="84.2333%" y="277" width="0.1604%" height="15" fill="rgb(213,208,19)" fg:x="59355" fg:w="113"/><text x="84.4833%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (87 samples, 0.12%)</title><rect x="84.2702%" y="261" width="0.1235%" height="15" fill="rgb(233,156,4)" fg:x="59381" fg:w="87"/><text x="84.5202%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (18 samples, 0.03%)</title><rect x="84.3681%" y="245" width="0.0255%" height="15" fill="rgb(207,194,5)" fg:x="59450" fg:w="18"/><text x="84.6181%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.02%)</title><rect x="84.4462%" y="277" width="0.0213%" height="15" fill="rgb(206,111,30)" fg:x="59505" fg:w="15"/><text x="84.6962%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="84.4462%" y="261" width="0.0213%" height="15" fill="rgb(243,70,54)" fg:x="59505" fg:w="15"/><text x="84.6962%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.02%)</title><rect x="84.4675%" y="277" width="0.0156%" height="15" fill="rgb(242,28,8)" fg:x="59520" fg:w="11"/><text x="84.7175%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.02%)</title><rect x="84.7541%" y="213" width="0.0227%" height="15" fill="rgb(219,106,18)" fg:x="59722" fg:w="16"/><text x="85.0041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (95 samples, 0.13%)</title><rect x="84.6647%" y="229" width="0.1348%" height="15" fill="rgb(244,222,10)" fg:x="59659" fg:w="95"/><text x="84.9147%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.02%)</title><rect x="84.7768%" y="213" width="0.0227%" height="15" fill="rgb(236,179,52)" fg:x="59738" fg:w="16"/><text x="85.0268%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (106 samples, 0.15%)</title><rect x="84.6534%" y="245" width="0.1504%" height="15" fill="rgb(213,23,39)" fg:x="59651" fg:w="106"/><text x="84.9034%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (141 samples, 0.20%)</title><rect x="84.6165%" y="261" width="0.2001%" height="15" fill="rgb(238,48,10)" fg:x="59625" fg:w="141"/><text x="84.8665%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="84.8038%" y="245" width="0.0128%" height="15" fill="rgb(251,196,23)" fg:x="59757" fg:w="9"/><text x="85.0538%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (305 samples, 0.43%)</title><rect x="84.3937%" y="293" width="0.4328%" height="15" fill="rgb(250,152,24)" fg:x="59468" fg:w="305"/><text x="84.6437%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (237 samples, 0.34%)</title><rect x="84.4902%" y="277" width="0.3363%" height="15" fill="rgb(209,150,17)" fg:x="59536" fg:w="237"/><text x="84.7402%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,967 samples, 4.21%)</title><rect x="80.6187%" y="309" width="4.2106%" height="15" fill="rgb(234,202,34)" fg:x="56808" fg:w="2967"/><text x="80.8687%" y="319.50">rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (204 samples, 0.29%)</title><rect x="84.8293%" y="309" width="0.2895%" height="15" fill="rgb(253,148,53)" fg:x="59775" fg:w="204"/><text x="85.0793%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (44 samples, 0.06%)</title><rect x="85.0564%" y="293" width="0.0624%" height="15" fill="rgb(218,129,16)" fg:x="59935" fg:w="44"/><text x="85.3064%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (6,260 samples, 8.88%)</title><rect x="85.1189%" y="309" width="8.8838%" height="15" fill="rgb(216,85,19)" fg:x="59979" fg:w="6260"/><text x="85.3689%" y="319.50">rust_qecp`rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="93.9899%" y="293" width="0.0128%" height="15" fill="rgb(235,228,7)" fg:x="66230" fg:w="9"/><text x="94.2399%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="93.9899%" y="277" width="0.0128%" height="15" fill="rgb(245,175,0)" fg:x="66230" fg:w="9"/><text x="94.2399%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.01%)</title><rect x="93.9913%" y="261" width="0.0114%" height="15" fill="rgb(208,168,36)" fg:x="66231" fg:w="8"/><text x="94.2413%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (75 samples, 0.11%)</title><rect x="94.0027%" y="293" width="0.1064%" height="15" fill="rgb(246,171,24)" fg:x="66239" fg:w="75"/><text x="94.2527%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (329 samples, 0.47%)</title><rect x="94.0027%" y="309" width="0.4669%" height="15" fill="rgb(215,142,24)" fg:x="66239" fg:w="329"/><text x="94.2527%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (254 samples, 0.36%)</title><rect x="94.1091%" y="293" width="0.3605%" height="15" fill="rgb(250,187,7)" fg:x="66314" fg:w="254"/><text x="94.3591%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (85 samples, 0.12%)</title><rect x="94.4696%" y="309" width="0.1206%" height="15" fill="rgb(228,66,33)" fg:x="66568" fg:w="85"/><text x="94.7196%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,794 samples, 5.38%)</title><rect x="94.5931%" y="309" width="5.3842%" height="15" fill="rgb(234,215,21)" fg:x="66655" fg:w="3794"/><text x="94.8431%" y="319.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,741 samples, 3.89%)</title><rect x="96.0874%" y="293" width="3.8899%" height="15" fill="rgb(222,191,20)" fg:x="67708" fg:w="2741"/><text x="96.3374%" y="303.50">rust..</text></g><g><title>all (70,465 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(245,79,54)" fg:x="0" fg:w="70465"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,222 samples, 85.46%)</title><rect x="14.5363%" y="389" width="85.4637%" height="15" fill="rgb(240,10,37)" fg:x="10243" fg:w="60222"/><text x="14.7863%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,222 samples, 85.46%)</title><rect x="14.5363%" y="373" width="85.4637%" height="15" fill="rgb(214,192,32)" fg:x="10243" fg:w="60222"/><text x="14.7863%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,222 samples, 85.46%)</title><rect x="14.5363%" y="357" width="85.4637%" height="15" fill="rgb(209,36,54)" fg:x="10243" fg:w="60222"/><text x="14.7863%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,222 samples, 85.46%)</title><rect x="14.5363%" y="341" width="85.4637%" height="15" fill="rgb(220,10,11)" fg:x="10243" fg:w="60222"/><text x="14.7863%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,222 samples, 85.46%)</title><rect x="14.5363%" y="325" width="85.4637%" height="15" fill="rgb(221,106,17)" fg:x="10243" fg:w="60222"/><text x="14.7863%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16 samples, 0.02%)</title><rect x="99.9773%" y="309" width="0.0227%" height="15" fill="rgb(251,142,44)" fg:x="70449" fg:w="16"/><text x="100.2273%" y="319.50"></text></g></svg></svg>