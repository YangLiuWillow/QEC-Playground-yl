<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="60376"><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (14 samples, 0.02%)</title><rect x="0.0133%" y="85" width="0.0232%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="14"/><text x="0.2633%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0364%" y="85" width="0.0282%" height="15" fill="rgb(217,0,24)" fg:x="22" fg:w="17"/><text x="0.2864%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (13 samples, 0.02%)</title><rect x="0.0431%" y="69" width="0.0215%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="13"/><text x="0.2931%" y="79.50"></text></g><g><title>libsystem_c.dylib`nanosleep (9 samples, 0.01%)</title><rect x="0.0679%" y="69" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="41" fg:w="9"/><text x="0.3179%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`clock_get_time (9 samples, 0.01%)</title><rect x="0.0679%" y="53" width="0.0149%" height="15" fill="rgb(208,68,35)" fg:x="41" fg:w="9"/><text x="0.3179%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (9 samples, 0.01%)</title><rect x="0.0679%" y="37" width="0.0149%" height="15" fill="rgb(232,128,0)" fg:x="41" fg:w="9"/><text x="0.3179%" y="47.50"></text></g><g><title>dyld`start (55 samples, 0.09%)</title><rect x="0.0000%" y="325" width="0.0911%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="55"/><text x="0.2500%" y="335.50"></text></g><g><title>rust_qecp`main (55 samples, 0.09%)</title><rect x="0.0000%" y="309" width="0.0911%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="55"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (55 samples, 0.09%)</title><rect x="0.0000%" y="293" width="0.0911%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="55"/><text x="0.2500%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (55 samples, 0.09%)</title><rect x="0.0000%" y="277" width="0.0911%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="55"/><text x="0.2500%" y="287.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (55 samples, 0.09%)</title><rect x="0.0000%" y="261" width="0.0911%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="55"/><text x="0.2500%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::main (55 samples, 0.09%)</title><rect x="0.0000%" y="245" width="0.0911%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="55"/><text x="0.2500%" y="255.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (55 samples, 0.09%)</title><rect x="0.0000%" y="229" width="0.0911%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="55"/><text x="0.2500%" y="239.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (55 samples, 0.09%)</title><rect x="0.0000%" y="213" width="0.0911%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="55"/><text x="0.2500%" y="223.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (55 samples, 0.09%)</title><rect x="0.0000%" y="197" width="0.0911%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="55"/><text x="0.2500%" y="207.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (55 samples, 0.09%)</title><rect x="0.0000%" y="181" width="0.0911%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="55"/><text x="0.2500%" y="191.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (55 samples, 0.09%)</title><rect x="0.0000%" y="165" width="0.0911%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="55"/><text x="0.2500%" y="175.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (55 samples, 0.09%)</title><rect x="0.0000%" y="149" width="0.0911%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="55"/><text x="0.2500%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (55 samples, 0.09%)</title><rect x="0.0000%" y="133" width="0.0911%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="55"/><text x="0.2500%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (54 samples, 0.09%)</title><rect x="0.0017%" y="117" width="0.0894%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="54"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (54 samples, 0.09%)</title><rect x="0.0017%" y="101" width="0.0894%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="54"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`std::thread::sleep (14 samples, 0.02%)</title><rect x="0.0679%" y="85" width="0.0232%" height="15" fill="rgb(235,183,28)" fg:x="41" fg:w="14"/><text x="0.3179%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (37 samples, 0.06%)</title><rect x="0.1524%" y="245" width="0.0613%" height="15" fill="rgb(221,5,38)" fg:x="92" fg:w="37"/><text x="0.4024%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="0.2219%" y="245" width="0.0563%" height="15" fill="rgb(247,18,42)" fg:x="134" fg:w="34"/><text x="0.4719%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="0.2567%" y="229" width="0.0215%" height="15" fill="rgb(241,131,45)" fg:x="155" fg:w="13"/><text x="0.5067%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.02%)</title><rect x="0.2617%" y="213" width="0.0166%" height="15" fill="rgb(249,31,29)" fg:x="158" fg:w="10"/><text x="0.5117%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.06%)</title><rect x="0.2783%" y="245" width="0.0613%" height="15" fill="rgb(225,111,53)" fg:x="168" fg:w="37"/><text x="0.5283%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.05%)</title><rect x="0.2899%" y="229" width="0.0497%" height="15" fill="rgb(238,160,17)" fg:x="175" fg:w="30"/><text x="0.5399%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="0.3180%" y="213" width="0.0215%" height="15" fill="rgb(214,148,48)" fg:x="192" fg:w="13"/><text x="0.5680%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="0.3395%" y="245" width="0.0116%" height="15" fill="rgb(232,36,49)" fg:x="205" fg:w="7"/><text x="0.5895%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="0.3511%" y="245" width="0.0133%" height="15" fill="rgb(209,103,24)" fg:x="212" fg:w="8"/><text x="0.6011%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.02%)</title><rect x="0.3776%" y="245" width="0.0166%" height="15" fill="rgb(229,88,8)" fg:x="228" fg:w="10"/><text x="0.6276%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (26 samples, 0.04%)</title><rect x="0.4455%" y="213" width="0.0431%" height="15" fill="rgb(213,181,19)" fg:x="269" fg:w="26"/><text x="0.6955%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.07%)</title><rect x="0.4207%" y="229" width="0.0745%" height="15" fill="rgb(254,191,54)" fg:x="254" fg:w="45"/><text x="0.6707%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.01%)</title><rect x="0.5052%" y="197" width="0.0133%" height="15" fill="rgb(241,83,37)" fg:x="305" fg:w="8"/><text x="0.7552%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="0.4952%" y="229" width="0.0282%" height="15" fill="rgb(233,36,39)" fg:x="299" fg:w="17"/><text x="0.7452%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="0.4985%" y="213" width="0.0248%" height="15" fill="rgb(226,3,54)" fg:x="301" fg:w="15"/><text x="0.7485%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="0.5267%" y="229" width="0.0116%" height="15" fill="rgb(245,192,40)" fg:x="318" fg:w="7"/><text x="0.7767%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (106 samples, 0.18%)</title><rect x="0.3975%" y="245" width="0.1756%" height="15" fill="rgb(238,167,29)" fg:x="240" fg:w="106"/><text x="0.6475%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (16 samples, 0.03%)</title><rect x="0.5466%" y="229" width="0.0265%" height="15" fill="rgb(232,182,51)" fg:x="330" fg:w="16"/><text x="0.7966%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (75 samples, 0.12%)</title><rect x="0.5996%" y="229" width="0.1242%" height="15" fill="rgb(231,60,39)" fg:x="362" fg:w="75"/><text x="0.8496%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.04%)</title><rect x="0.7337%" y="229" width="0.0398%" height="15" fill="rgb(208,69,12)" fg:x="443" fg:w="24"/><text x="0.9837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="0.7818%" y="229" width="0.0133%" height="15" fill="rgb(235,93,37)" fg:x="472" fg:w="8"/><text x="1.0318%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="0.7950%" y="229" width="0.0149%" height="15" fill="rgb(213,116,39)" fg:x="480" fg:w="9"/><text x="1.0450%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.05%)</title><rect x="0.8132%" y="229" width="0.0480%" height="15" fill="rgb(222,207,29)" fg:x="491" fg:w="29"/><text x="1.0632%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.04%)</title><rect x="0.9640%" y="165" width="0.0398%" height="15" fill="rgb(206,96,30)" fg:x="582" fg:w="24"/><text x="1.2140%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.02%)</title><rect x="0.9805%" y="149" width="0.0232%" height="15" fill="rgb(218,138,4)" fg:x="592" fg:w="14"/><text x="1.2305%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.05%)</title><rect x="0.9590%" y="181" width="0.0497%" height="15" fill="rgb(250,191,14)" fg:x="579" fg:w="30"/><text x="1.2090%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (36 samples, 0.06%)</title><rect x="0.9557%" y="197" width="0.0596%" height="15" fill="rgb(239,60,40)" fg:x="577" fg:w="36"/><text x="1.2057%" y="207.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (98 samples, 0.16%)</title><rect x="0.8613%" y="229" width="0.1623%" height="15" fill="rgb(206,27,48)" fg:x="520" fg:w="98"/><text x="1.1113%" y="239.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (46 samples, 0.08%)</title><rect x="0.9474%" y="213" width="0.0762%" height="15" fill="rgb(225,35,8)" fg:x="572" fg:w="46"/><text x="1.1974%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="1.0236%" y="229" width="0.0133%" height="15" fill="rgb(250,213,24)" fg:x="618" fg:w="8"/><text x="1.2736%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="1.0451%" y="229" width="0.0116%" height="15" fill="rgb(247,123,22)" fg:x="631" fg:w="7"/><text x="1.2951%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (59 samples, 0.10%)</title><rect x="3.9569%" y="213" width="0.0977%" height="15" fill="rgb(231,138,38)" fg:x="2389" fg:w="59"/><text x="4.2069%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (34 samples, 0.06%)</title><rect x="4.1010%" y="181" width="0.0563%" height="15" fill="rgb(231,145,46)" fg:x="2476" fg:w="34"/><text x="4.3510%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="4.1440%" y="165" width="0.0133%" height="15" fill="rgb(251,118,11)" fg:x="2502" fg:w="8"/><text x="4.3940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (65 samples, 0.11%)</title><rect x="4.0546%" y="213" width="0.1077%" height="15" fill="rgb(217,147,25)" fg:x="2448" fg:w="65"/><text x="4.3046%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.07%)</title><rect x="4.0894%" y="197" width="0.0729%" height="15" fill="rgb(247,81,37)" fg:x="2469" fg:w="44"/><text x="4.3394%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="4.1622%" y="213" width="0.0116%" height="15" fill="rgb(209,12,38)" fg:x="2513" fg:w="7"/><text x="4.4122%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="4.2119%" y="197" width="0.0282%" height="15" fill="rgb(227,1,9)" fg:x="2543" fg:w="17"/><text x="4.4619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.07%)</title><rect x="4.1738%" y="213" width="0.0679%" height="15" fill="rgb(248,47,43)" fg:x="2520" fg:w="41"/><text x="4.4238%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.03%)</title><rect x="4.2418%" y="213" width="0.0265%" height="15" fill="rgb(221,10,30)" fg:x="2561" fg:w="16"/><text x="4.4918%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="4.2467%" y="197" width="0.0215%" height="15" fill="rgb(210,229,1)" fg:x="2564" fg:w="13"/><text x="4.4967%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="4.2716%" y="213" width="0.0282%" height="15" fill="rgb(222,148,37)" fg:x="2579" fg:w="17"/><text x="4.5216%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="4.2997%" y="213" width="0.0133%" height="15" fill="rgb(234,67,33)" fg:x="2596" fg:w="8"/><text x="4.5497%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.02%)</title><rect x="4.3130%" y="213" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="2604" fg:w="11"/><text x="4.5630%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="4.3312%" y="213" width="0.0215%" height="15" fill="rgb(247,138,52)" fg:x="2615" fg:w="13"/><text x="4.5812%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="4.3941%" y="181" width="0.0215%" height="15" fill="rgb(213,79,30)" fg:x="2653" fg:w="13"/><text x="4.6441%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="4.3974%" y="165" width="0.0182%" height="15" fill="rgb(246,177,23)" fg:x="2655" fg:w="11"/><text x="4.6474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="4.4041%" y="149" width="0.0116%" height="15" fill="rgb(230,62,27)" fg:x="2659" fg:w="7"/><text x="4.6541%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="4.3941%" y="197" width="0.0232%" height="15" fill="rgb(216,154,8)" fg:x="2653" fg:w="14"/><text x="4.6441%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.03%)</title><rect x="4.4190%" y="197" width="0.0282%" height="15" fill="rgb(244,35,45)" fg:x="2668" fg:w="17"/><text x="4.6690%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (70 samples, 0.12%)</title><rect x="4.3709%" y="213" width="0.1159%" height="15" fill="rgb(251,115,12)" fg:x="2639" fg:w="70"/><text x="4.6209%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (20 samples, 0.03%)</title><rect x="4.4538%" y="197" width="0.0331%" height="15" fill="rgb(240,54,50)" fg:x="2689" fg:w="20"/><text x="4.7038%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.01%)</title><rect x="4.4869%" y="213" width="0.0149%" height="15" fill="rgb(233,84,52)" fg:x="2709" fg:w="9"/><text x="4.7369%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="4.5117%" y="149" width="0.0149%" height="15" fill="rgb(207,117,47)" fg:x="2724" fg:w="9"/><text x="4.7617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="4.5068%" y="181" width="0.0215%" height="15" fill="rgb(249,43,39)" fg:x="2721" fg:w="13"/><text x="4.7568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="4.5117%" y="165" width="0.0166%" height="15" fill="rgb(209,38,44)" fg:x="2724" fg:w="10"/><text x="4.7617%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="4.5018%" y="213" width="0.0315%" height="15" fill="rgb(236,212,23)" fg:x="2718" fg:w="19"/><text x="4.7518%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (16 samples, 0.03%)</title><rect x="4.5068%" y="197" width="0.0265%" height="15" fill="rgb(242,79,21)" fg:x="2721" fg:w="16"/><text x="4.7568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="4.5912%" y="149" width="0.0265%" height="15" fill="rgb(211,96,35)" fg:x="2772" fg:w="16"/><text x="4.8412%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="4.5813%" y="181" width="0.0381%" height="15" fill="rgb(253,215,40)" fg:x="2766" fg:w="23"/><text x="4.8313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="4.5879%" y="165" width="0.0315%" height="15" fill="rgb(211,81,21)" fg:x="2770" fg:w="19"/><text x="4.8379%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="4.7121%" y="133" width="0.0133%" height="15" fill="rgb(208,190,38)" fg:x="2845" fg:w="8"/><text x="4.9621%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="4.7254%" y="133" width="0.0232%" height="15" fill="rgb(235,213,38)" fg:x="2853" fg:w="14"/><text x="4.9754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="4.7320%" y="117" width="0.0166%" height="15" fill="rgb(237,122,38)" fg:x="2857" fg:w="10"/><text x="4.9820%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="4.7486%" y="133" width="0.0166%" height="15" fill="rgb(244,218,35)" fg:x="2867" fg:w="10"/><text x="4.9986%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.05%)</title><rect x="4.7651%" y="133" width="0.0497%" height="15" fill="rgb(240,68,47)" fg:x="2877" fg:w="30"/><text x="5.0151%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 0.04%)</title><rect x="4.7701%" y="117" width="0.0447%" height="15" fill="rgb(210,16,53)" fg:x="2880" fg:w="27"/><text x="5.0201%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.02%)</title><rect x="4.7900%" y="101" width="0.0248%" height="15" fill="rgb(235,124,12)" fg:x="2892" fg:w="15"/><text x="5.0400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="4.8032%" y="85" width="0.0116%" height="15" fill="rgb(224,169,11)" fg:x="2900" fg:w="7"/><text x="5.0532%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (81 samples, 0.13%)</title><rect x="4.6823%" y="149" width="0.1342%" height="15" fill="rgb(250,166,2)" fg:x="2827" fg:w="81"/><text x="4.9323%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="4.8480%" y="133" width="0.0166%" height="15" fill="rgb(242,216,29)" fg:x="2927" fg:w="10"/><text x="5.0980%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="4.8513%" y="117" width="0.0133%" height="15" fill="rgb(230,116,27)" fg:x="2929" fg:w="8"/><text x="5.1013%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="4.8844%" y="133" width="0.0381%" height="15" fill="rgb(228,99,48)" fg:x="2949" fg:w="23"/><text x="5.1344%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.03%)</title><rect x="4.8894%" y="117" width="0.0331%" height="15" fill="rgb(253,11,6)" fg:x="2952" fg:w="20"/><text x="5.1394%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="4.9026%" y="101" width="0.0199%" height="15" fill="rgb(247,143,39)" fg:x="2960" fg:w="12"/><text x="5.1526%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="4.9225%" y="133" width="0.0133%" height="15" fill="rgb(236,97,10)" fg:x="2972" fg:w="8"/><text x="5.1725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="4.9241%" y="117" width="0.0116%" height="15" fill="rgb(233,208,19)" fg:x="2973" fg:w="7"/><text x="5.1741%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (79 samples, 0.13%)</title><rect x="4.8281%" y="149" width="0.1308%" height="15" fill="rgb(216,164,2)" fg:x="2915" fg:w="79"/><text x="5.0781%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (14 samples, 0.02%)</title><rect x="4.9357%" y="133" width="0.0232%" height="15" fill="rgb(220,129,5)" fg:x="2980" fg:w="14"/><text x="5.1857%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (195 samples, 0.32%)</title><rect x="4.6509%" y="165" width="0.3230%" height="15" fill="rgb(242,17,10)" fg:x="2808" fg:w="195"/><text x="4.9009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="4.9738%" y="165" width="0.0331%" height="15" fill="rgb(242,107,0)" fg:x="3003" fg:w="20"/><text x="5.2238%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (248 samples, 0.41%)</title><rect x="4.6310%" y="181" width="0.4108%" height="15" fill="rgb(251,28,31)" fg:x="2796" fg:w="248"/><text x="4.8810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="5.0152%" y="165" width="0.0265%" height="15" fill="rgb(233,223,10)" fg:x="3028" fg:w="16"/><text x="5.2652%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="5.0169%" y="149" width="0.0248%" height="15" fill="rgb(215,21,27)" fg:x="3029" fg:w="15"/><text x="5.2669%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (308 samples, 0.51%)</title><rect x="4.5333%" y="213" width="0.5101%" height="15" fill="rgb(232,23,21)" fg:x="2737" fg:w="308"/><text x="4.7833%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (285 samples, 0.47%)</title><rect x="4.5714%" y="197" width="0.4720%" height="15" fill="rgb(244,5,23)" fg:x="2760" fg:w="285"/><text x="4.8214%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="5.3978%" y="181" width="0.0331%" height="15" fill="rgb(226,81,46)" fg:x="3259" fg:w="20"/><text x="5.6478%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="5.4045%" y="165" width="0.0265%" height="15" fill="rgb(247,70,30)" fg:x="3263" fg:w="16"/><text x="5.6545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="5.4177%" y="149" width="0.0133%" height="15" fill="rgb(212,68,19)" fg:x="3271" fg:w="8"/><text x="5.6677%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="5.4310%" y="165" width="0.0116%" height="15" fill="rgb(240,187,13)" fg:x="3279" fg:w="7"/><text x="5.6810%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="5.4310%" y="181" width="0.0199%" height="15" fill="rgb(223,113,26)" fg:x="3279" fg:w="12"/><text x="5.6810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.06%)</title><rect x="5.3896%" y="197" width="0.0629%" height="15" fill="rgb(206,192,2)" fg:x="3254" fg:w="38"/><text x="5.6396%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="5.4856%" y="181" width="0.0133%" height="15" fill="rgb(241,108,4)" fg:x="3312" fg:w="8"/><text x="5.7356%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.06%)</title><rect x="5.4542%" y="197" width="0.0596%" height="15" fill="rgb(247,173,49)" fg:x="3293" fg:w="36"/><text x="5.7042%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="5.4989%" y="181" width="0.0149%" height="15" fill="rgb(224,114,35)" fg:x="3320" fg:w="9"/><text x="5.7489%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="5.5022%" y="165" width="0.0116%" height="15" fill="rgb(245,159,27)" fg:x="3322" fg:w="7"/><text x="5.7522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (20 samples, 0.03%)</title><rect x="5.5138%" y="197" width="0.0331%" height="15" fill="rgb(245,172,44)" fg:x="3329" fg:w="20"/><text x="5.7638%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="5.5320%" y="181" width="0.0149%" height="15" fill="rgb(236,23,11)" fg:x="3340" fg:w="9"/><text x="5.7820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="5.5469%" y="197" width="0.0166%" height="15" fill="rgb(205,117,38)" fg:x="3349" fg:w="10"/><text x="5.7969%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="5.5668%" y="197" width="0.0166%" height="15" fill="rgb(237,72,25)" fg:x="3361" fg:w="10"/><text x="5.8168%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (75 samples, 0.12%)</title><rect x="5.6115%" y="197" width="0.1242%" height="15" fill="rgb(244,70,9)" fg:x="3388" fg:w="75"/><text x="5.8615%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="5.7987%" y="165" width="0.0166%" height="15" fill="rgb(217,125,39)" fg:x="3501" fg:w="10"/><text x="6.0487%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (13 samples, 0.02%)</title><rect x="5.7970%" y="181" width="0.0215%" height="15" fill="rgb(235,36,10)" fg:x="3500" fg:w="13"/><text x="6.0470%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (262 samples, 0.43%)</title><rect x="5.8185%" y="181" width="0.4339%" height="15" fill="rgb(251,123,47)" fg:x="3513" fg:w="262"/><text x="6.0685%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.03%)</title><rect x="6.2707%" y="181" width="0.0265%" height="15" fill="rgb(221,13,13)" fg:x="3786" fg:w="16"/><text x="6.5207%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (259 samples, 0.43%)</title><rect x="6.3022%" y="181" width="0.4290%" height="15" fill="rgb(238,131,9)" fg:x="3805" fg:w="259"/><text x="6.5522%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (18 samples, 0.03%)</title><rect x="6.7312%" y="181" width="0.0298%" height="15" fill="rgb(211,50,8)" fg:x="4064" fg:w="18"/><text x="6.9812%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (10 samples, 0.02%)</title><rect x="6.7610%" y="181" width="0.0166%" height="15" fill="rgb(245,182,24)" fg:x="4082" fg:w="10"/><text x="7.0110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="6.7858%" y="149" width="0.0282%" height="15" fill="rgb(242,14,37)" fg:x="4097" fg:w="17"/><text x="7.0358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="6.7924%" y="133" width="0.0215%" height="15" fill="rgb(246,228,12)" fg:x="4101" fg:w="13"/><text x="7.0424%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="6.7974%" y="117" width="0.0166%" height="15" fill="rgb(213,55,15)" fg:x="4104" fg:w="10"/><text x="7.0474%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (21 samples, 0.03%)</title><rect x="6.7858%" y="165" width="0.0348%" height="15" fill="rgb(209,9,3)" fg:x="4097" fg:w="21"/><text x="7.0358%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.02%)</title><rect x="6.8670%" y="101" width="0.0199%" height="15" fill="rgb(230,59,30)" fg:x="4146" fg:w="12"/><text x="7.1170%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (39 samples, 0.06%)</title><rect x="6.8322%" y="133" width="0.0646%" height="15" fill="rgb(209,121,21)" fg:x="4125" fg:w="39"/><text x="7.0822%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (28 samples, 0.05%)</title><rect x="6.8504%" y="117" width="0.0464%" height="15" fill="rgb(220,109,13)" fg:x="4136" fg:w="28"/><text x="7.1004%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.09%)</title><rect x="6.8206%" y="165" width="0.0928%" height="15" fill="rgb(232,18,1)" fg:x="4118" fg:w="56"/><text x="7.0706%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.08%)</title><rect x="6.8322%" y="149" width="0.0812%" height="15" fill="rgb(215,41,42)" fg:x="4125" fg:w="49"/><text x="7.0822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="6.8968%" y="133" width="0.0166%" height="15" fill="rgb(224,123,36)" fg:x="4164" fg:w="10"/><text x="7.1468%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="6.8984%" y="117" width="0.0149%" height="15" fill="rgb(240,125,3)" fg:x="4165" fg:w="9"/><text x="7.1484%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (82 samples, 0.14%)</title><rect x="6.7792%" y="181" width="0.1358%" height="15" fill="rgb(205,98,50)" fg:x="4093" fg:w="82"/><text x="7.0292%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (13 samples, 0.02%)</title><rect x="6.9150%" y="181" width="0.0215%" height="15" fill="rgb(205,185,37)" fg:x="4175" fg:w="13"/><text x="7.1650%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (224 samples, 0.37%)</title><rect x="6.9763%" y="165" width="0.3710%" height="15" fill="rgb(238,207,15)" fg:x="4212" fg:w="224"/><text x="7.2263%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (23 samples, 0.04%)</title><rect x="7.3506%" y="149" width="0.0381%" height="15" fill="rgb(213,199,42)" fg:x="4438" fg:w="23"/><text x="7.6006%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (27 samples, 0.04%)</title><rect x="7.3473%" y="165" width="0.0447%" height="15" fill="rgb(235,201,11)" fg:x="4436" fg:w="27"/><text x="7.5973%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (33 samples, 0.05%)</title><rect x="7.4549%" y="149" width="0.0547%" height="15" fill="rgb(207,46,11)" fg:x="4501" fg:w="33"/><text x="7.7049%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (85 samples, 0.14%)</title><rect x="7.3953%" y="165" width="0.1408%" height="15" fill="rgb(241,35,35)" fg:x="4465" fg:w="85"/><text x="7.6453%" y="175.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (16 samples, 0.03%)</title><rect x="7.5096%" y="149" width="0.0265%" height="15" fill="rgb(243,32,47)" fg:x="4534" fg:w="16"/><text x="7.7596%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (581 samples, 0.96%)</title><rect x="7.6636%" y="149" width="0.9623%" height="15" fill="rgb(247,202,23)" fg:x="4627" fg:w="581"/><text x="7.9136%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (663 samples, 1.10%)</title><rect x="7.5361%" y="165" width="1.0981%" height="15" fill="rgb(219,102,11)" fg:x="4550" fg:w="663"/><text x="7.7861%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (61 samples, 0.10%)</title><rect x="8.6375%" y="165" width="0.1010%" height="15" fill="rgb(243,110,44)" fg:x="5215" fg:w="61"/><text x="8.8875%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (1,096 samples, 1.82%)</title><rect x="6.9365%" y="181" width="1.8153%" height="15" fill="rgb(222,74,54)" fg:x="4188" fg:w="1096"/><text x="7.1865%" y="191.50">r..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (8 samples, 0.01%)</title><rect x="8.7386%" y="165" width="0.0133%" height="15" fill="rgb(216,99,12)" fg:x="5276" fg:w="8"/><text x="8.9886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="8.7833%" y="149" width="0.0199%" height="15" fill="rgb(226,22,26)" fg:x="5303" fg:w="12"/><text x="9.0333%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.06%)</title><rect x="8.7618%" y="165" width="0.0613%" height="15" fill="rgb(217,163,10)" fg:x="5290" fg:w="37"/><text x="9.0118%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (25 samples, 0.04%)</title><rect x="8.8230%" y="165" width="0.0414%" height="15" fill="rgb(213,25,53)" fg:x="5327" fg:w="25"/><text x="9.0730%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="8.8644%" y="165" width="0.0133%" height="15" fill="rgb(252,105,26)" fg:x="5352" fg:w="8"/><text x="9.1144%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (89 samples, 0.15%)</title><rect x="8.7535%" y="181" width="0.1474%" height="15" fill="rgb(220,39,43)" fg:x="5285" fg:w="89"/><text x="9.0035%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (2,328 samples, 3.86%)</title><rect x="5.0500%" y="213" width="3.8558%" height="15" fill="rgb(229,68,48)" fg:x="3049" fg:w="2328"/><text x="5.3000%" y="223.50">rust..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (1,910 samples, 3.16%)</title><rect x="5.7423%" y="197" width="3.1635%" height="15" fill="rgb(252,8,32)" fg:x="3467" fg:w="1910"/><text x="5.9923%" y="207.50">rus..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="9.1328%" y="197" width="0.0414%" height="15" fill="rgb(223,20,43)" fg:x="5514" fg:w="25"/><text x="9.3828%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="9.1460%" y="181" width="0.0282%" height="15" fill="rgb(229,81,49)" fg:x="5522" fg:w="17"/><text x="9.3960%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="9.1510%" y="165" width="0.0232%" height="15" fill="rgb(236,28,36)" fg:x="5525" fg:w="14"/><text x="9.4010%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (165 samples, 0.27%)</title><rect x="8.9059%" y="213" width="0.2733%" height="15" fill="rgb(249,185,26)" fg:x="5377" fg:w="165"/><text x="9.1559%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (4,883 samples, 8.09%)</title><rect x="1.0931%" y="229" width="8.0877%" height="15" fill="rgb(249,174,33)" fg:x="660" fg:w="4883"/><text x="1.3431%" y="239.50">rust_qecp`r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (5,288 samples, 8.76%)</title><rect x="0.5913%" y="245" width="8.7584%" height="15" fill="rgb(233,201,37)" fg:x="357" fg:w="5288"/><text x="0.8413%" y="255.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (102 samples, 0.17%)</title><rect x="9.1808%" y="229" width="0.1689%" height="15" fill="rgb(221,78,26)" fg:x="5543" fg:w="102"/><text x="9.4308%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (7,304 samples, 12.10%)</title><rect x="9.3547%" y="245" width="12.0975%" height="15" fill="rgb(250,127,30)" fg:x="5648" fg:w="7304"/><text x="9.6047%" y="255.50">rust_qecp`rust_qec..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 0.07%)</title><rect x="22.7574%" y="181" width="0.0663%" height="15" fill="rgb(230,49,44)" fg:x="13740" fg:w="40"/><text x="23.0074%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.03%)</title><rect x="22.7889%" y="165" width="0.0348%" height="15" fill="rgb(229,67,23)" fg:x="13759" fg:w="21"/><text x="23.0389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="22.8054%" y="149" width="0.0182%" height="15" fill="rgb(249,83,47)" fg:x="13769" fg:w="11"/><text x="23.0554%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.10%)</title><rect x="22.7474%" y="197" width="0.0977%" height="15" fill="rgb(215,43,3)" fg:x="13734" fg:w="59"/><text x="22.9974%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="22.8236%" y="181" width="0.0215%" height="15" fill="rgb(238,154,13)" fg:x="13780" fg:w="13"/><text x="23.0736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (67 samples, 0.11%)</title><rect x="22.7425%" y="213" width="0.1110%" height="15" fill="rgb(219,56,2)" fg:x="13731" fg:w="67"/><text x="22.9925%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (72 samples, 0.12%)</title><rect x="22.7392%" y="229" width="0.1193%" height="15" fill="rgb(233,0,4)" fg:x="13729" fg:w="72"/><text x="22.9892%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,521 samples, 2.52%)</title><rect x="21.4522%" y="245" width="2.5192%" height="15" fill="rgb(235,30,7)" fg:x="12952" fg:w="1521"/><text x="21.7022%" y="255.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (672 samples, 1.11%)</title><rect x="22.8584%" y="229" width="1.1130%" height="15" fill="rgb(250,79,13)" fg:x="13801" fg:w="672"/><text x="23.1084%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (21,451 samples, 35.53%)</title><rect x="23.9714%" y="245" width="35.5290%" height="15" fill="rgb(211,146,34)" fg:x="14473" fg:w="21451"/><text x="24.2214%" y="255.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_rand..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="59.5104%" y="229" width="0.0116%" height="15" fill="rgb(228,22,38)" fg:x="35930" fg:w="7"/><text x="59.7604%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="59.5435%" y="197" width="0.0116%" height="15" fill="rgb(235,168,5)" fg:x="35950" fg:w="7"/><text x="59.7935%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.06%)</title><rect x="59.5220%" y="229" width="0.0563%" height="15" fill="rgb(221,155,16)" fg:x="35937" fg:w="34"/><text x="59.7720%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.05%)</title><rect x="59.5253%" y="213" width="0.0530%" height="15" fill="rgb(215,215,53)" fg:x="35939" fg:w="32"/><text x="59.7753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.02%)</title><rect x="59.5551%" y="197" width="0.0232%" height="15" fill="rgb(223,4,10)" fg:x="35957" fg:w="14"/><text x="59.8051%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (986 samples, 1.63%)</title><rect x="59.5882%" y="229" width="1.6331%" height="15" fill="rgb(234,103,6)" fg:x="35977" fg:w="986"/><text x="59.8382%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.04%)</title><rect x="62.8743%" y="165" width="0.0398%" height="15" fill="rgb(227,97,0)" fg:x="37961" fg:w="24"/><text x="63.1243%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.03%)</title><rect x="62.8876%" y="149" width="0.0265%" height="15" fill="rgb(234,150,53)" fg:x="37969" fg:w="16"/><text x="63.1376%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.05%)</title><rect x="62.8727%" y="181" width="0.0513%" height="15" fill="rgb(228,201,54)" fg:x="37960" fg:w="31"/><text x="63.1227%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (38 samples, 0.06%)</title><rect x="62.8660%" y="197" width="0.0629%" height="15" fill="rgb(222,22,37)" fg:x="37956" fg:w="38"/><text x="63.1160%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (2,075 samples, 3.44%)</title><rect x="59.5005%" y="245" width="3.4368%" height="15" fill="rgb(237,53,32)" fg:x="35924" fg:w="2075"/><text x="59.7505%" y="255.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (1,036 samples, 1.72%)</title><rect x="61.2213%" y="229" width="1.7159%" height="15" fill="rgb(233,25,53)" fg:x="36963" fg:w="1036"/><text x="61.4713%" y="239.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (53 samples, 0.09%)</title><rect x="62.8495%" y="213" width="0.0878%" height="15" fill="rgb(210,40,34)" fg:x="37946" fg:w="53"/><text x="63.0995%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (22,359 samples, 37.03%)</title><rect x="62.9406%" y="245" width="37.0329%" height="15" fill="rgb(241,220,44)" fg:x="38001" fg:w="22359"/><text x="63.1906%" y="255.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (15,547 samples, 25.75%)</title><rect x="74.2232%" y="229" width="25.7503%" height="15" fill="rgb(235,28,35)" fg:x="44813" fg:w="15547"/><text x="74.4732%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeMod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (15 samples, 0.02%)</title><rect x="99.9735%" y="245" width="0.0248%" height="15" fill="rgb(210,56,17)" fg:x="60360" fg:w="15"/><text x="100.2235%" y="255.50"></text></g><g><title>all (60,376 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="60376"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,321 samples, 99.91%)</title><rect x="0.0911%" y="325" width="99.9089%" height="15" fill="rgb(235,212,8)" fg:x="55" fg:w="60321"/><text x="0.3411%" y="335.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,321 samples, 99.91%)</title><rect x="0.0911%" y="309" width="99.9089%" height="15" fill="rgb(223,33,50)" fg:x="55" fg:w="60321"/><text x="0.3411%" y="319.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,321 samples, 99.91%)</title><rect x="0.0911%" y="293" width="99.9089%" height="15" fill="rgb(219,149,13)" fg:x="55" fg:w="60321"/><text x="0.3411%" y="303.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,321 samples, 99.91%)</title><rect x="0.0911%" y="277" width="99.9089%" height="15" fill="rgb(250,156,29)" fg:x="55" fg:w="60321"/><text x="0.3411%" y="287.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,293 samples, 99.86%)</title><rect x="0.1375%" y="261" width="99.8625%" height="15" fill="rgb(216,193,19)" fg:x="83" fg:w="60293"/><text x="0.3875%" y="271.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>