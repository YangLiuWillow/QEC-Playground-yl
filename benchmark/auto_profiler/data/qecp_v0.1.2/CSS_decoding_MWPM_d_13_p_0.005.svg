<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="68831"><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="0.0203%" y="133" width="0.0218%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="15"/><text x="0.2703%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.05%)</title><rect x="0.0102%" y="149" width="0.0450%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="31"/><text x="0.2602%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.0552%" y="149" width="0.0102%" height="15" fill="rgb(221,193,54)" fg:x="38" fg:w="7"/><text x="0.3052%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (43 samples, 0.06%)</title><rect x="0.0770%" y="53" width="0.0625%" height="15" fill="rgb(248,212,6)" fg:x="53" fg:w="43"/><text x="0.3270%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (8 samples, 0.01%)</title><rect x="0.1395%" y="53" width="0.0116%" height="15" fill="rgb(208,68,35)" fg:x="96" fg:w="8"/><text x="0.3895%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.1395%" y="37" width="0.0116%" height="15" fill="rgb(232,128,0)" fg:x="96" fg:w="8"/><text x="0.3895%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (61 samples, 0.09%)</title><rect x="0.0770%" y="69" width="0.0886%" height="15" fill="rgb(207,160,47)" fg:x="53" fg:w="61"/><text x="0.3270%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (10 samples, 0.01%)</title><rect x="0.1511%" y="53" width="0.0145%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="10"/><text x="0.4011%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.01%)</title><rect x="0.1511%" y="37" width="0.0145%" height="15" fill="rgb(218,30,26)" fg:x="104" fg:w="10"/><text x="0.4011%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (13 samples, 0.02%)</title><rect x="0.1656%" y="69" width="0.0189%" height="15" fill="rgb(220,122,19)" fg:x="114" fg:w="13"/><text x="0.4156%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.02%)</title><rect x="0.1656%" y="53" width="0.0189%" height="15" fill="rgb(250,228,42)" fg:x="114" fg:w="13"/><text x="0.4156%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.07%)</title><rect x="0.1845%" y="69" width="0.0654%" height="15" fill="rgb(240,193,28)" fg:x="127" fg:w="45"/><text x="0.4345%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (126 samples, 0.18%)</title><rect x="0.0712%" y="149" width="0.1831%" height="15" fill="rgb(216,20,37)" fg:x="49" fg:w="126"/><text x="0.3212%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (126 samples, 0.18%)</title><rect x="0.0712%" y="133" width="0.1831%" height="15" fill="rgb(206,188,39)" fg:x="49" fg:w="126"/><text x="0.3212%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.18%)</title><rect x="0.0712%" y="117" width="0.1831%" height="15" fill="rgb(217,207,13)" fg:x="49" fg:w="126"/><text x="0.3212%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.18%)</title><rect x="0.0712%" y="101" width="0.1831%" height="15" fill="rgb(231,73,38)" fg:x="49" fg:w="126"/><text x="0.3212%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (124 samples, 0.18%)</title><rect x="0.0741%" y="85" width="0.1802%" height="15" fill="rgb(225,20,46)" fg:x="51" fg:w="124"/><text x="0.3241%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="0.2659%" y="69" width="0.0102%" height="15" fill="rgb(210,31,41)" fg:x="183" fg:w="7"/><text x="0.5159%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.02%)</title><rect x="0.2659%" y="85" width="0.0174%" height="15" fill="rgb(221,200,47)" fg:x="183" fg:w="12"/><text x="0.5159%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (30 samples, 0.04%)</title><rect x="0.2542%" y="149" width="0.0436%" height="15" fill="rgb(226,26,5)" fg:x="175" fg:w="30"/><text x="0.5042%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="0.2542%" y="133" width="0.0436%" height="15" fill="rgb(249,33,26)" fg:x="175" fg:w="30"/><text x="0.5042%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="0.2542%" y="117" width="0.0436%" height="15" fill="rgb(235,183,28)" fg:x="175" fg:w="30"/><text x="0.5042%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (25 samples, 0.04%)</title><rect x="0.2615%" y="101" width="0.0363%" height="15" fill="rgb(221,5,38)" fg:x="180" fg:w="25"/><text x="0.5115%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (506 samples, 0.74%)</title><rect x="0.2978%" y="149" width="0.7351%" height="15" fill="rgb(247,18,42)" fg:x="205" fg:w="506"/><text x="0.5478%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (172 samples, 0.25%)</title><rect x="1.0330%" y="149" width="0.2499%" height="15" fill="rgb(241,131,45)" fg:x="711" fg:w="172"/><text x="1.2830%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 0.12%)</title><rect x="5.7939%" y="133" width="0.1162%" height="15" fill="rgb(249,31,29)" fg:x="3988" fg:w="80"/><text x="6.0439%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.11%)</title><rect x="5.9101%" y="133" width="0.1075%" height="15" fill="rgb(225,111,53)" fg:x="4068" fg:w="74"/><text x="6.1601%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (47 samples, 0.07%)</title><rect x="6.0176%" y="133" width="0.0683%" height="15" fill="rgb(238,160,17)" fg:x="4142" fg:w="47"/><text x="6.2676%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (482 samples, 0.70%)</title><rect x="6.0859%" y="133" width="0.7003%" height="15" fill="rgb(214,148,48)" fg:x="4189" fg:w="482"/><text x="6.3359%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.02%)</title><rect x="6.7905%" y="85" width="0.0218%" height="15" fill="rgb(232,36,49)" fg:x="4674" fg:w="15"/><text x="7.0405%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="6.7949%" y="69" width="0.0174%" height="15" fill="rgb(209,103,24)" fg:x="4677" fg:w="12"/><text x="7.0449%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.03%)</title><rect x="6.7862%" y="133" width="0.0276%" height="15" fill="rgb(229,88,8)" fg:x="4671" fg:w="19"/><text x="7.0362%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="6.7862%" y="117" width="0.0276%" height="15" fill="rgb(213,181,19)" fg:x="4671" fg:w="19"/><text x="7.0362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.02%)</title><rect x="6.7905%" y="101" width="0.0232%" height="15" fill="rgb(254,191,54)" fg:x="4674" fg:w="16"/><text x="7.0405%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (95 samples, 0.14%)</title><rect x="7.4298%" y="117" width="0.1380%" height="15" fill="rgb(241,83,37)" fg:x="5114" fg:w="95"/><text x="7.6798%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="7.6041%" y="101" width="0.0131%" height="15" fill="rgb(233,36,39)" fg:x="5234" fg:w="9"/><text x="7.8541%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (667 samples, 0.97%)</title><rect x="6.8138%" y="133" width="0.9690%" height="15" fill="rgb(226,3,54)" fg:x="4690" fg:w="667"/><text x="7.0638%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (146 samples, 0.21%)</title><rect x="7.5707%" y="117" width="0.2121%" height="15" fill="rgb(245,192,40)" fg:x="5211" fg:w="146"/><text x="7.8207%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (114 samples, 0.17%)</title><rect x="7.6172%" y="101" width="0.1656%" height="15" fill="rgb(238,167,29)" fg:x="5243" fg:w="114"/><text x="7.8672%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="7.7828%" y="133" width="0.0116%" height="15" fill="rgb(232,182,51)" fg:x="5357" fg:w="8"/><text x="8.0328%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (15 samples, 0.02%)</title><rect x="7.7945%" y="133" width="0.0218%" height="15" fill="rgb(231,60,39)" fg:x="5365" fg:w="15"/><text x="8.0445%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (165 samples, 0.24%)</title><rect x="10.4459%" y="117" width="0.2397%" height="15" fill="rgb(208,69,12)" fg:x="7190" fg:w="165"/><text x="10.6959%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (443 samples, 0.64%)</title><rect x="10.6900%" y="117" width="0.6436%" height="15" fill="rgb(235,93,37)" fg:x="7358" fg:w="443"/><text x="10.9400%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (22 samples, 0.03%)</title><rect x="11.3873%" y="101" width="0.0320%" height="15" fill="rgb(213,116,39)" fg:x="7838" fg:w="22"/><text x="11.6373%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,540 samples, 3.69%)</title><rect x="7.8162%" y="133" width="3.6902%" height="15" fill="rgb(222,207,29)" fg:x="5380" fg:w="2540"/><text x="8.0662%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (119 samples, 0.17%)</title><rect x="11.3336%" y="117" width="0.1729%" height="15" fill="rgb(206,96,30)" fg:x="7801" fg:w="119"/><text x="11.5836%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (60 samples, 0.09%)</title><rect x="11.4193%" y="101" width="0.0872%" height="15" fill="rgb(218,138,4)" fg:x="7860" fg:w="60"/><text x="11.6693%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,028 samples, 10.21%)</title><rect x="1.2974%" y="149" width="10.2105%" height="15" fill="rgb(250,191,14)" fg:x="893" fg:w="7028"/><text x="1.5474%" y="159.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 0.20%)</title><rect x="11.5370%" y="133" width="0.2019%" height="15" fill="rgb(239,60,40)" fg:x="7941" fg:w="139"/><text x="11.7870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.02%)</title><rect x="12.0600%" y="117" width="0.0232%" height="15" fill="rgb(206,27,48)" fg:x="8301" fg:w="16"/><text x="12.3100%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="12.0948%" y="117" width="0.0131%" height="15" fill="rgb(225,35,8)" fg:x="8325" fg:w="9"/><text x="12.3448%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="12.1297%" y="53" width="0.0131%" height="15" fill="rgb(250,213,24)" fg:x="8349" fg:w="9"/><text x="12.3797%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.03%)</title><rect x="12.1123%" y="85" width="0.0334%" height="15" fill="rgb(247,123,22)" fg:x="8337" fg:w="23"/><text x="12.3623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.02%)</title><rect x="12.1224%" y="69" width="0.0232%" height="15" fill="rgb(231,138,38)" fg:x="8344" fg:w="16"/><text x="12.3724%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.04%)</title><rect x="12.1079%" y="117" width="0.0421%" height="15" fill="rgb(231,145,46)" fg:x="8334" fg:w="29"/><text x="12.3579%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (26 samples, 0.04%)</title><rect x="12.1123%" y="101" width="0.0378%" height="15" fill="rgb(251,118,11)" fg:x="8337" fg:w="26"/><text x="12.3623%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="12.1602%" y="117" width="0.0189%" height="15" fill="rgb(217,147,25)" fg:x="8370" fg:w="13"/><text x="12.4102%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (24 samples, 0.03%)</title><rect x="12.1791%" y="117" width="0.0349%" height="15" fill="rgb(247,81,37)" fg:x="8383" fg:w="24"/><text x="12.4291%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (520 samples, 0.76%)</title><rect x="11.7607%" y="133" width="0.7555%" height="15" fill="rgb(209,12,38)" fg:x="8095" fg:w="520"/><text x="12.0107%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (208 samples, 0.30%)</title><rect x="12.2140%" y="117" width="0.3022%" height="15" fill="rgb(227,1,9)" fg:x="8407" fg:w="208"/><text x="12.4640%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (703 samples, 1.02%)</title><rect x="11.5079%" y="149" width="1.0213%" height="15" fill="rgb(248,47,43)" fg:x="7921" fg:w="703"/><text x="11.7579%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (7 samples, 0.01%)</title><rect x="12.5191%" y="133" width="0.0102%" height="15" fill="rgb(221,10,30)" fg:x="8617" fg:w="7"/><text x="12.7691%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (9 samples, 0.01%)</title><rect x="12.5292%" y="149" width="0.0131%" height="15" fill="rgb(210,229,1)" fg:x="8624" fg:w="9"/><text x="12.7792%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (8 samples, 0.01%)</title><rect x="12.5307%" y="133" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="8625" fg:w="8"/><text x="12.7807%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="12.5423%" y="149" width="0.0334%" height="15" fill="rgb(234,67,33)" fg:x="8633" fg:w="23"/><text x="12.7923%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (18 samples, 0.03%)</title><rect x="12.5496%" y="133" width="0.0262%" height="15" fill="rgb(247,98,35)" fg:x="8638" fg:w="18"/><text x="12.7996%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="12.5641%" y="117" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="8648" fg:w="8"/><text x="12.8141%" y="127.50"></text></g><g><title>dyld`start (8,657 samples, 12.58%)</title><rect x="0.0000%" y="389" width="12.5772%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="8657"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (8,656 samples, 12.58%)</title><rect x="0.0015%" y="373" width="12.5757%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,656 samples, 12.58%)</title><rect x="0.0015%" y="357" width="12.5757%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="367.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,656 samples, 12.58%)</title><rect x="0.0015%" y="341" width="12.5757%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="351.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,656 samples, 12.58%)</title><rect x="0.0015%" y="325" width="12.5757%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="335.50">rust_qecp`std::sys_..</text></g><g><title>rust_qecp`rust_qecp::main (8,656 samples, 12.58%)</title><rect x="0.0015%" y="309" width="12.5757%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="319.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (8,656 samples, 12.58%)</title><rect x="0.0015%" y="293" width="12.5757%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="303.50">rust_qecp`tokio::ta..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (8,656 samples, 12.58%)</title><rect x="0.0015%" y="277" width="12.5757%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="287.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,656 samples, 12.58%)</title><rect x="0.0015%" y="261" width="12.5757%" height="15" fill="rgb(207,117,47)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="271.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (8,656 samples, 12.58%)</title><rect x="0.0015%" y="245" width="12.5757%" height="15" fill="rgb(249,43,39)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="255.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,656 samples, 12.58%)</title><rect x="0.0015%" y="229" width="12.5757%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="239.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,656 samples, 12.58%)</title><rect x="0.0015%" y="213" width="12.5757%" height="15" fill="rgb(236,212,23)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="223.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,656 samples, 12.58%)</title><rect x="0.0015%" y="197" width="12.5757%" height="15" fill="rgb(242,79,21)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="207.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,656 samples, 12.58%)</title><rect x="0.0015%" y="181" width="12.5757%" height="15" fill="rgb(211,96,35)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="191.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,656 samples, 12.58%)</title><rect x="0.0015%" y="165" width="12.5757%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="8656"/><text x="0.2515%" y="175.50">rust_qecp`rust_qecp..</text></g><g><title>libsystem_kernel.dylib`__exit (8 samples, 0.01%)</title><rect x="12.5772%" y="389" width="0.0116%" height="15" fill="rgb(211,81,21)" fg:x="8657" fg:w="8"/><text x="12.8272%" y="399.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (8 samples, 0.01%)</title><rect x="12.5932%" y="309" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="8668" fg:w="8"/><text x="12.8432%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (8 samples, 0.01%)</title><rect x="12.5932%" y="293" width="0.0116%" height="15" fill="rgb(235,213,38)" fg:x="8668" fg:w="8"/><text x="12.8432%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="12.5932%" y="277" width="0.0116%" height="15" fill="rgb(237,122,38)" fg:x="8668" fg:w="8"/><text x="12.8432%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="12.5932%" y="261" width="0.0116%" height="15" fill="rgb(244,218,35)" fg:x="8668" fg:w="8"/><text x="12.8432%" y="271.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (7 samples, 0.01%)</title><rect x="12.5946%" y="245" width="0.0102%" height="15" fill="rgb(240,68,47)" fg:x="8669" fg:w="7"/><text x="12.8446%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="20.1363%" y="277" width="0.0232%" height="15" fill="rgb(210,16,53)" fg:x="13860" fg:w="16"/><text x="20.3863%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (138 samples, 0.20%)</title><rect x="20.1624%" y="197" width="0.2005%" height="15" fill="rgb(235,124,12)" fg:x="13878" fg:w="138"/><text x="20.4124%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (138 samples, 0.20%)</title><rect x="20.1624%" y="181" width="0.2005%" height="15" fill="rgb(224,169,11)" fg:x="13878" fg:w="138"/><text x="20.4124%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (140 samples, 0.20%)</title><rect x="20.1624%" y="213" width="0.2034%" height="15" fill="rgb(250,166,2)" fg:x="13878" fg:w="140"/><text x="20.4124%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (151 samples, 0.22%)</title><rect x="20.1624%" y="229" width="0.2194%" height="15" fill="rgb(242,216,29)" fg:x="13878" fg:w="151"/><text x="20.4124%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="20.3658%" y="213" width="0.0160%" height="15" fill="rgb(230,116,27)" fg:x="14018" fg:w="11"/><text x="20.6158%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (154 samples, 0.22%)</title><rect x="20.1610%" y="277" width="0.2237%" height="15" fill="rgb(228,99,48)" fg:x="13877" fg:w="154"/><text x="20.4110%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (153 samples, 0.22%)</title><rect x="20.1624%" y="261" width="0.2223%" height="15" fill="rgb(253,11,6)" fg:x="13878" fg:w="153"/><text x="20.4124%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (153 samples, 0.22%)</title><rect x="20.1624%" y="245" width="0.2223%" height="15" fill="rgb(247,143,39)" fg:x="13878" fg:w="153"/><text x="20.4124%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.18%)</title><rect x="21.3160%" y="245" width="0.1831%" height="15" fill="rgb(236,97,10)" fg:x="14672" fg:w="126"/><text x="21.5660%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (127 samples, 0.18%)</title><rect x="21.3160%" y="261" width="0.1845%" height="15" fill="rgb(233,208,19)" fg:x="14672" fg:w="127"/><text x="21.5660%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (248 samples, 0.36%)</title><rect x="21.5019%" y="261" width="0.3603%" height="15" fill="rgb(216,164,2)" fg:x="14800" fg:w="248"/><text x="21.7519%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (721 samples, 1.05%)</title><rect x="21.9639%" y="245" width="1.0475%" height="15" fill="rgb(220,129,5)" fg:x="15118" fg:w="721"/><text x="22.2139%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (11 samples, 0.02%)</title><rect x="23.0114%" y="245" width="0.0160%" height="15" fill="rgb(242,17,10)" fg:x="15839" fg:w="11"/><text x="23.2614%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (295 samples, 0.43%)</title><rect x="23.0274%" y="245" width="0.4286%" height="15" fill="rgb(242,107,0)" fg:x="15850" fg:w="295"/><text x="23.2774%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (210 samples, 0.31%)</title><rect x="23.6768%" y="229" width="0.3051%" height="15" fill="rgb(251,28,31)" fg:x="16297" fg:w="210"/><text x="23.9268%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (209 samples, 0.30%)</title><rect x="23.9819%" y="229" width="0.3036%" height="15" fill="rgb(233,223,10)" fg:x="16507" fg:w="209"/><text x="24.2319%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (209 samples, 0.30%)</title><rect x="23.9819%" y="213" width="0.3036%" height="15" fill="rgb(215,21,27)" fg:x="16507" fg:w="209"/><text x="24.2319%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (9 samples, 0.01%)</title><rect x="80.0976%" y="197" width="0.0131%" height="15" fill="rgb(232,23,21)" fg:x="55132" fg:w="9"/><text x="80.3476%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (38,426 samples, 55.83%)</title><rect x="24.2856%" y="229" width="55.8266%" height="15" fill="rgb(244,5,23)" fg:x="16716" fg:w="38426"/><text x="24.5356%" y="239.50">rust_qecp`PerfectMatching::Expand</text></g><g><title>rust_qecp`PerfectMatching::Augment (10 samples, 0.01%)</title><rect x="80.0976%" y="213" width="0.0145%" height="15" fill="rgb(226,81,46)" fg:x="55132" fg:w="10"/><text x="80.3476%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (230 samples, 0.33%)</title><rect x="83.0411%" y="181" width="0.3342%" height="15" fill="rgb(247,70,30)" fg:x="57158" fg:w="230"/><text x="83.2911%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,138 samples, 1.65%)</title><rect x="81.7684%" y="213" width="1.6533%" height="15" fill="rgb(212,68,19)" fg:x="56282" fg:w="1138"/><text x="82.0184%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (262 samples, 0.38%)</title><rect x="83.0411%" y="197" width="0.3806%" height="15" fill="rgb(240,187,13)" fg:x="57158" fg:w="262"/><text x="83.2911%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (32 samples, 0.05%)</title><rect x="83.3752%" y="181" width="0.0465%" height="15" fill="rgb(223,113,26)" fg:x="57388" fg:w="32"/><text x="83.6252%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,649 samples, 3.85%)</title><rect x="80.1122%" y="229" width="3.8486%" height="15" fill="rgb(206,192,2)" fg:x="55142" fg:w="2649"/><text x="80.3622%" y="239.50">rust..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (371 samples, 0.54%)</title><rect x="83.4217%" y="213" width="0.5390%" height="15" fill="rgb(241,108,4)" fg:x="57420" fg:w="371"/><text x="83.6717%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,709 samples, 2.48%)</title><rect x="84.2266%" y="213" width="2.4829%" height="15" fill="rgb(247,173,49)" fg:x="57974" fg:w="1709"/><text x="84.4766%" y="223.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (1,895 samples, 2.75%)</title><rect x="83.9607%" y="229" width="2.7531%" height="15" fill="rgb(224,114,35)" fg:x="57791" fg:w="1895"/><text x="84.2107%" y="239.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (91 samples, 0.13%)</title><rect x="92.3261%" y="197" width="0.1322%" height="15" fill="rgb(245,159,27)" fg:x="63549" fg:w="91"/><text x="92.5761%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (123 samples, 0.18%)</title><rect x="92.3261%" y="213" width="0.1787%" height="15" fill="rgb(245,172,44)" fg:x="63549" fg:w="123"/><text x="92.5761%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (32 samples, 0.05%)</title><rect x="92.4583%" y="197" width="0.0465%" height="15" fill="rgb(236,23,11)" fg:x="63640" fg:w="32"/><text x="92.7083%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,993 samples, 5.80%)</title><rect x="86.7153%" y="229" width="5.8012%" height="15" fill="rgb(205,117,38)" fg:x="59687" fg:w="3993"/><text x="86.9653%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (8 samples, 0.01%)</title><rect x="92.5048%" y="213" width="0.0116%" height="15" fill="rgb(237,72,25)" fg:x="63672" fg:w="8"/><text x="92.7548%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (47,913 samples, 69.61%)</title><rect x="23.4575%" y="245" width="69.6096%" height="15" fill="rgb(244,70,9)" fg:x="16146" fg:w="47913"/><text x="23.7075%" y="255.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (379 samples, 0.55%)</title><rect x="92.5165%" y="229" width="0.5506%" height="15" fill="rgb(217,125,39)" fg:x="63680" fg:w="379"/><text x="92.7665%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (67 samples, 0.10%)</title><rect x="93.0671%" y="229" width="0.0973%" height="15" fill="rgb(235,36,10)" fg:x="64059" fg:w="67"/><text x="93.3171%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (73 samples, 0.11%)</title><rect x="93.0671%" y="245" width="0.1061%" height="15" fill="rgb(251,123,47)" fg:x="64059" fg:w="73"/><text x="93.3171%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (50,241 samples, 72.99%)</title><rect x="20.3847%" y="277" width="72.9918%" height="15" fill="rgb(221,13,13)" fg:x="14031" fg:w="50241"/><text x="20.6347%" y="287.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (49,223 samples, 71.51%)</title><rect x="21.8637%" y="261" width="71.5128%" height="15" fill="rgb(238,131,9)" fg:x="15049" fg:w="49223"/><text x="22.1137%" y="271.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (140 samples, 0.20%)</title><rect x="93.1731%" y="245" width="0.2034%" height="15" fill="rgb(211,50,8)" fg:x="64132" fg:w="140"/><text x="93.4231%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (55,749 samples, 80.99%)</title><rect x="12.6266%" y="293" width="80.9940%" height="15" fill="rgb(245,182,24)" fg:x="8691" fg:w="55749"/><text x="12.8766%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (168 samples, 0.24%)</title><rect x="93.3765%" y="277" width="0.2441%" height="15" fill="rgb(242,14,37)" fg:x="64272" fg:w="168"/><text x="93.6265%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (55,791 samples, 81.06%)</title><rect x="12.6048%" y="309" width="81.0550%" height="15" fill="rgb(246,228,12)" fg:x="8676" fg:w="55791"/><text x="12.8548%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (27 samples, 0.04%)</title><rect x="93.6206%" y="293" width="0.0392%" height="15" fill="rgb(213,55,15)" fg:x="64440" fg:w="27"/><text x="93.8706%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (539 samples, 0.78%)</title><rect x="93.6598%" y="309" width="0.7831%" height="15" fill="rgb(209,9,3)" fg:x="64467" fg:w="539"/><text x="93.9098%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (73 samples, 0.11%)</title><rect x="94.4429%" y="309" width="0.1061%" height="15" fill="rgb(230,59,30)" fg:x="65006" fg:w="73"/><text x="94.6929%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (19 samples, 0.03%)</title><rect x="94.5214%" y="293" width="0.0276%" height="15" fill="rgb(209,121,21)" fg:x="65060" fg:w="19"/><text x="94.7714%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,093 samples, 3.04%)</title><rect x="94.5490%" y="309" width="3.0408%" height="15" fill="rgb(220,109,13)" fg:x="65079" fg:w="2093"/><text x="94.7990%" y="319.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (26 samples, 0.04%)</title><rect x="97.5897%" y="293" width="0.0378%" height="15" fill="rgb(232,18,1)" fg:x="67172" fg:w="26"/><text x="97.8397%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (144 samples, 0.21%)</title><rect x="97.5897%" y="309" width="0.2092%" height="15" fill="rgb(215,41,42)" fg:x="67172" fg:w="144"/><text x="97.8397%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (118 samples, 0.17%)</title><rect x="97.6275%" y="293" width="0.1714%" height="15" fill="rgb(224,123,36)" fg:x="67198" fg:w="118"/><text x="97.8775%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (1,495 samples, 2.17%)</title><rect x="97.7990%" y="309" width="2.1720%" height="15" fill="rgb(240,125,3)" fg:x="67316" fg:w="1495"/><text x="98.0490%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (1,040 samples, 1.51%)</title><rect x="98.4600%" y="293" width="1.5109%" height="15" fill="rgb(205,98,50)" fg:x="67771" fg:w="1040"/><text x="98.7100%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (18 samples, 0.03%)</title><rect x="99.9709%" y="309" width="0.0262%" height="15" fill="rgb(205,185,37)" fg:x="68811" fg:w="18"/><text x="100.2209%" y="319.50"></text></g><g><title>all (68,831 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="68831"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,166 samples, 87.41%)</title><rect x="12.5888%" y="389" width="87.4112%" height="15" fill="rgb(213,199,42)" fg:x="8665" fg:w="60166"/><text x="12.8388%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,166 samples, 87.41%)</title><rect x="12.5888%" y="373" width="87.4112%" height="15" fill="rgb(235,201,11)" fg:x="8665" fg:w="60166"/><text x="12.8388%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,166 samples, 87.41%)</title><rect x="12.5888%" y="357" width="87.4112%" height="15" fill="rgb(207,46,11)" fg:x="8665" fg:w="60166"/><text x="12.8388%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,166 samples, 87.41%)</title><rect x="12.5888%" y="341" width="87.4112%" height="15" fill="rgb(241,35,35)" fg:x="8665" fg:w="60166"/><text x="12.8388%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,165 samples, 87.41%)</title><rect x="12.5903%" y="325" width="87.4097%" height="15" fill="rgb(243,32,47)" fg:x="8666" fg:w="60165"/><text x="12.8403%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>