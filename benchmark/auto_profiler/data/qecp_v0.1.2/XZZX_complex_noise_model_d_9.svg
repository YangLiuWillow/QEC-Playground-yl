<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61583"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="0.0097%" y="133" width="0.0179%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="11"/><text x="0.2597%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.01%)</title><rect x="0.0406%" y="53" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="7"/><text x="0.2906%" y="63.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (19 samples, 0.03%)</title><rect x="0.0373%" y="133" width="0.0309%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="19"/><text x="0.2873%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (19 samples, 0.03%)</title><rect x="0.0373%" y="117" width="0.0309%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="19"/><text x="0.2873%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0373%" y="101" width="0.0309%" height="15" fill="rgb(208,68,35)" fg:x="23" fg:w="19"/><text x="0.2873%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="0.0373%" y="85" width="0.0309%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="19"/><text x="0.2873%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (18 samples, 0.03%)</title><rect x="0.0390%" y="69" width="0.0292%" height="15" fill="rgb(207,160,47)" fg:x="24" fg:w="18"/><text x="0.2890%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.02%)</title><rect x="0.0520%" y="53" width="0.0162%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="10"/><text x="0.3020%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (8 samples, 0.01%)</title><rect x="0.0682%" y="133" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="42" fg:w="8"/><text x="0.3182%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0682%" y="117" width="0.0130%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="8"/><text x="0.3182%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="0.0682%" y="101" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="42" fg:w="8"/><text x="0.3182%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (8 samples, 0.01%)</title><rect x="0.0682%" y="85" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="42" fg:w="8"/><text x="0.3182%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (49 samples, 0.08%)</title><rect x="0.0812%" y="133" width="0.0796%" height="15" fill="rgb(216,20,37)" fg:x="50" fg:w="49"/><text x="0.3312%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (36 samples, 0.06%)</title><rect x="0.1608%" y="133" width="0.0585%" height="15" fill="rgb(206,188,39)" fg:x="99" fg:w="36"/><text x="0.4108%" y="143.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (22 samples, 0.04%)</title><rect x="0.2192%" y="133" width="0.0357%" height="15" fill="rgb(217,207,13)" fg:x="135" fg:w="22"/><text x="0.4692%" y="143.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (7 samples, 0.01%)</title><rect x="0.2436%" y="117" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="150" fg:w="7"/><text x="0.4936%" y="127.50"></text></g><g><title>libsystem_c.dylib`isatty (7 samples, 0.01%)</title><rect x="0.2436%" y="101" width="0.0114%" height="15" fill="rgb(225,20,46)" fg:x="150" fg:w="7"/><text x="0.4936%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="0.8769%" y="117" width="0.0114%" height="15" fill="rgb(210,31,41)" fg:x="540" fg:w="7"/><text x="1.1269%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (8 samples, 0.01%)</title><rect x="0.8964%" y="117" width="0.0130%" height="15" fill="rgb(221,200,47)" fg:x="552" fg:w="8"/><text x="1.1464%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (45 samples, 0.07%)</title><rect x="0.9093%" y="117" width="0.0731%" height="15" fill="rgb(226,26,5)" fg:x="560" fg:w="45"/><text x="1.1593%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.07%)</title><rect x="0.9889%" y="117" width="0.0682%" height="15" fill="rgb(249,33,26)" fg:x="609" fg:w="42"/><text x="1.2389%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="1.0425%" y="101" width="0.0146%" height="15" fill="rgb(235,183,28)" fg:x="642" fg:w="9"/><text x="1.2925%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="1.0457%" y="85" width="0.0114%" height="15" fill="rgb(221,5,38)" fg:x="644" fg:w="7"/><text x="1.2957%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="1.3705%" y="101" width="0.0260%" height="15" fill="rgb(247,18,42)" fg:x="844" fg:w="16"/><text x="1.6205%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (46 samples, 0.07%)</title><rect x="1.3965%" y="101" width="0.0747%" height="15" fill="rgb(241,131,45)" fg:x="860" fg:w="46"/><text x="1.6465%" y="111.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (269 samples, 0.44%)</title><rect x="1.0604%" y="117" width="0.4368%" height="15" fill="rgb(249,31,29)" fg:x="653" fg:w="269"/><text x="1.3104%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="1.4712%" y="101" width="0.0260%" height="15" fill="rgb(225,111,53)" fg:x="906" fg:w="16"/><text x="1.7212%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="1.4809%" y="85" width="0.0162%" height="15" fill="rgb(238,160,17)" fg:x="912" fg:w="10"/><text x="1.7309%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (766 samples, 1.24%)</title><rect x="0.2549%" y="133" width="1.2438%" height="15" fill="rgb(214,148,48)" fg:x="157" fg:w="766"/><text x="0.5049%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.15%)</title><rect x="1.5199%" y="117" width="0.1461%" height="15" fill="rgb(232,36,49)" fg:x="936" fg:w="90"/><text x="1.7699%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.03%)</title><rect x="1.8836%" y="101" width="0.0341%" height="15" fill="rgb(209,103,24)" fg:x="1160" fg:w="21"/><text x="2.1336%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="1.9031%" y="85" width="0.0146%" height="15" fill="rgb(229,88,8)" fg:x="1172" fg:w="9"/><text x="2.1531%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="1.9226%" y="101" width="0.0114%" height="15" fill="rgb(213,181,19)" fg:x="1184" fg:w="7"/><text x="2.1726%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="1.9356%" y="101" width="0.0195%" height="15" fill="rgb(254,191,54)" fg:x="1192" fg:w="12"/><text x="2.1856%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="1.9681%" y="37" width="0.0179%" height="15" fill="rgb(241,83,37)" fg:x="1212" fg:w="11"/><text x="2.2181%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.03%)</title><rect x="1.9583%" y="69" width="0.0309%" height="15" fill="rgb(233,36,39)" fg:x="1206" fg:w="19"/><text x="2.2083%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="1.9648%" y="53" width="0.0244%" height="15" fill="rgb(226,3,54)" fg:x="1210" fg:w="15"/><text x="2.2148%" y="63.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.04%)</title><rect x="1.9551%" y="101" width="0.0373%" height="15" fill="rgb(245,192,40)" fg:x="1204" fg:w="23"/><text x="2.2051%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="1.9583%" y="85" width="0.0341%" height="15" fill="rgb(238,167,29)" fg:x="1206" fg:w="21"/><text x="2.2083%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="2.0054%" y="101" width="0.0162%" height="15" fill="rgb(232,182,51)" fg:x="1235" fg:w="10"/><text x="2.2554%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (11 samples, 0.02%)</title><rect x="2.0217%" y="101" width="0.0179%" height="15" fill="rgb(231,60,39)" fg:x="1245" fg:w="11"/><text x="2.2717%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (402 samples, 0.65%)</title><rect x="1.6855%" y="117" width="0.6528%" height="15" fill="rgb(208,69,12)" fg:x="1038" fg:w="402"/><text x="1.9355%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (184 samples, 0.30%)</title><rect x="2.0395%" y="101" width="0.2988%" height="15" fill="rgb(235,93,37)" fg:x="1256" fg:w="184"/><text x="2.2895%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (522 samples, 0.85%)</title><rect x="1.4988%" y="133" width="0.8476%" height="15" fill="rgb(213,116,39)" fg:x="923" fg:w="522"/><text x="1.7488%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (15 samples, 0.02%)</title><rect x="2.3529%" y="133" width="0.0244%" height="15" fill="rgb(222,207,29)" fg:x="1449" fg:w="15"/><text x="2.6029%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (10 samples, 0.02%)</title><rect x="2.3610%" y="117" width="0.0162%" height="15" fill="rgb(206,96,30)" fg:x="1454" fg:w="10"/><text x="2.6110%" y="127.50"></text></g><g><title>dyld`start (1,471 samples, 2.39%)</title><rect x="0.0000%" y="373" width="2.3886%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="1471"/><text x="0.2500%" y="383.50">dy..</text></g><g><title>rust_qecp`main (1,467 samples, 2.38%)</title><rect x="0.0065%" y="357" width="2.3822%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="367.50">ru..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,467 samples, 2.38%)</title><rect x="0.0065%" y="341" width="2.3822%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="351.50">ru..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,467 samples, 2.38%)</title><rect x="0.0065%" y="325" width="2.3822%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="335.50">ru..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,467 samples, 2.38%)</title><rect x="0.0065%" y="309" width="2.3822%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::main (1,467 samples, 2.38%)</title><rect x="0.0065%" y="293" width="2.3822%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="303.50">ru..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (1,467 samples, 2.38%)</title><rect x="0.0065%" y="277" width="2.3822%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="287.50">ru..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (1,467 samples, 2.38%)</title><rect x="0.0065%" y="261" width="2.3822%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="271.50">ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,467 samples, 2.38%)</title><rect x="0.0065%" y="245" width="2.3822%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="255.50">ru..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,467 samples, 2.38%)</title><rect x="0.0065%" y="229" width="2.3822%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="239.50">ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,467 samples, 2.38%)</title><rect x="0.0065%" y="213" width="2.3822%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="223.50">ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,467 samples, 2.38%)</title><rect x="0.0065%" y="197" width="2.3822%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="207.50">ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,467 samples, 2.38%)</title><rect x="0.0065%" y="181" width="2.3822%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1467"/><text x="0.2565%" y="191.50">ru..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,466 samples, 2.38%)</title><rect x="0.0081%" y="165" width="2.3805%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="1466"/><text x="0.2581%" y="175.50">ru..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,465 samples, 2.38%)</title><rect x="0.0097%" y="149" width="2.3789%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1465"/><text x="0.2597%" y="159.50">ru..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="2.4049%" y="293" width="0.0114%" height="15" fill="rgb(221,10,30)" fg:x="1481" fg:w="7"/><text x="2.6549%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="2.4163%" y="293" width="0.0179%" height="15" fill="rgb(210,229,1)" fg:x="1488" fg:w="11"/><text x="2.6663%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.05%)</title><rect x="2.4374%" y="277" width="0.0487%" height="15" fill="rgb(222,148,37)" fg:x="1501" fg:w="30"/><text x="2.6874%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (34 samples, 0.06%)</title><rect x="2.4341%" y="293" width="0.0552%" height="15" fill="rgb(234,67,33)" fg:x="1499" fg:w="34"/><text x="2.6841%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="2.4958%" y="293" width="0.0195%" height="15" fill="rgb(247,98,35)" fg:x="1537" fg:w="12"/><text x="2.7458%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.04%)</title><rect x="2.5218%" y="293" width="0.0373%" height="15" fill="rgb(247,138,52)" fg:x="1553" fg:w="23"/><text x="2.7718%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.08%)</title><rect x="2.5591%" y="293" width="0.0844%" height="15" fill="rgb(213,79,30)" fg:x="1576" fg:w="52"/><text x="2.8091%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (19 samples, 0.03%)</title><rect x="2.7264%" y="261" width="0.0309%" height="15" fill="rgb(246,177,23)" fg:x="1679" fg:w="19"/><text x="2.9764%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.09%)</title><rect x="2.6728%" y="277" width="0.0861%" height="15" fill="rgb(230,62,27)" fg:x="1646" fg:w="53"/><text x="2.9228%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="2.7589%" y="277" width="0.0130%" height="15" fill="rgb(216,154,8)" fg:x="1699" fg:w="8"/><text x="3.0089%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="2.7589%" y="261" width="0.0130%" height="15" fill="rgb(244,35,45)" fg:x="1699" fg:w="8"/><text x="3.0089%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (86 samples, 0.14%)</title><rect x="2.7767%" y="277" width="0.1396%" height="15" fill="rgb(251,115,12)" fg:x="1710" fg:w="86"/><text x="3.0267%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (52 samples, 0.08%)</title><rect x="2.8320%" y="261" width="0.0844%" height="15" fill="rgb(240,54,50)" fg:x="1744" fg:w="52"/><text x="3.0820%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (52 samples, 0.08%)</title><rect x="2.8320%" y="245" width="0.0844%" height="15" fill="rgb(233,84,52)" fg:x="1744" fg:w="52"/><text x="3.0820%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.28%)</title><rect x="2.6436%" y="293" width="0.2842%" height="15" fill="rgb(207,117,47)" fg:x="1628" fg:w="175"/><text x="2.8936%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.01%)</title><rect x="2.9586%" y="293" width="0.0130%" height="15" fill="rgb(249,43,39)" fg:x="1822" fg:w="8"/><text x="3.2086%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="2.9716%" y="293" width="0.0309%" height="15" fill="rgb(209,38,44)" fg:x="1830" fg:w="19"/><text x="3.2216%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="3.0658%" y="245" width="0.0309%" height="15" fill="rgb(236,212,23)" fg:x="1888" fg:w="19"/><text x="3.3158%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="3.0755%" y="229" width="0.0211%" height="15" fill="rgb(242,79,21)" fg:x="1894" fg:w="13"/><text x="3.3255%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="3.0479%" y="277" width="0.0503%" height="15" fill="rgb(211,96,35)" fg:x="1877" fg:w="31"/><text x="3.2979%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.04%)</title><rect x="3.0625%" y="261" width="0.0357%" height="15" fill="rgb(253,215,40)" fg:x="1886" fg:w="22"/><text x="3.3125%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="3.0983%" y="277" width="0.0292%" height="15" fill="rgb(211,81,21)" fg:x="1908" fg:w="18"/><text x="3.3483%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.11%)</title><rect x="3.1291%" y="277" width="0.1120%" height="15" fill="rgb(208,190,38)" fg:x="1927" fg:w="69"/><text x="3.3791%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (17 samples, 0.03%)</title><rect x="3.2135%" y="261" width="0.0276%" height="15" fill="rgb(235,213,38)" fg:x="1979" fg:w="17"/><text x="3.4635%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="3.2558%" y="277" width="0.0325%" height="15" fill="rgb(237,122,38)" fg:x="2005" fg:w="20"/><text x="3.5058%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="3.2882%" y="277" width="0.0325%" height="15" fill="rgb(244,218,35)" fg:x="2025" fg:w="20"/><text x="3.5382%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (125 samples, 0.20%)</title><rect x="3.3402%" y="277" width="0.2030%" height="15" fill="rgb(240,68,47)" fg:x="2057" fg:w="125"/><text x="3.5902%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.09%)</title><rect x="3.5432%" y="277" width="0.0942%" height="15" fill="rgb(210,16,53)" fg:x="2182" fg:w="58"/><text x="3.7932%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (330 samples, 0.54%)</title><rect x="3.6374%" y="277" width="0.5359%" height="15" fill="rgb(235,124,12)" fg:x="2240" fg:w="330"/><text x="3.8874%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (26 samples, 0.04%)</title><rect x="4.1732%" y="277" width="0.0422%" height="15" fill="rgb(224,169,11)" fg:x="2570" fg:w="26"/><text x="4.4232%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (21 samples, 0.03%)</title><rect x="4.2154%" y="277" width="0.0341%" height="15" fill="rgb(250,166,2)" fg:x="2596" fg:w="21"/><text x="4.4654%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.01%)</title><rect x="4.2739%" y="229" width="0.0130%" height="15" fill="rgb(242,216,29)" fg:x="2632" fg:w="8"/><text x="4.5239%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="4.2707%" y="277" width="0.0179%" height="15" fill="rgb(230,116,27)" fg:x="2630" fg:w="11"/><text x="4.5207%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="4.2707%" y="261" width="0.0179%" height="15" fill="rgb(228,99,48)" fg:x="2630" fg:w="11"/><text x="4.5207%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="4.2723%" y="245" width="0.0162%" height="15" fill="rgb(253,11,6)" fg:x="2631" fg:w="10"/><text x="4.5223%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.07%)</title><rect x="4.2950%" y="277" width="0.0666%" height="15" fill="rgb(247,143,39)" fg:x="2645" fg:w="41"/><text x="4.5450%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (360 samples, 0.58%)</title><rect x="4.3616%" y="277" width="0.5846%" height="15" fill="rgb(236,97,10)" fg:x="2686" fg:w="360"/><text x="4.6116%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (25 samples, 0.04%)</title><rect x="4.9462%" y="277" width="0.0406%" height="15" fill="rgb(233,208,19)" fg:x="3046" fg:w="25"/><text x="5.1962%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="4.9868%" y="277" width="0.0260%" height="15" fill="rgb(216,164,2)" fg:x="3071" fg:w="16"/><text x="5.2368%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="6.5879%" y="261" width="0.0503%" height="15" fill="rgb(220,129,5)" fg:x="4057" fg:w="31"/><text x="6.8379%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="6.6057%" y="245" width="0.0325%" height="15" fill="rgb(242,17,10)" fg:x="4068" fg:w="20"/><text x="6.8557%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="6.6171%" y="229" width="0.0211%" height="15" fill="rgb(242,107,0)" fg:x="4075" fg:w="13"/><text x="6.8671%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="6.6918%" y="229" width="0.0130%" height="15" fill="rgb(251,28,31)" fg:x="4121" fg:w="8"/><text x="6.9418%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="6.6934%" y="213" width="0.0114%" height="15" fill="rgb(233,223,10)" fg:x="4122" fg:w="7"/><text x="6.9434%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="6.7178%" y="181" width="0.0292%" height="15" fill="rgb(215,21,27)" fg:x="4137" fg:w="18"/><text x="6.9678%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.04%)</title><rect x="6.7161%" y="197" width="0.0357%" height="15" fill="rgb(232,23,21)" fg:x="4136" fg:w="22"/><text x="6.9661%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.04%)</title><rect x="6.7129%" y="213" width="0.0422%" height="15" fill="rgb(244,5,23)" fg:x="4134" fg:w="26"/><text x="6.9629%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (39 samples, 0.06%)</title><rect x="6.7048%" y="229" width="0.0633%" height="15" fill="rgb(226,81,46)" fg:x="4129" fg:w="39"/><text x="6.9548%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="6.7551%" y="213" width="0.0130%" height="15" fill="rgb(247,70,30)" fg:x="4160" fg:w="8"/><text x="7.0051%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (73 samples, 0.12%)</title><rect x="6.6528%" y="261" width="0.1185%" height="15" fill="rgb(212,68,19)" fg:x="4097" fg:w="73"/><text x="6.9028%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (55 samples, 0.09%)</title><rect x="6.6820%" y="245" width="0.0893%" height="15" fill="rgb(240,187,13)" fg:x="4115" fg:w="55"/><text x="6.9320%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (1,079 samples, 1.75%)</title><rect x="5.0290%" y="277" width="1.7521%" height="15" fill="rgb(223,113,26)" fg:x="3097" fg:w="1079"/><text x="5.2790%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (71 samples, 0.12%)</title><rect x="15.3679%" y="261" width="0.1153%" height="15" fill="rgb(206,192,2)" fg:x="9464" fg:w="71"/><text x="15.6179%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (24 samples, 0.04%)</title><rect x="15.4832%" y="261" width="0.0390%" height="15" fill="rgb(241,108,4)" fg:x="9535" fg:w="24"/><text x="15.7332%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (73 samples, 0.12%)</title><rect x="15.5303%" y="261" width="0.1185%" height="15" fill="rgb(247,173,49)" fg:x="9564" fg:w="73"/><text x="15.7803%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.06%)</title><rect x="15.9054%" y="245" width="0.0568%" height="15" fill="rgb(224,114,35)" fg:x="9795" fg:w="35"/><text x="16.1554%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (256 samples, 0.42%)</title><rect x="15.6488%" y="261" width="0.4157%" height="15" fill="rgb(245,159,27)" fg:x="9637" fg:w="256"/><text x="15.8988%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (57 samples, 0.09%)</title><rect x="15.9719%" y="245" width="0.0926%" height="15" fill="rgb(245,172,44)" fg:x="9836" fg:w="57"/><text x="16.2219%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (56 samples, 0.09%)</title><rect x="15.9736%" y="229" width="0.0909%" height="15" fill="rgb(236,23,11)" fg:x="9837" fg:w="56"/><text x="16.2236%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="16.0726%" y="245" width="0.0130%" height="15" fill="rgb(205,117,38)" fg:x="9898" fg:w="8"/><text x="16.3226%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (14 samples, 0.02%)</title><rect x="16.0645%" y="261" width="0.0227%" height="15" fill="rgb(237,72,25)" fg:x="9893" fg:w="14"/><text x="16.3145%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="16.0872%" y="261" width="0.0162%" height="15" fill="rgb(244,70,9)" fg:x="9907" fg:w="10"/><text x="16.3372%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.05%)</title><rect x="16.3568%" y="229" width="0.0487%" height="15" fill="rgb(217,125,39)" fg:x="10073" fg:w="30"/><text x="16.6068%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (211 samples, 0.34%)</title><rect x="16.1035%" y="261" width="0.3426%" height="15" fill="rgb(235,36,10)" fg:x="9917" fg:w="211"/><text x="16.3535%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (160 samples, 0.26%)</title><rect x="16.1863%" y="245" width="0.2598%" height="15" fill="rgb(251,123,47)" fg:x="9968" fg:w="160"/><text x="16.4363%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="16.4055%" y="229" width="0.0406%" height="15" fill="rgb(221,13,13)" fg:x="10103" fg:w="25"/><text x="16.6555%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (78 samples, 0.13%)</title><rect x="16.4461%" y="261" width="0.1267%" height="15" fill="rgb(238,131,9)" fg:x="10128" fg:w="78"/><text x="16.6961%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.08%)</title><rect x="16.5728%" y="261" width="0.0763%" height="15" fill="rgb(211,50,8)" fg:x="10206" fg:w="47"/><text x="16.8228%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="16.6491%" y="261" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="10253" fg:w="10"/><text x="16.8991%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (19 samples, 0.03%)</title><rect x="16.6653%" y="261" width="0.0309%" height="15" fill="rgb(242,14,37)" fg:x="10263" fg:w="19"/><text x="16.9153%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="16.7010%" y="261" width="0.0195%" height="15" fill="rgb(246,228,12)" fg:x="10285" fg:w="12"/><text x="16.9510%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="16.7205%" y="261" width="0.0260%" height="15" fill="rgb(213,55,15)" fg:x="10297" fg:w="16"/><text x="16.9705%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (122 samples, 0.20%)</title><rect x="16.7757%" y="245" width="0.1981%" height="15" fill="rgb(209,9,3)" fg:x="10331" fg:w="122"/><text x="17.0257%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="16.9316%" y="229" width="0.0422%" height="15" fill="rgb(230,59,30)" fg:x="10427" fg:w="26"/><text x="17.1816%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (150 samples, 0.24%)</title><rect x="16.7481%" y="261" width="0.2436%" height="15" fill="rgb(209,121,21)" fg:x="10314" fg:w="150"/><text x="16.9981%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="16.9738%" y="245" width="0.0179%" height="15" fill="rgb(220,109,13)" fg:x="10453" fg:w="11"/><text x="17.2238%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (521 samples, 0.85%)</title><rect x="16.9917%" y="261" width="0.8460%" height="15" fill="rgb(232,18,1)" fg:x="10464" fg:w="521"/><text x="17.2417%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.08%)</title><rect x="17.8377%" y="261" width="0.0796%" height="15" fill="rgb(215,41,42)" fg:x="10985" fg:w="49"/><text x="18.0877%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (66 samples, 0.11%)</title><rect x="17.9173%" y="261" width="0.1072%" height="15" fill="rgb(224,123,36)" fg:x="11034" fg:w="66"/><text x="18.1673%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,820 samples, 2.96%)</title><rect x="18.0245%" y="261" width="2.9554%" height="15" fill="rgb(240,125,3)" fg:x="11100" fg:w="1820"/><text x="18.2745%" y="271.50">rus..</text></g><g><title>rust_qecp`DYLD-STUB$$free (50 samples, 0.08%)</title><rect x="20.9798%" y="261" width="0.0812%" height="15" fill="rgb(205,98,50)" fg:x="12920" fg:w="50"/><text x="21.2298%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="21.0626%" y="261" width="0.0211%" height="15" fill="rgb(205,185,37)" fg:x="12971" fg:w="13"/><text x="21.3126%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (11 samples, 0.02%)</title><rect x="21.0886%" y="261" width="0.0179%" height="15" fill="rgb(238,207,15)" fg:x="12987" fg:w="11"/><text x="21.3386%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="21.2283%" y="197" width="0.0162%" height="15" fill="rgb(213,199,42)" fg:x="13073" fg:w="10"/><text x="21.4783%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="21.2250%" y="213" width="0.0211%" height="15" fill="rgb(235,201,11)" fg:x="13071" fg:w="13"/><text x="21.4750%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="21.2234%" y="229" width="0.0244%" height="15" fill="rgb(207,46,11)" fg:x="13070" fg:w="15"/><text x="21.4734%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.02%)</title><rect x="21.2640%" y="197" width="0.0211%" height="15" fill="rgb(241,35,35)" fg:x="13095" fg:w="13"/><text x="21.5140%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="21.3013%" y="181" width="0.0130%" height="15" fill="rgb(243,32,47)" fg:x="13118" fg:w="8"/><text x="21.5513%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="21.3143%" y="181" width="0.0130%" height="15" fill="rgb(247,202,23)" fg:x="13126" fg:w="8"/><text x="21.5643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="21.3403%" y="181" width="0.0130%" height="15" fill="rgb(219,102,11)" fg:x="13142" fg:w="8"/><text x="21.5903%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (47 samples, 0.08%)</title><rect x="21.2867%" y="197" width="0.0763%" height="15" fill="rgb(243,110,44)" fg:x="13109" fg:w="47"/><text x="21.5367%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (124 samples, 0.20%)</title><rect x="21.2559%" y="213" width="0.2014%" height="15" fill="rgb(222,74,54)" fg:x="13090" fg:w="124"/><text x="21.5059%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (56 samples, 0.09%)</title><rect x="21.3663%" y="197" width="0.0909%" height="15" fill="rgb(216,99,12)" fg:x="13158" fg:w="56"/><text x="21.6163%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (136 samples, 0.22%)</title><rect x="21.2510%" y="229" width="0.2208%" height="15" fill="rgb(226,22,26)" fg:x="13087" fg:w="136"/><text x="21.5010%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (218 samples, 0.35%)</title><rect x="21.1195%" y="261" width="0.3540%" height="15" fill="rgb(217,163,10)" fg:x="13006" fg:w="218"/><text x="21.3695%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (156 samples, 0.25%)</title><rect x="21.2201%" y="245" width="0.2533%" height="15" fill="rgb(213,25,53)" fg:x="13068" fg:w="156"/><text x="21.4701%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.02%)</title><rect x="21.5644%" y="245" width="0.0162%" height="15" fill="rgb(252,105,26)" fg:x="13280" fg:w="10"/><text x="21.8144%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (59 samples, 0.10%)</title><rect x="21.8632%" y="229" width="0.0958%" height="15" fill="rgb(220,39,43)" fg:x="13464" fg:w="59"/><text x="22.1132%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="21.9590%" y="229" width="0.0276%" height="15" fill="rgb(229,68,48)" fg:x="13523" fg:w="17"/><text x="22.2090%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (31 samples, 0.05%)</title><rect x="21.9866%" y="229" width="0.0503%" height="15" fill="rgb(252,8,32)" fg:x="13540" fg:w="31"/><text x="22.2366%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (86 samples, 0.14%)</title><rect x="22.0369%" y="229" width="0.1396%" height="15" fill="rgb(223,20,43)" fg:x="13571" fg:w="86"/><text x="22.2869%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (53 samples, 0.09%)</title><rect x="22.0905%" y="213" width="0.0861%" height="15" fill="rgb(229,81,49)" fg:x="13604" fg:w="53"/><text x="22.3405%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (368 samples, 0.60%)</title><rect x="21.5806%" y="245" width="0.5976%" height="15" fill="rgb(236,28,36)" fg:x="13290" fg:w="368"/><text x="21.8306%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (57 samples, 0.09%)</title><rect x="22.1782%" y="229" width="0.0926%" height="15" fill="rgb(249,185,26)" fg:x="13658" fg:w="57"/><text x="22.4282%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (58 samples, 0.09%)</title><rect x="22.1782%" y="245" width="0.0942%" height="15" fill="rgb(249,174,33)" fg:x="13658" fg:w="58"/><text x="22.4282%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (81 samples, 0.13%)</title><rect x="22.4867%" y="229" width="0.1315%" height="15" fill="rgb(233,201,37)" fg:x="13848" fg:w="81"/><text x="22.7367%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (20 samples, 0.03%)</title><rect x="22.6183%" y="229" width="0.0325%" height="15" fill="rgb(221,78,26)" fg:x="13929" fg:w="20"/><text x="22.8683%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="22.6507%" y="229" width="0.0406%" height="15" fill="rgb(250,127,30)" fg:x="13949" fg:w="25"/><text x="22.9007%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (423 samples, 0.69%)</title><rect x="22.2724%" y="245" width="0.6869%" height="15" fill="rgb(230,49,44)" fg:x="13716" fg:w="423"/><text x="22.5224%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (165 samples, 0.27%)</title><rect x="22.6913%" y="229" width="0.2679%" height="15" fill="rgb(229,67,23)" fg:x="13974" fg:w="165"/><text x="22.9413%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (76 samples, 0.12%)</title><rect x="23.1850%" y="213" width="0.1234%" height="15" fill="rgb(249,83,47)" fg:x="14278" fg:w="76"/><text x="23.4350%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (280 samples, 0.45%)</title><rect x="22.9593%" y="245" width="0.4547%" height="15" fill="rgb(215,43,3)" fg:x="14139" fg:w="280"/><text x="23.2093%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (238 samples, 0.39%)</title><rect x="23.0275%" y="229" width="0.3865%" height="15" fill="rgb(238,154,13)" fg:x="14181" fg:w="238"/><text x="23.2775%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (65 samples, 0.11%)</title><rect x="23.3084%" y="213" width="0.1055%" height="15" fill="rgb(219,56,2)" fg:x="14354" fg:w="65"/><text x="23.5584%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (23 samples, 0.04%)</title><rect x="23.4139%" y="245" width="0.0373%" height="15" fill="rgb(233,0,4)" fg:x="14419" fg:w="23"/><text x="23.6639%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (168 samples, 0.27%)</title><rect x="23.4513%" y="245" width="0.2728%" height="15" fill="rgb(235,30,7)" fg:x="14442" fg:w="168"/><text x="23.7013%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (124 samples, 0.20%)</title><rect x="23.5227%" y="229" width="0.2014%" height="15" fill="rgb(250,79,13)" fg:x="14486" fg:w="124"/><text x="23.7727%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (124 samples, 0.20%)</title><rect x="23.5227%" y="213" width="0.2014%" height="15" fill="rgb(211,146,34)" fg:x="14486" fg:w="124"/><text x="23.7727%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (38 samples, 0.06%)</title><rect x="23.7241%" y="245" width="0.0617%" height="15" fill="rgb(228,22,38)" fg:x="14610" fg:w="38"/><text x="23.9741%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (43 samples, 0.07%)</title><rect x="23.7988%" y="245" width="0.0698%" height="15" fill="rgb(235,168,5)" fg:x="14656" fg:w="43"/><text x="24.0488%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.02%)</title><rect x="23.8686%" y="245" width="0.0162%" height="15" fill="rgb(221,155,16)" fg:x="14699" fg:w="10"/><text x="24.1186%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="23.8848%" y="245" width="0.0211%" height="15" fill="rgb(215,215,53)" fg:x="14709" fg:w="13"/><text x="24.1348%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="23.9059%" y="245" width="0.0244%" height="15" fill="rgb(223,4,10)" fg:x="14722" fg:w="15"/><text x="24.1559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.10%)</title><rect x="23.9498%" y="229" width="0.1007%" height="15" fill="rgb(234,103,6)" fg:x="14749" fg:w="62"/><text x="24.1998%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (30 samples, 0.05%)</title><rect x="24.0018%" y="213" width="0.0487%" height="15" fill="rgb(227,97,0)" fg:x="14781" fg:w="30"/><text x="24.2518%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.08%)</title><rect x="24.0586%" y="229" width="0.0763%" height="15" fill="rgb(234,150,53)" fg:x="14816" fg:w="47"/><text x="24.3086%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.01%)</title><rect x="24.1219%" y="213" width="0.0130%" height="15" fill="rgb(228,201,54)" fg:x="14855" fg:w="8"/><text x="24.3719%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="24.1219%" y="197" width="0.0130%" height="15" fill="rgb(222,22,37)" fg:x="14855" fg:w="8"/><text x="24.3719%" y="207.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (1,637 samples, 2.66%)</title><rect x="21.4800%" y="261" width="2.6582%" height="15" fill="rgb(237,53,32)" fg:x="13228" fg:w="1637"/><text x="21.7300%" y="271.50">ru..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (127 samples, 0.21%)</title><rect x="23.9319%" y="245" width="0.2062%" height="15" fill="rgb(233,25,53)" fg:x="14738" fg:w="127"/><text x="24.1819%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (227 samples, 0.37%)</title><rect x="24.1382%" y="261" width="0.3686%" height="15" fill="rgb(210,40,34)" fg:x="14865" fg:w="227"/><text x="24.3882%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (184 samples, 0.30%)</title><rect x="24.2080%" y="245" width="0.2988%" height="15" fill="rgb(241,220,44)" fg:x="14908" fg:w="184"/><text x="24.4580%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (115 samples, 0.19%)</title><rect x="24.3200%" y="229" width="0.1867%" height="15" fill="rgb(235,28,35)" fg:x="14977" fg:w="115"/><text x="24.5700%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (33 samples, 0.05%)</title><rect x="24.4532%" y="213" width="0.0536%" height="15" fill="rgb(210,56,17)" fg:x="15059" fg:w="33"/><text x="24.7032%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (36 samples, 0.06%)</title><rect x="24.5068%" y="261" width="0.0585%" height="15" fill="rgb(224,130,29)" fg:x="15092" fg:w="36"/><text x="24.7568%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="25.7831%" y="245" width="0.0227%" height="15" fill="rgb(235,212,8)" fg:x="15878" fg:w="14"/><text x="26.0331%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="25.8058%" y="245" width="0.0325%" height="15" fill="rgb(223,33,50)" fg:x="15892" fg:w="20"/><text x="26.0558%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="25.8383%" y="245" width="0.0179%" height="15" fill="rgb(219,149,13)" fg:x="15912" fg:w="11"/><text x="26.0883%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="25.8562%" y="245" width="0.0146%" height="15" fill="rgb(250,156,29)" fg:x="15923" fg:w="9"/><text x="26.1062%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (10 samples, 0.02%)</title><rect x="25.8708%" y="245" width="0.0162%" height="15" fill="rgb(216,193,19)" fg:x="15932" fg:w="10"/><text x="26.1208%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (65 samples, 0.11%)</title><rect x="26.8110%" y="213" width="0.1055%" height="15" fill="rgb(216,135,14)" fg:x="16511" fg:w="65"/><text x="27.0610%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (140 samples, 0.23%)</title><rect x="26.6908%" y="229" width="0.2273%" height="15" fill="rgb(241,47,5)" fg:x="16437" fg:w="140"/><text x="26.9408%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 0.06%)</title><rect x="26.9279%" y="229" width="0.0552%" height="15" fill="rgb(233,42,35)" fg:x="16583" fg:w="34"/><text x="27.1779%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="26.9831%" y="229" width="0.0309%" height="15" fill="rgb(231,13,6)" fg:x="16617" fg:w="19"/><text x="27.2331%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (38 samples, 0.06%)</title><rect x="27.0139%" y="229" width="0.0617%" height="15" fill="rgb(207,181,40)" fg:x="16636" fg:w="38"/><text x="27.2639%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="27.0757%" y="229" width="0.0227%" height="15" fill="rgb(254,173,49)" fg:x="16674" fg:w="14"/><text x="27.3257%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (10 samples, 0.02%)</title><rect x="27.0984%" y="229" width="0.0162%" height="15" fill="rgb(221,1,38)" fg:x="16688" fg:w="10"/><text x="27.3484%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="27.1146%" y="229" width="0.0162%" height="15" fill="rgb(206,124,46)" fg:x="16698" fg:w="10"/><text x="27.3646%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.13%)</title><rect x="27.7366%" y="181" width="0.1348%" height="15" fill="rgb(249,21,11)" fg:x="17081" fg:w="83"/><text x="27.9866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.05%)</title><rect x="27.8259%" y="165" width="0.0455%" height="15" fill="rgb(222,201,40)" fg:x="17136" fg:w="28"/><text x="28.0759%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (122 samples, 0.20%)</title><rect x="27.6813%" y="197" width="0.1981%" height="15" fill="rgb(235,61,29)" fg:x="17047" fg:w="122"/><text x="27.9313%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (40 samples, 0.06%)</title><rect x="28.0012%" y="165" width="0.0650%" height="15" fill="rgb(219,207,3)" fg:x="17244" fg:w="40"/><text x="28.2512%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (246 samples, 0.40%)</title><rect x="27.8794%" y="197" width="0.3995%" height="15" fill="rgb(222,56,46)" fg:x="17169" fg:w="246"/><text x="28.1294%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (225 samples, 0.37%)</title><rect x="27.9135%" y="181" width="0.3654%" height="15" fill="rgb(239,76,54)" fg:x="17190" fg:w="225"/><text x="28.1635%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (131 samples, 0.21%)</title><rect x="28.0662%" y="165" width="0.2127%" height="15" fill="rgb(231,124,27)" fg:x="17284" fg:w="131"/><text x="28.3162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (51 samples, 0.08%)</title><rect x="28.1961%" y="149" width="0.0828%" height="15" fill="rgb(249,195,6)" fg:x="17364" fg:w="51"/><text x="28.4461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (460 samples, 0.75%)</title><rect x="27.5417%" y="213" width="0.7470%" height="15" fill="rgb(237,174,47)" fg:x="16961" fg:w="460"/><text x="27.7917%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (32 samples, 0.05%)</title><rect x="28.2887%" y="213" width="0.0520%" height="15" fill="rgb(206,201,31)" fg:x="17421" fg:w="32"/><text x="28.5387%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="28.3406%" y="213" width="0.0276%" height="15" fill="rgb(231,57,52)" fg:x="17453" fg:w="17"/><text x="28.5906%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="28.3682%" y="213" width="0.0114%" height="15" fill="rgb(248,177,22)" fg:x="17470" fg:w="7"/><text x="28.6182%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (114 samples, 0.19%)</title><rect x="28.3796%" y="213" width="0.1851%" height="15" fill="rgb(215,211,37)" fg:x="17477" fg:w="114"/><text x="28.6296%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,848 samples, 3.00%)</title><rect x="25.8951%" y="245" width="3.0008%" height="15" fill="rgb(241,128,51)" fg:x="15947" fg:w="1848"/><text x="26.1451%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,085 samples, 1.76%)</title><rect x="27.1341%" y="229" width="1.7618%" height="15" fill="rgb(227,165,31)" fg:x="16710" fg:w="1085"/><text x="27.3841%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (204 samples, 0.33%)</title><rect x="28.5647%" y="213" width="0.3313%" height="15" fill="rgb(228,167,24)" fg:x="17591" fg:w="204"/><text x="28.8147%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,683 samples, 4.36%)</title><rect x="24.5652%" y="261" width="4.3567%" height="15" fill="rgb(228,143,12)" fg:x="15128" fg:w="2683"/><text x="24.8152%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="28.8960%" y="245" width="0.0260%" height="15" fill="rgb(249,149,8)" fg:x="17795" fg:w="16"/><text x="29.1460%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,995 samples, 3.24%)</title><rect x="28.9219%" y="261" width="3.2395%" height="15" fill="rgb(243,35,44)" fg:x="17811" fg:w="1995"/><text x="29.1719%" y="271.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (121 samples, 0.20%)</title><rect x="32.1615%" y="261" width="0.1965%" height="15" fill="rgb(246,89,9)" fg:x="19806" fg:w="121"/><text x="32.4115%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (64 samples, 0.10%)</title><rect x="32.7071%" y="245" width="0.1039%" height="15" fill="rgb(233,213,13)" fg:x="20142" fg:w="64"/><text x="32.9571%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="33.0383%" y="229" width="0.0325%" height="15" fill="rgb(233,141,41)" fg:x="20346" fg:w="20"/><text x="33.2883%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.02%)</title><rect x="33.0530%" y="213" width="0.0179%" height="15" fill="rgb(239,167,4)" fg:x="20355" fg:w="11"/><text x="33.3030%" y="223.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (39 samples, 0.06%)</title><rect x="33.0724%" y="229" width="0.0633%" height="15" fill="rgb(209,217,16)" fg:x="20367" fg:w="39"/><text x="33.3224%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (154 samples, 0.25%)</title><rect x="33.1358%" y="229" width="0.2501%" height="15" fill="rgb(219,88,35)" fg:x="20406" fg:w="154"/><text x="33.3858%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (861 samples, 1.40%)</title><rect x="32.3580%" y="261" width="1.3981%" height="15" fill="rgb(220,193,23)" fg:x="19927" fg:w="861"/><text x="32.6080%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (582 samples, 0.95%)</title><rect x="32.8110%" y="245" width="0.9451%" height="15" fill="rgb(230,90,52)" fg:x="20206" fg:w="582"/><text x="33.0610%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (228 samples, 0.37%)</title><rect x="33.3858%" y="229" width="0.3702%" height="15" fill="rgb(252,106,19)" fg:x="20560" fg:w="228"/><text x="33.6358%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (106 samples, 0.17%)</title><rect x="33.7561%" y="261" width="0.1721%" height="15" fill="rgb(206,74,20)" fg:x="20788" fg:w="106"/><text x="34.0061%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (16 samples, 0.03%)</title><rect x="33.9298%" y="261" width="0.0260%" height="15" fill="rgb(230,138,44)" fg:x="20895" fg:w="16"/><text x="34.1798%" y="271.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (391 samples, 0.63%)</title><rect x="33.9558%" y="261" width="0.6349%" height="15" fill="rgb(235,182,43)" fg:x="20911" fg:w="391"/><text x="34.2058%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (463 samples, 0.75%)</title><rect x="36.8300%" y="229" width="0.7518%" height="15" fill="rgb(242,16,51)" fg:x="22681" fg:w="463"/><text x="37.0800%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,046 samples, 3.32%)</title><rect x="35.1136%" y="245" width="3.3223%" height="15" fill="rgb(248,9,4)" fg:x="21624" fg:w="2046"/><text x="35.3636%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (526 samples, 0.85%)</title><rect x="37.5818%" y="229" width="0.8541%" height="15" fill="rgb(210,31,22)" fg:x="23144" fg:w="526"/><text x="37.8318%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,461 samples, 4.00%)</title><rect x="34.5907%" y="261" width="3.9962%" height="15" fill="rgb(239,54,39)" fg:x="21302" fg:w="2461"/><text x="34.8407%" y="271.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (93 samples, 0.15%)</title><rect x="38.4359%" y="245" width="0.1510%" height="15" fill="rgb(230,99,41)" fg:x="23670" fg:w="93"/><text x="38.6859%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,940 samples, 4.77%)</title><rect x="41.8654%" y="245" width="4.7740%" height="15" fill="rgb(253,106,12)" fg:x="25782" fg:w="2940"/><text x="42.1154%" y="255.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.01%)</title><rect x="46.6525%" y="181" width="0.0146%" height="15" fill="rgb(213,46,41)" fg:x="28730" fg:w="9"/><text x="46.9025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.03%)</title><rect x="46.6492%" y="197" width="0.0276%" height="15" fill="rgb(215,133,35)" fg:x="28728" fg:w="17"/><text x="46.8992%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.04%)</title><rect x="46.6411%" y="245" width="0.0390%" height="15" fill="rgb(213,28,5)" fg:x="28723" fg:w="24"/><text x="46.8911%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (23 samples, 0.04%)</title><rect x="46.6427%" y="229" width="0.0373%" height="15" fill="rgb(215,77,49)" fg:x="28724" fg:w="23"/><text x="46.8927%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.04%)</title><rect x="46.6444%" y="213" width="0.0357%" height="15" fill="rgb(248,100,22)" fg:x="28725" fg:w="22"/><text x="46.8944%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,838 samples, 2.98%)</title><rect x="46.6801%" y="245" width="2.9846%" height="15" fill="rgb(208,67,9)" fg:x="28747" fg:w="1838"/><text x="46.9301%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (416 samples, 0.68%)</title><rect x="49.6647%" y="245" width="0.6755%" height="15" fill="rgb(219,133,21)" fg:x="30585" fg:w="416"/><text x="49.9147%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (49 samples, 0.08%)</title><rect x="50.3905%" y="229" width="0.0796%" height="15" fill="rgb(246,46,29)" fg:x="31032" fg:w="49"/><text x="50.6405%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (150 samples, 0.24%)</title><rect x="50.6097%" y="213" width="0.2436%" height="15" fill="rgb(246,185,52)" fg:x="31167" fg:w="150"/><text x="50.8597%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (428 samples, 0.69%)</title><rect x="50.3402%" y="245" width="0.6950%" height="15" fill="rgb(252,136,11)" fg:x="31001" fg:w="428"/><text x="50.5902%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (348 samples, 0.57%)</title><rect x="50.4701%" y="229" width="0.5651%" height="15" fill="rgb(219,138,53)" fg:x="31081" fg:w="348"/><text x="50.7201%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (112 samples, 0.18%)</title><rect x="50.8533%" y="213" width="0.1819%" height="15" fill="rgb(211,51,23)" fg:x="31317" fg:w="112"/><text x="51.1033%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.01%)</title><rect x="53.6495%" y="165" width="0.0130%" height="15" fill="rgb(247,221,28)" fg:x="33039" fg:w="8"/><text x="53.8995%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.05%)</title><rect x="53.6463%" y="181" width="0.0471%" height="15" fill="rgb(251,222,45)" fg:x="33037" fg:w="29"/><text x="53.8963%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.03%)</title><rect x="53.6625%" y="165" width="0.0309%" height="15" fill="rgb(217,162,53)" fg:x="33047" fg:w="19"/><text x="53.9125%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (9,305 samples, 15.11%)</title><rect x="38.5869%" y="261" width="15.1097%" height="15" fill="rgb(229,93,14)" fg:x="23763" fg:w="9305"/><text x="38.8369%" y="271.50">rust_qecp`rust_qecp::ft..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,639 samples, 2.66%)</title><rect x="51.0352%" y="245" width="2.6614%" height="15" fill="rgb(209,67,49)" fg:x="31429" fg:w="1639"/><text x="51.2852%" y="255.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.05%)</title><rect x="53.6463%" y="229" width="0.0503%" height="15" fill="rgb(213,87,29)" fg:x="33037" fg:w="31"/><text x="53.8963%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (31 samples, 0.05%)</title><rect x="53.6463%" y="213" width="0.0503%" height="15" fill="rgb(205,151,52)" fg:x="33037" fg:w="31"/><text x="53.8963%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.05%)</title><rect x="53.6463%" y="197" width="0.0503%" height="15" fill="rgb(253,215,39)" fg:x="33037" fg:w="31"/><text x="53.8963%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (12 samples, 0.02%)</title><rect x="53.6966%" y="261" width="0.0195%" height="15" fill="rgb(221,220,41)" fg:x="33068" fg:w="12"/><text x="53.9466%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (10 samples, 0.02%)</title><rect x="53.7161%" y="261" width="0.0162%" height="15" fill="rgb(218,133,21)" fg:x="33080" fg:w="10"/><text x="53.9661%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.01%)</title><rect x="55.1467%" y="165" width="0.0114%" height="15" fill="rgb(221,193,43)" fg:x="33961" fg:w="7"/><text x="55.3967%" y="175.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 0.08%)</title><rect x="55.0866%" y="245" width="0.0763%" height="15" fill="rgb(240,128,52)" fg:x="33924" fg:w="47"/><text x="55.3366%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="55.1451%" y="229" width="0.0179%" height="15" fill="rgb(253,114,12)" fg:x="33960" fg:w="11"/><text x="55.3951%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="55.1451%" y="213" width="0.0179%" height="15" fill="rgb(215,223,47)" fg:x="33960" fg:w="11"/><text x="55.3951%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="55.1451%" y="197" width="0.0179%" height="15" fill="rgb(248,225,23)" fg:x="33960" fg:w="11"/><text x="55.3951%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.02%)</title><rect x="55.1467%" y="181" width="0.0162%" height="15" fill="rgb(250,108,0)" fg:x="33961" fg:w="10"/><text x="55.3967%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="55.2068%" y="213" width="0.0227%" height="15" fill="rgb(228,208,7)" fg:x="33998" fg:w="14"/><text x="55.4568%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (17 samples, 0.03%)</title><rect x="55.2295%" y="213" width="0.0276%" height="15" fill="rgb(244,45,10)" fg:x="34012" fg:w="17"/><text x="55.4795%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (66 samples, 0.11%)</title><rect x="55.1711%" y="229" width="0.1072%" height="15" fill="rgb(207,125,25)" fg:x="33976" fg:w="66"/><text x="55.4211%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="55.2571%" y="213" width="0.0211%" height="15" fill="rgb(210,195,18)" fg:x="34029" fg:w="13"/><text x="55.5071%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (82 samples, 0.13%)</title><rect x="55.1630%" y="245" width="0.1332%" height="15" fill="rgb(249,80,12)" fg:x="33971" fg:w="82"/><text x="55.4130%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="55.2782%" y="229" width="0.0179%" height="15" fill="rgb(221,65,9)" fg:x="34042" fg:w="11"/><text x="55.5282%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.06%)</title><rect x="55.2961%" y="229" width="0.0568%" height="15" fill="rgb(235,49,36)" fg:x="34053" fg:w="35"/><text x="55.5461%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.03%)</title><rect x="55.3708%" y="229" width="0.0260%" height="15" fill="rgb(225,32,20)" fg:x="34099" fg:w="16"/><text x="55.6208%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.02%)</title><rect x="55.3968%" y="229" width="0.0162%" height="15" fill="rgb(215,141,46)" fg:x="34115" fg:w="10"/><text x="55.6468%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.02%)</title><rect x="55.4130%" y="229" width="0.0195%" height="15" fill="rgb(250,160,47)" fg:x="34125" fg:w="12"/><text x="55.6630%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="55.6387%" y="197" width="0.0195%" height="15" fill="rgb(216,222,40)" fg:x="34264" fg:w="12"/><text x="55.8887%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (43 samples, 0.07%)</title><rect x="55.9002%" y="165" width="0.0698%" height="15" fill="rgb(234,217,39)" fg:x="34425" fg:w="43"/><text x="56.1502%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (163 samples, 0.26%)</title><rect x="55.7086%" y="181" width="0.2647%" height="15" fill="rgb(207,178,40)" fg:x="34307" fg:w="163"/><text x="55.9586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (305 samples, 0.50%)</title><rect x="55.5023%" y="213" width="0.4953%" height="15" fill="rgb(221,136,13)" fg:x="34180" fg:w="305"/><text x="55.7523%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (209 samples, 0.34%)</title><rect x="55.6582%" y="197" width="0.3394%" height="15" fill="rgb(249,199,10)" fg:x="34276" fg:w="209"/><text x="55.9082%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.02%)</title><rect x="55.9732%" y="181" width="0.0244%" height="15" fill="rgb(249,222,13)" fg:x="34470" fg:w="15"/><text x="56.2232%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.04%)</title><rect x="55.9976%" y="213" width="0.0438%" height="15" fill="rgb(244,185,38)" fg:x="34485" fg:w="27"/><text x="56.2476%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (123 samples, 0.20%)</title><rect x="56.0414%" y="213" width="0.1997%" height="15" fill="rgb(236,202,9)" fg:x="34512" fg:w="123"/><text x="56.2914%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (55 samples, 0.09%)</title><rect x="56.1519%" y="197" width="0.0893%" height="15" fill="rgb(250,229,37)" fg:x="34580" fg:w="55"/><text x="56.4019%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="56.2412%" y="213" width="0.0244%" height="15" fill="rgb(206,174,23)" fg:x="34635" fg:w="15"/><text x="56.4912%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="56.2655%" y="213" width="0.0471%" height="15" fill="rgb(211,33,43)" fg:x="34650" fg:w="29"/><text x="56.5155%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="56.3159%" y="213" width="0.0162%" height="15" fill="rgb(245,58,50)" fg:x="34681" fg:w="10"/><text x="56.5659%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (213 samples, 0.35%)</title><rect x="56.3743%" y="197" width="0.3459%" height="15" fill="rgb(244,68,36)" fg:x="34717" fg:w="213"/><text x="56.6243%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="56.7299%" y="197" width="0.0146%" height="15" fill="rgb(232,229,15)" fg:x="34936" fg:w="9"/><text x="56.9799%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="56.7446%" y="197" width="0.0114%" height="15" fill="rgb(254,30,23)" fg:x="34945" fg:w="7"/><text x="56.9946%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.07%)</title><rect x="56.7900%" y="181" width="0.0714%" height="15" fill="rgb(235,160,14)" fg:x="34973" fg:w="44"/><text x="57.0400%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (67 samples, 0.11%)</title><rect x="56.8615%" y="181" width="0.1088%" height="15" fill="rgb(212,155,44)" fg:x="35017" fg:w="67"/><text x="57.1115%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (141 samples, 0.23%)</title><rect x="56.7559%" y="197" width="0.2290%" height="15" fill="rgb(226,2,50)" fg:x="34952" fg:w="141"/><text x="57.0059%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="56.9703%" y="181" width="0.0146%" height="15" fill="rgb(234,177,6)" fg:x="35084" fg:w="9"/><text x="57.2203%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="56.9849%" y="197" width="0.0211%" height="15" fill="rgb(217,24,9)" fg:x="35093" fg:w="13"/><text x="57.2349%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.05%)</title><rect x="57.2739%" y="133" width="0.0455%" height="15" fill="rgb(220,13,46)" fg:x="35271" fg:w="28"/><text x="57.5239%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (123 samples, 0.20%)</title><rect x="57.1603%" y="149" width="0.1997%" height="15" fill="rgb(239,221,27)" fg:x="35201" fg:w="123"/><text x="57.4103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (25 samples, 0.04%)</title><rect x="57.3194%" y="133" width="0.0406%" height="15" fill="rgb(222,198,25)" fg:x="35299" fg:w="25"/><text x="57.5694%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (184 samples, 0.30%)</title><rect x="57.0791%" y="181" width="0.2988%" height="15" fill="rgb(211,99,13)" fg:x="35151" fg:w="184"/><text x="57.3291%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (147 samples, 0.24%)</title><rect x="57.1391%" y="165" width="0.2387%" height="15" fill="rgb(232,111,31)" fg:x="35188" fg:w="147"/><text x="57.3891%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="57.3600%" y="149" width="0.0179%" height="15" fill="rgb(245,82,37)" fg:x="35324" fg:w="11"/><text x="57.6100%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.02%)</title><rect x="57.3778%" y="181" width="0.0211%" height="15" fill="rgb(227,149,46)" fg:x="35335" fg:w="13"/><text x="57.6278%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (659 samples, 1.07%)</title><rect x="56.3321%" y="213" width="1.0701%" height="15" fill="rgb(218,36,50)" fg:x="34691" fg:w="659"/><text x="56.5821%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (244 samples, 0.40%)</title><rect x="57.0060%" y="197" width="0.3962%" height="15" fill="rgb(226,80,48)" fg:x="35106" fg:w="244"/><text x="57.2560%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.05%)</title><rect x="57.5110%" y="197" width="0.0455%" height="15" fill="rgb(238,224,15)" fg:x="35417" fg:w="28"/><text x="57.7610%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (63 samples, 0.10%)</title><rect x="57.5565%" y="197" width="0.1023%" height="15" fill="rgb(241,136,10)" fg:x="35445" fg:w="63"/><text x="57.8065%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (204 samples, 0.33%)</title><rect x="57.4022%" y="213" width="0.3313%" height="15" fill="rgb(208,32,45)" fg:x="35350" fg:w="204"/><text x="57.6522%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (46 samples, 0.07%)</title><rect x="57.6588%" y="197" width="0.0747%" height="15" fill="rgb(207,135,9)" fg:x="35508" fg:w="46"/><text x="57.9088%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="57.7335%" y="213" width="0.0244%" height="15" fill="rgb(206,86,44)" fg:x="35554" fg:w="15"/><text x="57.9835%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,442 samples, 2.34%)</title><rect x="55.4390%" y="229" width="2.3416%" height="15" fill="rgb(245,177,15)" fg:x="34141" fg:w="1442"/><text x="55.6890%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="57.7578%" y="213" width="0.0227%" height="15" fill="rgb(206,64,50)" fg:x="35569" fg:w="14"/><text x="58.0078%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (19 samples, 0.03%)</title><rect x="57.7968%" y="229" width="0.0309%" height="15" fill="rgb(234,36,40)" fg:x="35593" fg:w="19"/><text x="58.0468%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="57.8276%" y="229" width="0.0146%" height="15" fill="rgb(213,64,8)" fg:x="35612" fg:w="9"/><text x="58.0776%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.02%)</title><rect x="57.8423%" y="229" width="0.0162%" height="15" fill="rgb(210,75,36)" fg:x="35621" fg:w="10"/><text x="58.0923%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,581 samples, 2.57%)</title><rect x="55.2961%" y="245" width="2.5673%" height="15" fill="rgb(229,88,21)" fg:x="34053" fg:w="1581"/><text x="55.5461%" y="255.50">ru..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="57.9998%" y="229" width="0.0114%" height="15" fill="rgb(252,204,47)" fg:x="35718" fg:w="7"/><text x="58.2498%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.03%)</title><rect x="58.0111%" y="229" width="0.0292%" height="15" fill="rgb(208,77,27)" fg:x="35725" fg:w="18"/><text x="58.2611%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="58.0404%" y="229" width="0.0162%" height="15" fill="rgb(221,76,26)" fg:x="35743" fg:w="10"/><text x="58.2904%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (19 samples, 0.03%)</title><rect x="58.0566%" y="229" width="0.0309%" height="15" fill="rgb(225,139,18)" fg:x="35753" fg:w="19"/><text x="58.3066%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="58.0875%" y="229" width="0.0146%" height="15" fill="rgb(230,137,11)" fg:x="35772" fg:w="9"/><text x="58.3375%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (11 samples, 0.02%)</title><rect x="58.1021%" y="229" width="0.0179%" height="15" fill="rgb(212,28,1)" fg:x="35781" fg:w="11"/><text x="58.3521%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (84 samples, 0.14%)</title><rect x="58.2726%" y="181" width="0.1364%" height="15" fill="rgb(248,164,17)" fg:x="35886" fg:w="84"/><text x="58.5226%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="58.3765%" y="165" width="0.0325%" height="15" fill="rgb(222,171,42)" fg:x="35950" fg:w="20"/><text x="58.6265%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (167 samples, 0.27%)</title><rect x="58.1670%" y="213" width="0.2712%" height="15" fill="rgb(243,84,45)" fg:x="35821" fg:w="167"/><text x="58.4170%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 0.19%)</title><rect x="58.2466%" y="197" width="0.1916%" height="15" fill="rgb(252,49,23)" fg:x="35870" fg:w="118"/><text x="58.4966%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="58.4090%" y="181" width="0.0292%" height="15" fill="rgb(215,19,7)" fg:x="35970" fg:w="18"/><text x="58.6590%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="58.4382%" y="213" width="0.0244%" height="15" fill="rgb(238,81,41)" fg:x="35988" fg:w="15"/><text x="58.6882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="58.4674%" y="213" width="0.0211%" height="15" fill="rgb(210,199,37)" fg:x="36006" fg:w="13"/><text x="58.7174%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (26 samples, 0.04%)</title><rect x="58.6526%" y="197" width="0.0422%" height="15" fill="rgb(244,192,49)" fg:x="36120" fg:w="26"/><text x="58.9026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (17 samples, 0.03%)</title><rect x="58.7938%" y="181" width="0.0276%" height="15" fill="rgb(226,211,11)" fg:x="36207" fg:w="17"/><text x="59.0438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (23 samples, 0.04%)</title><rect x="58.8214%" y="181" width="0.0373%" height="15" fill="rgb(236,162,54)" fg:x="36224" fg:w="23"/><text x="59.0714%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (154 samples, 0.25%)</title><rect x="58.8588%" y="181" width="0.2501%" height="15" fill="rgb(220,229,9)" fg:x="36247" fg:w="154"/><text x="59.1088%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (28 samples, 0.05%)</title><rect x="59.2371%" y="165" width="0.0455%" height="15" fill="rgb(250,87,22)" fg:x="36480" fg:w="28"/><text x="59.4871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (97 samples, 0.16%)</title><rect x="59.2826%" y="165" width="0.1575%" height="15" fill="rgb(239,43,17)" fg:x="36508" fg:w="97"/><text x="59.5326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (35 samples, 0.06%)</title><rect x="59.5944%" y="133" width="0.0568%" height="15" fill="rgb(231,177,25)" fg:x="36700" fg:w="35"/><text x="59.8444%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.19%)</title><rect x="59.4839%" y="149" width="0.1867%" height="15" fill="rgb(219,179,1)" fg:x="36632" fg:w="115"/><text x="59.7339%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.02%)</title><rect x="59.6512%" y="133" width="0.0195%" height="15" fill="rgb(238,219,53)" fg:x="36735" fg:w="12"/><text x="59.9012%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (150 samples, 0.24%)</title><rect x="59.4401%" y="165" width="0.2436%" height="15" fill="rgb(232,167,36)" fg:x="36605" fg:w="150"/><text x="59.6901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="59.6707%" y="149" width="0.0130%" height="15" fill="rgb(244,19,51)" fg:x="36747" fg:w="8"/><text x="59.9207%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (103 samples, 0.17%)</title><rect x="59.6837%" y="165" width="0.1673%" height="15" fill="rgb(224,6,22)" fg:x="36755" fg:w="103"/><text x="59.9337%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (33 samples, 0.05%)</title><rect x="59.9695%" y="133" width="0.0536%" height="15" fill="rgb(224,145,5)" fg:x="36931" fg:w="33"/><text x="60.2195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (196 samples, 0.32%)</title><rect x="59.8509%" y="165" width="0.3183%" height="15" fill="rgb(234,130,49)" fg:x="36858" fg:w="196"/><text x="60.1009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (185 samples, 0.30%)</title><rect x="59.8688%" y="149" width="0.3004%" height="15" fill="rgb(254,6,2)" fg:x="36869" fg:w="185"/><text x="60.1188%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (90 samples, 0.15%)</title><rect x="60.0231%" y="133" width="0.1461%" height="15" fill="rgb(208,96,46)" fg:x="36964" fg:w="90"/><text x="60.2731%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (664 samples, 1.08%)</title><rect x="59.1088%" y="181" width="1.0782%" height="15" fill="rgb(239,3,39)" fg:x="36401" fg:w="664"/><text x="59.3588%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="60.1692%" y="165" width="0.0179%" height="15" fill="rgb(233,210,1)" fg:x="37054" fg:w="11"/><text x="60.4192%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (960 samples, 1.56%)</title><rect x="58.6948%" y="197" width="1.5589%" height="15" fill="rgb(244,137,37)" fg:x="36146" fg:w="960"/><text x="58.9448%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.06%)</title><rect x="60.1887%" y="181" width="0.0650%" height="15" fill="rgb(240,136,2)" fg:x="37066" fg:w="40"/><text x="60.4387%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (95 samples, 0.15%)</title><rect x="60.2536%" y="197" width="0.1543%" height="15" fill="rgb(239,18,37)" fg:x="37106" fg:w="95"/><text x="60.5036%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="60.4079%" y="197" width="0.0341%" height="15" fill="rgb(218,185,22)" fg:x="37201" fg:w="21"/><text x="60.6579%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,210 samples, 1.96%)</title><rect x="58.4885%" y="213" width="1.9648%" height="15" fill="rgb(225,218,4)" fg:x="36019" fg:w="1210"/><text x="58.7385%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="60.4420%" y="197" width="0.0114%" height="15" fill="rgb(230,182,32)" fg:x="37222" fg:w="7"/><text x="60.6920%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,599 samples, 2.60%)</title><rect x="57.8682%" y="245" width="2.5965%" height="15" fill="rgb(242,56,43)" fg:x="35637" fg:w="1599"/><text x="58.1182%" y="255.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,444 samples, 2.34%)</title><rect x="58.1199%" y="229" width="2.3448%" height="15" fill="rgb(233,99,24)" fg:x="35792" fg:w="1444"/><text x="58.3699%" y="239.50">r..</text></g><g><title>rust_qecp`__rdl_realloc (7 samples, 0.01%)</title><rect x="60.4534%" y="213" width="0.0114%" height="15" fill="rgb(234,209,42)" fg:x="37229" fg:w="7"/><text x="60.7034%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (38 samples, 0.06%)</title><rect x="60.4647%" y="245" width="0.0617%" height="15" fill="rgb(227,7,12)" fg:x="37236" fg:w="38"/><text x="60.7147%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (97 samples, 0.16%)</title><rect x="60.5264%" y="229" width="0.1575%" height="15" fill="rgb(245,203,43)" fg:x="37274" fg:w="97"/><text x="60.7764%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.02%)</title><rect x="60.9714%" y="213" width="0.0244%" height="15" fill="rgb(238,205,33)" fg:x="37548" fg:w="15"/><text x="61.2214%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="61.2344%" y="181" width="0.0146%" height="15" fill="rgb(231,56,7)" fg:x="37710" fg:w="9"/><text x="61.4844%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (15 samples, 0.02%)</title><rect x="61.2490%" y="181" width="0.0244%" height="15" fill="rgb(244,186,29)" fg:x="37719" fg:w="15"/><text x="61.4990%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="61.3091%" y="165" width="0.0130%" height="15" fill="rgb(234,111,31)" fg:x="37756" fg:w="8"/><text x="61.5591%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (68 samples, 0.11%)</title><rect x="61.4439%" y="149" width="0.1104%" height="15" fill="rgb(241,149,10)" fg:x="37839" fg:w="68"/><text x="61.6939%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (265 samples, 0.43%)</title><rect x="61.6388%" y="133" width="0.4303%" height="15" fill="rgb(249,206,44)" fg:x="37959" fg:w="265"/><text x="61.8888%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (30 samples, 0.05%)</title><rect x="62.0691%" y="133" width="0.0487%" height="15" fill="rgb(251,153,30)" fg:x="38224" fg:w="30"/><text x="62.3191%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (770 samples, 1.25%)</title><rect x="61.0834%" y="197" width="1.2503%" height="15" fill="rgb(239,152,38)" fg:x="37617" fg:w="770"/><text x="61.3334%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (653 samples, 1.06%)</title><rect x="61.2734%" y="181" width="1.0604%" height="15" fill="rgb(249,139,47)" fg:x="37734" fg:w="653"/><text x="61.5234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (623 samples, 1.01%)</title><rect x="61.3221%" y="165" width="1.0116%" height="15" fill="rgb(244,64,35)" fg:x="37764" fg:w="623"/><text x="61.5721%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (479 samples, 0.78%)</title><rect x="61.5559%" y="149" width="0.7778%" height="15" fill="rgb(216,46,15)" fg:x="37908" fg:w="479"/><text x="61.8059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (133 samples, 0.22%)</title><rect x="62.1178%" y="133" width="0.2160%" height="15" fill="rgb(250,74,19)" fg:x="38254" fg:w="133"/><text x="62.3678%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (50 samples, 0.08%)</title><rect x="62.3338%" y="197" width="0.0812%" height="15" fill="rgb(249,42,33)" fg:x="38387" fg:w="50"/><text x="62.5838%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (142 samples, 0.23%)</title><rect x="62.4150%" y="197" width="0.2306%" height="15" fill="rgb(242,149,17)" fg:x="38437" fg:w="142"/><text x="62.6650%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,216 samples, 1.97%)</title><rect x="60.6840%" y="229" width="1.9746%" height="15" fill="rgb(244,29,21)" fg:x="37371" fg:w="1216"/><text x="60.9340%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,017 samples, 1.65%)</title><rect x="61.0071%" y="213" width="1.6514%" height="15" fill="rgb(220,130,37)" fg:x="37570" fg:w="1017"/><text x="61.2571%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="62.6455%" y="197" width="0.0130%" height="15" fill="rgb(211,67,2)" fg:x="38579" fg:w="8"/><text x="62.8955%" y="207.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,329 samples, 2.16%)</title><rect x="60.5264%" y="245" width="2.1581%" height="15" fill="rgb(235,68,52)" fg:x="37274" fg:w="1329"/><text x="60.7764%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (16 samples, 0.03%)</title><rect x="62.6585%" y="229" width="0.0260%" height="15" fill="rgb(246,142,3)" fg:x="38587" fg:w="16"/><text x="62.9085%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (38 samples, 0.06%)</title><rect x="63.0288%" y="229" width="0.0617%" height="15" fill="rgb(241,25,7)" fg:x="38815" fg:w="38"/><text x="63.2788%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (9 samples, 0.01%)</title><rect x="63.5110%" y="213" width="0.0146%" height="15" fill="rgb(242,119,39)" fg:x="39112" fg:w="9"/><text x="63.7610%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.05%)</title><rect x="63.9641%" y="197" width="0.0471%" height="15" fill="rgb(241,98,45)" fg:x="39391" fg:w="29"/><text x="64.2141%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (24 samples, 0.04%)</title><rect x="64.4577%" y="181" width="0.0390%" height="15" fill="rgb(254,28,30)" fg:x="39695" fg:w="24"/><text x="64.7077%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (32 samples, 0.05%)</title><rect x="64.8068%" y="165" width="0.0520%" height="15" fill="rgb(241,142,54)" fg:x="39910" fg:w="32"/><text x="65.0568%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (20 samples, 0.03%)</title><rect x="65.0358%" y="149" width="0.0325%" height="15" fill="rgb(222,85,15)" fg:x="40051" fg:w="20"/><text x="65.2858%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (7 samples, 0.01%)</title><rect x="65.1170%" y="133" width="0.0114%" height="15" fill="rgb(210,85,47)" fg:x="40101" fg:w="7"/><text x="65.3670%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,511 samples, 2.45%)</title><rect x="62.6845%" y="245" width="2.4536%" height="15" fill="rgb(224,206,25)" fg:x="38603" fg:w="1511"/><text x="62.9345%" y="255.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,261 samples, 2.05%)</title><rect x="63.0905%" y="229" width="2.0476%" height="15" fill="rgb(243,201,19)" fg:x="38853" fg:w="1261"/><text x="63.3405%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (993 samples, 1.61%)</title><rect x="63.5256%" y="213" width="1.6125%" height="15" fill="rgb(236,59,4)" fg:x="39121" fg:w="993"/><text x="63.7756%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (694 samples, 1.13%)</title><rect x="64.0112%" y="197" width="1.1269%" height="15" fill="rgb(254,179,45)" fg:x="39420" fg:w="694"/><text x="64.2612%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (395 samples, 0.64%)</title><rect x="64.4967%" y="181" width="0.6414%" height="15" fill="rgb(226,14,10)" fg:x="39719" fg:w="395"/><text x="64.7467%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (172 samples, 0.28%)</title><rect x="64.8588%" y="165" width="0.2793%" height="15" fill="rgb(244,27,41)" fg:x="39942" fg:w="172"/><text x="65.1088%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (43 samples, 0.07%)</title><rect x="65.0683%" y="149" width="0.0698%" height="15" fill="rgb(235,35,32)" fg:x="40071" fg:w="43"/><text x="65.3183%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (401 samples, 0.65%)</title><rect x="65.8753%" y="229" width="0.6512%" height="15" fill="rgb(218,68,31)" fg:x="40568" fg:w="401"/><text x="66.1253%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (726 samples, 1.18%)</title><rect x="66.5265%" y="229" width="1.1789%" height="15" fill="rgb(207,120,37)" fg:x="40969" fg:w="726"/><text x="66.7765%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,108 samples, 3.42%)</title><rect x="65.1381%" y="245" width="3.4230%" height="15" fill="rgb(227,98,0)" fg:x="40114" fg:w="2108"/><text x="65.3881%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (527 samples, 0.86%)</title><rect x="67.7054%" y="229" width="0.8558%" height="15" fill="rgb(207,7,3)" fg:x="41695" fg:w="527"/><text x="67.9554%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (41 samples, 0.07%)</title><rect x="68.5611%" y="245" width="0.0666%" height="15" fill="rgb(206,98,19)" fg:x="42222" fg:w="41"/><text x="68.8111%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (9,431 samples, 15.31%)</title><rect x="53.7324%" y="261" width="15.3143%" height="15" fill="rgb(217,5,26)" fg:x="33090" fg:w="9431"/><text x="53.9824%" y="271.50">rust_qecp`rust_qecp::un..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (258 samples, 0.42%)</title><rect x="68.6277%" y="245" width="0.4189%" height="15" fill="rgb(235,190,38)" fg:x="42263" fg:w="258"/><text x="68.8777%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.03%)</title><rect x="74.4572%" y="245" width="0.0341%" height="15" fill="rgb(247,86,24)" fg:x="45853" fg:w="21"/><text x="74.7072%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="74.5871%" y="229" width="0.0146%" height="15" fill="rgb(205,101,16)" fg:x="45933" fg:w="9"/><text x="74.8371%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.06%)</title><rect x="74.7284%" y="197" width="0.0650%" height="15" fill="rgb(246,168,33)" fg:x="46020" fg:w="40"/><text x="74.9784%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (96 samples, 0.16%)</title><rect x="74.6391%" y="213" width="0.1559%" height="15" fill="rgb(231,114,1)" fg:x="45965" fg:w="96"/><text x="74.8891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (125 samples, 0.20%)</title><rect x="74.6018%" y="229" width="0.2030%" height="15" fill="rgb(207,184,53)" fg:x="45942" fg:w="125"/><text x="74.8518%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (198 samples, 0.32%)</title><rect x="74.4913%" y="245" width="0.3215%" height="15" fill="rgb(224,95,51)" fg:x="45874" fg:w="198"/><text x="74.7413%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.03%)</title><rect x="74.8129%" y="245" width="0.0260%" height="15" fill="rgb(212,188,45)" fg:x="46072" fg:w="16"/><text x="75.0629%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (164 samples, 0.27%)</title><rect x="75.1344%" y="229" width="0.2663%" height="15" fill="rgb(223,154,38)" fg:x="46270" fg:w="164"/><text x="75.3844%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (410 samples, 0.67%)</title><rect x="74.8388%" y="245" width="0.6658%" height="15" fill="rgb(251,22,52)" fg:x="46088" fg:w="410"/><text x="75.0888%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (59 samples, 0.10%)</title><rect x="75.4088%" y="229" width="0.0958%" height="15" fill="rgb(229,209,22)" fg:x="46439" fg:w="59"/><text x="75.6588%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (49 samples, 0.08%)</title><rect x="75.4250%" y="213" width="0.0796%" height="15" fill="rgb(234,138,34)" fg:x="46449" fg:w="49"/><text x="75.6750%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (241 samples, 0.39%)</title><rect x="75.5095%" y="229" width="0.3913%" height="15" fill="rgb(212,95,11)" fg:x="46501" fg:w="241"/><text x="75.7595%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (245 samples, 0.40%)</title><rect x="75.5046%" y="245" width="0.3978%" height="15" fill="rgb(240,179,47)" fg:x="46498" fg:w="245"/><text x="75.7546%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (33 samples, 0.05%)</title><rect x="75.9024%" y="245" width="0.0536%" height="15" fill="rgb(240,163,11)" fg:x="46743" fg:w="33"/><text x="76.1524%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.03%)</title><rect x="76.0177%" y="213" width="0.0292%" height="15" fill="rgb(236,37,12)" fg:x="46814" fg:w="18"/><text x="76.2677%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (60 samples, 0.10%)</title><rect x="75.9560%" y="245" width="0.0974%" height="15" fill="rgb(232,164,16)" fg:x="46776" fg:w="60"/><text x="76.2060%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.07%)</title><rect x="75.9804%" y="229" width="0.0731%" height="15" fill="rgb(244,205,15)" fg:x="46791" fg:w="45"/><text x="76.2304%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.03%)</title><rect x="76.0535%" y="245" width="0.0292%" height="15" fill="rgb(223,117,47)" fg:x="46836" fg:w="18"/><text x="76.3035%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.05%)</title><rect x="76.3360%" y="213" width="0.0455%" height="15" fill="rgb(244,107,35)" fg:x="47010" fg:w="28"/><text x="76.5860%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (185 samples, 0.30%)</title><rect x="76.0827%" y="245" width="0.3004%" height="15" fill="rgb(205,140,8)" fg:x="46854" fg:w="185"/><text x="76.3327%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (29 samples, 0.05%)</title><rect x="76.3360%" y="229" width="0.0471%" height="15" fill="rgb(228,84,46)" fg:x="47010" fg:w="29"/><text x="76.5860%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (38 samples, 0.06%)</title><rect x="76.3847%" y="245" width="0.0617%" height="15" fill="rgb(254,188,9)" fg:x="47040" fg:w="38"/><text x="76.6347%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.02%)</title><rect x="76.4464%" y="245" width="0.0179%" height="15" fill="rgb(206,112,54)" fg:x="47078" fg:w="11"/><text x="76.6964%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (77 samples, 0.13%)</title><rect x="76.4740%" y="245" width="0.1250%" height="15" fill="rgb(216,84,49)" fg:x="47095" fg:w="77"/><text x="76.7240%" y="255.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.05%)</title><rect x="76.5991%" y="245" width="0.0455%" height="15" fill="rgb(214,194,35)" fg:x="47172" fg:w="28"/><text x="76.8491%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="76.6884%" y="213" width="0.0309%" height="15" fill="rgb(249,28,3)" fg:x="47227" fg:w="19"/><text x="76.9384%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (18 samples, 0.03%)</title><rect x="76.7192%" y="213" width="0.0292%" height="15" fill="rgb(222,56,52)" fg:x="47246" fg:w="18"/><text x="76.9692%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (78 samples, 0.13%)</title><rect x="76.6591%" y="229" width="0.1267%" height="15" fill="rgb(245,217,50)" fg:x="47209" fg:w="78"/><text x="76.9091%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="76.7485%" y="213" width="0.0373%" height="15" fill="rgb(213,201,24)" fg:x="47264" fg:w="23"/><text x="76.9985%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="76.7598%" y="197" width="0.0260%" height="15" fill="rgb(248,116,28)" fg:x="47271" fg:w="16"/><text x="77.0098%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (95 samples, 0.15%)</title><rect x="76.6445%" y="245" width="0.1543%" height="15" fill="rgb(219,72,43)" fg:x="47200" fg:w="95"/><text x="76.8945%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="76.7988%" y="245" width="0.0179%" height="15" fill="rgb(209,138,14)" fg:x="47295" fg:w="11"/><text x="77.0488%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,446 samples, 2.35%)</title><rect x="76.8167%" y="245" width="2.3481%" height="15" fill="rgb(222,18,33)" fg:x="47306" fg:w="1446"/><text x="77.0667%" y="255.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="79.1647%" y="245" width="0.0195%" height="15" fill="rgb(213,199,7)" fg:x="48752" fg:w="12"/><text x="79.4147%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="79.1842%" y="245" width="0.0195%" height="15" fill="rgb(250,110,10)" fg:x="48764" fg:w="12"/><text x="79.4342%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="79.2037%" y="245" width="0.0146%" height="15" fill="rgb(248,123,6)" fg:x="48776" fg:w="9"/><text x="79.4537%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="79.2735%" y="181" width="0.0195%" height="15" fill="rgb(206,91,31)" fg:x="48819" fg:w="12"/><text x="79.5235%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="79.3076%" y="165" width="0.0162%" height="15" fill="rgb(211,154,13)" fg:x="48840" fg:w="10"/><text x="79.5576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="79.3271%" y="149" width="0.0390%" height="15" fill="rgb(225,148,7)" fg:x="48852" fg:w="24"/><text x="79.5771%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="79.3482%" y="133" width="0.0179%" height="15" fill="rgb(220,160,43)" fg:x="48865" fg:w="11"/><text x="79.5982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.05%)</title><rect x="79.3238%" y="165" width="0.0455%" height="15" fill="rgb(213,52,39)" fg:x="48850" fg:w="28"/><text x="79.5738%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (56 samples, 0.09%)</title><rect x="79.2930%" y="181" width="0.0909%" height="15" fill="rgb(243,137,7)" fg:x="48831" fg:w="56"/><text x="79.5430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="79.3693%" y="165" width="0.0146%" height="15" fill="rgb(230,79,13)" fg:x="48878" fg:w="9"/><text x="79.6193%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (84 samples, 0.14%)</title><rect x="79.2621%" y="197" width="0.1364%" height="15" fill="rgb(247,105,23)" fg:x="48812" fg:w="84"/><text x="79.5121%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="79.3839%" y="181" width="0.0146%" height="15" fill="rgb(223,179,41)" fg:x="48887" fg:w="9"/><text x="79.6339%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.02%)</title><rect x="79.3985%" y="197" width="0.0227%" height="15" fill="rgb(218,9,34)" fg:x="48896" fg:w="14"/><text x="79.6485%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (129 samples, 0.21%)</title><rect x="79.2183%" y="245" width="0.2095%" height="15" fill="rgb(222,106,8)" fg:x="48785" fg:w="129"/><text x="79.4683%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (121 samples, 0.20%)</title><rect x="79.2313%" y="229" width="0.1965%" height="15" fill="rgb(211,220,0)" fg:x="48793" fg:w="121"/><text x="79.4813%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (115 samples, 0.19%)</title><rect x="79.2410%" y="213" width="0.1867%" height="15" fill="rgb(229,52,16)" fg:x="48799" fg:w="115"/><text x="79.4910%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,397 samples, 2.27%)</title><rect x="79.4391%" y="245" width="2.2685%" height="15" fill="rgb(212,155,18)" fg:x="48921" fg:w="1397"/><text x="79.6891%" y="255.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (227 samples, 0.37%)</title><rect x="81.7076%" y="245" width="0.3686%" height="15" fill="rgb(242,21,14)" fg:x="50318" fg:w="227"/><text x="81.9576%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (66 samples, 0.11%)</title><rect x="82.0762%" y="245" width="0.1072%" height="15" fill="rgb(222,19,48)" fg:x="50545" fg:w="66"/><text x="82.3262%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="82.2029%" y="229" width="0.0130%" height="15" fill="rgb(232,45,27)" fg:x="50623" fg:w="8"/><text x="82.4529%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="82.2175%" y="229" width="0.0162%" height="15" fill="rgb(249,103,42)" fg:x="50632" fg:w="10"/><text x="82.4675%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.07%)</title><rect x="82.1834%" y="245" width="0.0666%" height="15" fill="rgb(246,81,33)" fg:x="50611" fg:w="41"/><text x="82.4334%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="82.2337%" y="229" width="0.0162%" height="15" fill="rgb(252,33,42)" fg:x="50642" fg:w="10"/><text x="82.4837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="82.3929%" y="213" width="0.0114%" height="15" fill="rgb(209,212,41)" fg:x="50740" fg:w="7"/><text x="82.6429%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="82.9271%" y="181" width="0.0552%" height="15" fill="rgb(207,154,6)" fg:x="51069" fg:w="34"/><text x="83.1771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (131 samples, 0.21%)</title><rect x="82.7891%" y="197" width="0.2127%" height="15" fill="rgb(223,64,47)" fg:x="50984" fg:w="131"/><text x="83.0391%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.02%)</title><rect x="82.9823%" y="181" width="0.0195%" height="15" fill="rgb(211,161,38)" fg:x="51103" fg:w="12"/><text x="83.2323%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (371 samples, 0.60%)</title><rect x="82.4042%" y="213" width="0.6024%" height="15" fill="rgb(219,138,40)" fg:x="50747" fg:w="371"/><text x="82.6542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="83.0067%" y="213" width="0.0130%" height="15" fill="rgb(241,228,46)" fg:x="51118" fg:w="8"/><text x="83.2567%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (43 samples, 0.07%)</title><rect x="83.0895%" y="197" width="0.0698%" height="15" fill="rgb(223,209,38)" fg:x="51169" fg:w="43"/><text x="83.3395%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (28 samples, 0.05%)</title><rect x="83.1138%" y="181" width="0.0455%" height="15" fill="rgb(236,164,45)" fg:x="51184" fg:w="28"/><text x="83.3638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.02%)</title><rect x="83.1869%" y="181" width="0.0244%" height="15" fill="rgb(231,15,5)" fg:x="51229" fg:w="15"/><text x="83.4369%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (171 samples, 0.28%)</title><rect x="83.0197%" y="213" width="0.2777%" height="15" fill="rgb(252,35,15)" fg:x="51126" fg:w="171"/><text x="83.2697%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (84 samples, 0.14%)</title><rect x="83.1609%" y="197" width="0.1364%" height="15" fill="rgb(248,181,18)" fg:x="51213" fg:w="84"/><text x="83.4109%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.09%)</title><rect x="83.2113%" y="181" width="0.0861%" height="15" fill="rgb(233,39,42)" fg:x="51244" fg:w="53"/><text x="83.4613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (605 samples, 0.98%)</title><rect x="82.3198%" y="229" width="0.9824%" height="15" fill="rgb(238,110,33)" fg:x="50695" fg:w="605"/><text x="82.5698%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.02%)</title><rect x="83.3022%" y="229" width="0.0244%" height="15" fill="rgb(233,195,10)" fg:x="51300" fg:w="15"/><text x="83.5522%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (670 samples, 1.09%)</title><rect x="82.2500%" y="245" width="1.0880%" height="15" fill="rgb(254,105,3)" fg:x="50652" fg:w="670"/><text x="82.5000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="83.3266%" y="229" width="0.0114%" height="15" fill="rgb(221,225,9)" fg:x="51315" fg:w="7"/><text x="83.5766%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (59 samples, 0.10%)</title><rect x="83.3379%" y="245" width="0.0958%" height="15" fill="rgb(224,227,45)" fg:x="51322" fg:w="59"/><text x="83.5879%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (8,892 samples, 14.44%)</title><rect x="69.0467%" y="261" width="14.4390%" height="15" fill="rgb(229,198,43)" fg:x="42521" fg:w="8892"/><text x="69.2967%" y="271.50">rust_qecp`rust_qecp::u..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (32 samples, 0.05%)</title><rect x="83.4337%" y="245" width="0.0520%" height="15" fill="rgb(206,209,35)" fg:x="51381" fg:w="32"/><text x="83.6837%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (49,569 samples, 80.49%)</title><rect x="3.0073%" y="293" width="80.4914%" height="15" fill="rgb(245,195,53)" fg:x="1852" fg:w="49569"/><text x="3.2573%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (47,243 samples, 76.71%)</title><rect x="6.7843%" y="277" width="76.7144%" height="15" fill="rgb(240,92,26)" fg:x="4178" fg:w="47243"/><text x="7.0343%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="86.3404%" y="277" width="0.0422%" height="15" fill="rgb(207,40,23)" fg:x="53171" fg:w="26"/><text x="86.5904%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (35 samples, 0.06%)</title><rect x="86.5726%" y="245" width="0.0568%" height="15" fill="rgb(223,111,35)" fg:x="53314" fg:w="35"/><text x="86.8226%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.07%)</title><rect x="86.7220%" y="229" width="0.0698%" height="15" fill="rgb(229,147,28)" fg:x="53406" fg:w="43"/><text x="86.9720%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (281 samples, 0.46%)</title><rect x="86.3923%" y="277" width="0.4563%" height="15" fill="rgb(211,29,28)" fg:x="53203" fg:w="281"/><text x="86.6423%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (180 samples, 0.29%)</title><rect x="86.5564%" y="261" width="0.2923%" height="15" fill="rgb(228,72,33)" fg:x="53304" fg:w="180"/><text x="86.8064%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (135 samples, 0.22%)</title><rect x="86.6294%" y="245" width="0.2192%" height="15" fill="rgb(205,214,31)" fg:x="53349" fg:w="135"/><text x="86.8794%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (35 samples, 0.06%)</title><rect x="86.7918%" y="229" width="0.0568%" height="15" fill="rgb(224,111,15)" fg:x="53449" fg:w="35"/><text x="87.0418%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="86.9233%" y="261" width="0.0114%" height="15" fill="rgb(253,21,26)" fg:x="53530" fg:w="7"/><text x="87.1733%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.02%)</title><rect x="86.9509%" y="261" width="0.0244%" height="15" fill="rgb(245,139,43)" fg:x="53547" fg:w="15"/><text x="87.2009%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="87.1604%" y="229" width="0.0130%" height="15" fill="rgb(252,170,7)" fg:x="53676" fg:w="8"/><text x="87.4104%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="87.2692%" y="197" width="0.0471%" height="15" fill="rgb(231,118,14)" fg:x="53743" fg:w="29"/><text x="87.5192%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.19%)</title><rect x="87.1848%" y="213" width="0.1867%" height="15" fill="rgb(238,83,0)" fg:x="53691" fg:w="115"/><text x="87.4348%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (34 samples, 0.06%)</title><rect x="87.3163%" y="197" width="0.0552%" height="15" fill="rgb(221,39,39)" fg:x="53772" fg:w="34"/><text x="87.5663%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (129 samples, 0.21%)</title><rect x="87.1734%" y="229" width="0.2095%" height="15" fill="rgb(222,119,46)" fg:x="53684" fg:w="129"/><text x="87.4234%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="87.3715%" y="213" width="0.0114%" height="15" fill="rgb(222,165,49)" fg:x="53806" fg:w="7"/><text x="87.6215%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (166 samples, 0.27%)</title><rect x="87.1361%" y="245" width="0.2696%" height="15" fill="rgb(219,113,52)" fg:x="53661" fg:w="166"/><text x="87.3861%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="87.3829%" y="229" width="0.0227%" height="15" fill="rgb(214,7,15)" fg:x="53813" fg:w="14"/><text x="87.6329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.01%)</title><rect x="87.3942%" y="213" width="0.0114%" height="15" fill="rgb(235,32,4)" fg:x="53820" fg:w="7"/><text x="87.6442%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (351 samples, 0.57%)</title><rect x="86.8486%" y="277" width="0.5700%" height="15" fill="rgb(238,90,54)" fg:x="53484" fg:w="351"/><text x="87.0986%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (265 samples, 0.43%)</title><rect x="86.9883%" y="261" width="0.4303%" height="15" fill="rgb(213,208,19)" fg:x="53570" fg:w="265"/><text x="87.2383%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.01%)</title><rect x="87.4056%" y="245" width="0.0130%" height="15" fill="rgb(233,156,4)" fg:x="53827" fg:w="8"/><text x="87.6556%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,420 samples, 3.93%)</title><rect x="83.4987%" y="293" width="3.9297%" height="15" fill="rgb(207,194,5)" fg:x="51421" fg:w="2420"/><text x="83.7487%" y="303.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (162 samples, 0.26%)</title><rect x="87.4283%" y="293" width="0.2631%" height="15" fill="rgb(206,111,30)" fg:x="53841" fg:w="162"/><text x="87.6783%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (52 samples, 0.08%)</title><rect x="87.6070%" y="277" width="0.0844%" height="15" fill="rgb(243,70,54)" fg:x="53951" fg:w="52"/><text x="87.8570%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="94.3864%" y="213" width="0.0114%" height="15" fill="rgb(242,28,8)" fg:x="58126" fg:w="7"/><text x="94.6364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.02%)</title><rect x="94.3832%" y="229" width="0.0162%" height="15" fill="rgb(219,106,18)" fg:x="58124" fg:w="10"/><text x="94.6332%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.02%)</title><rect x="94.3799%" y="245" width="0.0244%" height="15" fill="rgb(244,222,10)" fg:x="58122" fg:w="15"/><text x="94.6299%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,135 samples, 6.71%)</title><rect x="87.6914%" y="293" width="6.7145%" height="15" fill="rgb(236,179,52)" fg:x="54003" fg:w="4135"/><text x="87.9414%" y="303.50">rust_qecp..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.03%)</title><rect x="94.3799%" y="277" width="0.0260%" height="15" fill="rgb(213,23,39)" fg:x="58122" fg:w="16"/><text x="94.6299%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (16 samples, 0.03%)</title><rect x="94.3799%" y="261" width="0.0260%" height="15" fill="rgb(238,48,10)" fg:x="58122" fg:w="16"/><text x="94.6299%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (101 samples, 0.16%)</title><rect x="94.4075%" y="277" width="0.1640%" height="15" fill="rgb(251,196,23)" fg:x="58139" fg:w="101"/><text x="94.6575%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (359 samples, 0.58%)</title><rect x="94.4059%" y="293" width="0.5830%" height="15" fill="rgb(250,152,24)" fg:x="58138" fg:w="359"/><text x="94.6559%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (257 samples, 0.42%)</title><rect x="94.5716%" y="277" width="0.4173%" height="15" fill="rgb(209,150,17)" fg:x="58240" fg:w="257"/><text x="94.8216%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (71 samples, 0.12%)</title><rect x="94.9889%" y="293" width="0.1153%" height="15" fill="rgb(234,202,34)" fg:x="58497" fg:w="71"/><text x="95.2389%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,014 samples, 4.89%)</title><rect x="95.1042%" y="293" width="4.8942%" height="15" fill="rgb(253,148,53)" fg:x="58568" fg:w="3014"/><text x="95.3542%" y="303.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,479 samples, 4.03%)</title><rect x="95.9729%" y="277" width="4.0255%" height="15" fill="rgb(218,129,16)" fg:x="59103" fg:w="2479"/><text x="96.2229%" y="287.50">rust..</text></g><g><title>all (61,583 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(216,85,19)" fg:x="0" fg:w="61583"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,112 samples, 97.61%)</title><rect x="2.3886%" y="373" width="97.6114%" height="15" fill="rgb(235,228,7)" fg:x="1471" fg:w="60112"/><text x="2.6386%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,112 samples, 97.61%)</title><rect x="2.3886%" y="357" width="97.6114%" height="15" fill="rgb(245,175,0)" fg:x="1471" fg:w="60112"/><text x="2.6386%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,112 samples, 97.61%)</title><rect x="2.3886%" y="341" width="97.6114%" height="15" fill="rgb(208,168,36)" fg:x="1471" fg:w="60112"/><text x="2.6386%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,112 samples, 97.61%)</title><rect x="2.3886%" y="325" width="97.6114%" height="15" fill="rgb(246,171,24)" fg:x="1471" fg:w="60112"/><text x="2.6386%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,110 samples, 97.61%)</title><rect x="2.3919%" y="309" width="97.6081%" height="15" fill="rgb(215,142,24)" fg:x="1473" fg:w="60110"/><text x="2.6419%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>