<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="69010"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (9 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__exit (9 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="9"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="0.0435%" y="133" width="0.0203%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="14"/><text x="0.2935%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 0.04%)</title><rect x="0.0261%" y="149" width="0.0435%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="30"/><text x="0.2761%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="0.0869%" y="85" width="0.0101%" height="15" fill="rgb(208,68,35)" fg:x="60" fg:w="7"/><text x="0.3369%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (47 samples, 0.07%)</title><rect x="0.1014%" y="53" width="0.0681%" height="15" fill="rgb(232,128,0)" fg:x="70" fg:w="47"/><text x="0.3514%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (15 samples, 0.02%)</title><rect x="0.1695%" y="53" width="0.0217%" height="15" fill="rgb(207,160,47)" fg:x="117" fg:w="15"/><text x="0.4195%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="0.1695%" y="37" width="0.0217%" height="15" fill="rgb(228,23,34)" fg:x="117" fg:w="15"/><text x="0.4195%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (74 samples, 0.11%)</title><rect x="0.1000%" y="69" width="0.1072%" height="15" fill="rgb(218,30,26)" fg:x="69" fg:w="74"/><text x="0.3500%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (11 samples, 0.02%)</title><rect x="0.1913%" y="53" width="0.0159%" height="15" fill="rgb(220,122,19)" fg:x="132" fg:w="11"/><text x="0.4413%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="0.1913%" y="37" width="0.0159%" height="15" fill="rgb(250,228,42)" fg:x="132" fg:w="11"/><text x="0.4413%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.01%)</title><rect x="0.2072%" y="69" width="0.0101%" height="15" fill="rgb(240,193,28)" fg:x="143" fg:w="7"/><text x="0.4572%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.01%)</title><rect x="0.2072%" y="53" width="0.0101%" height="15" fill="rgb(216,20,37)" fg:x="143" fg:w="7"/><text x="0.4572%" y="63.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.07%)</title><rect x="0.2174%" y="69" width="0.0667%" height="15" fill="rgb(206,188,39)" fg:x="150" fg:w="46"/><text x="0.4674%" y="79.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (137 samples, 0.20%)</title><rect x="0.0869%" y="149" width="0.1985%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="137"/><text x="0.3369%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (137 samples, 0.20%)</title><rect x="0.0869%" y="133" width="0.1985%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="137"/><text x="0.3369%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 0.20%)</title><rect x="0.0869%" y="117" width="0.1985%" height="15" fill="rgb(225,20,46)" fg:x="60" fg:w="137"/><text x="0.3369%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (137 samples, 0.20%)</title><rect x="0.0869%" y="101" width="0.1985%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="137"/><text x="0.3369%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (128 samples, 0.19%)</title><rect x="0.1000%" y="85" width="0.1855%" height="15" fill="rgb(221,200,47)" fg:x="69" fg:w="128"/><text x="0.3500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.02%)</title><rect x="0.2898%" y="85" width="0.0232%" height="15" fill="rgb(226,26,5)" fg:x="200" fg:w="16"/><text x="0.5398%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (8 samples, 0.01%)</title><rect x="0.3014%" y="69" width="0.0116%" height="15" fill="rgb(249,33,26)" fg:x="208" fg:w="8"/><text x="0.5514%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.3014%" y="53" width="0.0116%" height="15" fill="rgb(235,183,28)" fg:x="208" fg:w="8"/><text x="0.5514%" y="63.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (29 samples, 0.04%)</title><rect x="0.2855%" y="149" width="0.0420%" height="15" fill="rgb(221,5,38)" fg:x="197" fg:w="29"/><text x="0.5355%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.04%)</title><rect x="0.2855%" y="133" width="0.0420%" height="15" fill="rgb(247,18,42)" fg:x="197" fg:w="29"/><text x="0.5355%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.04%)</title><rect x="0.2855%" y="117" width="0.0420%" height="15" fill="rgb(241,131,45)" fg:x="197" fg:w="29"/><text x="0.5355%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (26 samples, 0.04%)</title><rect x="0.2898%" y="101" width="0.0377%" height="15" fill="rgb(249,31,29)" fg:x="200" fg:w="26"/><text x="0.5398%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (490 samples, 0.71%)</title><rect x="0.3275%" y="149" width="0.7100%" height="15" fill="rgb(225,111,53)" fg:x="226" fg:w="490"/><text x="0.5775%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (184 samples, 0.27%)</title><rect x="1.0375%" y="149" width="0.2666%" height="15" fill="rgb(238,160,17)" fg:x="716" fg:w="184"/><text x="1.2875%" y="159.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (10 samples, 0.01%)</title><rect x="1.3129%" y="149" width="0.0145%" height="15" fill="rgb(214,148,48)" fg:x="906" fg:w="10"/><text x="1.5629%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (93 samples, 0.13%)</title><rect x="5.8977%" y="133" width="0.1348%" height="15" fill="rgb(232,36,49)" fg:x="4070" fg:w="93"/><text x="6.1477%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.10%)</title><rect x="6.0325%" y="133" width="0.0971%" height="15" fill="rgb(209,103,24)" fg:x="4163" fg:w="67"/><text x="6.2825%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (55 samples, 0.08%)</title><rect x="6.1295%" y="133" width="0.0797%" height="15" fill="rgb(229,88,8)" fg:x="4230" fg:w="55"/><text x="6.3795%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (486 samples, 0.70%)</title><rect x="6.2092%" y="133" width="0.7042%" height="15" fill="rgb(213,181,19)" fg:x="4285" fg:w="486"/><text x="6.4592%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.02%)</title><rect x="6.9135%" y="85" width="0.0217%" height="15" fill="rgb(254,191,54)" fg:x="4771" fg:w="15"/><text x="7.1635%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="6.9193%" y="69" width="0.0159%" height="15" fill="rgb(241,83,37)" fg:x="4775" fg:w="11"/><text x="7.1693%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.02%)</title><rect x="6.9135%" y="133" width="0.0232%" height="15" fill="rgb(233,36,39)" fg:x="4771" fg:w="16"/><text x="7.1635%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (16 samples, 0.02%)</title><rect x="6.9135%" y="117" width="0.0232%" height="15" fill="rgb(226,3,54)" fg:x="4771" fg:w="16"/><text x="7.1635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.02%)</title><rect x="6.9135%" y="101" width="0.0232%" height="15" fill="rgb(245,192,40)" fg:x="4771" fg:w="16"/><text x="7.1635%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (88 samples, 0.13%)</title><rect x="7.5250%" y="117" width="0.1275%" height="15" fill="rgb(238,167,29)" fg:x="5193" fg:w="88"/><text x="7.7750%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="7.6858%" y="101" width="0.0116%" height="15" fill="rgb(232,182,51)" fg:x="5304" fg:w="8"/><text x="7.9358%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.01%)</title><rect x="7.6974%" y="101" width="0.0145%" height="15" fill="rgb(231,60,39)" fg:x="5312" fg:w="10"/><text x="7.9474%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (697 samples, 1.01%)</title><rect x="6.9367%" y="133" width="1.0100%" height="15" fill="rgb(208,69,12)" fg:x="4787" fg:w="697"/><text x="7.1867%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (200 samples, 0.29%)</title><rect x="7.6569%" y="117" width="0.2898%" height="15" fill="rgb(235,93,37)" fg:x="5284" fg:w="200"/><text x="7.9069%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (162 samples, 0.23%)</title><rect x="7.7119%" y="101" width="0.2347%" height="15" fill="rgb(213,116,39)" fg:x="5322" fg:w="162"/><text x="7.9619%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="7.9496%" y="133" width="0.0130%" height="15" fill="rgb(222,207,29)" fg:x="5486" fg:w="9"/><text x="8.1996%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (17 samples, 0.02%)</title><rect x="7.9626%" y="133" width="0.0246%" height="15" fill="rgb(206,96,30)" fg:x="5495" fg:w="17"/><text x="8.2126%" y="143.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (157 samples, 0.23%)</title><rect x="10.6448%" y="117" width="0.2275%" height="15" fill="rgb(218,138,4)" fg:x="7346" fg:w="157"/><text x="10.8948%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (470 samples, 0.68%)</title><rect x="10.8738%" y="117" width="0.6811%" height="15" fill="rgb(250,191,14)" fg:x="7504" fg:w="470"/><text x="11.1238%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (21 samples, 0.03%)</title><rect x="11.6085%" y="101" width="0.0304%" height="15" fill="rgb(239,60,40)" fg:x="8011" fg:w="21"/><text x="11.8585%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (7,193 samples, 10.42%)</title><rect x="1.3273%" y="149" width="10.4231%" height="15" fill="rgb(206,27,48)" fg:x="916" fg:w="7193"/><text x="1.5773%" y="159.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (2,597 samples, 3.76%)</title><rect x="7.9872%" y="133" width="3.7632%" height="15" fill="rgb(225,35,8)" fg:x="5512" fg:w="2597"/><text x="8.2372%" y="143.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (135 samples, 0.20%)</title><rect x="11.5548%" y="117" width="0.1956%" height="15" fill="rgb(250,213,24)" fg:x="7974" fg:w="135"/><text x="11.8048%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (77 samples, 0.11%)</title><rect x="11.6389%" y="101" width="0.1116%" height="15" fill="rgb(247,123,22)" fg:x="8032" fg:w="77"/><text x="11.8889%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.15%)</title><rect x="11.7824%" y="133" width="0.1536%" height="15" fill="rgb(231,138,38)" fg:x="8131" fg:w="106"/><text x="12.0324%" y="143.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="11.9360%" y="133" width="0.0159%" height="15" fill="rgb(231,145,46)" fg:x="8237" fg:w="11"/><text x="12.1860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.02%)</title><rect x="12.2794%" y="117" width="0.0246%" height="15" fill="rgb(251,118,11)" fg:x="8474" fg:w="17"/><text x="12.5294%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="12.2939%" y="101" width="0.0101%" height="15" fill="rgb(217,147,25)" fg:x="8484" fg:w="7"/><text x="12.5439%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="12.3055%" y="117" width="0.0101%" height="15" fill="rgb(247,81,37)" fg:x="8492" fg:w="7"/><text x="12.5555%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="12.3171%" y="117" width="0.0203%" height="15" fill="rgb(209,12,38)" fg:x="8500" fg:w="14"/><text x="12.5671%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="12.3605%" y="53" width="0.0174%" height="15" fill="rgb(227,1,9)" fg:x="8530" fg:w="12"/><text x="12.6105%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="12.3663%" y="37" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="8534" fg:w="8"/><text x="12.6163%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.03%)</title><rect x="12.3475%" y="85" width="0.0319%" height="15" fill="rgb(221,10,30)" fg:x="8521" fg:w="22"/><text x="12.5975%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="12.3576%" y="69" width="0.0217%" height="15" fill="rgb(210,229,1)" fg:x="8528" fg:w="15"/><text x="12.6076%" y="79.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (33 samples, 0.05%)</title><rect x="12.3373%" y="117" width="0.0478%" height="15" fill="rgb(222,148,37)" fg:x="8514" fg:w="33"/><text x="12.5873%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (27 samples, 0.04%)</title><rect x="12.3460%" y="101" width="0.0391%" height="15" fill="rgb(234,67,33)" fg:x="8520" fg:w="27"/><text x="12.5960%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (10 samples, 0.01%)</title><rect x="12.3852%" y="117" width="0.0145%" height="15" fill="rgb(247,98,35)" fg:x="8547" fg:w="10"/><text x="12.6352%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="12.3997%" y="117" width="0.0174%" height="15" fill="rgb(247,138,52)" fg:x="8557" fg:w="12"/><text x="12.6497%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (19 samples, 0.03%)</title><rect x="12.4170%" y="117" width="0.0275%" height="15" fill="rgb(213,79,30)" fg:x="8569" fg:w="19"/><text x="12.6670%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (561 samples, 0.81%)</title><rect x="11.9620%" y="133" width="0.8129%" height="15" fill="rgb(246,177,23)" fg:x="8255" fg:w="561"/><text x="12.2120%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (228 samples, 0.33%)</title><rect x="12.4446%" y="117" width="0.3304%" height="15" fill="rgb(230,62,27)" fg:x="8588" fg:w="228"/><text x="12.6946%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (720 samples, 1.04%)</title><rect x="11.7505%" y="149" width="1.0433%" height="15" fill="rgb(216,154,8)" fg:x="8109" fg:w="720"/><text x="12.0005%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::add_edge_case (8 samples, 0.01%)</title><rect x="12.7822%" y="133" width="0.0116%" height="15" fill="rgb(244,35,45)" fg:x="8821" fg:w="8"/><text x="13.0322%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::new_standard_planar_code (9 samples, 0.01%)</title><rect x="12.7938%" y="149" width="0.0130%" height="15" fill="rgb(251,115,12)" fg:x="8829" fg:w="9"/><text x="13.0438%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Node::__new_default (9 samples, 0.01%)</title><rect x="12.7938%" y="133" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="8829" fg:w="9"/><text x="13.0438%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="12.8141%" y="117" width="0.0101%" height="15" fill="rgb(233,84,52)" fg:x="8843" fg:w="7"/><text x="13.0641%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (7 samples, 0.01%)</title><rect x="12.8286%" y="117" width="0.0101%" height="15" fill="rgb(207,117,47)" fg:x="8853" fg:w="7"/><text x="13.0786%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (23 samples, 0.03%)</title><rect x="12.8068%" y="149" width="0.0333%" height="15" fill="rgb(249,43,39)" fg:x="8838" fg:w="23"/><text x="13.0568%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_cases (19 samples, 0.03%)</title><rect x="12.8126%" y="133" width="0.0275%" height="15" fill="rgb(209,38,44)" fg:x="8842" fg:w="19"/><text x="13.0626%" y="143.50"></text></g><g><title>dyld`start (8,865 samples, 12.85%)</title><rect x="0.0000%" y="389" width="12.8460%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="8865"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (8,856 samples, 12.83%)</title><rect x="0.0130%" y="373" width="12.8329%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (8,856 samples, 12.83%)</title><rect x="0.0130%" y="357" width="12.8329%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="367.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (8,856 samples, 12.83%)</title><rect x="0.0130%" y="341" width="12.8329%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="351.50">rust_qecp`std::rt::..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (8,856 samples, 12.83%)</title><rect x="0.0130%" y="325" width="12.8329%" height="15" fill="rgb(211,81,21)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="335.50">rust_qecp`std::sys_..</text></g><g><title>rust_qecp`rust_qecp::main (8,856 samples, 12.83%)</title><rect x="0.0130%" y="309" width="12.8329%" height="15" fill="rgb(208,190,38)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="319.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (8,856 samples, 12.83%)</title><rect x="0.0130%" y="293" width="12.8329%" height="15" fill="rgb(235,213,38)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="303.50">rust_qecp`tokio::ta..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (8,856 samples, 12.83%)</title><rect x="0.0130%" y="277" width="12.8329%" height="15" fill="rgb(237,122,38)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="287.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,856 samples, 12.83%)</title><rect x="0.0130%" y="261" width="12.8329%" height="15" fill="rgb(244,218,35)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="271.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (8,856 samples, 12.83%)</title><rect x="0.0130%" y="245" width="12.8329%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="255.50">rust_qecp`tokio::ru..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,856 samples, 12.83%)</title><rect x="0.0130%" y="229" width="12.8329%" height="15" fill="rgb(210,16,53)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="239.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (8,856 samples, 12.83%)</title><rect x="0.0130%" y="213" width="12.8329%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="223.50">rust_qecp`tokio::ma..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,856 samples, 12.83%)</title><rect x="0.0130%" y="197" width="12.8329%" height="15" fill="rgb(224,169,11)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="207.50">rust_qecp`&lt;core::fu..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (8,856 samples, 12.83%)</title><rect x="0.0130%" y="181" width="12.8329%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="8856"/><text x="0.2630%" y="191.50">rust_qecp`rust_qecp..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (8,855 samples, 12.83%)</title><rect x="0.0145%" y="165" width="12.8315%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="8855"/><text x="0.2645%" y="175.50">rust_qecp`rust_qecp..</text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.02%)</title><rect x="12.8460%" y="389" width="0.0159%" height="15" fill="rgb(230,116,27)" fg:x="8865" fg:w="11"/><text x="13.0960%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="12.8720%" y="309" width="0.0101%" height="15" fill="rgb(228,99,48)" fg:x="8883" fg:w="7"/><text x="13.1220%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::tool::fault_tolerant_benchmark::{{closure}}&gt; (12 samples, 0.02%)</title><rect x="12.8880%" y="309" width="0.0174%" height="15" fill="rgb(253,11,6)" fg:x="8894" fg:w="12"/><text x="13.1380%" y="319.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (12 samples, 0.02%)</title><rect x="12.8880%" y="293" width="0.0174%" height="15" fill="rgb(247,143,39)" fg:x="8894" fg:w="12"/><text x="13.1380%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="12.8880%" y="277" width="0.0174%" height="15" fill="rgb(236,97,10)" fg:x="8894" fg:w="12"/><text x="13.1380%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="12.8880%" y="261" width="0.0174%" height="15" fill="rgb(233,208,19)" fg:x="8894" fg:w="12"/><text x="13.1380%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="12.9184%" y="293" width="0.0130%" height="15" fill="rgb(216,164,2)" fg:x="8915" fg:w="9"/><text x="13.1684%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="12.9213%" y="277" width="0.0101%" height="15" fill="rgb(220,129,5)" fg:x="8917" fg:w="7"/><text x="13.1713%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="12.9315%" y="293" width="0.0174%" height="15" fill="rgb(242,17,10)" fg:x="8924" fg:w="12"/><text x="13.1815%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (57 samples, 0.08%)</title><rect x="12.9561%" y="293" width="0.0826%" height="15" fill="rgb(242,107,0)" fg:x="8941" fg:w="57"/><text x="13.2061%" y="303.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (335 samples, 0.49%)</title><rect x="13.0387%" y="293" width="0.4854%" height="15" fill="rgb(251,28,31)" fg:x="8998" fg:w="335"/><text x="13.2887%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="13.5328%" y="293" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="9339" fg:w="7"/><text x="13.7828%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="13.5328%" y="277" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="9339" fg:w="7"/><text x="13.7828%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (406 samples, 0.59%)</title><rect x="13.5430%" y="293" width="0.5883%" height="15" fill="rgb(232,23,21)" fg:x="9346" fg:w="406"/><text x="13.7930%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (61 samples, 0.09%)</title><rect x="14.1313%" y="293" width="0.0884%" height="15" fill="rgb(244,5,23)" fg:x="9752" fg:w="61"/><text x="14.3813%" y="303.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (32 samples, 0.05%)</title><rect x="14.2197%" y="293" width="0.0464%" height="15" fill="rgb(226,81,46)" fg:x="9813" fg:w="32"/><text x="14.4697%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.02%)</title><rect x="14.5950%" y="277" width="0.0232%" height="15" fill="rgb(247,70,30)" fg:x="10072" fg:w="16"/><text x="14.8450%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.02%)</title><rect x="14.5964%" y="261" width="0.0217%" height="15" fill="rgb(212,68,19)" fg:x="10073" fg:w="15"/><text x="14.8464%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="14.5993%" y="245" width="0.0188%" height="15" fill="rgb(240,187,13)" fg:x="10075" fg:w="13"/><text x="14.8493%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="14.6037%" y="229" width="0.0145%" height="15" fill="rgb(223,113,26)" fg:x="10078" fg:w="10"/><text x="14.8537%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="14.6327%" y="229" width="0.0101%" height="15" fill="rgb(206,192,2)" fg:x="10098" fg:w="7"/><text x="14.8827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="14.6312%" y="245" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="10097" fg:w="11"/><text x="14.8812%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (262 samples, 0.38%)</title><rect x="14.2718%" y="293" width="0.3797%" height="15" fill="rgb(247,173,49)" fg:x="9849" fg:w="262"/><text x="14.5218%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="14.6240%" y="277" width="0.0275%" height="15" fill="rgb(224,114,35)" fg:x="10092" fg:w="19"/><text x="14.8740%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (17 samples, 0.02%)</title><rect x="14.6269%" y="261" width="0.0246%" height="15" fill="rgb(245,159,27)" fg:x="10094" fg:w="17"/><text x="14.8769%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (64 samples, 0.09%)</title><rect x="20.1608%" y="277" width="0.0927%" height="15" fill="rgb(245,172,44)" fg:x="13913" fg:w="64"/><text x="20.4108%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.04%)</title><rect x="20.2536%" y="277" width="0.0362%" height="15" fill="rgb(236,23,11)" fg:x="13977" fg:w="25"/><text x="20.5036%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (59 samples, 0.09%)</title><rect x="20.2942%" y="277" width="0.0855%" height="15" fill="rgb(205,117,38)" fg:x="14005" fg:w="59"/><text x="20.5442%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (61 samples, 0.09%)</title><rect x="20.3797%" y="277" width="0.0884%" height="15" fill="rgb(237,72,25)" fg:x="14064" fg:w="61"/><text x="20.6297%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.01%)</title><rect x="20.4738%" y="277" width="0.0116%" height="15" fill="rgb(244,70,9)" fg:x="14129" fg:w="8"/><text x="20.7238%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="20.4854%" y="277" width="0.0116%" height="15" fill="rgb(217,125,39)" fg:x="14137" fg:w="8"/><text x="20.7354%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (51 samples, 0.07%)</title><rect x="20.4970%" y="277" width="0.0739%" height="15" fill="rgb(235,36,10)" fg:x="14145" fg:w="51"/><text x="20.7470%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (32 samples, 0.05%)</title><rect x="20.5709%" y="277" width="0.0464%" height="15" fill="rgb(251,123,47)" fg:x="14196" fg:w="32"/><text x="20.8209%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.03%)</title><rect x="20.6173%" y="277" width="0.0261%" height="15" fill="rgb(221,13,13)" fg:x="14228" fg:w="18"/><text x="20.8673%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.09%)</title><rect x="20.6448%" y="277" width="0.0913%" height="15" fill="rgb(238,131,9)" fg:x="14247" fg:w="63"/><text x="20.8948%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.02%)</title><rect x="20.7361%" y="277" width="0.0246%" height="15" fill="rgb(211,50,8)" fg:x="14310" fg:w="17"/><text x="20.9861%" y="287.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (78 samples, 0.11%)</title><rect x="20.7608%" y="277" width="0.1130%" height="15" fill="rgb(245,182,24)" fg:x="14327" fg:w="78"/><text x="21.0108%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,967 samples, 2.85%)</title><rect x="20.8738%" y="277" width="2.8503%" height="15" fill="rgb(242,14,37)" fg:x="14405" fg:w="1967"/><text x="21.1238%" y="287.50">ru..</text></g><g><title>rust_qecp`DYLD-STUB$$free (33 samples, 0.05%)</title><rect x="23.7241%" y="277" width="0.0478%" height="15" fill="rgb(246,228,12)" fg:x="16372" fg:w="33"/><text x="23.9741%" y="287.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.01%)</title><rect x="23.7719%" y="277" width="0.0145%" height="15" fill="rgb(213,55,15)" fg:x="16405" fg:w="10"/><text x="24.0219%" y="287.50"></text></g><g><title>rust_qecp`__rdl_alloc (9 samples, 0.01%)</title><rect x="23.7879%" y="277" width="0.0130%" height="15" fill="rgb(209,9,3)" fg:x="16416" fg:w="9"/><text x="24.0379%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="23.9444%" y="213" width="0.0116%" height="15" fill="rgb(230,59,30)" fg:x="16524" fg:w="8"/><text x="24.1944%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="23.9791%" y="197" width="0.0145%" height="15" fill="rgb(209,121,21)" fg:x="16548" fg:w="10"/><text x="24.2291%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="23.9806%" y="181" width="0.0130%" height="15" fill="rgb(220,109,13)" fg:x="16549" fg:w="9"/><text x="24.2306%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="23.9835%" y="165" width="0.0101%" height="15" fill="rgb(232,18,1)" fg:x="16551" fg:w="7"/><text x="24.2335%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (28 samples, 0.04%)</title><rect x="23.9559%" y="213" width="0.0406%" height="15" fill="rgb(215,41,42)" fg:x="16532" fg:w="28"/><text x="24.2059%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (159 samples, 0.23%)</title><rect x="23.9415%" y="229" width="0.2304%" height="15" fill="rgb(224,123,36)" fg:x="16522" fg:w="159"/><text x="24.1915%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (121 samples, 0.18%)</title><rect x="23.9965%" y="213" width="0.1753%" height="15" fill="rgb(240,125,3)" fg:x="16560" fg:w="121"/><text x="24.2465%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (262 samples, 0.38%)</title><rect x="23.8023%" y="277" width="0.3797%" height="15" fill="rgb(205,98,50)" fg:x="16426" fg:w="262"/><text x="24.0523%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (173 samples, 0.25%)</title><rect x="23.9313%" y="261" width="0.2507%" height="15" fill="rgb(205,185,37)" fg:x="16515" fg:w="173"/><text x="24.1813%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (166 samples, 0.24%)</title><rect x="23.9415%" y="245" width="0.2405%" height="15" fill="rgb(238,207,15)" fg:x="16522" fg:w="166"/><text x="24.1915%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (73 samples, 0.11%)</title><rect x="24.6211%" y="245" width="0.1058%" height="15" fill="rgb(213,199,42)" fg:x="16991" fg:w="73"/><text x="24.8711%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.02%)</title><rect x="24.7269%" y="245" width="0.0188%" height="15" fill="rgb(235,201,11)" fg:x="17064" fg:w="13"/><text x="24.9769%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (45 samples, 0.07%)</title><rect x="24.7457%" y="245" width="0.0652%" height="15" fill="rgb(207,46,11)" fg:x="17077" fg:w="45"/><text x="24.9957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (101 samples, 0.15%)</title><rect x="24.8109%" y="245" width="0.1464%" height="15" fill="rgb(241,35,35)" fg:x="17122" fg:w="101"/><text x="25.0609%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (74 samples, 0.11%)</title><rect x="24.8500%" y="229" width="0.1072%" height="15" fill="rgb(243,32,47)" fg:x="17149" fg:w="74"/><text x="25.1000%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (475 samples, 0.69%)</title><rect x="24.2704%" y="261" width="0.6883%" height="15" fill="rgb(247,202,23)" fg:x="16749" fg:w="475"/><text x="24.5204%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (108 samples, 0.16%)</title><rect x="25.1456%" y="245" width="0.1565%" height="15" fill="rgb(219,102,11)" fg:x="17353" fg:w="108"/><text x="25.3956%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (33 samples, 0.05%)</title><rect x="25.3021%" y="245" width="0.0478%" height="15" fill="rgb(243,110,44)" fg:x="17461" fg:w="33"/><text x="25.5521%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (34 samples, 0.05%)</title><rect x="25.3499%" y="245" width="0.0493%" height="15" fill="rgb(222,74,54)" fg:x="17494" fg:w="34"/><text x="25.5999%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (212 samples, 0.31%)</title><rect x="25.3992%" y="245" width="0.3072%" height="15" fill="rgb(216,99,12)" fg:x="17528" fg:w="212"/><text x="25.6492%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (114 samples, 0.17%)</title><rect x="25.7079%" y="245" width="0.1652%" height="15" fill="rgb(226,22,26)" fg:x="17741" fg:w="114"/><text x="25.9579%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (113 samples, 0.16%)</title><rect x="25.7093%" y="229" width="0.1637%" height="15" fill="rgb(217,163,10)" fg:x="17742" fg:w="113"/><text x="25.9593%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (132 samples, 0.19%)</title><rect x="25.8818%" y="229" width="0.1913%" height="15" fill="rgb(213,25,53)" fg:x="17861" fg:w="132"/><text x="26.1318%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (764 samples, 1.11%)</title><rect x="24.9674%" y="261" width="1.1071%" height="15" fill="rgb(252,105,26)" fg:x="17230" fg:w="764"/><text x="25.2174%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (139 samples, 0.20%)</title><rect x="25.8731%" y="245" width="0.2014%" height="15" fill="rgb(220,39,43)" fg:x="17855" fg:w="139"/><text x="26.1231%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (16 samples, 0.02%)</title><rect x="26.3092%" y="229" width="0.0232%" height="15" fill="rgb(229,68,48)" fg:x="18156" fg:w="16"/><text x="26.5592%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (90 samples, 0.13%)</title><rect x="26.3324%" y="229" width="0.1304%" height="15" fill="rgb(252,8,32)" fg:x="18172" fg:w="90"/><text x="26.5824%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (80 samples, 0.12%)</title><rect x="26.4628%" y="229" width="0.1159%" height="15" fill="rgb(223,20,43)" fg:x="18262" fg:w="80"/><text x="26.7128%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (26 samples, 0.04%)</title><rect x="26.5788%" y="229" width="0.0377%" height="15" fill="rgb(229,81,49)" fg:x="18342" fg:w="26"/><text x="26.8288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (60 samples, 0.09%)</title><rect x="26.6164%" y="229" width="0.0869%" height="15" fill="rgb(236,28,36)" fg:x="18368" fg:w="60"/><text x="26.8664%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.06%)</title><rect x="26.6425%" y="213" width="0.0609%" height="15" fill="rgb(249,185,26)" fg:x="18386" fg:w="42"/><text x="26.8925%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (555 samples, 0.80%)</title><rect x="26.1672%" y="245" width="0.8042%" height="15" fill="rgb(249,174,33)" fg:x="18058" fg:w="555"/><text x="26.4172%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (185 samples, 0.27%)</title><rect x="26.7034%" y="229" width="0.2681%" height="15" fill="rgb(233,201,37)" fg:x="18428" fg:w="185"/><text x="26.9534%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (175 samples, 0.25%)</title><rect x="26.7179%" y="213" width="0.2536%" height="15" fill="rgb(221,78,26)" fg:x="18438" fg:w="175"/><text x="26.9679%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (620 samples, 0.90%)</title><rect x="26.0745%" y="261" width="0.8984%" height="15" fill="rgb(250,127,30)" fg:x="17994" fg:w="620"/><text x="26.3245%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.04%)</title><rect x="26.9729%" y="261" width="0.0406%" height="15" fill="rgb(230,49,44)" fg:x="18614" fg:w="28"/><text x="27.2229%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (127 samples, 0.18%)</title><rect x="27.1164%" y="229" width="0.1840%" height="15" fill="rgb(229,67,23)" fg:x="18713" fg:w="127"/><text x="27.3664%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (199 samples, 0.29%)</title><rect x="27.0135%" y="261" width="0.2884%" height="15" fill="rgb(249,83,47)" fg:x="18642" fg:w="199"/><text x="27.2635%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (128 samples, 0.19%)</title><rect x="27.1164%" y="245" width="0.1855%" height="15" fill="rgb(215,43,3)" fg:x="18713" fg:w="128"/><text x="27.3664%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (40 samples, 0.06%)</title><rect x="27.3018%" y="261" width="0.0580%" height="15" fill="rgb(238,154,13)" fg:x="18841" fg:w="40"/><text x="27.5518%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="27.3627%" y="261" width="0.0101%" height="15" fill="rgb(219,56,2)" fg:x="18883" fg:w="7"/><text x="27.6127%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (34 samples, 0.05%)</title><rect x="27.3757%" y="261" width="0.0493%" height="15" fill="rgb(233,0,4)" fg:x="18892" fg:w="34"/><text x="27.6257%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.04%)</title><rect x="27.4250%" y="261" width="0.0362%" height="15" fill="rgb(235,30,7)" fg:x="18926" fg:w="25"/><text x="27.6750%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="27.4612%" y="261" width="0.0130%" height="15" fill="rgb(250,79,13)" fg:x="18951" fg:w="9"/><text x="27.7112%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (117 samples, 0.17%)</title><rect x="27.4989%" y="245" width="0.1695%" height="15" fill="rgb(211,146,34)" fg:x="18977" fg:w="117"/><text x="27.7489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (48 samples, 0.07%)</title><rect x="27.5989%" y="229" width="0.0696%" height="15" fill="rgb(228,22,38)" fg:x="19046" fg:w="48"/><text x="27.8489%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="27.6685%" y="245" width="0.0101%" height="15" fill="rgb(235,168,5)" fg:x="19094" fg:w="7"/><text x="27.9185%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (97 samples, 0.14%)</title><rect x="27.6786%" y="245" width="0.1406%" height="15" fill="rgb(221,155,16)" fg:x="19101" fg:w="97"/><text x="27.9286%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (21 samples, 0.03%)</title><rect x="27.7887%" y="229" width="0.0304%" height="15" fill="rgb(215,215,53)" fg:x="19177" fg:w="21"/><text x="28.0387%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.03%)</title><rect x="27.7887%" y="213" width="0.0304%" height="15" fill="rgb(223,4,10)" fg:x="19177" fg:w="21"/><text x="28.0387%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,521 samples, 3.65%)</title><rect x="24.1820%" y="277" width="3.6531%" height="15" fill="rgb(234,103,6)" fg:x="16688" fg:w="2521"/><text x="24.4320%" y="287.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (244 samples, 0.35%)</title><rect x="27.4815%" y="261" width="0.3536%" height="15" fill="rgb(227,97,0)" fg:x="18965" fg:w="244"/><text x="27.7315%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="27.8192%" y="245" width="0.0159%" height="15" fill="rgb(234,150,53)" fg:x="19198" fg:w="11"/><text x="28.0692%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (224 samples, 0.32%)</title><rect x="27.8351%" y="277" width="0.3246%" height="15" fill="rgb(228,201,54)" fg:x="19209" fg:w="224"/><text x="28.0851%" y="287.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (200 samples, 0.29%)</title><rect x="27.8699%" y="261" width="0.2898%" height="15" fill="rgb(222,22,37)" fg:x="19233" fg:w="200"/><text x="28.1199%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (149 samples, 0.22%)</title><rect x="27.9438%" y="245" width="0.2159%" height="15" fill="rgb(237,53,32)" fg:x="19284" fg:w="149"/><text x="28.1938%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (96 samples, 0.14%)</title><rect x="28.0206%" y="229" width="0.1391%" height="15" fill="rgb(233,25,53)" fg:x="19337" fg:w="96"/><text x="28.2706%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (47 samples, 0.07%)</title><rect x="28.0916%" y="213" width="0.0681%" height="15" fill="rgb(210,40,34)" fg:x="19386" fg:w="47"/><text x="28.3416%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (256 samples, 0.37%)</title><rect x="28.1597%" y="277" width="0.3710%" height="15" fill="rgb(241,220,44)" fg:x="19433" fg:w="256"/><text x="28.4097%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,712 samples, 3.93%)</title><rect x="28.5306%" y="277" width="3.9299%" height="15" fill="rgb(235,28,35)" fg:x="19689" fg:w="2712"/><text x="28.7806%" y="287.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (137 samples, 0.20%)</title><rect x="32.4605%" y="277" width="0.1985%" height="15" fill="rgb(210,56,17)" fg:x="22401" fg:w="137"/><text x="32.7105%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (132 samples, 0.19%)</title><rect x="32.7880%" y="261" width="0.1913%" height="15" fill="rgb(224,130,29)" fg:x="22627" fg:w="132"/><text x="33.0380%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="33.2213%" y="245" width="0.0130%" height="15" fill="rgb(235,212,8)" fg:x="22926" fg:w="9"/><text x="33.4713%" y="255.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (51 samples, 0.07%)</title><rect x="33.2358%" y="245" width="0.0739%" height="15" fill="rgb(223,33,50)" fg:x="22936" fg:w="51"/><text x="33.4858%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (224 samples, 0.32%)</title><rect x="33.3097%" y="245" width="0.3246%" height="15" fill="rgb(219,149,13)" fg:x="22987" fg:w="224"/><text x="33.5597%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,001 samples, 1.45%)</title><rect x="32.6590%" y="277" width="1.4505%" height="15" fill="rgb(250,156,29)" fg:x="22538" fg:w="1001"/><text x="32.9090%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (780 samples, 1.13%)</title><rect x="32.9793%" y="261" width="1.1303%" height="15" fill="rgb(216,193,19)" fg:x="22759" fg:w="780"/><text x="33.2293%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (328 samples, 0.48%)</title><rect x="33.6343%" y="245" width="0.4753%" height="15" fill="rgb(216,135,14)" fg:x="23211" fg:w="328"/><text x="33.8843%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (12 samples, 0.02%)</title><rect x="34.1095%" y="277" width="0.0174%" height="15" fill="rgb(241,47,5)" fg:x="23539" fg:w="12"/><text x="34.3595%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.02%)</title><rect x="34.1269%" y="277" width="0.0174%" height="15" fill="rgb(233,42,35)" fg:x="23551" fg:w="12"/><text x="34.3769%" y="287.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (149 samples, 0.22%)</title><rect x="34.1443%" y="277" width="0.2159%" height="15" fill="rgb(231,13,6)" fg:x="23563" fg:w="149"/><text x="34.3943%" y="287.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,684 samples, 5.34%)</title><rect x="36.9932%" y="261" width="5.3384%" height="15" fill="rgb(207,181,40)" fg:x="25529" fg:w="3684"/><text x="37.2432%" y="271.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (41 samples, 0.06%)</title><rect x="42.3388%" y="213" width="0.0594%" height="15" fill="rgb(254,173,49)" fg:x="29218" fg:w="41"/><text x="42.5888%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.05%)</title><rect x="42.3446%" y="197" width="0.0536%" height="15" fill="rgb(221,1,38)" fg:x="29222" fg:w="37"/><text x="42.5946%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (47 samples, 0.07%)</title><rect x="42.3315%" y="261" width="0.0681%" height="15" fill="rgb(206,124,46)" fg:x="29213" fg:w="47"/><text x="42.5815%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (47 samples, 0.07%)</title><rect x="42.3315%" y="245" width="0.0681%" height="15" fill="rgb(249,21,11)" fg:x="29213" fg:w="47"/><text x="42.5815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (44 samples, 0.06%)</title><rect x="42.3359%" y="229" width="0.0638%" height="15" fill="rgb(222,201,40)" fg:x="29216" fg:w="44"/><text x="42.5859%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,247 samples, 4.71%)</title><rect x="42.3997%" y="261" width="4.7051%" height="15" fill="rgb(235,61,29)" fg:x="29260" fg:w="3247"/><text x="42.6497%" y="271.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (653 samples, 0.95%)</title><rect x="47.1048%" y="261" width="0.9462%" height="15" fill="rgb(219,207,3)" fg:x="32507" fg:w="653"/><text x="47.3548%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (30 samples, 0.04%)</title><rect x="48.1032%" y="245" width="0.0435%" height="15" fill="rgb(222,56,46)" fg:x="33196" fg:w="30"/><text x="48.3532%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.04%)</title><rect x="48.1032%" y="229" width="0.0435%" height="15" fill="rgb(239,76,54)" fg:x="33196" fg:w="30"/><text x="48.3532%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.01%)</title><rect x="48.1466%" y="245" width="0.0101%" height="15" fill="rgb(231,124,27)" fg:x="33226" fg:w="7"/><text x="48.3966%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (138 samples, 0.20%)</title><rect x="48.1568%" y="245" width="0.2000%" height="15" fill="rgb(249,195,6)" fg:x="33233" fg:w="138"/><text x="48.4068%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="48.5524%" y="229" width="0.0101%" height="15" fill="rgb(237,174,47)" fg:x="33506" fg:w="7"/><text x="48.8024%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (224 samples, 0.32%)</title><rect x="48.5625%" y="229" width="0.3246%" height="15" fill="rgb(206,201,31)" fg:x="33513" fg:w="224"/><text x="48.8125%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (792 samples, 1.15%)</title><rect x="48.0510%" y="261" width="1.1477%" height="15" fill="rgb(231,57,52)" fg:x="33160" fg:w="792"/><text x="48.3010%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (581 samples, 0.84%)</title><rect x="48.3568%" y="245" width="0.8419%" height="15" fill="rgb(248,177,22)" fg:x="33371" fg:w="581"/><text x="48.6068%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (215 samples, 0.31%)</title><rect x="48.8871%" y="229" width="0.3115%" height="15" fill="rgb(215,211,37)" fg:x="33737" fg:w="215"/><text x="49.1371%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.04%)</title><rect x="52.3924%" y="197" width="0.0435%" height="15" fill="rgb(241,128,51)" fg:x="36156" fg:w="30"/><text x="52.6424%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.04%)</title><rect x="52.3953%" y="181" width="0.0406%" height="15" fill="rgb(227,165,31)" fg:x="36158" fg:w="28"/><text x="52.6453%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (12,476 samples, 18.08%)</title><rect x="34.3602%" y="277" width="18.0785%" height="15" fill="rgb(228,167,24)" fg:x="23712" fg:w="12476"/><text x="34.6102%" y="287.50">rust_qecp`rust_qecp::ftqec::..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (2,236 samples, 3.24%)</title><rect x="49.1987%" y="261" width="3.2401%" height="15" fill="rgb(228,143,12)" fg:x="33952" fg:w="2236"/><text x="49.4487%" y="271.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (33 samples, 0.05%)</title><rect x="52.3910%" y="245" width="0.0478%" height="15" fill="rgb(249,149,8)" fg:x="36155" fg:w="33"/><text x="52.6410%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="52.3910%" y="229" width="0.0478%" height="15" fill="rgb(243,35,44)" fg:x="36155" fg:w="33"/><text x="52.6410%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (32 samples, 0.05%)</title><rect x="52.3924%" y="213" width="0.0464%" height="15" fill="rgb(246,89,9)" fg:x="36156" fg:w="32"/><text x="52.6424%" y="223.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.03%)</title><rect x="53.9661%" y="261" width="0.0304%" height="15" fill="rgb(233,213,13)" fg:x="37242" fg:w="21"/><text x="54.2161%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.03%)</title><rect x="53.9980%" y="245" width="0.0319%" height="15" fill="rgb(233,141,41)" fg:x="37264" fg:w="22"/><text x="54.2480%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="54.0197%" y="229" width="0.0101%" height="15" fill="rgb(239,167,4)" fg:x="37279" fg:w="7"/><text x="54.2697%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (24 samples, 0.03%)</title><rect x="53.9980%" y="261" width="0.0348%" height="15" fill="rgb(209,217,16)" fg:x="37264" fg:w="24"/><text x="54.2480%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (35 samples, 0.05%)</title><rect x="54.0327%" y="245" width="0.0507%" height="15" fill="rgb(219,88,35)" fg:x="37288" fg:w="35"/><text x="54.2827%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="54.0835%" y="245" width="0.0130%" height="15" fill="rgb(220,193,23)" fg:x="37323" fg:w="9"/><text x="54.3335%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="54.0965%" y="245" width="0.0174%" height="15" fill="rgb(230,90,52)" fg:x="37332" fg:w="12"/><text x="54.3465%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.03%)</title><rect x="54.1139%" y="245" width="0.0261%" height="15" fill="rgb(252,106,19)" fg:x="37344" fg:w="18"/><text x="54.3639%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.01%)</title><rect x="54.1400%" y="245" width="0.0145%" height="15" fill="rgb(206,74,20)" fg:x="37362" fg:w="10"/><text x="54.3900%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="54.1545%" y="245" width="0.0130%" height="15" fill="rgb(230,138,44)" fg:x="37372" fg:w="9"/><text x="54.4045%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="54.3501%" y="213" width="0.0159%" height="15" fill="rgb(235,182,43)" fg:x="37507" fg:w="11"/><text x="54.6001%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (55 samples, 0.08%)</title><rect x="54.6269%" y="181" width="0.0797%" height="15" fill="rgb(242,16,51)" fg:x="37698" fg:w="55"/><text x="54.8769%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (199 samples, 0.29%)</title><rect x="54.4196%" y="197" width="0.2884%" height="15" fill="rgb(248,9,4)" fg:x="37555" fg:w="199"/><text x="54.6696%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (356 samples, 0.52%)</title><rect x="54.2226%" y="229" width="0.5159%" height="15" fill="rgb(210,31,22)" fg:x="37419" fg:w="356"/><text x="54.4726%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (257 samples, 0.37%)</title><rect x="54.3660%" y="213" width="0.3724%" height="15" fill="rgb(239,54,39)" fg:x="37518" fg:w="257"/><text x="54.6160%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.03%)</title><rect x="54.7080%" y="197" width="0.0304%" height="15" fill="rgb(230,99,41)" fg:x="37754" fg:w="21"/><text x="54.9580%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (31 samples, 0.04%)</title><rect x="54.7384%" y="229" width="0.0449%" height="15" fill="rgb(253,106,12)" fg:x="37775" fg:w="31"/><text x="54.9884%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (55 samples, 0.08%)</title><rect x="54.8993%" y="213" width="0.0797%" height="15" fill="rgb(213,46,41)" fg:x="37886" fg:w="55"/><text x="55.1493%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (136 samples, 0.20%)</title><rect x="54.7834%" y="229" width="0.1971%" height="15" fill="rgb(215,133,35)" fg:x="37806" fg:w="136"/><text x="55.0334%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (13 samples, 0.02%)</title><rect x="54.9804%" y="229" width="0.0188%" height="15" fill="rgb(213,28,5)" fg:x="37942" fg:w="13"/><text x="55.2304%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (43 samples, 0.06%)</title><rect x="54.9993%" y="229" width="0.0623%" height="15" fill="rgb(215,77,49)" fg:x="37955" fg:w="43"/><text x="55.2493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="55.0616%" y="229" width="0.0101%" height="15" fill="rgb(248,100,22)" fg:x="37998" fg:w="7"/><text x="55.3116%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.02%)</title><rect x="55.0717%" y="229" width="0.0232%" height="15" fill="rgb(208,67,9)" fg:x="38005" fg:w="16"/><text x="55.3217%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (714 samples, 1.03%)</title><rect x="55.1326%" y="213" width="1.0346%" height="15" fill="rgb(219,133,21)" fg:x="38047" fg:w="714"/><text x="55.3826%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="56.1672%" y="213" width="0.0130%" height="15" fill="rgb(246,46,29)" fg:x="38761" fg:w="9"/><text x="56.4172%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41 samples, 0.06%)</title><rect x="56.2382%" y="197" width="0.0594%" height="15" fill="rgb(246,185,52)" fg:x="38810" fg:w="41"/><text x="56.4882%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (74 samples, 0.11%)</title><rect x="56.2976%" y="197" width="0.1072%" height="15" fill="rgb(252,136,11)" fg:x="38851" fg:w="74"/><text x="56.5476%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (168 samples, 0.24%)</title><rect x="56.1890%" y="213" width="0.2434%" height="15" fill="rgb(219,138,53)" fg:x="38776" fg:w="168"/><text x="56.4390%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.03%)</title><rect x="56.4049%" y="197" width="0.0275%" height="15" fill="rgb(211,51,23)" fg:x="38925" fg:w="19"/><text x="56.6549%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.02%)</title><rect x="56.4324%" y="213" width="0.0232%" height="15" fill="rgb(247,221,28)" fg:x="38944" fg:w="16"/><text x="56.6824%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.04%)</title><rect x="56.8236%" y="149" width="0.0420%" height="15" fill="rgb(251,222,45)" fg:x="39214" fg:w="29"/><text x="57.0736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (181 samples, 0.26%)</title><rect x="56.6498%" y="165" width="0.2623%" height="15" fill="rgb(217,162,53)" fg:x="39094" fg:w="181"/><text x="56.8998%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (32 samples, 0.05%)</title><rect x="56.8657%" y="149" width="0.0464%" height="15" fill="rgb(229,93,14)" fg:x="39243" fg:w="32"/><text x="57.1157%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (251 samples, 0.36%)</title><rect x="56.5686%" y="197" width="0.3637%" height="15" fill="rgb(209,67,49)" fg:x="39038" fg:w="251"/><text x="56.8186%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (206 samples, 0.30%)</title><rect x="56.6338%" y="181" width="0.2985%" height="15" fill="rgb(213,87,29)" fg:x="39083" fg:w="206"/><text x="56.8838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="56.9120%" y="165" width="0.0203%" height="15" fill="rgb(205,151,52)" fg:x="39275" fg:w="14"/><text x="57.1620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.03%)</title><rect x="56.9323%" y="197" width="0.0319%" height="15" fill="rgb(253,215,39)" fg:x="39289" fg:w="22"/><text x="57.1823%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,296 samples, 1.88%)</title><rect x="55.0949%" y="229" width="1.8780%" height="15" fill="rgb(221,220,41)" fg:x="38021" fg:w="1296"/><text x="55.3449%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (357 samples, 0.52%)</title><rect x="56.4556%" y="213" width="0.5173%" height="15" fill="rgb(218,133,21)" fg:x="38960" fg:w="357"/><text x="56.7056%" y="223.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.06%)</title><rect x="57.0541%" y="213" width="0.0609%" height="15" fill="rgb(221,193,43)" fg:x="39373" fg:w="42"/><text x="57.3041%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (71 samples, 0.10%)</title><rect x="57.1149%" y="213" width="0.1029%" height="15" fill="rgb(240,128,52)" fg:x="39415" fg:w="71"/><text x="57.3649%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (224 samples, 0.32%)</title><rect x="56.9729%" y="229" width="0.3246%" height="15" fill="rgb(253,114,12)" fg:x="39317" fg:w="224"/><text x="57.2229%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (55 samples, 0.08%)</title><rect x="57.2178%" y="213" width="0.0797%" height="15" fill="rgb(215,223,47)" fg:x="39486" fg:w="55"/><text x="57.4678%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="57.2975%" y="229" width="0.0217%" height="15" fill="rgb(248,225,23)" fg:x="39541" fg:w="15"/><text x="57.5475%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,181 samples, 3.16%)</title><rect x="54.1748%" y="245" width="3.1604%" height="15" fill="rgb(250,108,0)" fg:x="37386" fg:w="2181"/><text x="54.4248%" y="255.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="57.3192%" y="229" width="0.0159%" height="15" fill="rgb(228,208,7)" fg:x="39556" fg:w="11"/><text x="57.5692%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (16 samples, 0.02%)</title><rect x="57.3410%" y="245" width="0.0232%" height="15" fill="rgb(244,45,10)" fg:x="39571" fg:w="16"/><text x="57.5910%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (16 samples, 0.02%)</title><rect x="57.3642%" y="245" width="0.0232%" height="15" fill="rgb(207,125,25)" fg:x="39587" fg:w="16"/><text x="57.6142%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.02%)</title><rect x="57.3873%" y="245" width="0.0246%" height="15" fill="rgb(210,195,18)" fg:x="39603" fg:w="17"/><text x="57.6373%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.02%)</title><rect x="57.4120%" y="245" width="0.0159%" height="15" fill="rgb(249,80,12)" fg:x="39620" fg:w="11"/><text x="57.6620%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,346 samples, 3.40%)</title><rect x="54.0327%" y="261" width="3.3995%" height="15" fill="rgb(221,65,9)" fg:x="37288" fg:w="2346"/><text x="54.2827%" y="271.50">rus..</text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="57.4352%" y="165" width="0.0159%" height="15" fill="rgb(235,49,36)" fg:x="39636" fg:w="11"/><text x="57.6852%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="57.4323%" y="261" width="0.0203%" height="15" fill="rgb(225,32,20)" fg:x="39634" fg:w="14"/><text x="57.6823%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="57.4337%" y="245" width="0.0188%" height="15" fill="rgb(215,141,46)" fg:x="39635" fg:w="13"/><text x="57.6837%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="57.4337%" y="229" width="0.0188%" height="15" fill="rgb(250,160,47)" fg:x="39635" fg:w="13"/><text x="57.6837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="57.4337%" y="213" width="0.0188%" height="15" fill="rgb(216,222,40)" fg:x="39635" fg:w="13"/><text x="57.6837%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="57.4337%" y="197" width="0.0188%" height="15" fill="rgb(234,217,39)" fg:x="39635" fg:w="13"/><text x="57.6837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="57.4352%" y="181" width="0.0174%" height="15" fill="rgb(207,178,40)" fg:x="39636" fg:w="12"/><text x="57.6852%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.05%)</title><rect x="57.6395%" y="245" width="0.0478%" height="15" fill="rgb(221,136,13)" fg:x="39777" fg:w="33"/><text x="57.8895%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (14 samples, 0.02%)</title><rect x="57.6873%" y="245" width="0.0203%" height="15" fill="rgb(249,199,10)" fg:x="39810" fg:w="14"/><text x="57.9373%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (29 samples, 0.04%)</title><rect x="57.7076%" y="245" width="0.0420%" height="15" fill="rgb(249,222,13)" fg:x="39824" fg:w="29"/><text x="57.9576%" y="255.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="57.7496%" y="245" width="0.0116%" height="15" fill="rgb(244,185,38)" fg:x="39853" fg:w="8"/><text x="57.9996%" y="255.50"></text></g><g><title>rust_qecp`__rdl_realloc (10 samples, 0.01%)</title><rect x="57.7612%" y="245" width="0.0145%" height="15" fill="rgb(236,202,9)" fg:x="39861" fg:w="10"/><text x="58.0112%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.05%)</title><rect x="58.0612%" y="181" width="0.0536%" height="15" fill="rgb(250,229,37)" fg:x="40068" fg:w="37"/><text x="58.3112%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.17%)</title><rect x="57.9583%" y="197" width="0.1666%" height="15" fill="rgb(206,174,23)" fg:x="39997" fg:w="115"/><text x="58.2083%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="58.1148%" y="181" width="0.0101%" height="15" fill="rgb(211,33,43)" fg:x="40105" fg:w="7"/><text x="58.3648%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="58.1249%" y="197" width="0.0116%" height="15" fill="rgb(245,58,50)" fg:x="40112" fg:w="8"/><text x="58.3749%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (213 samples, 0.31%)</title><rect x="57.8293%" y="229" width="0.3087%" height="15" fill="rgb(244,68,36)" fg:x="39908" fg:w="213"/><text x="58.0793%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (153 samples, 0.22%)</title><rect x="57.9162%" y="213" width="0.2217%" height="15" fill="rgb(232,229,15)" fg:x="39968" fg:w="153"/><text x="58.1662%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="58.1380%" y="229" width="0.0275%" height="15" fill="rgb(254,30,23)" fg:x="40121" fg:w="19"/><text x="58.3880%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="58.1655%" y="229" width="0.0159%" height="15" fill="rgb(235,160,14)" fg:x="40140" fg:w="11"/><text x="58.4155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.02%)</title><rect x="58.1829%" y="229" width="0.0246%" height="15" fill="rgb(212,155,44)" fg:x="40152" fg:w="17"/><text x="58.4329%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (23 samples, 0.03%)</title><rect x="58.3611%" y="213" width="0.0333%" height="15" fill="rgb(226,2,50)" fg:x="40275" fg:w="23"/><text x="58.6111%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (14 samples, 0.02%)</title><rect x="58.4973%" y="197" width="0.0203%" height="15" fill="rgb(234,177,6)" fg:x="40369" fg:w="14"/><text x="58.7473%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="58.5176%" y="197" width="0.0391%" height="15" fill="rgb(217,24,9)" fg:x="40383" fg:w="27"/><text x="58.7676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (30 samples, 0.04%)</title><rect x="58.5567%" y="197" width="0.0435%" height="15" fill="rgb(220,13,46)" fg:x="40410" fg:w="30"/><text x="58.8067%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (270 samples, 0.39%)</title><rect x="58.6046%" y="197" width="0.3912%" height="15" fill="rgb(239,221,27)" fg:x="40443" fg:w="270"/><text x="58.8546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="59.1393%" y="181" width="0.0391%" height="15" fill="rgb(222,198,25)" fg:x="40812" fg:w="27"/><text x="59.3893%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (141 samples, 0.20%)</title><rect x="59.1784%" y="181" width="0.2043%" height="15" fill="rgb(211,99,13)" fg:x="40839" fg:w="141"/><text x="59.4284%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.03%)</title><rect x="59.5725%" y="149" width="0.0348%" height="15" fill="rgb(232,111,31)" fg:x="41111" fg:w="24"/><text x="59.8225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (140 samples, 0.20%)</title><rect x="59.4131%" y="165" width="0.2029%" height="15" fill="rgb(245,82,37)" fg:x="41001" fg:w="140"/><text x="59.6631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (174 samples, 0.25%)</title><rect x="59.3827%" y="181" width="0.2521%" height="15" fill="rgb(227,149,46)" fg:x="40980" fg:w="174"/><text x="59.6327%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="59.6160%" y="165" width="0.0188%" height="15" fill="rgb(218,36,50)" fg:x="41141" fg:w="13"/><text x="59.8660%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (91 samples, 0.13%)</title><rect x="59.6348%" y="181" width="0.1319%" height="15" fill="rgb(226,80,48)" fg:x="41154" fg:w="91"/><text x="59.8848%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (41 samples, 0.06%)</title><rect x="59.8812%" y="149" width="0.0594%" height="15" fill="rgb(238,224,15)" fg:x="41324" fg:w="41"/><text x="60.1312%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (12 samples, 0.02%)</title><rect x="59.9478%" y="149" width="0.0174%" height="15" fill="rgb(241,136,10)" fg:x="41370" fg:w="12"/><text x="60.1978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (482 samples, 0.70%)</title><rect x="59.7667%" y="181" width="0.6984%" height="15" fill="rgb(208,32,45)" fg:x="41245" fg:w="482"/><text x="60.0167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (465 samples, 0.67%)</title><rect x="59.7913%" y="165" width="0.6738%" height="15" fill="rgb(207,135,9)" fg:x="41262" fg:w="465"/><text x="60.0413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (345 samples, 0.50%)</title><rect x="59.9652%" y="149" width="0.4999%" height="15" fill="rgb(206,86,44)" fg:x="41382" fg:w="345"/><text x="60.2152%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1,022 samples, 1.48%)</title><rect x="58.9958%" y="197" width="1.4809%" height="15" fill="rgb(245,177,15)" fg:x="40713" fg:w="1022"/><text x="59.2458%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="60.4651%" y="181" width="0.0116%" height="15" fill="rgb(206,64,50)" fg:x="41727" fg:w="8"/><text x="60.7151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,509 samples, 2.19%)</title><rect x="58.3944%" y="213" width="2.1866%" height="15" fill="rgb(234,36,40)" fg:x="40298" fg:w="1509"/><text x="58.6444%" y="223.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (70 samples, 0.10%)</title><rect x="60.4796%" y="197" width="0.1014%" height="15" fill="rgb(213,64,8)" fg:x="41737" fg:w="70"/><text x="60.7296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (98 samples, 0.14%)</title><rect x="60.5811%" y="213" width="0.1420%" height="15" fill="rgb(210,75,36)" fg:x="41807" fg:w="98"/><text x="60.8311%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.05%)</title><rect x="60.7231%" y="213" width="0.0478%" height="15" fill="rgb(229,88,21)" fg:x="41905" fg:w="33"/><text x="60.9731%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,776 samples, 2.57%)</title><rect x="58.2075%" y="229" width="2.5735%" height="15" fill="rgb(252,204,47)" fg:x="40169" fg:w="1776"/><text x="58.4575%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="60.7709%" y="213" width="0.0101%" height="15" fill="rgb(208,77,27)" fg:x="41938" fg:w="7"/><text x="61.0209%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,310 samples, 3.35%)</title><rect x="57.4525%" y="261" width="3.3473%" height="15" fill="rgb(221,76,26)" fg:x="39648" fg:w="2310"/><text x="57.7025%" y="271.50">rus..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,087 samples, 3.02%)</title><rect x="57.7757%" y="245" width="3.0242%" height="15" fill="rgb(225,139,18)" fg:x="39871" fg:w="2087"/><text x="58.0257%" y="255.50">rus..</text></g><g><title>rust_qecp`__rdl_realloc (13 samples, 0.02%)</title><rect x="60.7810%" y="229" width="0.0188%" height="15" fill="rgb(230,137,11)" fg:x="41945" fg:w="13"/><text x="61.0310%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (52 samples, 0.08%)</title><rect x="60.7999%" y="261" width="0.0754%" height="15" fill="rgb(212,28,1)" fg:x="41958" fg:w="52"/><text x="61.0499%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (293 samples, 0.42%)</title><rect x="60.8752%" y="245" width="0.4246%" height="15" fill="rgb(248,164,17)" fg:x="42010" fg:w="293"/><text x="61.1252%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.02%)</title><rect x="61.9446%" y="229" width="0.0203%" height="15" fill="rgb(222,171,42)" fg:x="42748" fg:w="14"/><text x="62.1946%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="61.9649%" y="229" width="0.0130%" height="15" fill="rgb(243,84,45)" fg:x="42762" fg:w="9"/><text x="62.2149%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="62.2403%" y="197" width="0.0130%" height="15" fill="rgb(252,49,23)" fg:x="42952" fg:w="9"/><text x="62.4903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (28 samples, 0.04%)</title><rect x="62.2533%" y="197" width="0.0406%" height="15" fill="rgb(215,19,7)" fg:x="42961" fg:w="28"/><text x="62.5033%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (192 samples, 0.28%)</title><rect x="62.4837%" y="165" width="0.2782%" height="15" fill="rgb(238,81,41)" fg:x="43120" fg:w="192"/><text x="62.7337%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,428 samples, 2.07%)</title><rect x="62.8691%" y="149" width="2.0693%" height="15" fill="rgb(210,199,37)" fg:x="43386" fg:w="1428"/><text x="63.1191%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (19 samples, 0.03%)</title><rect x="64.9384%" y="149" width="0.0275%" height="15" fill="rgb(244,192,49)" fg:x="44814" fg:w="19"/><text x="65.1884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,137 samples, 3.10%)</title><rect x="62.1055%" y="213" width="3.0967%" height="15" fill="rgb(226,211,11)" fg:x="42859" fg:w="2137"/><text x="62.3555%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,007 samples, 2.91%)</title><rect x="62.2939%" y="197" width="2.9083%" height="15" fill="rgb(236,162,54)" fg:x="42989" fg:w="2007"/><text x="62.5439%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,971 samples, 2.86%)</title><rect x="62.3460%" y="181" width="2.8561%" height="15" fill="rgb(220,229,9)" fg:x="43025" fg:w="1971"/><text x="62.5960%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1,682 samples, 2.44%)</title><rect x="62.7648%" y="165" width="2.4373%" height="15" fill="rgb(250,87,22)" fg:x="43314" fg:w="1682"/><text x="63.0148%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (163 samples, 0.24%)</title><rect x="64.9659%" y="149" width="0.2362%" height="15" fill="rgb(239,43,17)" fg:x="44833" fg:w="163"/><text x="65.2159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (87 samples, 0.13%)</title><rect x="65.2021%" y="213" width="0.1261%" height="15" fill="rgb(231,177,25)" fg:x="44996" fg:w="87"/><text x="65.4521%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (249 samples, 0.36%)</title><rect x="65.3282%" y="213" width="0.3608%" height="15" fill="rgb(219,179,1)" fg:x="45083" fg:w="249"/><text x="65.5782%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,036 samples, 4.40%)</title><rect x="61.3042%" y="245" width="4.3994%" height="15" fill="rgb(238,219,53)" fg:x="42306" fg:w="3036"/><text x="61.5542%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2,566 samples, 3.72%)</title><rect x="61.9852%" y="229" width="3.7183%" height="15" fill="rgb(232,167,36)" fg:x="42776" fg:w="2566"/><text x="62.2352%" y="239.50">rust..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.01%)</title><rect x="65.6890%" y="213" width="0.0145%" height="15" fill="rgb(244,19,51)" fg:x="45332" fg:w="10"/><text x="65.9390%" y="223.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,351 samples, 4.86%)</title><rect x="60.8752%" y="261" width="4.8558%" height="15" fill="rgb(224,6,22)" fg:x="42010" fg:w="3351"/><text x="61.1252%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="65.7035%" y="245" width="0.0275%" height="15" fill="rgb(224,145,5)" fg:x="45342" fg:w="19"/><text x="65.9535%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.02%)</title><rect x="66.4599%" y="229" width="0.0246%" height="15" fill="rgb(234,130,49)" fg:x="45864" fg:w="17"/><text x="66.7099%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (14 samples, 0.02%)</title><rect x="66.8700%" y="213" width="0.0203%" height="15" fill="rgb(254,6,2)" fg:x="46147" fg:w="14"/><text x="67.1200%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (26 samples, 0.04%)</title><rect x="67.3033%" y="197" width="0.0377%" height="15" fill="rgb(208,96,46)" fg:x="46446" fg:w="26"/><text x="67.5533%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (43 samples, 0.06%)</title><rect x="67.6989%" y="181" width="0.0623%" height="15" fill="rgb(239,3,39)" fg:x="46719" fg:w="43"/><text x="67.9489%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (19 samples, 0.03%)</title><rect x="68.0843%" y="165" width="0.0275%" height="15" fill="rgb(233,210,1)" fg:x="46985" fg:w="19"/><text x="68.3343%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (8 samples, 0.01%)</title><rect x="68.2568%" y="149" width="0.0116%" height="15" fill="rgb(244,137,37)" fg:x="47104" fg:w="8"/><text x="68.5068%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,810 samples, 2.62%)</title><rect x="65.7311%" y="261" width="2.6228%" height="15" fill="rgb(240,136,2)" fg:x="45361" fg:w="1810"/><text x="65.9811%" y="271.50">ru..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,589 samples, 2.30%)</title><rect x="66.0513%" y="245" width="2.3026%" height="15" fill="rgb(239,18,37)" fg:x="45582" fg:w="1589"/><text x="66.3013%" y="255.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,290 samples, 1.87%)</title><rect x="66.4846%" y="229" width="1.8693%" height="15" fill="rgb(218,185,22)" fg:x="45881" fg:w="1290"/><text x="66.7346%" y="239.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,010 samples, 1.46%)</title><rect x="66.8903%" y="213" width="1.4636%" height="15" fill="rgb(225,218,4)" fg:x="46161" fg:w="1010"/><text x="67.1403%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (699 samples, 1.01%)</title><rect x="67.3410%" y="197" width="1.0129%" height="15" fill="rgb(230,182,32)" fg:x="46472" fg:w="699"/><text x="67.5910%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (409 samples, 0.59%)</title><rect x="67.7612%" y="181" width="0.5927%" height="15" fill="rgb(242,56,43)" fg:x="46762" fg:w="409"/><text x="68.0112%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (167 samples, 0.24%)</title><rect x="68.1119%" y="165" width="0.2420%" height="15" fill="rgb(233,99,24)" fg:x="47004" fg:w="167"/><text x="68.3619%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (59 samples, 0.09%)</title><rect x="68.2684%" y="149" width="0.0855%" height="15" fill="rgb(234,209,42)" fg:x="47112" fg:w="59"/><text x="68.5184%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (15 samples, 0.02%)</title><rect x="68.3321%" y="133" width="0.0217%" height="15" fill="rgb(227,7,12)" fg:x="47156" fg:w="15"/><text x="68.5821%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (467 samples, 0.68%)</title><rect x="69.4711%" y="245" width="0.6767%" height="15" fill="rgb(245,203,43)" fg:x="47942" fg:w="467"/><text x="69.7211%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,027 samples, 1.49%)</title><rect x="70.1478%" y="245" width="1.4882%" height="15" fill="rgb(238,205,33)" fg:x="48409" fg:w="1027"/><text x="70.3978%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,302 samples, 4.78%)</title><rect x="68.3539%" y="261" width="4.7848%" height="15" fill="rgb(231,56,7)" fg:x="47171" fg:w="3302"/><text x="68.6039%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,037 samples, 1.50%)</title><rect x="71.6360%" y="245" width="1.5027%" height="15" fill="rgb(244,186,29)" fg:x="49436" fg:w="1037"/><text x="71.8860%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (73 samples, 0.11%)</title><rect x="73.1387%" y="261" width="0.1058%" height="15" fill="rgb(234,111,31)" fg:x="50473" fg:w="73"/><text x="73.3887%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (14,808 samples, 21.46%)</title><rect x="52.4460%" y="277" width="21.4578%" height="15" fill="rgb(241,149,10)" fg:x="36193" fg:w="14808"/><text x="52.6960%" y="287.50">rust_qecp`rust_qecp::union_find_de..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (455 samples, 0.66%)</title><rect x="73.2445%" y="261" width="0.6593%" height="15" fill="rgb(249,206,44)" fg:x="50546" fg:w="455"/><text x="73.4945%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (19 samples, 0.03%)</title><rect x="74.8790%" y="261" width="0.0275%" height="15" fill="rgb(251,153,30)" fg:x="51674" fg:w="19"/><text x="75.1290%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.04%)</title><rect x="74.9761%" y="229" width="0.0435%" height="15" fill="rgb(239,152,38)" fg:x="51741" fg:w="30"/><text x="75.2261%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.01%)</title><rect x="75.0051%" y="213" width="0.0145%" height="15" fill="rgb(249,139,47)" fg:x="51761" fg:w="10"/><text x="75.2551%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 0.08%)</title><rect x="74.9544%" y="245" width="0.0754%" height="15" fill="rgb(244,64,35)" fg:x="51726" fg:w="52"/><text x="75.2044%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="75.0196%" y="229" width="0.0101%" height="15" fill="rgb(216,46,15)" fg:x="51771" fg:w="7"/><text x="75.2696%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (89 samples, 0.13%)</title><rect x="74.9065%" y="261" width="0.1290%" height="15" fill="rgb(250,74,19)" fg:x="51693" fg:w="89"/><text x="75.1565%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="75.0355%" y="261" width="0.0130%" height="15" fill="rgb(249,42,33)" fg:x="51782" fg:w="9"/><text x="75.2855%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.07%)</title><rect x="75.1355%" y="245" width="0.0739%" height="15" fill="rgb(242,149,17)" fg:x="51851" fg:w="51"/><text x="75.3855%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (121 samples, 0.18%)</title><rect x="75.0485%" y="261" width="0.1753%" height="15" fill="rgb(244,29,21)" fg:x="51791" fg:w="121"/><text x="75.2985%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="75.2123%" y="245" width="0.0116%" height="15" fill="rgb(220,130,37)" fg:x="51904" fg:w="8"/><text x="75.4623%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="75.2123%" y="229" width="0.0116%" height="15" fill="rgb(211,67,2)" fg:x="51904" fg:w="8"/><text x="75.4623%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="75.2253%" y="245" width="0.0116%" height="15" fill="rgb(235,68,52)" fg:x="51913" fg:w="8"/><text x="75.4753%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (10 samples, 0.01%)</title><rect x="75.2239%" y="261" width="0.0145%" height="15" fill="rgb(246,142,3)" fg:x="51912" fg:w="10"/><text x="75.4739%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.02%)</title><rect x="75.2427%" y="261" width="0.0246%" height="15" fill="rgb(241,25,7)" fg:x="51925" fg:w="17"/><text x="75.4927%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.02%)</title><rect x="75.2500%" y="245" width="0.0174%" height="15" fill="rgb(242,119,39)" fg:x="51930" fg:w="12"/><text x="75.5000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (45 samples, 0.07%)</title><rect x="75.2731%" y="261" width="0.0652%" height="15" fill="rgb(241,98,45)" fg:x="51946" fg:w="45"/><text x="75.5231%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="75.3398%" y="261" width="0.0130%" height="15" fill="rgb(254,28,30)" fg:x="51992" fg:w="9"/><text x="75.5898%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (30 samples, 0.04%)</title><rect x="75.3528%" y="261" width="0.0435%" height="15" fill="rgb(241,142,54)" fg:x="52001" fg:w="30"/><text x="75.6028%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="75.4050%" y="261" width="0.0174%" height="15" fill="rgb(222,85,15)" fg:x="52037" fg:w="12"/><text x="75.6550%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (482 samples, 0.70%)</title><rect x="75.4224%" y="261" width="0.6984%" height="15" fill="rgb(210,85,47)" fg:x="52049" fg:w="482"/><text x="75.6724%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="76.1266%" y="261" width="0.0101%" height="15" fill="rgb(224,206,25)" fg:x="52535" fg:w="7"/><text x="76.3766%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="76.1571%" y="197" width="0.0130%" height="15" fill="rgb(243,201,19)" fg:x="52556" fg:w="9"/><text x="76.4071%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="76.1513%" y="213" width="0.0203%" height="15" fill="rgb(236,59,4)" fg:x="52552" fg:w="14"/><text x="76.4013%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.04%)</title><rect x="76.1382%" y="261" width="0.0406%" height="15" fill="rgb(254,179,45)" fg:x="52543" fg:w="28"/><text x="76.3882%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (24 samples, 0.03%)</title><rect x="76.1440%" y="245" width="0.0348%" height="15" fill="rgb(226,14,10)" fg:x="52547" fg:w="24"/><text x="76.3940%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (23 samples, 0.03%)</title><rect x="76.1455%" y="229" width="0.0333%" height="15" fill="rgb(244,27,41)" fg:x="52548" fg:w="23"/><text x="76.3955%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (947 samples, 1.37%)</title><rect x="76.1817%" y="261" width="1.3723%" height="15" fill="rgb(235,35,32)" fg:x="52573" fg:w="947"/><text x="76.4317%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (48 samples, 0.07%)</title><rect x="77.5540%" y="261" width="0.0696%" height="15" fill="rgb(218,68,31)" fg:x="53520" fg:w="48"/><text x="77.8040%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.02%)</title><rect x="77.6235%" y="261" width="0.0232%" height="15" fill="rgb(207,120,37)" fg:x="53568" fg:w="16"/><text x="77.8735%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.02%)</title><rect x="77.7844%" y="197" width="0.0246%" height="15" fill="rgb(227,98,0)" fg:x="53679" fg:w="17"/><text x="78.0344%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (42 samples, 0.06%)</title><rect x="77.7496%" y="213" width="0.0609%" height="15" fill="rgb(207,7,3)" fg:x="53655" fg:w="42"/><text x="77.9996%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (77 samples, 0.11%)</title><rect x="77.7003%" y="229" width="0.1116%" height="15" fill="rgb(206,98,19)" fg:x="53621" fg:w="77"/><text x="77.9503%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (152 samples, 0.22%)</title><rect x="77.6699%" y="245" width="0.2203%" height="15" fill="rgb(217,5,26)" fg:x="53600" fg:w="152"/><text x="77.9199%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.08%)</title><rect x="77.8119%" y="229" width="0.0782%" height="15" fill="rgb(235,190,38)" fg:x="53698" fg:w="54"/><text x="78.0619%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.07%)</title><rect x="77.8250%" y="213" width="0.0652%" height="15" fill="rgb(247,86,24)" fg:x="53707" fg:w="45"/><text x="78.0750%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (31 samples, 0.04%)</title><rect x="77.8452%" y="197" width="0.0449%" height="15" fill="rgb(205,101,16)" fg:x="53721" fg:w="31"/><text x="78.0952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="77.8902%" y="245" width="0.0101%" height="15" fill="rgb(246,168,33)" fg:x="53752" fg:w="7"/><text x="78.1402%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (177 samples, 0.26%)</title><rect x="77.6467%" y="261" width="0.2565%" height="15" fill="rgb(231,114,1)" fg:x="53584" fg:w="177"/><text x="77.8967%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (9 samples, 0.01%)</title><rect x="77.9032%" y="261" width="0.0130%" height="15" fill="rgb(207,184,53)" fg:x="53761" fg:w="9"/><text x="78.1532%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (2,770 samples, 4.01%)</title><rect x="73.9038%" y="277" width="4.0139%" height="15" fill="rgb(224,95,51)" fg:x="51001" fg:w="2770"/><text x="74.1538%" y="287.50">rust..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (44,870 samples, 65.02%)</title><rect x="12.9083%" y="309" width="65.0196%" height="15" fill="rgb(212,188,45)" fg:x="8908" fg:w="44870"/><text x="13.1583%" y="319.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (43,667 samples, 63.28%)</title><rect x="14.6515%" y="293" width="63.2763%" height="15" fill="rgb(223,154,38)" fg:x="10111" fg:w="43667"/><text x="14.9015%" y="303.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,966 samples, 2.85%)</title><rect x="77.9278%" y="309" width="2.8489%" height="15" fill="rgb(251,22,52)" fg:x="53778" fg:w="1966"/><text x="78.1778%" y="319.50">ru..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (230 samples, 0.33%)</title><rect x="80.7767%" y="309" width="0.3333%" height="15" fill="rgb(229,209,22)" fg:x="55744" fg:w="230"/><text x="81.0267%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (99 samples, 0.14%)</title><rect x="80.9665%" y="293" width="0.1435%" height="15" fill="rgb(234,138,34)" fg:x="55875" fg:w="99"/><text x="81.2165%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (7,148 samples, 10.36%)</title><rect x="81.1100%" y="309" width="10.3579%" height="15" fill="rgb(212,95,11)" fg:x="55974" fg:w="7148"/><text x="81.3600%" y="319.50">rust_qecp`rust_..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (97 samples, 0.14%)</title><rect x="91.4694%" y="293" width="0.1406%" height="15" fill="rgb(240,179,47)" fg:x="63123" fg:w="97"/><text x="91.7194%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (453 samples, 0.66%)</title><rect x="91.4679%" y="309" width="0.6564%" height="15" fill="rgb(240,163,11)" fg:x="63122" fg:w="453"/><text x="91.7179%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (355 samples, 0.51%)</title><rect x="91.6099%" y="293" width="0.5144%" height="15" fill="rgb(236,37,12)" fg:x="63220" fg:w="355"/><text x="91.8599%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (44 samples, 0.06%)</title><rect x="92.1243%" y="309" width="0.0638%" height="15" fill="rgb(232,164,16)" fg:x="63575" fg:w="44"/><text x="92.3743%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (5,327 samples, 7.72%)</title><rect x="92.1895%" y="309" width="7.7192%" height="15" fill="rgb(244,205,15)" fg:x="63620" fg:w="5327"/><text x="92.4395%" y="319.50">rust_qecp`r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (3,759 samples, 5.45%)</title><rect x="94.4617%" y="293" width="5.4470%" height="15" fill="rgb(223,117,47)" fg:x="65188" fg:w="3759"/><text x="94.7117%" y="303.50">rust_qe..</text></g><g><title>all (69,010 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="69010"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,134 samples, 87.14%)</title><rect x="12.8619%" y="389" width="87.1381%" height="15" fill="rgb(205,140,8)" fg:x="8876" fg:w="60134"/><text x="13.1119%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,134 samples, 87.14%)</title><rect x="12.8619%" y="373" width="87.1381%" height="15" fill="rgb(228,84,46)" fg:x="8876" fg:w="60134"/><text x="13.1119%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,134 samples, 87.14%)</title><rect x="12.8619%" y="357" width="87.1381%" height="15" fill="rgb(254,188,9)" fg:x="8876" fg:w="60134"/><text x="13.1119%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,134 samples, 87.14%)</title><rect x="12.8619%" y="341" width="87.1381%" height="15" fill="rgb(206,112,54)" fg:x="8876" fg:w="60134"/><text x="13.1119%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,134 samples, 87.14%)</title><rect x="12.8619%" y="325" width="87.1381%" height="15" fill="rgb(216,84,49)" fg:x="8876" fg:w="60134"/><text x="13.1119%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (63 samples, 0.09%)</title><rect x="99.9087%" y="309" width="0.0913%" height="15" fill="rgb(214,194,35)" fg:x="68947" fg:w="63"/><text x="100.1587%" y="319.50"></text></g></svg></svg>