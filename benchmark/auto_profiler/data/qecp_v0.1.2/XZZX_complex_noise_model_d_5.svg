<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60456"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (15 samples, 0.02%)</title><rect x="0.0116%" y="53" width="0.0248%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="15"/><text x="0.2616%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (15 samples, 0.02%)</title><rect x="0.0116%" y="37" width="0.0248%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="15"/><text x="0.2616%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (22 samples, 0.04%)</title><rect x="0.0099%" y="69" width="0.0364%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="22"/><text x="0.2599%" y="79.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (7 samples, 0.01%)</title><rect x="0.0595%" y="53" width="0.0116%" height="15" fill="rgb(248,212,6)" fg:x="36" fg:w="7"/><text x="0.3095%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (16 samples, 0.03%)</title><rect x="0.0463%" y="69" width="0.0265%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="16"/><text x="0.2963%" y="79.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="0.0777%" y="53" width="0.0215%" height="15" fill="rgb(232,128,0)" fg:x="47" fg:w="13"/><text x="0.3277%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (32 samples, 0.05%)</title><rect x="0.1059%" y="53" width="0.0529%" height="15" fill="rgb(207,160,47)" fg:x="64" fg:w="32"/><text x="0.3559%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (16 samples, 0.03%)</title><rect x="0.1323%" y="37" width="0.0265%" height="15" fill="rgb(228,23,34)" fg:x="80" fg:w="16"/><text x="0.3823%" y="47.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (53 samples, 0.09%)</title><rect x="0.0728%" y="69" width="0.0877%" height="15" fill="rgb(218,30,26)" fg:x="44" fg:w="53"/><text x="0.3228%" y="79.50"></text></g><g><title>dyld`start (102 samples, 0.17%)</title><rect x="0.0000%" y="309" width="0.1687%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="102"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (101 samples, 0.17%)</title><rect x="0.0017%" y="293" width="0.1671%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="101"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (101 samples, 0.17%)</title><rect x="0.0017%" y="277" width="0.1671%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="101"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (101 samples, 0.17%)</title><rect x="0.0017%" y="261" width="0.1671%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="101"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (101 samples, 0.17%)</title><rect x="0.0017%" y="245" width="0.1671%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="101"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (101 samples, 0.17%)</title><rect x="0.0017%" y="229" width="0.1671%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="101"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (100 samples, 0.17%)</title><rect x="0.0033%" y="213" width="0.1654%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="100"/><text x="0.2533%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (100 samples, 0.17%)</title><rect x="0.0033%" y="197" width="0.1654%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="100"/><text x="0.2533%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (100 samples, 0.17%)</title><rect x="0.0033%" y="181" width="0.1654%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="100"/><text x="0.2533%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (100 samples, 0.17%)</title><rect x="0.0033%" y="165" width="0.1654%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="100"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (100 samples, 0.17%)</title><rect x="0.0033%" y="149" width="0.1654%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="100"/><text x="0.2533%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (100 samples, 0.17%)</title><rect x="0.0033%" y="133" width="0.1654%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="100"/><text x="0.2533%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (100 samples, 0.17%)</title><rect x="0.0033%" y="117" width="0.1654%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="100"/><text x="0.2533%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (100 samples, 0.17%)</title><rect x="0.0033%" y="101" width="0.1654%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="100"/><text x="0.2533%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (99 samples, 0.16%)</title><rect x="0.0050%" y="85" width="0.1638%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="99"/><text x="0.2550%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (10 samples, 0.02%)</title><rect x="0.1737%" y="229" width="0.0165%" height="15" fill="rgb(241,131,45)" fg:x="105" fg:w="10"/><text x="0.4237%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.01%)</title><rect x="0.1919%" y="229" width="0.0116%" height="15" fill="rgb(249,31,29)" fg:x="116" fg:w="7"/><text x="0.4419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.03%)</title><rect x="0.2035%" y="229" width="0.0331%" height="15" fill="rgb(225,111,53)" fg:x="123" fg:w="20"/><text x="0.4535%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="0.2365%" y="229" width="0.0198%" height="15" fill="rgb(238,160,17)" fg:x="143" fg:w="12"/><text x="0.4865%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="0.2564%" y="229" width="0.0165%" height="15" fill="rgb(214,148,48)" fg:x="155" fg:w="10"/><text x="0.5064%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="0.2597%" y="213" width="0.0132%" height="15" fill="rgb(232,36,49)" fg:x="157" fg:w="8"/><text x="0.5097%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="0.2729%" y="229" width="0.0149%" height="15" fill="rgb(209,103,24)" fg:x="165" fg:w="9"/><text x="0.5229%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.02%)</title><rect x="0.2944%" y="229" width="0.0232%" height="15" fill="rgb(229,88,8)" fg:x="178" fg:w="14"/><text x="0.5444%" y="239.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.11%)</title><rect x="0.3176%" y="229" width="0.1059%" height="15" fill="rgb(213,181,19)" fg:x="192" fg:w="64"/><text x="0.5676%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.08%)</title><rect x="0.4499%" y="213" width="0.0794%" height="15" fill="rgb(254,191,54)" fg:x="272" fg:w="48"/><text x="0.6999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="0.4995%" y="197" width="0.0298%" height="15" fill="rgb(241,83,37)" fg:x="302" fg:w="18"/><text x="0.7495%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="0.5293%" y="213" width="0.0149%" height="15" fill="rgb(233,36,39)" fg:x="320" fg:w="9"/><text x="0.7793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="0.5326%" y="197" width="0.0116%" height="15" fill="rgb(226,3,54)" fg:x="322" fg:w="7"/><text x="0.7826%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (39 samples, 0.06%)</title><rect x="0.5492%" y="213" width="0.0645%" height="15" fill="rgb(245,192,40)" fg:x="332" fg:w="39"/><text x="0.7992%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (20 samples, 0.03%)</title><rect x="0.5806%" y="197" width="0.0331%" height="15" fill="rgb(238,167,29)" fg:x="351" fg:w="20"/><text x="0.8306%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.03%)</title><rect x="0.5822%" y="181" width="0.0314%" height="15" fill="rgb(232,182,51)" fg:x="352" fg:w="19"/><text x="0.8322%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.20%)</title><rect x="0.4234%" y="229" width="0.1985%" height="15" fill="rgb(231,60,39)" fg:x="256" fg:w="120"/><text x="0.6734%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (7 samples, 0.01%)</title><rect x="0.6236%" y="229" width="0.0116%" height="15" fill="rgb(208,69,12)" fg:x="377" fg:w="7"/><text x="0.8736%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.04%)</title><rect x="0.6600%" y="229" width="0.0380%" height="15" fill="rgb(235,93,37)" fg:x="399" fg:w="23"/><text x="0.9100%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.04%)</title><rect x="0.7576%" y="213" width="0.0380%" height="15" fill="rgb(213,116,39)" fg:x="458" fg:w="23"/><text x="1.0076%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="0.7956%" y="213" width="0.0480%" height="15" fill="rgb(222,207,29)" fg:x="481" fg:w="29"/><text x="1.0456%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="0.8171%" y="197" width="0.0265%" height="15" fill="rgb(206,96,30)" fg:x="494" fg:w="16"/><text x="1.0671%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="0.8221%" y="181" width="0.0215%" height="15" fill="rgb(218,138,4)" fg:x="497" fg:w="13"/><text x="1.0721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="0.8287%" y="165" width="0.0149%" height="15" fill="rgb(250,191,14)" fg:x="501" fg:w="9"/><text x="1.0787%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.02%)</title><rect x="0.8436%" y="213" width="0.0232%" height="15" fill="rgb(239,60,40)" fg:x="510" fg:w="14"/><text x="1.0936%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="0.9428%" y="197" width="0.0298%" height="15" fill="rgb(206,27,48)" fg:x="570" fg:w="18"/><text x="1.1928%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (62 samples, 0.10%)</title><rect x="0.8717%" y="213" width="0.1026%" height="15" fill="rgb(225,35,8)" fg:x="527" fg:w="62"/><text x="1.1217%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="0.9825%" y="213" width="0.0132%" height="15" fill="rgb(250,213,24)" fg:x="594" fg:w="8"/><text x="1.2325%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="0.9958%" y="213" width="0.0347%" height="15" fill="rgb(247,123,22)" fg:x="602" fg:w="21"/><text x="1.2458%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.03%)</title><rect x="1.0305%" y="213" width="0.0314%" height="15" fill="rgb(231,138,38)" fg:x="623" fg:w="19"/><text x="1.2805%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.01%)</title><rect x="1.0702%" y="213" width="0.0132%" height="15" fill="rgb(231,145,46)" fg:x="647" fg:w="8"/><text x="1.3202%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.06%)</title><rect x="1.0851%" y="213" width="0.0612%" height="15" fill="rgb(251,118,11)" fg:x="656" fg:w="37"/><text x="1.3351%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.09%)</title><rect x="1.1479%" y="213" width="0.0910%" height="15" fill="rgb(217,147,25)" fg:x="694" fg:w="55"/><text x="1.3979%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (334 samples, 0.55%)</title><rect x="1.2389%" y="213" width="0.5525%" height="15" fill="rgb(247,81,37)" fg:x="749" fg:w="334"/><text x="1.4889%" y="223.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (20 samples, 0.03%)</title><rect x="1.7914%" y="213" width="0.0331%" height="15" fill="rgb(209,12,38)" fg:x="1083" fg:w="20"/><text x="2.0414%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (25 samples, 0.04%)</title><rect x="1.8245%" y="213" width="0.0414%" height="15" fill="rgb(227,1,9)" fg:x="1103" fg:w="25"/><text x="2.0745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="1.8923%" y="165" width="0.0265%" height="15" fill="rgb(248,47,43)" fg:x="1144" fg:w="16"/><text x="2.1423%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.04%)</title><rect x="1.8824%" y="213" width="0.0414%" height="15" fill="rgb(221,10,30)" fg:x="1138" fg:w="25"/><text x="2.1324%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.04%)</title><rect x="1.8873%" y="197" width="0.0364%" height="15" fill="rgb(210,229,1)" fg:x="1141" fg:w="22"/><text x="2.1373%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.03%)</title><rect x="1.8923%" y="181" width="0.0314%" height="15" fill="rgb(222,148,37)" fg:x="1144" fg:w="19"/><text x="2.1423%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.09%)</title><rect x="1.9336%" y="213" width="0.0926%" height="15" fill="rgb(234,67,33)" fg:x="1169" fg:w="56"/><text x="2.1836%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (457 samples, 0.76%)</title><rect x="2.0263%" y="213" width="0.7559%" height="15" fill="rgb(247,98,35)" fg:x="1225" fg:w="457"/><text x="2.2763%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (26 samples, 0.04%)</title><rect x="2.7822%" y="213" width="0.0430%" height="15" fill="rgb(247,138,52)" fg:x="1682" fg:w="26"/><text x="3.0322%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.05%)</title><rect x="2.8252%" y="213" width="0.0513%" height="15" fill="rgb(213,79,30)" fg:x="1708" fg:w="31"/><text x="3.0752%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="3.3380%" y="197" width="0.0529%" height="15" fill="rgb(246,177,23)" fg:x="2018" fg:w="32"/><text x="3.5880%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="3.3595%" y="181" width="0.0314%" height="15" fill="rgb(230,62,27)" fg:x="2031" fg:w="19"/><text x="3.6095%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="3.3694%" y="165" width="0.0215%" height="15" fill="rgb(216,154,8)" fg:x="2037" fg:w="13"/><text x="3.6194%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="3.3777%" y="149" width="0.0132%" height="15" fill="rgb(244,35,45)" fg:x="2042" fg:w="8"/><text x="3.6277%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="3.4124%" y="165" width="0.0182%" height="15" fill="rgb(251,115,12)" fg:x="2063" fg:w="11"/><text x="3.6624%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="3.4174%" y="149" width="0.0132%" height="15" fill="rgb(240,54,50)" fg:x="2066" fg:w="8"/><text x="3.6674%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.02%)</title><rect x="3.4322%" y="149" width="0.0248%" height="15" fill="rgb(233,84,52)" fg:x="2075" fg:w="15"/><text x="3.6822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.01%)</title><rect x="3.4422%" y="133" width="0.0149%" height="15" fill="rgb(207,117,47)" fg:x="2081" fg:w="9"/><text x="3.6922%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.03%)</title><rect x="3.4306%" y="165" width="0.0331%" height="15" fill="rgb(249,43,39)" fg:x="2074" fg:w="20"/><text x="3.6806%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 0.06%)</title><rect x="3.4025%" y="197" width="0.0629%" height="15" fill="rgb(209,38,44)" fg:x="2057" fg:w="38"/><text x="3.6525%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="3.4107%" y="181" width="0.0546%" height="15" fill="rgb(236,212,23)" fg:x="2062" fg:w="33"/><text x="3.6607%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (350 samples, 0.58%)</title><rect x="2.8914%" y="213" width="0.5789%" height="15" fill="rgb(242,79,21)" fg:x="1748" fg:w="350"/><text x="3.1414%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (93 samples, 0.15%)</title><rect x="12.3396%" y="197" width="0.1538%" height="15" fill="rgb(211,96,35)" fg:x="7460" fg:w="93"/><text x="12.5896%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (96 samples, 0.16%)</title><rect x="12.4934%" y="197" width="0.1588%" height="15" fill="rgb(253,215,40)" fg:x="7553" fg:w="96"/><text x="12.7434%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="12.6522%" y="197" width="0.0132%" height="15" fill="rgb(211,81,21)" fg:x="7649" fg:w="8"/><text x="12.9022%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (82 samples, 0.14%)</title><rect x="12.6654%" y="197" width="0.1356%" height="15" fill="rgb(208,190,38)" fg:x="7657" fg:w="82"/><text x="12.9154%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (70 samples, 0.12%)</title><rect x="13.1749%" y="181" width="0.1158%" height="15" fill="rgb(235,213,38)" fg:x="7965" fg:w="70"/><text x="13.4249%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (369 samples, 0.61%)</title><rect x="12.8010%" y="197" width="0.6104%" height="15" fill="rgb(237,122,38)" fg:x="7739" fg:w="369"/><text x="13.0510%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (67 samples, 0.11%)</title><rect x="13.3006%" y="181" width="0.1108%" height="15" fill="rgb(244,218,35)" fg:x="8041" fg:w="67"/><text x="13.5506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (59 samples, 0.10%)</title><rect x="13.3138%" y="165" width="0.0976%" height="15" fill="rgb(240,68,47)" fg:x="8049" fg:w="59"/><text x="13.5638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (36 samples, 0.06%)</title><rect x="13.4114%" y="197" width="0.0595%" height="15" fill="rgb(210,16,53)" fg:x="8108" fg:w="36"/><text x="13.6614%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="13.4561%" y="181" width="0.0149%" height="15" fill="rgb(235,124,12)" fg:x="8135" fg:w="9"/><text x="13.7061%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (60 samples, 0.10%)</title><rect x="13.7058%" y="165" width="0.0992%" height="15" fill="rgb(224,169,11)" fg:x="8286" fg:w="60"/><text x="13.9558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (253 samples, 0.42%)</title><rect x="13.4710%" y="197" width="0.4185%" height="15" fill="rgb(250,166,2)" fg:x="8144" fg:w="253"/><text x="13.7210%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (188 samples, 0.31%)</title><rect x="13.5785%" y="181" width="0.3110%" height="15" fill="rgb(242,216,29)" fg:x="8209" fg:w="188"/><text x="13.8285%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (51 samples, 0.08%)</title><rect x="13.8051%" y="165" width="0.0844%" height="15" fill="rgb(230,116,27)" fg:x="8346" fg:w="51"/><text x="14.0551%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (88 samples, 0.15%)</title><rect x="13.8894%" y="197" width="0.1456%" height="15" fill="rgb(228,99,48)" fg:x="8397" fg:w="88"/><text x="14.1394%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (65 samples, 0.11%)</title><rect x="14.0350%" y="197" width="0.1075%" height="15" fill="rgb(253,11,6)" fg:x="8485" fg:w="65"/><text x="14.2850%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.05%)</title><rect x="14.1425%" y="197" width="0.0463%" height="15" fill="rgb(247,143,39)" fg:x="8550" fg:w="28"/><text x="14.3925%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (25 samples, 0.04%)</title><rect x="14.1888%" y="197" width="0.0414%" height="15" fill="rgb(236,97,10)" fg:x="8578" fg:w="25"/><text x="14.4388%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.02%)</title><rect x="14.2302%" y="197" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="8603" fg:w="12"/><text x="14.4802%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="14.2500%" y="197" width="0.0182%" height="15" fill="rgb(216,164,2)" fg:x="8615" fg:w="11"/><text x="14.5000%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="14.2699%" y="197" width="0.0215%" height="15" fill="rgb(220,129,5)" fg:x="8627" fg:w="13"/><text x="14.5199%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (115 samples, 0.19%)</title><rect x="14.3327%" y="181" width="0.1902%" height="15" fill="rgb(242,17,10)" fg:x="8665" fg:w="115"/><text x="14.5827%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (33 samples, 0.05%)</title><rect x="14.4684%" y="165" width="0.0546%" height="15" fill="rgb(242,107,0)" fg:x="8747" fg:w="33"/><text x="14.7184%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (161 samples, 0.27%)</title><rect x="14.2914%" y="197" width="0.2663%" height="15" fill="rgb(251,28,31)" fg:x="8640" fg:w="161"/><text x="14.5414%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="14.5230%" y="181" width="0.0347%" height="15" fill="rgb(233,223,10)" fg:x="8780" fg:w="21"/><text x="14.7730%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (462 samples, 0.76%)</title><rect x="14.5577%" y="197" width="0.7642%" height="15" fill="rgb(215,21,27)" fg:x="8801" fg:w="462"/><text x="14.8077%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.07%)</title><rect x="15.3219%" y="197" width="0.0711%" height="15" fill="rgb(232,23,21)" fg:x="9263" fg:w="43"/><text x="15.5719%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (83 samples, 0.14%)</title><rect x="15.3930%" y="197" width="0.1373%" height="15" fill="rgb(244,5,23)" fg:x="9306" fg:w="83"/><text x="15.6430%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,070 samples, 3.42%)</title><rect x="15.5303%" y="197" width="3.4240%" height="15" fill="rgb(226,81,46)" fg:x="9389" fg:w="2070"/><text x="15.7803%" y="207.50">rus..</text></g><g><title>rust_qecp`DYLD-STUB$$free (72 samples, 0.12%)</title><rect x="18.9543%" y="197" width="0.1191%" height="15" fill="rgb(247,70,30)" fg:x="11459" fg:w="72"/><text x="19.2043%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="19.0734%" y="197" width="0.0248%" height="15" fill="rgb(212,68,19)" fg:x="11531" fg:w="15"/><text x="19.3234%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="19.1031%" y="197" width="0.0281%" height="15" fill="rgb(240,187,13)" fg:x="11549" fg:w="17"/><text x="19.3531%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.03%)</title><rect x="19.1412%" y="197" width="0.0281%" height="15" fill="rgb(223,113,26)" fg:x="11572" fg:w="17"/><text x="19.3912%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="19.1495%" y="181" width="0.0198%" height="15" fill="rgb(206,192,2)" fg:x="11577" fg:w="12"/><text x="19.3995%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="19.1528%" y="165" width="0.0165%" height="15" fill="rgb(241,108,4)" fg:x="11579" fg:w="10"/><text x="19.4028%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="19.1544%" y="149" width="0.0149%" height="15" fill="rgb(247,173,49)" fg:x="11580" fg:w="9"/><text x="19.4044%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="19.2851%" y="133" width="0.0198%" height="15" fill="rgb(224,114,35)" fg:x="11659" fg:w="12"/><text x="19.5351%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="19.2801%" y="149" width="0.0281%" height="15" fill="rgb(245,159,27)" fg:x="11656" fg:w="17"/><text x="19.5301%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="19.2702%" y="165" width="0.0447%" height="15" fill="rgb(245,172,44)" fg:x="11650" fg:w="27"/><text x="19.5202%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="19.3893%" y="133" width="0.0149%" height="15" fill="rgb(236,23,11)" fg:x="11722" fg:w="9"/><text x="19.6393%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="19.4125%" y="117" width="0.0132%" height="15" fill="rgb(205,117,38)" fg:x="11736" fg:w="8"/><text x="19.6625%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="19.4257%" y="117" width="0.0165%" height="15" fill="rgb(237,72,25)" fg:x="11744" fg:w="10"/><text x="19.6757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="19.4274%" y="101" width="0.0149%" height="15" fill="rgb(244,70,9)" fg:x="11745" fg:w="9"/><text x="19.6774%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="19.4422%" y="117" width="0.0165%" height="15" fill="rgb(217,125,39)" fg:x="11754" fg:w="10"/><text x="19.6922%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="19.4588%" y="117" width="0.0314%" height="15" fill="rgb(235,36,10)" fg:x="11764" fg:w="19"/><text x="19.7088%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="19.4588%" y="101" width="0.0314%" height="15" fill="rgb(251,123,47)" fg:x="11764" fg:w="19"/><text x="19.7088%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="19.4704%" y="85" width="0.0198%" height="15" fill="rgb(221,13,13)" fg:x="11771" fg:w="12"/><text x="19.7204%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (54 samples, 0.09%)</title><rect x="19.4042%" y="133" width="0.0893%" height="15" fill="rgb(238,131,9)" fg:x="11731" fg:w="54"/><text x="19.6542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.04%)</title><rect x="19.5134%" y="117" width="0.0397%" height="15" fill="rgb(211,50,8)" fg:x="11797" fg:w="24"/><text x="19.7634%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="19.5531%" y="117" width="0.0248%" height="15" fill="rgb(245,182,24)" fg:x="11821" fg:w="15"/><text x="19.8031%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.02%)</title><rect x="19.5564%" y="101" width="0.0215%" height="15" fill="rgb(242,14,37)" fg:x="11823" fg:w="13"/><text x="19.8064%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (9 samples, 0.01%)</title><rect x="19.5812%" y="117" width="0.0149%" height="15" fill="rgb(246,228,12)" fg:x="11838" fg:w="9"/><text x="19.8312%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (7 samples, 0.01%)</title><rect x="19.5961%" y="117" width="0.0116%" height="15" fill="rgb(213,55,15)" fg:x="11847" fg:w="7"/><text x="19.8461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="19.6440%" y="69" width="0.0116%" height="15" fill="rgb(209,9,3)" fg:x="11876" fg:w="7"/><text x="19.8940%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.05%)</title><rect x="19.6176%" y="101" width="0.0529%" height="15" fill="rgb(230,59,30)" fg:x="11860" fg:w="32"/><text x="19.8676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.04%)</title><rect x="19.6308%" y="85" width="0.0397%" height="15" fill="rgb(209,121,21)" fg:x="11868" fg:w="24"/><text x="19.8808%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="19.6589%" y="69" width="0.0116%" height="15" fill="rgb(220,109,13)" fg:x="11885" fg:w="7"/><text x="19.9089%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.08%)</title><rect x="19.6076%" y="117" width="0.0794%" height="15" fill="rgb(232,18,1)" fg:x="11854" fg:w="48"/><text x="19.8576%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="19.6705%" y="101" width="0.0165%" height="15" fill="rgb(215,41,42)" fg:x="11892" fg:w="10"/><text x="19.9205%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (121 samples, 0.20%)</title><rect x="19.5001%" y="133" width="0.2001%" height="15" fill="rgb(224,123,36)" fg:x="11789" fg:w="121"/><text x="19.7501%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (271 samples, 0.45%)</title><rect x="19.3628%" y="149" width="0.4483%" height="15" fill="rgb(240,125,3)" fg:x="11706" fg:w="271"/><text x="19.6128%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (64 samples, 0.11%)</title><rect x="19.7052%" y="133" width="0.1059%" height="15" fill="rgb(205,98,50)" fg:x="11913" fg:w="64"/><text x="19.9552%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="19.8111%" y="149" width="0.0215%" height="15" fill="rgb(205,185,37)" fg:x="11977" fg:w="13"/><text x="20.0611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (335 samples, 0.55%)</title><rect x="19.3281%" y="165" width="0.5541%" height="15" fill="rgb(238,207,15)" fg:x="11685" fg:w="335"/><text x="19.5781%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.03%)</title><rect x="19.8541%" y="149" width="0.0281%" height="15" fill="rgb(213,199,42)" fg:x="12003" fg:w="17"/><text x="20.1041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.02%)</title><rect x="19.8574%" y="133" width="0.0248%" height="15" fill="rgb(235,201,11)" fg:x="12005" fg:w="15"/><text x="20.1074%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (433 samples, 0.72%)</title><rect x="19.1693%" y="197" width="0.7162%" height="15" fill="rgb(207,46,11)" fg:x="11589" fg:w="433"/><text x="19.4193%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (381 samples, 0.63%)</title><rect x="19.2553%" y="181" width="0.6302%" height="15" fill="rgb(241,35,35)" fg:x="11641" fg:w="381"/><text x="19.5053%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="20.0460%" y="181" width="0.0198%" height="15" fill="rgb(243,32,47)" fg:x="12119" fg:w="12"/><text x="20.2960%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (108 samples, 0.18%)</title><rect x="20.4545%" y="165" width="0.1786%" height="15" fill="rgb(247,202,23)" fg:x="12366" fg:w="108"/><text x="20.7045%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="20.6332%" y="165" width="0.0281%" height="15" fill="rgb(219,102,11)" fg:x="12474" fg:w="17"/><text x="20.8832%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (26 samples, 0.04%)</title><rect x="20.6613%" y="165" width="0.0430%" height="15" fill="rgb(243,110,44)" fg:x="12491" fg:w="26"/><text x="20.9113%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (499 samples, 0.83%)</title><rect x="20.0658%" y="181" width="0.8254%" height="15" fill="rgb(222,74,54)" fg:x="12131" fg:w="499"/><text x="20.3158%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (113 samples, 0.19%)</title><rect x="20.7043%" y="165" width="0.1869%" height="15" fill="rgb(216,99,12)" fg:x="12517" fg:w="113"/><text x="20.9543%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (81 samples, 0.13%)</title><rect x="20.7572%" y="149" width="0.1340%" height="15" fill="rgb(226,22,26)" fg:x="12549" fg:w="81"/><text x="21.0072%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (126 samples, 0.21%)</title><rect x="21.1625%" y="165" width="0.2084%" height="15" fill="rgb(217,163,10)" fg:x="12794" fg:w="126"/><text x="21.4125%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (26 samples, 0.04%)</title><rect x="21.3709%" y="165" width="0.0430%" height="15" fill="rgb(213,25,53)" fg:x="12920" fg:w="26"/><text x="21.6209%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (25 samples, 0.04%)</title><rect x="21.4139%" y="165" width="0.0414%" height="15" fill="rgb(252,105,26)" fg:x="12946" fg:w="25"/><text x="21.6639%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (550 samples, 0.91%)</title><rect x="20.8912%" y="181" width="0.9098%" height="15" fill="rgb(220,39,43)" fg:x="12630" fg:w="550"/><text x="21.1412%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (209 samples, 0.35%)</title><rect x="21.4553%" y="165" width="0.3457%" height="15" fill="rgb(229,68,48)" fg:x="12971" fg:w="209"/><text x="21.7053%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (69 samples, 0.11%)</title><rect x="22.0507%" y="149" width="0.1141%" height="15" fill="rgb(252,8,32)" fg:x="13331" fg:w="69"/><text x="22.3007%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (306 samples, 0.51%)</title><rect x="21.8010%" y="181" width="0.5062%" height="15" fill="rgb(223,20,43)" fg:x="13180" fg:w="306"/><text x="22.0510%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (266 samples, 0.44%)</title><rect x="21.8671%" y="165" width="0.4400%" height="15" fill="rgb(229,81,49)" fg:x="13220" fg:w="266"/><text x="22.1171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (86 samples, 0.14%)</title><rect x="22.1649%" y="149" width="0.1423%" height="15" fill="rgb(236,28,36)" fg:x="13400" fg:w="86"/><text x="22.4149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.03%)</title><rect x="22.3071%" y="181" width="0.0347%" height="15" fill="rgb(249,185,26)" fg:x="13486" fg:w="21"/><text x="22.5571%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (233 samples, 0.39%)</title><rect x="22.3419%" y="181" width="0.3854%" height="15" fill="rgb(249,174,33)" fg:x="13507" fg:w="233"/><text x="22.5919%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (127 samples, 0.21%)</title><rect x="22.5172%" y="165" width="0.2101%" height="15" fill="rgb(233,201,37)" fg:x="13613" fg:w="127"/><text x="22.7672%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (127 samples, 0.21%)</title><rect x="22.5172%" y="149" width="0.2101%" height="15" fill="rgb(221,78,26)" fg:x="13613" fg:w="127"/><text x="22.7672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (35 samples, 0.06%)</title><rect x="22.7273%" y="181" width="0.0579%" height="15" fill="rgb(250,127,30)" fg:x="13740" fg:w="35"/><text x="22.9773%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="22.7934%" y="181" width="0.0165%" height="15" fill="rgb(230,49,44)" fg:x="13780" fg:w="10"/><text x="23.0434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (47 samples, 0.08%)</title><rect x="22.8116%" y="181" width="0.0777%" height="15" fill="rgb(229,67,23)" fg:x="13791" fg:w="47"/><text x="23.0616%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="22.8894%" y="181" width="0.0265%" height="15" fill="rgb(249,83,47)" fg:x="13838" fg:w="16"/><text x="23.1394%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (13 samples, 0.02%)</title><rect x="22.9258%" y="181" width="0.0215%" height="15" fill="rgb(215,43,3)" fg:x="13860" fg:w="13"/><text x="23.1758%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.08%)</title><rect x="23.0730%" y="149" width="0.0811%" height="15" fill="rgb(238,154,13)" fg:x="13949" fg:w="49"/><text x="23.3230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (112 samples, 0.19%)</title><rect x="22.9704%" y="165" width="0.1853%" height="15" fill="rgb(219,56,2)" fg:x="13887" fg:w="112"/><text x="23.2204%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 0.06%)</title><rect x="23.1640%" y="165" width="0.0562%" height="15" fill="rgb(233,0,4)" fg:x="14004" fg:w="34"/><text x="23.4140%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,030 samples, 3.36%)</title><rect x="19.8888%" y="197" width="3.3578%" height="15" fill="rgb(235,30,7)" fg:x="12024" fg:w="2030"/><text x="20.1388%" y="207.50">rus..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (181 samples, 0.30%)</title><rect x="22.9473%" y="181" width="0.2994%" height="15" fill="rgb(250,79,13)" fg:x="13873" fg:w="181"/><text x="23.1973%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="23.2202%" y="165" width="0.0265%" height="15" fill="rgb(211,146,34)" fg:x="14038" fg:w="16"/><text x="23.4702%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (117 samples, 0.19%)</title><rect x="23.2467%" y="197" width="0.1935%" height="15" fill="rgb(228,22,38)" fg:x="14054" fg:w="117"/><text x="23.4967%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (63 samples, 0.10%)</title><rect x="23.3360%" y="181" width="0.1042%" height="15" fill="rgb(235,168,5)" fg:x="14108" fg:w="63"/><text x="23.5860%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (19 samples, 0.03%)</title><rect x="23.4088%" y="165" width="0.0314%" height="15" fill="rgb(221,155,16)" fg:x="14152" fg:w="19"/><text x="23.6588%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (58 samples, 0.10%)</title><rect x="23.4452%" y="197" width="0.0959%" height="15" fill="rgb(215,215,53)" fg:x="14174" fg:w="58"/><text x="23.6952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.01%)</title><rect x="24.7552%" y="181" width="0.0149%" height="15" fill="rgb(223,4,10)" fg:x="14966" fg:w="9"/><text x="25.0052%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.05%)</title><rect x="24.7701%" y="181" width="0.0496%" height="15" fill="rgb(234,103,6)" fg:x="14975" fg:w="30"/><text x="25.0201%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.03%)</title><rect x="24.8197%" y="181" width="0.0281%" height="15" fill="rgb(227,97,0)" fg:x="15005" fg:w="17"/><text x="25.0697%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="24.8544%" y="181" width="0.0248%" height="15" fill="rgb(234,150,53)" fg:x="15026" fg:w="15"/><text x="25.1044%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="25.6401%" y="165" width="0.0132%" height="15" fill="rgb(228,201,54)" fg:x="15501" fg:w="8"/><text x="25.8901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (69 samples, 0.11%)</title><rect x="25.7857%" y="149" width="0.1141%" height="15" fill="rgb(222,22,37)" fg:x="15589" fg:w="69"/><text x="26.0357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (150 samples, 0.25%)</title><rect x="25.6534%" y="165" width="0.2481%" height="15" fill="rgb(237,53,32)" fg:x="15509" fg:w="150"/><text x="25.9034%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="25.9098%" y="165" width="0.0480%" height="15" fill="rgb(233,25,53)" fg:x="15664" fg:w="29"/><text x="26.1598%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="25.9577%" y="165" width="0.0314%" height="15" fill="rgb(210,40,34)" fg:x="15693" fg:w="19"/><text x="26.2077%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (44 samples, 0.07%)</title><rect x="25.9891%" y="165" width="0.0728%" height="15" fill="rgb(241,220,44)" fg:x="15712" fg:w="44"/><text x="26.2391%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (21 samples, 0.03%)</title><rect x="26.0619%" y="165" width="0.0347%" height="15" fill="rgb(235,28,35)" fg:x="15756" fg:w="21"/><text x="26.3119%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (10 samples, 0.02%)</title><rect x="26.0967%" y="165" width="0.0165%" height="15" fill="rgb(210,56,17)" fg:x="15777" fg:w="10"/><text x="26.3467%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (14 samples, 0.02%)</title><rect x="26.1132%" y="165" width="0.0232%" height="15" fill="rgb(224,130,29)" fg:x="15787" fg:w="14"/><text x="26.3632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (94 samples, 0.16%)</title><rect x="26.9303%" y="117" width="0.1555%" height="15" fill="rgb(235,212,8)" fg:x="16281" fg:w="94"/><text x="27.1803%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="27.0412%" y="101" width="0.0447%" height="15" fill="rgb(223,33,50)" fg:x="16348" fg:w="27"/><text x="27.2912%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (145 samples, 0.24%)</title><rect x="26.8559%" y="133" width="0.2398%" height="15" fill="rgb(219,149,13)" fg:x="16236" fg:w="145"/><text x="27.1059%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (38 samples, 0.06%)</title><rect x="27.2198%" y="101" width="0.0629%" height="15" fill="rgb(250,156,29)" fg:x="16456" fg:w="38"/><text x="27.4698%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (305 samples, 0.50%)</title><rect x="27.0957%" y="133" width="0.5045%" height="15" fill="rgb(216,193,19)" fg:x="16381" fg:w="305"/><text x="27.3457%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (290 samples, 0.48%)</title><rect x="27.1206%" y="117" width="0.4797%" height="15" fill="rgb(216,135,14)" fg:x="16396" fg:w="290"/><text x="27.3706%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (192 samples, 0.32%)</title><rect x="27.2827%" y="101" width="0.3176%" height="15" fill="rgb(241,47,5)" fg:x="16494" fg:w="192"/><text x="27.5327%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (113 samples, 0.19%)</title><rect x="27.4133%" y="85" width="0.1869%" height="15" fill="rgb(233,42,35)" fg:x="16573" fg:w="113"/><text x="27.6633%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (574 samples, 0.95%)</title><rect x="26.6640%" y="149" width="0.9495%" height="15" fill="rgb(231,13,6)" fg:x="16120" fg:w="574"/><text x="26.9140%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="27.6002%" y="133" width="0.0132%" height="15" fill="rgb(207,181,40)" fg:x="16686" fg:w="8"/><text x="27.8502%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.05%)</title><rect x="27.6135%" y="149" width="0.0463%" height="15" fill="rgb(254,173,49)" fg:x="16694" fg:w="28"/><text x="27.8635%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="27.6598%" y="149" width="0.0182%" height="15" fill="rgb(221,1,38)" fg:x="16722" fg:w="11"/><text x="27.9098%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (121 samples, 0.20%)</title><rect x="27.6863%" y="149" width="0.2001%" height="15" fill="rgb(206,124,46)" fg:x="16738" fg:w="121"/><text x="27.9363%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,040 samples, 3.37%)</title><rect x="24.8859%" y="181" width="3.3744%" height="15" fill="rgb(249,21,11)" fg:x="15045" fg:w="2040"/><text x="25.1359%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,280 samples, 2.12%)</title><rect x="26.1430%" y="165" width="2.1172%" height="15" fill="rgb(222,201,40)" fg:x="15805" fg:w="1280"/><text x="26.3930%" y="175.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (226 samples, 0.37%)</title><rect x="27.8864%" y="149" width="0.3738%" height="15" fill="rgb(235,61,29)" fg:x="16859" fg:w="226"/><text x="28.1364%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,876 samples, 4.76%)</title><rect x="23.5411%" y="197" width="4.7572%" height="15" fill="rgb(219,207,3)" fg:x="14232" fg:w="2876"/><text x="23.7911%" y="207.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.04%)</title><rect x="28.2602%" y="181" width="0.0380%" height="15" fill="rgb(222,56,46)" fg:x="17085" fg:w="23"/><text x="28.5102%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,119 samples, 3.51%)</title><rect x="28.2983%" y="197" width="3.5050%" height="15" fill="rgb(239,76,54)" fg:x="17108" fg:w="2119"/><text x="28.5483%" y="207.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (228 samples, 0.38%)</title><rect x="31.8033%" y="197" width="0.3771%" height="15" fill="rgb(231,124,27)" fg:x="19227" fg:w="228"/><text x="32.0533%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="32.5758%" y="165" width="0.0132%" height="15" fill="rgb(249,195,6)" fg:x="19694" fg:w="8"/><text x="32.8258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.05%)</title><rect x="32.5559%" y="181" width="0.0463%" height="15" fill="rgb(237,174,47)" fg:x="19682" fg:w="28"/><text x="32.8059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="32.5890%" y="165" width="0.0132%" height="15" fill="rgb(206,201,31)" fg:x="19702" fg:w="8"/><text x="32.8390%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="32.5890%" y="149" width="0.0132%" height="15" fill="rgb(231,57,52)" fg:x="19702" fg:w="8"/><text x="32.8390%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="32.6022%" y="181" width="0.0182%" height="15" fill="rgb(248,177,22)" fg:x="19710" fg:w="11"/><text x="32.8522%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="32.6320%" y="149" width="0.0116%" height="15" fill="rgb(215,211,37)" fg:x="19728" fg:w="7"/><text x="32.8820%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.03%)</title><rect x="32.6204%" y="181" width="0.0298%" height="15" fill="rgb(241,128,51)" fg:x="19721" fg:w="18"/><text x="32.8704%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.03%)</title><rect x="32.6221%" y="165" width="0.0281%" height="15" fill="rgb(227,165,31)" fg:x="19722" fg:w="17"/><text x="32.8721%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.02%)</title><rect x="32.6700%" y="181" width="0.0165%" height="15" fill="rgb(228,167,24)" fg:x="19751" fg:w="10"/><text x="32.9200%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (120 samples, 0.20%)</title><rect x="32.6932%" y="181" width="0.1985%" height="15" fill="rgb(228,143,12)" fg:x="19765" fg:w="120"/><text x="32.9432%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="33.3118%" y="149" width="0.0314%" height="15" fill="rgb(249,149,8)" fg:x="20139" fg:w="19"/><text x="33.5618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="33.3284%" y="133" width="0.0149%" height="15" fill="rgb(243,35,44)" fg:x="20149" fg:w="9"/><text x="33.5784%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (10 samples, 0.02%)</title><rect x="33.3681%" y="101" width="0.0165%" height="15" fill="rgb(246,89,9)" fg:x="20173" fg:w="10"/><text x="33.6181%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (30 samples, 0.05%)</title><rect x="33.3499%" y="133" width="0.0496%" height="15" fill="rgb(233,213,13)" fg:x="20162" fg:w="30"/><text x="33.5999%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (25 samples, 0.04%)</title><rect x="33.3581%" y="117" width="0.0414%" height="15" fill="rgb(233,141,41)" fg:x="20167" fg:w="25"/><text x="33.6081%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="33.3879%" y="101" width="0.0116%" height="15" fill="rgb(239,167,4)" fg:x="20185" fg:w="7"/><text x="33.6379%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.13%)</title><rect x="33.2953%" y="165" width="0.1323%" height="15" fill="rgb(209,217,16)" fg:x="20129" fg:w="80"/><text x="33.5453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="33.3449%" y="149" width="0.0827%" height="15" fill="rgb(219,88,35)" fg:x="20159" fg:w="50"/><text x="33.5949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="33.3995%" y="133" width="0.0281%" height="15" fill="rgb(220,193,23)" fg:x="20192" fg:w="17"/><text x="33.6495%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="33.4094%" y="117" width="0.0182%" height="15" fill="rgb(230,90,52)" fg:x="20198" fg:w="11"/><text x="33.6594%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (60 samples, 0.10%)</title><rect x="33.4359%" y="165" width="0.0992%" height="15" fill="rgb(252,106,19)" fg:x="20214" fg:w="60"/><text x="33.6859%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (305 samples, 0.50%)</title><rect x="33.5351%" y="165" width="0.5045%" height="15" fill="rgb(206,74,20)" fg:x="20274" fg:w="305"/><text x="33.7851%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,552 samples, 2.57%)</title><rect x="32.1804%" y="197" width="2.5672%" height="15" fill="rgb(230,138,44)" fg:x="19455" fg:w="1552"/><text x="32.4304%" y="207.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,122 samples, 1.86%)</title><rect x="32.8917%" y="181" width="1.8559%" height="15" fill="rgb(235,182,43)" fg:x="19885" fg:w="1122"/><text x="33.1417%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (428 samples, 0.71%)</title><rect x="34.0396%" y="165" width="0.7080%" height="15" fill="rgb(242,16,51)" fg:x="20579" fg:w="428"/><text x="34.2896%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (55 samples, 0.09%)</title><rect x="34.7476%" y="197" width="0.0910%" height="15" fill="rgb(248,9,4)" fg:x="21007" fg:w="55"/><text x="34.9976%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="34.8386%" y="197" width="0.0149%" height="15" fill="rgb(210,31,22)" fg:x="21062" fg:w="9"/><text x="35.0886%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="34.8419%" y="181" width="0.0116%" height="15" fill="rgb(239,54,39)" fg:x="21064" fg:w="7"/><text x="35.0919%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (26 samples, 0.04%)</title><rect x="34.8534%" y="197" width="0.0430%" height="15" fill="rgb(230,99,41)" fg:x="21071" fg:w="26"/><text x="35.1034%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (347 samples, 0.57%)</title><rect x="34.8965%" y="197" width="0.5740%" height="15" fill="rgb(253,106,12)" fg:x="21097" fg:w="347"/><text x="35.1465%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (555 samples, 0.92%)</title><rect x="37.4934%" y="165" width="0.9180%" height="15" fill="rgb(213,46,41)" fg:x="22667" fg:w="555"/><text x="37.7434%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,940 samples, 3.21%)</title><rect x="36.1205%" y="181" width="3.2089%" height="15" fill="rgb(215,133,35)" fg:x="21837" fg:w="1940"/><text x="36.3705%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (555 samples, 0.92%)</title><rect x="38.4114%" y="165" width="0.9180%" height="15" fill="rgb(213,28,5)" fg:x="23222" fg:w="555"/><text x="38.6614%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::DetectedErasures::connected_contains (2,488 samples, 4.12%)</title><rect x="35.4704%" y="197" width="4.1154%" height="15" fill="rgb(215,77,49)" fg:x="21444" fg:w="2488"/><text x="35.7204%" y="207.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (155 samples, 0.26%)</title><rect x="39.3294%" y="181" width="0.2564%" height="15" fill="rgb(248,100,22)" fg:x="23777" fg:w="155"/><text x="39.5794%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,230 samples, 5.34%)</title><rect x="42.8378%" y="181" width="5.3427%" height="15" fill="rgb(208,67,9)" fg:x="25898" fg:w="3230"/><text x="43.0878%" y="191.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (20 samples, 0.03%)</title><rect x="48.2070%" y="117" width="0.0331%" height="15" fill="rgb(219,133,21)" fg:x="29144" fg:w="20"/><text x="48.4570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="48.2268%" y="101" width="0.0132%" height="15" fill="rgb(246,46,29)" fg:x="29156" fg:w="8"/><text x="48.4768%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.01%)</title><rect x="48.2268%" y="85" width="0.0132%" height="15" fill="rgb(246,185,52)" fg:x="29156" fg:w="8"/><text x="48.4768%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="48.2285%" y="69" width="0.0116%" height="15" fill="rgb(252,136,11)" fg:x="29157" fg:w="7"/><text x="48.4785%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (41 samples, 0.07%)</title><rect x="48.1970%" y="133" width="0.0678%" height="15" fill="rgb(219,138,53)" fg:x="29138" fg:w="41"/><text x="48.4470%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.02%)</title><rect x="48.2400%" y="117" width="0.0248%" height="15" fill="rgb(211,51,23)" fg:x="29164" fg:w="15"/><text x="48.4900%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (55 samples, 0.09%)</title><rect x="48.1805%" y="181" width="0.0910%" height="15" fill="rgb(247,221,28)" fg:x="29128" fg:w="55"/><text x="48.4305%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (55 samples, 0.09%)</title><rect x="48.1805%" y="165" width="0.0910%" height="15" fill="rgb(251,222,45)" fg:x="29128" fg:w="55"/><text x="48.4305%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (53 samples, 0.09%)</title><rect x="48.1838%" y="149" width="0.0877%" height="15" fill="rgb(217,162,53)" fg:x="29130" fg:w="53"/><text x="48.4338%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,826 samples, 3.02%)</title><rect x="48.2731%" y="181" width="3.0204%" height="15" fill="rgb(229,93,14)" fg:x="29184" fg:w="1826"/><text x="48.5231%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (77 samples, 0.13%)</title><rect x="51.2935%" y="181" width="0.1274%" height="15" fill="rgb(209,67,49)" fg:x="31010" fg:w="77"/><text x="51.5435%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="51.5102%" y="165" width="0.0116%" height="15" fill="rgb(213,87,29)" fg:x="31141" fg:w="7"/><text x="51.7602%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="51.5433%" y="165" width="0.0149%" height="15" fill="rgb(205,151,52)" fg:x="31161" fg:w="9"/><text x="51.7933%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (75 samples, 0.12%)</title><rect x="51.5582%" y="165" width="0.1241%" height="15" fill="rgb(253,215,39)" fg:x="31170" fg:w="75"/><text x="51.8082%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="51.9386%" y="117" width="0.0182%" height="15" fill="rgb(221,220,41)" fg:x="31400" fg:w="11"/><text x="52.1886%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (11 samples, 0.02%)</title><rect x="51.9386%" y="101" width="0.0182%" height="15" fill="rgb(218,133,21)" fg:x="31400" fg:w="11"/><text x="52.1886%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.04%)</title><rect x="51.9303%" y="149" width="0.0397%" height="15" fill="rgb(221,193,43)" fg:x="31395" fg:w="24"/><text x="52.1803%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="51.9336%" y="133" width="0.0364%" height="15" fill="rgb(240,128,52)" fg:x="31397" fg:w="22"/><text x="52.1836%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="51.9568%" y="117" width="0.0132%" height="15" fill="rgb(253,114,12)" fg:x="31411" fg:w="8"/><text x="52.2068%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="51.9584%" y="101" width="0.0116%" height="15" fill="rgb(215,223,47)" fg:x="31412" fg:w="7"/><text x="52.2084%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (263 samples, 0.44%)</title><rect x="51.9700%" y="149" width="0.4350%" height="15" fill="rgb(248,225,23)" fg:x="31419" fg:w="263"/><text x="52.2200%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (827 samples, 1.37%)</title><rect x="51.4209%" y="181" width="1.3679%" height="15" fill="rgb(250,108,0)" fg:x="31087" fg:w="827"/><text x="51.6709%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (669 samples, 1.11%)</title><rect x="51.6822%" y="165" width="1.1066%" height="15" fill="rgb(228,208,7)" fg:x="31245" fg:w="669"/><text x="51.9322%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (232 samples, 0.38%)</title><rect x="52.4051%" y="149" width="0.3838%" height="15" fill="rgb(244,45,10)" fg:x="31682" fg:w="232"/><text x="52.6551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="55.7976%" y="101" width="0.0165%" height="15" fill="rgb(207,125,25)" fg:x="33733" fg:w="10"/><text x="56.0476%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.02%)</title><rect x="55.8158%" y="101" width="0.0248%" height="15" fill="rgb(210,195,18)" fg:x="33744" fg:w="15"/><text x="56.0658%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.07%)</title><rect x="55.7877%" y="117" width="0.0744%" height="15" fill="rgb(249,80,12)" fg:x="33727" fg:w="45"/><text x="56.0377%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="55.8406%" y="101" width="0.0215%" height="15" fill="rgb(221,65,9)" fg:x="33759" fg:w="13"/><text x="56.0906%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (52 samples, 0.09%)</title><rect x="55.7844%" y="133" width="0.0860%" height="15" fill="rgb(235,49,36)" fg:x="33725" fg:w="52"/><text x="56.0344%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (59 samples, 0.10%)</title><rect x="55.7744%" y="165" width="0.0976%" height="15" fill="rgb(225,32,20)" fg:x="33719" fg:w="59"/><text x="56.0244%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (57 samples, 0.09%)</title><rect x="55.7778%" y="149" width="0.0943%" height="15" fill="rgb(215,141,46)" fg:x="33721" fg:w="57"/><text x="56.0278%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (9,847 samples, 16.29%)</title><rect x="39.5858%" y="197" width="16.2879%" height="15" fill="rgb(250,160,47)" fg:x="23932" fg:w="9847"/><text x="39.8358%" y="207.50">rust_qecp`rust_qecp::ftqe..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (1,865 samples, 3.08%)</title><rect x="52.7888%" y="181" width="3.0849%" height="15" fill="rgb(216,222,40)" fg:x="31914" fg:w="1865"/><text x="53.0388%" y="191.50">rus..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (20 samples, 0.03%)</title><rect x="55.8737%" y="197" width="0.0331%" height="15" fill="rgb(234,217,39)" fg:x="33779" fg:w="20"/><text x="56.1237%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="57.6403%" y="85" width="0.0132%" height="15" fill="rgb(207,178,40)" fg:x="34847" fg:w="8"/><text x="57.8903%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.03%)</title><rect x="57.6337%" y="101" width="0.0265%" height="15" fill="rgb(221,136,13)" fg:x="34843" fg:w="16"/><text x="57.8837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (25 samples, 0.04%)</title><rect x="57.6287%" y="117" width="0.0414%" height="15" fill="rgb(249,199,10)" fg:x="34840" fg:w="25"/><text x="57.8787%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (86 samples, 0.14%)</title><rect x="57.5294%" y="181" width="0.1423%" height="15" fill="rgb(249,222,13)" fg:x="34780" fg:w="86"/><text x="57.7794%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (37 samples, 0.06%)</title><rect x="57.6105%" y="165" width="0.0612%" height="15" fill="rgb(244,185,38)" fg:x="34829" fg:w="37"/><text x="57.8605%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (29 samples, 0.05%)</title><rect x="57.6237%" y="149" width="0.0480%" height="15" fill="rgb(236,202,9)" fg:x="34837" fg:w="29"/><text x="57.8737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.05%)</title><rect x="57.6254%" y="133" width="0.0463%" height="15" fill="rgb(250,229,37)" fg:x="34838" fg:w="28"/><text x="57.8754%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="57.7031%" y="149" width="0.0182%" height="15" fill="rgb(206,174,23)" fg:x="34885" fg:w="11"/><text x="57.9531%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (18 samples, 0.03%)</title><rect x="57.7213%" y="149" width="0.0298%" height="15" fill="rgb(211,33,43)" fg:x="34896" fg:w="18"/><text x="57.9713%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (49 samples, 0.08%)</title><rect x="57.6833%" y="165" width="0.0811%" height="15" fill="rgb(245,58,50)" fg:x="34873" fg:w="49"/><text x="57.9333%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="57.7511%" y="149" width="0.0132%" height="15" fill="rgb(244,68,36)" fg:x="34914" fg:w="8"/><text x="58.0011%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (67 samples, 0.11%)</title><rect x="57.6733%" y="181" width="0.1108%" height="15" fill="rgb(232,229,15)" fg:x="34867" fg:w="67"/><text x="57.9233%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="57.7709%" y="165" width="0.0132%" height="15" fill="rgb(254,30,23)" fg:x="34926" fg:w="8"/><text x="58.0209%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="57.7709%" y="149" width="0.0132%" height="15" fill="rgb(235,160,14)" fg:x="34926" fg:w="8"/><text x="58.0209%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.06%)</title><rect x="57.7842%" y="165" width="0.0562%" height="15" fill="rgb(212,155,44)" fg:x="34934" fg:w="34"/><text x="58.0342%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="57.8404%" y="165" width="0.0232%" height="15" fill="rgb(226,2,50)" fg:x="34968" fg:w="14"/><text x="58.0904%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (24 samples, 0.04%)</title><rect x="57.8636%" y="165" width="0.0397%" height="15" fill="rgb(234,177,6)" fg:x="34982" fg:w="24"/><text x="58.1136%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.04%)</title><rect x="57.9033%" y="165" width="0.0380%" height="15" fill="rgb(217,24,9)" fg:x="35006" fg:w="23"/><text x="58.1533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (19 samples, 0.03%)</title><rect x="57.9413%" y="165" width="0.0314%" height="15" fill="rgb(220,13,46)" fg:x="35029" fg:w="19"/><text x="58.1913%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (20 samples, 0.03%)</title><rect x="57.9727%" y="165" width="0.0331%" height="15" fill="rgb(239,221,27)" fg:x="35048" fg:w="20"/><text x="58.2227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="58.2903%" y="133" width="0.0116%" height="15" fill="rgb(222,198,25)" fg:x="35240" fg:w="7"/><text x="58.5403%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (201 samples, 0.33%)</title><rect x="58.4012%" y="117" width="0.3325%" height="15" fill="rgb(211,99,13)" fg:x="35307" fg:w="201"/><text x="58.6512%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (65 samples, 0.11%)</title><rect x="58.6261%" y="101" width="0.1075%" height="15" fill="rgb(232,111,31)" fg:x="35443" fg:w="65"/><text x="58.8761%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (421 samples, 0.70%)</title><rect x="58.0703%" y="149" width="0.6964%" height="15" fill="rgb(245,82,37)" fg:x="35107" fg:w="421"/><text x="58.3203%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (281 samples, 0.46%)</title><rect x="58.3019%" y="133" width="0.4648%" height="15" fill="rgb(227,149,46)" fg:x="35247" fg:w="281"/><text x="58.5519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="58.7336%" y="117" width="0.0331%" height="15" fill="rgb(218,36,50)" fg:x="35508" fg:w="20"/><text x="58.9836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (45 samples, 0.07%)</title><rect x="58.7667%" y="149" width="0.0744%" height="15" fill="rgb(226,80,48)" fg:x="35528" fg:w="45"/><text x="59.0167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (177 samples, 0.29%)</title><rect x="58.8411%" y="149" width="0.2928%" height="15" fill="rgb(238,224,15)" fg:x="35573" fg:w="177"/><text x="59.0911%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (76 samples, 0.13%)</title><rect x="59.0082%" y="133" width="0.1257%" height="15" fill="rgb(241,136,10)" fg:x="35674" fg:w="76"/><text x="59.2582%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.01%)</title><rect x="59.1339%" y="149" width="0.0149%" height="15" fill="rgb(208,32,45)" fg:x="35750" fg:w="9"/><text x="59.3839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.07%)</title><rect x="59.1488%" y="149" width="0.0695%" height="15" fill="rgb(207,135,9)" fg:x="35759" fg:w="42"/><text x="59.3988%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.02%)</title><rect x="59.2265%" y="149" width="0.0248%" height="15" fill="rgb(206,86,44)" fg:x="35806" fg:w="15"/><text x="59.4765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="59.3126%" y="133" width="0.0149%" height="15" fill="rgb(245,177,15)" fg:x="35858" fg:w="9"/><text x="59.5626%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (105 samples, 0.17%)</title><rect x="59.3274%" y="133" width="0.1737%" height="15" fill="rgb(206,64,50)" fg:x="35867" fg:w="105"/><text x="59.5774%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="59.5077%" y="133" width="0.0132%" height="15" fill="rgb(234,36,40)" fg:x="35976" fg:w="8"/><text x="59.7577%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.07%)</title><rect x="59.5723%" y="117" width="0.0728%" height="15" fill="rgb(213,64,8)" fg:x="36015" fg:w="44"/><text x="59.8223%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (71 samples, 0.12%)</title><rect x="59.6450%" y="117" width="0.1174%" height="15" fill="rgb(210,75,36)" fg:x="36059" fg:w="71"/><text x="59.8950%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155 samples, 0.26%)</title><rect x="59.5276%" y="133" width="0.2564%" height="15" fill="rgb(229,88,21)" fg:x="35988" fg:w="155"/><text x="59.7776%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="59.7625%" y="117" width="0.0215%" height="15" fill="rgb(252,204,47)" fg:x="36130" fg:w="13"/><text x="60.0125%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="59.7856%" y="133" width="0.0149%" height="15" fill="rgb(208,77,27)" fg:x="36144" fg:w="9"/><text x="60.0356%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="60.1413%" y="69" width="0.0480%" height="15" fill="rgb(221,76,26)" fg:x="36359" fg:w="29"/><text x="60.3913%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (87 samples, 0.14%)</title><rect x="60.0470%" y="85" width="0.1439%" height="15" fill="rgb(225,139,18)" fg:x="36302" fg:w="87"/><text x="60.2970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (184 samples, 0.30%)</title><rect x="59.9080%" y="117" width="0.3044%" height="15" fill="rgb(230,137,11)" fg:x="36218" fg:w="184"/><text x="60.1580%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (122 samples, 0.20%)</title><rect x="60.0106%" y="101" width="0.2018%" height="15" fill="rgb(212,28,1)" fg:x="36280" fg:w="122"/><text x="60.2606%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="60.1909%" y="85" width="0.0215%" height="15" fill="rgb(248,164,17)" fg:x="36389" fg:w="13"/><text x="60.4409%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (16 samples, 0.03%)</title><rect x="60.2124%" y="117" width="0.0265%" height="15" fill="rgb(222,171,42)" fg:x="36402" fg:w="16"/><text x="60.4624%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (599 samples, 0.99%)</title><rect x="59.2514%" y="149" width="0.9908%" height="15" fill="rgb(243,84,45)" fg:x="35821" fg:w="599"/><text x="59.5014%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (267 samples, 0.44%)</title><rect x="59.8005%" y="133" width="0.4416%" height="15" fill="rgb(252,49,23)" fg:x="36153" fg:w="267"/><text x="60.0505%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="60.3315%" y="133" width="0.0579%" height="15" fill="rgb(215,19,7)" fg:x="36474" fg:w="35"/><text x="60.5815%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (107 samples, 0.18%)</title><rect x="60.3894%" y="133" width="0.1770%" height="15" fill="rgb(238,81,41)" fg:x="36509" fg:w="107"/><text x="60.6394%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (230 samples, 0.38%)</title><rect x="60.2422%" y="149" width="0.3804%" height="15" fill="rgb(210,199,37)" fg:x="36420" fg:w="230"/><text x="60.4922%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (34 samples, 0.06%)</title><rect x="60.5664%" y="133" width="0.0562%" height="15" fill="rgb(244,192,49)" fg:x="36616" fg:w="34"/><text x="60.8164%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.02%)</title><rect x="60.6226%" y="149" width="0.0232%" height="15" fill="rgb(226,211,11)" fg:x="36650" fg:w="14"/><text x="60.8726%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,612 samples, 2.67%)</title><rect x="58.0058%" y="165" width="2.6664%" height="15" fill="rgb(236,162,54)" fg:x="35068" fg:w="1612"/><text x="58.2558%" y="175.50">ru..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.03%)</title><rect x="60.6458%" y="149" width="0.0265%" height="15" fill="rgb(220,229,9)" fg:x="36664" fg:w="16"/><text x="60.8958%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (15 samples, 0.02%)</title><rect x="60.6755%" y="165" width="0.0248%" height="15" fill="rgb(250,87,22)" fg:x="36682" fg:w="15"/><text x="60.9255%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (19 samples, 0.03%)</title><rect x="60.7003%" y="165" width="0.0314%" height="15" fill="rgb(239,43,17)" fg:x="36697" fg:w="19"/><text x="60.9503%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (17 samples, 0.03%)</title><rect x="60.7318%" y="165" width="0.0281%" height="15" fill="rgb(231,177,25)" fg:x="36716" fg:w="17"/><text x="60.9818%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="60.7599%" y="165" width="0.0248%" height="15" fill="rgb(219,179,1)" fg:x="36733" fg:w="15"/><text x="61.0099%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.01%)</title><rect x="60.7847%" y="165" width="0.0149%" height="15" fill="rgb(238,219,53)" fg:x="36748" fg:w="9"/><text x="61.0347%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="60.7880%" y="149" width="0.0116%" height="15" fill="rgb(232,167,36)" fg:x="36750" fg:w="7"/><text x="61.0380%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,832 samples, 3.03%)</title><rect x="57.7842%" y="181" width="3.0303%" height="15" fill="rgb(244,19,51)" fg:x="34934" fg:w="1832"/><text x="58.0342%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (9 samples, 0.01%)</title><rect x="60.7996%" y="165" width="0.0149%" height="15" fill="rgb(224,6,22)" fg:x="36757" fg:w="9"/><text x="61.0496%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="60.8261%" y="133" width="0.0248%" height="15" fill="rgb(224,145,5)" fg:x="36773" fg:w="15"/><text x="61.0761%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="60.8376%" y="117" width="0.0132%" height="15" fill="rgb(234,130,49)" fg:x="36780" fg:w="8"/><text x="61.0876%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="60.8227%" y="149" width="0.0298%" height="15" fill="rgb(254,6,2)" fg:x="36771" fg:w="18"/><text x="61.0727%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.04%)</title><rect x="60.8145%" y="181" width="0.0414%" height="15" fill="rgb(208,96,46)" fg:x="36766" fg:w="25"/><text x="61.0645%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (22 samples, 0.04%)</title><rect x="60.8194%" y="165" width="0.0364%" height="15" fill="rgb(239,3,39)" fg:x="36769" fg:w="22"/><text x="61.0694%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="61.0328%" y="165" width="0.0116%" height="15" fill="rgb(233,210,1)" fg:x="36898" fg:w="7"/><text x="61.2828%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.04%)</title><rect x="61.0444%" y="165" width="0.0397%" height="15" fill="rgb(244,137,37)" fg:x="36905" fg:w="24"/><text x="61.2944%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="61.0841%" y="165" width="0.0182%" height="15" fill="rgb(240,136,2)" fg:x="36929" fg:w="11"/><text x="61.3341%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (27 samples, 0.04%)</title><rect x="61.1023%" y="165" width="0.0447%" height="15" fill="rgb(239,18,37)" fg:x="36940" fg:w="27"/><text x="61.3523%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="61.1469%" y="165" width="0.0116%" height="15" fill="rgb(218,185,22)" fg:x="36967" fg:w="7"/><text x="61.3969%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (19 samples, 0.03%)</title><rect x="61.1585%" y="165" width="0.0314%" height="15" fill="rgb(225,218,4)" fg:x="36974" fg:w="19"/><text x="61.4085%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (108 samples, 0.18%)</title><rect x="61.4215%" y="117" width="0.1786%" height="15" fill="rgb(230,182,32)" fg:x="37133" fg:w="108"/><text x="61.6715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.06%)</title><rect x="61.5439%" y="101" width="0.0562%" height="15" fill="rgb(242,56,43)" fg:x="37207" fg:w="34"/><text x="61.7939%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (224 samples, 0.37%)</title><rect x="61.2478%" y="149" width="0.3705%" height="15" fill="rgb(233,99,24)" fg:x="37028" fg:w="224"/><text x="61.4978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (151 samples, 0.25%)</title><rect x="61.3686%" y="133" width="0.2498%" height="15" fill="rgb(234,209,42)" fg:x="37101" fg:w="151"/><text x="61.6186%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="61.6002%" y="117" width="0.0182%" height="15" fill="rgb(227,7,12)" fg:x="37241" fg:w="11"/><text x="61.8502%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="61.6184%" y="149" width="0.0298%" height="15" fill="rgb(245,203,43)" fg:x="37252" fg:w="18"/><text x="61.8684%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="61.6481%" y="149" width="0.0215%" height="15" fill="rgb(238,205,33)" fg:x="37270" fg:w="13"/><text x="61.8981%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.03%)</title><rect x="61.6730%" y="149" width="0.0331%" height="15" fill="rgb(231,56,7)" fg:x="37285" fg:w="20"/><text x="61.9230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (24 samples, 0.04%)</title><rect x="61.8466%" y="133" width="0.0397%" height="15" fill="rgb(244,186,29)" fg:x="37390" fg:w="24"/><text x="62.0966%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (9 samples, 0.01%)</title><rect x="61.9905%" y="117" width="0.0149%" height="15" fill="rgb(234,111,31)" fg:x="37477" fg:w="9"/><text x="62.2405%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (27 samples, 0.04%)</title><rect x="62.0054%" y="117" width="0.0447%" height="15" fill="rgb(241,149,10)" fg:x="37486" fg:w="27"/><text x="62.2554%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (27 samples, 0.04%)</title><rect x="62.0501%" y="117" width="0.0447%" height="15" fill="rgb(249,206,44)" fg:x="37513" fg:w="27"/><text x="62.3001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (88 samples, 0.15%)</title><rect x="62.1030%" y="117" width="0.1456%" height="15" fill="rgb(251,153,30)" fg:x="37545" fg:w="88"/><text x="62.3530%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (21 samples, 0.03%)</title><rect x="62.3925%" y="101" width="0.0347%" height="15" fill="rgb(239,152,38)" fg:x="37720" fg:w="21"/><text x="62.6425%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (88 samples, 0.15%)</title><rect x="62.4272%" y="101" width="0.1456%" height="15" fill="rgb(249,139,47)" fg:x="37741" fg:w="88"/><text x="62.6772%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (64 samples, 0.11%)</title><rect x="62.8176%" y="69" width="0.1059%" height="15" fill="rgb(244,64,35)" fg:x="37977" fg:w="64"/><text x="63.0676%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (194 samples, 0.32%)</title><rect x="62.6158%" y="85" width="0.3209%" height="15" fill="rgb(216,46,15)" fg:x="37855" fg:w="194"/><text x="62.8658%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="62.9234%" y="69" width="0.0132%" height="15" fill="rgb(250,74,19)" fg:x="38041" fg:w="8"/><text x="63.1734%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (238 samples, 0.39%)</title><rect x="62.5728%" y="101" width="0.3937%" height="15" fill="rgb(249,42,33)" fg:x="37829" fg:w="238"/><text x="62.8228%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="62.9367%" y="85" width="0.0298%" height="15" fill="rgb(242,149,17)" fg:x="38049" fg:w="18"/><text x="63.1867%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (101 samples, 0.17%)</title><rect x="62.9665%" y="101" width="0.1671%" height="15" fill="rgb(244,29,21)" fg:x="38067" fg:w="101"/><text x="63.2165%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="63.2328%" y="69" width="0.0397%" height="15" fill="rgb(220,130,37)" fg:x="38228" fg:w="24"/><text x="63.4828%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (121 samples, 0.20%)</title><rect x="63.1335%" y="101" width="0.2001%" height="15" fill="rgb(211,67,2)" fg:x="38168" fg:w="121"/><text x="63.3835%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (106 samples, 0.18%)</title><rect x="63.1583%" y="85" width="0.1753%" height="15" fill="rgb(235,68,52)" fg:x="38183" fg:w="106"/><text x="63.4083%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.06%)</title><rect x="63.2725%" y="69" width="0.0612%" height="15" fill="rgb(246,142,3)" fg:x="38252" fg:w="37"/><text x="63.5225%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (664 samples, 1.10%)</title><rect x="62.2486%" y="117" width="1.0983%" height="15" fill="rgb(241,25,7)" fg:x="37633" fg:w="664"/><text x="62.4986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="63.3337%" y="101" width="0.0132%" height="15" fill="rgb(242,119,39)" fg:x="38289" fg:w="8"/><text x="63.5837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="63.3469%" y="117" width="0.0149%" height="15" fill="rgb(241,98,45)" fg:x="38297" fg:w="9"/><text x="63.5969%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (934 samples, 1.54%)</title><rect x="61.8863%" y="133" width="1.5449%" height="15" fill="rgb(254,28,30)" fg:x="37414" fg:w="934"/><text x="62.1363%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.07%)</title><rect x="63.3618%" y="117" width="0.0695%" height="15" fill="rgb(241,142,54)" fg:x="38306" fg:w="42"/><text x="63.6118%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (90 samples, 0.15%)</title><rect x="63.4313%" y="133" width="0.1489%" height="15" fill="rgb(222,85,15)" fg:x="38348" fg:w="90"/><text x="63.6813%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (18 samples, 0.03%)</title><rect x="63.5801%" y="133" width="0.0298%" height="15" fill="rgb(210,85,47)" fg:x="38438" fg:w="18"/><text x="63.8301%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,154 samples, 1.91%)</title><rect x="61.7060%" y="149" width="1.9088%" height="15" fill="rgb(224,206,25)" fg:x="37305" fg:w="1154"/><text x="61.9560%" y="159.50">l..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,674 samples, 2.77%)</title><rect x="60.8558%" y="181" width="2.7690%" height="15" fill="rgb(243,201,19)" fg:x="36791" fg:w="1674"/><text x="61.1058%" y="191.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (1,472 samples, 2.43%)</title><rect x="61.1900%" y="165" width="2.4348%" height="15" fill="rgb(236,59,4)" fg:x="36993" fg:w="1472"/><text x="61.4400%" y="175.50">ru..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (46 samples, 0.08%)</title><rect x="63.6248%" y="181" width="0.0761%" height="15" fill="rgb(254,179,45)" fg:x="38465" fg:w="46"/><text x="63.8748%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (58 samples, 0.10%)</title><rect x="63.7009%" y="165" width="0.0959%" height="15" fill="rgb(226,14,10)" fg:x="38511" fg:w="58"/><text x="63.9509%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="63.7968%" y="165" width="0.0116%" height="15" fill="rgb(244,27,41)" fg:x="38569" fg:w="7"/><text x="64.0468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="63.7968%" y="149" width="0.0116%" height="15" fill="rgb(235,35,32)" fg:x="38569" fg:w="7"/><text x="64.0468%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.03%)</title><rect x="63.8911%" y="149" width="0.0281%" height="15" fill="rgb(218,68,31)" fg:x="38626" fg:w="17"/><text x="64.1411%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (9 samples, 0.01%)</title><rect x="63.9192%" y="149" width="0.0149%" height="15" fill="rgb(207,120,37)" fg:x="38643" fg:w="9"/><text x="64.1692%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (8 samples, 0.01%)</title><rect x="63.9341%" y="149" width="0.0132%" height="15" fill="rgb(227,98,0)" fg:x="38652" fg:w="8"/><text x="64.1841%" y="159.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="63.9473%" y="149" width="0.0116%" height="15" fill="rgb(207,7,3)" fg:x="38660" fg:w="7"/><text x="64.1973%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="64.1210%" y="117" width="0.0298%" height="15" fill="rgb(206,98,19)" fg:x="38765" fg:w="18"/><text x="64.3710%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.02%)</title><rect x="64.1508%" y="117" width="0.0215%" height="15" fill="rgb(217,5,26)" fg:x="38783" fg:w="13"/><text x="64.4008%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="64.2070%" y="101" width="0.0149%" height="15" fill="rgb(235,190,38)" fg:x="38817" fg:w="9"/><text x="64.4570%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (228 samples, 0.38%)</title><rect x="64.4866%" y="69" width="0.3771%" height="15" fill="rgb(247,86,24)" fg:x="38986" fg:w="228"/><text x="64.7366%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (26 samples, 0.04%)</title><rect x="64.8637%" y="69" width="0.0430%" height="15" fill="rgb(205,101,16)" fg:x="39214" fg:w="26"/><text x="65.1137%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (640 samples, 1.06%)</title><rect x="64.0251%" y="133" width="1.0586%" height="15" fill="rgb(246,168,33)" fg:x="38707" fg:w="640"/><text x="64.2751%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (551 samples, 0.91%)</title><rect x="64.1723%" y="117" width="0.9114%" height="15" fill="rgb(231,114,1)" fg:x="38796" fg:w="551"/><text x="64.4223%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (521 samples, 0.86%)</title><rect x="64.2219%" y="101" width="0.8618%" height="15" fill="rgb(207,184,53)" fg:x="38826" fg:w="521"/><text x="64.4719%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (437 samples, 0.72%)</title><rect x="64.3609%" y="85" width="0.7228%" height="15" fill="rgb(224,95,51)" fg:x="38910" fg:w="437"/><text x="64.6109%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (107 samples, 0.18%)</title><rect x="64.9067%" y="69" width="0.1770%" height="15" fill="rgb(212,188,45)" fg:x="39240" fg:w="107"/><text x="65.1567%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="65.0837%" y="133" width="0.0298%" height="15" fill="rgb(223,154,38)" fg:x="39347" fg:w="18"/><text x="65.3337%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="65.1135%" y="133" width="0.0331%" height="15" fill="rgb(251,22,52)" fg:x="39365" fg:w="20"/><text x="65.3635%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (812 samples, 1.34%)</title><rect x="63.8200%" y="165" width="1.3431%" height="15" fill="rgb(229,209,22)" fg:x="38583" fg:w="812"/><text x="64.0700%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (728 samples, 1.20%)</title><rect x="63.9589%" y="149" width="1.2042%" height="15" fill="rgb(234,138,34)" fg:x="38667" fg:w="728"/><text x="64.2089%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="65.1466%" y="133" width="0.0165%" height="15" fill="rgb(212,95,11)" fg:x="39385" fg:w="10"/><text x="65.3966%" y="143.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (898 samples, 1.49%)</title><rect x="63.7009%" y="181" width="1.4854%" height="15" fill="rgb(240,179,47)" fg:x="38511" fg:w="898"/><text x="63.9509%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (14 samples, 0.02%)</title><rect x="65.1631%" y="165" width="0.0232%" height="15" fill="rgb(240,163,11)" fg:x="39395" fg:w="14"/><text x="65.4131%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (7 samples, 0.01%)</title><rect x="65.6014%" y="165" width="0.0116%" height="15" fill="rgb(236,37,12)" fg:x="39660" fg:w="7"/><text x="65.8514%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (21 samples, 0.03%)</title><rect x="66.0662%" y="149" width="0.0347%" height="15" fill="rgb(232,164,16)" fg:x="39941" fg:w="21"/><text x="66.3162%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (19 samples, 0.03%)</title><rect x="66.4516%" y="133" width="0.0314%" height="15" fill="rgb(244,205,15)" fg:x="40174" fg:w="19"/><text x="66.7016%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (954 samples, 1.58%)</title><rect x="65.1863%" y="181" width="1.5780%" height="15" fill="rgb(223,117,47)" fg:x="39409" fg:w="954"/><text x="65.4363%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (696 samples, 1.15%)</title><rect x="65.6130%" y="165" width="1.1513%" height="15" fill="rgb(244,107,35)" fg:x="39667" fg:w="696"/><text x="65.8630%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (401 samples, 0.66%)</title><rect x="66.1010%" y="149" width="0.6633%" height="15" fill="rgb(205,140,8)" fg:x="39962" fg:w="401"/><text x="66.3510%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (170 samples, 0.28%)</title><rect x="66.4831%" y="133" width="0.2812%" height="15" fill="rgb(228,84,46)" fg:x="40193" fg:w="170"/><text x="66.7331%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (52 samples, 0.09%)</title><rect x="66.6782%" y="117" width="0.0860%" height="15" fill="rgb(254,188,9)" fg:x="40311" fg:w="52"/><text x="66.9282%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (7 samples, 0.01%)</title><rect x="66.7527%" y="101" width="0.0116%" height="15" fill="rgb(206,112,54)" fg:x="40356" fg:w="7"/><text x="67.0027%" y="111.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (457 samples, 0.76%)</title><rect x="67.3448%" y="165" width="0.7559%" height="15" fill="rgb(216,84,49)" fg:x="40714" fg:w="457"/><text x="67.5948%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (819 samples, 1.35%)</title><rect x="68.1008%" y="165" width="1.3547%" height="15" fill="rgb(214,194,35)" fg:x="41171" fg:w="819"/><text x="68.3508%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,931 samples, 3.19%)</title><rect x="66.7643%" y="181" width="3.1941%" height="15" fill="rgb(249,28,3)" fg:x="40363" fg:w="1931"/><text x="67.0143%" y="191.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (304 samples, 0.50%)</title><rect x="69.4555%" y="165" width="0.5028%" height="15" fill="rgb(222,56,52)" fg:x="41990" fg:w="304"/><text x="69.7055%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (29 samples, 0.05%)</title><rect x="69.9583%" y="181" width="0.0480%" height="15" fill="rgb(245,217,50)" fg:x="42294" fg:w="29"/><text x="70.2083%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (192 samples, 0.32%)</title><rect x="70.0063%" y="181" width="0.3176%" height="15" fill="rgb(213,201,24)" fg:x="42323" fg:w="192"/><text x="70.2563%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (8,714 samples, 14.41%)</title><rect x="55.9134%" y="197" width="14.4138%" height="15" fill="rgb(248,116,28)" fg:x="33803" fg:w="8714"/><text x="56.1634%" y="207.50">rust_qecp`rust_qecp::u..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (73 samples, 0.12%)</title><rect x="75.5822%" y="181" width="0.1207%" height="15" fill="rgb(219,72,43)" fg:x="45694" fg:w="73"/><text x="75.8322%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="75.8568%" y="165" width="0.0198%" height="15" fill="rgb(209,138,14)" fg:x="45860" fg:w="12"/><text x="76.1068%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.19%)</title><rect x="75.9461%" y="149" width="0.1902%" height="15" fill="rgb(222,18,33)" fg:x="45914" fg:w="115"/><text x="76.1961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (29 samples, 0.05%)</title><rect x="76.0884%" y="133" width="0.0480%" height="15" fill="rgb(213,199,7)" fg:x="46000" fg:w="29"/><text x="76.3384%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (171 samples, 0.28%)</title><rect x="75.8767%" y="165" width="0.2829%" height="15" fill="rgb(250,110,10)" fg:x="45872" fg:w="171"/><text x="76.1267%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="76.1364%" y="149" width="0.0232%" height="15" fill="rgb(248,123,6)" fg:x="46029" fg:w="14"/><text x="76.3864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (281 samples, 0.46%)</title><rect x="75.7030%" y="181" width="0.4648%" height="15" fill="rgb(206,91,31)" fg:x="45767" fg:w="281"/><text x="75.9530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="76.1678%" y="181" width="0.0347%" height="15" fill="rgb(211,154,13)" fg:x="46048" fg:w="21"/><text x="76.4178%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (204 samples, 0.34%)</title><rect x="76.5879%" y="165" width="0.3374%" height="15" fill="rgb(225,148,7)" fg:x="46302" fg:w="204"/><text x="76.8379%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (7 samples, 0.01%)</title><rect x="76.9287%" y="165" width="0.0116%" height="15" fill="rgb(220,160,43)" fg:x="46508" fg:w="7"/><text x="77.1787%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (495 samples, 0.82%)</title><rect x="76.2025%" y="181" width="0.8188%" height="15" fill="rgb(213,52,39)" fg:x="46069" fg:w="495"/><text x="76.4525%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.08%)</title><rect x="76.9403%" y="165" width="0.0811%" height="15" fill="rgb(243,137,7)" fg:x="46515" fg:w="49"/><text x="77.1903%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.08%)</title><rect x="76.9452%" y="149" width="0.0761%" height="15" fill="rgb(230,79,13)" fg:x="46518" fg:w="46"/><text x="77.1952%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (25 samples, 0.04%)</title><rect x="77.0213%" y="181" width="0.0414%" height="15" fill="rgb(247,105,23)" fg:x="46564" fg:w="25"/><text x="77.2713%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.05%)</title><rect x="77.1636%" y="149" width="0.0480%" height="15" fill="rgb(223,179,41)" fg:x="46650" fg:w="29"/><text x="77.4136%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (103 samples, 0.17%)</title><rect x="77.0627%" y="181" width="0.1704%" height="15" fill="rgb(218,9,34)" fg:x="46589" fg:w="103"/><text x="77.3127%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (86 samples, 0.14%)</title><rect x="77.0908%" y="165" width="0.1423%" height="15" fill="rgb(222,106,8)" fg:x="46606" fg:w="86"/><text x="77.3408%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="77.2115%" y="149" width="0.0215%" height="15" fill="rgb(211,220,0)" fg:x="46679" fg:w="13"/><text x="77.4615%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (22 samples, 0.04%)</title><rect x="77.2330%" y="181" width="0.0364%" height="15" fill="rgb(229,52,16)" fg:x="46692" fg:w="22"/><text x="77.4830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (132 samples, 0.22%)</title><rect x="77.2694%" y="181" width="0.2183%" height="15" fill="rgb(212,155,18)" fg:x="46714" fg:w="132"/><text x="77.5194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (32 samples, 0.05%)</title><rect x="77.4911%" y="181" width="0.0529%" height="15" fill="rgb(242,21,14)" fg:x="46848" fg:w="32"/><text x="77.7411%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.01%)</title><rect x="77.5440%" y="181" width="0.0116%" height="15" fill="rgb(222,19,48)" fg:x="46880" fg:w="7"/><text x="77.7940%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="77.5572%" y="181" width="0.0116%" height="15" fill="rgb(232,45,27)" fg:x="46888" fg:w="7"/><text x="77.8072%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (49 samples, 0.08%)</title><rect x="77.5754%" y="181" width="0.0811%" height="15" fill="rgb(249,103,42)" fg:x="46899" fg:w="49"/><text x="77.8254%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.11%)</title><rect x="77.6565%" y="181" width="0.1141%" height="15" fill="rgb(246,81,33)" fg:x="46948" fg:w="69"/><text x="77.9065%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="77.8120%" y="149" width="0.0331%" height="15" fill="rgb(252,33,42)" fg:x="47042" fg:w="20"/><text x="78.0620%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (20 samples, 0.03%)</title><rect x="77.8450%" y="149" width="0.0331%" height="15" fill="rgb(209,212,41)" fg:x="47062" fg:w="20"/><text x="78.0950%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (82 samples, 0.14%)</title><rect x="77.7822%" y="165" width="0.1356%" height="15" fill="rgb(207,154,6)" fg:x="47024" fg:w="82"/><text x="78.0322%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (24 samples, 0.04%)</title><rect x="77.8781%" y="149" width="0.0397%" height="15" fill="rgb(223,64,47)" fg:x="47082" fg:w="24"/><text x="78.1281%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.01%)</title><rect x="77.9046%" y="133" width="0.0132%" height="15" fill="rgb(211,161,38)" fg:x="47098" fg:w="8"/><text x="78.1546%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (105 samples, 0.17%)</title><rect x="77.7706%" y="181" width="0.1737%" height="15" fill="rgb(219,138,40)" fg:x="47017" fg:w="105"/><text x="78.0206%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (11 samples, 0.02%)</title><rect x="77.9261%" y="165" width="0.0182%" height="15" fill="rgb(241,228,46)" fg:x="47111" fg:w="11"/><text x="78.1761%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="77.9443%" y="181" width="0.0397%" height="15" fill="rgb(223,209,38)" fg:x="47122" fg:w="24"/><text x="78.1943%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,203 samples, 1.99%)</title><rect x="77.9840%" y="181" width="1.9899%" height="15" fill="rgb(236,164,45)" fg:x="47146" fg:w="1203"/><text x="78.2340%" y="191.50">r..</text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="79.9772%" y="181" width="0.0165%" height="15" fill="rgb(231,15,5)" fg:x="48351" fg:w="10"/><text x="80.2272%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (7 samples, 0.01%)</title><rect x="79.9937%" y="181" width="0.0116%" height="15" fill="rgb(252,35,15)" fg:x="48361" fg:w="7"/><text x="80.2437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="80.1294%" y="117" width="0.0298%" height="15" fill="rgb(248,181,18)" fg:x="48443" fg:w="18"/><text x="80.3794%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.02%)</title><rect x="80.1806%" y="101" width="0.0165%" height="15" fill="rgb(233,39,42)" fg:x="48474" fg:w="10"/><text x="80.4306%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.04%)</title><rect x="80.2087%" y="85" width="0.0447%" height="15" fill="rgb(238,110,33)" fg:x="48491" fg:w="27"/><text x="80.4587%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="80.2303%" y="69" width="0.0232%" height="15" fill="rgb(233,195,10)" fg:x="48504" fg:w="14"/><text x="80.4803%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.06%)</title><rect x="80.1972%" y="101" width="0.0579%" height="15" fill="rgb(254,105,3)" fg:x="48484" fg:w="35"/><text x="80.4472%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="80.2551%" y="101" width="0.0116%" height="15" fill="rgb(221,225,9)" fg:x="48519" fg:w="7"/><text x="80.5051%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (66 samples, 0.11%)</title><rect x="80.1591%" y="117" width="0.1092%" height="15" fill="rgb(224,227,45)" fg:x="48461" fg:w="66"/><text x="80.4091%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (101 samples, 0.17%)</title><rect x="80.1112%" y="133" width="0.1671%" height="15" fill="rgb(229,198,43)" fg:x="48432" fg:w="101"/><text x="80.3612%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (125 samples, 0.21%)</title><rect x="80.0880%" y="149" width="0.2068%" height="15" fill="rgb(206,209,35)" fg:x="48418" fg:w="125"/><text x="80.3380%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="80.2782%" y="133" width="0.0165%" height="15" fill="rgb(245,195,53)" fg:x="48533" fg:w="10"/><text x="80.5282%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (174 samples, 0.29%)</title><rect x="80.0136%" y="181" width="0.2878%" height="15" fill="rgb(240,92,26)" fg:x="48373" fg:w="174"/><text x="80.2636%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (144 samples, 0.24%)</title><rect x="80.0632%" y="165" width="0.2382%" height="15" fill="rgb(207,40,23)" fg:x="48403" fg:w="144"/><text x="80.3132%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,337 samples, 2.21%)</title><rect x="80.3130%" y="181" width="2.2115%" height="15" fill="rgb(223,111,35)" fg:x="48554" fg:w="1337"/><text x="80.5630%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (213 samples, 0.35%)</title><rect x="82.5245%" y="181" width="0.3523%" height="15" fill="rgb(229,147,28)" fg:x="49891" fg:w="213"/><text x="82.7745%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (47 samples, 0.08%)</title><rect x="82.8768%" y="181" width="0.0777%" height="15" fill="rgb(211,29,28)" fg:x="50104" fg:w="47"/><text x="83.1268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="82.9711%" y="165" width="0.0116%" height="15" fill="rgb(228,72,33)" fg:x="50161" fg:w="7"/><text x="83.2211%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="82.9843%" y="165" width="0.0165%" height="15" fill="rgb(205,214,31)" fg:x="50169" fg:w="10"/><text x="83.2343%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 0.07%)</title><rect x="82.9545%" y="181" width="0.0695%" height="15" fill="rgb(224,111,15)" fg:x="50151" fg:w="42"/><text x="83.2045%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (14 samples, 0.02%)</title><rect x="83.0009%" y="165" width="0.0232%" height="15" fill="rgb(253,21,26)" fg:x="50179" fg:w="14"/><text x="83.2509%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="83.2275%" y="149" width="0.0116%" height="15" fill="rgb(245,139,43)" fg:x="50316" fg:w="7"/><text x="83.4775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (69 samples, 0.11%)</title><rect x="83.8841%" y="117" width="0.1141%" height="15" fill="rgb(252,170,7)" fg:x="50713" fg:w="69"/><text x="84.1341%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (188 samples, 0.31%)</title><rect x="83.6972%" y="133" width="0.3110%" height="15" fill="rgb(231,118,14)" fg:x="50600" fg:w="188"/><text x="83.9472%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (471 samples, 0.78%)</title><rect x="83.2390%" y="149" width="0.7791%" height="15" fill="rgb(238,83,0)" fg:x="50323" fg:w="471"/><text x="83.4890%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.02%)</title><rect x="84.0181%" y="149" width="0.0182%" height="15" fill="rgb(221,39,39)" fg:x="50794" fg:w="11"/><text x="84.2681%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="84.1157%" y="101" width="0.0116%" height="15" fill="rgb(222,119,46)" fg:x="50853" fg:w="7"/><text x="84.3657%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (31 samples, 0.05%)</title><rect x="84.0826%" y="133" width="0.0513%" height="15" fill="rgb(222,165,49)" fg:x="50833" fg:w="31"/><text x="84.3326%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.02%)</title><rect x="84.1091%" y="117" width="0.0248%" height="15" fill="rgb(219,113,52)" fg:x="50849" fg:w="15"/><text x="84.3591%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (26 samples, 0.04%)</title><rect x="84.1670%" y="117" width="0.0430%" height="15" fill="rgb(214,7,15)" fg:x="50884" fg:w="26"/><text x="84.4170%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (184 samples, 0.30%)</title><rect x="84.0363%" y="149" width="0.3044%" height="15" fill="rgb(235,32,4)" fg:x="50805" fg:w="184"/><text x="84.2863%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (124 samples, 0.21%)</title><rect x="84.1356%" y="133" width="0.2051%" height="15" fill="rgb(238,90,54)" fg:x="50865" fg:w="124"/><text x="84.3856%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (79 samples, 0.13%)</title><rect x="84.2100%" y="117" width="0.1307%" height="15" fill="rgb(213,208,19)" fg:x="50910" fg:w="79"/><text x="84.4600%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="84.3225%" y="101" width="0.0182%" height="15" fill="rgb(233,156,4)" fg:x="50978" fg:w="11"/><text x="84.5725%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (755 samples, 1.25%)</title><rect x="83.0968%" y="165" width="1.2488%" height="15" fill="rgb(207,194,5)" fg:x="50237" fg:w="755"/><text x="83.3468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="84.3456%" y="165" width="0.0281%" height="15" fill="rgb(206,111,30)" fg:x="50992" fg:w="17"/><text x="84.5956%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (828 samples, 1.37%)</title><rect x="83.0240%" y="181" width="1.3696%" height="15" fill="rgb(243,70,54)" fg:x="50193" fg:w="828"/><text x="83.2740%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (55 samples, 0.09%)</title><rect x="84.3936%" y="181" width="0.0910%" height="15" fill="rgb(242,28,8)" fg:x="51021" fg:w="55"/><text x="84.6436%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (8,599 samples, 14.22%)</title><rect x="70.3272%" y="197" width="14.2236%" height="15" fill="rgb(219,106,18)" fg:x="42517" fg:w="8599"/><text x="70.5772%" y="207.50">rust_qecp`rust_qecp::u..</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (40 samples, 0.07%)</title><rect x="84.4846%" y="181" width="0.0662%" height="15" fill="rgb(244,222,10)" fg:x="51076" fg:w="40"/><text x="84.7346%" y="191.50"></text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (10 samples, 0.02%)</title><rect x="84.5507%" y="197" width="0.0165%" height="15" fill="rgb(236,179,52)" fg:x="51116" fg:w="10"/><text x="84.8007%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,703 samples, 83.87%)</title><rect x="0.7030%" y="229" width="83.8676%" height="15" fill="rgb(213,23,39)" fg:x="425" fg:w="50703"/><text x="0.9530%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,028 samples, 81.10%)</title><rect x="3.4736%" y="213" width="81.0970%" height="15" fill="rgb(238,48,10)" fg:x="2100" fg:w="49028"/><text x="3.7236%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 0.06%)</title><rect x="87.5033%" y="213" width="0.0629%" height="15" fill="rgb(251,196,23)" fg:x="52901" fg:w="38"/><text x="87.7533%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.01%)</title><rect x="87.5794%" y="149" width="0.0116%" height="15" fill="rgb(250,152,24)" fg:x="52947" fg:w="7"/><text x="87.8294%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.02%)</title><rect x="87.5728%" y="165" width="0.0215%" height="15" fill="rgb(209,150,17)" fg:x="52943" fg:w="13"/><text x="87.8228%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (21 samples, 0.03%)</title><rect x="87.5662%" y="213" width="0.0347%" height="15" fill="rgb(234,202,34)" fg:x="52939" fg:w="21"/><text x="87.8162%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (20 samples, 0.03%)</title><rect x="87.5678%" y="197" width="0.0331%" height="15" fill="rgb(253,148,53)" fg:x="52940" fg:w="20"/><text x="87.8178%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.03%)</title><rect x="87.5728%" y="181" width="0.0281%" height="15" fill="rgb(218,129,16)" fg:x="52943" fg:w="17"/><text x="87.8228%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="87.7729%" y="181" width="0.0182%" height="15" fill="rgb(216,85,19)" fg:x="53064" fg:w="11"/><text x="88.0229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="87.7911%" y="181" width="0.0165%" height="15" fill="rgb(235,228,7)" fg:x="53075" fg:w="10"/><text x="88.0411%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="87.7928%" y="165" width="0.0149%" height="15" fill="rgb(245,175,0)" fg:x="53076" fg:w="9"/><text x="88.0428%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (20 samples, 0.03%)</title><rect x="87.8192%" y="181" width="0.0331%" height="15" fill="rgb(208,168,36)" fg:x="53092" fg:w="20"/><text x="88.0692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="87.9383%" y="133" width="0.0116%" height="15" fill="rgb(246,171,24)" fg:x="53164" fg:w="7"/><text x="88.1883%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.02%)</title><rect x="87.9350%" y="165" width="0.0182%" height="15" fill="rgb(215,142,24)" fg:x="53162" fg:w="11"/><text x="88.1850%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.02%)</title><rect x="87.9367%" y="149" width="0.0165%" height="15" fill="rgb(250,187,7)" fg:x="53163" fg:w="10"/><text x="88.1867%" y="159.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.09%)</title><rect x="87.9532%" y="165" width="0.0910%" height="15" fill="rgb(228,66,33)" fg:x="53173" fg:w="55"/><text x="88.2032%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (286 samples, 0.47%)</title><rect x="87.6009%" y="213" width="0.4731%" height="15" fill="rgb(234,215,21)" fg:x="52960" fg:w="286"/><text x="87.8509%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (196 samples, 0.32%)</title><rect x="87.7498%" y="197" width="0.3242%" height="15" fill="rgb(222,191,20)" fg:x="53050" fg:w="196"/><text x="87.9998%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (134 samples, 0.22%)</title><rect x="87.8523%" y="181" width="0.2216%" height="15" fill="rgb(245,79,54)" fg:x="53112" fg:w="134"/><text x="88.1023%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (18 samples, 0.03%)</title><rect x="88.0442%" y="165" width="0.0298%" height="15" fill="rgb(240,10,37)" fg:x="53228" fg:w="18"/><text x="88.2942%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="88.1418%" y="197" width="0.0182%" height="15" fill="rgb(214,192,32)" fg:x="53287" fg:w="11"/><text x="88.3918%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.01%)</title><rect x="88.1600%" y="197" width="0.0116%" height="15" fill="rgb(209,36,54)" fg:x="53298" fg:w="7"/><text x="88.4100%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.04%)</title><rect x="88.1815%" y="197" width="0.0414%" height="15" fill="rgb(220,10,11)" fg:x="53311" fg:w="25"/><text x="88.4315%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="88.4974%" y="133" width="0.0314%" height="15" fill="rgb(221,106,17)" fg:x="53502" fg:w="19"/><text x="88.7474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (61 samples, 0.10%)</title><rect x="88.4362%" y="149" width="0.1009%" height="15" fill="rgb(251,142,44)" fg:x="53465" fg:w="61"/><text x="88.6862%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 0.13%)</title><rect x="88.4114%" y="165" width="0.1323%" height="15" fill="rgb(238,13,15)" fg:x="53450" fg:w="80"/><text x="88.6614%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="88.5437%" y="149" width="0.0149%" height="15" fill="rgb(208,107,27)" fg:x="53530" fg:w="9"/><text x="88.7937%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (121 samples, 0.20%)</title><rect x="88.3800%" y="181" width="0.2001%" height="15" fill="rgb(205,136,37)" fg:x="53431" fg:w="121"/><text x="88.6300%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="88.5437%" y="165" width="0.0364%" height="15" fill="rgb(250,205,27)" fg:x="53530" fg:w="22"/><text x="88.7937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="88.5586%" y="149" width="0.0215%" height="15" fill="rgb(210,80,43)" fg:x="53539" fg:w="13"/><text x="88.8086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="88.5669%" y="133" width="0.0132%" height="15" fill="rgb(247,160,36)" fg:x="53544" fg:w="8"/><text x="88.8169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="88.5801%" y="181" width="0.0116%" height="15" fill="rgb(234,13,49)" fg:x="53552" fg:w="7"/><text x="88.8301%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (316 samples, 0.52%)</title><rect x="88.0740%" y="213" width="0.5227%" height="15" fill="rgb(234,122,0)" fg:x="53246" fg:w="316"/><text x="88.3240%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (214 samples, 0.35%)</title><rect x="88.2427%" y="197" width="0.3540%" height="15" fill="rgb(207,146,38)" fg:x="53348" fg:w="214"/><text x="88.4927%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (2,438 samples, 4.03%)</title><rect x="84.5706%" y="229" width="4.0327%" height="15" fill="rgb(207,177,25)" fg:x="51128" fg:w="2438"/><text x="84.8206%" y="239.50">rust..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="88.8382%" y="181" width="0.0132%" height="15" fill="rgb(211,178,42)" fg:x="53708" fg:w="8"/><text x="89.0882%" y="191.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (9 samples, 0.01%)</title><rect x="88.8382%" y="213" width="0.0149%" height="15" fill="rgb(230,69,54)" fg:x="53708" fg:w="9"/><text x="89.0882%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.01%)</title><rect x="88.8382%" y="197" width="0.0149%" height="15" fill="rgb(214,135,41)" fg:x="53708" fg:w="9"/><text x="89.0882%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (218 samples, 0.36%)</title><rect x="88.6033%" y="229" width="0.3606%" height="15" fill="rgb(237,67,25)" fg:x="53566" fg:w="218"/><text x="88.8533%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (67 samples, 0.11%)</title><rect x="88.8531%" y="213" width="0.1108%" height="15" fill="rgb(222,189,50)" fg:x="53717" fg:w="67"/><text x="89.1031%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.01%)</title><rect x="93.7227%" y="149" width="0.0149%" height="15" fill="rgb(245,148,34)" fg:x="56661" fg:w="9"/><text x="93.9727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.03%)</title><rect x="93.7095%" y="165" width="0.0298%" height="15" fill="rgb(222,29,6)" fg:x="56653" fg:w="18"/><text x="93.9595%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.03%)</title><rect x="93.7095%" y="181" width="0.0347%" height="15" fill="rgb(221,189,43)" fg:x="56653" fg:w="21"/><text x="93.9595%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.04%)</title><rect x="93.7045%" y="213" width="0.0414%" height="15" fill="rgb(207,36,27)" fg:x="56650" fg:w="25"/><text x="93.9545%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (23 samples, 0.04%)</title><rect x="93.7078%" y="197" width="0.0380%" height="15" fill="rgb(217,90,24)" fg:x="56652" fg:w="23"/><text x="93.9578%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (2,892 samples, 4.78%)</title><rect x="88.9639%" y="229" width="4.7836%" height="15" fill="rgb(224,66,35)" fg:x="53784" fg:w="2892"/><text x="89.2139%" y="239.50">rust_q..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (101 samples, 0.17%)</title><rect x="93.7574%" y="213" width="0.1671%" height="15" fill="rgb(221,13,50)" fg:x="56682" fg:w="101"/><text x="94.0074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.01%)</title><rect x="94.2173%" y="181" width="0.0116%" height="15" fill="rgb(236,68,49)" fg:x="56960" fg:w="7"/><text x="94.4673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="94.2173%" y="165" width="0.0116%" height="15" fill="rgb(229,146,28)" fg:x="56960" fg:w="7"/><text x="94.4673%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (292 samples, 0.48%)</title><rect x="93.7475%" y="229" width="0.4830%" height="15" fill="rgb(225,31,38)" fg:x="56676" fg:w="292"/><text x="93.9975%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (185 samples, 0.31%)</title><rect x="93.9245%" y="213" width="0.3060%" height="15" fill="rgb(250,208,3)" fg:x="56783" fg:w="185"/><text x="94.1745%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (9 samples, 0.01%)</title><rect x="94.2156%" y="197" width="0.0149%" height="15" fill="rgb(246,54,23)" fg:x="56959" fg:w="9"/><text x="94.4656%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (58 samples, 0.10%)</title><rect x="94.2305%" y="229" width="0.0959%" height="15" fill="rgb(243,76,11)" fg:x="56968" fg:w="58"/><text x="94.4805%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,429 samples, 5.67%)</title><rect x="94.3265%" y="229" width="5.6719%" height="15" fill="rgb(245,21,50)" fg:x="57026" fg:w="3429"/><text x="94.5765%" y="239.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,580 samples, 4.27%)</title><rect x="95.7308%" y="213" width="4.2676%" height="15" fill="rgb(228,9,43)" fg:x="57875" fg:w="2580"/><text x="95.9808%" y="223.50">rust_..</text></g><g><title>all (60,456 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(208,100,47)" fg:x="0" fg:w="60456"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,354 samples, 99.83%)</title><rect x="0.1687%" y="309" width="99.8313%" height="15" fill="rgb(232,26,8)" fg:x="102" fg:w="60354"/><text x="0.4187%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,354 samples, 99.83%)</title><rect x="0.1687%" y="293" width="99.8313%" height="15" fill="rgb(216,166,38)" fg:x="102" fg:w="60354"/><text x="0.4187%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,354 samples, 99.83%)</title><rect x="0.1687%" y="277" width="99.8313%" height="15" fill="rgb(251,202,51)" fg:x="102" fg:w="60354"/><text x="0.4187%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,354 samples, 99.83%)</title><rect x="0.1687%" y="261" width="99.8313%" height="15" fill="rgb(254,216,34)" fg:x="102" fg:w="60354"/><text x="0.4187%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,351 samples, 99.83%)</title><rect x="0.1737%" y="245" width="99.8263%" height="15" fill="rgb(251,32,27)" fg:x="105" fg:w="60351"/><text x="0.4237%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>