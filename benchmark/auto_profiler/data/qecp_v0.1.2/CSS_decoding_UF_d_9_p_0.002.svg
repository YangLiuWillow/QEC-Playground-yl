<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="61007"><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="0.0115%" y="133" width="0.0164%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="10"/><text x="0.2615%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="0.0426%" y="53" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="26" fg:w="8"/><text x="0.2926%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="0.0426%" y="37" width="0.0131%" height="15" fill="rgb(221,193,54)" fg:x="26" fg:w="8"/><text x="0.2926%" y="47.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (16 samples, 0.03%)</title><rect x="0.0377%" y="133" width="0.0262%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="16"/><text x="0.2877%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::ftqec::PlanarCodeModel&gt; (16 samples, 0.03%)</title><rect x="0.0377%" y="117" width="0.0262%" height="15" fill="rgb(208,68,35)" fg:x="23" fg:w="16"/><text x="0.2877%" y="127.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0377%" y="101" width="0.0262%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="16"/><text x="0.2877%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="0.0377%" y="85" width="0.0262%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="16"/><text x="0.2877%" y="95.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;rust_qecp::ftqec::Node&gt;&gt; (13 samples, 0.02%)</title><rect x="0.0426%" y="69" width="0.0213%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="13"/><text x="0.2926%" y="79.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (52 samples, 0.09%)</title><rect x="0.0738%" y="133" width="0.0852%" height="15" fill="rgb(218,30,26)" fg:x="45" fg:w="52"/><text x="0.3238%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (20 samples, 0.03%)</title><rect x="0.1590%" y="133" width="0.0328%" height="15" fill="rgb(220,122,19)" fg:x="97" fg:w="20"/><text x="0.4090%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="0.8556%" y="117" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="522" fg:w="11"/><text x="1.1056%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="0.8737%" y="117" width="0.0180%" height="15" fill="rgb(240,193,28)" fg:x="533" fg:w="11"/><text x="1.1237%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::binary_heap::BinaryHeap&lt;T&gt;::pop (44 samples, 0.07%)</title><rect x="0.8999%" y="117" width="0.0721%" height="15" fill="rgb(216,20,37)" fg:x="549" fg:w="44"/><text x="1.1499%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61 samples, 0.10%)</title><rect x="0.9737%" y="117" width="0.1000%" height="15" fill="rgb(206,188,39)" fg:x="594" fg:w="61"/><text x="1.2237%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.02%)</title><rect x="1.0573%" y="101" width="0.0164%" height="15" fill="rgb(217,207,13)" fg:x="645" fg:w="10"/><text x="1.3073%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="1.0622%" y="85" width="0.0115%" height="15" fill="rgb(231,73,38)" fg:x="648" fg:w="7"/><text x="1.3122%" y="95.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="1.3539%" y="101" width="0.0213%" height="15" fill="rgb(225,20,46)" fg:x="826" fg:w="13"/><text x="1.6039%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (61 samples, 0.10%)</title><rect x="1.3802%" y="101" width="0.1000%" height="15" fill="rgb(210,31,41)" fg:x="842" fg:w="61"/><text x="1.6302%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (790 samples, 1.29%)</title><rect x="0.2016%" y="133" width="1.2949%" height="15" fill="rgb(221,200,47)" fg:x="123" fg:w="790"/><text x="0.4516%" y="143.50"></text></g><g><title>rust_qecp`petgraph::algo::dijkstra::dijkstra (253 samples, 0.41%)</title><rect x="1.0818%" y="117" width="0.4147%" height="15" fill="rgb(226,26,5)" fg:x="660" fg:w="253"/><text x="1.3318%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.02%)</title><rect x="1.4802%" y="101" width="0.0164%" height="15" fill="rgb(249,33,26)" fg:x="903" fg:w="10"/><text x="1.7302%" y="111.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.05%)</title><rect x="1.5064%" y="117" width="0.0459%" height="15" fill="rgb(235,183,28)" fg:x="919" fg:w="28"/><text x="1.7564%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="1.6523%" y="69" width="0.0164%" height="15" fill="rgb(221,5,38)" fg:x="1008" fg:w="10"/><text x="1.9023%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="1.6572%" y="53" width="0.0115%" height="15" fill="rgb(247,18,42)" fg:x="1011" fg:w="7"/><text x="1.9072%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="1.6572%" y="37" width="0.0115%" height="15" fill="rgb(241,131,45)" fg:x="1011" fg:w="7"/><text x="1.9072%" y="47.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.02%)</title><rect x="1.6523%" y="101" width="0.0180%" height="15" fill="rgb(249,31,29)" fg:x="1008" fg:w="11"/><text x="1.9023%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="1.6523%" y="85" width="0.0180%" height="15" fill="rgb(225,111,53)" fg:x="1008" fg:w="11"/><text x="1.9023%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (7 samples, 0.01%)</title><rect x="1.6801%" y="101" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="1025" fg:w="7"/><text x="1.9301%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (129 samples, 0.21%)</title><rect x="1.5621%" y="117" width="0.2115%" height="15" fill="rgb(214,148,48)" fg:x="953" fg:w="129"/><text x="1.8121%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (50 samples, 0.08%)</title><rect x="1.6916%" y="101" width="0.0820%" height="15" fill="rgb(232,36,49)" fg:x="1032" fg:w="50"/><text x="1.9416%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (170 samples, 0.28%)</title><rect x="1.4965%" y="133" width="0.2787%" height="15" fill="rgb(209,103,24)" fg:x="913" fg:w="170"/><text x="1.7465%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::optimize_correction_pattern (7 samples, 0.01%)</title><rect x="1.7768%" y="133" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="1084" fg:w="7"/><text x="2.0268%" y="143.50"></text></g><g><title>dyld`start (1,094 samples, 1.79%)</title><rect x="0.0000%" y="373" width="1.7932%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="1094"/><text x="0.2500%" y="383.50">d..</text></g><g><title>rust_qecp`main (1,091 samples, 1.79%)</title><rect x="0.0049%" y="357" width="1.7883%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="367.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start_internal (1,091 samples, 1.79%)</title><rect x="0.0049%" y="341" width="1.7883%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="351.50">r..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (1,091 samples, 1.79%)</title><rect x="0.0049%" y="325" width="1.7883%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="335.50">r..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (1,091 samples, 1.79%)</title><rect x="0.0049%" y="309" width="1.7883%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="319.50">r..</text></g><g><title>rust_qecp`rust_qecp::main (1,091 samples, 1.79%)</title><rect x="0.0049%" y="293" width="1.7883%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="303.50">r..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (1,091 samples, 1.79%)</title><rect x="0.0049%" y="277" width="1.7883%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="287.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (1,091 samples, 1.79%)</title><rect x="0.0049%" y="261" width="1.7883%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="271.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,091 samples, 1.79%)</title><rect x="0.0049%" y="245" width="1.7883%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="255.50">r..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (1,091 samples, 1.79%)</title><rect x="0.0049%" y="229" width="1.7883%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="239.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,091 samples, 1.79%)</title><rect x="0.0049%" y="213" width="1.7883%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="223.50">r..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,091 samples, 1.79%)</title><rect x="0.0049%" y="197" width="1.7883%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="207.50">r..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,091 samples, 1.79%)</title><rect x="0.0049%" y="181" width="1.7883%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1091"/><text x="0.2549%" y="191.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (1,090 samples, 1.79%)</title><rect x="0.0066%" y="165" width="1.7867%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1090"/><text x="0.2566%" y="175.50">r..</text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (1,090 samples, 1.79%)</title><rect x="0.0066%" y="149" width="1.7867%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1090"/><text x="0.2566%" y="159.50">r..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="1.8457%" y="277" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="1126" fg:w="7"/><text x="2.0957%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="1.8637%" y="261" width="0.0115%" height="15" fill="rgb(239,60,40)" fg:x="1137" fg:w="7"/><text x="2.1137%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.02%)</title><rect x="1.8572%" y="277" width="0.0197%" height="15" fill="rgb(206,27,48)" fg:x="1133" fg:w="12"/><text x="2.1072%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.01%)</title><rect x="1.8818%" y="277" width="0.0115%" height="15" fill="rgb(225,35,8)" fg:x="1148" fg:w="7"/><text x="2.1318%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="1.8949%" y="277" width="0.0672%" height="15" fill="rgb(250,213,24)" fg:x="1156" fg:w="41"/><text x="2.1449%" y="287.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (362 samples, 0.59%)</title><rect x="1.9621%" y="277" width="0.5934%" height="15" fill="rgb(247,123,22)" fg:x="1197" fg:w="362"/><text x="2.2121%" y="287.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (10 samples, 0.02%)</title><rect x="2.5554%" y="277" width="0.0164%" height="15" fill="rgb(231,138,38)" fg:x="1559" fg:w="10"/><text x="2.8054%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="2.5751%" y="277" width="0.0164%" height="15" fill="rgb(231,145,46)" fg:x="1571" fg:w="10"/><text x="2.8251%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="2.5768%" y="261" width="0.0148%" height="15" fill="rgb(251,118,11)" fg:x="1572" fg:w="9"/><text x="2.8268%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="2.5800%" y="245" width="0.0115%" height="15" fill="rgb(217,147,25)" fg:x="1574" fg:w="7"/><text x="2.8300%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.01%)</title><rect x="2.5800%" y="229" width="0.0115%" height="15" fill="rgb(247,81,37)" fg:x="1574" fg:w="7"/><text x="2.8300%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (542 samples, 0.89%)</title><rect x="2.5981%" y="277" width="0.8884%" height="15" fill="rgb(209,12,38)" fg:x="1585" fg:w="542"/><text x="2.8481%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (83 samples, 0.14%)</title><rect x="3.4865%" y="277" width="0.1360%" height="15" fill="rgb(227,1,9)" fg:x="2127" fg:w="83"/><text x="3.7365%" y="287.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (54 samples, 0.09%)</title><rect x="3.6225%" y="277" width="0.0885%" height="15" fill="rgb(248,47,43)" fg:x="2210" fg:w="54"/><text x="3.8725%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="4.2159%" y="229" width="0.0131%" height="15" fill="rgb(221,10,30)" fg:x="2572" fg:w="8"/><text x="4.4659%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="4.2110%" y="261" width="0.0197%" height="15" fill="rgb(210,229,1)" fg:x="2569" fg:w="12"/><text x="4.4610%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="4.2126%" y="245" width="0.0180%" height="15" fill="rgb(222,148,37)" fg:x="2570" fg:w="11"/><text x="4.4626%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (318 samples, 0.52%)</title><rect x="3.7225%" y="277" width="0.5213%" height="15" fill="rgb(234,67,33)" fg:x="2271" fg:w="318"/><text x="3.9725%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (81 samples, 0.13%)</title><rect x="11.5479%" y="261" width="0.1328%" height="15" fill="rgb(247,98,35)" fg:x="7045" fg:w="81"/><text x="11.7979%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (66 samples, 0.11%)</title><rect x="11.6806%" y="261" width="0.1082%" height="15" fill="rgb(247,138,52)" fg:x="7126" fg:w="66"/><text x="11.9306%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (70 samples, 0.11%)</title><rect x="11.7954%" y="261" width="0.1147%" height="15" fill="rgb(213,79,30)" fg:x="7196" fg:w="70"/><text x="12.0454%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.14%)</title><rect x="11.9101%" y="261" width="0.1377%" height="15" fill="rgb(246,177,23)" fg:x="7266" fg:w="84"/><text x="12.1601%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.01%)</title><rect x="12.0478%" y="261" width="0.0131%" height="15" fill="rgb(230,62,27)" fg:x="7350" fg:w="8"/><text x="12.2978%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.02%)</title><rect x="12.0609%" y="261" width="0.0229%" height="15" fill="rgb(216,154,8)" fg:x="7358" fg:w="14"/><text x="12.3109%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (75 samples, 0.12%)</title><rect x="12.0921%" y="261" width="0.1229%" height="15" fill="rgb(244,35,45)" fg:x="7377" fg:w="75"/><text x="12.3421%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.05%)</title><rect x="12.2150%" y="261" width="0.0508%" height="15" fill="rgb(251,115,12)" fg:x="7452" fg:w="31"/><text x="12.4650%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (17 samples, 0.03%)</title><rect x="12.2691%" y="261" width="0.0279%" height="15" fill="rgb(240,54,50)" fg:x="7485" fg:w="17"/><text x="12.5191%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.16%)</title><rect x="12.3084%" y="261" width="0.1623%" height="15" fill="rgb(233,84,52)" fg:x="7509" fg:w="99"/><text x="12.5584%" y="271.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.05%)</title><rect x="12.4707%" y="261" width="0.0459%" height="15" fill="rgb(207,117,47)" fg:x="7608" fg:w="28"/><text x="12.7207%" y="271.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (76 samples, 0.12%)</title><rect x="12.5166%" y="261" width="0.1246%" height="15" fill="rgb(249,43,39)" fg:x="7636" fg:w="76"/><text x="12.7666%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,386 samples, 3.91%)</title><rect x="12.6412%" y="261" width="3.9110%" height="15" fill="rgb(209,38,44)" fg:x="7712" fg:w="2386"/><text x="12.8912%" y="271.50">rust..</text></g><g><title>rust_qecp`DYLD-STUB$$free (47 samples, 0.08%)</title><rect x="16.5538%" y="261" width="0.0770%" height="15" fill="rgb(236,212,23)" fg:x="10099" fg:w="47"/><text x="16.8038%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (11 samples, 0.02%)</title><rect x="16.6309%" y="261" width="0.0180%" height="15" fill="rgb(242,79,21)" fg:x="10146" fg:w="11"/><text x="16.8809%" y="271.50"></text></g><g><title>rust_qecp`__rdl_alloc (10 samples, 0.02%)</title><rect x="16.6522%" y="261" width="0.0164%" height="15" fill="rgb(211,96,35)" fg:x="10159" fg:w="10"/><text x="16.9022%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="16.6751%" y="261" width="0.0115%" height="15" fill="rgb(253,215,40)" fg:x="10173" fg:w="7"/><text x="16.9251%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="16.9013%" y="229" width="0.0295%" height="15" fill="rgb(211,81,21)" fg:x="10311" fg:w="18"/><text x="17.1513%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.02%)</title><rect x="16.9669%" y="197" width="0.0197%" height="15" fill="rgb(208,190,38)" fg:x="10351" fg:w="12"/><text x="17.2169%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="17.0030%" y="181" width="0.0164%" height="15" fill="rgb(235,213,38)" fg:x="10373" fg:w="10"/><text x="17.2530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="17.0571%" y="165" width="0.0229%" height="15" fill="rgb(237,122,38)" fg:x="10406" fg:w="14"/><text x="17.3071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="17.0603%" y="149" width="0.0197%" height="15" fill="rgb(244,218,35)" fg:x="10408" fg:w="12"/><text x="17.3103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.04%)</title><rect x="17.0472%" y="181" width="0.0377%" height="15" fill="rgb(240,68,47)" fg:x="10400" fg:w="23"/><text x="17.2972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (61 samples, 0.10%)</title><rect x="16.9948%" y="197" width="0.1000%" height="15" fill="rgb(210,16,53)" fg:x="10368" fg:w="61"/><text x="17.2448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (170 samples, 0.28%)</title><rect x="16.9522%" y="213" width="0.2787%" height="15" fill="rgb(235,124,12)" fg:x="10342" fg:w="170"/><text x="17.2022%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (83 samples, 0.14%)</title><rect x="17.0948%" y="197" width="0.1360%" height="15" fill="rgb(224,169,11)" fg:x="10429" fg:w="83"/><text x="17.3448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (203 samples, 0.33%)</title><rect x="16.9390%" y="229" width="0.3327%" height="15" fill="rgb(250,166,2)" fg:x="10334" fg:w="203"/><text x="17.1890%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="17.2538%" y="213" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="10526" fg:w="11"/><text x="17.5038%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="17.2570%" y="197" width="0.0148%" height="15" fill="rgb(230,116,27)" fg:x="10528" fg:w="9"/><text x="17.5070%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (358 samples, 0.59%)</title><rect x="16.6866%" y="261" width="0.5868%" height="15" fill="rgb(228,99,48)" fg:x="10180" fg:w="358"/><text x="16.9366%" y="271.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (228 samples, 0.37%)</title><rect x="16.8997%" y="245" width="0.3737%" height="15" fill="rgb(253,11,6)" fg:x="10310" fg:w="228"/><text x="17.1497%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (23 samples, 0.04%)</title><rect x="17.4144%" y="245" width="0.0377%" height="15" fill="rgb(247,143,39)" fg:x="10624" fg:w="23"/><text x="17.6644%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (121 samples, 0.20%)</title><rect x="17.9488%" y="229" width="0.1983%" height="15" fill="rgb(236,97,10)" fg:x="10950" fg:w="121"/><text x="18.1988%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="18.1471%" y="229" width="0.0262%" height="15" fill="rgb(233,208,19)" fg:x="11071" fg:w="16"/><text x="18.3971%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (38 samples, 0.06%)</title><rect x="18.1733%" y="229" width="0.0623%" height="15" fill="rgb(216,164,2)" fg:x="11087" fg:w="38"/><text x="18.4233%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (589 samples, 0.97%)</title><rect x="17.4521%" y="245" width="0.9655%" height="15" fill="rgb(220,129,5)" fg:x="10647" fg:w="589"/><text x="17.7021%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (111 samples, 0.18%)</title><rect x="18.2356%" y="229" width="0.1819%" height="15" fill="rgb(242,17,10)" fg:x="11125" fg:w="111"/><text x="18.4856%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (76 samples, 0.12%)</title><rect x="18.2930%" y="213" width="0.1246%" height="15" fill="rgb(242,107,0)" fg:x="11160" fg:w="76"/><text x="18.5430%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (122 samples, 0.20%)</title><rect x="18.7044%" y="229" width="0.2000%" height="15" fill="rgb(251,28,31)" fg:x="11411" fg:w="122"/><text x="18.9544%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (33 samples, 0.05%)</title><rect x="18.9044%" y="229" width="0.0541%" height="15" fill="rgb(233,223,10)" fg:x="11533" fg:w="33"/><text x="19.1544%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (37 samples, 0.06%)</title><rect x="18.9585%" y="229" width="0.0606%" height="15" fill="rgb(215,21,27)" fg:x="11566" fg:w="37"/><text x="19.2085%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (555 samples, 0.91%)</title><rect x="18.4258%" y="245" width="0.9097%" height="15" fill="rgb(232,23,21)" fg:x="11241" fg:w="555"/><text x="18.6758%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (193 samples, 0.32%)</title><rect x="19.0191%" y="229" width="0.3164%" height="15" fill="rgb(244,5,23)" fg:x="11603" fg:w="193"/><text x="19.2691%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (98 samples, 0.16%)</title><rect x="19.6830%" y="213" width="0.1606%" height="15" fill="rgb(226,81,46)" fg:x="12008" fg:w="98"/><text x="19.9330%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (428 samples, 0.70%)</title><rect x="19.3355%" y="245" width="0.7016%" height="15" fill="rgb(247,70,30)" fg:x="11796" fg:w="428"/><text x="19.5855%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (352 samples, 0.58%)</title><rect x="19.4601%" y="229" width="0.5770%" height="15" fill="rgb(212,68,19)" fg:x="11872" fg:w="352"/><text x="19.7101%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (118 samples, 0.19%)</title><rect x="19.8436%" y="213" width="0.1934%" height="15" fill="rgb(240,187,13)" fg:x="12106" fg:w="118"/><text x="20.0936%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (39 samples, 0.06%)</title><rect x="20.0370%" y="245" width="0.0639%" height="15" fill="rgb(223,113,26)" fg:x="12224" fg:w="39"/><text x="20.2870%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (131 samples, 0.21%)</title><rect x="20.3255%" y="213" width="0.2147%" height="15" fill="rgb(206,192,2)" fg:x="12400" fg:w="131"/><text x="20.5755%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (269 samples, 0.44%)</title><rect x="20.1010%" y="245" width="0.4409%" height="15" fill="rgb(241,108,4)" fg:x="12263" fg:w="269"/><text x="20.3510%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (133 samples, 0.22%)</title><rect x="20.3239%" y="229" width="0.2180%" height="15" fill="rgb(247,173,49)" fg:x="12399" fg:w="133"/><text x="20.5739%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (66 samples, 0.11%)</title><rect x="20.5419%" y="245" width="0.1082%" height="15" fill="rgb(224,114,35)" fg:x="12532" fg:w="66"/><text x="20.7919%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="20.6599%" y="245" width="0.0164%" height="15" fill="rgb(245,159,27)" fg:x="12604" fg:w="10"/><text x="20.9099%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (47 samples, 0.08%)</title><rect x="20.6796%" y="245" width="0.0770%" height="15" fill="rgb(245,172,44)" fg:x="12616" fg:w="47"/><text x="20.9296%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (22 samples, 0.04%)</title><rect x="20.7566%" y="245" width="0.0361%" height="15" fill="rgb(236,23,11)" fg:x="12663" fg:w="22"/><text x="21.0066%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.03%)</title><rect x="20.7927%" y="245" width="0.0279%" height="15" fill="rgb(205,117,38)" fg:x="12685" fg:w="17"/><text x="21.0427%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="20.8206%" y="245" width="0.0131%" height="15" fill="rgb(237,72,25)" fg:x="12702" fg:w="8"/><text x="21.0706%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (59 samples, 0.10%)</title><rect x="21.0451%" y="213" width="0.0967%" height="15" fill="rgb(244,70,9)" fg:x="12839" fg:w="59"/><text x="21.2951%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (171 samples, 0.28%)</title><rect x="20.8648%" y="229" width="0.2803%" height="15" fill="rgb(217,125,39)" fg:x="12729" fg:w="171"/><text x="21.1148%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="21.1451%" y="229" width="0.0131%" height="15" fill="rgb(235,36,10)" fg:x="12900" fg:w="8"/><text x="21.3951%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (101 samples, 0.17%)</title><rect x="21.1582%" y="229" width="0.1656%" height="15" fill="rgb(251,123,47)" fg:x="12908" fg:w="101"/><text x="21.4082%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (15 samples, 0.02%)</title><rect x="21.2992%" y="213" width="0.0246%" height="15" fill="rgb(221,13,13)" fg:x="12994" fg:w="15"/><text x="21.5492%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.02%)</title><rect x="21.2992%" y="197" width="0.0246%" height="15" fill="rgb(238,131,9)" fg:x="12994" fg:w="15"/><text x="21.5492%" y="207.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,479 samples, 4.06%)</title><rect x="17.2751%" y="261" width="4.0635%" height="15" fill="rgb(211,50,8)" fg:x="10539" fg:w="2479"/><text x="17.5251%" y="271.50">rust..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (308 samples, 0.50%)</title><rect x="20.8337%" y="245" width="0.5049%" height="15" fill="rgb(245,182,24)" fg:x="12710" fg:w="308"/><text x="21.0837%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="21.3238%" y="229" width="0.0148%" height="15" fill="rgb(242,14,37)" fg:x="13009" fg:w="9"/><text x="21.5738%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (243 samples, 0.40%)</title><rect x="21.3385%" y="261" width="0.3983%" height="15" fill="rgb(246,228,12)" fg:x="13018" fg:w="243"/><text x="21.5885%" y="271.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (202 samples, 0.33%)</title><rect x="21.4057%" y="245" width="0.3311%" height="15" fill="rgb(213,55,15)" fg:x="13059" fg:w="202"/><text x="21.6557%" y="255.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (119 samples, 0.20%)</title><rect x="21.5418%" y="229" width="0.1951%" height="15" fill="rgb(209,9,3)" fg:x="13142" fg:w="119"/><text x="21.7918%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (57 samples, 0.09%)</title><rect x="21.6434%" y="213" width="0.0934%" height="15" fill="rgb(230,59,30)" fg:x="13204" fg:w="57"/><text x="21.8934%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (10 samples, 0.02%)</title><rect x="21.7205%" y="197" width="0.0164%" height="15" fill="rgb(209,121,21)" fg:x="13251" fg:w="10"/><text x="21.9705%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (157 samples, 0.26%)</title><rect x="21.7368%" y="261" width="0.2573%" height="15" fill="rgb(220,109,13)" fg:x="13261" fg:w="157"/><text x="21.9868%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (3,237 samples, 5.31%)</title><rect x="21.9942%" y="261" width="5.3059%" height="15" fill="rgb(232,18,1)" fg:x="13418" fg:w="3237"/><text x="22.2442%" y="271.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (219 samples, 0.36%)</title><rect x="27.3001%" y="261" width="0.3590%" height="15" fill="rgb(215,41,42)" fg:x="16655" fg:w="219"/><text x="27.5501%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.02%)</title><rect x="27.8411%" y="245" width="0.0213%" height="15" fill="rgb(224,123,36)" fg:x="16985" fg:w="13"/><text x="28.0911%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (11 samples, 0.02%)</title><rect x="27.8624%" y="245" width="0.0180%" height="15" fill="rgb(240,125,3)" fg:x="16998" fg:w="11"/><text x="28.1124%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="27.8919%" y="245" width="0.0148%" height="15" fill="rgb(205,98,50)" fg:x="17016" fg:w="9"/><text x="28.1419%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (108 samples, 0.18%)</title><rect x="27.9116%" y="245" width="0.1770%" height="15" fill="rgb(205,185,37)" fg:x="17028" fg:w="108"/><text x="28.1616%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="28.3689%" y="197" width="0.0148%" height="15" fill="rgb(238,207,15)" fg:x="17307" fg:w="9"/><text x="28.6189%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.01%)</title><rect x="28.3705%" y="181" width="0.0131%" height="15" fill="rgb(213,199,42)" fg:x="17308" fg:w="8"/><text x="28.6205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="28.3574%" y="229" width="0.0328%" height="15" fill="rgb(235,201,11)" fg:x="17300" fg:w="20"/><text x="28.6074%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="28.3623%" y="213" width="0.0279%" height="15" fill="rgb(207,46,11)" fg:x="17303" fg:w="17"/><text x="28.6123%" y="223.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (55 samples, 0.09%)</title><rect x="28.3918%" y="229" width="0.0902%" height="15" fill="rgb(241,35,35)" fg:x="17321" fg:w="55"/><text x="28.6418%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (250 samples, 0.41%)</title><rect x="28.4820%" y="229" width="0.4098%" height="15" fill="rgb(243,32,47)" fg:x="17376" fg:w="250"/><text x="28.7320%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,112 samples, 1.82%)</title><rect x="27.6591%" y="261" width="1.8227%" height="15" fill="rgb(247,202,23)" fg:x="16874" fg:w="1112"/><text x="27.9091%" y="271.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (850 samples, 1.39%)</title><rect x="28.0886%" y="245" width="1.3933%" height="15" fill="rgb(219,102,11)" fg:x="17136" fg:w="850"/><text x="28.3386%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (360 samples, 0.59%)</title><rect x="28.8918%" y="229" width="0.5901%" height="15" fill="rgb(243,110,44)" fg:x="17626" fg:w="360"/><text x="29.1418%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (21 samples, 0.03%)</title><rect x="29.4819%" y="261" width="0.0344%" height="15" fill="rgb(222,74,54)" fg:x="17986" fg:w="21"/><text x="29.7319%" y="271.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (10 samples, 0.02%)</title><rect x="29.5228%" y="261" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="18011" fg:w="10"/><text x="29.7728%" y="271.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (197 samples, 0.32%)</title><rect x="29.5392%" y="261" width="0.3229%" height="15" fill="rgb(226,22,26)" fg:x="18021" fg:w="197"/><text x="29.7892%" y="271.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,539 samples, 7.44%)</title><rect x="34.7059%" y="245" width="7.4401%" height="15" fill="rgb(217,163,10)" fg:x="21173" fg:w="4539"/><text x="34.9559%" y="255.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.02%)</title><rect x="42.1575%" y="181" width="0.0164%" height="15" fill="rgb(213,25,53)" fg:x="25719" fg:w="10"/><text x="42.4075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (40 samples, 0.07%)</title><rect x="42.1509%" y="197" width="0.0656%" height="15" fill="rgb(252,105,26)" fg:x="25715" fg:w="40"/><text x="42.4009%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.04%)</title><rect x="42.1738%" y="181" width="0.0426%" height="15" fill="rgb(220,39,43)" fg:x="25729" fg:w="26"/><text x="42.4238%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (45 samples, 0.07%)</title><rect x="42.1460%" y="245" width="0.0738%" height="15" fill="rgb(229,68,48)" fg:x="25712" fg:w="45"/><text x="42.3960%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (45 samples, 0.07%)</title><rect x="42.1460%" y="229" width="0.0738%" height="15" fill="rgb(252,8,32)" fg:x="25712" fg:w="45"/><text x="42.3960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (44 samples, 0.07%)</title><rect x="42.1476%" y="213" width="0.0721%" height="15" fill="rgb(223,20,43)" fg:x="25713" fg:w="44"/><text x="42.3976%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,864 samples, 4.69%)</title><rect x="42.2197%" y="245" width="4.6945%" height="15" fill="rgb(229,81,49)" fg:x="25757" fg:w="2864"/><text x="42.4697%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (586 samples, 0.96%)</title><rect x="46.9143%" y="245" width="0.9605%" height="15" fill="rgb(236,28,36)" fg:x="28621" fg:w="586"/><text x="47.1643%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (103 samples, 0.17%)</title><rect x="47.9486%" y="229" width="0.1688%" height="15" fill="rgb(249,185,26)" fg:x="29252" fg:w="103"/><text x="48.1986%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="48.2928%" y="213" width="0.0246%" height="15" fill="rgb(249,174,33)" fg:x="29462" fg:w="15"/><text x="48.5428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="48.2977%" y="197" width="0.0197%" height="15" fill="rgb(233,201,37)" fg:x="29465" fg:w="12"/><text x="48.5477%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (242 samples, 0.40%)</title><rect x="48.3190%" y="213" width="0.3967%" height="15" fill="rgb(221,78,26)" fg:x="29478" fg:w="242"/><text x="48.5690%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (719 samples, 1.18%)</title><rect x="47.8748%" y="245" width="1.1786%" height="15" fill="rgb(250,127,30)" fg:x="29207" fg:w="719"/><text x="48.1248%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (571 samples, 0.94%)</title><rect x="48.1174%" y="229" width="0.9360%" height="15" fill="rgb(230,49,44)" fg:x="29355" fg:w="571"/><text x="48.3674%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (206 samples, 0.34%)</title><rect x="48.7157%" y="213" width="0.3377%" height="15" fill="rgb(229,67,23)" fg:x="29720" fg:w="206"/><text x="48.9657%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.01%)</title><rect x="54.2216%" y="165" width="0.0148%" height="15" fill="rgb(249,83,47)" fg:x="33079" fg:w="9"/><text x="54.4716%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 0.05%)</title><rect x="54.2151%" y="181" width="0.0508%" height="15" fill="rgb(215,43,3)" fg:x="33075" fg:w="31"/><text x="54.4651%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="54.2364%" y="165" width="0.0295%" height="15" fill="rgb(238,154,13)" fg:x="33088" fg:w="18"/><text x="54.4864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.06%)</title><rect x="54.2135%" y="197" width="0.0590%" height="15" fill="rgb(219,56,2)" fg:x="33074" fg:w="36"/><text x="54.4635%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (14,894 samples, 24.41%)</title><rect x="29.8621%" y="261" width="24.4136%" height="15" fill="rgb(233,0,4)" fg:x="18218" fg:w="14894"/><text x="30.1121%" y="271.50">rust_qecp`rust_qecp::ftqec::PlanarCodeM..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,186 samples, 5.22%)</title><rect x="49.0534%" y="245" width="5.2224%" height="15" fill="rgb(235,30,7)" fg:x="29926" fg:w="3186"/><text x="49.3034%" y="255.50">rust_q..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (38 samples, 0.06%)</title><rect x="54.2135%" y="229" width="0.0623%" height="15" fill="rgb(250,79,13)" fg:x="33074" fg:w="38"/><text x="54.4635%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (38 samples, 0.06%)</title><rect x="54.2135%" y="213" width="0.0623%" height="15" fill="rgb(211,146,34)" fg:x="33074" fg:w="38"/><text x="54.4635%" y="223.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.04%)</title><rect x="56.4427%" y="245" width="0.0443%" height="15" fill="rgb(228,22,38)" fg:x="34434" fg:w="27"/><text x="56.6927%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="56.4738%" y="229" width="0.0131%" height="15" fill="rgb(235,168,5)" fg:x="34453" fg:w="8"/><text x="56.7238%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="56.4755%" y="213" width="0.0115%" height="15" fill="rgb(221,155,16)" fg:x="34454" fg:w="7"/><text x="56.7255%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21 samples, 0.03%)</title><rect x="56.4935%" y="229" width="0.0344%" height="15" fill="rgb(215,215,53)" fg:x="34465" fg:w="21"/><text x="56.7435%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (9 samples, 0.01%)</title><rect x="56.5132%" y="213" width="0.0148%" height="15" fill="rgb(223,4,10)" fg:x="34477" fg:w="9"/><text x="56.7632%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (26 samples, 0.04%)</title><rect x="56.4902%" y="245" width="0.0426%" height="15" fill="rgb(234,103,6)" fg:x="34463" fg:w="26"/><text x="56.7402%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (33 samples, 0.05%)</title><rect x="56.5329%" y="229" width="0.0541%" height="15" fill="rgb(227,97,0)" fg:x="34489" fg:w="33"/><text x="56.7829%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="56.5869%" y="229" width="0.0197%" height="15" fill="rgb(234,150,53)" fg:x="34522" fg:w="12"/><text x="56.8369%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (15 samples, 0.02%)</title><rect x="56.6066%" y="229" width="0.0246%" height="15" fill="rgb(228,201,54)" fg:x="34534" fg:w="15"/><text x="56.8566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.04%)</title><rect x="56.6312%" y="229" width="0.0426%" height="15" fill="rgb(222,22,37)" fg:x="34549" fg:w="26"/><text x="56.8812%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="56.6738%" y="229" width="0.0328%" height="15" fill="rgb(237,53,32)" fg:x="34575" fg:w="20"/><text x="56.9238%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.03%)</title><rect x="56.7066%" y="229" width="0.0344%" height="15" fill="rgb(233,25,53)" fg:x="34595" fg:w="21"/><text x="56.9566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="57.0869%" y="197" width="0.0262%" height="15" fill="rgb(210,40,34)" fg:x="34827" fg:w="16"/><text x="57.3369%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (68 samples, 0.11%)</title><rect x="57.4918%" y="165" width="0.1115%" height="15" fill="rgb(241,220,44)" fg:x="35074" fg:w="68"/><text x="57.7418%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (252 samples, 0.41%)</title><rect x="57.1984%" y="181" width="0.4131%" height="15" fill="rgb(235,28,35)" fg:x="34895" fg:w="252"/><text x="57.4484%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (488 samples, 0.80%)</title><rect x="56.8541%" y="213" width="0.7999%" height="15" fill="rgb(210,56,17)" fg:x="34685" fg:w="488"/><text x="57.1041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (330 samples, 0.54%)</title><rect x="57.1131%" y="197" width="0.5409%" height="15" fill="rgb(224,130,29)" fg:x="34843" fg:w="330"/><text x="57.3631%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (26 samples, 0.04%)</title><rect x="57.6114%" y="181" width="0.0426%" height="15" fill="rgb(235,212,8)" fg:x="35147" fg:w="26"/><text x="57.8614%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (38 samples, 0.06%)</title><rect x="57.6540%" y="213" width="0.0623%" height="15" fill="rgb(223,33,50)" fg:x="35173" fg:w="38"/><text x="57.9040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (189 samples, 0.31%)</title><rect x="57.7163%" y="213" width="0.3098%" height="15" fill="rgb(219,149,13)" fg:x="35211" fg:w="189"/><text x="57.9663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (83 samples, 0.14%)</title><rect x="57.8901%" y="197" width="0.1360%" height="15" fill="rgb(250,156,29)" fg:x="35317" fg:w="83"/><text x="58.1401%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.04%)</title><rect x="58.0261%" y="213" width="0.0393%" height="15" fill="rgb(216,193,19)" fg:x="35400" fg:w="24"/><text x="58.2761%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (61 samples, 0.10%)</title><rect x="58.0655%" y="213" width="0.1000%" height="15" fill="rgb(216,135,14)" fg:x="35424" fg:w="61"/><text x="58.3155%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="58.1655%" y="213" width="0.0148%" height="15" fill="rgb(241,47,5)" fg:x="35485" fg:w="9"/><text x="58.4155%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="58.1802%" y="213" width="0.0180%" height="15" fill="rgb(233,42,35)" fg:x="35494" fg:w="11"/><text x="58.4302%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (357 samples, 0.59%)</title><rect x="58.2605%" y="197" width="0.5852%" height="15" fill="rgb(231,13,6)" fg:x="35543" fg:w="357"/><text x="58.5105%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (7 samples, 0.01%)</title><rect x="58.8457%" y="197" width="0.0115%" height="15" fill="rgb(207,181,40)" fg:x="35900" fg:w="7"/><text x="59.0957%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="58.8670%" y="197" width="0.0131%" height="15" fill="rgb(254,173,49)" fg:x="35913" fg:w="8"/><text x="59.1170%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (56 samples, 0.09%)</title><rect x="58.9539%" y="181" width="0.0918%" height="15" fill="rgb(221,1,38)" fg:x="35966" fg:w="56"/><text x="59.2039%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (112 samples, 0.18%)</title><rect x="59.0457%" y="181" width="0.1836%" height="15" fill="rgb(206,124,46)" fg:x="36022" fg:w="112"/><text x="59.2957%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (229 samples, 0.38%)</title><rect x="58.8801%" y="197" width="0.3754%" height="15" fill="rgb(249,21,11)" fg:x="35921" fg:w="229"/><text x="59.1301%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="59.2293%" y="181" width="0.0262%" height="15" fill="rgb(222,201,40)" fg:x="36134" fg:w="16"/><text x="59.4793%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (21 samples, 0.03%)</title><rect x="59.2621%" y="197" width="0.0344%" height="15" fill="rgb(235,61,29)" fg:x="36154" fg:w="21"/><text x="59.5121%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="59.5309%" y="165" width="0.0148%" height="15" fill="rgb(219,207,3)" fg:x="36318" fg:w="9"/><text x="59.7809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.07%)</title><rect x="59.8046%" y="133" width="0.0656%" height="15" fill="rgb(222,56,46)" fg:x="36485" fg:w="40"/><text x="60.0546%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (193 samples, 0.32%)</title><rect x="59.6046%" y="149" width="0.3164%" height="15" fill="rgb(239,76,54)" fg:x="36363" fg:w="193"/><text x="59.8546%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (31 samples, 0.05%)</title><rect x="59.8702%" y="133" width="0.0508%" height="15" fill="rgb(231,124,27)" fg:x="36525" fg:w="31"/><text x="60.1202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (320 samples, 0.52%)</title><rect x="59.4309%" y="181" width="0.5245%" height="15" fill="rgb(249,195,6)" fg:x="36257" fg:w="320"/><text x="59.6809%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (250 samples, 0.41%)</title><rect x="59.5456%" y="165" width="0.4098%" height="15" fill="rgb(237,174,47)" fg:x="36327" fg:w="250"/><text x="59.7956%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.03%)</title><rect x="59.9210%" y="149" width="0.0344%" height="15" fill="rgb(206,201,31)" fg:x="36556" fg:w="21"/><text x="60.1710%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.03%)</title><rect x="59.9554%" y="181" width="0.0279%" height="15" fill="rgb(231,57,52)" fg:x="36577" fg:w="17"/><text x="60.2054%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,095 samples, 1.79%)</title><rect x="58.1982%" y="213" width="1.7949%" height="15" fill="rgb(248,177,22)" fg:x="35505" fg:w="1095"/><text x="58.4482%" y="223.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (425 samples, 0.70%)</title><rect x="59.2965%" y="197" width="0.6966%" height="15" fill="rgb(215,211,37)" fg:x="36175" fg:w="425"/><text x="59.5465%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (58 samples, 0.10%)</title><rect x="60.1406%" y="197" width="0.0951%" height="15" fill="rgb(241,128,51)" fg:x="36690" fg:w="58"/><text x="60.3906%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (96 samples, 0.16%)</title><rect x="60.2357%" y="197" width="0.1574%" height="15" fill="rgb(227,165,31)" fg:x="36748" fg:w="96"/><text x="60.4857%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (288 samples, 0.47%)</title><rect x="59.9931%" y="213" width="0.4721%" height="15" fill="rgb(228,167,24)" fg:x="36600" fg:w="288"/><text x="60.2431%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (44 samples, 0.07%)</title><rect x="60.3931%" y="197" width="0.0721%" height="15" fill="rgb(228,143,12)" fg:x="36844" fg:w="44"/><text x="60.6431%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.03%)</title><rect x="60.4652%" y="213" width="0.0279%" height="15" fill="rgb(249,149,8)" fg:x="36888" fg:w="17"/><text x="60.7152%" y="223.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,302 samples, 3.77%)</title><rect x="56.7443%" y="229" width="3.7733%" height="15" fill="rgb(243,35,44)" fg:x="34618" fg:w="2302"/><text x="56.9943%" y="239.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.02%)</title><rect x="60.4931%" y="213" width="0.0246%" height="15" fill="rgb(246,89,9)" fg:x="36905" fg:w="15"/><text x="60.7431%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (12 samples, 0.02%)</title><rect x="60.5275%" y="229" width="0.0197%" height="15" fill="rgb(233,213,13)" fg:x="36926" fg:w="12"/><text x="60.7775%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (25 samples, 0.04%)</title><rect x="60.5472%" y="229" width="0.0410%" height="15" fill="rgb(233,141,41)" fg:x="36938" fg:w="25"/><text x="60.7972%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (18 samples, 0.03%)</title><rect x="60.5881%" y="229" width="0.0295%" height="15" fill="rgb(239,167,4)" fg:x="36963" fg:w="18"/><text x="60.8381%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.04%)</title><rect x="60.6176%" y="229" width="0.0377%" height="15" fill="rgb(209,217,16)" fg:x="36981" fg:w="23"/><text x="60.8676%" y="239.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,528 samples, 4.14%)</title><rect x="56.5329%" y="245" width="4.1438%" height="15" fill="rgb(219,88,35)" fg:x="34489" fg:w="2528"/><text x="56.7829%" y="255.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (9 samples, 0.01%)</title><rect x="60.6619%" y="229" width="0.0148%" height="15" fill="rgb(220,193,23)" fg:x="37008" fg:w="9"/><text x="60.9119%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="60.6783%" y="245" width="0.0164%" height="15" fill="rgb(230,90,52)" fg:x="37018" fg:w="10"/><text x="60.9283%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="60.6799%" y="229" width="0.0148%" height="15" fill="rgb(252,106,19)" fg:x="37019" fg:w="9"/><text x="60.9299%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="60.6816%" y="213" width="0.0131%" height="15" fill="rgb(206,74,20)" fg:x="37020" fg:w="8"/><text x="60.9316%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="60.6832%" y="197" width="0.0115%" height="15" fill="rgb(230,138,44)" fg:x="37021" fg:w="7"/><text x="60.9332%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.06%)</title><rect x="60.9438%" y="229" width="0.0574%" height="15" fill="rgb(235,182,43)" fg:x="37180" fg:w="35"/><text x="61.1938%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="61.0012%" y="229" width="0.0164%" height="15" fill="rgb(242,16,51)" fg:x="37215" fg:w="10"/><text x="61.2512%" y="239.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (28 samples, 0.05%)</title><rect x="61.0176%" y="229" width="0.0459%" height="15" fill="rgb(248,9,4)" fg:x="37225" fg:w="28"/><text x="61.2676%" y="239.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="61.0635%" y="229" width="0.0213%" height="15" fill="rgb(210,31,22)" fg:x="37253" fg:w="13"/><text x="61.3135%" y="239.50"></text></g><g><title>rust_qecp`__rdl_realloc (18 samples, 0.03%)</title><rect x="61.0848%" y="229" width="0.0295%" height="15" fill="rgb(239,54,39)" fg:x="37266" fg:w="18"/><text x="61.3348%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (105 samples, 0.17%)</title><rect x="61.3848%" y="181" width="0.1721%" height="15" fill="rgb(230,99,41)" fg:x="37449" fg:w="105"/><text x="61.6348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.05%)</title><rect x="61.5110%" y="165" width="0.0459%" height="15" fill="rgb(253,106,12)" fg:x="37526" fg:w="28"/><text x="61.7610%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (242 samples, 0.40%)</title><rect x="61.1864%" y="213" width="0.3967%" height="15" fill="rgb(213,46,41)" fg:x="37328" fg:w="242"/><text x="61.4364%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (147 samples, 0.24%)</title><rect x="61.3421%" y="197" width="0.2410%" height="15" fill="rgb(215,133,35)" fg:x="37423" fg:w="147"/><text x="61.5921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="61.5569%" y="181" width="0.0262%" height="15" fill="rgb(213,28,5)" fg:x="37554" fg:w="16"/><text x="61.8069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.03%)</title><rect x="61.5831%" y="213" width="0.0328%" height="15" fill="rgb(215,77,49)" fg:x="37570" fg:w="20"/><text x="61.8331%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="61.6159%" y="213" width="0.0197%" height="15" fill="rgb(248,100,22)" fg:x="37590" fg:w="12"/><text x="61.8659%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="61.6405%" y="213" width="0.0311%" height="15" fill="rgb(208,67,9)" fg:x="37605" fg:w="19"/><text x="61.8905%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (32 samples, 0.05%)</title><rect x="61.9175%" y="197" width="0.0525%" height="15" fill="rgb(219,133,21)" fg:x="37774" fg:w="32"/><text x="62.1675%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (13 samples, 0.02%)</title><rect x="62.1043%" y="181" width="0.0213%" height="15" fill="rgb(246,46,29)" fg:x="37888" fg:w="13"/><text x="62.3543%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (26 samples, 0.04%)</title><rect x="62.1257%" y="181" width="0.0426%" height="15" fill="rgb(246,185,52)" fg:x="37901" fg:w="26"/><text x="62.3757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (29 samples, 0.05%)</title><rect x="62.1683%" y="181" width="0.0475%" height="15" fill="rgb(252,136,11)" fg:x="37927" fg:w="29"/><text x="62.4183%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (269 samples, 0.44%)</title><rect x="62.2207%" y="181" width="0.4409%" height="15" fill="rgb(219,138,53)" fg:x="37959" fg:w="269"/><text x="62.4707%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="62.8551%" y="165" width="0.0131%" height="15" fill="rgb(211,51,23)" fg:x="38346" fg:w="8"/><text x="63.1051%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (30 samples, 0.05%)</title><rect x="62.8682%" y="165" width="0.0492%" height="15" fill="rgb(247,221,28)" fg:x="38354" fg:w="30"/><text x="63.1182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (120 samples, 0.20%)</title><rect x="62.9174%" y="165" width="0.1967%" height="15" fill="rgb(251,222,45)" fg:x="38384" fg:w="120"/><text x="63.1674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (63 samples, 0.10%)</title><rect x="63.3632%" y="133" width="0.1033%" height="15" fill="rgb(217,162,53)" fg:x="38656" fg:w="63"/><text x="63.6132%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (197 samples, 0.32%)</title><rect x="63.1632%" y="149" width="0.3229%" height="15" fill="rgb(229,93,14)" fg:x="38534" fg:w="197"/><text x="63.4132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.02%)</title><rect x="63.4665%" y="133" width="0.0197%" height="15" fill="rgb(209,67,49)" fg:x="38719" fg:w="12"/><text x="63.7165%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (243 samples, 0.40%)</title><rect x="63.1141%" y="165" width="0.3983%" height="15" fill="rgb(213,87,29)" fg:x="38504" fg:w="243"/><text x="63.3641%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.03%)</title><rect x="63.4862%" y="149" width="0.0262%" height="15" fill="rgb(205,151,52)" fg:x="38731" fg:w="16"/><text x="63.7362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (167 samples, 0.27%)</title><rect x="63.5124%" y="165" width="0.2737%" height="15" fill="rgb(253,215,39)" fg:x="38747" fg:w="167"/><text x="63.7624%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="63.8205%" y="149" width="0.0131%" height="15" fill="rgb(221,220,41)" fg:x="38935" fg:w="8"/><text x="64.0705%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (62 samples, 0.10%)</title><rect x="63.9500%" y="133" width="0.1016%" height="15" fill="rgb(218,133,21)" fg:x="39014" fg:w="62"/><text x="64.2000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (260 samples, 0.43%)</title><rect x="63.7861%" y="165" width="0.4262%" height="15" fill="rgb(221,193,43)" fg:x="38914" fg:w="260"/><text x="64.0361%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (231 samples, 0.38%)</title><rect x="63.8337%" y="149" width="0.3786%" height="15" fill="rgb(240,128,52)" fg:x="38943" fg:w="231"/><text x="64.0837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (98 samples, 0.16%)</title><rect x="64.0517%" y="133" width="0.1606%" height="15" fill="rgb(253,114,12)" fg:x="39076" fg:w="98"/><text x="64.3017%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (966 samples, 1.58%)</title><rect x="62.6617%" y="181" width="1.5834%" height="15" fill="rgb(215,223,47)" fg:x="38228" fg:w="966"/><text x="62.9117%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="64.2123%" y="165" width="0.0328%" height="15" fill="rgb(248,225,23)" fg:x="39174" fg:w="20"/><text x="64.4623%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="64.2451%" y="181" width="0.0131%" height="15" fill="rgb(250,108,0)" fg:x="39194" fg:w="8"/><text x="64.4951%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,455 samples, 2.38%)</title><rect x="61.9699%" y="197" width="2.3850%" height="15" fill="rgb(228,208,7)" fg:x="37806" fg:w="1455"/><text x="62.2199%" y="207.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.10%)</title><rect x="64.2582%" y="181" width="0.0967%" height="15" fill="rgb(244,45,10)" fg:x="39202" fg:w="59"/><text x="64.5082%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (127 samples, 0.21%)</title><rect x="64.3549%" y="197" width="0.2082%" height="15" fill="rgb(207,125,25)" fg:x="39261" fg:w="127"/><text x="64.6049%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="64.5631%" y="197" width="0.0344%" height="15" fill="rgb(210,195,18)" fg:x="39388" fg:w="21"/><text x="64.8131%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,799 samples, 2.95%)</title><rect x="61.6716%" y="213" width="2.9488%" height="15" fill="rgb(249,80,12)" fg:x="37624" fg:w="1799"/><text x="61.9216%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="64.5975%" y="197" width="0.0229%" height="15" fill="rgb(221,65,9)" fg:x="39409" fg:w="14"/><text x="64.8475%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,402 samples, 3.94%)</title><rect x="60.6947%" y="245" width="3.9373%" height="15" fill="rgb(235,49,36)" fg:x="37028" fg:w="2402"/><text x="60.9447%" y="255.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,145 samples, 3.52%)</title><rect x="61.1159%" y="229" width="3.5160%" height="15" fill="rgb(225,32,20)" fg:x="37285" fg:w="2145"/><text x="61.3659%" y="239.50">rus..</text></g><g><title>rust_qecp`__rdl_realloc (7 samples, 0.01%)</title><rect x="64.6205%" y="213" width="0.0115%" height="15" fill="rgb(215,141,46)" fg:x="39423" fg:w="7"/><text x="64.8705%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (89 samples, 0.15%)</title><rect x="64.6319%" y="245" width="0.1459%" height="15" fill="rgb(250,160,47)" fg:x="39430" fg:w="89"/><text x="64.8819%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (150 samples, 0.25%)</title><rect x="64.7778%" y="229" width="0.2459%" height="15" fill="rgb(216,222,40)" fg:x="39519" fg:w="150"/><text x="65.0278%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.04%)</title><rect x="65.2581%" y="213" width="0.0377%" height="15" fill="rgb(234,217,39)" fg:x="39812" fg:w="23"/><text x="65.5081%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="65.2958%" y="213" width="0.0213%" height="15" fill="rgb(207,178,40)" fg:x="39835" fg:w="13"/><text x="65.5458%" y="223.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="65.3237%" y="213" width="0.0115%" height="15" fill="rgb(221,136,13)" fg:x="39852" fg:w="7"/><text x="65.5737%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="65.7187%" y="181" width="0.0295%" height="15" fill="rgb(249,199,10)" fg:x="40093" fg:w="18"/><text x="65.9687%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (30 samples, 0.05%)</title><rect x="65.7482%" y="181" width="0.0492%" height="15" fill="rgb(249,222,13)" fg:x="40111" fg:w="30"/><text x="65.9982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="65.8465%" y="165" width="0.0197%" height="15" fill="rgb(244,185,38)" fg:x="40171" fg:w="12"/><text x="66.0965%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (46 samples, 0.08%)</title><rect x="66.1236%" y="149" width="0.0754%" height="15" fill="rgb(236,202,9)" fg:x="40340" fg:w="46"/><text x="66.3736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (563 samples, 0.92%)</title><rect x="66.3285%" y="133" width="0.9228%" height="15" fill="rgb(250,229,37)" fg:x="40465" fg:w="563"/><text x="66.5785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (33 samples, 0.05%)</title><rect x="67.2513%" y="133" width="0.0541%" height="15" fill="rgb(206,174,23)" fg:x="41028" fg:w="33"/><text x="67.5013%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,290 samples, 2.11%)</title><rect x="65.4384%" y="197" width="2.1145%" height="15" fill="rgb(211,33,43)" fg:x="39922" fg:w="1290"/><text x="65.6884%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,071 samples, 1.76%)</title><rect x="65.7974%" y="181" width="1.7555%" height="15" fill="rgb(245,58,50)" fg:x="40141" fg:w="1071"/><text x="66.0474%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1,029 samples, 1.69%)</title><rect x="65.8662%" y="165" width="1.6867%" height="15" fill="rgb(244,68,36)" fg:x="40183" fg:w="1029"/><text x="66.1162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (824 samples, 1.35%)</title><rect x="66.2022%" y="149" width="1.3507%" height="15" fill="rgb(232,229,15)" fg:x="40388" fg:w="824"/><text x="66.4522%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (151 samples, 0.25%)</title><rect x="67.3054%" y="133" width="0.2475%" height="15" fill="rgb(254,30,23)" fg:x="41061" fg:w="151"/><text x="67.5554%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (160 samples, 0.26%)</title><rect x="67.5529%" y="197" width="0.2623%" height="15" fill="rgb(235,160,14)" fg:x="41212" fg:w="160"/><text x="67.8029%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (342 samples, 0.56%)</title><rect x="67.8152%" y="197" width="0.5606%" height="15" fill="rgb(212,155,44)" fg:x="41372" fg:w="342"/><text x="68.0652%" y="207.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,055 samples, 3.37%)</title><rect x="65.0302%" y="229" width="3.3685%" height="15" fill="rgb(226,2,50)" fg:x="39673" fg:w="2055"/><text x="65.2802%" y="239.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,869 samples, 3.06%)</title><rect x="65.3351%" y="213" width="3.0636%" height="15" fill="rgb(234,177,6)" fg:x="39859" fg:w="1869"/><text x="65.5851%" y="223.50">rus..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="68.3758%" y="197" width="0.0229%" height="15" fill="rgb(217,24,9)" fg:x="41714" fg:w="14"/><text x="68.6258%" y="207.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,233 samples, 3.66%)</title><rect x="64.7778%" y="245" width="3.6602%" height="15" fill="rgb(220,13,46)" fg:x="39519" fg:w="2233"/><text x="65.0278%" y="255.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.04%)</title><rect x="68.3987%" y="229" width="0.0393%" height="15" fill="rgb(239,221,27)" fg:x="41728" fg:w="24"/><text x="68.6487%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (10 samples, 0.02%)</title><rect x="68.8823%" y="229" width="0.0164%" height="15" fill="rgb(222,198,25)" fg:x="42023" fg:w="10"/><text x="69.1323%" y="239.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (46 samples, 0.08%)</title><rect x="69.5314%" y="213" width="0.0754%" height="15" fill="rgb(211,99,13)" fg:x="42419" fg:w="46"/><text x="69.7814%" y="223.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (29 samples, 0.05%)</title><rect x="70.2592%" y="197" width="0.0475%" height="15" fill="rgb(232,111,31)" fg:x="42863" fg:w="29"/><text x="70.5092%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (56 samples, 0.09%)</title><rect x="70.9460%" y="181" width="0.0918%" height="15" fill="rgb(245,82,37)" fg:x="43282" fg:w="56"/><text x="71.1960%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (36 samples, 0.06%)</title><rect x="71.4639%" y="165" width="0.0590%" height="15" fill="rgb(227,149,46)" fg:x="43598" fg:w="36"/><text x="71.7139%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (23 samples, 0.04%)</title><rect x="71.7475%" y="149" width="0.0377%" height="15" fill="rgb(218,36,50)" fg:x="43771" fg:w="23"/><text x="71.9975%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (11 samples, 0.02%)</title><rect x="71.8508%" y="133" width="0.0180%" height="15" fill="rgb(226,80,48)" fg:x="43834" fg:w="11"/><text x="72.1008%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (2,110 samples, 3.46%)</title><rect x="68.4380%" y="245" width="3.4586%" height="15" fill="rgb(238,224,15)" fg:x="41752" fg:w="2110"/><text x="68.6880%" y="255.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,829 samples, 3.00%)</title><rect x="68.8987%" y="229" width="2.9980%" height="15" fill="rgb(241,136,10)" fg:x="42033" fg:w="1829"/><text x="69.1487%" y="239.50">rus..</text></g><g><title>rust_qecp`core::slice::sort::recurse (1,397 samples, 2.29%)</title><rect x="69.6068%" y="213" width="2.2899%" height="15" fill="rgb(208,32,45)" fg:x="42465" fg:w="1397"/><text x="69.8568%" y="223.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (970 samples, 1.59%)</title><rect x="70.3067%" y="197" width="1.5900%" height="15" fill="rgb(207,135,9)" fg:x="42892" fg:w="970"/><text x="70.5567%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (524 samples, 0.86%)</title><rect x="71.0377%" y="181" width="0.8589%" height="15" fill="rgb(206,86,44)" fg:x="43338" fg:w="524"/><text x="71.2877%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (228 samples, 0.37%)</title><rect x="71.5229%" y="165" width="0.3737%" height="15" fill="rgb(245,177,15)" fg:x="43634" fg:w="228"/><text x="71.7729%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (68 samples, 0.11%)</title><rect x="71.7852%" y="149" width="0.1115%" height="15" fill="rgb(206,64,50)" fg:x="43794" fg:w="68"/><text x="72.0352%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (17 samples, 0.03%)</title><rect x="71.8688%" y="133" width="0.0279%" height="15" fill="rgb(234,36,40)" fg:x="43845" fg:w="17"/><text x="72.1188%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (638 samples, 1.05%)</title><rect x="73.2604%" y="229" width="1.0458%" height="15" fill="rgb(213,64,8)" fg:x="44694" fg:w="638"/><text x="73.5104%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,188 samples, 1.95%)</title><rect x="74.3062%" y="229" width="1.9473%" height="15" fill="rgb(210,75,36)" fg:x="45332" fg:w="1188"/><text x="74.5562%" y="239.50">r..</text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,651 samples, 5.98%)</title><rect x="71.8967%" y="245" width="5.9846%" height="15" fill="rgb(229,88,21)" fg:x="43862" fg:w="3651"/><text x="72.1467%" y="255.50">rust_qec..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (993 samples, 1.63%)</title><rect x="76.2535%" y="229" width="1.6277%" height="15" fill="rgb(252,204,47)" fg:x="46520" fg:w="993"/><text x="76.5035%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (59 samples, 0.10%)</title><rect x="77.8812%" y="245" width="0.0967%" height="15" fill="rgb(208,77,27)" fg:x="47513" fg:w="59"/><text x="78.1312%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (14,893 samples, 24.41%)</title><rect x="54.2790%" y="261" width="24.4120%" height="15" fill="rgb(221,76,26)" fg:x="33114" fg:w="14893"/><text x="54.5290%" y="271.50">rust_qecp`rust_qecp::union_find_decoder..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (435 samples, 0.71%)</title><rect x="77.9779%" y="245" width="0.7130%" height="15" fill="rgb(225,139,18)" fg:x="47572" fg:w="435"/><text x="78.2279%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (36 samples, 0.06%)</title><rect x="80.2351%" y="245" width="0.0590%" height="15" fill="rgb(230,137,11)" fg:x="48949" fg:w="36"/><text x="80.4851%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.01%)</title><rect x="80.3596%" y="229" width="0.0131%" height="15" fill="rgb(212,28,1)" fg:x="49025" fg:w="8"/><text x="80.6096%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (44 samples, 0.07%)</title><rect x="80.3973%" y="213" width="0.0721%" height="15" fill="rgb(248,164,17)" fg:x="49048" fg:w="44"/><text x="80.6473%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.03%)</title><rect x="80.4383%" y="197" width="0.0311%" height="15" fill="rgb(222,171,42)" fg:x="49073" fg:w="19"/><text x="80.6883%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (63 samples, 0.10%)</title><rect x="80.3727%" y="229" width="0.1033%" height="15" fill="rgb(243,84,45)" fg:x="49033" fg:w="63"/><text x="80.6227%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.19%)</title><rect x="80.2941%" y="245" width="0.1934%" height="15" fill="rgb(252,49,23)" fg:x="48985" fg:w="118"/><text x="80.5441%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="80.4760%" y="229" width="0.0115%" height="15" fill="rgb(215,19,7)" fg:x="49096" fg:w="7"/><text x="80.7260%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="80.4875%" y="245" width="0.0115%" height="15" fill="rgb(238,81,41)" fg:x="49103" fg:w="7"/><text x="80.7375%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (68 samples, 0.11%)</title><rect x="80.6285%" y="229" width="0.1115%" height="15" fill="rgb(210,199,37)" fg:x="49189" fg:w="68"/><text x="80.8785%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (161 samples, 0.26%)</title><rect x="80.4990%" y="245" width="0.2639%" height="15" fill="rgb(244,192,49)" fg:x="49110" fg:w="161"/><text x="80.7490%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (9 samples, 0.01%)</title><rect x="80.7481%" y="229" width="0.0148%" height="15" fill="rgb(226,211,11)" fg:x="49262" fg:w="9"/><text x="80.9981%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="80.7498%" y="213" width="0.0131%" height="15" fill="rgb(236,162,54)" fg:x="49263" fg:w="8"/><text x="80.9998%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.04%)</title><rect x="80.7743%" y="245" width="0.0426%" height="15" fill="rgb(220,229,9)" fg:x="49278" fg:w="26"/><text x="81.0243%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.04%)</title><rect x="80.7793%" y="229" width="0.0377%" height="15" fill="rgb(250,87,22)" fg:x="49281" fg:w="23"/><text x="81.0293%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="80.8170%" y="245" width="0.0115%" height="15" fill="rgb(239,43,17)" fg:x="49304" fg:w="7"/><text x="81.0670%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (51 samples, 0.08%)</title><rect x="80.8284%" y="245" width="0.0836%" height="15" fill="rgb(231,177,25)" fg:x="49311" fg:w="51"/><text x="81.0784%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="80.9137%" y="245" width="0.0229%" height="15" fill="rgb(219,179,1)" fg:x="49363" fg:w="14"/><text x="81.1637%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (32 samples, 0.05%)</title><rect x="80.9415%" y="245" width="0.0525%" height="15" fill="rgb(238,219,53)" fg:x="49380" fg:w="32"/><text x="81.1915%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (12 samples, 0.02%)</title><rect x="80.9940%" y="229" width="0.0197%" height="15" fill="rgb(232,167,36)" fg:x="49412" fg:w="12"/><text x="81.2440%" y="239.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.02%)</title><rect x="80.9940%" y="245" width="0.0246%" height="15" fill="rgb(244,19,51)" fg:x="49412" fg:w="15"/><text x="81.2440%" y="255.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="81.0186%" y="245" width="0.0311%" height="15" fill="rgb(224,6,22)" fg:x="49427" fg:w="19"/><text x="81.2686%" y="255.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (481 samples, 0.79%)</title><rect x="81.0497%" y="245" width="0.7884%" height="15" fill="rgb(224,145,5)" fg:x="49446" fg:w="481"/><text x="81.2997%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (10 samples, 0.02%)</title><rect x="81.8398%" y="245" width="0.0164%" height="15" fill="rgb(234,130,49)" fg:x="49928" fg:w="10"/><text x="82.0898%" y="255.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (12 samples, 0.02%)</title><rect x="81.8562%" y="245" width="0.0197%" height="15" fill="rgb(254,6,2)" fg:x="49938" fg:w="12"/><text x="82.1062%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="81.9037%" y="181" width="0.0131%" height="15" fill="rgb(208,96,46)" fg:x="49967" fg:w="8"/><text x="82.1537%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.03%)</title><rect x="81.8939%" y="197" width="0.0262%" height="15" fill="rgb(239,3,39)" fg:x="49961" fg:w="16"/><text x="82.1439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.04%)</title><rect x="81.8890%" y="213" width="0.0361%" height="15" fill="rgb(233,210,1)" fg:x="49958" fg:w="22"/><text x="82.1390%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.05%)</title><rect x="81.8808%" y="245" width="0.0459%" height="15" fill="rgb(244,137,37)" fg:x="49953" fg:w="28"/><text x="82.1308%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="81.8857%" y="229" width="0.0410%" height="15" fill="rgb(240,136,2)" fg:x="49956" fg:w="25"/><text x="82.1357%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (914 samples, 1.50%)</title><rect x="81.9267%" y="245" width="1.4982%" height="15" fill="rgb(239,18,37)" fg:x="49981" fg:w="914"/><text x="82.1767%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (65 samples, 0.11%)</title><rect x="83.4249%" y="245" width="0.1065%" height="15" fill="rgb(218,185,22)" fg:x="50895" fg:w="65"/><text x="83.6749%" y="255.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (29 samples, 0.05%)</title><rect x="83.5314%" y="245" width="0.0475%" height="15" fill="rgb(225,218,4)" fg:x="50960" fg:w="29"/><text x="83.7814%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (35 samples, 0.06%)</title><rect x="83.7428%" y="197" width="0.0574%" height="15" fill="rgb(230,182,32)" fg:x="51089" fg:w="35"/><text x="83.9928%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="83.7773%" y="181" width="0.0229%" height="15" fill="rgb(242,56,43)" fg:x="51110" fg:w="14"/><text x="84.0273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (94 samples, 0.15%)</title><rect x="83.6576%" y="213" width="0.1541%" height="15" fill="rgb(233,99,24)" fg:x="51037" fg:w="94"/><text x="83.9076%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="83.8002%" y="197" width="0.0115%" height="15" fill="rgb(234,209,42)" fg:x="51124" fg:w="7"/><text x="84.0502%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="83.8281%" y="181" width="0.0197%" height="15" fill="rgb(227,7,12)" fg:x="51141" fg:w="12"/><text x="84.0781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.06%)</title><rect x="83.8117%" y="213" width="0.0623%" height="15" fill="rgb(245,203,43)" fg:x="51131" fg:w="38"/><text x="84.0617%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (34 samples, 0.06%)</title><rect x="83.8183%" y="197" width="0.0557%" height="15" fill="rgb(238,205,33)" fg:x="51135" fg:w="34"/><text x="84.0683%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.03%)</title><rect x="83.8478%" y="181" width="0.0262%" height="15" fill="rgb(231,56,7)" fg:x="51153" fg:w="16"/><text x="84.0978%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.26%)</title><rect x="83.6117%" y="229" width="0.2639%" height="15" fill="rgb(244,186,29)" fg:x="51009" fg:w="161"/><text x="83.8617%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.01%)</title><rect x="83.8756%" y="229" width="0.0148%" height="15" fill="rgb(234,111,31)" fg:x="51170" fg:w="9"/><text x="84.1256%" y="239.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (192 samples, 0.31%)</title><rect x="83.5789%" y="245" width="0.3147%" height="15" fill="rgb(241,149,10)" fg:x="50989" fg:w="192"/><text x="83.8289%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (15 samples, 0.02%)</title><rect x="83.8937%" y="245" width="0.0246%" height="15" fill="rgb(249,206,44)" fg:x="51181" fg:w="15"/><text x="84.1437%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (3,190 samples, 5.23%)</title><rect x="78.6910%" y="261" width="5.2289%" height="15" fill="rgb(251,153,30)" fg:x="48007" fg:w="3190"/><text x="78.9410%" y="271.50">rust_q..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (19 samples, 0.03%)</title><rect x="83.9199%" y="261" width="0.0311%" height="15" fill="rgb(239,152,38)" fg:x="51197" fg:w="19"/><text x="84.1699%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (48,628 samples, 79.71%)</title><rect x="4.2438%" y="277" width="79.7089%" height="15" fill="rgb(249,139,47)" fg:x="2589" fg:w="48628"/><text x="4.4938%" y="287.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (50,099 samples, 82.12%)</title><rect x="1.8342%" y="293" width="82.1201%" height="15" fill="rgb(244,64,35)" fg:x="1119" fg:w="50099"/><text x="2.0842%" y="303.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (984 samples, 1.61%)</title><rect x="83.9543%" y="293" width="1.6129%" height="15" fill="rgb(216,46,15)" fg:x="51218" fg:w="984"/><text x="84.2043%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (200 samples, 0.33%)</title><rect x="85.5672%" y="293" width="0.3278%" height="15" fill="rgb(250,74,19)" fg:x="52202" fg:w="200"/><text x="85.8172%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (99 samples, 0.16%)</title><rect x="85.7328%" y="277" width="0.1623%" height="15" fill="rgb(249,42,33)" fg:x="52303" fg:w="99"/><text x="85.9828%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (4,834 samples, 7.92%)</title><rect x="85.8951%" y="293" width="7.9237%" height="15" fill="rgb(242,149,17)" fg:x="52402" fg:w="4834"/><text x="86.1451%" y="303.50">rust_qecp`r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (130 samples, 0.21%)</title><rect x="93.8253%" y="277" width="0.2131%" height="15" fill="rgb(244,29,21)" fg:x="57240" fg:w="130"/><text x="94.0753%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (419 samples, 0.69%)</title><rect x="93.8187%" y="293" width="0.6868%" height="15" fill="rgb(220,130,37)" fg:x="57236" fg:w="419"/><text x="94.0687%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (285 samples, 0.47%)</title><rect x="94.0384%" y="277" width="0.4672%" height="15" fill="rgb(211,67,2)" fg:x="57370" fg:w="285"/><text x="94.2884%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (48 samples, 0.08%)</title><rect x="94.5055%" y="293" width="0.0787%" height="15" fill="rgb(235,68,52)" fg:x="57655" fg:w="48"/><text x="94.7555%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,299 samples, 5.41%)</title><rect x="94.5859%" y="293" width="5.4076%" height="15" fill="rgb(246,142,3)" fg:x="57704" fg:w="3299"/><text x="94.8359%" y="303.50">rust_qe..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,424 samples, 3.97%)</title><rect x="96.0201%" y="277" width="3.9733%" height="15" fill="rgb(241,25,7)" fg:x="58579" fg:w="2424"/><text x="96.2701%" y="287.50">rust..</text></g><g><title>all (61,007 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="61007"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,912 samples, 98.21%)</title><rect x="1.7949%" y="373" width="98.2051%" height="15" fill="rgb(241,98,45)" fg:x="1095" fg:w="59912"/><text x="2.0449%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,912 samples, 98.21%)</title><rect x="1.7949%" y="357" width="98.2051%" height="15" fill="rgb(254,28,30)" fg:x="1095" fg:w="59912"/><text x="2.0449%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,912 samples, 98.21%)</title><rect x="1.7949%" y="341" width="98.2051%" height="15" fill="rgb(241,142,54)" fg:x="1095" fg:w="59912"/><text x="2.0449%" y="351.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,912 samples, 98.21%)</title><rect x="1.7949%" y="325" width="98.2051%" height="15" fill="rgb(222,85,15)" fg:x="1095" fg:w="59912"/><text x="2.0449%" y="335.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,909 samples, 98.20%)</title><rect x="1.7998%" y="309" width="98.2002%" height="15" fill="rgb(210,85,47)" fg:x="1098" fg:w="59909"/><text x="2.0498%" y="319.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>