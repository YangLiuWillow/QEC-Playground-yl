<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60375"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (15 samples, 0.02%)</title><rect x="0.0099%" y="53" width="0.0248%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="15"/><text x="0.2599%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (15 samples, 0.02%)</title><rect x="0.0099%" y="37" width="0.0248%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="15"/><text x="0.2599%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (20 samples, 0.03%)</title><rect x="0.0099%" y="69" width="0.0331%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="20"/><text x="0.2599%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (14 samples, 0.02%)</title><rect x="0.0431%" y="69" width="0.0232%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="14"/><text x="0.2931%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0663%" y="69" width="0.0282%" height="15" fill="rgb(208,68,35)" fg:x="40" fg:w="17"/><text x="0.3163%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (15 samples, 0.02%)</title><rect x="0.0696%" y="53" width="0.0248%" height="15" fill="rgb(232,128,0)" fg:x="42" fg:w="15"/><text x="0.3196%" y="63.50"></text></g><g><title>dyld`start (62 samples, 0.10%)</title><rect x="0.0000%" y="309" width="0.1027%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="62"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (61 samples, 0.10%)</title><rect x="0.0017%" y="293" width="0.1010%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="61"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (61 samples, 0.10%)</title><rect x="0.0017%" y="277" width="0.1010%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="61"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (61 samples, 0.10%)</title><rect x="0.0017%" y="261" width="0.1010%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="61"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 0.10%)</title><rect x="0.0033%" y="245" width="0.0994%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="60"/><text x="0.2533%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (60 samples, 0.10%)</title><rect x="0.0033%" y="229" width="0.0994%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="60"/><text x="0.2533%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (60 samples, 0.10%)</title><rect x="0.0033%" y="213" width="0.0994%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="60"/><text x="0.2533%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (60 samples, 0.10%)</title><rect x="0.0033%" y="197" width="0.0994%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="60"/><text x="0.2533%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (60 samples, 0.10%)</title><rect x="0.0033%" y="181" width="0.0994%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="60"/><text x="0.2533%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (60 samples, 0.10%)</title><rect x="0.0033%" y="165" width="0.0994%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="60"/><text x="0.2533%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.10%)</title><rect x="0.0033%" y="149" width="0.0994%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="60"/><text x="0.2533%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (60 samples, 0.10%)</title><rect x="0.0033%" y="133" width="0.0994%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="60"/><text x="0.2533%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.10%)</title><rect x="0.0033%" y="117" width="0.0994%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="60"/><text x="0.2533%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (60 samples, 0.10%)</title><rect x="0.0033%" y="101" width="0.0994%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="60"/><text x="0.2533%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (60 samples, 0.10%)</title><rect x="0.0033%" y="85" width="0.0994%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="60"/><text x="0.2533%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (14 samples, 0.02%)</title><rect x="0.1408%" y="229" width="0.0232%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="14"/><text x="0.3908%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (12 samples, 0.02%)</title><rect x="0.1640%" y="229" width="0.0199%" height="15" fill="rgb(221,5,38)" fg:x="99" fg:w="12"/><text x="0.4140%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.06%)</title><rect x="0.1839%" y="229" width="0.0646%" height="15" fill="rgb(247,18,42)" fg:x="111" fg:w="39"/><text x="0.4339%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="0.2352%" y="213" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="142" fg:w="8"/><text x="0.4852%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="0.2352%" y="197" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="142" fg:w="8"/><text x="0.4852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.06%)</title><rect x="0.2484%" y="229" width="0.0613%" height="15" fill="rgb(225,111,53)" fg:x="150" fg:w="37"/><text x="0.4984%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.05%)</title><rect x="0.2584%" y="213" width="0.0513%" height="15" fill="rgb(238,160,17)" fg:x="156" fg:w="31"/><text x="0.5084%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="0.2981%" y="197" width="0.0116%" height="15" fill="rgb(214,148,48)" fg:x="180" fg:w="7"/><text x="0.5481%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="0.3097%" y="229" width="0.0116%" height="15" fill="rgb(232,36,49)" fg:x="187" fg:w="7"/><text x="0.5597%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="0.3826%" y="197" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="231" fg:w="13"/><text x="0.6326%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.05%)</title><rect x="0.3594%" y="213" width="0.0480%" height="15" fill="rgb(229,88,8)" fg:x="217" fg:w="29"/><text x="0.6094%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.03%)</title><rect x="0.4075%" y="213" width="0.0298%" height="15" fill="rgb(213,181,19)" fg:x="246" fg:w="18"/><text x="0.6575%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.02%)</title><rect x="0.4124%" y="197" width="0.0248%" height="15" fill="rgb(254,191,54)" fg:x="249" fg:w="15"/><text x="0.6624%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="0.4389%" y="213" width="0.0149%" height="15" fill="rgb(241,83,37)" fg:x="265" fg:w="9"/><text x="0.6889%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (9 samples, 0.01%)</title><rect x="0.4621%" y="213" width="0.0149%" height="15" fill="rgb(233,36,39)" fg:x="279" fg:w="9"/><text x="0.7121%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (79 samples, 0.13%)</title><rect x="0.3495%" y="229" width="0.1308%" height="15" fill="rgb(226,3,54)" fg:x="211" fg:w="79"/><text x="0.5995%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (80 samples, 0.13%)</title><rect x="0.4952%" y="213" width="0.1325%" height="15" fill="rgb(245,192,40)" fg:x="299" fg:w="80"/><text x="0.7452%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.01%)</title><rect x="0.6294%" y="213" width="0.0133%" height="15" fill="rgb(238,167,29)" fg:x="380" fg:w="8"/><text x="0.8794%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="0.6427%" y="213" width="0.0563%" height="15" fill="rgb(232,182,51)" fg:x="388" fg:w="34"/><text x="0.8927%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="0.6990%" y="213" width="0.0149%" height="15" fill="rgb(231,60,39)" fg:x="422" fg:w="9"/><text x="0.9490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="0.7006%" y="197" width="0.0133%" height="15" fill="rgb(208,69,12)" fg:x="423" fg:w="8"/><text x="0.9506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="0.7155%" y="213" width="0.0248%" height="15" fill="rgb(235,93,37)" fg:x="432" fg:w="15"/><text x="0.9655%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.03%)</title><rect x="0.7404%" y="213" width="0.0315%" height="15" fill="rgb(213,116,39)" fg:x="447" fg:w="19"/><text x="0.9904%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 0.06%)</title><rect x="0.7752%" y="213" width="0.0580%" height="15" fill="rgb(222,207,29)" fg:x="468" fg:w="35"/><text x="1.0252%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 0.04%)</title><rect x="0.9358%" y="149" width="0.0447%" height="15" fill="rgb(206,96,30)" fg:x="565" fg:w="27"/><text x="1.1858%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.03%)</title><rect x="0.9474%" y="133" width="0.0331%" height="15" fill="rgb(218,138,4)" fg:x="572" fg:w="20"/><text x="1.1974%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (33 samples, 0.05%)</title><rect x="0.9308%" y="181" width="0.0547%" height="15" fill="rgb(250,191,14)" fg:x="562" fg:w="33"/><text x="1.1808%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.05%)</title><rect x="0.9325%" y="165" width="0.0530%" height="15" fill="rgb(239,60,40)" fg:x="563" fg:w="32"/><text x="1.1825%" y="175.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (95 samples, 0.16%)</title><rect x="0.8331%" y="213" width="0.1573%" height="15" fill="rgb(206,27,48)" fg:x="503" fg:w="95"/><text x="1.0831%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (42 samples, 0.07%)</title><rect x="0.9209%" y="197" width="0.0696%" height="15" fill="rgb(225,35,8)" fg:x="556" fg:w="42"/><text x="1.1709%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (18 samples, 0.03%)</title><rect x="1.0054%" y="213" width="0.0298%" height="15" fill="rgb(250,213,24)" fg:x="607" fg:w="18"/><text x="1.2554%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (74 samples, 0.12%)</title><rect x="8.5665%" y="197" width="0.1226%" height="15" fill="rgb(247,123,22)" fg:x="5172" fg:w="74"/><text x="8.8165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.08%)</title><rect x="8.7371%" y="165" width="0.0762%" height="15" fill="rgb(231,138,38)" fg:x="5275" fg:w="46"/><text x="8.9871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.02%)</title><rect x="8.7901%" y="149" width="0.0232%" height="15" fill="rgb(231,145,46)" fg:x="5307" fg:w="14"/><text x="9.0401%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.13%)</title><rect x="8.6890%" y="197" width="0.1325%" height="15" fill="rgb(251,118,11)" fg:x="5246" fg:w="80"/><text x="8.9390%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (62 samples, 0.10%)</title><rect x="8.7188%" y="181" width="0.1027%" height="15" fill="rgb(217,147,25)" fg:x="5264" fg:w="62"/><text x="8.9688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.01%)</title><rect x="8.8248%" y="197" width="0.0116%" height="15" fill="rgb(247,81,37)" fg:x="5328" fg:w="7"/><text x="9.0748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (34 samples, 0.06%)</title><rect x="8.9126%" y="181" width="0.0563%" height="15" fill="rgb(209,12,38)" fg:x="5381" fg:w="34"/><text x="9.1626%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.14%)</title><rect x="8.8364%" y="197" width="0.1358%" height="15" fill="rgb(227,1,9)" fg:x="5335" fg:w="82"/><text x="9.0864%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="9.0070%" y="165" width="0.0149%" height="15" fill="rgb(248,47,43)" fg:x="5438" fg:w="9"/><text x="9.2570%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 0.05%)</title><rect x="8.9789%" y="197" width="0.0480%" height="15" fill="rgb(221,10,30)" fg:x="5421" fg:w="29"/><text x="9.2289%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="8.9905%" y="181" width="0.0364%" height="15" fill="rgb(210,229,1)" fg:x="5428" fg:w="22"/><text x="9.2405%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.01%)</title><rect x="9.0286%" y="197" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="5451" fg:w="7"/><text x="9.2786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="9.0402%" y="197" width="0.0282%" height="15" fill="rgb(234,67,33)" fg:x="5458" fg:w="17"/><text x="9.2902%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.02%)</title><rect x="9.0683%" y="197" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="5475" fg:w="11"/><text x="9.3183%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.05%)</title><rect x="9.0965%" y="197" width="0.0464%" height="15" fill="rgb(247,138,52)" fg:x="5492" fg:w="28"/><text x="9.3465%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="9.1561%" y="197" width="0.0116%" height="15" fill="rgb(213,79,30)" fg:x="5528" fg:w="7"/><text x="9.4061%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="9.2091%" y="165" width="0.0215%" height="15" fill="rgb(246,177,23)" fg:x="5560" fg:w="13"/><text x="9.4591%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.02%)</title><rect x="9.2141%" y="149" width="0.0166%" height="15" fill="rgb(230,62,27)" fg:x="5563" fg:w="10"/><text x="9.4641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.03%)</title><rect x="9.1992%" y="181" width="0.0331%" height="15" fill="rgb(216,154,8)" fg:x="5554" fg:w="20"/><text x="9.4492%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.03%)</title><rect x="9.2356%" y="181" width="0.0348%" height="15" fill="rgb(244,35,45)" fg:x="5576" fg:w="21"/><text x="9.4856%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (75 samples, 0.12%)</title><rect x="9.1694%" y="197" width="0.1242%" height="15" fill="rgb(251,115,12)" fg:x="5536" fg:w="75"/><text x="9.4194%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.02%)</title><rect x="9.2754%" y="181" width="0.0182%" height="15" fill="rgb(240,54,50)" fg:x="5600" fg:w="11"/><text x="9.5254%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="9.3482%" y="133" width="0.0116%" height="15" fill="rgb(233,84,52)" fg:x="5644" fg:w="7"/><text x="9.5982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="9.3284%" y="165" width="0.0348%" height="15" fill="rgb(207,117,47)" fg:x="5632" fg:w="21"/><text x="9.5784%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.02%)</title><rect x="9.3449%" y="149" width="0.0182%" height="15" fill="rgb(249,43,39)" fg:x="5642" fg:w="11"/><text x="9.5949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.02%)</title><rect x="9.3847%" y="133" width="0.0199%" height="15" fill="rgb(209,38,44)" fg:x="5666" fg:w="12"/><text x="9.6347%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.04%)</title><rect x="9.3731%" y="149" width="0.0364%" height="15" fill="rgb(236,212,23)" fg:x="5659" fg:w="22"/><text x="9.6231%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (67 samples, 0.11%)</title><rect x="9.3035%" y="197" width="0.1110%" height="15" fill="rgb(242,79,21)" fg:x="5617" fg:w="67"/><text x="9.5535%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (54 samples, 0.09%)</title><rect x="9.3251%" y="181" width="0.0894%" height="15" fill="rgb(211,96,35)" fg:x="5630" fg:w="54"/><text x="9.5751%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.05%)</title><rect x="9.3648%" y="165" width="0.0497%" height="15" fill="rgb(253,215,40)" fg:x="5654" fg:w="30"/><text x="9.6148%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="9.4990%" y="133" width="0.0149%" height="15" fill="rgb(211,81,21)" fg:x="5735" fg:w="9"/><text x="9.7490%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="9.4807%" y="165" width="0.0364%" height="15" fill="rgb(208,190,38)" fg:x="5724" fg:w="22"/><text x="9.7307%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="9.4940%" y="149" width="0.0232%" height="15" fill="rgb(235,213,38)" fg:x="5732" fg:w="14"/><text x="9.7440%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.01%)</title><rect x="9.5288%" y="165" width="0.0149%" height="15" fill="rgb(237,122,38)" fg:x="5753" fg:w="9"/><text x="9.7788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="9.6182%" y="133" width="0.0149%" height="15" fill="rgb(244,218,35)" fg:x="5807" fg:w="9"/><text x="9.8682%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="9.6762%" y="117" width="0.0199%" height="15" fill="rgb(240,68,47)" fg:x="5842" fg:w="12"/><text x="9.9262%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="9.7093%" y="85" width="0.0199%" height="15" fill="rgb(210,16,53)" fg:x="5862" fg:w="12"/><text x="9.9593%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.05%)</title><rect x="9.6961%" y="117" width="0.0480%" height="15" fill="rgb(235,124,12)" fg:x="5854" fg:w="29"/><text x="9.9461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.04%)</title><rect x="9.7010%" y="101" width="0.0431%" height="15" fill="rgb(224,169,11)" fg:x="5857" fg:w="26"/><text x="9.9510%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.01%)</title><rect x="9.7292%" y="85" width="0.0149%" height="15" fill="rgb(250,166,2)" fg:x="5874" fg:w="9"/><text x="9.9792%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (69 samples, 0.11%)</title><rect x="9.6331%" y="133" width="0.1143%" height="15" fill="rgb(242,216,29)" fg:x="5816" fg:w="69"/><text x="9.8831%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.02%)</title><rect x="9.7872%" y="117" width="0.0199%" height="15" fill="rgb(230,116,27)" fg:x="5909" fg:w="12"/><text x="10.0372%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="9.8070%" y="117" width="0.0166%" height="15" fill="rgb(228,99,48)" fg:x="5921" fg:w="10"/><text x="10.0570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.01%)</title><rect x="9.8120%" y="101" width="0.0116%" height="15" fill="rgb(253,11,6)" fg:x="5924" fg:w="7"/><text x="10.0620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.02%)</title><rect x="9.8236%" y="117" width="0.0199%" height="15" fill="rgb(247,143,39)" fg:x="5931" fg:w="12"/><text x="10.0736%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (25 samples, 0.04%)</title><rect x="9.8484%" y="117" width="0.0414%" height="15" fill="rgb(236,97,10)" fg:x="5946" fg:w="25"/><text x="10.0984%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="9.9197%" y="69" width="0.0182%" height="15" fill="rgb(233,208,19)" fg:x="5989" fg:w="11"/><text x="10.1697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.06%)</title><rect x="9.8932%" y="117" width="0.0596%" height="15" fill="rgb(216,164,2)" fg:x="5973" fg:w="36"/><text x="10.1432%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (35 samples, 0.06%)</title><rect x="9.8948%" y="101" width="0.0580%" height="15" fill="rgb(220,129,5)" fg:x="5974" fg:w="35"/><text x="10.1448%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (23 samples, 0.04%)</title><rect x="9.9147%" y="85" width="0.0381%" height="15" fill="rgb(242,17,10)" fg:x="5986" fg:w="23"/><text x="10.1647%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="9.9412%" y="69" width="0.0116%" height="15" fill="rgb(242,107,0)" fg:x="6002" fg:w="7"/><text x="10.1912%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="9.9528%" y="117" width="0.0116%" height="15" fill="rgb(251,28,31)" fg:x="6009" fg:w="7"/><text x="10.2028%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="9.9528%" y="101" width="0.0116%" height="15" fill="rgb(233,223,10)" fg:x="6009" fg:w="7"/><text x="10.2028%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="9.9843%" y="101" width="0.0116%" height="15" fill="rgb(215,21,27)" fg:x="6028" fg:w="7"/><text x="10.2343%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (149 samples, 0.25%)</title><rect x="9.7640%" y="133" width="0.2468%" height="15" fill="rgb(232,23,21)" fg:x="5895" fg:w="149"/><text x="10.0140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (28 samples, 0.05%)</title><rect x="9.9644%" y="117" width="0.0464%" height="15" fill="rgb(244,5,23)" fg:x="6016" fg:w="28"/><text x="10.2144%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.01%)</title><rect x="9.9959%" y="101" width="0.0149%" height="15" fill="rgb(226,81,46)" fg:x="6035" fg:w="9"/><text x="10.2459%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (307 samples, 0.51%)</title><rect x="9.5785%" y="149" width="0.5085%" height="15" fill="rgb(247,70,30)" fg:x="5783" fg:w="307"/><text x="9.8285%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="10.0190%" y="133" width="0.0679%" height="15" fill="rgb(212,68,19)" fg:x="6049" fg:w="41"/><text x="10.2690%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.05%)</title><rect x="10.0870%" y="149" width="0.0480%" height="15" fill="rgb(240,187,13)" fg:x="6090" fg:w="29"/><text x="10.3370%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (410 samples, 0.68%)</title><rect x="9.5437%" y="165" width="0.6791%" height="15" fill="rgb(223,113,26)" fg:x="5762" fg:w="410"/><text x="9.7937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.07%)</title><rect x="10.1565%" y="149" width="0.0663%" height="15" fill="rgb(206,192,2)" fg:x="6132" fg:w="40"/><text x="10.4065%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 0.06%)</title><rect x="10.1598%" y="133" width="0.0629%" height="15" fill="rgb(241,108,4)" fg:x="6134" fg:w="38"/><text x="10.4098%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (491 samples, 0.81%)</title><rect x="9.4145%" y="197" width="0.8133%" height="15" fill="rgb(247,173,49)" fg:x="5684" fg:w="491"/><text x="9.6645%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (457 samples, 0.76%)</title><rect x="9.4708%" y="181" width="0.7569%" height="15" fill="rgb(224,114,35)" fg:x="5718" fg:w="457"/><text x="9.7208%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="11.5743%" y="165" width="0.0232%" height="15" fill="rgb(245,159,27)" fg:x="6988" fg:w="14"/><text x="11.8243%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="11.5975%" y="149" width="0.0199%" height="15" fill="rgb(245,172,44)" fg:x="7002" fg:w="12"/><text x="11.8475%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.02%)</title><rect x="11.6008%" y="133" width="0.0166%" height="15" fill="rgb(236,23,11)" fg:x="7004" fg:w="10"/><text x="11.8508%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.04%)</title><rect x="11.5975%" y="165" width="0.0398%" height="15" fill="rgb(205,117,38)" fg:x="7002" fg:w="24"/><text x="11.8475%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="11.6174%" y="149" width="0.0199%" height="15" fill="rgb(237,72,25)" fg:x="7014" fg:w="12"/><text x="11.8674%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.07%)</title><rect x="11.5660%" y="181" width="0.0729%" height="15" fill="rgb(244,70,9)" fg:x="6983" fg:w="44"/><text x="11.8160%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="11.6455%" y="181" width="0.0232%" height="15" fill="rgb(217,125,39)" fg:x="7031" fg:w="14"/><text x="11.8955%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="11.6952%" y="165" width="0.0133%" height="15" fill="rgb(235,36,10)" fg:x="7061" fg:w="8"/><text x="11.9452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (38 samples, 0.06%)</title><rect x="11.6704%" y="181" width="0.0629%" height="15" fill="rgb(251,123,47)" fg:x="7046" fg:w="38"/><text x="11.9204%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="11.7217%" y="165" width="0.0116%" height="15" fill="rgb(221,13,13)" fg:x="7077" fg:w="7"/><text x="11.9717%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (238 samples, 0.39%)</title><rect x="11.7698%" y="181" width="0.3942%" height="15" fill="rgb(238,131,9)" fg:x="7106" fg:w="238"/><text x="12.0198%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (220 samples, 0.36%)</title><rect x="12.3462%" y="165" width="0.3644%" height="15" fill="rgb(211,50,8)" fg:x="7454" fg:w="220"/><text x="12.5962%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (28 samples, 0.05%)</title><rect x="12.7271%" y="165" width="0.0464%" height="15" fill="rgb(245,182,24)" fg:x="7684" fg:w="28"/><text x="12.9771%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (754 samples, 1.25%)</title><rect x="12.7785%" y="165" width="1.2489%" height="15" fill="rgb(242,14,37)" fg:x="7715" fg:w="754"/><text x="13.0285%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (58 samples, 0.10%)</title><rect x="14.0290%" y="165" width="0.0961%" height="15" fill="rgb(246,228,12)" fg:x="8470" fg:w="58"/><text x="14.2790%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (21 samples, 0.03%)</title><rect x="14.1251%" y="165" width="0.0348%" height="15" fill="rgb(213,55,15)" fg:x="8528" fg:w="21"/><text x="14.3751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="14.1913%" y="101" width="0.0182%" height="15" fill="rgb(209,9,3)" fg:x="8568" fg:w="11"/><text x="14.4413%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="14.1665%" y="133" width="0.0447%" height="15" fill="rgb(230,59,30)" fg:x="8553" fg:w="27"/><text x="14.4165%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="14.1880%" y="117" width="0.0232%" height="15" fill="rgb(209,121,21)" fg:x="8566" fg:w="14"/><text x="14.4380%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (29 samples, 0.05%)</title><rect x="14.1665%" y="149" width="0.0480%" height="15" fill="rgb(220,109,13)" fg:x="8553" fg:w="29"/><text x="14.4165%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.02%)</title><rect x="14.2642%" y="85" width="0.0215%" height="15" fill="rgb(232,18,1)" fg:x="8612" fg:w="13"/><text x="14.5142%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.07%)</title><rect x="14.2145%" y="149" width="0.0729%" height="15" fill="rgb(215,41,42)" fg:x="8582" fg:w="44"/><text x="14.4645%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.06%)</title><rect x="14.2261%" y="133" width="0.0613%" height="15" fill="rgb(224,123,36)" fg:x="8589" fg:w="37"/><text x="14.4761%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.05%)</title><rect x="14.2344%" y="117" width="0.0530%" height="15" fill="rgb(240,125,3)" fg:x="8594" fg:w="32"/><text x="14.4844%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (26 samples, 0.04%)</title><rect x="14.2443%" y="101" width="0.0431%" height="15" fill="rgb(205,98,50)" fg:x="8600" fg:w="26"/><text x="14.4943%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (78 samples, 0.13%)</title><rect x="14.1631%" y="165" width="0.1292%" height="15" fill="rgb(205,185,37)" fg:x="8551" fg:w="78"/><text x="14.4131%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (92 samples, 0.15%)</title><rect x="14.2923%" y="165" width="0.1524%" height="15" fill="rgb(238,207,15)" fg:x="8629" fg:w="92"/><text x="14.5423%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1,240 samples, 2.05%)</title><rect x="14.6981%" y="149" width="2.0538%" height="15" fill="rgb(213,199,42)" fg:x="8874" fg:w="1240"/><text x="14.9481%" y="159.50">l..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (209 samples, 0.35%)</title><rect x="16.7602%" y="133" width="0.3462%" height="15" fill="rgb(235,201,11)" fg:x="10119" fg:w="209"/><text x="17.0102%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (213 samples, 0.35%)</title><rect x="16.7602%" y="149" width="0.3528%" height="15" fill="rgb(207,46,11)" fg:x="10119" fg:w="213"/><text x="17.0102%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranchInit (8 samples, 0.01%)</title><rect x="17.1130%" y="149" width="0.0133%" height="15" fill="rgb(241,35,35)" fg:x="10332" fg:w="8"/><text x="17.3630%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (50 samples, 0.08%)</title><rect x="17.1362%" y="149" width="0.0828%" height="15" fill="rgb(243,32,47)" fg:x="10346" fg:w="50"/><text x="17.3862%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (360 samples, 0.60%)</title><rect x="17.7491%" y="133" width="0.5963%" height="15" fill="rgb(247,202,23)" fg:x="10716" fg:w="360"/><text x="17.9991%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (24 samples, 0.04%)</title><rect x="18.3056%" y="117" width="0.0398%" height="15" fill="rgb(219,102,11)" fg:x="11052" fg:w="24"/><text x="18.5556%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (24 samples, 0.04%)</title><rect x="18.3056%" y="101" width="0.0398%" height="15" fill="rgb(243,110,44)" fg:x="11052" fg:w="24"/><text x="18.5556%" y="111.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (780 samples, 1.29%)</title><rect x="17.2240%" y="149" width="1.2919%" height="15" fill="rgb(222,74,54)" fg:x="10399" fg:w="780"/><text x="17.4740%" y="159.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (103 samples, 0.17%)</title><rect x="18.3453%" y="133" width="0.1706%" height="15" fill="rgb(216,99,12)" fg:x="11076" fg:w="103"/><text x="18.5953%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,800 samples, 2.98%)</title><rect x="19.3043%" y="133" width="2.9814%" height="15" fill="rgb(226,22,26)" fg:x="11655" fg:w="1800"/><text x="19.5543%" y="143.50">rus..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.01%)</title><rect x="22.2708%" y="117" width="0.0149%" height="15" fill="rgb(217,163,10)" fg:x="13446" fg:w="9"/><text x="22.5208%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,293 samples, 3.80%)</title><rect x="18.5159%" y="149" width="3.7979%" height="15" fill="rgb(213,25,53)" fg:x="11179" fg:w="2293"/><text x="18.7659%" y="159.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (17 samples, 0.03%)</title><rect x="22.2857%" y="133" width="0.0282%" height="15" fill="rgb(252,105,26)" fg:x="13455" fg:w="17"/><text x="22.5357%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (7 samples, 0.01%)</title><rect x="23.0957%" y="133" width="0.0116%" height="15" fill="rgb(220,39,43)" fg:x="13944" fg:w="7"/><text x="23.3457%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (520 samples, 0.86%)</title><rect x="22.3222%" y="149" width="0.8613%" height="15" fill="rgb(229,68,48)" fg:x="13477" fg:w="520"/><text x="22.5722%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (46 samples, 0.08%)</title><rect x="23.1072%" y="133" width="0.0762%" height="15" fill="rgb(252,8,32)" fg:x="13951" fg:w="46"/><text x="23.3572%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (5,406 samples, 8.95%)</title><rect x="14.4497%" y="165" width="8.9540%" height="15" fill="rgb(223,20,43)" fg:x="8724" fg:w="5406"/><text x="14.6997%" y="175.50">rust_qecp`Per..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (130 samples, 0.22%)</title><rect x="23.1884%" y="149" width="0.2153%" height="15" fill="rgb(229,81,49)" fg:x="14000" fg:w="130"/><text x="23.4384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="23.4418%" y="133" width="0.0116%" height="15" fill="rgb(236,28,36)" fg:x="14153" fg:w="7"/><text x="23.6918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.06%)</title><rect x="23.4104%" y="149" width="0.0596%" height="15" fill="rgb(249,185,26)" fg:x="14134" fg:w="36"/><text x="23.6604%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (17 samples, 0.03%)</title><rect x="23.5064%" y="133" width="0.0282%" height="15" fill="rgb(249,174,33)" fg:x="14192" fg:w="17"/><text x="23.7564%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (43 samples, 0.07%)</title><rect x="23.4766%" y="149" width="0.0712%" height="15" fill="rgb(233,201,37)" fg:x="14174" fg:w="43"/><text x="23.7266%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="23.5362%" y="133" width="0.0116%" height="15" fill="rgb(221,78,26)" fg:x="14210" fg:w="7"/><text x="23.7862%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (107 samples, 0.18%)</title><rect x="23.4037%" y="165" width="0.1772%" height="15" fill="rgb(250,127,30)" fg:x="14130" fg:w="107"/><text x="23.6537%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (8,099 samples, 13.41%)</title><rect x="10.2377%" y="197" width="13.4145%" height="15" fill="rgb(230,49,44)" fg:x="6181" fg:w="8099"/><text x="10.4877%" y="207.50">rust_qecp`rust_qecp:..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (6,930 samples, 11.48%)</title><rect x="12.1739%" y="181" width="11.4783%" height="15" fill="rgb(229,67,23)" fg:x="7350" fg:w="6930"/><text x="12.4239%" y="191.50">rust_qecp`minimum..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (43 samples, 0.07%)</title><rect x="23.5810%" y="165" width="0.0712%" height="15" fill="rgb(249,83,47)" fg:x="14237" fg:w="43"/><text x="23.8310%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="24.1839%" y="149" width="0.0282%" height="15" fill="rgb(215,43,3)" fg:x="14601" fg:w="17"/><text x="24.4339%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="24.1623%" y="181" width="0.0580%" height="15" fill="rgb(238,154,13)" fg:x="14588" fg:w="35"/><text x="24.4123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="24.1789%" y="165" width="0.0414%" height="15" fill="rgb(219,56,2)" fg:x="14598" fg:w="25"/><text x="24.4289%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (355 samples, 0.59%)</title><rect x="23.6522%" y="197" width="0.5880%" height="15" fill="rgb(233,0,4)" fg:x="14280" fg:w="355"/><text x="23.9022%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.02%)</title><rect x="24.2236%" y="181" width="0.0166%" height="15" fill="rgb(235,30,7)" fg:x="14625" fg:w="10"/><text x="24.4736%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="24.2269%" y="165" width="0.0133%" height="15" fill="rgb(250,79,13)" fg:x="14627" fg:w="8"/><text x="24.4769%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM_sparse_correction_with_edge_matchings (13,993 samples, 23.18%)</title><rect x="1.0650%" y="213" width="23.1768%" height="15" fill="rgb(211,146,34)" fg:x="643" fg:w="13993"/><text x="1.3150%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCod..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (161 samples, 0.27%)</title><rect x="24.2418%" y="213" width="0.2667%" height="15" fill="rgb(228,22,38)" fg:x="14636" fg:w="161"/><text x="24.4918%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_MWPM (14,502 samples, 24.02%)</title><rect x="0.4903%" y="229" width="24.0199%" height="15" fill="rgb(235,168,5)" fg:x="296" fg:w="14502"/><text x="0.7403%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCode..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (5,886 samples, 9.75%)</title><rect x="24.5151%" y="229" width="9.7491%" height="15" fill="rgb(221,155,16)" fg:x="14801" fg:w="5886"/><text x="24.7651%" y="239.50">rust_qecp`rust..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.02%)</title><rect x="35.6306%" y="165" width="0.0215%" height="15" fill="rgb(215,215,53)" fg:x="21512" fg:w="13"/><text x="35.8806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (36 samples, 0.06%)</title><rect x="35.6141%" y="197" width="0.0596%" height="15" fill="rgb(223,4,10)" fg:x="21502" fg:w="36"/><text x="35.8641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 0.05%)</title><rect x="35.6190%" y="181" width="0.0547%" height="15" fill="rgb(234,103,6)" fg:x="21505" fg:w="33"/><text x="35.8690%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.02%)</title><rect x="35.6522%" y="165" width="0.0215%" height="15" fill="rgb(227,97,0)" fg:x="21525" fg:w="13"/><text x="35.9022%" y="175.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (41 samples, 0.07%)</title><rect x="35.6091%" y="213" width="0.0679%" height="15" fill="rgb(234,150,53)" fg:x="21499" fg:w="41"/><text x="35.8591%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (1,406 samples, 2.33%)</title><rect x="34.2642%" y="229" width="2.3288%" height="15" fill="rgb(228,201,54)" fg:x="20687" fg:w="1406"/><text x="34.5142%" y="239.50">r..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (553 samples, 0.92%)</title><rect x="35.6770%" y="213" width="0.9159%" height="15" fill="rgb(222,22,37)" fg:x="21540" fg:w="553"/><text x="35.9270%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (17,054 samples, 28.25%)</title><rect x="36.5930%" y="229" width="28.2468%" height="15" fill="rgb(237,53,32)" fg:x="22093" fg:w="17054"/><text x="36.8430%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::..</text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="64.8447%" y="213" width="0.0133%" height="15" fill="rgb(233,25,53)" fg:x="39150" fg:w="8"/><text x="65.0947%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.01%)</title><rect x="64.8944%" y="181" width="0.0116%" height="15" fill="rgb(210,40,34)" fg:x="39180" fg:w="7"/><text x="65.1444%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 0.05%)</title><rect x="64.8580%" y="213" width="0.0547%" height="15" fill="rgb(241,220,44)" fg:x="39158" fg:w="33"/><text x="65.1080%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.04%)</title><rect x="64.8679%" y="197" width="0.0447%" height="15" fill="rgb(235,28,35)" fg:x="39164" fg:w="27"/><text x="65.1179%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (791 samples, 1.31%)</title><rect x="64.9209%" y="213" width="1.3101%" height="15" fill="rgb(210,56,17)" fg:x="39196" fg:w="791"/><text x="65.1709%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.05%)</title><rect x="67.7648%" y="149" width="0.0497%" height="15" fill="rgb(224,130,29)" fg:x="40913" fg:w="30"/><text x="68.0148%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.03%)</title><rect x="67.7797%" y="133" width="0.0348%" height="15" fill="rgb(235,212,8)" fg:x="40922" fg:w="21"/><text x="68.0297%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (42 samples, 0.07%)</title><rect x="67.7598%" y="165" width="0.0696%" height="15" fill="rgb(223,33,50)" fg:x="40910" fg:w="42"/><text x="68.0098%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.01%)</title><rect x="67.8145%" y="149" width="0.0149%" height="15" fill="rgb(219,149,13)" fg:x="40943" fg:w="9"/><text x="68.0645%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (45 samples, 0.07%)</title><rect x="67.7565%" y="181" width="0.0745%" height="15" fill="rgb(250,156,29)" fg:x="40908" fg:w="45"/><text x="68.0065%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (1,810 samples, 3.00%)</title><rect x="64.8398%" y="229" width="2.9979%" height="15" fill="rgb(216,193,19)" fg:x="39147" fg:w="1810"/><text x="65.0898%" y="239.50">rus..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (970 samples, 1.61%)</title><rect x="66.2311%" y="213" width="1.6066%" height="15" fill="rgb(216,135,14)" fg:x="39987" fg:w="970"/><text x="66.4811%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (56 samples, 0.09%)</title><rect x="67.7449%" y="197" width="0.0928%" height="15" fill="rgb(241,47,5)" fg:x="40901" fg:w="56"/><text x="67.9949%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (19,400 samples, 32.13%)</title><rect x="67.8476%" y="229" width="32.1325%" height="15" fill="rgb(233,42,35)" fg:x="40963" fg:w="19400"/><text x="68.0976%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propaga..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (13,972 samples, 23.14%)</title><rect x="76.8381%" y="213" width="23.1420%" height="15" fill="rgb(231,13,6)" fg:x="46391" fg:w="13972"/><text x="77.0881%" y="223.50">rust_qecp`rust_qecp::ftqec::PlanarCod..</text></g><g><title>all (60,375 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="60375"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,313 samples, 99.90%)</title><rect x="0.1027%" y="309" width="99.8973%" height="15" fill="rgb(254,173,49)" fg:x="62" fg:w="60313"/><text x="0.3527%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,313 samples, 99.90%)</title><rect x="0.1027%" y="293" width="99.8973%" height="15" fill="rgb(221,1,38)" fg:x="62" fg:w="60313"/><text x="0.3527%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,313 samples, 99.90%)</title><rect x="0.1027%" y="277" width="99.8973%" height="15" fill="rgb(206,124,46)" fg:x="62" fg:w="60313"/><text x="0.3527%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,313 samples, 99.90%)</title><rect x="0.1027%" y="261" width="99.8973%" height="15" fill="rgb(249,21,11)" fg:x="62" fg:w="60313"/><text x="0.3527%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,295 samples, 99.87%)</title><rect x="0.1325%" y="245" width="99.8675%" height="15" fill="rgb(222,201,40)" fg:x="80" fg:w="60295"/><text x="0.3825%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (12 samples, 0.02%)</title><rect x="99.9801%" y="229" width="0.0199%" height="15" fill="rgb(235,61,29)" fg:x="60363" fg:w="12"/><text x="100.2301%" y="239.50"></text></g></svg></svg>