<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="60303"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (17 samples, 0.03%)</title><rect x="0.0116%" y="53" width="0.0282%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="17"/><text x="0.2616%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (17 samples, 0.03%)</title><rect x="0.0116%" y="37" width="0.0282%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="17"/><text x="0.2616%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (21 samples, 0.03%)</title><rect x="0.0099%" y="69" width="0.0348%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="21"/><text x="0.2599%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_exhausted_path (14 samples, 0.02%)</title><rect x="0.0448%" y="69" width="0.0232%" height="15" fill="rgb(248,212,6)" fg:x="27" fg:w="14"/><text x="0.2948%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::fast_measurement_given_few_errors (10 samples, 0.02%)</title><rect x="0.0779%" y="53" width="0.0166%" height="15" fill="rgb(208,68,35)" fg:x="47" fg:w="10"/><text x="0.3279%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::build_graph_fast_benchmark (17 samples, 0.03%)</title><rect x="0.0680%" y="69" width="0.0282%" height="15" fill="rgb(232,128,0)" fg:x="41" fg:w="17"/><text x="0.3180%" y="79.50"></text></g><g><title>dyld`start (61 samples, 0.10%)</title><rect x="0.0000%" y="309" width="0.1012%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="61"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (60 samples, 0.10%)</title><rect x="0.0017%" y="293" width="0.0995%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="60"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (60 samples, 0.10%)</title><rect x="0.0017%" y="277" width="0.0995%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="60"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (60 samples, 0.10%)</title><rect x="0.0017%" y="261" width="0.0995%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="60"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 0.10%)</title><rect x="0.0017%" y="245" width="0.0995%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="60"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (60 samples, 0.10%)</title><rect x="0.0017%" y="229" width="0.0995%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="60"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (60 samples, 0.10%)</title><rect x="0.0017%" y="213" width="0.0995%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="60"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (60 samples, 0.10%)</title><rect x="0.0017%" y="197" width="0.0995%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="60"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (60 samples, 0.10%)</title><rect x="0.0017%" y="181" width="0.0995%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="60"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (60 samples, 0.10%)</title><rect x="0.0017%" y="165" width="0.0995%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="60"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.10%)</title><rect x="0.0017%" y="149" width="0.0995%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="60"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (60 samples, 0.10%)</title><rect x="0.0017%" y="133" width="0.0995%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="60"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 0.10%)</title><rect x="0.0017%" y="117" width="0.0995%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="60"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (60 samples, 0.10%)</title><rect x="0.0017%" y="101" width="0.0995%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="60"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::fault_tolerant_benchmark (60 samples, 0.10%)</title><rect x="0.0017%" y="85" width="0.0995%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="60"/><text x="0.2517%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (15 samples, 0.02%)</title><rect x="0.1045%" y="229" width="0.0249%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="15"/><text x="0.3545%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="0.1327%" y="229" width="0.0182%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="11"/><text x="0.3827%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="0.1509%" y="229" width="0.0133%" height="15" fill="rgb(247,18,42)" fg:x="91" fg:w="8"/><text x="0.4009%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="0.1758%" y="229" width="0.0216%" height="15" fill="rgb(241,131,45)" fg:x="106" fg:w="13"/><text x="0.4258%" y="239.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.01%)</title><rect x="0.2089%" y="229" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="126" fg:w="8"/><text x="0.4589%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.03%)</title><rect x="0.2587%" y="213" width="0.0282%" height="15" fill="rgb(225,111,53)" fg:x="156" fg:w="17"/><text x="0.5087%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="0.2869%" y="213" width="0.0298%" height="15" fill="rgb(238,160,17)" fg:x="173" fg:w="18"/><text x="0.5369%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.02%)</title><rect x="0.2952%" y="197" width="0.0216%" height="15" fill="rgb(214,148,48)" fg:x="178" fg:w="13"/><text x="0.5452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.02%)</title><rect x="0.2985%" y="181" width="0.0182%" height="15" fill="rgb(232,36,49)" fg:x="180" fg:w="11"/><text x="0.5485%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="0.3035%" y="165" width="0.0133%" height="15" fill="rgb(209,103,24)" fg:x="183" fg:w="8"/><text x="0.5535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.04%)</title><rect x="0.3250%" y="213" width="0.0381%" height="15" fill="rgb(229,88,8)" fg:x="196" fg:w="23"/><text x="0.5750%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.01%)</title><rect x="0.3482%" y="197" width="0.0149%" height="15" fill="rgb(213,181,19)" fg:x="210" fg:w="9"/><text x="0.5982%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="0.3731%" y="213" width="0.0149%" height="15" fill="rgb(254,191,54)" fg:x="225" fg:w="9"/><text x="0.6231%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 0.06%)</title><rect x="0.3897%" y="213" width="0.0580%" height="15" fill="rgb(241,83,37)" fg:x="235" fg:w="35"/><text x="0.6397%" y="223.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (399 samples, 0.66%)</title><rect x="0.4477%" y="213" width="0.6617%" height="15" fill="rgb(233,36,39)" fg:x="270" fg:w="399"/><text x="0.6977%" y="223.50"></text></g><g><title>rust_qecp`&lt;rust_qecp::ftqec::Correction as core::convert::From&lt;&amp;rust_qecp::ftqec::SparseCorrection&gt;&gt;::from (29 samples, 0.05%)</title><rect x="1.1094%" y="213" width="0.0481%" height="15" fill="rgb(226,3,54)" fg:x="669" fg:w="29"/><text x="1.3594%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (9 samples, 0.01%)</title><rect x="1.1426%" y="197" width="0.0149%" height="15" fill="rgb(245,192,40)" fg:x="689" fg:w="9"/><text x="1.3926%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="1.1625%" y="213" width="0.0315%" height="15" fill="rgb(238,167,29)" fg:x="701" fg:w="19"/><text x="1.4125%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="1.1641%" y="197" width="0.0298%" height="15" fill="rgb(232,182,51)" fg:x="702" fg:w="18"/><text x="1.4141%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="1.1774%" y="181" width="0.0166%" height="15" fill="rgb(231,60,39)" fg:x="710" fg:w="10"/><text x="1.4274%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="1.1790%" y="165" width="0.0149%" height="15" fill="rgb(208,69,12)" fg:x="711" fg:w="9"/><text x="1.4290%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.01%)</title><rect x="1.1940%" y="213" width="0.0133%" height="15" fill="rgb(235,93,37)" fg:x="720" fg:w="8"/><text x="1.4440%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (564 samples, 0.94%)</title><rect x="1.2089%" y="213" width="0.9353%" height="15" fill="rgb(213,116,39)" fg:x="729" fg:w="564"/><text x="1.4589%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (63 samples, 0.10%)</title><rect x="2.1442%" y="213" width="0.1045%" height="15" fill="rgb(222,207,29)" fg:x="1293" fg:w="63"/><text x="2.3942%" y="223.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (52 samples, 0.09%)</title><rect x="2.2486%" y="213" width="0.0862%" height="15" fill="rgb(206,96,30)" fg:x="1356" fg:w="52"/><text x="2.4986%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="2.6715%" y="197" width="0.0514%" height="15" fill="rgb(218,138,4)" fg:x="1611" fg:w="31"/><text x="2.9215%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.05%)</title><rect x="2.6732%" y="181" width="0.0497%" height="15" fill="rgb(250,191,14)" fg:x="1612" fg:w="30"/><text x="2.9232%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.05%)</title><rect x="2.6732%" y="165" width="0.0497%" height="15" fill="rgb(239,60,40)" fg:x="1612" fg:w="30"/><text x="2.9232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.04%)</title><rect x="2.6781%" y="149" width="0.0448%" height="15" fill="rgb(206,27,48)" fg:x="1615" fg:w="27"/><text x="2.9281%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.01%)</title><rect x="2.7445%" y="149" width="0.0149%" height="15" fill="rgb(225,35,8)" fg:x="1655" fg:w="9"/><text x="2.9945%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="2.7445%" y="165" width="0.0199%" height="15" fill="rgb(250,213,24)" fg:x="1655" fg:w="12"/><text x="2.9945%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="2.7345%" y="197" width="0.0315%" height="15" fill="rgb(247,123,22)" fg:x="1649" fg:w="19"/><text x="2.9845%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="2.7412%" y="181" width="0.0249%" height="15" fill="rgb(231,138,38)" fg:x="1653" fg:w="15"/><text x="2.9912%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (255 samples, 0.42%)</title><rect x="2.3465%" y="213" width="0.4229%" height="15" fill="rgb(231,145,46)" fg:x="1415" fg:w="255"/><text x="2.5965%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (112 samples, 0.19%)</title><rect x="10.0161%" y="197" width="0.1857%" height="15" fill="rgb(251,118,11)" fg:x="6040" fg:w="112"/><text x="10.2661%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (458 samples, 0.76%)</title><rect x="10.2018%" y="197" width="0.7595%" height="15" fill="rgb(217,147,25)" fg:x="6152" fg:w="458"/><text x="10.4518%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="10.9630%" y="197" width="0.0216%" height="15" fill="rgb(247,81,37)" fg:x="6611" fg:w="13"/><text x="11.2130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (112 samples, 0.19%)</title><rect x="10.9845%" y="197" width="0.1857%" height="15" fill="rgb(209,12,38)" fg:x="6624" fg:w="112"/><text x="11.2345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (180 samples, 0.30%)</title><rect x="11.1703%" y="197" width="0.2985%" height="15" fill="rgb(227,1,9)" fg:x="6736" fg:w="180"/><text x="11.4203%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (40 samples, 0.07%)</title><rect x="11.4687%" y="197" width="0.0663%" height="15" fill="rgb(248,47,43)" fg:x="6916" fg:w="40"/><text x="11.7187%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="11.5202%" y="181" width="0.0149%" height="15" fill="rgb(221,10,30)" fg:x="6947" fg:w="9"/><text x="11.7702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.01%)</title><rect x="11.5351%" y="197" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="6956" fg:w="9"/><text x="11.7851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (104 samples, 0.17%)</title><rect x="11.5500%" y="197" width="0.1725%" height="15" fill="rgb(222,148,37)" fg:x="6965" fg:w="104"/><text x="11.8000%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (67 samples, 0.11%)</title><rect x="11.7225%" y="197" width="0.1111%" height="15" fill="rgb(234,67,33)" fg:x="7069" fg:w="67"/><text x="11.9725%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (22 samples, 0.04%)</title><rect x="11.8369%" y="197" width="0.0365%" height="15" fill="rgb(247,98,35)" fg:x="7138" fg:w="22"/><text x="12.0869%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.01%)</title><rect x="11.8817%" y="197" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="7165" fg:w="7"/><text x="12.1317%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (271 samples, 0.45%)</title><rect x="11.8949%" y="197" width="0.4494%" height="15" fill="rgb(213,79,30)" fg:x="7173" fg:w="271"/><text x="12.1449%" y="207.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.10%)</title><rect x="12.3443%" y="197" width="0.1012%" height="15" fill="rgb(246,177,23)" fg:x="7444" fg:w="61"/><text x="12.5943%" y="207.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (97 samples, 0.16%)</title><rect x="12.4455%" y="197" width="0.1609%" height="15" fill="rgb(230,62,27)" fg:x="7505" fg:w="97"/><text x="12.6955%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,436 samples, 4.04%)</title><rect x="12.6063%" y="197" width="4.0396%" height="15" fill="rgb(216,154,8)" fg:x="7602" fg:w="2436"/><text x="12.8563%" y="207.50">rust..</text></g><g><title>rust_qecp`DYLD-STUB$$free (81 samples, 0.13%)</title><rect x="16.6459%" y="197" width="0.1343%" height="15" fill="rgb(244,35,45)" fg:x="10038" fg:w="81"/><text x="16.8959%" y="207.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (26 samples, 0.04%)</title><rect x="16.7902%" y="197" width="0.0431%" height="15" fill="rgb(251,115,12)" fg:x="10125" fg:w="26"/><text x="17.0402%" y="207.50"></text></g><g><title>rust_qecp`__rdl_alloc (35 samples, 0.06%)</title><rect x="16.8383%" y="197" width="0.0580%" height="15" fill="rgb(240,54,50)" fg:x="10154" fg:w="35"/><text x="17.0883%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="16.9013%" y="181" width="0.0116%" height="15" fill="rgb(233,84,52)" fg:x="10192" fg:w="7"/><text x="17.1513%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (10 samples, 0.02%)</title><rect x="16.8997%" y="197" width="0.0166%" height="15" fill="rgb(207,117,47)" fg:x="10191" fg:w="10"/><text x="17.1497%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.02%)</title><rect x="16.9162%" y="197" width="0.0249%" height="15" fill="rgb(249,43,39)" fg:x="10201" fg:w="15"/><text x="17.1662%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="16.9212%" y="181" width="0.0199%" height="15" fill="rgb(209,38,44)" fg:x="10204" fg:w="12"/><text x="17.1712%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.02%)</title><rect x="16.9245%" y="165" width="0.0166%" height="15" fill="rgb(236,212,23)" fg:x="10206" fg:w="10"/><text x="17.1745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="17.1053%" y="133" width="0.0315%" height="15" fill="rgb(242,79,21)" fg:x="10315" fg:w="19"/><text x="17.3553%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="17.1219%" y="117" width="0.0149%" height="15" fill="rgb(211,96,35)" fg:x="10325" fg:w="9"/><text x="17.3719%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.04%)</title><rect x="17.1003%" y="149" width="0.0381%" height="15" fill="rgb(253,215,40)" fg:x="10312" fg:w="23"/><text x="17.3503%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.06%)</title><rect x="17.0854%" y="165" width="0.0630%" height="15" fill="rgb(211,81,21)" fg:x="10303" fg:w="38"/><text x="17.3354%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (7 samples, 0.01%)</title><rect x="17.1915%" y="149" width="0.0116%" height="15" fill="rgb(208,190,38)" fg:x="10367" fg:w="7"/><text x="17.4415%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="17.2512%" y="133" width="0.0166%" height="15" fill="rgb(235,213,38)" fg:x="10403" fg:w="10"/><text x="17.5012%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="17.2844%" y="117" width="0.0298%" height="15" fill="rgb(237,122,38)" fg:x="10423" fg:w="18"/><text x="17.5344%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="17.3142%" y="117" width="0.0282%" height="15" fill="rgb(244,218,35)" fg:x="10441" fg:w="17"/><text x="17.5642%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="17.3192%" y="101" width="0.0232%" height="15" fill="rgb(240,68,47)" fg:x="10444" fg:w="14"/><text x="17.5692%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="17.3292%" y="85" width="0.0133%" height="15" fill="rgb(210,16,53)" fg:x="10450" fg:w="8"/><text x="17.5792%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="17.3524%" y="117" width="0.0315%" height="15" fill="rgb(235,124,12)" fg:x="10464" fg:w="19"/><text x="17.6024%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="17.3524%" y="101" width="0.0315%" height="15" fill="rgb(224,169,11)" fg:x="10464" fg:w="19"/><text x="17.6024%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="17.3673%" y="85" width="0.0166%" height="15" fill="rgb(250,166,2)" fg:x="10473" fg:w="10"/><text x="17.6173%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (73 samples, 0.12%)</title><rect x="17.2678%" y="133" width="0.1211%" height="15" fill="rgb(242,216,29)" fg:x="10413" fg:w="73"/><text x="17.5178%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.05%)</title><rect x="17.4121%" y="117" width="0.0464%" height="15" fill="rgb(230,116,27)" fg:x="10500" fg:w="28"/><text x="17.6621%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.04%)</title><rect x="17.4585%" y="117" width="0.0398%" height="15" fill="rgb(228,99,48)" fg:x="10528" fg:w="24"/><text x="17.7085%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.04%)</title><rect x="17.4618%" y="101" width="0.0365%" height="15" fill="rgb(253,11,6)" fg:x="10530" fg:w="22"/><text x="17.7118%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (20 samples, 0.03%)</title><rect x="17.5083%" y="117" width="0.0332%" height="15" fill="rgb(247,143,39)" fg:x="10558" fg:w="20"/><text x="17.7583%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (16 samples, 0.03%)</title><rect x="17.5663%" y="69" width="0.0265%" height="15" fill="rgb(236,97,10)" fg:x="10593" fg:w="16"/><text x="17.8163%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="17.5928%" y="69" width="0.0116%" height="15" fill="rgb(233,208,19)" fg:x="10609" fg:w="7"/><text x="17.8428%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (39 samples, 0.06%)</title><rect x="17.5480%" y="101" width="0.0647%" height="15" fill="rgb(216,164,2)" fg:x="10582" fg:w="39"/><text x="17.7980%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (36 samples, 0.06%)</title><rect x="17.5530%" y="85" width="0.0597%" height="15" fill="rgb(220,129,5)" fg:x="10585" fg:w="36"/><text x="17.8030%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.07%)</title><rect x="17.5431%" y="117" width="0.0746%" height="15" fill="rgb(242,17,10)" fg:x="10579" fg:w="45"/><text x="17.7931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="17.6177%" y="117" width="0.0116%" height="15" fill="rgb(242,107,0)" fg:x="10624" fg:w="7"/><text x="17.8677%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (141 samples, 0.23%)</title><rect x="17.3988%" y="133" width="0.2338%" height="15" fill="rgb(251,28,31)" fg:x="10492" fg:w="141"/><text x="17.6488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (345 samples, 0.57%)</title><rect x="17.2031%" y="149" width="0.5721%" height="15" fill="rgb(233,223,10)" fg:x="10374" fg:w="345"/><text x="17.4531%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (82 samples, 0.14%)</title><rect x="17.6393%" y="133" width="0.1360%" height="15" fill="rgb(215,21,27)" fg:x="10637" fg:w="82"/><text x="17.8893%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.01%)</title><rect x="17.7852%" y="149" width="0.0133%" height="15" fill="rgb(232,23,21)" fg:x="10725" fg:w="8"/><text x="18.0352%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (408 samples, 0.68%)</title><rect x="17.1567%" y="165" width="0.6766%" height="15" fill="rgb(244,5,23)" fg:x="10346" fg:w="408"/><text x="17.4067%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.03%)</title><rect x="17.8051%" y="149" width="0.0282%" height="15" fill="rgb(226,81,46)" fg:x="10737" fg:w="17"/><text x="18.0551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="17.8134%" y="133" width="0.0199%" height="15" fill="rgb(247,70,30)" fg:x="10742" fg:w="12"/><text x="18.0634%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (539 samples, 0.89%)</title><rect x="16.9411%" y="197" width="0.8938%" height="15" fill="rgb(212,68,19)" fg:x="10216" fg:w="539"/><text x="17.1911%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (454 samples, 0.75%)</title><rect x="17.0821%" y="181" width="0.7529%" height="15" fill="rgb(240,187,13)" fg:x="10301" fg:w="454"/><text x="17.3321%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="17.8349%" y="197" width="0.0249%" height="15" fill="rgb(223,113,26)" fg:x="10755" fg:w="15"/><text x="18.0849%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (24 samples, 0.04%)</title><rect x="18.0439%" y="181" width="0.0398%" height="15" fill="rgb(206,192,2)" fg:x="10881" fg:w="24"/><text x="18.2939%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (185 samples, 0.31%)</title><rect x="18.6591%" y="165" width="0.3068%" height="15" fill="rgb(241,108,4)" fg:x="11252" fg:w="185"/><text x="18.9091%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (37 samples, 0.06%)</title><rect x="18.9659%" y="165" width="0.0614%" height="15" fill="rgb(247,173,49)" fg:x="11437" fg:w="37"/><text x="19.2159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (54 samples, 0.09%)</title><rect x="19.0272%" y="165" width="0.0895%" height="15" fill="rgb(224,114,35)" fg:x="11474" fg:w="54"/><text x="19.2772%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (110 samples, 0.18%)</title><rect x="19.1168%" y="165" width="0.1824%" height="15" fill="rgb(245,159,27)" fg:x="11528" fg:w="110"/><text x="19.3668%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (72 samples, 0.12%)</title><rect x="19.1798%" y="149" width="0.1194%" height="15" fill="rgb(245,172,44)" fg:x="11566" fg:w="72"/><text x="19.4298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (734 samples, 1.22%)</title><rect x="18.0837%" y="181" width="1.2172%" height="15" fill="rgb(236,23,11)" fg:x="10905" fg:w="734"/><text x="18.3337%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (150 samples, 0.25%)</title><rect x="19.5861%" y="165" width="0.2487%" height="15" fill="rgb(205,117,38)" fg:x="11811" fg:w="150"/><text x="19.8361%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (43 samples, 0.07%)</title><rect x="19.8348%" y="165" width="0.0713%" height="15" fill="rgb(237,72,25)" fg:x="11961" fg:w="43"/><text x="20.0848%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (43 samples, 0.07%)</title><rect x="19.9061%" y="165" width="0.0713%" height="15" fill="rgb(244,70,9)" fg:x="12004" fg:w="43"/><text x="20.1561%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (652 samples, 1.08%)</title><rect x="19.3009%" y="181" width="1.0812%" height="15" fill="rgb(217,125,39)" fg:x="11639" fg:w="652"/><text x="19.5509%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (244 samples, 0.40%)</title><rect x="19.9774%" y="165" width="0.4046%" height="15" fill="rgb(235,36,10)" fg:x="12047" fg:w="244"/><text x="20.2274%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (94 samples, 0.16%)</title><rect x="20.6822%" y="149" width="0.1559%" height="15" fill="rgb(251,123,47)" fg:x="12472" fg:w="94"/><text x="20.9322%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (371 samples, 0.62%)</title><rect x="20.3821%" y="181" width="0.6152%" height="15" fill="rgb(221,13,13)" fg:x="12291" fg:w="371"/><text x="20.6321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (310 samples, 0.51%)</title><rect x="20.4832%" y="165" width="0.5141%" height="15" fill="rgb(238,131,9)" fg:x="12352" fg:w="310"/><text x="20.7332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (96 samples, 0.16%)</title><rect x="20.8381%" y="149" width="0.1592%" height="15" fill="rgb(211,50,8)" fg:x="12566" fg:w="96"/><text x="21.0881%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (48 samples, 0.08%)</title><rect x="20.9973%" y="181" width="0.0796%" height="15" fill="rgb(245,182,24)" fg:x="12662" fg:w="48"/><text x="21.2473%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (92 samples, 0.15%)</title><rect x="21.2925%" y="149" width="0.1526%" height="15" fill="rgb(242,14,37)" fg:x="12840" fg:w="92"/><text x="21.5425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (223 samples, 0.37%)</title><rect x="21.0769%" y="181" width="0.3698%" height="15" fill="rgb(246,228,12)" fg:x="12710" fg:w="223"/><text x="21.3269%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (93 samples, 0.15%)</title><rect x="21.2925%" y="165" width="0.1542%" height="15" fill="rgb(213,55,15)" fg:x="12840" fg:w="93"/><text x="21.5425%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (65 samples, 0.11%)</title><rect x="21.4467%" y="181" width="0.1078%" height="15" fill="rgb(209,9,3)" fg:x="12933" fg:w="65"/><text x="21.6967%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (13 samples, 0.02%)</title><rect x="21.5611%" y="181" width="0.0216%" height="15" fill="rgb(230,59,30)" fg:x="13002" fg:w="13"/><text x="21.8111%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (78 samples, 0.13%)</title><rect x="21.5827%" y="181" width="0.1293%" height="15" fill="rgb(209,121,21)" fg:x="13015" fg:w="78"/><text x="21.8327%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (16 samples, 0.03%)</title><rect x="21.7120%" y="181" width="0.0265%" height="15" fill="rgb(220,109,13)" fg:x="13093" fg:w="16"/><text x="21.9620%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.03%)</title><rect x="21.7386%" y="181" width="0.0332%" height="15" fill="rgb(232,18,1)" fg:x="13109" fg:w="20"/><text x="21.9886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (196 samples, 0.33%)</title><rect x="21.8148%" y="165" width="0.3250%" height="15" fill="rgb(215,41,42)" fg:x="13155" fg:w="196"/><text x="22.0648%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (96 samples, 0.16%)</title><rect x="21.9807%" y="149" width="0.1592%" height="15" fill="rgb(224,123,36)" fg:x="13255" fg:w="96"/><text x="22.2307%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (14 samples, 0.02%)</title><rect x="22.1399%" y="165" width="0.0232%" height="15" fill="rgb(240,125,3)" fg:x="13351" fg:w="14"/><text x="22.3899%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (47 samples, 0.08%)</title><rect x="22.1631%" y="165" width="0.0779%" height="15" fill="rgb(205,98,50)" fg:x="13365" fg:w="47"/><text x="22.4131%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;rust_qecp::union_find_decoder::UnionFindDecoder&lt;(usize,usize,usize)&gt;&gt; (2,658 samples, 4.41%)</title><rect x="17.8615%" y="197" width="4.4077%" height="15" fill="rgb(205,185,37)" fg:x="10771" fg:w="2658"/><text x="18.1115%" y="207.50">rust_..</text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;(usize,(alloc::vec::Vec&lt;usize&gt;,std::collections::hash::set::HashSet&lt;usize&gt;))&gt; (295 samples, 0.49%)</title><rect x="21.7800%" y="181" width="0.4892%" height="15" fill="rgb(238,207,15)" fg:x="13134" fg:w="295"/><text x="22.0300%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="22.2410%" y="165" width="0.0282%" height="15" fill="rgb(213,199,42)" fg:x="13412" fg:w="17"/><text x="22.4910%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (112 samples, 0.19%)</title><rect x="22.2692%" y="197" width="0.1857%" height="15" fill="rgb(235,201,11)" fg:x="13429" fg:w="112"/><text x="22.5192%" y="207.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (62 samples, 0.10%)</title><rect x="22.3521%" y="181" width="0.1028%" height="15" fill="rgb(207,46,11)" fg:x="13479" fg:w="62"/><text x="22.6021%" y="191.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (19 samples, 0.03%)</title><rect x="22.4234%" y="165" width="0.0315%" height="15" fill="rgb(241,35,35)" fg:x="13522" fg:w="19"/><text x="22.6734%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (121 samples, 0.20%)</title><rect x="22.4616%" y="197" width="0.2007%" height="15" fill="rgb(243,32,47)" fg:x="13545" fg:w="121"/><text x="22.7116%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,890 samples, 4.79%)</title><rect x="22.6622%" y="197" width="4.7925%" height="15" fill="rgb(247,202,23)" fg:x="13666" fg:w="2890"/><text x="22.9122%" y="207.50">rust_q..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (308 samples, 0.51%)</title><rect x="27.4547%" y="197" width="0.5108%" height="15" fill="rgb(219,102,11)" fg:x="16556" fg:w="308"/><text x="27.7047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="28.2706%" y="165" width="0.0182%" height="15" fill="rgb(243,110,44)" fg:x="17048" fg:w="11"/><text x="28.5206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.06%)</title><rect x="28.2523%" y="181" width="0.0647%" height="15" fill="rgb(222,74,54)" fg:x="17037" fg:w="39"/><text x="28.5023%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.02%)</title><rect x="28.2954%" y="165" width="0.0216%" height="15" fill="rgb(216,99,12)" fg:x="17063" fg:w="13"/><text x="28.5454%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.02%)</title><rect x="28.2971%" y="149" width="0.0199%" height="15" fill="rgb(226,22,26)" fg:x="17064" fg:w="12"/><text x="28.5471%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (20 samples, 0.03%)</title><rect x="28.3170%" y="181" width="0.0332%" height="15" fill="rgb(217,163,10)" fg:x="17076" fg:w="20"/><text x="28.5670%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="28.3386%" y="165" width="0.0116%" height="15" fill="rgb(213,25,53)" fg:x="17089" fg:w="7"/><text x="28.5886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.02%)</title><rect x="28.3502%" y="181" width="0.0249%" height="15" fill="rgb(252,105,26)" fg:x="17096" fg:w="15"/><text x="28.6002%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="28.3518%" y="165" width="0.0232%" height="15" fill="rgb(220,39,43)" fg:x="17097" fg:w="14"/><text x="28.6018%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.01%)</title><rect x="28.3800%" y="181" width="0.0133%" height="15" fill="rgb(229,68,48)" fg:x="17114" fg:w="8"/><text x="28.6300%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.01%)</title><rect x="28.3966%" y="181" width="0.0133%" height="15" fill="rgb(252,8,32)" fg:x="17124" fg:w="8"/><text x="28.6466%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (187 samples, 0.31%)</title><rect x="28.4198%" y="181" width="0.3101%" height="15" fill="rgb(223,20,43)" fg:x="17138" fg:w="187"/><text x="28.6698%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.01%)</title><rect x="29.3485%" y="133" width="0.0149%" height="15" fill="rgb(229,81,49)" fg:x="17698" fg:w="9"/><text x="29.5985%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="29.3335%" y="149" width="0.0332%" height="15" fill="rgb(236,28,36)" fg:x="17689" fg:w="20"/><text x="29.5835%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="29.4181%" y="101" width="0.0232%" height="15" fill="rgb(249,185,26)" fg:x="17740" fg:w="14"/><text x="29.6681%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (41 samples, 0.07%)</title><rect x="29.3816%" y="133" width="0.0680%" height="15" fill="rgb(249,174,33)" fg:x="17718" fg:w="41"/><text x="29.6316%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (34 samples, 0.06%)</title><rect x="29.3932%" y="117" width="0.0564%" height="15" fill="rgb(233,201,37)" fg:x="17725" fg:w="34"/><text x="29.6432%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (95 samples, 0.16%)</title><rect x="29.3169%" y="165" width="0.1575%" height="15" fill="rgb(221,78,26)" fg:x="17679" fg:w="95"/><text x="29.5669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 0.11%)</title><rect x="29.3684%" y="149" width="0.1061%" height="15" fill="rgb(250,127,30)" fg:x="17710" fg:w="64"/><text x="29.6184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.02%)</title><rect x="29.4496%" y="133" width="0.0249%" height="15" fill="rgb(230,49,44)" fg:x="17759" fg:w="15"/><text x="29.6996%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="29.4562%" y="117" width="0.0182%" height="15" fill="rgb(229,67,23)" fg:x="17763" fg:w="11"/><text x="29.7062%" y="127.50"></text></g><g><title>rust_qecp`&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (83 samples, 0.14%)</title><rect x="29.4811%" y="165" width="0.1376%" height="15" fill="rgb(249,83,47)" fg:x="17778" fg:w="83"/><text x="29.7311%" y="175.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (381 samples, 0.63%)</title><rect x="29.6188%" y="165" width="0.6318%" height="15" fill="rgb(215,43,3)" fg:x="17861" fg:w="381"/><text x="29.8688%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,965 samples, 3.26%)</title><rect x="27.9654%" y="197" width="3.2585%" height="15" fill="rgb(238,154,13)" fg:x="16864" fg:w="1965"/><text x="28.2154%" y="207.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,504 samples, 2.49%)</title><rect x="28.7299%" y="181" width="2.4941%" height="15" fill="rgb(219,56,2)" fg:x="17325" fg:w="1504"/><text x="28.9799%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_hash (587 samples, 0.97%)</title><rect x="30.2506%" y="165" width="0.9734%" height="15" fill="rgb(233,0,4)" fg:x="18242" fg:w="587"/><text x="30.5006%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (25 samples, 0.04%)</title><rect x="31.2240%" y="197" width="0.0415%" height="15" fill="rgb(235,30,7)" fg:x="18829" fg:w="25"/><text x="31.4740%" y="207.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (36 samples, 0.06%)</title><rect x="31.2654%" y="197" width="0.0597%" height="15" fill="rgb(250,79,13)" fg:x="18854" fg:w="36"/><text x="31.5154%" y="207.50"></text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (209 samples, 0.35%)</title><rect x="31.3251%" y="197" width="0.3466%" height="15" fill="rgb(211,146,34)" fg:x="18890" fg:w="209"/><text x="31.5751%" y="207.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4,321 samples, 7.17%)</title><rect x="35.7859%" y="181" width="7.1655%" height="15" fill="rgb(228,22,38)" fg:x="21580" fg:w="4321"/><text x="36.0359%" y="191.50">rust_qecp`..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="42.9680%" y="117" width="0.0182%" height="15" fill="rgb(235,168,5)" fg:x="25911" fg:w="11"/><text x="43.2180%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (7 samples, 0.01%)</title><rect x="43.0062%" y="101" width="0.0116%" height="15" fill="rgb(221,155,16)" fg:x="25934" fg:w="7"/><text x="43.2562%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="43.0194%" y="101" width="0.0149%" height="15" fill="rgb(215,215,53)" fg:x="25942" fg:w="9"/><text x="43.2694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="43.0194%" y="85" width="0.0149%" height="15" fill="rgb(223,4,10)" fg:x="25942" fg:w="9"/><text x="43.2694%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="43.0227%" y="69" width="0.0116%" height="15" fill="rgb(234,103,6)" fg:x="25944" fg:w="7"/><text x="43.2727%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (30 samples, 0.05%)</title><rect x="42.9863%" y="117" width="0.0497%" height="15" fill="rgb(227,97,0)" fg:x="25922" fg:w="30"/><text x="43.2363%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (62 samples, 0.10%)</title><rect x="42.9630%" y="133" width="0.1028%" height="15" fill="rgb(234,150,53)" fg:x="25908" fg:w="62"/><text x="43.2130%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.03%)</title><rect x="43.0360%" y="117" width="0.0298%" height="15" fill="rgb(228,201,54)" fg:x="25952" fg:w="18"/><text x="43.2860%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (76 samples, 0.13%)</title><rect x="42.9547%" y="181" width="0.1260%" height="15" fill="rgb(222,22,37)" fg:x="25903" fg:w="76"/><text x="43.2047%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (74 samples, 0.12%)</title><rect x="42.9581%" y="165" width="0.1227%" height="15" fill="rgb(237,53,32)" fg:x="25905" fg:w="74"/><text x="43.2081%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (72 samples, 0.12%)</title><rect x="42.9614%" y="149" width="0.1194%" height="15" fill="rgb(233,25,53)" fg:x="25907" fg:w="72"/><text x="43.2114%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (2,223 samples, 3.69%)</title><rect x="43.0808%" y="181" width="3.6864%" height="15" fill="rgb(210,40,34)" fg:x="25979" fg:w="2223"/><text x="43.3308%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (106 samples, 0.18%)</title><rect x="46.7672%" y="181" width="0.1758%" height="15" fill="rgb(241,220,44)" fg:x="28202" fg:w="106"/><text x="47.0172%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="47.0458%" y="165" width="0.0116%" height="15" fill="rgb(235,28,35)" fg:x="28370" fg:w="7"/><text x="47.2958%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.02%)</title><rect x="47.0574%" y="165" width="0.0166%" height="15" fill="rgb(210,56,17)" fg:x="28377" fg:w="10"/><text x="47.3074%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (138 samples, 0.23%)</title><rect x="47.0889%" y="165" width="0.2288%" height="15" fill="rgb(224,130,29)" fg:x="28396" fg:w="138"/><text x="47.3389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.02%)</title><rect x="47.6278%" y="117" width="0.0232%" height="15" fill="rgb(235,212,8)" fg:x="28721" fg:w="14"/><text x="47.8778%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (9 samples, 0.01%)</title><rect x="47.6361%" y="101" width="0.0149%" height="15" fill="rgb(223,33,50)" fg:x="28726" fg:w="9"/><text x="47.8861%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="47.6195%" y="149" width="0.0415%" height="15" fill="rgb(219,149,13)" fg:x="28716" fg:w="25"/><text x="47.8695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.04%)</title><rect x="47.6245%" y="133" width="0.0365%" height="15" fill="rgb(250,156,29)" fg:x="28719" fg:w="22"/><text x="47.8745%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (377 samples, 0.63%)</title><rect x="47.6693%" y="149" width="0.6252%" height="15" fill="rgb(216,193,19)" fg:x="28746" fg:w="377"/><text x="47.9193%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,156 samples, 1.92%)</title><rect x="46.9429%" y="181" width="1.9170%" height="15" fill="rgb(216,135,14)" fg:x="28308" fg:w="1156"/><text x="47.1929%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (930 samples, 1.54%)</title><rect x="47.3177%" y="165" width="1.5422%" height="15" fill="rgb(241,47,5)" fg:x="28534" fg:w="930"/><text x="47.5677%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (341 samples, 0.57%)</title><rect x="48.2944%" y="149" width="0.5655%" height="15" fill="rgb(233,42,35)" fg:x="29123" fg:w="341"/><text x="48.5444%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.02%)</title><rect x="53.7917%" y="101" width="0.0182%" height="15" fill="rgb(231,13,6)" fg:x="32438" fg:w="11"/><text x="54.0417%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (9 samples, 0.01%)</title><rect x="53.8282%" y="85" width="0.0149%" height="15" fill="rgb(207,181,40)" fg:x="32460" fg:w="9"/><text x="54.0782%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (22 samples, 0.04%)</title><rect x="53.8116%" y="101" width="0.0365%" height="15" fill="rgb(254,173,49)" fg:x="32450" fg:w="22"/><text x="54.0616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (53 samples, 0.09%)</title><rect x="53.7867%" y="117" width="0.0879%" height="15" fill="rgb(221,1,38)" fg:x="32435" fg:w="53"/><text x="54.0367%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.03%)</title><rect x="53.8481%" y="101" width="0.0265%" height="15" fill="rgb(206,124,46)" fg:x="32472" fg:w="16"/><text x="54.0981%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (59 samples, 0.10%)</title><rect x="53.7817%" y="133" width="0.0978%" height="15" fill="rgb(249,21,11)" fg:x="32432" fg:w="59"/><text x="54.0317%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (72 samples, 0.12%)</title><rect x="53.7618%" y="165" width="0.1194%" height="15" fill="rgb(222,201,40)" fg:x="32420" fg:w="72"/><text x="54.0118%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (64 samples, 0.11%)</title><rect x="53.7751%" y="149" width="0.1061%" height="15" fill="rgb(235,61,29)" fg:x="32428" fg:w="64"/><text x="54.0251%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::iterate_measurement_stabilizers (13,395 samples, 22.21%)</title><rect x="31.6717%" y="197" width="22.2128%" height="15" fill="rgb(219,207,3)" fg:x="19099" fg:w="13395"/><text x="31.9217%" y="207.50">rust_qecp`rust_qecp::ftqec::PlanarC..</text></g><g><title>rust_qecp`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::update_edge (3,030 samples, 5.02%)</title><rect x="48.8599%" y="181" width="5.0246%" height="15" fill="rgb(222,56,46)" fg:x="29464" fg:w="3030"/><text x="49.1099%" y="191.50">rust_q..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="55.9674%" y="85" width="0.0149%" height="15" fill="rgb(239,76,54)" fg:x="33750" fg:w="9"/><text x="56.2174%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (21 samples, 0.03%)</title><rect x="55.9624%" y="101" width="0.0348%" height="15" fill="rgb(231,124,27)" fg:x="33747" fg:w="21"/><text x="56.2124%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.05%)</title><rect x="55.9558%" y="117" width="0.0464%" height="15" fill="rgb(249,195,6)" fg:x="33743" fg:w="28"/><text x="56.2058%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.06%)</title><rect x="55.9491%" y="165" width="0.0580%" height="15" fill="rgb(237,174,47)" fg:x="33739" fg:w="35"/><text x="56.1991%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (32 samples, 0.05%)</title><rect x="55.9541%" y="149" width="0.0531%" height="15" fill="rgb(206,201,31)" fg:x="33742" fg:w="32"/><text x="56.2041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.05%)</title><rect x="55.9558%" y="133" width="0.0514%" height="15" fill="rgb(231,57,52)" fg:x="33743" fg:w="31"/><text x="56.2058%" y="143.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 0.13%)</title><rect x="55.8828%" y="181" width="0.1277%" height="15" fill="rgb(248,177,22)" fg:x="33699" fg:w="77"/><text x="56.1328%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (17 samples, 0.03%)</title><rect x="56.0370%" y="149" width="0.0282%" height="15" fill="rgb(215,211,37)" fg:x="33792" fg:w="17"/><text x="56.2870%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (36 samples, 0.06%)</title><rect x="56.0155%" y="165" width="0.0597%" height="15" fill="rgb(241,128,51)" fg:x="33779" fg:w="36"/><text x="56.2655%" y="175.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (47 samples, 0.08%)</title><rect x="56.0121%" y="181" width="0.0779%" height="15" fill="rgb(227,165,31)" fg:x="33777" fg:w="47"/><text x="56.2621%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="56.0785%" y="165" width="0.0116%" height="15" fill="rgb(228,167,24)" fg:x="33817" fg:w="7"/><text x="56.3285%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (43 samples, 0.07%)</title><rect x="56.0901%" y="165" width="0.0713%" height="15" fill="rgb(228,143,12)" fg:x="33824" fg:w="43"/><text x="56.3401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="56.1614%" y="165" width="0.0199%" height="15" fill="rgb(249,149,8)" fg:x="33867" fg:w="12"/><text x="56.4114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (21 samples, 0.03%)</title><rect x="56.1813%" y="165" width="0.0348%" height="15" fill="rgb(243,35,44)" fg:x="33879" fg:w="21"/><text x="56.4313%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (28 samples, 0.05%)</title><rect x="56.2161%" y="165" width="0.0464%" height="15" fill="rgb(246,89,9)" fg:x="33900" fg:w="28"/><text x="56.4661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="56.2625%" y="165" width="0.0265%" height="15" fill="rgb(233,213,13)" fg:x="33928" fg:w="16"/><text x="56.5125%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="56.2891%" y="165" width="0.0232%" height="15" fill="rgb(233,141,41)" fg:x="33944" fg:w="14"/><text x="56.5391%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.04%)</title><rect x="56.7169%" y="133" width="0.0398%" height="15" fill="rgb(239,167,4)" fg:x="34202" fg:w="24"/><text x="56.9669%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (280 samples, 0.46%)</title><rect x="56.8711%" y="117" width="0.4643%" height="15" fill="rgb(209,217,16)" fg:x="34295" fg:w="280"/><text x="57.1211%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (85 samples, 0.14%)</title><rect x="57.1945%" y="101" width="0.1410%" height="15" fill="rgb(219,88,35)" fg:x="34490" fg:w="85"/><text x="57.4445%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (564 samples, 0.94%)</title><rect x="56.4400%" y="149" width="0.9353%" height="15" fill="rgb(220,193,23)" fg:x="34035" fg:w="564"/><text x="56.6900%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (373 samples, 0.62%)</title><rect x="56.7567%" y="133" width="0.6185%" height="15" fill="rgb(230,90,52)" fg:x="34226" fg:w="373"/><text x="57.0067%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.04%)</title><rect x="57.3355%" y="117" width="0.0398%" height="15" fill="rgb(252,106,19)" fg:x="34575" fg:w="24"/><text x="57.5855%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.05%)</title><rect x="57.3753%" y="149" width="0.0547%" height="15" fill="rgb(206,74,20)" fg:x="34599" fg:w="33"/><text x="57.6253%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (86 samples, 0.14%)</title><rect x="57.6074%" y="133" width="0.1426%" height="15" fill="rgb(230,138,44)" fg:x="34739" fg:w="86"/><text x="57.8574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (194 samples, 0.32%)</title><rect x="57.4300%" y="149" width="0.3217%" height="15" fill="rgb(235,182,43)" fg:x="34632" fg:w="194"/><text x="57.6800%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (62 samples, 0.10%)</title><rect x="57.7616%" y="149" width="0.1028%" height="15" fill="rgb(242,16,51)" fg:x="34832" fg:w="62"/><text x="58.0116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="57.8645%" y="149" width="0.0166%" height="15" fill="rgb(248,9,4)" fg:x="34894" fg:w="10"/><text x="58.1145%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="57.8810%" y="149" width="0.0232%" height="15" fill="rgb(210,31,22)" fg:x="34904" fg:w="14"/><text x="58.1310%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (133 samples, 0.22%)</title><rect x="57.9689%" y="133" width="0.2206%" height="15" fill="rgb(239,54,39)" fg:x="34957" fg:w="133"/><text x="58.2189%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (13 samples, 0.02%)</title><rect x="58.1895%" y="133" width="0.0216%" height="15" fill="rgb(230,99,41)" fg:x="35090" fg:w="13"/><text x="58.4395%" y="143.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (9 samples, 0.01%)</title><rect x="58.2110%" y="133" width="0.0149%" height="15" fill="rgb(253,106,12)" fg:x="35103" fg:w="9"/><text x="58.4610%" y="143.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (72 samples, 0.12%)</title><rect x="58.3056%" y="117" width="0.1194%" height="15" fill="rgb(213,46,41)" fg:x="35160" fg:w="72"/><text x="58.5556%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (104 samples, 0.17%)</title><rect x="58.4250%" y="117" width="0.1725%" height="15" fill="rgb(215,133,35)" fg:x="35232" fg:w="104"/><text x="58.6750%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (234 samples, 0.39%)</title><rect x="58.2343%" y="133" width="0.3880%" height="15" fill="rgb(213,28,5)" fg:x="35117" fg:w="234"/><text x="58.4843%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.02%)</title><rect x="58.5974%" y="117" width="0.0249%" height="15" fill="rgb(215,77,49)" fg:x="35336" fg:w="15"/><text x="58.8474%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (22 samples, 0.04%)</title><rect x="58.6223%" y="133" width="0.0365%" height="15" fill="rgb(248,100,22)" fg:x="35351" fg:w="22"/><text x="58.8723%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="58.9009%" y="101" width="0.0216%" height="15" fill="rgb(208,67,9)" fg:x="35519" fg:w="13"/><text x="59.1509%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (121 samples, 0.20%)</title><rect x="58.9738%" y="85" width="0.2007%" height="15" fill="rgb(219,133,21)" fg:x="35563" fg:w="121"/><text x="59.2238%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.05%)</title><rect x="59.1198%" y="69" width="0.0547%" height="15" fill="rgb(246,46,29)" fg:x="35651" fg:w="33"/><text x="59.3698%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (246 samples, 0.41%)</title><rect x="58.8030%" y="117" width="0.4079%" height="15" fill="rgb(246,185,52)" fg:x="35460" fg:w="246"/><text x="59.0530%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (174 samples, 0.29%)</title><rect x="58.9224%" y="101" width="0.2885%" height="15" fill="rgb(252,136,11)" fg:x="35532" fg:w="174"/><text x="59.1724%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.04%)</title><rect x="59.1745%" y="85" width="0.0365%" height="15" fill="rgb(219,138,53)" fg:x="35684" fg:w="22"/><text x="59.4245%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (23 samples, 0.04%)</title><rect x="59.2110%" y="117" width="0.0381%" height="15" fill="rgb(211,51,23)" fg:x="35706" fg:w="23"/><text x="59.4610%" y="127.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (819 samples, 1.36%)</title><rect x="57.9043%" y="149" width="1.3581%" height="15" fill="rgb(247,221,28)" fg:x="34918" fg:w="819"/><text x="58.1543%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (364 samples, 0.60%)</title><rect x="58.6588%" y="133" width="0.6036%" height="15" fill="rgb(251,222,45)" fg:x="35373" fg:w="364"/><text x="58.9088%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="59.2491%" y="117" width="0.0133%" height="15" fill="rgb(217,162,53)" fg:x="35729" fg:w="8"/><text x="59.4991%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (60 samples, 0.10%)</title><rect x="59.3818%" y="133" width="0.0995%" height="15" fill="rgb(229,93,14)" fg:x="35809" fg:w="60"/><text x="59.6318%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (110 samples, 0.18%)</title><rect x="59.4813%" y="133" width="0.1824%" height="15" fill="rgb(209,67,49)" fg:x="35869" fg:w="110"/><text x="59.7313%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (275 samples, 0.46%)</title><rect x="59.2624%" y="149" width="0.4560%" height="15" fill="rgb(213,87,29)" fg:x="35737" fg:w="275"/><text x="59.5124%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (33 samples, 0.05%)</title><rect x="59.6637%" y="133" width="0.0547%" height="15" fill="rgb(205,151,52)" fg:x="35979" fg:w="33"/><text x="59.9137%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (18 samples, 0.03%)</title><rect x="59.7184%" y="149" width="0.0298%" height="15" fill="rgb(253,215,39)" fg:x="36012" fg:w="18"/><text x="59.9684%" y="159.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,095 samples, 3.47%)</title><rect x="56.3123%" y="165" width="3.4741%" height="15" fill="rgb(221,220,41)" fg:x="33958" fg:w="2095"/><text x="56.5623%" y="175.50">rus..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.04%)</title><rect x="59.7483%" y="149" width="0.0381%" height="15" fill="rgb(218,133,21)" fg:x="36030" fg:w="23"/><text x="59.9983%" y="159.50"></text></g><g><title>rust_qecp`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.01%)</title><rect x="59.7864%" y="165" width="0.0149%" height="15" fill="rgb(221,193,43)" fg:x="36053" fg:w="9"/><text x="60.0364%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (16 samples, 0.03%)</title><rect x="59.8013%" y="165" width="0.0265%" height="15" fill="rgb(240,128,52)" fg:x="36062" fg:w="16"/><text x="60.0513%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (22 samples, 0.04%)</title><rect x="59.8279%" y="165" width="0.0365%" height="15" fill="rgb(253,114,12)" fg:x="36078" fg:w="22"/><text x="60.0779%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (13 samples, 0.02%)</title><rect x="59.8644%" y="165" width="0.0216%" height="15" fill="rgb(215,223,47)" fg:x="36100" fg:w="13"/><text x="60.1144%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.06%)</title><rect x="59.8859%" y="165" width="0.0564%" height="15" fill="rgb(248,225,23)" fg:x="36113" fg:w="34"/><text x="60.1359%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.02%)</title><rect x="59.9423%" y="165" width="0.0199%" height="15" fill="rgb(250,108,0)" fg:x="36147" fg:w="12"/><text x="60.1923%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="59.9456%" y="149" width="0.0166%" height="15" fill="rgb(228,208,7)" fg:x="36149" fg:w="10"/><text x="60.1956%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="59.9473%" y="133" width="0.0149%" height="15" fill="rgb(244,45,10)" fg:x="36150" fg:w="9"/><text x="60.1973%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.01%)</title><rect x="59.9473%" y="117" width="0.0149%" height="15" fill="rgb(207,125,25)" fg:x="36150" fg:w="9"/><text x="60.1973%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,346 samples, 3.89%)</title><rect x="56.0901%" y="181" width="3.8904%" height="15" fill="rgb(210,195,18)" fg:x="33824" fg:w="2346"/><text x="56.3401%" y="191.50">rust..</text></g><g><title>rust_qecp`hashbrown::raw::generic::Group::static_empty (11 samples, 0.02%)</title><rect x="59.9622%" y="165" width="0.0182%" height="15" fill="rgb(249,80,12)" fg:x="36159" fg:w="11"/><text x="60.2122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="59.9904%" y="149" width="0.0216%" height="15" fill="rgb(221,65,9)" fg:x="36176" fg:w="13"/><text x="60.2404%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.02%)</title><rect x="59.9904%" y="133" width="0.0216%" height="15" fill="rgb(235,49,36)" fg:x="36176" fg:w="13"/><text x="60.2404%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="59.9987%" y="117" width="0.0133%" height="15" fill="rgb(225,32,20)" fg:x="36181" fg:w="8"/><text x="60.2487%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.03%)</title><rect x="59.9821%" y="181" width="0.0332%" height="15" fill="rgb(215,141,46)" fg:x="36171" fg:w="20"/><text x="60.2321%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="59.9854%" y="165" width="0.0298%" height="15" fill="rgb(250,160,47)" fg:x="36173" fg:w="18"/><text x="60.2354%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="60.3055%" y="165" width="0.0282%" height="15" fill="rgb(216,222,40)" fg:x="36366" fg:w="17"/><text x="60.5555%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.05%)</title><rect x="60.3353%" y="165" width="0.0481%" height="15" fill="rgb(234,217,39)" fg:x="36384" fg:w="29"/><text x="60.5853%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (21 samples, 0.03%)</title><rect x="60.3834%" y="165" width="0.0348%" height="15" fill="rgb(207,178,40)" fg:x="36413" fg:w="21"/><text x="60.6334%" y="175.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (25 samples, 0.04%)</title><rect x="60.4182%" y="165" width="0.0415%" height="15" fill="rgb(221,136,13)" fg:x="36434" fg:w="25"/><text x="60.6682%" y="175.50"></text></g><g><title>rust_qecp`__rdl_alloc (12 samples, 0.02%)</title><rect x="60.4597%" y="165" width="0.0199%" height="15" fill="rgb(249,199,10)" fg:x="36459" fg:w="12"/><text x="60.7097%" y="175.50"></text></g><g><title>rust_qecp`__rdl_realloc (28 samples, 0.05%)</title><rect x="60.4796%" y="165" width="0.0464%" height="15" fill="rgb(249,222,13)" fg:x="36471" fg:w="28"/><text x="60.7296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (169 samples, 0.28%)</title><rect x="60.8311%" y="117" width="0.2803%" height="15" fill="rgb(244,185,38)" fg:x="36683" fg:w="169"/><text x="61.0811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (67 samples, 0.11%)</title><rect x="61.0003%" y="101" width="0.1111%" height="15" fill="rgb(236,202,9)" fg:x="36785" fg:w="67"/><text x="61.2503%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (336 samples, 0.56%)</title><rect x="60.5907%" y="149" width="0.5572%" height="15" fill="rgb(250,229,37)" fg:x="36538" fg:w="336"/><text x="60.8407%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (236 samples, 0.39%)</title><rect x="60.7565%" y="133" width="0.3914%" height="15" fill="rgb(206,174,23)" fg:x="36638" fg:w="236"/><text x="61.0065%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.04%)</title><rect x="61.1114%" y="117" width="0.0365%" height="15" fill="rgb(211,33,43)" fg:x="36852" fg:w="22"/><text x="61.3614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.05%)</title><rect x="61.1479%" y="149" width="0.0464%" height="15" fill="rgb(245,58,50)" fg:x="36874" fg:w="28"/><text x="61.3979%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.02%)</title><rect x="61.1943%" y="149" width="0.0232%" height="15" fill="rgb(244,68,36)" fg:x="36902" fg:w="14"/><text x="61.4443%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.03%)</title><rect x="61.2242%" y="149" width="0.0282%" height="15" fill="rgb(232,229,15)" fg:x="36920" fg:w="17"/><text x="61.4742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (33 samples, 0.05%)</title><rect x="61.5110%" y="133" width="0.0547%" height="15" fill="rgb(254,30,23)" fg:x="37093" fg:w="33"/><text x="61.7610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (17 samples, 0.03%)</title><rect x="61.7084%" y="117" width="0.0282%" height="15" fill="rgb(235,160,14)" fg:x="37212" fg:w="17"/><text x="61.9584%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (29 samples, 0.05%)</title><rect x="61.7366%" y="117" width="0.0481%" height="15" fill="rgb(212,155,44)" fg:x="37229" fg:w="29"/><text x="61.9866%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (28 samples, 0.05%)</title><rect x="61.7847%" y="117" width="0.0464%" height="15" fill="rgb(226,2,50)" fg:x="37258" fg:w="28"/><text x="62.0347%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (135 samples, 0.22%)</title><rect x="61.8344%" y="117" width="0.2239%" height="15" fill="rgb(234,177,6)" fg:x="37288" fg:w="135"/><text x="62.0844%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (41 samples, 0.07%)</title><rect x="62.3136%" y="101" width="0.0680%" height="15" fill="rgb(217,24,9)" fg:x="37577" fg:w="41"/><text x="62.5636%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (111 samples, 0.18%)</title><rect x="62.3816%" y="101" width="0.1841%" height="15" fill="rgb(220,13,46)" fg:x="37618" fg:w="111"/><text x="62.6316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (87 samples, 0.14%)</title><rect x="62.8808%" y="69" width="0.1443%" height="15" fill="rgb(239,221,27)" fg:x="37919" fg:w="87"/><text x="63.1308%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (258 samples, 0.43%)</title><rect x="62.6121%" y="85" width="0.4278%" height="15" fill="rgb(222,198,25)" fg:x="37757" fg:w="258"/><text x="62.8621%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.01%)</title><rect x="63.0251%" y="69" width="0.0149%" height="15" fill="rgb(211,99,13)" fg:x="38006" fg:w="9"/><text x="63.2751%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (303 samples, 0.50%)</title><rect x="62.5657%" y="101" width="0.5025%" height="15" fill="rgb(232,111,31)" fg:x="37729" fg:w="303"/><text x="62.8157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.03%)</title><rect x="63.0400%" y="85" width="0.0282%" height="15" fill="rgb(245,82,37)" fg:x="38015" fg:w="17"/><text x="63.2900%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (126 samples, 0.21%)</title><rect x="63.0682%" y="101" width="0.2089%" height="15" fill="rgb(227,149,46)" fg:x="38032" fg:w="126"/><text x="63.3182%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="63.3086%" y="85" width="0.0166%" height="15" fill="rgb(218,36,50)" fg:x="38177" fg:w="10"/><text x="63.5586%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (49 samples, 0.08%)</title><rect x="63.4330%" y="69" width="0.0813%" height="15" fill="rgb(226,80,48)" fg:x="38252" fg:w="49"/><text x="63.6830%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (233 samples, 0.39%)</title><rect x="63.2771%" y="101" width="0.3864%" height="15" fill="rgb(238,224,15)" fg:x="38158" fg:w="233"/><text x="63.5271%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (204 samples, 0.34%)</title><rect x="63.3252%" y="85" width="0.3383%" height="15" fill="rgb(241,136,10)" fg:x="38187" fg:w="204"/><text x="63.5752%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (90 samples, 0.15%)</title><rect x="63.5143%" y="69" width="0.1492%" height="15" fill="rgb(208,32,45)" fg:x="38301" fg:w="90"/><text x="63.7643%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (979 samples, 1.62%)</title><rect x="62.0583%" y="117" width="1.6235%" height="15" fill="rgb(207,135,9)" fg:x="37423" fg:w="979"/><text x="62.3083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="63.6635%" y="101" width="0.0182%" height="15" fill="rgb(206,86,44)" fg:x="38391" fg:w="11"/><text x="63.9135%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,366 samples, 2.27%)</title><rect x="61.5658%" y="133" width="2.2652%" height="15" fill="rgb(245,177,15)" fg:x="37126" fg:w="1366"/><text x="61.8158%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (86 samples, 0.14%)</title><rect x="63.6884%" y="117" width="0.1426%" height="15" fill="rgb(206,64,50)" fg:x="38406" fg:w="86"/><text x="63.9384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (129 samples, 0.21%)</title><rect x="63.8310%" y="133" width="0.2139%" height="15" fill="rgb(234,36,40)" fg:x="38492" fg:w="129"/><text x="64.0810%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (36 samples, 0.06%)</title><rect x="64.0449%" y="133" width="0.0597%" height="15" fill="rgb(213,64,8)" fg:x="38621" fg:w="36"/><text x="64.2949%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,722 samples, 2.86%)</title><rect x="61.2523%" y="149" width="2.8556%" height="15" fill="rgb(210,75,36)" fg:x="36937" fg:w="1722"/><text x="61.5023%" y="159.50">li..</text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,470 samples, 4.10%)</title><rect x="60.0153%" y="181" width="4.0960%" height="15" fill="rgb(229,88,21)" fg:x="36191" fg:w="2470"/><text x="60.2653%" y="191.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (2,161 samples, 3.58%)</title><rect x="60.5277%" y="165" width="3.5836%" height="15" fill="rgb(252,204,47)" fg:x="36500" fg:w="2161"/><text x="60.7777%" y="175.50">rust..</text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (61 samples, 0.10%)</title><rect x="64.1112%" y="181" width="0.1012%" height="15" fill="rgb(208,77,27)" fg:x="38661" fg:w="61"/><text x="64.3612%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (58 samples, 0.10%)</title><rect x="64.2141%" y="165" width="0.0962%" height="15" fill="rgb(221,76,26)" fg:x="38723" fg:w="58"/><text x="64.4641%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="64.3102%" y="165" width="0.0199%" height="15" fill="rgb(225,139,18)" fg:x="38781" fg:w="12"/><text x="64.5602%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="64.3102%" y="149" width="0.0199%" height="15" fill="rgb(230,137,11)" fg:x="38781" fg:w="12"/><text x="64.5602%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.02%)</title><rect x="64.3102%" y="133" width="0.0199%" height="15" fill="rgb(212,28,1)" fg:x="38781" fg:w="12"/><text x="64.5602%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.02%)</title><rect x="64.3102%" y="117" width="0.0199%" height="15" fill="rgb(248,164,17)" fg:x="38781" fg:w="12"/><text x="64.5602%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.03%)</title><rect x="64.4545%" y="149" width="0.0265%" height="15" fill="rgb(222,171,42)" fg:x="38868" fg:w="16"/><text x="64.7045%" y="159.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (15 samples, 0.02%)</title><rect x="64.4810%" y="149" width="0.0249%" height="15" fill="rgb(243,84,45)" fg:x="38884" fg:w="15"/><text x="64.7310%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.03%)</title><rect x="64.7298%" y="117" width="0.0282%" height="15" fill="rgb(252,49,23)" fg:x="39034" fg:w="17"/><text x="64.9798%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (17 samples, 0.03%)</title><rect x="64.7580%" y="117" width="0.0282%" height="15" fill="rgb(215,19,7)" fg:x="39051" fg:w="17"/><text x="65.0080%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.02%)</title><rect x="64.8376%" y="101" width="0.0232%" height="15" fill="rgb(238,81,41)" fg:x="39099" fg:w="14"/><text x="65.0876%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="65.0531%" y="85" width="0.0116%" height="15" fill="rgb(210,199,37)" fg:x="39229" fg:w="7"/><text x="65.3031%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (248 samples, 0.41%)</title><rect x="65.1974%" y="69" width="0.4113%" height="15" fill="rgb(244,192,49)" fg:x="39316" fg:w="248"/><text x="65.4474%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (37 samples, 0.06%)</title><rect x="65.6087%" y="69" width="0.0614%" height="15" fill="rgb(226,211,11)" fg:x="39564" fg:w="37"/><text x="65.8587%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (815 samples, 1.35%)</title><rect x="64.6071%" y="133" width="1.3515%" height="15" fill="rgb(236,162,54)" fg:x="38960" fg:w="815"/><text x="64.8571%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (707 samples, 1.17%)</title><rect x="64.7862%" y="117" width="1.1724%" height="15" fill="rgb(220,229,9)" fg:x="39068" fg:w="707"/><text x="65.0362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (662 samples, 1.10%)</title><rect x="64.8608%" y="101" width="1.0978%" height="15" fill="rgb(250,87,22)" fg:x="39113" fg:w="662"/><text x="65.1108%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (539 samples, 0.89%)</title><rect x="65.0648%" y="85" width="0.8938%" height="15" fill="rgb(239,43,17)" fg:x="39236" fg:w="539"/><text x="65.3148%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (174 samples, 0.29%)</title><rect x="65.6700%" y="69" width="0.2885%" height="15" fill="rgb(231,177,25)" fg:x="39601" fg:w="174"/><text x="65.9200%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.04%)</title><rect x="65.9586%" y="133" width="0.0398%" height="15" fill="rgb(219,179,1)" fg:x="39775" fg:w="24"/><text x="66.2086%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.03%)</title><rect x="65.9984%" y="133" width="0.0298%" height="15" fill="rgb(238,219,53)" fg:x="39799" fg:w="18"/><text x="66.2484%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,023 samples, 1.70%)</title><rect x="64.3467%" y="165" width="1.6964%" height="15" fill="rgb(232,167,36)" fg:x="38803" fg:w="1023"/><text x="64.5967%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (917 samples, 1.52%)</title><rect x="64.5225%" y="149" width="1.5207%" height="15" fill="rgb(244,19,51)" fg:x="38909" fg:w="917"/><text x="64.7725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="66.0282%" y="133" width="0.0149%" height="15" fill="rgb(224,6,22)" fg:x="39817" fg:w="9"/><text x="66.2782%" y="143.50"></text></g><g><title>rust_qecp`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,135 samples, 1.88%)</title><rect x="64.2124%" y="181" width="1.8822%" height="15" fill="rgb(224,145,5)" fg:x="38722" fg:w="1135"/><text x="64.4624%" y="191.50">r..</text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (31 samples, 0.05%)</title><rect x="66.0431%" y="165" width="0.0514%" height="15" fill="rgb(234,130,49)" fg:x="39826" fg:w="31"/><text x="66.2931%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (17 samples, 0.03%)</title><rect x="67.3234%" y="149" width="0.0282%" height="15" fill="rgb(254,6,2)" fg:x="40598" fg:w="17"/><text x="67.5734%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (30 samples, 0.05%)</title><rect x="67.7893%" y="133" width="0.0497%" height="15" fill="rgb(208,96,46)" fg:x="40879" fg:w="30"/><text x="68.0393%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::partial_insertion_sort (22 samples, 0.04%)</title><rect x="68.0464%" y="117" width="0.0365%" height="15" fill="rgb(239,3,39)" fg:x="41034" fg:w="22"/><text x="68.2964%" y="127.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (1,242 samples, 2.06%)</title><rect x="66.0946%" y="181" width="2.0596%" height="15" fill="rgb(233,210,1)" fg:x="39857" fg:w="1242"/><text x="66.3446%" y="191.50">r..</text></g><g><title>rust_qecp`core::slice::sort::recurse (889 samples, 1.47%)</title><rect x="66.6799%" y="165" width="1.4742%" height="15" fill="rgb(244,137,37)" fg:x="40210" fg:w="889"/><text x="66.9299%" y="175.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (484 samples, 0.80%)</title><rect x="67.3515%" y="149" width="0.8026%" height="15" fill="rgb(240,136,2)" fg:x="40615" fg:w="484"/><text x="67.6015%" y="159.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (190 samples, 0.32%)</title><rect x="67.8391%" y="133" width="0.3151%" height="15" fill="rgb(239,18,37)" fg:x="40909" fg:w="190"/><text x="68.0891%" y="143.50"></text></g><g><title>rust_qecp`core::slice::sort::recurse (43 samples, 0.07%)</title><rect x="68.0828%" y="117" width="0.0713%" height="15" fill="rgb(218,185,22)" fg:x="41056" fg:w="43"/><text x="68.3328%" y="127.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (602 samples, 1.00%)</title><rect x="68.9103%" y="165" width="0.9983%" height="15" fill="rgb(225,218,4)" fg:x="41555" fg:w="602"/><text x="69.1603%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (1,066 samples, 1.77%)</title><rect x="69.9086%" y="165" width="1.7677%" height="15" fill="rgb(230,182,32)" fg:x="42157" fg:w="1066"/><text x="70.1586%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,558 samples, 4.24%)</title><rect x="68.1542%" y="181" width="4.2419%" height="15" fill="rgb(242,56,43)" fg:x="41099" fg:w="2558"/><text x="68.4042%" y="191.50">rust_..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (434 samples, 0.72%)</title><rect x="71.6764%" y="165" width="0.7197%" height="15" fill="rgb(233,99,24)" fg:x="43223" fg:w="434"/><text x="71.9264%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (23 samples, 0.04%)</title><rect x="72.3961%" y="181" width="0.0381%" height="15" fill="rgb(234,209,42)" fg:x="43657" fg:w="23"/><text x="72.6461%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::new (11,440 samples, 18.97%)</title><rect x="53.8962%" y="197" width="18.9709%" height="15" fill="rgb(227,7,12)" fg:x="32501" fg:w="11440"/><text x="54.1462%" y="207.50">rust_qecp`rust_qecp::union_fin..</text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (261 samples, 0.43%)</title><rect x="72.4342%" y="181" width="0.4328%" height="15" fill="rgb(245,203,43)" fg:x="43680" fg:w="261"/><text x="72.6842%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (287 samples, 0.48%)</title><rect x="77.0277%" y="181" width="0.4759%" height="15" fill="rgb(238,205,33)" fg:x="46450" fg:w="287"/><text x="77.2777%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.04%)</title><rect x="77.6628%" y="165" width="0.0365%" height="15" fill="rgb(231,56,7)" fg:x="46833" fg:w="22"/><text x="77.9128%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (129 samples, 0.21%)</title><rect x="77.7490%" y="149" width="0.2139%" height="15" fill="rgb(244,186,29)" fg:x="46885" fg:w="129"/><text x="77.9990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.06%)</title><rect x="77.9016%" y="133" width="0.0614%" height="15" fill="rgb(234,111,31)" fg:x="46977" fg:w="37"/><text x="78.1516%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (177 samples, 0.29%)</title><rect x="77.6993%" y="165" width="0.2935%" height="15" fill="rgb(241,149,10)" fg:x="46855" fg:w="177"/><text x="77.9493%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="77.9630%" y="149" width="0.0298%" height="15" fill="rgb(249,206,44)" fg:x="47014" fg:w="18"/><text x="78.2130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (304 samples, 0.50%)</title><rect x="77.5036%" y="181" width="0.5041%" height="15" fill="rgb(251,153,30)" fg:x="46737" fg:w="304"/><text x="77.7536%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (23 samples, 0.04%)</title><rect x="78.0077%" y="181" width="0.0381%" height="15" fill="rgb(239,152,38)" fg:x="47041" fg:w="23"/><text x="78.2577%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (154 samples, 0.26%)</title><rect x="78.4720%" y="165" width="0.2554%" height="15" fill="rgb(249,139,47)" fg:x="47321" fg:w="154"/><text x="78.7220%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (443 samples, 0.73%)</title><rect x="78.0459%" y="181" width="0.7346%" height="15" fill="rgb(244,64,35)" fg:x="47064" fg:w="443"/><text x="78.2959%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="78.7424%" y="165" width="0.0381%" height="15" fill="rgb(216,46,15)" fg:x="47484" fg:w="23"/><text x="78.9924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.03%)</title><rect x="78.7490%" y="149" width="0.0315%" height="15" fill="rgb(250,74,19)" fg:x="47488" fg:w="19"/><text x="78.9990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.02%)</title><rect x="78.8286%" y="165" width="0.0182%" height="15" fill="rgb(249,42,33)" fg:x="47536" fg:w="11"/><text x="79.0786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (49 samples, 0.08%)</title><rect x="78.7805%" y="181" width="0.0813%" height="15" fill="rgb(242,149,17)" fg:x="47507" fg:w="49"/><text x="79.0305%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.03%)</title><rect x="78.9331%" y="149" width="0.0282%" height="15" fill="rgb(244,29,21)" fg:x="47599" fg:w="17"/><text x="79.1831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (63 samples, 0.10%)</title><rect x="78.8617%" y="181" width="0.1045%" height="15" fill="rgb(220,130,37)" fg:x="47556" fg:w="63"/><text x="79.1117%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (56 samples, 0.09%)</title><rect x="78.8734%" y="165" width="0.0929%" height="15" fill="rgb(211,67,2)" fg:x="47563" fg:w="56"/><text x="79.1234%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.04%)</title><rect x="78.9662%" y="181" width="0.0398%" height="15" fill="rgb(235,68,52)" fg:x="47619" fg:w="24"/><text x="79.2162%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (123 samples, 0.20%)</title><rect x="79.0060%" y="181" width="0.2040%" height="15" fill="rgb(246,142,3)" fg:x="47643" fg:w="123"/><text x="79.2560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (43 samples, 0.07%)</title><rect x="79.2199%" y="181" width="0.0713%" height="15" fill="rgb(241,25,7)" fg:x="47772" fg:w="43"/><text x="79.4699%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (62 samples, 0.10%)</title><rect x="79.3111%" y="181" width="0.1028%" height="15" fill="rgb(242,119,39)" fg:x="47827" fg:w="62"/><text x="79.5611%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="79.4388%" y="149" width="0.0116%" height="15" fill="rgb(241,98,45)" fg:x="47904" fg:w="7"/><text x="79.6888%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (24 samples, 0.04%)</title><rect x="79.4504%" y="149" width="0.0398%" height="15" fill="rgb(254,28,30)" fg:x="47911" fg:w="24"/><text x="79.7004%" y="159.50"></text></g><g><title>rust_qecp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.07%)</title><rect x="79.4256%" y="165" width="0.0713%" height="15" fill="rgb(241,142,54)" fg:x="47896" fg:w="43"/><text x="79.6756%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.10%)</title><rect x="79.4140%" y="181" width="0.0962%" height="15" fill="rgb(222,85,15)" fg:x="47889" fg:w="58"/><text x="79.6640%" y="191.50"></text></g><g><title>rust_qecp`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="79.5101%" y="181" width="0.0348%" height="15" fill="rgb(210,85,47)" fg:x="47947" fg:w="21"/><text x="79.7601%" y="191.50"></text></g><g><title>rust_qecp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (906 samples, 1.50%)</title><rect x="79.5450%" y="181" width="1.5024%" height="15" fill="rgb(224,206,25)" fg:x="47968" fg:w="906"/><text x="79.7950%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$malloc (12 samples, 0.02%)</title><rect x="81.0557%" y="181" width="0.0199%" height="15" fill="rgb(243,201,19)" fg:x="48879" fg:w="12"/><text x="81.3057%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$memset (14 samples, 0.02%)</title><rect x="81.0756%" y="181" width="0.0232%" height="15" fill="rgb(236,59,4)" fg:x="48891" fg:w="14"/><text x="81.3256%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (7 samples, 0.01%)</title><rect x="81.0988%" y="181" width="0.0116%" height="15" fill="rgb(254,179,45)" fg:x="48905" fg:w="7"/><text x="81.3488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="81.1618%" y="117" width="0.0116%" height="15" fill="rgb(226,14,10)" fg:x="48943" fg:w="7"/><text x="81.4118%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="81.1966%" y="101" width="0.0332%" height="15" fill="rgb(244,27,41)" fg:x="48964" fg:w="20"/><text x="81.4466%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="81.2033%" y="85" width="0.0265%" height="15" fill="rgb(235,35,32)" fg:x="48968" fg:w="16"/><text x="81.4533%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="81.2115%" y="69" width="0.0182%" height="15" fill="rgb(218,68,31)" fg:x="48973" fg:w="11"/><text x="81.4615%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="81.2298%" y="101" width="0.0116%" height="15" fill="rgb(207,120,37)" fg:x="48984" fg:w="7"/><text x="81.4798%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (42 samples, 0.07%)</title><rect x="81.1734%" y="117" width="0.0696%" height="15" fill="rgb(227,98,0)" fg:x="48950" fg:w="42"/><text x="81.4234%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (65 samples, 0.11%)</title><rect x="81.1535%" y="133" width="0.1078%" height="15" fill="rgb(207,7,3)" fg:x="48938" fg:w="65"/><text x="81.4035%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="81.2431%" y="117" width="0.0182%" height="15" fill="rgb(206,98,19)" fg:x="48992" fg:w="11"/><text x="81.4931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (81 samples, 0.13%)</title><rect x="81.1402%" y="149" width="0.1343%" height="15" fill="rgb(217,5,26)" fg:x="48930" fg:w="81"/><text x="81.3902%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="81.2613%" y="133" width="0.0133%" height="15" fill="rgb(235,190,38)" fg:x="49003" fg:w="8"/><text x="81.5113%" y="143.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (100 samples, 0.17%)</title><rect x="81.1104%" y="181" width="0.1658%" height="15" fill="rgb(247,86,24)" fg:x="48912" fg:w="100"/><text x="81.3604%" y="191.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (85 samples, 0.14%)</title><rect x="81.1353%" y="165" width="0.1410%" height="15" fill="rgb(205,101,16)" fg:x="48927" fg:w="85"/><text x="81.3853%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::map::make_hash (1,594 samples, 2.64%)</title><rect x="81.2845%" y="181" width="2.6433%" height="15" fill="rgb(246,168,33)" fg:x="49017" fg:w="1594"/><text x="81.5345%" y="191.50">ru..</text></g><g><title>rust_qecp`hashbrown::map::make_insert_hash (210 samples, 0.35%)</title><rect x="83.9278%" y="181" width="0.3482%" height="15" fill="rgb(231,114,1)" fg:x="50611" fg:w="210"/><text x="84.1778%" y="191.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (56 samples, 0.09%)</title><rect x="84.2761%" y="181" width="0.0929%" height="15" fill="rgb(207,184,53)" fg:x="50821" fg:w="56"/><text x="84.5261%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="84.5298%" y="149" width="0.0199%" height="15" fill="rgb(224,95,51)" fg:x="50974" fg:w="12"/><text x="84.7798%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (136 samples, 0.23%)</title><rect x="84.7188%" y="133" width="0.2255%" height="15" fill="rgb(212,188,45)" fg:x="51088" fg:w="136"/><text x="84.9688%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (70 samples, 0.12%)</title><rect x="84.8283%" y="117" width="0.1161%" height="15" fill="rgb(223,154,38)" fg:x="51154" fg:w="70"/><text x="85.0783%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (246 samples, 0.41%)</title><rect x="84.5497%" y="149" width="0.4079%" height="15" fill="rgb(251,22,52)" fg:x="50986" fg:w="246"/><text x="84.7997%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="84.9444%" y="133" width="0.0133%" height="15" fill="rgb(229,209,22)" fg:x="51224" fg:w="8"/><text x="85.1944%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="84.9908%" y="101" width="0.0133%" height="15" fill="rgb(234,138,34)" fg:x="51252" fg:w="8"/><text x="85.2408%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="84.9742%" y="133" width="0.0398%" height="15" fill="rgb(212,95,11)" fg:x="51242" fg:w="24"/><text x="85.2242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.03%)</title><rect x="84.9842%" y="117" width="0.0298%" height="15" fill="rgb(240,179,47)" fg:x="51248" fg:w="18"/><text x="85.2342%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.02%)</title><rect x="85.0356%" y="117" width="0.0216%" height="15" fill="rgb(240,163,11)" fg:x="51279" fg:w="13"/><text x="85.2856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 0.17%)</title><rect x="84.9576%" y="149" width="0.1675%" height="15" fill="rgb(236,37,12)" fg:x="51232" fg:w="101"/><text x="85.2076%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.11%)</title><rect x="85.0173%" y="133" width="0.1078%" height="15" fill="rgb(232,164,16)" fg:x="51268" fg:w="65"/><text x="85.2673%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.07%)</title><rect x="85.0588%" y="117" width="0.0663%" height="15" fill="rgb(244,205,15)" fg:x="51293" fg:w="40"/><text x="85.3088%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (413 samples, 0.68%)</title><rect x="84.4485%" y="165" width="0.6849%" height="15" fill="rgb(223,117,47)" fg:x="50925" fg:w="413"/><text x="84.6985%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (18 samples, 0.03%)</title><rect x="85.1334%" y="165" width="0.0298%" height="15" fill="rgb(244,107,35)" fg:x="51338" fg:w="18"/><text x="85.3834%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="85.1633%" y="165" width="0.0133%" height="15" fill="rgb(205,140,8)" fg:x="51356" fg:w="8"/><text x="85.4133%" y="175.50"></text></g><g><title>rust_qecp`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (489 samples, 0.81%)</title><rect x="84.3689%" y="181" width="0.8109%" height="15" fill="rgb(228,84,46)" fg:x="50877" fg:w="489"/><text x="84.6189%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::find (15 samples, 0.02%)</title><rect x="85.1798%" y="181" width="0.0249%" height="15" fill="rgb(254,188,9)" fg:x="51366" fg:w="15"/><text x="85.4298%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFind::union (17 samples, 0.03%)</title><rect x="85.2047%" y="181" width="0.0282%" height="15" fill="rgb(206,112,54)" fg:x="51381" fg:w="17"/><text x="85.4547%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::UnionFindDecoder&lt;U&gt;::run_single_iteration_optional_grow (7,459 samples, 12.37%)</title><rect x="72.8670%" y="197" width="12.3692%" height="15" fill="rgb(216,84,49)" fg:x="43941" fg:w="7459"/><text x="73.1170%" y="207.50">rust_qecp`rust_qec..</text></g><g><title>rust_qecp`std::collections::hash::map::RandomState::new::KEYS::__getit (15 samples, 0.02%)</title><rect x="85.2362%" y="197" width="0.0249%" height="15" fill="rgb(214,194,35)" fg:x="51400" fg:w="15"/><text x="85.4862%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind (51,285 samples, 85.05%)</title><rect x="0.2239%" y="229" width="85.0455%" height="15" fill="rgb(249,28,3)" fg:x="135" fg:w="51285"/><text x="0.4739%" y="239.50">rust_qecp`rust_qecp::ftqec::PlanarCodeModel::decode_UnionFind</text></g><g><title>rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement (49,750 samples, 82.50%)</title><rect x="2.7693%" y="213" width="82.5000%" height="15" fill="rgb(222,56,52)" fg:x="1670" fg:w="49750"/><text x="3.0193%" y="223.50">rust_qecp`rust_qecp::union_find_decoder::suboptimal_matching_by_union_find_given_measurement</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_detected_erasures (1,127 samples, 1.87%)</title><rect x="85.2694%" y="229" width="1.8689%" height="15" fill="rgb(245,217,50)" fg:x="51420" fg:w="1127"/><text x="85.5194%" y="239.50">r..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.01%)</title><rect x="87.3854%" y="197" width="0.0133%" height="15" fill="rgb(213,201,24)" fg:x="52696" fg:w="8"/><text x="87.6354%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="87.3854%" y="181" width="0.0133%" height="15" fill="rgb(248,116,28)" fg:x="52696" fg:w="8"/><text x="87.6354%" y="191.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (10 samples, 0.02%)</title><rect x="87.3837%" y="213" width="0.0166%" height="15" fill="rgb(219,72,43)" fg:x="52695" fg:w="10"/><text x="87.6337%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_measurement (252 samples, 0.42%)</title><rect x="87.1383%" y="229" width="0.4179%" height="15" fill="rgb(209,138,14)" fg:x="52547" fg:w="252"/><text x="87.3883%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::is_measurement_error_at (94 samples, 0.16%)</title><rect x="87.4003%" y="213" width="0.1559%" height="15" fill="rgb(222,18,33)" fg:x="52705" fg:w="94"/><text x="87.6503%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::generate_random_errors (3,301 samples, 5.47%)</title><rect x="87.5562%" y="229" width="5.4740%" height="15" fill="rgb(213,199,7)" fg:x="52799" fg:w="3301"/><text x="87.8062%" y="239.50">rust_qe..</text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.02%)</title><rect x="93.0368%" y="213" width="0.0182%" height="15" fill="rgb(250,110,10)" fg:x="56104" fg:w="11"/><text x="93.2868%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="93.0385%" y="197" width="0.0166%" height="15" fill="rgb(248,123,6)" fg:x="56105" fg:w="10"/><text x="93.2885%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::Correction::xor_ndarray3 (165 samples, 0.27%)</title><rect x="93.0551%" y="213" width="0.2736%" height="15" fill="rgb(206,91,31)" fg:x="56115" fg:w="165"/><text x="93.3051%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_boundary_cardinality (378 samples, 0.63%)</title><rect x="93.0302%" y="229" width="0.6268%" height="15" fill="rgb(211,154,13)" fg:x="56100" fg:w="378"/><text x="93.2802%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_data_qubit_error_pattern (198 samples, 0.33%)</title><rect x="93.3287%" y="213" width="0.3283%" height="15" fill="rgb(225,148,7)" fg:x="56280" fg:w="198"/><text x="93.5787%" y="223.50"></text></g><g><title>rust_qecp`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_elem (11 samples, 0.02%)</title><rect x="93.6388%" y="197" width="0.0182%" height="15" fill="rgb(220,160,43)" fg:x="56467" fg:w="11"/><text x="93.8888%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::get_correction_two_nodes (45 samples, 0.07%)</title><rect x="93.6570%" y="229" width="0.0746%" height="15" fill="rgb(213,52,39)" fg:x="56478" fg:w="45"/><text x="93.9070%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error (3,776 samples, 6.26%)</title><rect x="93.7317%" y="229" width="6.2617%" height="15" fill="rgb(243,137,7)" fg:x="56523" fg:w="3776"/><text x="93.9817%" y="239.50">rust_qec..</text></g><g><title>rust_qecp`rust_qecp::ftqec::PlanarCodeModel::propagate_error_at (2,751 samples, 4.56%)</title><rect x="95.4314%" y="213" width="4.5620%" height="15" fill="rgb(230,79,13)" fg:x="57548" fg:w="2751"/><text x="95.6814%" y="223.50">rust_..</text></g><g><title>all (60,303 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(247,105,23)" fg:x="0" fg:w="60303"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (60,242 samples, 99.90%)</title><rect x="0.1012%" y="309" width="99.8988%" height="15" fill="rgb(223,179,41)" fg:x="61" fg:w="60242"/><text x="0.3512%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (60,242 samples, 99.90%)</title><rect x="0.1012%" y="293" width="99.8988%" height="15" fill="rgb(218,9,34)" fg:x="61" fg:w="60242"/><text x="0.3512%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (60,242 samples, 99.90%)</title><rect x="0.1012%" y="277" width="99.8988%" height="15" fill="rgb(222,106,8)" fg:x="61" fg:w="60242"/><text x="0.3512%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (60,242 samples, 99.90%)</title><rect x="0.1012%" y="261" width="99.8988%" height="15" fill="rgb(211,220,0)" fg:x="61" fg:w="60242"/><text x="0.3512%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (60,241 samples, 99.90%)</title><rect x="0.1028%" y="245" width="99.8972%" height="15" fill="rgb(229,52,16)" fg:x="62" fg:w="60241"/><text x="0.3528%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>