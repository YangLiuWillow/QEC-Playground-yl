<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="65825"><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="0.0182%" y="85" width="0.0152%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="10"/><text x="0.2682%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="0.0182%" y="69" width="0.0152%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="10"/><text x="0.2682%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.07%)</title><rect x="0.0137%" y="101" width="0.0699%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="46"/><text x="0.2637%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (32 samples, 0.05%)</title><rect x="0.0349%" y="85" width="0.0486%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="32"/><text x="0.2849%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.03%)</title><rect x="0.0577%" y="69" width="0.0258%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="17"/><text x="0.3077%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.03%)</title><rect x="0.0577%" y="53" width="0.0258%" height="15" fill="rgb(232,128,0)" fg:x="38" fg:w="17"/><text x="0.3077%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.09%)</title><rect x="0.0106%" y="149" width="0.0851%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="56"/><text x="0.2606%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt; (55 samples, 0.08%)</title><rect x="0.0122%" y="133" width="0.0836%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="55"/><text x="0.2622%" y="143.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (54 samples, 0.08%)</title><rect x="0.0137%" y="117" width="0.0820%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="54"/><text x="0.2637%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (8 samples, 0.01%)</title><rect x="0.0836%" y="101" width="0.0122%" height="15" fill="rgb(220,122,19)" fg:x="55" fg:w="8"/><text x="0.3336%" y="111.50"></text></g><g><title>rust_qecp`alloc::fmt::format (7 samples, 0.01%)</title><rect x="0.0957%" y="149" width="0.0106%" height="15" fill="rgb(250,228,42)" fg:x="63" fg:w="7"/><text x="0.3457%" y="159.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="0.1261%" y="53" width="0.0197%" height="15" fill="rgb(240,193,28)" fg:x="83" fg:w="13"/><text x="0.3761%" y="63.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="0.1246%" y="85" width="0.0228%" height="15" fill="rgb(216,20,37)" fg:x="82" fg:w="15"/><text x="0.3746%" y="95.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.02%)</title><rect x="0.1261%" y="69" width="0.0213%" height="15" fill="rgb(206,188,39)" fg:x="83" fg:w="14"/><text x="0.3761%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.04%)</title><rect x="0.1185%" y="101" width="0.0365%" height="15" fill="rgb(217,207,13)" fg:x="78" fg:w="24"/><text x="0.3685%" y="111.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (27 samples, 0.04%)</title><rect x="0.1155%" y="133" width="0.0410%" height="15" fill="rgb(231,73,38)" fg:x="76" fg:w="27"/><text x="0.3655%" y="143.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt; (27 samples, 0.04%)</title><rect x="0.1155%" y="117" width="0.0410%" height="15" fill="rgb(225,20,46)" fg:x="76" fg:w="27"/><text x="0.3655%" y="127.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (28 samples, 0.04%)</title><rect x="0.1155%" y="149" width="0.0425%" height="15" fill="rgb(210,31,41)" fg:x="76" fg:w="28"/><text x="0.3655%" y="159.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (7 samples, 0.01%)</title><rect x="0.1595%" y="149" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="105" fg:w="7"/><text x="0.4095%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (46 samples, 0.07%)</title><rect x="0.1823%" y="133" width="0.0699%" height="15" fill="rgb(226,26,5)" fg:x="120" fg:w="46"/><text x="0.4323%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (190 samples, 0.29%)</title><rect x="0.2537%" y="133" width="0.2886%" height="15" fill="rgb(249,33,26)" fg:x="167" fg:w="190"/><text x="0.5037%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (8 samples, 0.01%)</title><rect x="0.5423%" y="133" width="0.0122%" height="15" fill="rgb(235,183,28)" fg:x="357" fg:w="8"/><text x="0.7923%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (7 samples, 0.01%)</title><rect x="0.5560%" y="133" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="366" fg:w="7"/><text x="0.8060%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (8 samples, 0.01%)</title><rect x="0.5667%" y="133" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="373" fg:w="8"/><text x="0.8167%" y="143.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (254 samples, 0.39%)</title><rect x="2.0144%" y="117" width="0.3859%" height="15" fill="rgb(241,131,45)" fg:x="1326" fg:w="254"/><text x="2.2644%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.04%)</title><rect x="2.5796%" y="85" width="0.0441%" height="15" fill="rgb(249,31,29)" fg:x="1698" fg:w="29"/><text x="2.8296%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (59 samples, 0.09%)</title><rect x="2.5780%" y="101" width="0.0896%" height="15" fill="rgb(225,111,53)" fg:x="1697" fg:w="59"/><text x="2.8280%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (28 samples, 0.04%)</title><rect x="2.6251%" y="85" width="0.0425%" height="15" fill="rgb(238,160,17)" fg:x="1728" fg:w="28"/><text x="2.8751%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (182 samples, 0.28%)</title><rect x="2.4003%" y="117" width="0.2765%" height="15" fill="rgb(214,148,48)" fg:x="1580" fg:w="182"/><text x="2.6503%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (92 samples, 0.14%)</title><rect x="2.6798%" y="117" width="0.1398%" height="15" fill="rgb(232,36,49)" fg:x="1764" fg:w="92"/><text x="2.9298%" y="127.50"></text></g><g><title>rust_qecp`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (771 samples, 1.17%)</title><rect x="2.8196%" y="117" width="1.1713%" height="15" fill="rgb(209,103,24)" fg:x="1856" fg:w="771"/><text x="3.0696%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (72 samples, 0.11%)</title><rect x="3.9909%" y="117" width="0.1094%" height="15" fill="rgb(229,88,8)" fg:x="2627" fg:w="72"/><text x="4.2409%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (325 samples, 0.49%)</title><rect x="4.1003%" y="117" width="0.4937%" height="15" fill="rgb(213,181,19)" fg:x="2699" fg:w="325"/><text x="4.3503%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1,667 samples, 2.53%)</title><rect x="4.5940%" y="117" width="2.5325%" height="15" fill="rgb(254,191,54)" fg:x="3024" fg:w="1667"/><text x="4.8440%" y="127.50">ru..</text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (40 samples, 0.06%)</title><rect x="7.1265%" y="117" width="0.0608%" height="15" fill="rgb(241,83,37)" fg:x="4691" fg:w="40"/><text x="7.3765%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="7.1872%" y="117" width="0.0106%" height="15" fill="rgb(233,36,39)" fg:x="4731" fg:w="7"/><text x="7.4372%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (16 samples, 0.02%)</title><rect x="7.2009%" y="117" width="0.0243%" height="15" fill="rgb(226,3,54)" fg:x="4740" fg:w="16"/><text x="7.4509%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (420 samples, 0.64%)</title><rect x="7.2252%" y="117" width="0.6381%" height="15" fill="rgb(245,192,40)" fg:x="4756" fg:w="420"/><text x="7.4752%" y="127.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (12 samples, 0.02%)</title><rect x="7.9119%" y="101" width="0.0182%" height="15" fill="rgb(238,167,29)" fg:x="5208" fg:w="12"/><text x="8.1619%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="7.9301%" y="101" width="0.0137%" height="15" fill="rgb(232,182,51)" fg:x="5220" fg:w="9"/><text x="8.1801%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="7.9301%" y="85" width="0.0137%" height="15" fill="rgb(231,60,39)" fg:x="5220" fg:w="9"/><text x="8.1801%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.01%)</title><rect x="7.9332%" y="69" width="0.0106%" height="15" fill="rgb(208,69,12)" fg:x="5222" fg:w="7"/><text x="8.1832%" y="79.50"></text></g><g><title>rust_qecp`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (51 samples, 0.08%)</title><rect x="7.9438%" y="101" width="0.0775%" height="15" fill="rgb(235,93,37)" fg:x="5229" fg:w="51"/><text x="8.1938%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (7 samples, 0.01%)</title><rect x="8.0213%" y="101" width="0.0106%" height="15" fill="rgb(213,116,39)" fg:x="5280" fg:w="7"/><text x="8.2713%" y="111.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (28 samples, 0.04%)</title><rect x="8.0319%" y="101" width="0.0425%" height="15" fill="rgb(222,207,29)" fg:x="5287" fg:w="28"/><text x="8.2819%" y="111.50"></text></g><g><title>rust_qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (45 samples, 0.07%)</title><rect x="8.0744%" y="101" width="0.0684%" height="15" fill="rgb(206,96,30)" fg:x="5315" fg:w="45"/><text x="8.3244%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (30 samples, 0.05%)</title><rect x="8.0972%" y="85" width="0.0456%" height="15" fill="rgb(218,138,4)" fg:x="5330" fg:w="30"/><text x="8.3472%" y="95.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.01%)</title><rect x="8.1322%" y="69" width="0.0106%" height="15" fill="rgb(250,191,14)" fg:x="5353" fg:w="7"/><text x="8.3822%" y="79.50"></text></g><g><title>rust_qecp`indexmap::map::core::raw::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (19 samples, 0.03%)</title><rect x="8.1428%" y="101" width="0.0289%" height="15" fill="rgb(239,60,40)" fg:x="5360" fg:w="19"/><text x="8.3928%" y="111.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (32 samples, 0.05%)</title><rect x="8.1717%" y="101" width="0.0486%" height="15" fill="rgb(206,27,48)" fg:x="5379" fg:w="32"/><text x="8.4217%" y="111.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (236 samples, 0.36%)</title><rect x="7.8633%" y="117" width="0.3585%" height="15" fill="rgb(225,35,8)" fg:x="5176" fg:w="236"/><text x="8.1133%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::left (34 samples, 0.05%)</title><rect x="8.2218%" y="117" width="0.0517%" height="15" fill="rgb(250,213,24)" fg:x="5412" fg:w="34"/><text x="8.4718%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::right (22 samples, 0.03%)</title><rect x="8.2735%" y="117" width="0.0334%" height="15" fill="rgb(247,123,22)" fg:x="5446" fg:w="22"/><text x="8.5235%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (5,111 samples, 7.76%)</title><rect x="0.5788%" y="133" width="7.7645%" height="15" fill="rgb(231,138,38)" fg:x="381" fg:w="5111"/><text x="0.8288%" y="143.50">rust_qecp`r..</text></g><g><title>rust_qecp`priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (24 samples, 0.04%)</title><rect x="8.3069%" y="117" width="0.0365%" height="15" fill="rgb(231,145,46)" fg:x="5468" fg:w="24"/><text x="8.5569%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.02%)</title><rect x="8.3798%" y="117" width="0.0152%" height="15" fill="rgb(251,118,11)" fg:x="5516" fg:w="10"/><text x="8.6298%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::add_edge_between (8 samples, 0.01%)</title><rect x="8.4087%" y="117" width="0.0122%" height="15" fill="rgb(217,147,25)" fg:x="5535" fg:w="8"/><text x="8.6587%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.01%)</title><rect x="8.6791%" y="101" width="0.0137%" height="15" fill="rgb(247,81,37)" fg:x="5713" fg:w="9"/><text x="8.9291%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="8.7110%" y="85" width="0.0106%" height="15" fill="rgb(209,12,38)" fg:x="5734" fg:w="7"/><text x="8.9610%" y="95.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (15 samples, 0.02%)</title><rect x="8.7049%" y="101" width="0.0228%" height="15" fill="rgb(227,1,9)" fg:x="5730" fg:w="15"/><text x="8.9549%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="8.7277%" y="101" width="0.0106%" height="15" fill="rgb(248,47,43)" fg:x="5745" fg:w="7"/><text x="8.9777%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.01%)</title><rect x="8.7535%" y="37" width="0.0106%" height="15" fill="rgb(221,10,30)" fg:x="5762" fg:w="7"/><text x="9.0035%" y="47.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.02%)</title><rect x="8.7414%" y="101" width="0.0243%" height="15" fill="rgb(210,229,1)" fg:x="5754" fg:w="16"/><text x="8.9914%" y="111.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="8.7444%" y="85" width="0.0213%" height="15" fill="rgb(222,148,37)" fg:x="5756" fg:w="14"/><text x="8.9944%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.02%)</title><rect x="8.7474%" y="69" width="0.0182%" height="15" fill="rgb(234,67,33)" fg:x="5758" fg:w="12"/><text x="8.9974%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.01%)</title><rect x="8.7520%" y="53" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="5761" fg:w="9"/><text x="9.0020%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (284 samples, 0.43%)</title><rect x="8.4208%" y="117" width="0.4314%" height="15" fill="rgb(247,138,52)" fg:x="5543" fg:w="284"/><text x="8.6708%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (57 samples, 0.09%)</title><rect x="8.7657%" y="101" width="0.0866%" height="15" fill="rgb(213,79,30)" fg:x="5770" fg:w="57"/><text x="9.0157%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::new (5,726 samples, 8.70%)</title><rect x="0.1732%" y="149" width="8.6988%" height="15" fill="rgb(246,177,23)" fg:x="114" fg:w="5726"/><text x="0.4232%" y="159.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (348 samples, 0.53%)</title><rect x="8.3433%" y="133" width="0.5287%" height="15" fill="rgb(230,62,27)" fg:x="5492" fg:w="348"/><text x="8.5933%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (11 samples, 0.02%)</title><rect x="8.8553%" y="117" width="0.0167%" height="15" fill="rgb(216,154,8)" fg:x="5829" fg:w="11"/><text x="9.1053%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="8.8599%" y="101" width="0.0122%" height="15" fill="rgb(244,35,45)" fg:x="5832" fg:w="8"/><text x="9.1099%" y="111.50"></text></g><g><title>dyld`start (5,845 samples, 8.88%)</title><rect x="0.0000%" y="389" width="8.8796%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="5845"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>rust_qecp`main (5,842 samples, 8.88%)</title><rect x="0.0046%" y="373" width="8.8750%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="383.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (5,842 samples, 8.88%)</title><rect x="0.0046%" y="357" width="8.8750%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="367.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (5,842 samples, 8.88%)</title><rect x="0.0046%" y="341" width="8.8750%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="351.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (5,842 samples, 8.88%)</title><rect x="0.0046%" y="325" width="8.8750%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="335.50">rust_qecp`std..</text></g><g><title>rust_qecp`rust_qecp::main (5,842 samples, 8.88%)</title><rect x="0.0046%" y="309" width="8.8750%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="319.50">rust_qecp`rus..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (5,842 samples, 8.88%)</title><rect x="0.0046%" y="293" width="8.8750%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="303.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (5,842 samples, 8.88%)</title><rect x="0.0046%" y="277" width="8.8750%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="287.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,842 samples, 8.88%)</title><rect x="0.0046%" y="261" width="8.8750%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="271.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (5,842 samples, 8.88%)</title><rect x="0.0046%" y="245" width="8.8750%" height="15" fill="rgb(253,215,40)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="255.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,842 samples, 8.88%)</title><rect x="0.0046%" y="229" width="8.8750%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="239.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,842 samples, 8.88%)</title><rect x="0.0046%" y="213" width="8.8750%" height="15" fill="rgb(208,190,38)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="223.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,842 samples, 8.88%)</title><rect x="0.0046%" y="197" width="8.8750%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="207.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (5,842 samples, 8.88%)</title><rect x="0.0046%" y="181" width="8.8750%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="5842"/><text x="0.2546%" y="191.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (5,841 samples, 8.87%)</title><rect x="0.0061%" y="165" width="8.8735%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="5841"/><text x="0.2561%" y="175.50">rust_qecp`rus..</text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="8.8872%" y="277" width="0.0152%" height="15" fill="rgb(240,68,47)" fg:x="5850" fg:w="10"/><text x="9.1372%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.02%)</title><rect x="8.8872%" y="261" width="0.0152%" height="15" fill="rgb(210,16,53)" fg:x="5850" fg:w="10"/><text x="9.1372%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="8.8842%" y="309" width="0.0197%" height="15" fill="rgb(235,124,12)" fg:x="5848" fg:w="13"/><text x="9.1342%" y="319.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (12 samples, 0.02%)</title><rect x="8.8857%" y="293" width="0.0182%" height="15" fill="rgb(224,169,11)" fg:x="5849" fg:w="12"/><text x="9.1357%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.02%)</title><rect x="9.5177%" y="293" width="0.0152%" height="15" fill="rgb(250,166,2)" fg:x="6265" fg:w="10"/><text x="9.7677%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.02%)</title><rect x="9.5329%" y="293" width="0.0213%" height="15" fill="rgb(242,216,29)" fg:x="6275" fg:w="14"/><text x="9.7829%" y="303.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.01%)</title><rect x="9.5617%" y="293" width="0.0106%" height="15" fill="rgb(230,116,27)" fg:x="6294" fg:w="7"/><text x="9.8117%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.03%)</title><rect x="9.5754%" y="293" width="0.0273%" height="15" fill="rgb(228,99,48)" fg:x="6303" fg:w="18"/><text x="9.8254%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="9.5799%" y="277" width="0.0228%" height="15" fill="rgb(253,11,6)" fg:x="6306" fg:w="15"/><text x="9.8299%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.02%)</title><rect x="9.5799%" y="261" width="0.0228%" height="15" fill="rgb(247,143,39)" fg:x="6306" fg:w="15"/><text x="9.8299%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.02%)</title><rect x="9.5799%" y="245" width="0.0228%" height="15" fill="rgb(236,97,10)" fg:x="6306" fg:w="15"/><text x="9.8299%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.01%)</title><rect x="9.5891%" y="229" width="0.0137%" height="15" fill="rgb(233,208,19)" fg:x="6312" fg:w="9"/><text x="9.8391%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (131 samples, 0.20%)</title><rect x="10.7102%" y="277" width="0.1990%" height="15" fill="rgb(216,164,2)" fg:x="7050" fg:w="131"/><text x="10.9602%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (131 samples, 0.20%)</title><rect x="10.7102%" y="261" width="0.1990%" height="15" fill="rgb(220,129,5)" fg:x="7050" fg:w="131"/><text x="10.9602%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (247 samples, 0.38%)</title><rect x="10.9092%" y="277" width="0.3752%" height="15" fill="rgb(242,17,10)" fg:x="7181" fg:w="247"/><text x="11.1592%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (593 samples, 0.90%)</title><rect x="11.4075%" y="261" width="0.9009%" height="15" fill="rgb(242,107,0)" fg:x="7509" fg:w="593"/><text x="11.6575%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (10 samples, 0.02%)</title><rect x="12.3084%" y="261" width="0.0152%" height="15" fill="rgb(251,28,31)" fg:x="8102" fg:w="10"/><text x="12.5584%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (318 samples, 0.48%)</title><rect x="12.3266%" y="261" width="0.4831%" height="15" fill="rgb(233,223,10)" fg:x="8114" fg:w="318"/><text x="12.5766%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (208 samples, 0.32%)</title><rect x="13.0270%" y="245" width="0.3160%" height="15" fill="rgb(215,21,27)" fg:x="8575" fg:w="208"/><text x="13.2770%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (268 samples, 0.41%)</title><rect x="13.3445%" y="229" width="0.4071%" height="15" fill="rgb(232,23,21)" fg:x="8784" fg:w="268"/><text x="13.5945%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (273 samples, 0.41%)</title><rect x="13.3445%" y="245" width="0.4147%" height="15" fill="rgb(244,5,23)" fg:x="8784" fg:w="273"/><text x="13.5945%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (15 samples, 0.02%)</title><rect x="69.8306%" y="213" width="0.0228%" height="15" fill="rgb(226,81,46)" fg:x="45966" fg:w="15"/><text x="70.0806%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (36,926 samples, 56.10%)</title><rect x="13.7592%" y="245" width="56.0972%" height="15" fill="rgb(247,70,30)" fg:x="9057" fg:w="36926"/><text x="14.0092%" y="255.50">rust_qecp`PerfectMatching::Expand</text></g><g><title>rust_qecp`PerfectMatching::Augment (17 samples, 0.03%)</title><rect x="69.8306%" y="229" width="0.0258%" height="15" fill="rgb(212,68,19)" fg:x="45966" fg:w="17"/><text x="70.0806%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (210 samples, 0.32%)</title><rect x="72.9647%" y="197" width="0.3190%" height="15" fill="rgb(240,187,13)" fg:x="48029" fg:w="210"/><text x="73.2147%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (1,105 samples, 1.68%)</title><rect x="71.6400%" y="229" width="1.6787%" height="15" fill="rgb(223,113,26)" fg:x="47157" fg:w="1105"/><text x="71.8900%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (233 samples, 0.35%)</title><rect x="72.9647%" y="213" width="0.3540%" height="15" fill="rgb(206,192,2)" fg:x="48029" fg:w="233"/><text x="73.2147%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (23 samples, 0.03%)</title><rect x="73.2837%" y="197" width="0.0349%" height="15" fill="rgb(241,108,4)" fg:x="48239" fg:w="23"/><text x="73.5337%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (2,628 samples, 3.99%)</title><rect x="69.8580%" y="245" width="3.9924%" height="15" fill="rgb(247,173,49)" fg:x="45984" fg:w="2628"/><text x="70.1080%" y="255.50">rust..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (350 samples, 0.53%)</title><rect x="73.3186%" y="229" width="0.5317%" height="15" fill="rgb(224,114,35)" fg:x="48262" fg:w="350"/><text x="73.5686%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (1,789 samples, 2.72%)</title><rect x="74.2879%" y="229" width="2.7178%" height="15" fill="rgb(245,159,27)" fg:x="48900" fg:w="1789"/><text x="74.5379%" y="239.50">ru..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (2,078 samples, 3.16%)</title><rect x="73.8504%" y="245" width="3.1569%" height="15" fill="rgb(245,172,44)" fg:x="48612" fg:w="2078"/><text x="74.1004%" y="255.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (100 samples, 0.15%)</title><rect x="82.8576%" y="213" width="0.1519%" height="15" fill="rgb(236,23,11)" fg:x="54541" fg:w="100"/><text x="83.1076%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (133 samples, 0.20%)</title><rect x="82.8576%" y="229" width="0.2021%" height="15" fill="rgb(205,117,38)" fg:x="54541" fg:w="133"/><text x="83.1076%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (33 samples, 0.05%)</title><rect x="83.0095%" y="213" width="0.0501%" height="15" fill="rgb(237,72,25)" fg:x="54641" fg:w="33"/><text x="83.2595%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (3,993 samples, 6.07%)</title><rect x="77.0072%" y="245" width="6.0661%" height="15" fill="rgb(244,70,9)" fg:x="50690" fg:w="3993"/><text x="77.2572%" y="255.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (9 samples, 0.01%)</title><rect x="83.0596%" y="229" width="0.0137%" height="15" fill="rgb(217,125,39)" fg:x="54674" fg:w="9"/><text x="83.3096%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (46,713 samples, 70.97%)</title><rect x="12.8097%" y="261" width="70.9654%" height="15" fill="rgb(235,36,10)" fg:x="8432" fg:w="46713"/><text x="13.0597%" y="271.50">rust_qecp`PerfectMatching::Solve</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (462 samples, 0.70%)</title><rect x="83.0733%" y="245" width="0.7019%" height="15" fill="rgb(251,123,47)" fg:x="54683" fg:w="462"/><text x="83.3233%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (30 samples, 0.05%)</title><rect x="83.7797%" y="245" width="0.0456%" height="15" fill="rgb(221,13,13)" fg:x="55148" fg:w="30"/><text x="84.0297%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.05%)</title><rect x="83.7797%" y="229" width="0.0456%" height="15" fill="rgb(238,131,9)" fg:x="55148" fg:w="30"/><text x="84.0297%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (34 samples, 0.05%)</title><rect x="83.7752%" y="261" width="0.0517%" height="15" fill="rgb(211,50,8)" fg:x="55145" fg:w="34"/><text x="84.0252%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (49,010 samples, 74.45%)</title><rect x="9.6027%" y="293" width="74.4550%" height="15" fill="rgb(245,182,24)" fg:x="6321" fg:w="49010"/><text x="9.8527%" y="303.50">rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (47,903 samples, 72.77%)</title><rect x="11.2845%" y="277" width="72.7733%" height="15" fill="rgb(242,14,37)" fg:x="7428" fg:w="47903"/><text x="11.5345%" y="287.50">rust_qecp`minimum_weight_perfect_matching</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (152 samples, 0.23%)</title><rect x="83.8268%" y="261" width="0.2309%" height="15" fill="rgb(246,228,12)" fg:x="55179" fg:w="152"/><text x="84.0768%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (9 samples, 0.01%)</title><rect x="84.0577%" y="293" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="55331" fg:w="9"/><text x="84.3077%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (9 samples, 0.01%)</title><rect x="84.0577%" y="277" width="0.0137%" height="15" fill="rgb(209,9,3)" fg:x="55331" fg:w="9"/><text x="84.3077%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (9 samples, 0.01%)</title><rect x="84.0577%" y="261" width="0.0137%" height="15" fill="rgb(230,59,30)" fg:x="55331" fg:w="9"/><text x="84.3077%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (8 samples, 0.01%)</title><rect x="84.0592%" y="245" width="0.0122%" height="15" fill="rgb(209,121,21)" fg:x="55332" fg:w="8"/><text x="84.3092%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="84.0608%" y="229" width="0.0106%" height="15" fill="rgb(220,109,13)" fg:x="55333" fg:w="7"/><text x="84.3108%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (56 samples, 0.09%)</title><rect x="84.4087%" y="229" width="0.0851%" height="15" fill="rgb(232,18,1)" fg:x="55562" fg:w="56"/><text x="84.6587%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (28 samples, 0.04%)</title><rect x="84.4512%" y="213" width="0.0425%" height="15" fill="rgb(215,41,42)" fg:x="55590" fg:w="28"/><text x="84.7012%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (68 samples, 0.10%)</title><rect x="84.3935%" y="245" width="0.1033%" height="15" fill="rgb(224,123,36)" fg:x="55552" fg:w="68"/><text x="84.6435%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (286 samples, 0.43%)</title><rect x="84.0714%" y="293" width="0.4345%" height="15" fill="rgb(240,125,3)" fg:x="55340" fg:w="286"/><text x="84.3214%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (89 samples, 0.14%)</title><rect x="84.3707%" y="277" width="0.1352%" height="15" fill="rgb(205,98,50)" fg:x="55537" fg:w="89"/><text x="84.6207%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (75 samples, 0.11%)</title><rect x="84.3919%" y="261" width="0.1139%" height="15" fill="rgb(205,185,37)" fg:x="55551" fg:w="75"/><text x="84.6419%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.01%)</title><rect x="98.3547%" y="213" width="0.0106%" height="15" fill="rgb(238,207,15)" fg:x="64742" fg:w="7"/><text x="98.6047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.03%)</title><rect x="98.3730%" y="197" width="0.0258%" height="15" fill="rgb(213,199,42)" fg:x="64754" fg:w="17"/><text x="98.6230%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="98.3988%" y="197" width="0.0182%" height="15" fill="rgb(235,201,11)" fg:x="64771" fg:w="12"/><text x="98.6488%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="98.3988%" y="181" width="0.0182%" height="15" fill="rgb(207,46,11)" fg:x="64771" fg:w="12"/><text x="98.6488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="98.4049%" y="165" width="0.0122%" height="15" fill="rgb(241,35,35)" fg:x="64775" fg:w="8"/><text x="98.6549%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.01%)</title><rect x="98.4170%" y="197" width="0.0122%" height="15" fill="rgb(243,32,47)" fg:x="64783" fg:w="8"/><text x="98.6670%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (50 samples, 0.08%)</title><rect x="98.3654%" y="213" width="0.0760%" height="15" fill="rgb(247,202,23)" fg:x="64749" fg:w="50"/><text x="98.6154%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="98.4292%" y="197" width="0.0122%" height="15" fill="rgb(219,102,11)" fg:x="64791" fg:w="8"/><text x="98.6792%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="98.4292%" y="181" width="0.0122%" height="15" fill="rgb(243,110,44)" fg:x="64791" fg:w="8"/><text x="98.6792%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (21 samples, 0.03%)</title><rect x="98.4413%" y="213" width="0.0319%" height="15" fill="rgb(222,74,54)" fg:x="64799" fg:w="21"/><text x="98.6913%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (93 samples, 0.14%)</title><rect x="98.3380%" y="229" width="0.1413%" height="15" fill="rgb(216,99,12)" fg:x="64731" fg:w="93"/><text x="98.5880%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.02%)</title><rect x="98.4793%" y="229" width="0.0152%" height="15" fill="rgb(226,22,26)" fg:x="64824" fg:w="10"/><text x="98.7293%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (142 samples, 0.22%)</title><rect x="98.2955%" y="277" width="0.2157%" height="15" fill="rgb(217,163,10)" fg:x="64703" fg:w="142"/><text x="98.5455%" y="287.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (136 samples, 0.21%)</title><rect x="98.3046%" y="261" width="0.2066%" height="15" fill="rgb(213,25,53)" fg:x="64709" fg:w="136"/><text x="98.5546%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (125 samples, 0.19%)</title><rect x="98.3213%" y="245" width="0.1899%" height="15" fill="rgb(252,105,26)" fg:x="64720" fg:w="125"/><text x="98.5713%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (9,220 samples, 14.01%)</title><rect x="84.5059%" y="293" width="14.0068%" height="15" fill="rgb(220,39,43)" fg:x="55626" fg:w="9220"/><text x="84.7559%" y="303.50">rust_qecp`rust_qecp::..</text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode (59,003 samples, 89.64%)</title><rect x="8.9130%" y="309" width="89.6362%" height="15" fill="rgb(229,68,48)" fg:x="5867" fg:w="59003"/><text x="9.1630%" y="319.50">rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode</text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (24 samples, 0.04%)</title><rect x="98.5127%" y="293" width="0.0365%" height="15" fill="rgb(252,8,32)" fg:x="64846" fg:w="24"/><text x="98.7627%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (23 samples, 0.03%)</title><rect x="98.5142%" y="277" width="0.0349%" height="15" fill="rgb(223,20,43)" fg:x="64847" fg:w="23"/><text x="98.7642%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="98.5385%" y="261" width="0.0106%" height="15" fill="rgb(229,81,49)" fg:x="64863" fg:w="7"/><text x="98.7885%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (45 samples, 0.07%)</title><rect x="99.0703%" y="293" width="0.0684%" height="15" fill="rgb(236,28,36)" fg:x="65213" fg:w="45"/><text x="99.3203%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.07%)</title><rect x="99.0703%" y="277" width="0.0684%" height="15" fill="rgb(249,185,26)" fg:x="65213" fg:w="45"/><text x="99.3203%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (20 samples, 0.03%)</title><rect x="99.1386%" y="293" width="0.0304%" height="15" fill="rgb(249,174,33)" fg:x="65258" fg:w="20"/><text x="99.3886%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (887 samples, 1.35%)</title><rect x="98.5492%" y="309" width="1.3475%" height="15" fill="rgb(233,201,37)" fg:x="64870" fg:w="887"/><text x="98.7992%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (479 samples, 0.73%)</title><rect x="99.1690%" y="293" width="0.7277%" height="15" fill="rgb(221,78,26)" fg:x="65278" fg:w="479"/><text x="99.4190%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (391 samples, 0.59%)</title><rect x="99.3027%" y="277" width="0.5940%" height="15" fill="rgb(250,127,30)" fg:x="65366" fg:w="391"/><text x="99.5527%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (9 samples, 0.01%)</title><rect x="99.9772%" y="277" width="0.0137%" height="15" fill="rgb(230,49,44)" fg:x="65810" fg:w="9"/><text x="100.2272%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (35 samples, 0.05%)</title><rect x="99.9408%" y="293" width="0.0532%" height="15" fill="rgb(229,67,23)" fg:x="65786" fg:w="35"/><text x="100.1908%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (65 samples, 0.10%)</title><rect x="99.8967%" y="309" width="0.0987%" height="15" fill="rgb(249,83,47)" fg:x="65757" fg:w="65"/><text x="100.1467%" y="319.50"></text></g><g><title>all (65,825 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="65825"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,979 samples, 91.12%)</title><rect x="8.8811%" y="389" width="91.1189%" height="15" fill="rgb(238,154,13)" fg:x="5846" fg:w="59979"/><text x="9.1311%" y="399.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,979 samples, 91.12%)</title><rect x="8.8811%" y="373" width="91.1189%" height="15" fill="rgb(219,56,2)" fg:x="5846" fg:w="59979"/><text x="9.1311%" y="383.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,979 samples, 91.12%)</title><rect x="8.8811%" y="357" width="91.1189%" height="15" fill="rgb(233,0,4)" fg:x="5846" fg:w="59979"/><text x="9.1311%" y="367.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,979 samples, 91.12%)</title><rect x="8.8811%" y="341" width="91.1189%" height="15" fill="rgb(235,30,7)" fg:x="5846" fg:w="59979"/><text x="9.1311%" y="351.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,979 samples, 91.12%)</title><rect x="8.8811%" y="325" width="91.1189%" height="15" fill="rgb(250,79,13)" fg:x="5846" fg:w="59979"/><text x="9.1311%" y="335.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>