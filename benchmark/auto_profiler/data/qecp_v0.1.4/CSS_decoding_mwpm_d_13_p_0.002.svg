<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="65779"><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.03%)</title><rect x="0.0547%" y="85" width="0.0350%" height="15" fill="rgb(227,0,7)" fg:x="36" fg:w="23"/><text x="0.3047%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.03%)</title><rect x="0.0547%" y="69" width="0.0350%" height="15" fill="rgb(217,0,24)" fg:x="36" fg:w="23"/><text x="0.3047%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.08%)</title><rect x="0.0106%" y="117" width="0.0806%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="53"/><text x="0.2606%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (47 samples, 0.07%)</title><rect x="0.0198%" y="101" width="0.0715%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="47"/><text x="0.2698%" y="111.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.09%)</title><rect x="0.0091%" y="165" width="0.0882%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="58"/><text x="0.2591%" y="175.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::complete_model_graph::CompleteModelGraphNode&gt;&gt;&gt;&gt; (57 samples, 0.09%)</title><rect x="0.0106%" y="149" width="0.0867%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="57"/><text x="0.2606%" y="159.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (57 samples, 0.09%)</title><rect x="0.0106%" y="133" width="0.0867%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="57"/><text x="0.2606%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.02%)</title><rect x="0.1155%" y="53" width="0.0182%" height="15" fill="rgb(228,23,34)" fg:x="76" fg:w="12"/><text x="0.3655%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="0.1201%" y="37" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="79" fg:w="9"/><text x="0.3701%" y="47.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="0.1140%" y="69" width="0.0213%" height="15" fill="rgb(220,122,19)" fg:x="75" fg:w="14"/><text x="0.3640%" y="79.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="0.1095%" y="101" width="0.0274%" height="15" fill="rgb(250,228,42)" fg:x="72" fg:w="18"/><text x="0.3595%" y="111.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.02%)</title><rect x="0.1140%" y="85" width="0.0228%" height="15" fill="rgb(240,193,28)" fg:x="75" fg:w="15"/><text x="0.3640%" y="95.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.04%)</title><rect x="0.1049%" y="117" width="0.0365%" height="15" fill="rgb(216,20,37)" fg:x="69" fg:w="24"/><text x="0.3549%" y="127.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt;&gt;&gt; (26 samples, 0.04%)</title><rect x="0.1049%" y="149" width="0.0395%" height="15" fill="rgb(206,188,39)" fg:x="69" fg:w="26"/><text x="0.3549%" y="159.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;rust_qecp::model_graph::ModelGraphNode&gt;&gt;&gt; (26 samples, 0.04%)</title><rect x="0.1049%" y="133" width="0.0395%" height="15" fill="rgb(217,207,13)" fg:x="69" fg:w="26"/><text x="0.3549%" y="143.50"></text></g><g><title>rust_qecp`alloc::sync::Arc&lt;T&gt;::drop_slow (27 samples, 0.04%)</title><rect x="0.1049%" y="165" width="0.0410%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="27"/><text x="0.3549%" y="175.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (26 samples, 0.04%)</title><rect x="0.1459%" y="165" width="0.0395%" height="15" fill="rgb(225,20,46)" fg:x="96" fg:w="26"/><text x="0.3959%" y="175.50"></text></g><g><title>rust_qecp`pbr::tty::unix::terminal_size (19 samples, 0.03%)</title><rect x="0.1566%" y="149" width="0.0289%" height="15" fill="rgb(210,31,41)" fg:x="103" fg:w="19"/><text x="0.4066%" y="159.50"></text></g><g><title>libsystem_c.dylib`isatty (18 samples, 0.03%)</title><rect x="0.1581%" y="133" width="0.0274%" height="15" fill="rgb(221,200,47)" fg:x="104" fg:w="18"/><text x="0.4081%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (17 samples, 0.03%)</title><rect x="0.1596%" y="117" width="0.0258%" height="15" fill="rgb(226,26,5)" fg:x="105" fg:w="17"/><text x="0.4096%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (64 samples, 0.10%)</title><rect x="0.1946%" y="149" width="0.0973%" height="15" fill="rgb(249,33,26)" fg:x="128" fg:w="64"/><text x="0.4446%" y="159.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (183 samples, 0.28%)</title><rect x="0.2934%" y="149" width="0.2782%" height="15" fill="rgb(235,183,28)" fg:x="193" fg:w="183"/><text x="0.5434%" y="159.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (10 samples, 0.02%)</title><rect x="0.5716%" y="149" width="0.0152%" height="15" fill="rgb(221,5,38)" fg:x="376" fg:w="10"/><text x="0.8216%" y="159.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (8 samples, 0.01%)</title><rect x="0.5868%" y="149" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="386" fg:w="8"/><text x="0.8368%" y="159.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (9 samples, 0.01%)</title><rect x="0.5990%" y="149" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="394" fg:w="9"/><text x="0.8490%" y="159.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (271 samples, 0.41%)</title><rect x="2.0234%" y="133" width="0.4120%" height="15" fill="rgb(249,31,29)" fg:x="1331" fg:w="271"/><text x="2.2734%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 0.05%)</title><rect x="2.6255%" y="101" width="0.0532%" height="15" fill="rgb(225,111,53)" fg:x="1727" fg:w="35"/><text x="2.8755%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (43 samples, 0.07%)</title><rect x="2.6817%" y="101" width="0.0654%" height="15" fill="rgb(238,160,17)" fg:x="1764" fg:w="43"/><text x="2.9317%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="2.7319%" y="85" width="0.0152%" height="15" fill="rgb(214,148,48)" fg:x="1797" fg:w="10"/><text x="2.9819%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="2.7334%" y="69" width="0.0137%" height="15" fill="rgb(232,36,49)" fg:x="1798" fg:w="9"/><text x="2.9834%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="2.7349%" y="53" width="0.0122%" height="15" fill="rgb(209,103,24)" fg:x="1799" fg:w="8"/><text x="2.9849%" y="63.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (87 samples, 0.13%)</title><rect x="2.6179%" y="117" width="0.1323%" height="15" fill="rgb(229,88,8)" fg:x="1722" fg:w="87"/><text x="2.8679%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (214 samples, 0.33%)</title><rect x="2.4354%" y="133" width="0.3253%" height="15" fill="rgb(213,181,19)" fg:x="1602" fg:w="214"/><text x="2.6854%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.01%)</title><rect x="2.7501%" y="117" width="0.0106%" height="15" fill="rgb(254,191,54)" fg:x="1809" fg:w="7"/><text x="3.0001%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (61 samples, 0.09%)</title><rect x="2.7653%" y="133" width="0.0927%" height="15" fill="rgb(241,83,37)" fg:x="1819" fg:w="61"/><text x="3.0153%" y="143.50"></text></g><g><title>rust_qecp`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (722 samples, 1.10%)</title><rect x="2.8581%" y="133" width="1.0976%" height="15" fill="rgb(233,36,39)" fg:x="1880" fg:w="722"/><text x="3.1081%" y="143.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (86 samples, 0.13%)</title><rect x="3.9557%" y="133" width="0.1307%" height="15" fill="rgb(226,3,54)" fg:x="2602" fg:w="86"/><text x="4.2057%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (310 samples, 0.47%)</title><rect x="4.0864%" y="133" width="0.4713%" height="15" fill="rgb(245,192,40)" fg:x="2688" fg:w="310"/><text x="4.3364%" y="143.50"></text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1,709 samples, 2.60%)</title><rect x="4.5577%" y="133" width="2.5981%" height="15" fill="rgb(238,167,29)" fg:x="2998" fg:w="1709"/><text x="4.8077%" y="143.50">ru..</text></g><g><title>rust_qecp`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (40 samples, 0.06%)</title><rect x="7.1558%" y="133" width="0.0608%" height="15" fill="rgb(232,182,51)" fg:x="4707" fg:w="40"/><text x="7.4058%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (7 samples, 0.01%)</title><rect x="7.2318%" y="133" width="0.0106%" height="15" fill="rgb(231,60,39)" fg:x="4757" fg:w="7"/><text x="7.4818%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (416 samples, 0.63%)</title><rect x="7.2424%" y="133" width="0.6324%" height="15" fill="rgb(208,69,12)" fg:x="4764" fg:w="416"/><text x="7.4924%" y="143.50"></text></g><g><title>rust_qecp`&lt;float_ord::FloatOrd&lt;f64&gt; as core::cmp::PartialOrd&gt;::partial_cmp (13 samples, 0.02%)</title><rect x="7.9205%" y="117" width="0.0198%" height="15" fill="rgb(235,93,37)" fg:x="5210" fg:w="13"/><text x="8.1705%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.01%)</title><rect x="7.9402%" y="117" width="0.0106%" height="15" fill="rgb(213,116,39)" fg:x="5223" fg:w="7"/><text x="8.1902%" y="127.50"></text></g><g><title>rust_qecp`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (68 samples, 0.10%)</title><rect x="7.9509%" y="117" width="0.1034%" height="15" fill="rgb(222,207,29)" fg:x="5230" fg:w="68"/><text x="8.2009%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (8 samples, 0.01%)</title><rect x="8.0542%" y="117" width="0.0122%" height="15" fill="rgb(206,96,30)" fg:x="5298" fg:w="8"/><text x="8.3042%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (36 samples, 0.05%)</title><rect x="8.0664%" y="117" width="0.0547%" height="15" fill="rgb(218,138,4)" fg:x="5306" fg:w="36"/><text x="8.3164%" y="127.50"></text></g><g><title>rust_qecp`indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (51 samples, 0.08%)</title><rect x="8.1211%" y="117" width="0.0775%" height="15" fill="rgb(250,191,14)" fg:x="5342" fg:w="51"/><text x="8.3711%" y="127.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (30 samples, 0.05%)</title><rect x="8.1531%" y="101" width="0.0456%" height="15" fill="rgb(239,60,40)" fg:x="5363" fg:w="30"/><text x="8.4031%" y="111.50"></text></g><g><title>rust_qecp`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.02%)</title><rect x="8.1774%" y="85" width="0.0213%" height="15" fill="rgb(206,27,48)" fg:x="5379" fg:w="14"/><text x="8.4274%" y="95.50"></text></g><g><title>rust_qecp`indexmap::map::core::raw::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (17 samples, 0.03%)</title><rect x="8.1987%" y="117" width="0.0258%" height="15" fill="rgb(225,35,8)" fg:x="5393" fg:w="17"/><text x="8.4487%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (25 samples, 0.04%)</title><rect x="8.2245%" y="117" width="0.0380%" height="15" fill="rgb(250,213,24)" fg:x="5410" fg:w="25"/><text x="8.4745%" y="127.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (256 samples, 0.39%)</title><rect x="7.8749%" y="133" width="0.3892%" height="15" fill="rgb(247,123,22)" fg:x="5180" fg:w="256"/><text x="8.1249%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::left (21 samples, 0.03%)</title><rect x="8.2640%" y="133" width="0.0319%" height="15" fill="rgb(231,138,38)" fg:x="5436" fg:w="21"/><text x="8.5140%" y="143.50"></text></g><g><title>rust_qecp`priority_queue::priority_queue::right (32 samples, 0.05%)</title><rect x="8.2960%" y="133" width="0.0486%" height="15" fill="rgb(231,145,46)" fg:x="5457" fg:w="32"/><text x="8.5460%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (5,103 samples, 7.76%)</title><rect x="0.6127%" y="149" width="7.7578%" height="15" fill="rgb(251,118,11)" fg:x="403" fg:w="5103"/><text x="0.8627%" y="159.50">rust_qecp`r..</text></g><g><title>rust_qecp`priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (17 samples, 0.03%)</title><rect x="8.3446%" y="133" width="0.0258%" height="15" fill="rgb(217,147,25)" fg:x="5489" fg:w="17"/><text x="8.5946%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (14 samples, 0.02%)</title><rect x="8.4161%" y="133" width="0.0213%" height="15" fill="rgb(247,81,37)" fg:x="5536" fg:w="14"/><text x="8.6661%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="8.7475%" y="101" width="0.0198%" height="15" fill="rgb(209,12,38)" fg:x="5754" fg:w="13"/><text x="8.9975%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="8.7536%" y="85" width="0.0137%" height="15" fill="rgb(227,1,9)" fg:x="5758" fg:w="9"/><text x="9.0036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="8.7551%" y="69" width="0.0122%" height="15" fill="rgb(248,47,43)" fg:x="5759" fg:w="8"/><text x="9.0051%" y="79.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 0.03%)</title><rect x="8.7384%" y="117" width="0.0319%" height="15" fill="rgb(221,10,30)" fg:x="5748" fg:w="21"/><text x="8.9884%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.01%)</title><rect x="8.7733%" y="117" width="0.0122%" height="15" fill="rgb(210,229,1)" fg:x="5771" fg:w="8"/><text x="9.0233%" y="127.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.01%)</title><rect x="8.7855%" y="117" width="0.0137%" height="15" fill="rgb(222,148,37)" fg:x="5779" fg:w="9"/><text x="9.0355%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (285 samples, 0.43%)</title><rect x="8.4525%" y="133" width="0.4333%" height="15" fill="rgb(234,67,33)" fg:x="5560" fg:w="285"/><text x="8.7025%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (56 samples, 0.09%)</title><rect x="8.8007%" y="117" width="0.0851%" height="15" fill="rgb(247,98,35)" fg:x="5789" fg:w="56"/><text x="9.0507%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (8 samples, 0.01%)</title><rect x="8.8858%" y="133" width="0.0122%" height="15" fill="rgb(247,138,52)" fg:x="5845" fg:w="8"/><text x="9.1358%" y="143.50"></text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::new (5,733 samples, 8.72%)</title><rect x="0.1885%" y="165" width="8.7155%" height="15" fill="rgb(213,79,30)" fg:x="124" fg:w="5733"/><text x="0.4385%" y="175.50">rust_qecp`ru..</text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (351 samples, 0.53%)</title><rect x="8.3705%" y="149" width="0.5336%" height="15" fill="rgb(246,177,23)" fg:x="5506" fg:w="351"/><text x="8.6205%" y="159.50"></text></g><g><title>dyld`start (5,862 samples, 8.91%)</title><rect x="0.0000%" y="405" width="8.9117%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="5862"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>rust_qecp`main (5,860 samples, 8.91%)</title><rect x="0.0030%" y="389" width="8.9086%" height="15" fill="rgb(216,154,8)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="399.50">rust_qecp`main</text></g><g><title>rust_qecp`std::rt::lang_start_internal (5,860 samples, 8.91%)</title><rect x="0.0030%" y="373" width="8.9086%" height="15" fill="rgb(244,35,45)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="383.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (5,860 samples, 8.91%)</title><rect x="0.0030%" y="357" width="8.9086%" height="15" fill="rgb(251,115,12)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="367.50">rust_qecp`std..</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (5,860 samples, 8.91%)</title><rect x="0.0030%" y="341" width="8.9086%" height="15" fill="rgb(240,54,50)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="351.50">rust_qecp`std..</text></g><g><title>rust_qecp`rust_qecp::main (5,860 samples, 8.91%)</title><rect x="0.0030%" y="325" width="8.9086%" height="15" fill="rgb(233,84,52)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="335.50">rust_qecp`rus..</text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (5,860 samples, 8.91%)</title><rect x="0.0030%" y="309" width="8.9086%" height="15" fill="rgb(207,117,47)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="319.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (5,860 samples, 8.91%)</title><rect x="0.0030%" y="293" width="8.9086%" height="15" fill="rgb(249,43,39)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="303.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,860 samples, 8.91%)</title><rect x="0.0030%" y="277" width="8.9086%" height="15" fill="rgb(209,38,44)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="287.50">rust_qecp`tok..</text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (5,860 samples, 8.91%)</title><rect x="0.0030%" y="261" width="8.9086%" height="15" fill="rgb(236,212,23)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="271.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,860 samples, 8.91%)</title><rect x="0.0030%" y="245" width="8.9086%" height="15" fill="rgb(242,79,21)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="255.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (5,860 samples, 8.91%)</title><rect x="0.0030%" y="229" width="8.9086%" height="15" fill="rgb(211,96,35)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="239.50">rust_qecp`tok..</text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,860 samples, 8.91%)</title><rect x="0.0030%" y="213" width="8.9086%" height="15" fill="rgb(253,215,40)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="223.50">rust_qecp`&lt;co..</text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (5,860 samples, 8.91%)</title><rect x="0.0030%" y="197" width="8.9086%" height="15" fill="rgb(211,81,21)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="207.50">rust_qecp`rus..</text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (5,860 samples, 8.91%)</title><rect x="0.0030%" y="181" width="8.9086%" height="15" fill="rgb(208,190,38)" fg:x="2" fg:w="5860"/><text x="0.2530%" y="191.50">rust_qecp`rus..</text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.04%)</title><rect x="9.0014%" y="293" width="0.0395%" height="15" fill="rgb(235,213,38)" fg:x="5921" fg:w="26"/><text x="9.2514%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.04%)</title><rect x="9.0014%" y="277" width="0.0395%" height="15" fill="rgb(237,122,38)" fg:x="5921" fg:w="26"/><text x="9.2514%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="9.0257%" y="261" width="0.0152%" height="15" fill="rgb(244,218,35)" fg:x="5937" fg:w="10"/><text x="9.2757%" y="271.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.11%)</title><rect x="8.9375%" y="325" width="0.1064%" height="15" fill="rgb(240,68,47)" fg:x="5879" fg:w="70"/><text x="9.1875%" y="335.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (52 samples, 0.08%)</title><rect x="8.9649%" y="309" width="0.0791%" height="15" fill="rgb(210,16,53)" fg:x="5897" fg:w="52"/><text x="9.2149%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (7 samples, 0.01%)</title><rect x="10.3696%" y="309" width="0.0106%" height="15" fill="rgb(235,124,12)" fg:x="6821" fg:w="7"/><text x="10.6196%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (13 samples, 0.02%)</title><rect x="10.4030%" y="293" width="0.0198%" height="15" fill="rgb(224,169,11)" fg:x="6843" fg:w="13"/><text x="10.6530%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (58 samples, 0.09%)</title><rect x="10.3833%" y="309" width="0.0882%" height="15" fill="rgb(250,166,2)" fg:x="6830" fg:w="58"/><text x="10.6333%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.04%)</title><rect x="10.4304%" y="293" width="0.0410%" height="15" fill="rgb(242,216,29)" fg:x="6861" fg:w="27"/><text x="10.6804%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.03%)</title><rect x="10.4380%" y="277" width="0.0334%" height="15" fill="rgb(230,116,27)" fg:x="6866" fg:w="22"/><text x="10.6880%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="10.4714%" y="309" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="6888" fg:w="9"/><text x="10.7214%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.02%)</title><rect x="10.4851%" y="309" width="0.0182%" height="15" fill="rgb(253,11,6)" fg:x="6897" fg:w="12"/><text x="10.7351%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.01%)</title><rect x="10.4897%" y="293" width="0.0137%" height="15" fill="rgb(247,143,39)" fg:x="6900" fg:w="9"/><text x="10.7397%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.02%)</title><rect x="10.5262%" y="293" width="0.0167%" height="15" fill="rgb(236,97,10)" fg:x="6924" fg:w="11"/><text x="10.7762%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="10.5322%" y="277" width="0.0106%" height="15" fill="rgb(233,208,19)" fg:x="6928" fg:w="7"/><text x="10.7822%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="10.5322%" y="261" width="0.0106%" height="15" fill="rgb(216,164,2)" fg:x="6928" fg:w="7"/><text x="10.7822%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="10.5429%" y="293" width="0.0243%" height="15" fill="rgb(220,129,5)" fg:x="6935" fg:w="16"/><text x="10.7929%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.02%)</title><rect x="10.5505%" y="277" width="0.0167%" height="15" fill="rgb(242,17,10)" fg:x="6940" fg:w="11"/><text x="10.8005%" y="287.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.05%)</title><rect x="10.5201%" y="309" width="0.0532%" height="15" fill="rgb(242,107,0)" fg:x="6920" fg:w="35"/><text x="10.7701%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.02%)</title><rect x="10.6204%" y="245" width="0.0167%" height="15" fill="rgb(251,28,31)" fg:x="6986" fg:w="11"/><text x="10.8704%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.04%)</title><rect x="10.6174%" y="261" width="0.0395%" height="15" fill="rgb(233,223,10)" fg:x="6984" fg:w="26"/><text x="10.8674%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="10.6371%" y="245" width="0.0198%" height="15" fill="rgb(215,21,27)" fg:x="6997" fg:w="13"/><text x="10.8871%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (41 samples, 0.06%)</title><rect x="10.6037%" y="309" width="0.0623%" height="15" fill="rgb(232,23,21)" fg:x="6975" fg:w="41"/><text x="10.8537%" y="319.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="10.6159%" y="293" width="0.0502%" height="15" fill="rgb(244,5,23)" fg:x="6983" fg:w="33"/><text x="10.8659%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.05%)</title><rect x="10.6159%" y="277" width="0.0502%" height="15" fill="rgb(226,81,46)" fg:x="6983" fg:w="33"/><text x="10.8659%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (481 samples, 0.73%)</title><rect x="13.4222%" y="277" width="0.7312%" height="15" fill="rgb(247,70,30)" fg:x="8829" fg:w="481"/><text x="13.6722%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (484 samples, 0.74%)</title><rect x="13.4192%" y="293" width="0.7358%" height="15" fill="rgb(212,68,19)" fg:x="8827" fg:w="484"/><text x="13.6692%" y="303.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (643 samples, 0.98%)</title><rect x="14.1626%" y="293" width="0.9775%" height="15" fill="rgb(240,187,13)" fg:x="9316" fg:w="643"/><text x="14.4126%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (21 samples, 0.03%)</title><rect x="15.4107%" y="277" width="0.0319%" height="15" fill="rgb(223,113,26)" fg:x="10137" fg:w="21"/><text x="15.6607%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.02%)</title><rect x="15.4426%" y="277" width="0.0182%" height="15" fill="rgb(206,192,2)" fg:x="10158" fg:w="12"/><text x="15.6926%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (2,140 samples, 3.25%)</title><rect x="15.4609%" y="277" width="3.2533%" height="15" fill="rgb(241,108,4)" fg:x="10170" fg:w="2140"/><text x="15.7109%" y="287.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::Finish (30 samples, 0.05%)</title><rect x="18.7142%" y="277" width="0.0456%" height="15" fill="rgb(247,173,49)" fg:x="12310" fg:w="30"/><text x="18.9642%" y="287.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (257 samples, 0.39%)</title><rect x="18.7689%" y="277" width="0.3907%" height="15" fill="rgb(224,114,35)" fg:x="12346" fg:w="257"/><text x="19.0189%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (307 samples, 0.47%)</title><rect x="19.3344%" y="261" width="0.4667%" height="15" fill="rgb(245,159,27)" fg:x="12718" fg:w="307"/><text x="19.5844%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (109 samples, 0.17%)</title><rect x="19.8042%" y="261" width="0.1657%" height="15" fill="rgb(245,172,44)" fg:x="13027" fg:w="109"/><text x="20.0542%" y="271.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (109 samples, 0.17%)</title><rect x="19.8042%" y="245" width="0.1657%" height="15" fill="rgb(236,23,11)" fg:x="13027" fg:w="109"/><text x="20.0542%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (1,224 samples, 1.86%)</title><rect x="19.9714%" y="261" width="1.8608%" height="15" fill="rgb(205,117,38)" fg:x="13137" fg:w="1224"/><text x="20.2214%" y="271.50">r..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (52 samples, 0.08%)</title><rect x="23.5288%" y="213" width="0.0791%" height="15" fill="rgb(237,72,25)" fg:x="15477" fg:w="52"/><text x="23.7788%" y="223.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (510 samples, 0.78%)</title><rect x="22.8340%" y="245" width="0.7753%" height="15" fill="rgb(244,70,9)" fg:x="15020" fg:w="510"/><text x="23.0840%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (53 samples, 0.08%)</title><rect x="23.5288%" y="229" width="0.0806%" height="15" fill="rgb(217,125,39)" fg:x="15477" fg:w="53"/><text x="23.7788%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (1,278 samples, 1.94%)</title><rect x="21.8322%" y="261" width="1.9429%" height="15" fill="rgb(235,36,10)" fg:x="14361" fg:w="1278"/><text x="22.0822%" y="271.50">r..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (109 samples, 0.17%)</title><rect x="23.6094%" y="245" width="0.1657%" height="15" fill="rgb(251,123,47)" fg:x="15530" fg:w="109"/><text x="23.8594%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (3,990 samples, 6.07%)</title><rect x="24.0670%" y="245" width="6.0658%" height="15" fill="rgb(221,13,13)" fg:x="15831" fg:w="3990"/><text x="24.3170%" y="255.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (4,183 samples, 6.36%)</title><rect x="23.7751%" y="261" width="6.3592%" height="15" fill="rgb(238,131,9)" fg:x="15639" fg:w="4183"/><text x="24.0251%" y="271.50">rust_qec..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (12 samples, 0.02%)</title><rect x="33.5928%" y="229" width="0.0182%" height="15" fill="rgb(211,50,8)" fg:x="22097" fg:w="12"/><text x="33.8428%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (23 samples, 0.03%)</title><rect x="33.5928%" y="245" width="0.0350%" height="15" fill="rgb(245,182,24)" fg:x="22097" fg:w="23"/><text x="33.8428%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (11 samples, 0.02%)</title><rect x="33.6110%" y="229" width="0.0167%" height="15" fill="rgb(242,14,37)" fg:x="22109" fg:w="11"/><text x="33.8610%" y="239.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (2,306 samples, 3.51%)</title><rect x="30.1342%" y="261" width="3.5057%" height="15" fill="rgb(246,228,12)" fg:x="19822" fg:w="2306"/><text x="30.3842%" y="271.50">rus..</text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (8 samples, 0.01%)</title><rect x="33.6278%" y="245" width="0.0122%" height="15" fill="rgb(213,55,15)" fg:x="22120" fg:w="8"/><text x="33.8778%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (9,645 samples, 14.66%)</title><rect x="19.1657%" y="277" width="14.6627%" height="15" fill="rgb(209,9,3)" fg:x="12607" fg:w="9645"/><text x="19.4157%" y="287.50">rust_qecp`PerfectMatch..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (121 samples, 0.18%)</title><rect x="33.6445%" y="261" width="0.1839%" height="15" fill="rgb(230,59,30)" fg:x="22131" fg:w="121"/><text x="33.8945%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (84 samples, 0.13%)</title><rect x="33.8375%" y="261" width="0.1277%" height="15" fill="rgb(209,121,21)" fg:x="22258" fg:w="84"/><text x="34.0875%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (83 samples, 0.13%)</title><rect x="33.8391%" y="245" width="0.1262%" height="15" fill="rgb(220,109,13)" fg:x="22259" fg:w="83"/><text x="34.0891%" y="255.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (92 samples, 0.14%)</title><rect x="33.8284%" y="277" width="0.1399%" height="15" fill="rgb(232,18,1)" fg:x="22252" fg:w="92"/><text x="34.0784%" y="287.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (15,421 samples, 23.44%)</title><rect x="10.6660%" y="309" width="23.4437%" height="15" fill="rgb(215,41,42)" fg:x="7016" fg:w="15421"/><text x="10.9160%" y="319.50">rust_qecp`rust_qecp::blossom_v::safe_..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (12,475 samples, 18.97%)</title><rect x="15.1447%" y="293" width="18.9650%" height="15" fill="rgb(224,123,36)" fg:x="9962" fg:w="12475"/><text x="15.3947%" y="303.50">rust_qecp`minimum_weight_perfe..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (93 samples, 0.14%)</title><rect x="33.9683%" y="277" width="0.1414%" height="15" fill="rgb(240,125,3)" fg:x="22344" fg:w="93"/><text x="34.2183%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="34.1249%" y="229" width="0.0258%" height="15" fill="rgb(205,98,50)" fg:x="22447" fg:w="17"/><text x="34.3749%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="34.1340%" y="213" width="0.0167%" height="15" fill="rgb(205,185,37)" fg:x="22453" fg:w="11"/><text x="34.3840%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.03%)</title><rect x="34.1234%" y="245" width="0.0334%" height="15" fill="rgb(238,207,15)" fg:x="22446" fg:w="22"/><text x="34.3734%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (49 samples, 0.07%)</title><rect x="34.1203%" y="261" width="0.0745%" height="15" fill="rgb(213,199,42)" fg:x="22444" fg:w="49"/><text x="34.3703%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (24 samples, 0.04%)</title><rect x="34.1583%" y="245" width="0.0365%" height="15" fill="rgb(235,201,11)" fg:x="22469" fg:w="24"/><text x="34.4083%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.02%)</title><rect x="34.1750%" y="229" width="0.0198%" height="15" fill="rgb(207,46,11)" fg:x="22480" fg:w="13"/><text x="34.4250%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (61 samples, 0.09%)</title><rect x="34.1097%" y="309" width="0.0927%" height="15" fill="rgb(241,35,35)" fg:x="22437" fg:w="61"/><text x="34.3597%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (59 samples, 0.09%)</title><rect x="34.1127%" y="293" width="0.0897%" height="15" fill="rgb(243,32,47)" fg:x="22439" fg:w="59"/><text x="34.3627%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (57 samples, 0.09%)</title><rect x="34.1158%" y="277" width="0.0867%" height="15" fill="rgb(247,202,23)" fg:x="22441" fg:w="57"/><text x="34.3658%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="35.2438%" y="293" width="0.0106%" height="15" fill="rgb(219,102,11)" fg:x="23183" fg:w="7"/><text x="35.4938%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="35.3274%" y="277" width="0.0106%" height="15" fill="rgb(243,110,44)" fg:x="23238" fg:w="7"/><text x="35.5774%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="35.4399%" y="213" width="0.0106%" height="15" fill="rgb(222,74,54)" fg:x="23312" fg:w="7"/><text x="35.6899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (25 samples, 0.04%)</title><rect x="35.5037%" y="197" width="0.0380%" height="15" fill="rgb(216,99,12)" fg:x="23354" fg:w="25"/><text x="35.7537%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (121 samples, 0.18%)</title><rect x="35.4034%" y="229" width="0.1839%" height="15" fill="rgb(226,22,26)" fg:x="23288" fg:w="121"/><text x="35.6534%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (90 samples, 0.14%)</title><rect x="35.4505%" y="213" width="0.1368%" height="15" fill="rgb(217,163,10)" fg:x="23319" fg:w="90"/><text x="35.7005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.05%)</title><rect x="35.5417%" y="197" width="0.0456%" height="15" fill="rgb(213,25,53)" fg:x="23379" fg:w="30"/><text x="35.7917%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="35.5737%" y="181" width="0.0137%" height="15" fill="rgb(252,105,26)" fg:x="23400" fg:w="9"/><text x="35.8237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (143 samples, 0.22%)</title><rect x="35.3943%" y="245" width="0.2174%" height="15" fill="rgb(220,39,43)" fg:x="23282" fg:w="143"/><text x="35.6443%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.02%)</title><rect x="35.5873%" y="229" width="0.0243%" height="15" fill="rgb(229,68,48)" fg:x="23409" fg:w="16"/><text x="35.8373%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.03%)</title><rect x="35.6178%" y="245" width="0.0350%" height="15" fill="rgb(252,8,32)" fg:x="23429" fg:w="23"/><text x="35.8678%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (175 samples, 0.27%)</title><rect x="35.6527%" y="245" width="0.2660%" height="15" fill="rgb(223,20,43)" fg:x="23452" fg:w="175"/><text x="35.9027%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (88 samples, 0.13%)</title><rect x="35.7850%" y="229" width="0.1338%" height="15" fill="rgb(229,81,49)" fg:x="23539" fg:w="88"/><text x="36.0350%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (368 samples, 0.56%)</title><rect x="35.3623%" y="261" width="0.5594%" height="15" fill="rgb(236,28,36)" fg:x="23261" fg:w="368"/><text x="35.6123%" y="271.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (1,159 samples, 1.76%)</title><rect x="34.2024%" y="309" width="1.7620%" height="15" fill="rgb(249,185,26)" fg:x="22498" fg:w="1159"/><text x="34.4524%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (467 samples, 0.71%)</title><rect x="35.2544%" y="293" width="0.7100%" height="15" fill="rgb(249,174,33)" fg:x="23190" fg:w="467"/><text x="35.5044%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (412 samples, 0.63%)</title><rect x="35.3380%" y="277" width="0.6263%" height="15" fill="rgb(233,201,37)" fg:x="23245" fg:w="412"/><text x="35.5880%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (28 samples, 0.04%)</title><rect x="35.9218%" y="261" width="0.0426%" height="15" fill="rgb(221,78,26)" fg:x="23629" fg:w="28"/><text x="36.1718%" y="271.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (9 samples, 0.01%)</title><rect x="80.3189%" y="277" width="0.0137%" height="15" fill="rgb(250,127,30)" fg:x="52833" fg:w="9"/><text x="80.5689%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="80.3737%" y="229" width="0.0182%" height="15" fill="rgb(230,49,44)" fg:x="52869" fg:w="12"/><text x="80.6237%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.04%)</title><rect x="80.3539%" y="261" width="0.0410%" height="15" fill="rgb(229,67,23)" fg:x="52856" fg:w="27"/><text x="80.6039%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.03%)</title><rect x="80.3615%" y="245" width="0.0334%" height="15" fill="rgb(249,83,47)" fg:x="52861" fg:w="22"/><text x="80.6115%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="80.4071%" y="261" width="0.0182%" height="15" fill="rgb(215,43,3)" fg:x="52891" fg:w="12"/><text x="80.6571%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (10 samples, 0.02%)</title><rect x="80.5029%" y="229" width="0.0152%" height="15" fill="rgb(238,154,13)" fg:x="52954" fg:w="10"/><text x="80.7529%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.04%)</title><rect x="80.5272%" y="229" width="0.0426%" height="15" fill="rgb(219,56,2)" fg:x="52970" fg:w="28"/><text x="80.7772%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (9 samples, 0.01%)</title><rect x="80.6108%" y="213" width="0.0137%" height="15" fill="rgb(233,0,4)" fg:x="53025" fg:w="9"/><text x="80.8608%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (81 samples, 0.12%)</title><rect x="80.6245%" y="213" width="0.1231%" height="15" fill="rgb(235,30,7)" fg:x="53034" fg:w="81"/><text x="80.8745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (39 samples, 0.06%)</title><rect x="80.7553%" y="197" width="0.0593%" height="15" fill="rgb(250,79,13)" fg:x="53120" fg:w="39"/><text x="81.0053%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="80.7978%" y="181" width="0.0167%" height="15" fill="rgb(211,146,34)" fg:x="53148" fg:w="11"/><text x="81.0478%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (49 samples, 0.07%)</title><rect x="80.7477%" y="213" width="0.0745%" height="15" fill="rgb(228,22,38)" fg:x="53115" fg:w="49"/><text x="80.9977%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.03%)</title><rect x="80.8221%" y="213" width="0.0319%" height="15" fill="rgb(235,168,5)" fg:x="53164" fg:w="21"/><text x="81.0721%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.01%)</title><rect x="80.8830%" y="181" width="0.0137%" height="15" fill="rgb(221,155,16)" fg:x="53204" fg:w="9"/><text x="81.1330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.07%)</title><rect x="80.8541%" y="213" width="0.0684%" height="15" fill="rgb(215,215,53)" fg:x="53185" fg:w="45"/><text x="81.1041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.05%)</title><rect x="80.8693%" y="197" width="0.0532%" height="15" fill="rgb(223,4,10)" fg:x="53195" fg:w="35"/><text x="81.1193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.02%)</title><rect x="80.8982%" y="181" width="0.0243%" height="15" fill="rgb(234,103,6)" fg:x="53214" fg:w="16"/><text x="81.1482%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="80.9058%" y="165" width="0.0167%" height="15" fill="rgb(227,97,0)" fg:x="53219" fg:w="11"/><text x="81.1558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (234 samples, 0.36%)</title><rect x="80.5698%" y="229" width="0.3557%" height="15" fill="rgb(234,150,53)" fg:x="52998" fg:w="234"/><text x="80.8198%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="80.9407%" y="213" width="0.0243%" height="15" fill="rgb(228,201,54)" fg:x="53242" fg:w="16"/><text x="81.1907%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="80.9438%" y="197" width="0.0213%" height="15" fill="rgb(222,22,37)" fg:x="53244" fg:w="14"/><text x="81.1938%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="80.9681%" y="213" width="0.0122%" height="15" fill="rgb(237,53,32)" fg:x="53260" fg:w="8"/><text x="81.2181%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (33 samples, 0.05%)</title><rect x="80.9346%" y="229" width="0.0502%" height="15" fill="rgb(233,25,53)" fg:x="53238" fg:w="33"/><text x="81.1846%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (419 samples, 0.64%)</title><rect x="80.4755%" y="245" width="0.6370%" height="15" fill="rgb(210,40,34)" fg:x="52936" fg:w="419"/><text x="80.7255%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (83 samples, 0.13%)</title><rect x="80.9863%" y="229" width="0.1262%" height="15" fill="rgb(241,220,44)" fg:x="53272" fg:w="83"/><text x="81.2363%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (30 samples, 0.05%)</title><rect x="81.1125%" y="245" width="0.0456%" height="15" fill="rgb(235,28,35)" fg:x="53355" fg:w="30"/><text x="81.3625%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (10 samples, 0.02%)</title><rect x="81.1581%" y="245" width="0.0152%" height="15" fill="rgb(210,56,17)" fg:x="53385" fg:w="10"/><text x="81.4081%" y="255.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (611 samples, 0.93%)</title><rect x="80.2642%" y="293" width="0.9289%" height="15" fill="rgb(224,130,29)" fg:x="52797" fg:w="611"/><text x="80.5142%" y="303.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (558 samples, 0.85%)</title><rect x="80.3448%" y="277" width="0.8483%" height="15" fill="rgb(235,212,8)" fg:x="52850" fg:w="558"/><text x="80.5948%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (505 samples, 0.77%)</title><rect x="80.4254%" y="261" width="0.7677%" height="15" fill="rgb(223,33,50)" fg:x="52903" fg:w="505"/><text x="80.6754%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.02%)</title><rect x="81.1764%" y="245" width="0.0167%" height="15" fill="rgb(219,149,13)" fg:x="53397" fg:w="11"/><text x="81.4264%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.01%)</title><rect x="81.1794%" y="229" width="0.0137%" height="15" fill="rgb(250,156,29)" fg:x="53399" fg:w="9"/><text x="81.4294%" y="239.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="81.1931%" y="293" width="0.0198%" height="15" fill="rgb(216,193,19)" fg:x="53408" fg:w="13"/><text x="81.4431%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (29,768 samples, 45.25%)</title><rect x="35.9644%" y="309" width="45.2546%" height="15" fill="rgb(216,135,14)" fg:x="23657" fg:w="29768"/><text x="36.2144%" y="319.50">rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.02%)</title><rect x="81.3786%" y="245" width="0.0243%" height="15" fill="rgb(241,47,5)" fg:x="53530" fg:w="16"/><text x="81.6286%" y="255.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (56 samples, 0.09%)</title><rect x="81.3345%" y="277" width="0.0851%" height="15" fill="rgb(233,42,35)" fg:x="53501" fg:w="56"/><text x="81.5845%" y="287.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (29 samples, 0.04%)</title><rect x="81.3755%" y="261" width="0.0441%" height="15" fill="rgb(231,13,6)" fg:x="53528" fg:w="29"/><text x="81.6255%" y="271.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 0.02%)</title><rect x="81.4044%" y="245" width="0.0152%" height="15" fill="rgb(207,181,40)" fg:x="53547" fg:w="10"/><text x="81.6544%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode (47,588 samples, 72.35%)</title><rect x="9.0758%" y="325" width="72.3453%" height="15" fill="rgb(254,173,49)" fg:x="5970" fg:w="47588"/><text x="9.3258%" y="335.50">rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode</text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (133 samples, 0.20%)</title><rect x="81.2189%" y="309" width="0.2022%" height="15" fill="rgb(221,1,38)" fg:x="53425" fg:w="133"/><text x="81.4689%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (120 samples, 0.18%)</title><rect x="81.2387%" y="293" width="0.1824%" height="15" fill="rgb(206,124,46)" fg:x="53438" fg:w="120"/><text x="81.4887%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (403 samples, 0.61%)</title><rect x="88.5906%" y="309" width="0.6127%" height="15" fill="rgb(249,21,11)" fg:x="58274" fg:w="403"/><text x="88.8406%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (401 samples, 0.61%)</title><rect x="88.5936%" y="293" width="0.6096%" height="15" fill="rgb(222,201,40)" fg:x="58276" fg:w="401"/><text x="88.8436%" y="303.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (232 samples, 0.35%)</title><rect x="89.2048%" y="309" width="0.3527%" height="15" fill="rgb(235,61,29)" fg:x="58678" fg:w="232"/><text x="89.4548%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (11,583 samples, 17.61%)</title><rect x="81.4211%" y="325" width="17.6090%" height="15" fill="rgb(219,207,3)" fg:x="53558" fg:w="11583"/><text x="81.6711%" y="335.50">rust_qecp`rust_qecp::simula..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (6,231 samples, 9.47%)</title><rect x="89.5575%" y="309" width="9.4726%" height="15" fill="rgb(222,56,46)" fg:x="58910" fg:w="6231"/><text x="89.8075%" y="319.50">rust_qecp`rust..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (4,824 samples, 7.33%)</title><rect x="91.6964%" y="293" width="7.3336%" height="15" fill="rgb(239,76,54)" fg:x="60317" fg:w="4824"/><text x="91.9464%" y="303.50">rust_qecp`..</text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (31 samples, 0.05%)</title><rect x="99.8936%" y="277" width="0.0471%" height="15" fill="rgb(231,124,27)" fg:x="65709" fg:w="31"/><text x="100.1436%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="99.9088%" y="261" width="0.0319%" height="15" fill="rgb(249,195,6)" fg:x="65719" fg:w="21"/><text x="100.1588%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="99.9118%" y="245" width="0.0289%" height="15" fill="rgb(237,174,47)" fg:x="65721" fg:w="19"/><text x="100.1618%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.03%)</title><rect x="99.9133%" y="229" width="0.0274%" height="15" fill="rgb(206,201,31)" fg:x="65722" fg:w="18"/><text x="100.1633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.02%)</title><rect x="99.9179%" y="213" width="0.0228%" height="15" fill="rgb(231,57,52)" fg:x="65725" fg:w="15"/><text x="100.1679%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (39 samples, 0.06%)</title><rect x="99.8829%" y="293" width="0.0593%" height="15" fill="rgb(248,177,22)" fg:x="65702" fg:w="39"/><text x="100.1329%" y="303.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (173 samples, 0.26%)</title><rect x="99.6807%" y="309" width="0.2630%" height="15" fill="rgb(215,211,37)" fg:x="65569" fg:w="173"/><text x="99.9307%" y="319.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (603 samples, 0.92%)</title><rect x="99.0301%" y="325" width="0.9167%" height="15" fill="rgb(241,128,51)" fg:x="65141" fg:w="603"/><text x="99.2801%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::validate_correction (34 samples, 0.05%)</title><rect x="99.9468%" y="325" width="0.0517%" height="15" fill="rgb(227,165,31)" fg:x="65744" fg:w="34"/><text x="100.1968%" y="335.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::code_builder_validate_correction (33 samples, 0.05%)</title><rect x="99.9483%" y="309" width="0.0502%" height="15" fill="rgb(228,167,24)" fg:x="65745" fg:w="33"/><text x="100.1983%" y="319.50"></text></g><g><title>all (65,779 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="65779"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,917 samples, 91.09%)</title><rect x="8.9117%" y="405" width="91.0883%" height="15" fill="rgb(249,149,8)" fg:x="5862" fg:w="59917"/><text x="9.1617%" y="415.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,917 samples, 91.09%)</title><rect x="8.9117%" y="389" width="91.0883%" height="15" fill="rgb(243,35,44)" fg:x="5862" fg:w="59917"/><text x="9.1617%" y="399.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,917 samples, 91.09%)</title><rect x="8.9117%" y="373" width="91.0883%" height="15" fill="rgb(246,89,9)" fg:x="5862" fg:w="59917"/><text x="9.1617%" y="383.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,917 samples, 91.09%)</title><rect x="8.9117%" y="357" width="91.0883%" height="15" fill="rgb(233,213,13)" fg:x="5862" fg:w="59917"/><text x="9.1617%" y="367.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,914 samples, 91.08%)</title><rect x="8.9162%" y="341" width="91.0838%" height="15" fill="rgb(233,141,41)" fg:x="5865" fg:w="59914"/><text x="9.1662%" y="351.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>