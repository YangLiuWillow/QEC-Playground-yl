<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="59985"><g><title>rust_qecp`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write (24 samples, 0.04%)</title><rect x="0.0050%" y="53" width="0.0400%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="24"/><text x="0.2550%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (24 samples, 0.04%)</title><rect x="0.0050%" y="37" width="0.0400%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="24"/><text x="0.2550%" y="47.50"></text></g><g><title>rust_qecp`pbr::pb::ProgressBar&lt;T&gt;::draw (26 samples, 0.04%)</title><rect x="0.0050%" y="69" width="0.0433%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="26"/><text x="0.2550%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::precompute (12 samples, 0.02%)</title><rect x="0.0533%" y="53" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="32" fg:w="12"/><text x="0.3033%" y="63.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::fast_measurement_given_few_errors (9 samples, 0.02%)</title><rect x="0.0750%" y="37" width="0.0150%" height="15" fill="rgb(208,68,35)" fg:x="45" fg:w="9"/><text x="0.3250%" y="47.50"></text></g><g><title>dyld`start (55 samples, 0.09%)</title><rect x="0.0000%" y="309" width="0.0917%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="55"/><text x="0.2500%" y="319.50"></text></g><g><title>rust_qecp`main (54 samples, 0.09%)</title><rect x="0.0017%" y="293" width="0.0900%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="54"/><text x="0.2517%" y="303.50"></text></g><g><title>rust_qecp`std::rt::lang_start_internal (54 samples, 0.09%)</title><rect x="0.0017%" y="277" width="0.0900%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="54"/><text x="0.2517%" y="287.50"></text></g><g><title>rust_qecp`std::rt::lang_start::_{{closure}} (54 samples, 0.09%)</title><rect x="0.0017%" y="261" width="0.0900%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="54"/><text x="0.2517%" y="271.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (54 samples, 0.09%)</title><rect x="0.0017%" y="245" width="0.0900%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="54"/><text x="0.2517%" y="255.50"></text></g><g><title>rust_qecp`rust_qecp::main (54 samples, 0.09%)</title><rect x="0.0017%" y="229" width="0.0900%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="54"/><text x="0.2517%" y="239.50"></text></g><g><title>rust_qecp`tokio::task::local::LocalSet::block_on (54 samples, 0.09%)</title><rect x="0.0017%" y="213" width="0.0900%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="54"/><text x="0.2517%" y="223.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::BasicScheduler::block_on (54 samples, 0.09%)</title><rect x="0.0017%" y="197" width="0.0900%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="54"/><text x="0.2517%" y="207.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (54 samples, 0.09%)</title><rect x="0.0017%" y="181" width="0.0900%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="54"/><text x="0.2517%" y="191.50"></text></g><g><title>rust_qecp`tokio::runtime::basic_scheduler::Context::enter (54 samples, 0.09%)</title><rect x="0.0017%" y="165" width="0.0900%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="54"/><text x="0.2517%" y="175.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.09%)</title><rect x="0.0017%" y="149" width="0.0900%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="54"/><text x="0.2517%" y="159.50"></text></g><g><title>rust_qecp`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (54 samples, 0.09%)</title><rect x="0.0017%" y="133" width="0.0900%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="54"/><text x="0.2517%" y="143.50"></text></g><g><title>rust_qecp`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.09%)</title><rect x="0.0017%" y="117" width="0.0900%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="54"/><text x="0.2517%" y="127.50"></text></g><g><title>rust_qecp`rust_qecp::tool::run_matched_tool (54 samples, 0.09%)</title><rect x="0.0017%" y="101" width="0.0900%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="54"/><text x="0.2517%" y="111.50"></text></g><g><title>rust_qecp`rust_qecp::tool::benchmark (54 samples, 0.09%)</title><rect x="0.0017%" y="85" width="0.0900%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="54"/><text x="0.2517%" y="95.50"></text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::new (25 samples, 0.04%)</title><rect x="0.0500%" y="69" width="0.0417%" height="15" fill="rgb(249,33,26)" fg:x="30" fg:w="25"/><text x="0.3000%" y="79.50"></text></g><g><title>rust_qecp`rust_qecp::model_graph::ModelGraph::build (11 samples, 0.02%)</title><rect x="0.0734%" y="53" width="0.0183%" height="15" fill="rgb(235,183,28)" fg:x="44" fg:w="11"/><text x="0.3234%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (32 samples, 0.05%)</title><rect x="0.0917%" y="245" width="0.0533%" height="15" fill="rgb(221,5,38)" fg:x="55" fg:w="32"/><text x="0.3417%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (104 samples, 0.17%)</title><rect x="0.1484%" y="229" width="0.1734%" height="15" fill="rgb(247,18,42)" fg:x="89" fg:w="104"/><text x="0.3984%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.02%)</title><rect x="0.3234%" y="229" width="0.0183%" height="15" fill="rgb(241,131,45)" fg:x="194" fg:w="11"/><text x="0.5734%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.03%)</title><rect x="0.3418%" y="229" width="0.0300%" height="15" fill="rgb(249,31,29)" fg:x="205" fg:w="18"/><text x="0.5918%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.02%)</title><rect x="0.3751%" y="229" width="0.0183%" height="15" fill="rgb(225,111,53)" fg:x="225" fg:w="11"/><text x="0.6251%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="0.3934%" y="229" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="236" fg:w="8"/><text x="0.6434%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="0.4701%" y="213" width="0.0233%" height="15" fill="rgb(214,148,48)" fg:x="282" fg:w="14"/><text x="0.7201%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="0.4835%" y="197" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="290" fg:w="6"/><text x="0.7335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="0.4835%" y="181" width="0.0100%" height="15" fill="rgb(209,103,24)" fg:x="290" fg:w="6"/><text x="0.7335%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.08%)</title><rect x="0.4935%" y="213" width="0.0800%" height="15" fill="rgb(229,88,8)" fg:x="296" fg:w="48"/><text x="0.7435%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (43 samples, 0.07%)</title><rect x="0.5018%" y="197" width="0.0717%" height="15" fill="rgb(213,181,19)" fg:x="301" fg:w="43"/><text x="0.7518%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="0.5568%" y="181" width="0.0167%" height="15" fill="rgb(254,191,54)" fg:x="334" fg:w="10"/><text x="0.8068%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="0.6235%" y="197" width="0.0133%" height="15" fill="rgb(241,83,37)" fg:x="374" fg:w="8"/><text x="0.8735%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.02%)</title><rect x="0.6685%" y="165" width="0.0150%" height="15" fill="rgb(233,36,39)" fg:x="401" fg:w="9"/><text x="0.9185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (31 samples, 0.05%)</title><rect x="0.6368%" y="197" width="0.0517%" height="15" fill="rgb(226,3,54)" fg:x="382" fg:w="31"/><text x="0.8868%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 0.04%)</title><rect x="0.6535%" y="181" width="0.0350%" height="15" fill="rgb(245,192,40)" fg:x="392" fg:w="21"/><text x="0.9035%" y="191.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (169 samples, 0.28%)</title><rect x="0.4101%" y="229" width="0.2817%" height="15" fill="rgb(238,167,29)" fg:x="246" fg:w="169"/><text x="0.6601%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (59 samples, 0.10%)</title><rect x="0.5935%" y="213" width="0.0984%" height="15" fill="rgb(232,182,51)" fg:x="356" fg:w="59"/><text x="0.8435%" y="223.50"></text></g><g><title>rust_qecp`DYLD-STUB$$free (17 samples, 0.03%)</title><rect x="0.6918%" y="229" width="0.0283%" height="15" fill="rgb(231,60,39)" fg:x="415" fg:w="17"/><text x="0.9418%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (6 samples, 0.01%)</title><rect x="0.7268%" y="229" width="0.0100%" height="15" fill="rgb(208,69,12)" fg:x="436" fg:w="6"/><text x="0.9768%" y="239.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (18 samples, 0.03%)</title><rect x="0.7369%" y="229" width="0.0300%" height="15" fill="rgb(235,93,37)" fg:x="442" fg:w="18"/><text x="0.9869%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.02%)</title><rect x="0.8235%" y="181" width="0.0183%" height="15" fill="rgb(213,116,39)" fg:x="494" fg:w="11"/><text x="1.0735%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (26 samples, 0.04%)</title><rect x="0.8019%" y="197" width="0.0433%" height="15" fill="rgb(222,207,29)" fg:x="481" fg:w="26"/><text x="1.0519%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.03%)</title><rect x="0.8452%" y="197" width="0.0250%" height="15" fill="rgb(206,96,30)" fg:x="507" fg:w="15"/><text x="1.0952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.02%)</title><rect x="0.8469%" y="181" width="0.0233%" height="15" fill="rgb(218,138,4)" fg:x="508" fg:w="14"/><text x="1.0969%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.01%)</title><rect x="0.8736%" y="197" width="0.0100%" height="15" fill="rgb(250,191,14)" fg:x="524" fg:w="6"/><text x="1.1236%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.10%)</title><rect x="0.7952%" y="213" width="0.1000%" height="15" fill="rgb(239,60,40)" fg:x="477" fg:w="60"/><text x="1.0452%" y="223.50"></text></g><g><title>rust_qecp`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (76 samples, 0.13%)</title><rect x="0.7752%" y="229" width="0.1267%" height="15" fill="rgb(206,27,48)" fg:x="465" fg:w="76"/><text x="1.0252%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (10 samples, 0.02%)</title><rect x="0.9102%" y="229" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="546" fg:w="10"/><text x="1.1602%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (90 samples, 0.15%)</title><rect x="1.7104%" y="213" width="0.1500%" height="15" fill="rgb(250,213,24)" fg:x="1026" fg:w="90"/><text x="1.9604%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.02%)</title><rect x="1.8888%" y="181" width="0.0217%" height="15" fill="rgb(247,123,22)" fg:x="1133" fg:w="13"/><text x="2.1388%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.05%)</title><rect x="1.8605%" y="213" width="0.0517%" height="15" fill="rgb(231,138,38)" fg:x="1116" fg:w="31"/><text x="2.1105%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="1.8788%" y="197" width="0.0333%" height="15" fill="rgb(231,145,46)" fg:x="1127" fg:w="20"/><text x="2.1288%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.02%)</title><rect x="1.9121%" y="213" width="0.0150%" height="15" fill="rgb(251,118,11)" fg:x="1147" fg:w="9"/><text x="2.1621%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (39 samples, 0.07%)</title><rect x="2.0638%" y="197" width="0.0650%" height="15" fill="rgb(217,147,25)" fg:x="1238" fg:w="39"/><text x="2.3138%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (121 samples, 0.20%)</title><rect x="1.9338%" y="213" width="0.2017%" height="15" fill="rgb(247,81,37)" fg:x="1160" fg:w="121"/><text x="2.1838%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="2.1689%" y="181" width="0.0183%" height="15" fill="rgb(209,12,38)" fg:x="1301" fg:w="11"/><text x="2.4189%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.06%)</title><rect x="2.1372%" y="213" width="0.0583%" height="15" fill="rgb(227,1,9)" fg:x="1282" fg:w="35"/><text x="2.3872%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.05%)</title><rect x="2.1455%" y="197" width="0.0500%" height="15" fill="rgb(248,47,43)" fg:x="1287" fg:w="30"/><text x="2.3955%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="2.1955%" y="213" width="0.0267%" height="15" fill="rgb(221,10,30)" fg:x="1317" fg:w="16"/><text x="2.4455%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (65 samples, 0.11%)</title><rect x="2.2222%" y="213" width="0.1084%" height="15" fill="rgb(210,229,1)" fg:x="1333" fg:w="65"/><text x="2.4722%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.02%)</title><rect x="2.3306%" y="213" width="0.0167%" height="15" fill="rgb(222,148,37)" fg:x="1398" fg:w="10"/><text x="2.5806%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.01%)</title><rect x="2.3539%" y="213" width="0.0117%" height="15" fill="rgb(234,67,33)" fg:x="1412" fg:w="7"/><text x="2.6039%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.09%)</title><rect x="2.4206%" y="197" width="0.0900%" height="15" fill="rgb(247,98,35)" fg:x="1452" fg:w="54"/><text x="2.6706%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.03%)</title><rect x="2.4790%" y="181" width="0.0317%" height="15" fill="rgb(247,138,52)" fg:x="1487" fg:w="19"/><text x="2.7290%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.03%)</title><rect x="2.4823%" y="165" width="0.0283%" height="15" fill="rgb(213,79,30)" fg:x="1489" fg:w="17"/><text x="2.7323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (91 samples, 0.15%)</title><rect x="2.5106%" y="197" width="0.1517%" height="15" fill="rgb(246,177,23)" fg:x="1506" fg:w="91"/><text x="2.7606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (66 samples, 0.11%)</title><rect x="2.5523%" y="181" width="0.1100%" height="15" fill="rgb(230,62,27)" fg:x="1531" fg:w="66"/><text x="2.8023%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.05%)</title><rect x="2.6140%" y="165" width="0.0483%" height="15" fill="rgb(216,154,8)" fg:x="1568" fg:w="29"/><text x="2.8640%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.01%)</title><rect x="2.6640%" y="197" width="0.0117%" height="15" fill="rgb(244,35,45)" fg:x="1598" fg:w="7"/><text x="2.9140%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.02%)</title><rect x="2.6757%" y="197" width="0.0167%" height="15" fill="rgb(251,115,12)" fg:x="1605" fg:w="10"/><text x="2.9257%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (210 samples, 0.35%)</title><rect x="2.3656%" y="213" width="0.3501%" height="15" fill="rgb(240,54,50)" fg:x="1419" fg:w="210"/><text x="2.6156%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (12 samples, 0.02%)</title><rect x="2.6957%" y="197" width="0.0200%" height="15" fill="rgb(233,84,52)" fg:x="1617" fg:w="12"/><text x="2.9457%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.01%)</title><rect x="2.7524%" y="149" width="0.0100%" height="15" fill="rgb(207,117,47)" fg:x="1651" fg:w="6"/><text x="3.0024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.01%)</title><rect x="2.7507%" y="181" width="0.0133%" height="15" fill="rgb(249,43,39)" fg:x="1650" fg:w="8"/><text x="3.0007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.01%)</title><rect x="2.7507%" y="165" width="0.0133%" height="15" fill="rgb(209,38,44)" fg:x="1650" fg:w="8"/><text x="3.0007%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.02%)</title><rect x="2.7490%" y="197" width="0.0167%" height="15" fill="rgb(236,212,23)" fg:x="1649" fg:w="10"/><text x="2.9990%" y="207.50"></text></g><g><title>rust_qecp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.06%)</title><rect x="2.7157%" y="213" width="0.0617%" height="15" fill="rgb(242,79,21)" fg:x="1629" fg:w="37"/><text x="2.9657%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="2.7657%" y="197" width="0.0117%" height="15" fill="rgb(211,96,35)" fg:x="1659" fg:w="7"/><text x="3.0157%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.03%)</title><rect x="2.8140%" y="181" width="0.0333%" height="15" fill="rgb(253,215,40)" fg:x="1688" fg:w="20"/><text x="3.0640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="2.8157%" y="165" width="0.0317%" height="15" fill="rgb(211,81,21)" fg:x="1689" fg:w="19"/><text x="3.0657%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="2.8274%" y="149" width="0.0200%" height="15" fill="rgb(208,190,38)" fg:x="1696" fg:w="12"/><text x="3.0774%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.04%)</title><rect x="2.8107%" y="197" width="0.0400%" height="15" fill="rgb(235,213,38)" fg:x="1686" fg:w="24"/><text x="3.0607%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="2.8724%" y="181" width="0.0217%" height="15" fill="rgb(237,122,38)" fg:x="1723" fg:w="13"/><text x="3.1224%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (36 samples, 0.06%)</title><rect x="2.8540%" y="197" width="0.0600%" height="15" fill="rgb(244,218,35)" fg:x="1712" fg:w="36"/><text x="3.1040%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.02%)</title><rect x="2.8957%" y="181" width="0.0183%" height="15" fill="rgb(240,68,47)" fg:x="1737" fg:w="11"/><text x="3.1457%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (78 samples, 0.13%)</title><rect x="2.7924%" y="213" width="0.1300%" height="15" fill="rgb(210,16,53)" fg:x="1675" fg:w="78"/><text x="3.0424%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (13 samples, 0.02%)</title><rect x="2.9257%" y="213" width="0.0217%" height="15" fill="rgb(235,124,12)" fg:x="1755" fg:w="13"/><text x="3.1757%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (12 samples, 0.02%)</title><rect x="2.9474%" y="213" width="0.0200%" height="15" fill="rgb(224,169,11)" fg:x="1768" fg:w="12"/><text x="3.1974%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.02%)</title><rect x="2.9674%" y="213" width="0.0183%" height="15" fill="rgb(250,166,2)" fg:x="1780" fg:w="11"/><text x="3.2174%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.02%)</title><rect x="3.0541%" y="181" width="0.0150%" height="15" fill="rgb(242,216,29)" fg:x="1832" fg:w="9"/><text x="3.3041%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (27 samples, 0.05%)</title><rect x="3.1158%" y="149" width="0.0450%" height="15" fill="rgb(230,116,27)" fg:x="1869" fg:w="27"/><text x="3.3658%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.02%)</title><rect x="3.1375%" y="133" width="0.0233%" height="15" fill="rgb(228,99,48)" fg:x="1882" fg:w="14"/><text x="3.3875%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="3.1408%" y="117" width="0.0200%" height="15" fill="rgb(253,11,6)" fg:x="1884" fg:w="12"/><text x="3.3908%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.01%)</title><rect x="3.1508%" y="101" width="0.0100%" height="15" fill="rgb(247,143,39)" fg:x="1890" fg:w="6"/><text x="3.4008%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="3.1808%" y="133" width="0.0133%" height="15" fill="rgb(236,97,10)" fg:x="1908" fg:w="8"/><text x="3.4308%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="3.2225%" y="117" width="0.0117%" height="15" fill="rgb(233,208,19)" fg:x="1933" fg:w="7"/><text x="3.4725%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (35 samples, 0.06%)</title><rect x="3.2025%" y="133" width="0.0583%" height="15" fill="rgb(216,164,2)" fg:x="1921" fg:w="35"/><text x="3.4525%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.02%)</title><rect x="3.2441%" y="117" width="0.0167%" height="15" fill="rgb(220,129,5)" fg:x="1946" fg:w="10"/><text x="3.4941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.06%)</title><rect x="3.2625%" y="133" width="0.0583%" height="15" fill="rgb(242,17,10)" fg:x="1957" fg:w="35"/><text x="3.5125%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.05%)</title><rect x="3.2758%" y="117" width="0.0450%" height="15" fill="rgb(242,107,0)" fg:x="1965" fg:w="27"/><text x="3.5258%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (20 samples, 0.03%)</title><rect x="3.2875%" y="101" width="0.0333%" height="15" fill="rgb(251,28,31)" fg:x="1972" fg:w="20"/><text x="3.5375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.01%)</title><rect x="3.3208%" y="133" width="0.0100%" height="15" fill="rgb(233,223,10)" fg:x="1992" fg:w="6"/><text x="3.5708%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.01%)</title><rect x="3.3208%" y="117" width="0.0100%" height="15" fill="rgb(215,21,27)" fg:x="1992" fg:w="6"/><text x="3.5708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (100 samples, 0.17%)</title><rect x="3.1708%" y="149" width="0.1667%" height="15" fill="rgb(232,23,21)" fg:x="1902" fg:w="100"/><text x="3.4208%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (178 samples, 0.30%)</title><rect x="3.0991%" y="165" width="0.2967%" height="15" fill="rgb(244,5,23)" fg:x="1859" fg:w="178"/><text x="3.3491%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 0.06%)</title><rect x="3.3375%" y="149" width="0.0583%" height="15" fill="rgb(226,81,46)" fg:x="2002" fg:w="35"/><text x="3.5875%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="3.3958%" y="165" width="0.0200%" height="15" fill="rgb(247,70,30)" fg:x="2037" fg:w="12"/><text x="3.6458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (238 samples, 0.40%)</title><rect x="3.0758%" y="181" width="0.3968%" height="15" fill="rgb(212,68,19)" fg:x="1845" fg:w="238"/><text x="3.3258%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (25 samples, 0.04%)</title><rect x="3.4309%" y="165" width="0.0417%" height="15" fill="rgb(240,187,13)" fg:x="2058" fg:w="25"/><text x="3.6809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (23 samples, 0.04%)</title><rect x="3.4342%" y="149" width="0.0383%" height="15" fill="rgb(223,113,26)" fg:x="2060" fg:w="23"/><text x="3.6842%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (294 samples, 0.49%)</title><rect x="2.9857%" y="213" width="0.4901%" height="15" fill="rgb(206,192,2)" fg:x="1791" fg:w="294"/><text x="3.2357%" y="223.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (256 samples, 0.43%)</title><rect x="3.0491%" y="197" width="0.4268%" height="15" fill="rgb(241,108,4)" fg:x="1829" fg:w="256"/><text x="3.2991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.01%)</title><rect x="5.2863%" y="181" width="0.0133%" height="15" fill="rgb(247,173,49)" fg:x="3171" fg:w="8"/><text x="5.5363%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.01%)</title><rect x="5.3247%" y="133" width="0.0100%" height="15" fill="rgb(224,114,35)" fg:x="3194" fg:w="6"/><text x="5.5747%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.05%)</title><rect x="5.3080%" y="165" width="0.0450%" height="15" fill="rgb(245,159,27)" fg:x="3184" fg:w="27"/><text x="5.5580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (26 samples, 0.04%)</title><rect x="5.3097%" y="149" width="0.0433%" height="15" fill="rgb(245,172,44)" fg:x="3185" fg:w="26"/><text x="5.5597%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.02%)</title><rect x="5.3380%" y="133" width="0.0150%" height="15" fill="rgb(236,23,11)" fg:x="3202" fg:w="9"/><text x="5.5880%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (55 samples, 0.09%)</title><rect x="5.2763%" y="197" width="0.0917%" height="15" fill="rgb(205,117,38)" fg:x="3165" fg:w="55"/><text x="5.5263%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.07%)</title><rect x="5.3030%" y="181" width="0.0650%" height="15" fill="rgb(237,72,25)" fg:x="3181" fg:w="39"/><text x="5.5530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.02%)</title><rect x="5.3530%" y="165" width="0.0150%" height="15" fill="rgb(244,70,9)" fg:x="3211" fg:w="9"/><text x="5.6030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.02%)</title><rect x="5.3847%" y="181" width="0.0150%" height="15" fill="rgb(217,125,39)" fg:x="3230" fg:w="9"/><text x="5.6347%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="5.3680%" y="197" width="0.0417%" height="15" fill="rgb(235,36,10)" fg:x="3220" fg:w="25"/><text x="5.6180%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.01%)</title><rect x="5.4430%" y="181" width="0.0117%" height="15" fill="rgb(251,123,47)" fg:x="3265" fg:w="7"/><text x="5.6930%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (6 samples, 0.01%)</title><rect x="5.4630%" y="181" width="0.0100%" height="15" fill="rgb(221,13,13)" fg:x="3277" fg:w="6"/><text x="5.7130%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (55 samples, 0.09%)</title><rect x="5.4097%" y="197" width="0.0917%" height="15" fill="rgb(238,131,9)" fg:x="3245" fg:w="55"/><text x="5.6597%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (17 samples, 0.03%)</title><rect x="5.4730%" y="181" width="0.0283%" height="15" fill="rgb(211,50,8)" fg:x="3283" fg:w="17"/><text x="5.7230%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.02%)</title><rect x="5.5097%" y="197" width="0.0150%" height="15" fill="rgb(245,182,24)" fg:x="3305" fg:w="9"/><text x="5.7597%" y="207.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (376 samples, 0.63%)</title><rect x="5.5481%" y="197" width="0.6268%" height="15" fill="rgb(242,14,37)" fg:x="3328" fg:w="376"/><text x="5.7981%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (7 samples, 0.01%)</title><rect x="6.4016%" y="181" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="3840" fg:w="7"/><text x="6.6516%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.01%)</title><rect x="6.4016%" y="165" width="0.0117%" height="15" fill="rgb(213,55,15)" fg:x="3840" fg:w="7"/><text x="6.6516%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (278 samples, 0.46%)</title><rect x="6.4133%" y="181" width="0.4634%" height="15" fill="rgb(209,9,3)" fg:x="3847" fg:w="278"/><text x="6.6633%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (31 samples, 0.05%)</title><rect x="6.9067%" y="181" width="0.0517%" height="15" fill="rgb(230,59,30)" fg:x="4143" fg:w="31"/><text x="7.1567%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::AddEdge (997 samples, 1.66%)</title><rect x="6.9634%" y="181" width="1.6621%" height="15" fill="rgb(209,121,21)" fg:x="4177" fg:w="997"/><text x="7.2134%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Finish (92 samples, 0.15%)</title><rect x="8.6255%" y="181" width="0.1534%" height="15" fill="rgb(220,109,13)" fg:x="5174" fg:w="92"/><text x="8.8755%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::GetMatch (25 samples, 0.04%)</title><rect x="8.7789%" y="181" width="0.0417%" height="15" fill="rgb(232,18,1)" fg:x="5266" fg:w="25"/><text x="9.0289%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.02%)</title><rect x="8.8489%" y="117" width="0.0167%" height="15" fill="rgb(215,41,42)" fg:x="5308" fg:w="10"/><text x="9.0989%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="8.8322%" y="149" width="0.0367%" height="15" fill="rgb(224,123,36)" fg:x="5298" fg:w="22"/><text x="9.0822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.03%)</title><rect x="8.8422%" y="133" width="0.0267%" height="15" fill="rgb(240,125,3)" fg:x="5304" fg:w="16"/><text x="9.0922%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (24 samples, 0.04%)</title><rect x="8.8322%" y="165" width="0.0400%" height="15" fill="rgb(205,98,50)" fg:x="5298" fg:w="24"/><text x="9.0822%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (7 samples, 0.01%)</title><rect x="8.8922%" y="133" width="0.0117%" height="15" fill="rgb(205,185,37)" fg:x="5334" fg:w="7"/><text x="9.1422%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (14 samples, 0.02%)</title><rect x="8.9256%" y="101" width="0.0233%" height="15" fill="rgb(238,207,15)" fg:x="5354" fg:w="14"/><text x="9.1756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (54 samples, 0.09%)</title><rect x="8.8722%" y="165" width="0.0900%" height="15" fill="rgb(213,199,42)" fg:x="5322" fg:w="54"/><text x="9.1222%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="8.8789%" y="149" width="0.0834%" height="15" fill="rgb(235,201,11)" fg:x="5326" fg:w="50"/><text x="9.1289%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (35 samples, 0.06%)</title><rect x="8.9039%" y="133" width="0.0583%" height="15" fill="rgb(207,46,11)" fg:x="5341" fg:w="35"/><text x="9.1539%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (32 samples, 0.05%)</title><rect x="8.9089%" y="117" width="0.0533%" height="15" fill="rgb(241,35,35)" fg:x="5344" fg:w="32"/><text x="9.1589%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::PerfectMatching (83 samples, 0.14%)</title><rect x="8.8272%" y="181" width="0.1384%" height="15" fill="rgb(243,32,47)" fg:x="5295" fg:w="83"/><text x="9.0772%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (134 samples, 0.22%)</title><rect x="8.9656%" y="181" width="0.2234%" height="15" fill="rgb(247,202,23)" fg:x="5378" fg:w="134"/><text x="9.2156%" y="191.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (6 samples, 0.01%)</title><rect x="9.1890%" y="181" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="5512" fg:w="6"/><text x="9.4390%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (8 samples, 0.01%)</title><rect x="9.5190%" y="165" width="0.0133%" height="15" fill="rgb(243,110,44)" fg:x="5710" fg:w="8"/><text x="9.7690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.01%)</title><rect x="9.5190%" y="149" width="0.0133%" height="15" fill="rgb(222,74,54)" fg:x="5710" fg:w="8"/><text x="9.7690%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.01%)</title><rect x="9.5207%" y="133" width="0.0117%" height="15" fill="rgb(216,99,12)" fg:x="5711" fg:w="7"/><text x="9.7707%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.01%)</title><rect x="9.5207%" y="117" width="0.0117%" height="15" fill="rgb(226,22,26)" fg:x="5711" fg:w="7"/><text x="9.7707%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (6 samples, 0.01%)</title><rect x="9.5224%" y="101" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="5712" fg:w="6"/><text x="9.7724%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`getrusage (1,500 samples, 2.50%)</title><rect x="9.5324%" y="165" width="2.5006%" height="15" fill="rgb(213,25,53)" fg:x="5718" fg:w="1500"/><text x="9.7824%" y="175.50">li..</text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (308 samples, 0.51%)</title><rect x="12.0413%" y="149" width="0.5135%" height="15" fill="rgb(252,105,26)" fg:x="7223" fg:w="308"/><text x="12.2913%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (323 samples, 0.54%)</title><rect x="12.0363%" y="165" width="0.5385%" height="15" fill="rgb(220,39,43)" fg:x="7220" fg:w="323"/><text x="12.2863%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (12 samples, 0.02%)</title><rect x="12.5548%" y="149" width="0.0200%" height="15" fill="rgb(229,68,48)" fg:x="7531" fg:w="12"/><text x="12.8048%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranchInit (6 samples, 0.01%)</title><rect x="12.5748%" y="165" width="0.0100%" height="15" fill="rgb(252,8,32)" fg:x="7543" fg:w="6"/><text x="12.8248%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Expand (65 samples, 0.11%)</title><rect x="12.5898%" y="165" width="0.1084%" height="15" fill="rgb(223,20,43)" fg:x="7552" fg:w="65"/><text x="12.8398%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (10 samples, 0.02%)</title><rect x="12.6982%" y="165" width="0.0167%" height="15" fill="rgb(229,81,49)" fg:x="7617" fg:w="10"/><text x="12.9482%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowNode (452 samples, 0.75%)</title><rect x="13.3983%" y="149" width="0.7535%" height="15" fill="rgb(236,28,36)" fg:x="8037" fg:w="452"/><text x="13.6483%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (26 samples, 0.04%)</title><rect x="14.1085%" y="133" width="0.0433%" height="15" fill="rgb(249,185,26)" fg:x="8463" fg:w="26"/><text x="14.3585%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (26 samples, 0.04%)</title><rect x="14.1085%" y="117" width="0.0433%" height="15" fill="rgb(249,174,33)" fg:x="8463" fg:w="26"/><text x="14.3585%" y="127.50"></text></g><g><title>rust_qecp`PerfectMatching::GrowTree (1,019 samples, 1.70%)</title><rect x="12.7148%" y="165" width="1.6988%" height="15" fill="rgb(233,201,37)" fg:x="7627" fg:w="1019"/><text x="12.9648%" y="175.50"></text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (157 samples, 0.26%)</title><rect x="14.1519%" y="149" width="0.2617%" height="15" fill="rgb(221,78,26)" fg:x="8489" fg:w="157"/><text x="14.4019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="19.5032%" y="133" width="0.0100%" height="15" fill="rgb(250,127,30)" fg:x="11699" fg:w="6"/><text x="19.7532%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::InitGreedy (2,387 samples, 3.98%)</title><rect x="15.5389%" y="149" width="3.9793%" height="15" fill="rgb(230,49,44)" fg:x="9321" fg:w="2387"/><text x="15.7889%" y="159.50">rust..</text></g><g><title>rust_qecp`PerfectMatching::InitGlobal (3,090 samples, 5.15%)</title><rect x="14.4136%" y="165" width="5.1513%" height="15" fill="rgb(229,67,23)" fg:x="8646" fg:w="3090"/><text x="14.6636%" y="175.50">rust_q..</text></g><g><title>rust_qecp`PerfectMatching::ShrinkInit (28 samples, 0.05%)</title><rect x="19.5182%" y="149" width="0.0467%" height="15" fill="rgb(249,83,47)" fg:x="11708" fg:w="28"/><text x="19.7682%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::ProcessEdge00 (10 samples, 0.02%)</title><rect x="19.5666%" y="165" width="0.0167%" height="15" fill="rgb(215,43,3)" fg:x="11737" fg:w="10"/><text x="19.8166%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::AugmentBranch (10 samples, 0.02%)</title><rect x="20.5951%" y="133" width="0.0167%" height="15" fill="rgb(238,154,13)" fg:x="12354" fg:w="10"/><text x="20.8451%" y="143.50"></text></g><g><title>rust_qecp`PerfectMatching::Augment (15 samples, 0.03%)</title><rect x="20.5951%" y="149" width="0.0250%" height="15" fill="rgb(219,56,2)" fg:x="12354" fg:w="15"/><text x="20.8451%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::Shrink (668 samples, 1.11%)</title><rect x="19.5832%" y="165" width="1.1136%" height="15" fill="rgb(233,0,4)" fg:x="11747" fg:w="668"/><text x="19.8332%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::FindBlossomRoot (46 samples, 0.08%)</title><rect x="20.6202%" y="149" width="0.0767%" height="15" fill="rgb(235,30,7)" fg:x="12369" fg:w="46"/><text x="20.8702%" y="159.50"></text></g><g><title>rust_qecp`PerfectMatching::UpdateDuals (8 samples, 0.01%)</title><rect x="20.6968%" y="165" width="0.0133%" height="15" fill="rgb(250,79,13)" fg:x="12415" fg:w="8"/><text x="20.9468%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::Solve (7,074 samples, 11.79%)</title><rect x="9.1990%" y="181" width="11.7929%" height="15" fill="rgb(211,146,34)" fg:x="5518" fg:w="7074"/><text x="9.4490%" y="191.50">rust_qecp`Perfect..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (169 samples, 0.28%)</title><rect x="20.7102%" y="165" width="0.2817%" height="15" fill="rgb(228,22,38)" fg:x="12423" fg:w="169"/><text x="20.9602%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.02%)</title><rect x="21.0286%" y="149" width="0.0200%" height="15" fill="rgb(235,168,5)" fg:x="12614" fg:w="12"/><text x="21.2786%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.01%)</title><rect x="21.0519%" y="149" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="12628" fg:w="8"/><text x="21.3019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.06%)</title><rect x="21.0053%" y="165" width="0.0633%" height="15" fill="rgb(215,215,53)" fg:x="12600" fg:w="38"/><text x="21.2553%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="21.1236%" y="149" width="0.0133%" height="15" fill="rgb(223,4,10)" fg:x="12671" fg:w="8"/><text x="21.3736%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (43 samples, 0.07%)</title><rect x="21.0769%" y="165" width="0.0717%" height="15" fill="rgb(234,103,6)" fg:x="12643" fg:w="43"/><text x="21.3269%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.01%)</title><rect x="21.1486%" y="165" width="0.0117%" height="15" fill="rgb(227,97,0)" fg:x="12686" fg:w="7"/><text x="21.3986%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="21.1620%" y="165" width="0.0133%" height="15" fill="rgb(234,150,53)" fg:x="12694" fg:w="8"/><text x="21.4120%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.01%)</title><rect x="21.1803%" y="165" width="0.0100%" height="15" fill="rgb(228,201,54)" fg:x="12705" fg:w="6"/><text x="21.4303%" y="175.50"></text></g><g><title>rust_qecp`PerfectMatching::~PerfectMatching (122 samples, 0.20%)</title><rect x="20.9919%" y="181" width="0.2034%" height="15" fill="rgb(222,22,37)" fg:x="12592" fg:w="122"/><text x="21.2419%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::blossom_v::safe_minimum_weight_perfect_matching (10,696 samples, 17.83%)</title><rect x="3.4792%" y="213" width="17.8311%" height="15" fill="rgb(237,53,32)" fg:x="2087" fg:w="10696"/><text x="3.7292%" y="223.50">rust_qecp`rust_qecp::blossom..</text></g><g><title>rust_qecp`minimum_weight_perfect_matching (9,071 samples, 15.12%)</title><rect x="6.1882%" y="197" width="15.1221%" height="15" fill="rgb(233,25,53)" fg:x="3712" fg:w="9071"/><text x="6.4382%" y="207.50">rust_qecp`minimum_weigh..</text></g><g><title>rust_qecp`PriorityQueue&lt;double&gt;::_Remove(PriorityQueue (69 samples, 0.12%)</title><rect x="21.1953%" y="181" width="0.1150%" height="15" fill="rgb(210,40,34)" fg:x="12714" fg:w="69"/><text x="21.4453%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="21.3287%" y="181" width="0.0117%" height="15" fill="rgb(241,220,44)" fg:x="12794" fg:w="7"/><text x="21.5787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.01%)</title><rect x="21.3653%" y="101" width="0.0133%" height="15" fill="rgb(235,28,35)" fg:x="12816" fg:w="8"/><text x="21.6153%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="21.3503%" y="149" width="0.0483%" height="15" fill="rgb(210,56,17)" fg:x="12807" fg:w="29"/><text x="21.6003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.05%)</title><rect x="21.3537%" y="133" width="0.0450%" height="15" fill="rgb(224,130,29)" fg:x="12809" fg:w="27"/><text x="21.6037%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.04%)</title><rect x="21.3553%" y="117" width="0.0433%" height="15" fill="rgb(235,212,8)" fg:x="12810" fg:w="26"/><text x="21.6053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.02%)</title><rect x="21.3787%" y="101" width="0.0200%" height="15" fill="rgb(223,33,50)" fg:x="12824" fg:w="12"/><text x="21.6287%" y="111.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (33 samples, 0.06%)</title><rect x="21.4004%" y="149" width="0.0550%" height="15" fill="rgb(219,149,13)" fg:x="12837" fg:w="33"/><text x="21.6504%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.02%)</title><rect x="21.4354%" y="133" width="0.0200%" height="15" fill="rgb(250,156,29)" fg:x="12858" fg:w="12"/><text x="21.6854%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (68 samples, 0.11%)</title><rect x="21.3487%" y="165" width="0.1134%" height="15" fill="rgb(216,193,19)" fg:x="12806" fg:w="68"/><text x="21.5987%" y="175.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_boundary (94 samples, 0.16%)</title><rect x="21.3103%" y="213" width="0.1567%" height="15" fill="rgb(216,135,14)" fg:x="12783" fg:w="94"/><text x="21.5603%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (84 samples, 0.14%)</title><rect x="21.3270%" y="197" width="0.1400%" height="15" fill="rgb(241,47,5)" fg:x="12793" fg:w="84"/><text x="21.5770%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (76 samples, 0.13%)</title><rect x="21.3403%" y="181" width="0.1267%" height="15" fill="rgb(233,42,35)" fg:x="12801" fg:w="76"/><text x="21.5903%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (8 samples, 0.01%)</title><rect x="22.5456%" y="197" width="0.0133%" height="15" fill="rgb(231,13,6)" fg:x="13524" fg:w="8"/><text x="22.7956%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (16 samples, 0.03%)</title><rect x="22.6257%" y="181" width="0.0267%" height="15" fill="rgb(207,181,40)" fg:x="13572" fg:w="16"/><text x="22.8757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (24 samples, 0.04%)</title><rect x="22.7574%" y="101" width="0.0400%" height="15" fill="rgb(254,173,49)" fg:x="13651" fg:w="24"/><text x="23.0074%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (99 samples, 0.17%)</title><rect x="22.7123%" y="133" width="0.1650%" height="15" fill="rgb(221,1,38)" fg:x="13624" fg:w="99"/><text x="22.9623%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (92 samples, 0.15%)</title><rect x="22.7240%" y="117" width="0.1534%" height="15" fill="rgb(206,124,46)" fg:x="13631" fg:w="92"/><text x="22.9740%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.08%)</title><rect x="22.7974%" y="101" width="0.0800%" height="15" fill="rgb(249,21,11)" fg:x="13675" fg:w="48"/><text x="23.0474%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (112 samples, 0.19%)</title><rect x="22.6973%" y="149" width="0.1867%" height="15" fill="rgb(222,201,40)" fg:x="13615" fg:w="112"/><text x="22.9473%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.01%)</title><rect x="22.8841%" y="149" width="0.0100%" height="15" fill="rgb(235,61,29)" fg:x="13727" fg:w="6"/><text x="23.1341%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (56 samples, 0.09%)</title><rect x="22.9024%" y="149" width="0.0934%" height="15" fill="rgb(219,207,3)" fg:x="13738" fg:w="56"/><text x="23.1524%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (34 samples, 0.06%)</title><rect x="22.9391%" y="133" width="0.0567%" height="15" fill="rgb(222,56,46)" fg:x="13760" fg:w="34"/><text x="23.1891%" y="143.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (195 samples, 0.33%)</title><rect x="22.6807%" y="165" width="0.3251%" height="15" fill="rgb(239,76,54)" fg:x="13605" fg:w="195"/><text x="22.9307%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.01%)</title><rect x="22.9957%" y="149" width="0.0100%" height="15" fill="rgb(231,124,27)" fg:x="13794" fg:w="6"/><text x="23.2457%" y="159.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::build_correction_matching (933 samples, 1.56%)</title><rect x="21.4670%" y="213" width="1.5554%" height="15" fill="rgb(249,195,6)" fg:x="12877" fg:w="933"/><text x="21.7170%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (278 samples, 0.46%)</title><rect x="22.5590%" y="197" width="0.4634%" height="15" fill="rgb(237,174,47)" fg:x="13532" fg:w="278"/><text x="22.8090%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (219 samples, 0.37%)</title><rect x="22.6573%" y="181" width="0.3651%" height="15" fill="rgb(206,201,31)" fg:x="13591" fg:w="219"/><text x="22.9073%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (10 samples, 0.02%)</title><rect x="23.0058%" y="165" width="0.0167%" height="15" fill="rgb(231,57,52)" fg:x="13800" fg:w="10"/><text x="23.2558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.01%)</title><rect x="40.8102%" y="181" width="0.0100%" height="15" fill="rgb(248,177,22)" fg:x="24480" fg:w="6"/><text x="41.0602%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.01%)</title><rect x="40.8219%" y="181" width="0.0100%" height="15" fill="rgb(215,211,37)" fg:x="24487" fg:w="6"/><text x="41.0719%" y="191.50"></text></g><g><title>rust_qecp`DYLD-STUB$$realloc (7 samples, 0.01%)</title><rect x="40.8385%" y="181" width="0.0117%" height="15" fill="rgb(241,128,51)" fg:x="24497" fg:w="7"/><text x="41.0885%" y="191.50"></text></g><g><title>rust_qecp`__rdl_alloc (8 samples, 0.01%)</title><rect x="40.8502%" y="181" width="0.0133%" height="15" fill="rgb(227,165,31)" fg:x="24504" fg:w="8"/><text x="41.1002%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.02%)</title><rect x="40.9736%" y="149" width="0.0150%" height="15" fill="rgb(228,167,24)" fg:x="24578" fg:w="9"/><text x="41.2236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (68 samples, 0.11%)</title><rect x="41.0136%" y="133" width="0.1134%" height="15" fill="rgb(228,143,12)" fg:x="24602" fg:w="68"/><text x="41.2636%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.03%)</title><rect x="41.0969%" y="117" width="0.0300%" height="15" fill="rgb(249,149,8)" fg:x="24652" fg:w="18"/><text x="41.3469%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (145 samples, 0.24%)</title><rect x="40.9019%" y="165" width="0.2417%" height="15" fill="rgb(243,35,44)" fg:x="24535" fg:w="145"/><text x="41.1519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (93 samples, 0.16%)</title><rect x="40.9886%" y="149" width="0.1550%" height="15" fill="rgb(246,89,9)" fg:x="24587" fg:w="93"/><text x="41.2386%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.02%)</title><rect x="41.1269%" y="133" width="0.0167%" height="15" fill="rgb(233,213,13)" fg:x="24670" fg:w="10"/><text x="41.3769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (8 samples, 0.01%)</title><rect x="41.2036%" y="149" width="0.0133%" height="15" fill="rgb(233,141,41)" fg:x="24716" fg:w="8"/><text x="41.4536%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.03%)</title><rect x="41.2586%" y="133" width="0.0333%" height="15" fill="rgb(239,167,4)" fg:x="24749" fg:w="20"/><text x="41.5086%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.04%)</title><rect x="41.3203%" y="117" width="0.0350%" height="15" fill="rgb(209,217,16)" fg:x="24786" fg:w="21"/><text x="41.5703%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.07%)</title><rect x="41.3753%" y="101" width="0.0684%" height="15" fill="rgb(219,88,35)" fg:x="24819" fg:w="41"/><text x="41.6253%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.02%)</title><rect x="41.4287%" y="85" width="0.0150%" height="15" fill="rgb(220,193,23)" fg:x="24851" fg:w="9"/><text x="41.6787%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (54 samples, 0.09%)</title><rect x="41.3553%" y="117" width="0.0900%" height="15" fill="rgb(230,90,52)" fg:x="24807" fg:w="54"/><text x="41.6053%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (113 samples, 0.19%)</title><rect x="41.2920%" y="133" width="0.1884%" height="15" fill="rgb(252,106,19)" fg:x="24769" fg:w="113"/><text x="41.5420%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.04%)</title><rect x="41.4454%" y="117" width="0.0350%" height="15" fill="rgb(206,74,20)" fg:x="24861" fg:w="21"/><text x="41.6954%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (171 samples, 0.29%)</title><rect x="41.2170%" y="149" width="0.2851%" height="15" fill="rgb(230,138,44)" fg:x="24724" fg:w="171"/><text x="41.4670%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="41.4804%" y="133" width="0.0217%" height="15" fill="rgb(235,182,43)" fg:x="24882" fg:w="13"/><text x="41.7304%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.04%)</title><rect x="41.5020%" y="149" width="0.0383%" height="15" fill="rgb(242,16,51)" fg:x="24895" fg:w="23"/><text x="41.7520%" y="159.50"></text></g><g><title>rust_qecp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (492 samples, 0.82%)</title><rect x="40.7252%" y="197" width="0.8202%" height="15" fill="rgb(248,9,4)" fg:x="24429" fg:w="492"/><text x="40.9752%" y="207.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (404 samples, 0.67%)</title><rect x="40.8719%" y="181" width="0.6735%" height="15" fill="rgb(210,31,22)" fg:x="24517" fg:w="404"/><text x="41.1219%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (225 samples, 0.38%)</title><rect x="41.1703%" y="165" width="0.3751%" height="15" fill="rgb(239,54,39)" fg:x="24696" fg:w="225"/><text x="41.4203%" y="175.50"></text></g><g><title>rust_qecp`alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="41.5454%" y="197" width="0.0417%" height="15" fill="rgb(230,99,41)" fg:x="24921" fg:w="25"/><text x="41.7954%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_edges (11,158 samples, 18.60%)</title><rect x="23.0224%" y="213" width="18.6013%" height="15" fill="rgb(253,106,12)" fg:x="13810" fg:w="11158"/><text x="23.2724%" y="223.50">rust_qecp`rust_qecp::complete..</text></g><g><title>rust_qecp`rust_qecp::complete_model_graph::CompleteModelGraph::get_node_unwrap (22 samples, 0.04%)</title><rect x="41.5871%" y="197" width="0.0367%" height="15" fill="rgb(213,46,41)" fg:x="24946" fg:w="22"/><text x="41.8371%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7 samples, 0.01%)</title><rect x="41.6804%" y="197" width="0.0117%" height="15" fill="rgb(215,133,35)" fg:x="25002" fg:w="7"/><text x="41.9304%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.03%)</title><rect x="42.0538%" y="165" width="0.0300%" height="15" fill="rgb(213,28,5)" fg:x="25226" fg:w="18"/><text x="42.3038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.03%)</title><rect x="42.0588%" y="149" width="0.0250%" height="15" fill="rgb(215,77,49)" fg:x="25229" fg:w="15"/><text x="42.3088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="42.0605%" y="133" width="0.0233%" height="15" fill="rgb(248,100,22)" fg:x="25230" fg:w="14"/><text x="42.3105%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="42.0705%" y="117" width="0.0133%" height="15" fill="rgb(208,67,9)" fg:x="25236" fg:w="8"/><text x="42.3205%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (37 samples, 0.06%)</title><rect x="42.1039%" y="149" width="0.0617%" height="15" fill="rgb(219,133,21)" fg:x="25256" fg:w="37"/><text x="42.3539%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (66 samples, 0.11%)</title><rect x="42.0855%" y="165" width="0.1100%" height="15" fill="rgb(246,46,29)" fg:x="25245" fg:w="66"/><text x="42.3355%" y="175.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.02%)</title><rect x="42.1739%" y="149" width="0.0217%" height="15" fill="rgb(246,185,52)" fg:x="25298" fg:w="13"/><text x="42.4239%" y="159.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (143 samples, 0.24%)</title><rect x="41.9622%" y="181" width="0.2384%" height="15" fill="rgb(252,136,11)" fg:x="25171" fg:w="143"/><text x="42.2122%" y="191.50"></text></g><g><title>rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode (24,765 samples, 41.29%)</title><rect x="0.9269%" y="229" width="41.2853%" height="15" fill="rgb(219,138,53)" fg:x="556" fg:w="24765"/><text x="1.1769%" y="239.50">rust_qecp`rust_qecp::mwpm_decoder::MWPMDecoder::decode</text></g><g><title>rust_qecp`rust_qecp::simulator::SparseCorrection::extend (352 samples, 0.59%)</title><rect x="41.6254%" y="213" width="0.5868%" height="15" fill="rgb(211,51,23)" fg:x="24969" fg:w="352"/><text x="41.8754%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::SparseErrorPattern::add (312 samples, 0.52%)</title><rect x="41.6921%" y="197" width="0.5201%" height="15" fill="rgb(247,221,28)" fg:x="25009" fg:w="312"/><text x="41.9421%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (7 samples, 0.01%)</title><rect x="42.2006%" y="181" width="0.0117%" height="15" fill="rgb(251,222,45)" fg:x="25314" fg:w="7"/><text x="42.4506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="65.2313%" y="213" width="0.0383%" height="15" fill="rgb(217,162,53)" fg:x="39129" fg:w="23"/><text x="65.4813%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.03%)</title><rect x="65.2396%" y="197" width="0.0300%" height="15" fill="rgb(229,93,14)" fg:x="39134" fg:w="18"/><text x="65.4896%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (15 samples, 0.03%)</title><rect x="65.2446%" y="181" width="0.0250%" height="15" fill="rgb(209,67,49)" fg:x="39137" fg:w="15"/><text x="65.4946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (8 samples, 0.01%)</title><rect x="65.2563%" y="165" width="0.0133%" height="15" fill="rgb(213,87,29)" fg:x="39144" fg:w="8"/><text x="65.5063%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.04%)</title><rect x="65.2697%" y="213" width="0.0367%" height="15" fill="rgb(205,151,52)" fg:x="39152" fg:w="22"/><text x="65.5197%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="65.2947%" y="197" width="0.0117%" height="15" fill="rgb(253,215,39)" fg:x="39167" fg:w="7"/><text x="65.5447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (38 samples, 0.06%)</title><rect x="65.3063%" y="213" width="0.0633%" height="15" fill="rgb(221,220,41)" fg:x="39174" fg:w="38"/><text x="65.5563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.01%)</title><rect x="65.3697%" y="213" width="0.0100%" height="15" fill="rgb(218,133,21)" fg:x="39212" fg:w="6"/><text x="65.6197%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (888 samples, 1.48%)</title><rect x="65.3813%" y="213" width="1.4804%" height="15" fill="rgb(221,193,43)" fg:x="39219" fg:w="888"/><text x="65.6313%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors (32,442 samples, 54.08%)</title><rect x="42.2122%" y="229" width="54.0835%" height="15" fill="rgb(240,128,52)" fg:x="25321" fg:w="32442"/><text x="42.4622%" y="239.50">rust_qecp`rust_qecp::simulator::Simulator::generate_random_errors</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_errors (17,656 samples, 29.43%)</title><rect x="66.8617%" y="213" width="29.4340%" height="15" fill="rgb(253,114,12)" fg:x="40107" fg:w="17656"/><text x="67.1117%" y="223.50">rust_qecp`rust_qecp::simulator::Simulator::prop..</text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::propagate_error_from (13,675 samples, 22.80%)</title><rect x="73.4984%" y="197" width="22.7974%" height="15" fill="rgb(215,223,47)" fg:x="44088" fg:w="13675"/><text x="73.7484%" y="207.50">rust_qecp`rust_qecp::simulator::Simu..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.04%)</title><rect x="99.4715%" y="197" width="0.0350%" height="15" fill="rgb(248,225,23)" fg:x="59668" fg:w="21"/><text x="99.7215%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.04%)</title><rect x="99.4715%" y="181" width="0.0350%" height="15" fill="rgb(250,108,0)" fg:x="59668" fg:w="21"/><text x="99.7215%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.03%)</title><rect x="99.4782%" y="165" width="0.0283%" height="15" fill="rgb(228,208,7)" fg:x="59672" fg:w="17"/><text x="99.7282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.4949%" y="149" width="0.0117%" height="15" fill="rgb(244,45,10)" fg:x="59682" fg:w="7"/><text x="99.7449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.02%)</title><rect x="99.5466%" y="181" width="0.0233%" height="15" fill="rgb(207,125,25)" fg:x="59713" fg:w="14"/><text x="99.7966%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="99.5499%" y="165" width="0.0200%" height="15" fill="rgb(210,195,18)" fg:x="59715" fg:w="12"/><text x="99.7999%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.5516%" y="149" width="0.0183%" height="15" fill="rgb(249,80,12)" fg:x="59716" fg:w="11"/><text x="99.8016%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.5582%" y="133" width="0.0117%" height="15" fill="rgb(221,65,9)" fg:x="59720" fg:w="7"/><text x="99.8082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.05%)</title><rect x="99.6416%" y="165" width="0.0467%" height="15" fill="rgb(235,49,36)" fg:x="59770" fg:w="28"/><text x="99.8916%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.04%)</title><rect x="99.6482%" y="149" width="0.0400%" height="15" fill="rgb(225,32,20)" fg:x="59774" fg:w="24"/><text x="99.8982%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.03%)</title><rect x="99.6566%" y="133" width="0.0317%" height="15" fill="rgb(215,141,46)" fg:x="59779" fg:w="19"/><text x="99.9066%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="99.6766%" y="117" width="0.0117%" height="15" fill="rgb(250,160,47)" fg:x="59791" fg:w="7"/><text x="99.9266%" y="127.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (67 samples, 0.11%)</title><rect x="99.5782%" y="181" width="0.1117%" height="15" fill="rgb(216,222,40)" fg:x="59732" fg:w="67"/><text x="99.8282%" y="191.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (107 samples, 0.18%)</title><rect x="99.5149%" y="197" width="0.1784%" height="15" fill="rgb(234,217,39)" fg:x="59694" fg:w="107"/><text x="99.7649%" y="207.50"></text></g><g><title>rust_qecp`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (502 samples, 0.84%)</title><rect x="98.8797%" y="213" width="0.8369%" height="15" fill="rgb(207,178,40)" fg:x="59313" fg:w="502"/><text x="99.1297%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.02%)</title><rect x="99.6933%" y="197" width="0.0233%" height="15" fill="rgb(221,136,13)" fg:x="59801" fg:w="14"/><text x="99.9433%" y="207.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::generate_sparse_measurement (2,064 samples, 3.44%)</title><rect x="96.2957%" y="229" width="3.4409%" height="15" fill="rgb(249,199,10)" fg:x="57763" fg:w="2064"/><text x="96.5457%" y="239.50">rus..</text></g><g><title>rust_qecp`alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (12 samples, 0.02%)</title><rect x="99.7166%" y="213" width="0.0200%" height="15" fill="rgb(249,222,13)" fg:x="59815" fg:w="12"/><text x="99.9666%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (14 samples, 0.02%)</title><rect x="99.7383%" y="213" width="0.0233%" height="15" fill="rgb(244,185,38)" fg:x="59828" fg:w="14"/><text x="99.9883%" y="223.50"></text></g><g><title>rust_qecp`rust_qecp::simulator::Simulator::validate_correction (150 samples, 0.25%)</title><rect x="99.7366%" y="229" width="0.2501%" height="15" fill="rgb(236,202,9)" fg:x="59827" fg:w="150"/><text x="99.9866%" y="239.50"></text></g><g><title>rust_qecp`rust_qecp::code_builder::code_builder_validate_correction (135 samples, 0.23%)</title><rect x="99.7616%" y="213" width="0.2251%" height="15" fill="rgb(250,229,37)" fg:x="59842" fg:w="135"/><text x="100.0116%" y="223.50"></text></g><g><title>rust_qecp`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (10 samples, 0.02%)</title><rect x="99.9700%" y="197" width="0.0167%" height="15" fill="rgb(206,174,23)" fg:x="59967" fg:w="10"/><text x="100.2200%" y="207.50"></text></g><g><title>rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace (59,894 samples, 99.85%)</title><rect x="0.1467%" y="245" width="99.8483%" height="15" fill="rgb(211,33,43)" fg:x="88" fg:w="59894"/><text x="0.3967%" y="255.50">rust_qecp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (59,985 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="59985"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (59,930 samples, 99.91%)</title><rect x="0.0917%" y="309" width="99.9083%" height="15" fill="rgb(244,68,36)" fg:x="55" fg:w="59930"/><text x="0.3417%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (59,930 samples, 99.91%)</title><rect x="0.0917%" y="293" width="99.9083%" height="15" fill="rgb(232,229,15)" fg:x="55" fg:w="59930"/><text x="0.3417%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust_qecp`std::sys::unix::thread::Thread::new::thread_start (59,930 samples, 99.91%)</title><rect x="0.0917%" y="277" width="99.9083%" height="15" fill="rgb(254,30,23)" fg:x="55" fg:w="59930"/><text x="0.3417%" y="287.50">rust_qecp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}} (59,930 samples, 99.91%)</title><rect x="0.0917%" y="261" width="99.9083%" height="15" fill="rgb(235,160,14)" fg:x="55" fg:w="59930"/><text x="0.3417%" y="271.50">rust_qecp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g></svg></svg>